rank: 1
score: 99.92481578480114
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 1
score: 99.912763671875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination
rank: 1
score: 99.90832078313252
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 1
score: 99.89581440770348
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 1
score: 99.88645157724056
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 2
score: 99.91970750762195
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 2
score: 99.91663178943452
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 2
score: 99.9117578125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get
rank: 2
score: 99.88228149414063
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 2
score: 99.8774609375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL
rank: 2
score: 99.87640625
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 2
score: 99.86599766522988
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 2
score: 99.83949173328489
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 3
score: 99.91065001755618
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 3
score: 99.91025390625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination
rank: 3
score: 99.90680895353618
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 3
score: 99.89958984375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 )
rank: 3
score: 99.88025919596355
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 3
score: 99.87564174107143
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 3
score: 99.85984644396552
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 3
score: 99.83348547894022
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 4
score: 99.90861672794118
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 4
score: 99.90806640625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination
rank: 4
score: 99.90663109756098
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 4
score: 99.870546875
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 4
score: 99.86926553415698
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 4
score: 99.83177649456522
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 5
score: 99.906181640625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination
rank: 5
score: 99.90484064275569
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 5
score: 99.8965625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get
rank: 5
score: 99.87495457848837
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 5
score: 99.86669921875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL
rank: 5
score: 99.85455667747641
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 5
score: 99.82960559475806
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 6
score: 99.90453125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 6
score: 99.86961951622597
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 6
score: 99.82909159757654
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 7
score: 99.90906540890957
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 7
score: 99.90009765625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get
rank: 7
score: 99.89447265625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get
rank: 7
score: 99.87161180449695
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 7
score: 99.86840359669812
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 7
score: 99.8621484375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node (
rank: 7
score: 99.8542813387784
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 7
score: 99.82892600070225
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 8
score: 99.90906372070313
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 8
score: 99.899736328125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges
rank: 8
score: 99.89421875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value
rank: 8
score: 99.87110484730114
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 8
score: 99.86766656839623
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 8
score: 99.86066951308139
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 8
score: 99.8540862008427
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 8
score: 99.82864444813829
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 9
score: 99.90800573470744
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 9
score: 99.89986661585365
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 9
score: 99.896806640625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get
rank: 9
score: 99.894130859375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get
rank: 9
score: 99.86978759765626
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 9
score: 99.8662997159091
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 9
score: 99.860615234375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL
rank: 9
score: 99.82746731505102
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 10
score: 99.90070883075843
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 10
score: 99.859248046875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node . Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL
rank: 10
score: 99.82729640151516
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 11
score: 99.9059727044753
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 11
score: 99.89929640436748
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 11
score: 99.8982374811747
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 11
score: 99.89306640625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination
rank: 11
score: 99.8680752840909
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 11
score: 99.862685546875
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 11
score: 99.85860011888587
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 11
score: 99.85142780172414
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 11
score: 99.82693142361111
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 12
score: 99.9030428799716
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } }
rank: 12
score: 99.8990080758427
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 12
score: 99.895078125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get
rank: 12
score: 99.86638575424382
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 12
score: 99.857412109375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( g CaMeL Node != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node (
rank: 12
score: 99.82661576704545
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 13
score: 99.9023046875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges
rank: 13
score: 99.89851345486112
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } }
rank: 13
score: 99.8948828125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 13
score: 99.892041015625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get
rank: 13
score: 99.86622256324405
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 13
score: 99.857021484375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node (
rank: 14
score: 99.89816176470588
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 14
score: 99.8952303799716
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 14
score: 99.8902484939759
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 14
score: 99.86493055555556
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 14
score: 99.85995678191489
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 14
score: 99.85676326308139
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 14
score: 99.82559275072674
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 15
score: 99.90173828125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges
rank: 15
score: 99.89811197916667
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 15
score: 99.890244140625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL
rank: 15
score: 99.86368904532966
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == Branch . UNCOND ) ;
rank: 15
score: 99.85649073401163
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 15
score: 99.84864320146276
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 16
score: 99.90103116599462
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 16
score: 99.89545103561046
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } }
rank: 16
score: 99.8944121570122
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 16
score: 99.89298828125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value
rank: 16
score: 99.8895703125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value
rank: 16
score: 99.86329260537791
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 16
score: 99.859609375
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 16
score: 99.8558203125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n )
rank: 16
score: 99.848515625
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 16
score: 99.82242345328282
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 17
score: 99.90074091372283
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 17
score: 99.89310495476974
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 17
score: 99.86314498546511
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 1 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 17
score: 99.85896730885922
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 17
score: 99.85421875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n )
rank: 18
score: 99.89483963815789
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 18
score: 99.8917587104885
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 18
score: 99.86168416341145
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 18
score: 99.8540625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node . Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL
rank: 18
score: 99.82068256578947
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 19
score: 99.89393199573864
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 19
score: 99.86142985026042
patch: if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 19
score: 99.85751488095238
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 19
score: 99.853583984375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . has CaMeL Children ( ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL
rank: 19
score: 99.81994752209596
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 20
score: 99.890703125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get
rank: 20
score: 99.886611328125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) .
rank: 20
score: 99.86094945790816
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 20
score: 99.856943359375
patch: List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 20
score: 99.853271484375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL
rank: 20
score: 99.84509698275862
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 20
score: 99.81897095959596
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 21
score: 99.89829049059139
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 21
score: 99.8903125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value
rank: 21
score: 99.8861416903409
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 21
score: 99.86081949869792
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 21
score: 99.85693359375
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 22
score: 99.885400390625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get
rank: 22
score: 99.8565197172619
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 22
score: 99.85283430232558
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 22
score: 99.8183063009511
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 23
score: 99.89156668526786
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 23
score: 99.88962890625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination
rank: 23
score: 99.85977783203126
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 23
score: 99.851435546875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( g CaMeL Node != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node (
rank: 23
score: 99.84407894736842
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 24
score: 99.89016208400975
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } } }
rank: 24
score: 99.8594746492347
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 24
score: 99.85593860554245
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 24
score: 99.85052083333333
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 25
score: 99.8952734375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges
rank: 25
score: 99.88957075639205
patch: if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 25
score: 99.8842578125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination
rank: 25
score: 99.85945638020833
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 25
score: 99.85577002992021
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 25
score: 99.84362652658046
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 26
score: 99.889130859375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get
rank: 26
score: 99.88404296875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get
rank: 26
score: 99.85549991688829
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 26
score: 99.850224609375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL
rank: 26
score: 99.84351046580188
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 26
score: 99.81780935704023
patch: if ( n . get CaMeL Parent ( ) == null ) { break ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 27
score: 99.89458264802632
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } }
rank: 27
score: 99.89082239029256
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 27
score: 99.888955078125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value
rank: 27
score: 99.88877310403963
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 27
score: 99.85914276867378
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 27
score: 99.84319998204023
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 28
score: 99.89453125
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 28
score: 99.89077524038461
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 28
score: 99.888056640625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( )
rank: 28
score: 99.8873779296875
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 28
score: 99.883203125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get
rank: 28
score: 99.85902913411458
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 28
score: 99.85440516707921
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 28
score: 99.8498828125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . has CaMeL Children ( ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL
rank: 28
score: 99.84298406862744
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 28
score: 99.81761382728494
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 29
score: 99.88605986445783
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 29
score: 99.883193359375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Destination (
rank: 29
score: 99.85895244891827
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 29
score: 99.85416666666667
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 29
score: 99.84955078125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow
rank: 29
score: 99.81747436523438
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 30
score: 99.8940960427989
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 30
score: 99.88985460069445
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 30
score: 99.887451171875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination
rank: 30
score: 99.88513334297839
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 30
score: 99.883037109375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get
rank: 30
score: 99.8491796875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node . Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL
rank: 30
score: 99.8414453125
patch: List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 30
score: 99.81727666440217
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 31
score: 99.8897450206044
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 31
score: 99.886982421875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( )
rank: 31
score: 99.8834853753811
patch: if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 31
score: 99.8824609375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node . Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 )
rank: 31
score: 99.85878140318627
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 31
score: 99.85331294221699
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == $NUMBER$ ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 31
score: 99.84873046875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node . Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL
rank: 31
score: 99.84144365026596
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 31
score: 99.81698378696237
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 32
score: 99.88587890625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination
rank: 32
score: 99.88286013719512
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 32
score: 99.882431640625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) )
rank: 32
score: 99.85801391601562
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 32
score: 99.8530984526699
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 32
score: 99.848603515625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node (
rank: 32
score: 99.81695130813954
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 33
score: 99.8891369047619
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 33
score: 99.885576171875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if
rank: 33
score: 99.88261274857955
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } }
rank: 33
score: 99.85237630208333
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 33
score: 99.8483984375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis .
rank: 33
score: 99.81642747961956
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 34
score: 99.88899739583333
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 34
score: 99.885458984375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 )
rank: 34
score: 99.8817578125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination
rank: 34
score: 99.85782679115853
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 34
score: 99.84839434956395
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 34
score: 99.8162109375
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 35
score: 99.88897778614458
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 35
score: 99.885341796875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination
rank: 35
score: 99.88201149929775
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 35
score: 99.881650390625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get
rank: 35
score: 99.85778952205882
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) == Branch . UNCOND ) ;
rank: 35
score: 99.85216133549528
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> g CaMeL Node = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 35
score: 99.81620673723118
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ;
rank: 36
score: 99.88891059027777
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 36
score: 99.885283203125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination
rank: 36
score: 99.8819580078125
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 36
score: 99.8810702237216
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 36
score: 99.84017578125
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 36
score: 99.81579212306701
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 37
score: 99.8914462002841
patch: if ( n . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 37
score: 99.88756061422414
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 37
score: 99.8846875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out
rank: 37
score: 99.88157894736842
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 37
score: 99.88072265625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value
rank: 37
score: 99.85181603064903
patch: List < Di CaMeL Graph CaMeL Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 37
score: 99.84745456861413
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 37
score: 99.83987138856132
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 37
score: 99.81556595203489
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 38
score: 99.8875223795573
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 38
score: 99.8846484375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 )
rank: 38
score: 99.88145189606742
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } } }
rank: 38
score: 99.8569395483994
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 38
score: 99.81518308080808
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 39
score: 99.88716362847222
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } }
rank: 39
score: 99.879921875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) )
rank: 39
score: 99.8567425271739
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 39
score: 99.85162109375
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 39
score: 99.83935546875
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 39
score: 99.8150621639785
patch: if ( n . get CaMeL Parent ( ) == null ) { break ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 40
score: 99.89066938920455
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 40
score: 99.88700657894736
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 40
score: 99.8557781559406
patch: if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 40
score: 99.85115872896634
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 40
score: 99.846982421875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL
rank: 40
score: 99.81503224927326
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 41
score: 99.8906640625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination
rank: 41
score: 99.88695406626506
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 41
score: 99.850947265625
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 41
score: 99.83882329705057
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 41
score: 99.81496823489012
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 42
score: 99.890625
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 42
score: 99.8836328125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination
rank: 42
score: 99.87913074712644
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return null ; }
rank: 42
score: 99.85474823742378
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 42
score: 99.846845703125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node (
rank: 43
score: 99.8901647808908
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; }
rank: 43
score: 99.88689313616071
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 43
score: 99.8790234375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get
rank: 43
score: 99.8544921875
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 43
score: 99.85055374313187
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 43
score: 99.846748046875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL
rank: 43
score: 99.83858953737744
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 43
score: 99.81476702008929
patch: if ( n . get CaMeL Parent ( ) != null ) { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 44
score: 99.88685042134831
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 44
score: 99.883486328125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination
rank: 44
score: 99.87979239004629
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 44
score: 99.878271484375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value
rank: 44
score: 99.85439453125
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 44
score: 99.85052144752359
patch: Di CaMeL Graph CaMeL Node < Node , Integer >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 44
score: 99.84674479166667
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 44
score: 99.81458963373656
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 45
score: 99.88971891108247
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 45
score: 99.88679823764535
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 45
score: 99.883447265625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination
rank: 45
score: 99.87802734375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node . Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 )
rank: 45
score: 99.85433857092697
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 45
score: 99.84659476902173
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 45
score: 99.83843439275569
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 46
score: 99.88610258556548
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } }
rank: 46
score: 99.8830859375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get
rank: 46
score: 99.87815163352273
patch: if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 46
score: 99.87775390625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Node >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get
rank: 46
score: 99.85427024147727
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 46
score: 99.85032797759433
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 46
score: 99.84646484375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL
rank: 46
score: 99.83841911764706
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 46
score: 99.81409222146739
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 47
score: 99.889111328125
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 47
score: 99.88607933407738
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } } }
rank: 47
score: 99.882587890625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination
rank: 47
score: 99.87766768292683
patch: if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 47
score: 99.8769921875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { out CaMeL Edges . add ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges
rank: 47
score: 99.8541156814759
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 47
score: 99.84617017663044
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 47
score: 99.81397619912791
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 48
score: 99.889091796875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination
rank: 48
score: 99.882509765625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination
rank: 48
score: 99.87737165178571
patch: if ( g CaMeL Node != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 48
score: 99.87656908356742
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return out CaMeL Edges ; }
rank: 48
score: 99.85408203125
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 48
score: 99.845791015625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis .
rank: 48
score: 99.81385869565217
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 49
score: 99.882431640625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 )
rank: 49
score: 99.87728230337079
patch: if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 49
score: 99.876064453125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Value (
rank: 49
score: 99.849873046875
patch: List < Token >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 49
score: 99.84448809956395
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 49
score: 99.83796258223684
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 49
score: 99.81381194760101
patch: List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 50
score: 99.88870442708334
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 50
score: 99.8854128815407
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 50
score: 99.882099609375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get
rank: 50
score: 99.87717799136513
patch: if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 50
score: 99.875869140625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } else { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL
rank: 50
score: 99.85366675967262
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 50
score: 99.84956331073113
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 50
score: 99.84369140625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow
rank: 50
score: 99.8378282912234
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 50
score: 99.81374193274456
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 51
score: 99.888623046875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination
rank: 51
score: 99.88208984375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get
rank: 51
score: 99.87688971185065
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } } }
rank: 51
score: 99.8536044034091
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Branch . UNCOND ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 51
score: 99.843564453125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( g CaMeL Node != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node (
rank: 51
score: 99.83781020220589
patch: if ( n . get CaMeL Parent ( ) != null ) { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 51
score: 99.8136442550505
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 52
score: 99.888134765625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out
rank: 52
score: 99.88442278922872
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 52
score: 99.88193359375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 52
score: 99.87611083984375
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 52
score: 99.84899662990196
patch: List < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 52
score: 99.84348060344827
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , ) ;
rank: 52
score: 99.83774470186782
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 52
score: 99.81359206989248
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 53
score: 99.88810048204788
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } }
rank: 53
score: 99.88395353618421
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 53
score: 99.8816796875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination
rank: 53
score: 99.87576081031976
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 53
score: 99.87543776939656
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 53
score: 99.85340711805556
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 53
score: 99.84894604952831
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ! out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 53
score: 99.843359375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node . Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL
rank: 53
score: 99.8377097800926
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 54
score: 99.88806640625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value (
rank: 54
score: 99.88376686789773
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ; } }
rank: 54
score: 99.87509060889175
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 54
score: 99.87485113376525
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 54
score: 99.84893663194444
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 54
score: 99.84309138808139
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 54
score: 99.83752852879213
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 54
score: 99.81308369252874
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 55
score: 99.88779058689025
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 55
score: 99.88348182935393
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } }
rank: 55
score: 99.8815625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } Set < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination
rank: 55
score: 99.87501176581326
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) {
rank: 55
score: 99.85289996603261
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 55
score: 99.84885602678571
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 55
score: 99.83743851273148
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 55
score: 99.81271142074742
patch: if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 56
score: 99.8875919117647
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 56
score: 99.88319905598958
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } }
rank: 56
score: 99.88150390625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0
rank: 56
score: 99.874736328125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges
rank: 56
score: 99.8528209568299
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 56
score: 99.8487710053066
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 56
score: 99.84267064144737
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 56
score: 99.81264426491477
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { break ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 57
score: 99.88751953125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } Di CaMeL Graph CaMeL Edge out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL
rank: 57
score: 99.8742234563253
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 57
score: 99.85279815051021
patch: if ( n . get CaMeL Parent ( ) == null || g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 57
score: 99.84257593047752
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , out CaMeL Edges . get ( 0 ) ) ;
rank: 57
score: 99.83741918103448
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 57
score: 99.81246014030613
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 58
score: 99.88260569852942
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 58
score: 99.87455714026163
patch: if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 58
score: 99.87419921875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) )
rank: 58
score: 99.8526252297794
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 58
score: 99.84811689268868
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 58
score: 99.842509765625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL
rank: 58
score: 99.83741251627605
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 58
score: 99.8124469259511
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 59
score: 99.8866015625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . is CaMeL Empty ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching
rank: 59
score: 99.88257640796704
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 59
score: 99.87449488146552
patch: if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 59
score: 99.8741796875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) .
rank: 59
score: 99.85257022938829
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 59
score: 99.84809283088235
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 59
score: 99.842392578125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node (
rank: 59
score: 99.8373376317771
patch: if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 60
score: 99.882421875
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } } }
rank: 60
score: 99.87417639307229
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 60
score: 99.87412109375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) .
rank: 60
score: 99.85256177325581
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 60
score: 99.842333984375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL
rank: 60
score: 99.83733102176966
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 60
score: 99.81214677526596
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { break ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 61
score: 99.885595703125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination
rank: 61
score: 99.88221108041158
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 61
score: 99.880791015625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } Set < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get
rank: 61
score: 99.87316001333842
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 61
score: 99.85206283757717
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 61
score: 99.8477857940051
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 61
score: 99.842001953125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . BLOCK ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value
rank: 61
score: 99.81200668492268
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 62
score: 99.885478515625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . is CaMeL Empty ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 )
rank: 62
score: 99.88207125376506
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 62
score: 99.873828125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination
rank: 62
score: 99.87310236150569
patch: while ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 62
score: 99.8475390625
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 62
score: 99.8419921875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node (
rank: 62
score: 99.81187666223404
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 63
score: 99.88181515957447
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 63
score: 99.880517578125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get
rank: 63
score: 99.87298029119319
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } }
rank: 63
score: 99.841376953125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow
rank: 63
score: 99.83689186789773
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 63
score: 99.81148175495427
patch: if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 64
score: 99.885380859375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value (
rank: 64
score: 99.88170088098404
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 64
score: 99.87246775072674
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 64
score: 99.85157359730114
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 64
score: 99.84130859375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node . Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL
rank: 64
score: 99.83685546875
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 64
score: 99.81148097826087
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 65
score: 99.8814925309066
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } }
rank: 65
score: 99.8803515625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get
rank: 65
score: 99.873095703125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } else { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out
rank: 65
score: 99.87146889291158
patch: if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 65
score: 99.85132087628865
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 65
score: 99.84697449882076
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 65
score: 99.84123727176966
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else {
rank: 65
score: 99.83681418678977
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 65
score: 99.81145438762626
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ;
rank: 66
score: 99.87033293968024
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 66
score: 99.85128784179688
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 66
score: 99.840888671875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n )
rank: 66
score: 99.83673901827831
patch: Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 66
score: 99.81134905133929
patch: if ( n . get CaMeL Parent ( ) == null ) { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 67
score: 99.88522206182066
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 67
score: 99.88105254120879
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } } }
rank: 67
score: 99.87002954727564
patch: if ( g CaMeL Node != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 67
score: 99.85123365752551
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . BLOCK ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 67
score: 99.84065047554348
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 67
score: 99.83661099137932
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 67
score: 99.81128427933673
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 68
score: 99.86995239257813
patch: if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 68
score: 99.8512295809659
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 68
score: 99.84681114783653
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 68
score: 99.84045694040698
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 69
score: 99.88482111150569
patch: if ( n . get CaMeL Out ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 69
score: 99.88069478581461
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 69
score: 99.879443359375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) )
rank: 69
score: 99.87158203125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination
rank: 69
score: 99.8698936370482
patch: if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 69
score: 99.85109456380208
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 69
score: 99.84029296875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . is CaMeL Empty ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL
rank: 69
score: 99.83643617021276
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 69
score: 99.8110598169192
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 70
score: 99.88050615026596
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 70
score: 99.871533203125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value
rank: 70
score: 99.86974411867978
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } } }
rank: 70
score: 99.85102879723837
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == $NUMBER$ ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 70
score: 99.84021484375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute
rank: 70
score: 99.83621987951807
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 70
score: 99.81062741623711
patch: if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 71
score: 99.88026646205357
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } } }
rank: 71
score: 99.879208984375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get (
rank: 71
score: 99.871240234375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) )
rank: 71
score: 99.86944025213069
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 71
score: 99.8510233561198
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 1 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 71
score: 99.84652306898585
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) < 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 71
score: 99.8400390625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Node >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL
rank: 71
score: 99.83617281626506
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 71
score: 99.81053637432795
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 72
score: 99.87993829900569
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 72
score: 99.878916015625
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 72
score: 99.86911680640245
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 72
score: 99.8509051983173
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 72
score: 99.84650213068181
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 72
score: 99.8397340238764
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 72
score: 99.836015625
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; }
rank: 73
score: 99.87983988667582
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 73
score: 99.87873046875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination
rank: 73
score: 99.87099387428977
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 73
score: 99.86896506320225
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 73
score: 99.85090414325843
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 73
score: 99.81044298537235
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 74
score: 99.87973090277778
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 74
score: 99.87865234375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get
rank: 74
score: 99.87087890625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) )
rank: 74
score: 99.84622896634616
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 74
score: 99.839619140625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get (
rank: 74
score: 99.83580525716145
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 74
score: 99.81044072690217
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 75
score: 99.87940538194445
patch: / * if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 75
score: 99.878447265625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get (
rank: 75
score: 99.86868722098214
patch: if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 75
score: 99.85044783775253
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 75
score: 99.83955078125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . has CaMeL Children ( ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL
rank: 75
score: 99.83578814338236
patch: if ( n . get CaMeL Parent ( ) == null ) { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 76
score: 99.878251953125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get
rank: 76
score: 99.870703125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges
rank: 76
score: 99.86859939759036
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 76
score: 99.85032621343085
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 76
score: 99.83950737847222
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 76
score: 99.83577127659575
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 76
score: 99.81019485828489
patch: if ( n . get CaMeL Parent ( ) != null ) { Node < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 77
score: 99.878232421875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination
rank: 77
score: 99.86844482421876
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 77
score: 99.85022911658653
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 77
score: 99.84605916341145
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 77
score: 99.839443359375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node (
rank: 77
score: 99.83569610252809
patch: if ( n . get CaMeL Parent ( ) == null ) { try { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 77
score: 99.81017287234043
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 78
score: 99.87913602941177
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } }
rank: 78
score: 99.878134765625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination
rank: 78
score: 99.870634765625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 )
rank: 78
score: 99.86826654128086
patch: if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 78
score: 99.84557166466347
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 78
score: 99.839423828125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node (
rank: 78
score: 99.80990998641305
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 79
score: 99.88392578125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } Iterator < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination
rank: 79
score: 99.877998046875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination
rank: 79
score: 99.87048192771084
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 79
score: 99.86810793821839
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; }
rank: 79
score: 99.85005139802631
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 79
score: 99.8394140625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n
rank: 79
score: 99.83561197916667
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 79
score: 99.80985637626263
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 80
score: 99.88380859375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out
rank: 80
score: 99.87885974702381
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ; } }
rank: 80
score: 99.877978515625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get
rank: 80
score: 99.86785386029412
patch: if ( g CaMeL Node != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 80
score: 99.8499033938172
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 80
score: 99.8454256924716
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 80
score: 99.83551580255681
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ! out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 80
score: 99.80961573401163
patch: if ( n . get CaMeL Parent ( ) == null ) { Node < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 81
score: 99.87874348958333
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 81
score: 99.87015625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) )
rank: 81
score: 99.84983317057292
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 81
score: 99.839296875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . BLOCK ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value
rank: 81
score: 99.80943231997283
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 82
score: 99.88364615091463
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 82
score: 99.87013963721265
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; }
rank: 82
score: 99.84975363991477
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 82
score: 99.84508431311882
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ! out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 82
score: 99.839169921875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node (
rank: 82
score: 99.80940230174731
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 83
score: 99.883642578125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges
rank: 83
score: 99.87870456861413
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } }
rank: 83
score: 99.87004573170732
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 )
rank: 83
score: 99.86740112304688
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 83
score: 99.84959852430555
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 83
score: 99.84498697916666
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 83
score: 99.83908420138889
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 83
score: 99.80928819444445
patch: if ( n . get CaMeL Parent ( ) != null ) { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 84
score: 99.87855302526596
patch: out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 84
score: 99.87734375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges
rank: 84
score: 99.870009765625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get
rank: 84
score: 99.86733176491477
patch: if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } }
rank: 84
score: 99.84956498579545
patch: if ( n . get CaMeL Type ( ) == Token . BLOCK ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 84
score: 99.84478290264423
patch: Di CaMeL Graph CaMeL Node < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 84
score: 99.8390261627907
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 85
score: 99.87849264705882
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } } }
rank: 85
score: 99.877333984375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } Set < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination
rank: 85
score: 99.86991979720744
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 85
score: 99.8669666108631
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 85
score: 99.84909057617188
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 85
score: 99.84476448725728
patch: if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 85
score: 99.83519071691177
patch: if ( n . has CaMeL Children ( ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 85
score: 99.80916078629032
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 86
score: 99.883359375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } Di CaMeL Graph CaMeL Edge out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) .
rank: 86
score: 99.8773046875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges
rank: 86
score: 99.8698828125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value (
rank: 86
score: 99.86661783854167
patch: if ( g CaMeL Node != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 86
score: 99.84904641544118
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 86
score: 99.844658203125
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 86
score: 99.838955078125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n )
rank: 86
score: 99.80909682765152
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 87
score: 99.8779296875
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 87
score: 99.87728515625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get
rank: 87
score: 99.86630025724085
patch: while ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 87
score: 99.8489424542683
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 87
score: 99.84458705357143
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 87
score: 99.838759765625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node . Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node (
rank: 87
score: 99.80880604619566
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 88
score: 99.87764282226563
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 88
score: 99.869326171875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) )
rank: 88
score: 99.8662109375
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 88
score: 99.84450545400944
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 88
score: 99.83868018617021
patch: if ( n . get CaMeL Parent ( ) == null || n . has CaMeL Children ( ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 88
score: 99.8350390625
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 88
score: 99.80857402146465
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 89
score: 99.8829375476372
patch: if ( n . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 89
score: 99.8690782912234
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 89
score: 99.86603133979885
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 89
score: 99.84883626302083
patch: if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( g CaMeL Node . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 89
score: 99.84433013613861
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 89
score: 99.83851207386364
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ) ;
rank: 89
score: 99.83494888117283
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 89
score: 99.80854392538265
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 90
score: 99.882802734375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . length == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get
rank: 90
score: 99.87749794407895
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 90
score: 99.87711759868421
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } }
rank: 90
score: 99.8690185546875
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 90
score: 99.86598051264045
patch: if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 90
score: 99.84873404153963
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 90
score: 99.8441521139706
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 90
score: 99.83849609375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node . Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL
rank: 90
score: 99.834873046875
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 90
score: 99.80842573924731
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 91
score: 99.88279277146465
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 91
score: 99.87744701867815
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } } }
rank: 91
score: 99.876962890625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination
rank: 91
score: 99.868994140625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges
rank: 91
score: 99.84407552083333
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ! out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 91
score: 99.838408203125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination
rank: 91
score: 99.80841619318181
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 92
score: 99.87725539434524
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 92
score: 99.876845703125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) )
rank: 92
score: 99.843974609375
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 92
score: 99.834775390625
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 93
score: 99.8826171875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges
rank: 93
score: 99.8771484375
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 93
score: 99.87681640625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get
rank: 93
score: 99.86588911576705
patch: if ( out . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 93
score: 99.84854970079788
patch: switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 93
score: 99.8438251201923
patch: List < Di CaMeL Graph CaMeL Edge >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 93
score: 99.837841796875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( )
rank: 93
score: 99.83475413602942
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 93
score: 99.80833466198979
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 94
score: 99.882548828125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } for ( Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get
rank: 94
score: 99.8771260579427
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 94
score: 99.876806640625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get
rank: 94
score: 99.84852549793956
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 94
score: 99.84376842570755
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 94
score: 99.8347490418632
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 94
score: 99.80813999368686
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 95
score: 99.882451171875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination
rank: 95
score: 99.87703857421874
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 95
score: 99.876748046875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( )
rank: 95
score: 99.868779296875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 )
rank: 95
score: 99.84847810952971
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 95
score: 99.84375
patch: List < Di CaMeL Graph CaMeL Edge , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 95
score: 99.837802734375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node (
rank: 95
score: 99.80811682412791
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 96
score: 99.88228515625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( )
rank: 96
score: 99.87687001329788
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 96
score: 99.87666015625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } Set < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination
rank: 96
score: 99.86579411204268
patch: if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 96
score: 99.84846443965517
patch: if ( n . get CaMeL Parent ( ) == null ) { { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 96
score: 99.83461013349515
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 96
score: 99.80803571428571
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 97
score: 99.8822245695153
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 97
score: 99.87680767952128
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ; } }
rank: 97
score: 99.876513671875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination
rank: 97
score: 99.868603515625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get
rank: 97
score: 99.86564331054687
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 97
score: 99.84830932617187
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 1 ) . get CaMeL Value ( ) ) ;
rank: 97
score: 99.84361349126344
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 97
score: 99.83735988451087
patch: if ( n . get CaMeL Parent ( ) . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 97
score: 99.80783420138889
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 98
score: 99.8821484375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } else { return g CaMeL Node . get CaMeL Out CaMeL Edges
rank: 98
score: 99.87655811095506
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ; } } }
rank: 98
score: 99.876064453125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { throw try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination
rank: 98
score: 99.868271484375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value
rank: 98
score: 99.86559165396342
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 98
score: 99.84804888853093
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 98
score: 99.83435444078947
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 98
score: 99.80780460858585
patch: List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 99
score: 99.87655784970238
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 99
score: 99.8759375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 1 ) . get CaMeL Destination
rank: 99
score: 99.86548132183908
patch: if ( n . get CaMeL Parent ( ) == null ) List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 99
score: 99.84802875322166
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Branch . UNCOND ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 99
score: 99.83718133223684
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 99
score: 99.83431783536585
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 99
score: 99.8077059659091
patch: List < Node >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 100
score: 99.882119140625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } Iterator < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination
rank: 100
score: 99.87611897786458
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 100
score: 99.875654296875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination
rank: 100
score: 99.8679923592033
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( out CaMeL Edges . get ( 0 ) ) ;
rank: 100
score: 99.86521218039773
patch: if ( n . get CaMeL Parent ( ) . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 100
score: 99.8480078125
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 100
score: 99.83709067486703
patch: if ( n . get CaMeL Parent ( ) == null && n . has CaMeL Children ( ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 100
score: 99.80765010533707
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 101
score: 99.86435193900603
patch: if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 101
score: 99.84779986213235
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 101
score: 99.84331489789604
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 101
score: 99.83696954900569
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , n ) ;
rank: 101
score: 99.83419215425532
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 101
score: 99.80759684244792
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 102
score: 99.88197544642857
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 102
score: 99.87592230902777
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 102
score: 99.875478515625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( )
rank: 102
score: 99.867919921875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { out CaMeL Edges . add ( g CaMeL Node . get CaMeL Destination ( ) . get
rank: 102
score: 99.86424560546875
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 102
score: 99.84763590494792
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 102
score: 99.84330001531863
patch: Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 102
score: 99.83693625710227
patch: if ( g CaMeL Node . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 102
score: 99.80759595788044
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 103
score: 99.88193359375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get
rank: 103
score: 99.87525390625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) <= 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination
rank: 103
score: 99.867822265625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get
rank: 103
score: 99.86411830357143
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } } }
rank: 103
score: 99.84761962890624
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 103
score: 99.8431865985577
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 103
score: 99.83658854166667
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 103
score: 99.80757649739583
patch: if ( n . get CaMeL Parent ( ) != null ) { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 104
score: 99.8816796875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges
rank: 104
score: 99.87564054099462
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 104
score: 99.875185546875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination
rank: 104
score: 99.86767578125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } Collection < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get
rank: 104
score: 99.86409703696647
patch: if ( g CaMeL Node != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 104
score: 99.847548828125
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 104
score: 99.8364317358994
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 104
score: 99.8334452311198
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 104
score: 99.80748213098404
patch: if ( n . get CaMeL Parent ( ) != null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 105
score: 99.87564019097222
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 105
score: 99.87509765625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get
rank: 105
score: 99.84746691645408
patch: if ( n . get CaMeL Parent ( ) == null || g CaMeL Node . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 105
score: 99.843037109375
patch: List < Node >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 105
score: 99.83628216911765
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 105
score: 99.83338758680556
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 106
score: 99.867626953125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get
rank: 106
score: 99.86366031044408
patch: if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 106
score: 99.84738026494566
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 106
score: 99.84296690742924
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 106
score: 99.80735809948979
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 107
score: 99.88120339133523
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 107
score: 99.86356362951807
patch: if ( g CaMeL Node != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 107
score: 99.84731223366477
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 107
score: 99.84287477889151
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 107
score: 99.833251953125
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 107
score: 99.8072509765625
patch: if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 108
score: 99.87534015098315
patch: } if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 108
score: 99.8749767485119
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 108
score: 99.86716396837349
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) ;
rank: 108
score: 99.86355516387195
patch: if ( out != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 108
score: 99.84730021158855
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 108
score: 99.83584665697674
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) <= 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 108
score: 99.83319434691012
patch: if ( g CaMeL Node . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 109
score: 99.87531866776315
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 109
score: 99.874970703125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 109
score: 99.8670684070122
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 109
score: 99.86333737428161
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 109
score: 99.80708735039893
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 110
score: 99.8810546875
patch: if ( g CaMeL Node . get CaMeL Out ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 110
score: 99.87531467013889
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 110
score: 99.8748828125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL
rank: 110
score: 99.86705078125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < T > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get
rank: 110
score: 99.84711248224431
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 110
score: 99.84267578125
patch: List < Token > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 110
score: 99.83565687859195
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 110
score: 99.80704579454788
patch: if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 111
score: 99.881015625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges
rank: 111
score: 99.87453125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges
rank: 111
score: 99.86705078125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges
rank: 111
score: 99.86322447311046
patch: if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 111
score: 99.84708485704788
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 111
score: 99.8426487699468
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 111
score: 99.83558548328489
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 111
score: 99.8329112293956
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 111
score: 99.80698714717742
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 112
score: 99.87453125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get
rank: 112
score: 99.866953125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } Map < Di CaMeL Graph CaMeL Edge , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get
rank: 112
score: 99.86311479048295
patch: if ( node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 112
score: 99.84255232900944
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { throw try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 112
score: 99.83541737432066
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 112
score: 99.83283203125
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 112
score: 99.80694514448925
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 113
score: 99.8809787326389
patch: if ( g CaMeL Node . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 113
score: 99.86306797772988
patch: if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 113
score: 99.8470388829023
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 1 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 113
score: 99.84251237623762
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 113
score: 99.83536241319445
patch: if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 113
score: 99.80686442057292
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ;
rank: 114
score: 99.88097162356321
patch: if ( n . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 114
score: 99.87473754882812
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } } }
rank: 114
score: 99.874462890625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL
rank: 114
score: 99.86679922816265
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 114
score: 99.86302601207386
patch: if ( n . get CaMeL Node ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 114
score: 99.84689543968024
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 114
score: 99.84249745244566
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 114
score: 99.80685879321808
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Node < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 115
score: 99.88095287566489
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 115
score: 99.87464396158855
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } } }
rank: 115
score: 99.87443359375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination
rank: 115
score: 99.86297286184211
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 115
score: 99.8468505859375
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 115
score: 99.83514053520115
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node ) , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 115
score: 99.83267106681035
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 115
score: 99.80678923233695
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 116
score: 99.87462361653645
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 116
score: 99.874423828125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get
rank: 116
score: 99.86666015625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get
rank: 116
score: 99.86247950424382
patch: if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 116
score: 99.84662986288265
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL Next ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ) ;
rank: 116
score: 99.84212853773585
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) <= 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 116
score: 99.83258928571429
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 116
score: 99.80677568151596
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 117
score: 99.880615234375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out
rank: 117
score: 99.87454927884616
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } }
rank: 117
score: 99.87435546875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) <= 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get
rank: 117
score: 99.866591796875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = this . g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get (
rank: 117
score: 99.86200561523438
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 117
score: 99.84651322798295
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 117
score: 99.84212561881188
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 117
score: 99.83252874410377
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ; }
rank: 118
score: 99.88052734375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges
rank: 118
score: 99.87431640625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } Set < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 118
score: 99.8665625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( out CaMeL Edges ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get
rank: 118
score: 99.86185128348214
patch: if ( g CaMeL Node != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 118
score: 99.84644664417614
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 118
score: 99.84209449404761
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == $NUMBER$ ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 118
score: 99.8349609375
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 118
score: 99.83249189268868
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 119
score: 99.87450657894736
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 119
score: 99.87423828125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 1 ) . get CaMeL Destination
rank: 119
score: 99.86654296875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get
rank: 119
score: 99.86171216643258
patch: else if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 119
score: 99.84639070471938
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 119
score: 99.84205078125
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == $NUMBER$ ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 119
score: 99.83492838541666
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 119
score: 99.80641143176021
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 120
score: 99.87442835365853
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 120
score: 99.86648220486111
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } else {
rank: 120
score: 99.86164202008929
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 120
score: 99.84622628348214
patch: if ( n . has CaMeL Children ( ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 120
score: 99.83488325639205
patch: if ( cur CaMeL Cfg . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 120
score: 99.8323948636968
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 121
score: 99.880419921875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out
rank: 121
score: 99.87441618546195
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } }
rank: 121
score: 99.87413894489248
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 121
score: 99.86152116642442
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 121
score: 99.84168526785714
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 121
score: 99.80631856715425
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 122
score: 99.880380859375
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 122
score: 99.87421875
patch: } else if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 122
score: 99.8741015625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL
rank: 122
score: 99.8660546875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = this . g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get (
rank: 122
score: 99.86143909801136
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 122
score: 99.8416722074468
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 122
score: 99.83191697140957
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 122
score: 99.80629832474227
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 123
score: 99.87421169051204
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 123
score: 99.8659765625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value
rank: 123
score: 99.86137084960937
patch: if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 123
score: 99.84584111752717
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } else { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 123
score: 99.8412262991573
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 123
score: 99.83468495244566
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 123
score: 99.80626662234043
patch: if ( g CaMeL Node . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 124
score: 99.880234375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges
rank: 124
score: 99.87411595394737
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 124
score: 99.86583984375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } Iterator < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get
rank: 124
score: 99.8613471489448
patch: if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } } }
rank: 124
score: 99.8457919034091
patch: if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 124
score: 99.83467487373737
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ) ;
rank: 124
score: 99.83166915379213
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 124
score: 99.80625658356742
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 125
score: 99.87411121839888
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 125
score: 99.84115513392857
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> g CaMeL Node = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 125
score: 99.834658203125
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Node >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 125
score: 99.83164720856742
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; }
rank: 125
score: 99.80623619002525
patch: if ( n . get CaMeL Parent ( ) == null ) { break ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 126
score: 99.87406885901163
patch: / * if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 126
score: 99.86112132352942
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 126
score: 99.84100045509709
patch: List < Di CaMeL Graph CaMeL Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 126
score: 99.83450520833334
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 126
score: 99.80623372395833
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return n ; }
rank: 127
score: 99.87994140625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out
rank: 127
score: 99.8740466889881
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } } }
rank: 127
score: 99.87227879213484
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 127
score: 99.86539909638554
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 127
score: 99.86111450195312
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 127
score: 99.84567440257354
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , g CaMeL Node . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 127
score: 99.83436650815217
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ;
rank: 127
score: 99.83154296875
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 127
score: 99.80615795617815
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return n ; }
rank: 128
score: 99.87397954705057
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 128
score: 99.87211626838236
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } finally { out CaMeL Edges . close ( ) ; }
rank: 128
score: 99.86530095880681
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 128
score: 99.86098345588235
patch: if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 128
score: 99.84541924055233
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 128
score: 99.8342922044837
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 128
score: 99.83126316713484
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 129
score: 99.87989390980114
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) <= 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 129
score: 99.8739137113764
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } }
rank: 129
score: 99.84540632659314
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . BLOCK ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 129
score: 99.84063165838069
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 129
score: 99.83425564236111
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 129
score: 99.83122051886792
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 129
score: 99.80596985479798
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 130
score: 99.879853515625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ! try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get
rank: 130
score: 99.87158751755618
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 130
score: 99.865048828125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) .
rank: 130
score: 99.86083984375
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 130
score: 99.84519491390306
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 130
score: 99.83421148255815
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 130
score: 99.8059205334596
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 131
score: 99.87369384765626
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 131
score: 99.87151070926966
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 131
score: 99.86498046875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) .
rank: 131
score: 99.86082874644886
patch: if ( n . get CaMeL Parent ( ) == null ) { Node < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 131
score: 99.84514973958333
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 131
score: 99.84043355507426
patch: List < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 131
score: 99.80589507728494
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 132
score: 99.87983940972222
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 132
score: 99.87368328651685
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 132
score: 99.8713146391369
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 132
score: 99.8649609375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) )
rank: 132
score: 99.8608065518466
patch: while ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 132
score: 99.8451171875
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 132
score: 99.840283203125
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 132
score: 99.83362833658855
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node . Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 132
score: 99.83076908903301
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 132
score: 99.80587022569445
patch: if ( n . get CaMeL Parent ( ) == null ) { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 133
score: 99.87367393092106
patch: out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 133
score: 99.83362100290698
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 1 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 133
score: 99.80586381392045
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 134
score: 99.87974654796511
patch: if ( n . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 134
score: 99.8734728224734
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 134
score: 99.864814453125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( )
rank: 134
score: 99.86069557883523
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Type ( ) ) ; } }
rank: 134
score: 99.84483119419643
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 134
score: 99.84023832070707
patch: List < Token >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 134
score: 99.83052800210675
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 134
score: 99.80586357526882
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 135
score: 99.87329644097223
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ; } }
rank: 135
score: 99.864794921875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get
rank: 135
score: 99.86051628388554
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 135
score: 99.8446756998698
patch: if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 135
score: 99.8402135163835
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 135
score: 99.83354235197369
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 135
score: 99.83052034198113
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 1 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 135
score: 99.80578476123596
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 136
score: 99.879541015625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . is CaMeL Empty ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching
rank: 136
score: 99.86443359375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Node >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get
rank: 136
score: 99.86048418209876
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 136
score: 99.8446734884511
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 136
score: 99.84012934846699
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 136
score: 99.83346667921687
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else {
rank: 136
score: 99.83049406828704
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 136
score: 99.80567456317205
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 137
score: 99.864306640625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( )
rank: 137
score: 99.84466552734375
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 137
score: 99.84006911057692
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } return n ;
rank: 137
score: 99.83338758680556
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 137
score: 99.83039434523809
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 137
score: 99.8056640625
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 138
score: 99.879404296875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination (
rank: 138
score: 99.87302517361111
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } }
rank: 138
score: 99.870458984375
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 138
score: 99.86426788015464
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 138
score: 99.8603182705966
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 138
score: 99.84462193080357
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 138
score: 99.84002036236703
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 138
score: 99.83243027553763
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ) ;
rank: 138
score: 99.83025390625
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 138
score: 99.80564433396465
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 139
score: 99.87042100694444
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } * /
rank: 139
score: 99.8641796875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination
rank: 139
score: 99.86027388139205
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; while ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 139
score: 99.83233351934524
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 140
score: 99.87939453125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 140
score: 99.86026224275915
patch: while ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 140
score: 99.84443803267045
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else
rank: 140
score: 99.83219209558824
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 140
score: 99.83022357047872
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 140
score: 99.80560427295919
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 141
score: 99.87289826766305
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 141
score: 99.8700041118421
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 141
score: 99.864091796875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } Set < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get
rank: 141
score: 99.86012706537356
patch: if ( n . get CaMeL Parent ( ) == null ) { final Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 141
score: 99.84420211226852
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 141
score: 99.83193249648876
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) ) ;
rank: 141
score: 99.8055543363764
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 142
score: 99.87284545898437
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 142
score: 99.864052734375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . to
rank: 142
score: 99.85999644886364
patch: if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 142
score: 99.84407865084134
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 142
score: 99.8398907001202
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> g CaMeL Node = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 142
score: 99.83175659179688
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 142
score: 99.83009655070755
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; }
rank: 142
score: 99.80553582702021
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 143
score: 99.879326171875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination (
rank: 143
score: 99.86404194078948
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 143
score: 99.85981033509036
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 143
score: 99.84406565656566
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 143
score: 99.83168174342106
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 143
score: 99.83004911819307
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 143
score: 99.80539344879519
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 144
score: 99.87930103058511
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 144
score: 99.87274639423077
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ; } }
rank: 144
score: 99.86949174859551
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 144
score: 99.86401073042168
patch: Set < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 144
score: 99.85970052083333
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , n ) ; } }
rank: 144
score: 99.8440274325284
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 144
score: 99.8315710308908
patch: else if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 144
score: 99.82999520931604
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 144
score: 99.8053347565407
patch: if ( n . get CaMeL Type ( ) == Branch ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 145
score: 99.87921875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges
rank: 145
score: 99.87274027979652
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 145
score: 99.86376953125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( g CaMeL Node . get CaMeL Destination (
rank: 145
score: 99.859619140625
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } }
rank: 145
score: 99.84399956597223
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 145
score: 99.839638671875
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 145
score: 99.83153235394022
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 145
score: 99.82985995678192
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 145
score: 99.80516415550595
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 146
score: 99.878974609375
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 146
score: 99.87266248337765
patch: if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 146
score: 99.86376953125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges
rank: 146
score: 99.84395926339286
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 146
score: 99.83962983630953
patch: Di CaMeL Graph CaMeL Node < Node , Integer >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 146
score: 99.83153134300595
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 146
score: 99.829833984375
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ! out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 147
score: 99.863720703125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value
rank: 147
score: 99.8594970703125
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 147
score: 99.84385731456044
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == Branch . UNCOND ) ;
rank: 147
score: 99.83147483648256
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 147
score: 99.82983117816092
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 147
score: 99.80513422539893
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 148
score: 99.87265625
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ; } }
rank: 148
score: 99.863623046875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( )
rank: 148
score: 99.85939694522472
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } } }
rank: 148
score: 99.84384300595238
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 148
score: 99.83954613095239
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 148
score: 99.80509629360465
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 149
score: 99.87877197265625
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 149
score: 99.86869884672619
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 149
score: 99.86352287371135
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 149
score: 99.85936402738764
patch: while ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 149
score: 99.84382047358247
patch: if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 149
score: 99.82962913074712
patch: if ( n . get CaMeL Parent ( ) == null ) { try { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 149
score: 99.80504452284946
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 150
score: 99.87875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges
rank: 150
score: 99.87258911132812
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } }
rank: 150
score: 99.86861393960675
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 150
score: 99.85924979967949
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 150
score: 99.8314236111111
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 150
score: 99.82957374656593
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { try { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 151
score: 99.87252987132354
patch: } if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 151
score: 99.863291015625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get
rank: 151
score: 99.83937461703431
patch: List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 151
score: 99.83137313179348
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 151
score: 99.80487253289473
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 152
score: 99.87252604166666
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 152
score: 99.86842447916666
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 152
score: 99.8590158045977
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; }
rank: 152
score: 99.8436829810049
patch: if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 152
score: 99.83136307565789
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 153
score: 99.878564453125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } Di CaMeL Graph CaMeL Edge out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) )
rank: 153
score: 99.872265625
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } } }
rank: 153
score: 99.86823299632353
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } finally { out CaMeL Edges . close ( ) ; }
rank: 153
score: 99.83134128736413
patch: if ( g CaMeL Node != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 153
score: 99.829384765625
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ; }
rank: 153
score: 99.80470742984694
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { break ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 154
score: 99.87853515625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out
rank: 154
score: 99.8630859375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination
rank: 154
score: 99.8586758700284
patch: if ( n . get CaMeL Parent ( ) . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 154
score: 99.83121744791667
patch: if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 154
score: 99.8293134581368
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 154
score: 99.80469847261236
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 155
score: 99.87216584578805
patch: } else { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 155
score: 99.86780992445055
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } * /
rank: 155
score: 99.863017578125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get
rank: 155
score: 99.85857833059211
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 155
score: 99.8390182023196
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 155
score: 99.80460069444445
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return n ; }
rank: 156
score: 99.87212579900569
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ; } }
rank: 156
score: 99.86298710466868
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) {
rank: 156
score: 99.84333984375
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , n . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 156
score: 99.83901459316037
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 156
score: 99.8311434659091
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , null ) ;
rank: 157
score: 99.87833984375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0
rank: 157
score: 99.87211420294943
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } }
rank: 157
score: 99.86297286184211
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 157
score: 99.85849480879934
patch: while ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 157
score: 99.84318920173267
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 157
score: 99.8390012254902
patch: List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 157
score: 99.83102101293103
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , ) ;
rank: 157
score: 99.82922602634804
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 157
score: 99.80448581861413
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 158
score: 99.878193359375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges
rank: 158
score: 99.86732536764706
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 158
score: 99.86294921875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get
rank: 158
score: 99.84306867732558
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node < Node >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 158
score: 99.83085538903062
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . BLOCK ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 159
score: 99.87182348901099
patch: / * if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 159
score: 99.862900390625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } Set < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 )
rank: 159
score: 99.85842088721265
patch: while ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 159
score: 99.8387675382653
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 159
score: 99.83068316915761
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 159
score: 99.8043902853261
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 160
score: 99.87794921875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 160
score: 99.86277532003012
patch: Collection < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 160
score: 99.84291735197368
patch: if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 160
score: 99.83068161867978
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , out CaMeL Edges . get ( 0 ) ) ;
rank: 160
score: 99.80438232421875
patch: if ( n . get CaMeL Parent ( ) == null ) { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 161
score: 99.87167128696237
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 161
score: 99.86719835069445
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } * /
rank: 161
score: 99.85832950367647
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 161
score: 99.84286323635058
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 161
score: 99.83848987926136
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 161
score: 99.83062318313954
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 161
score: 99.82914311835107
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 161
score: 99.80427797379032
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { break ; } if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 162
score: 99.87783203125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } Di CaMeL Graph CaMeL Edge out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 162
score: 99.87161820023148
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 162
score: 99.86717587425595
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 162
score: 99.86251953125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) )
rank: 162
score: 99.85817132994185
patch: while ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 162
score: 99.80427472615979
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 163
score: 99.877724609375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges
rank: 163
score: 99.87151544744319
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } }
rank: 163
score: 99.86248024929775
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } else
rank: 163
score: 99.84265988372093
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 163
score: 99.83831845238095
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 163
score: 99.82897258254717
patch: case Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 163
score: 99.80424647177419
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return n ; }
rank: 164
score: 99.877724609375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( g CaMeL Node . get CaMeL Out CaMeL
rank: 164
score: 99.87150065104167
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 164
score: 99.86246576997422
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 164
score: 99.8579983998494
patch: if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 164
score: 99.84263237847222
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 164
score: 99.838173828125
patch: List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 164
score: 99.83042841372283
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } switch ( n . get CaMeL Type ( ) ) {
rank: 164
score: 99.82896484375
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 164
score: 99.80413942920919
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 165
score: 99.87771484375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination (
rank: 165
score: 99.8714371565934
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 165
score: 99.862451171875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 165
score: 99.85794422238372
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges ) ; } }
rank: 165
score: 99.84259982638889
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 165
score: 99.83805803571428
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 165
score: 99.8288896668632
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 166
score: 99.8776171875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges
rank: 166
score: 99.86244140625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 )
rank: 166
score: 99.85794067382812
patch: if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 166
score: 99.84250042002688
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == Branch . UNCOND ) ;
rank: 166
score: 99.83010007022472
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , out CaMeL Edges . get ( 0 ) ) ;
rank: 166
score: 99.82888339428192
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 166
score: 99.80402659406566
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 167
score: 99.87123161764706
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ; } } }
rank: 167
score: 99.86227996439874
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 167
score: 99.85786994485294
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 167
score: 99.84242466517857
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 167
score: 99.83756156589673
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; } }
rank: 167
score: 99.830078125
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 167
score: 99.82884919241573
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 167
score: 99.80393288352273
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 168
score: 99.8775037400266
patch: if ( n . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 168
score: 99.87122395833333
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } } } }
rank: 168
score: 99.86226939006023
patch: Iterator < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 168
score: 99.85780297256098
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 168
score: 99.837548828125
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 168
score: 99.82875359195403
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 169
score: 99.87121710526316
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 169
score: 99.86643288352273
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 169
score: 99.85763762718024
patch: if ( n . get CaMeL Parent ( ) == null ) List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 169
score: 99.84237637362638
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == Branch . UNCOND ) ;
rank: 169
score: 99.837548828125
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 169
score: 99.8297374636628
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node . Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 169
score: 99.80389030612245
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 170
score: 99.87726433722527
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 170
score: 99.86635044642857
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 170
score: 99.8576327237216
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 1 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 170
score: 99.84236826795212
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 170
score: 99.83754340277778
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 170
score: 99.82972610828489
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 1 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 170
score: 99.8038786300505
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 171
score: 99.87110448145604
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 171
score: 99.861923828125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } Iterator < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 )
rank: 171
score: 99.85753501333842
patch: if ( out . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 171
score: 99.84234619140625
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 171
score: 99.83753287438118
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 171
score: 99.82970610119048
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 171
score: 99.80382770040761
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return n ;
rank: 172
score: 99.87107077205883
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 172
score: 99.86185257523148
patch: List < Di CaMeL Graph CaMeL Edge , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 172
score: 99.83743489583334
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 172
score: 99.8296521775266
patch: if ( n . has CaMeL Children ( ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 172
score: 99.8282979329427
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 172
score: 99.80365607443821
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else {
rank: 173
score: 99.87667100694445
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 173
score: 99.86596942204301
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 173
score: 99.8618359375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) .
rank: 173
score: 99.85632787776899
patch: if ( g CaMeL Node != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 173
score: 99.84214889171511
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 173
score: 99.83737817141089
patch: List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 173
score: 99.80363325639205
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Node < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 174
score: 99.87650390625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get
rank: 174
score: 99.8708728608631
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 174
score: 99.86181640625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get
rank: 174
score: 99.85631214488636
patch: if ( n . get CaMeL Parent ( ) . get CaMeL Value ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 174
score: 99.84207763671876
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 174
score: 99.83734706662736
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 174
score: 99.82960749246988
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 174
score: 99.82816989942529
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == $NUMBER$ ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 174
score: 99.80361218398876
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 175
score: 99.8764025099734
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 175
score: 99.87077169215425
patch: out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 175
score: 99.86591282894737
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ; } } }
rank: 175
score: 99.8617578125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } Collection < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 )
rank: 175
score: 99.8561680169753
patch: if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 175
score: 99.84196134868421
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 175
score: 99.83732421875
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 175
score: 99.82958984375
patch: if ( n != null && n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 176
score: 99.87634887695313
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 176
score: 99.8706916360294
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } }
rank: 176
score: 99.86572265625
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 176
score: 99.8617578125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 176
score: 99.85593938253012
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( g CaMeL Node . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 176
score: 99.84188655931122
patch: if ( n . get CaMeL Parent ( ) == null && g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 176
score: 99.8373046875
patch: List < String >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 176
score: 99.82796717171718
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 177
score: 99.87064792798913
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 177
score: 99.86561472039473
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 177
score: 99.861748046875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( out CaMeL Edges ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get
rank: 177
score: 99.84172712053571
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 177
score: 99.8372462951031
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 177
score: 99.80349731445312
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 178
score: 99.87620511968085
patch: if ( n . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 178
score: 99.87057362432066
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 178
score: 99.86171875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get
rank: 178
score: 99.85579057173295
patch: if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } }
rank: 178
score: 99.84169467659883
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , ? >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 178
score: 99.83715578589108
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 178
score: 99.82921511627907
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 178
score: 99.82793799867021
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 178
score: 99.80346181441327
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 179
score: 99.87052128232759
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } }
rank: 179
score: 99.85579044117647
patch: if ( n . get CaMeL Parent ( ) == null ) List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 179
score: 99.84168332122093
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 1 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 179
score: 99.82918836805555
patch: if ( n == null && n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 179
score: 99.80342610677083
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 180
score: 99.87600038109755
patch: if ( n . get CaMeL Out ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 180
score: 99.86529356060606
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 180
score: 99.85570447198276
patch: if ( n . get CaMeL Parent ( ) == null ) List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 180
score: 99.84161931818181
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 180
score: 99.83700706845238
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 180
score: 99.82913411458334
patch: if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 180
score: 99.8034031080163
patch: if ( n . get CaMeL Parent ( ) != null ) { Node < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 181
score: 99.8704112063172
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 181
score: 99.865234375
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 181
score: 99.85570037059294
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 181
score: 99.84150965073529
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 181
score: 99.82902475421348
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 181
score: 99.80340202487245
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 182
score: 99.87581380208333
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 182
score: 99.87039292279412
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 182
score: 99.86517693014706
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 182
score: 99.85565029046474
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) , n ) ; } }
rank: 182
score: 99.84147135416667
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == Branch . UNCOND ) ;
rank: 182
score: 99.82895295516305
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 182
score: 99.80336216517857
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 183
score: 99.87577704973118
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; }
rank: 183
score: 99.87038730053192
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 183
score: 99.8616015625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value
rank: 183
score: 99.85551313920455
patch: if ( n . get CaMeL Parent ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 183
score: 99.84138507153614
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 183
score: 99.8369649251302
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 183
score: 99.82888454861111
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 184
score: 99.87025082236842
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ; } }
rank: 184
score: 99.86506497130102
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ;
rank: 184
score: 99.84135199652778
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 184
score: 99.8368278952206
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , n ) ; }
rank: 184
score: 99.82887961647727
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , false ) ;
rank: 184
score: 99.80325863486843
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 185
score: 99.87566535027473
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 185
score: 99.8614453125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value
rank: 185
score: 99.85536595394737
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 185
score: 99.84133130450581
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 185
score: 99.82883619225544
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && / / out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 185
score: 99.82760620117188
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 185
score: 99.8032559481534
patch: if ( n . get CaMeL Parent ( ) != null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 186
score: 99.87559217087765
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 186
score: 99.87021169354838
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 186
score: 99.86471926510988
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } * /
rank: 186
score: 99.8613817168445
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 186
score: 99.85518542631173
patch: if ( n . get CaMeL Parent ( ) == null ) List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 186
score: 99.84130859375
patch: if ( n . get CaMeL Type ( ) == Token . BLOCK ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 186
score: 99.82866876775569
patch: if ( n . get CaMeL Parent ( ) == null || n . has CaMeL Children ( ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 186
score: 99.82760353458738
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ) ; }
rank: 186
score: 99.8032473169192
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 187
score: 99.87547766644022
patch: if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 187
score: 99.87012768817205
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 187
score: 99.86134765625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( )
rank: 187
score: 99.85514322916667
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 187
score: 99.84127807617188
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 187
score: 99.82854055851064
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 187
score: 99.82743932845744
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 187
score: 99.8030935704023
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { break ; } if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 188
score: 99.87544921875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( )
rank: 188
score: 99.87009420955883
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 188
score: 99.86457170758929
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 188
score: 99.861259765625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges .
rank: 188
score: 99.85510706018519
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 188
score: 99.8366916769802
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 188
score: 99.82845052083333
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 188
score: 99.82740885416666
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 189
score: 99.87537730823864
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 189
score: 99.87000042459239
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } } }
rank: 189
score: 99.86449390453296
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 189
score: 99.86123046875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 189
score: 99.8550922439759
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 189
score: 99.83664598651961
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 189
score: 99.82737038352273
patch: if ( n . get CaMeL Parent ( ) == null ) { break ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 189
score: 99.80301339285714
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { break ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 190
score: 99.87519975142045
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) < 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 190
score: 99.86995621565934
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } } }
rank: 190
score: 99.86439732142857
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 190
score: 99.8611564217033
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; } }
rank: 190
score: 99.85505694653614
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 190
score: 99.84114583333333
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 190
score: 99.83659498762377
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 190
score: 99.82833729619566
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 190
score: 99.82736954599056
patch: final Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 190
score: 99.80298349808673
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 191
score: 99.875146484375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( )
rank: 191
score: 99.86995442708333
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } }
rank: 191
score: 99.861142578125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . to
rank: 191
score: 99.82830255681819
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) . get CaMeL Destination ( ) ) ;
rank: 191
score: 99.82735188802083
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ) ; }
rank: 192
score: 99.87510172526042
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 192
score: 99.86416720360825
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } } }
rank: 192
score: 99.85493283155488
patch: if ( node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 192
score: 99.84110269201807
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 192
score: 99.82734582779256
patch: List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 192
score: 99.80286038306451
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null && out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 193
score: 99.87507430366848
patch: if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 193
score: 99.86398719879519
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 193
score: 99.86111328125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } Iterator < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get
rank: 193
score: 99.8548613757622
patch: if ( n . get CaMeL Node ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 193
score: 99.84109092620481
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 193
score: 99.80279876373626
patch: if ( n instanceof Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 194
score: 99.875
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 194
score: 99.86979386613176
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 194
score: 99.86102505387932
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return node ; }
rank: 194
score: 99.84104180090206
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Branch . UNCOND ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 194
score: 99.82784288194445
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get ( ) ) ;
rank: 194
score: 99.8027874490489
patch: if ( n . get CaMeL Parent ( ) == null ) { Node < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 195
score: 99.86967516447369
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 195
score: 99.86380974264706
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 195
score: 99.86091752485795
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 195
score: 99.8410113790761
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 195
score: 99.83639761117789
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 195
score: 99.82784148185483
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ) ;
rank: 195
score: 99.827177734375
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 196
score: 99.86966378348214
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 196
score: 99.85479181463069
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 196
score: 99.84094356796116
patch: else { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 196
score: 99.82777913411458
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node . Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 196
score: 99.827109375
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Value ( ) ) ; }
rank: 196
score: 99.80263314596037
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 197
score: 99.87482421875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value
rank: 197
score: 99.8694480613426
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 197
score: 99.86082945478724
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 197
score: 99.8547595796131
patch: if ( g CaMeL Node != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } }
rank: 197
score: 99.8409423828125
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == $NUMBER$ ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 197
score: 99.836328125
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ;
rank: 197
score: 99.82777777777778
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 197
score: 99.82710237323113
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Value ( ) ) ; }
rank: 197
score: 99.80262082122093
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 198
score: 99.86944190492021
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 198
score: 99.86368461277173
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } }
rank: 198
score: 99.85475139853395
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 198
score: 99.84088199013158
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 198
score: 99.82703354779412
patch: else { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 198
score: 99.80246710526316
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 199
score: 99.86940696022727
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 199
score: 99.84077541307471
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 199
score: 99.82756076388888
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 199
score: 99.80245817550505
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 200
score: 99.874521484375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ! try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) .
rank: 200
score: 99.86937908793605
patch: } else if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 200
score: 99.86364889705882
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 200
score: 99.8547116397472
patch: if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } } }
rank: 200
score: 99.84073893229167
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 && out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 200
score: 99.83613660497574
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 200
score: 99.82742905890805
patch: if ( ! n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 200
score: 99.80230928308823
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 201
score: 99.8744140625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( )
rank: 201
score: 99.86936257102273
patch: } else { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 201
score: 99.86357648982558
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } * /
rank: 201
score: 99.860400390625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; if ( out CaMeL Edges .
rank: 201
score: 99.8544921875
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 201
score: 99.84071811409883
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 201
score: 99.826834141523
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 201
score: 99.80225771949405
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 202
score: 99.87416294642857
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ;
rank: 202
score: 99.86934502180233
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } }
rank: 202
score: 99.863525390625
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 202
score: 99.860361328125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value
rank: 202
score: 99.85446999289773
patch: if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 202
score: 99.83609868021844
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 202
score: 99.80220078930412
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 203
score: 99.874150390625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( )
rank: 203
score: 99.86336436170212
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ;
rank: 203
score: 99.8603125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) )
rank: 203
score: 99.8405887564433
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == Branch . UNCOND ) ;
rank: 203
score: 99.83600408380681
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 203
score: 99.82717013888889
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 203
score: 99.80218065399484
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 204
score: 99.869140625
patch: else if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 204
score: 99.85433736661585
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 204
score: 99.84054411300505
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Type ( ) == Branch . UNCOND ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 204
score: 99.83588555518617
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 204
score: 99.82713847257654
patch: if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . BLOCK ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 205
score: 99.874140625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 205
score: 99.8404511242378
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 205
score: 99.8358128324468
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 205
score: 99.8270008175872
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) < 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 205
score: 99.8267463235294
patch: try { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 205
score: 99.8020352450284
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 206
score: 99.87397411616162
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 206
score: 99.86890453296704
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } ) ;
rank: 206
score: 99.86305509868421
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 206
score: 99.8601953125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { out CaMeL Edges . add ( g CaMeL Node . get CaMeL Out CaMeL Edges ( )
rank: 206
score: 99.85428377477135
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else
rank: 206
score: 99.84045024671053
patch: if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 206
score: 99.82667625343407
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 207
score: 99.86889367816092
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ; }
rank: 207
score: 99.86305023521506
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ; }
rank: 207
score: 99.86011624623494
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; while ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 207
score: 99.85404829545455
patch: if ( n . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 207
score: 99.84041341145833
patch: if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Next ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 207
score: 99.82686455305233
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 207
score: 99.82660271139706
patch: try { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 208
score: 99.87390718005952
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; }
rank: 208
score: 99.86887428977273
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 208
score: 99.86285978618422
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ; } } }
rank: 208
score: 99.86
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 208
score: 99.85396984011628
patch: if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 208
score: 99.84038185586735
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 208
score: 99.83569568452381
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) < 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 208
score: 99.82676809210527
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 208
score: 99.82659040178571
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 208
score: 99.80190728635205
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 209
score: 99.86880139802632
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 209
score: 99.85392649580793
patch: if ( n . get CaMeL Parent ( ) . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 209
score: 99.84037189094387
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Type ( ) == Token . FUNCTION ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 209
score: 99.83567841198979
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 209
score: 99.82669422238372
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) >= 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 209
score: 99.82653569240196
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 210
score: 99.86879340277778
patch: else if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 210
score: 99.86271158854167
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 210
score: 99.85368266858552
patch: if ( out != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 210
score: 99.84036387567934
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 210
score: 99.826486170977
patch: if ( n . get CaMeL Parent ( ) == null ) { Node < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 210
score: 99.80187739158163
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 211
score: 99.87379894037356
patch: if ( n . get CaMeL Out ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 211
score: 99.86877852879213
patch: } } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 211
score: 99.85998046875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 211
score: 99.85366586538461
patch: if ( g CaMeL Node != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 211
score: 99.84036254882812
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 211
score: 99.83551432291667
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 211
score: 99.82661251905488
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , n ) ;
rank: 211
score: 99.8264453125
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 211
score: 99.80184761135058
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null && out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 212
score: 99.873798828125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( )
rank: 212
score: 99.86869860197369
patch: } if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 212
score: 99.859873046875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( )
rank: 212
score: 99.85365988991477
patch: if ( n . get CaMeL Parent ( ) . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 212
score: 99.835498046875
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == $NUMBER$ ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 212
score: 99.82659202398256
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 212
score: 99.82643734830097
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ) ; }
rank: 213
score: 99.87379424426021
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 213
score: 99.86845495345744
patch: if ( n . get CaMeL Parent ( ) . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 213
score: 99.85982210090361
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 213
score: 99.84024047851562
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 213
score: 99.83532023879717
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 213
score: 99.82658247514205
patch: if ( n . get CaMeL Parent ( ) == null && n . has CaMeL Children ( ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 213
score: 99.80169862689394
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 214
score: 99.859775390625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 214
score: 99.8534823330966
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . to CaMeL String ( ) ) ; } }
rank: 214
score: 99.84021625322166
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Directed CaMeL Graph CaMeL Node ( 0 ) . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 214
score: 99.83517095094086
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 214
score: 99.82653524709302
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 214
score: 99.82628676470588
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 215
score: 99.86830512152778
patch: / * if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 215
score: 99.86221277573529
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 215
score: 99.85348155886628
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 215
score: 99.84015940656566
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Branch . UNCOND ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 215
score: 99.83517020089286
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 215
score: 99.82650902157738
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return new Di CaMeL Graph CaMeL Edge < Node , Branch >> ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 215
score: 99.82615309495192
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 215
score: 99.80158305921053
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 216
score: 99.873583984375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value
rank: 216
score: 99.8682887300532
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 216
score: 99.86215444711539
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Out CaMeL Edges ( ) ) ; }
rank: 216
score: 99.85974542025862
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return this ; }
rank: 216
score: 99.85347173455057
patch: if ( n . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 216
score: 99.83513754986703
patch: List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 216
score: 99.82645089285714
patch: if ( g CaMeL Node == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 217
score: 99.873583984375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value
rank: 217
score: 99.8620811370482
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 217
score: 99.85343627929687
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 217
score: 99.839794921875
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null || g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 217
score: 99.826171875
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 217
score: 99.80141551224227
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 218
score: 99.86810593377976
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } } }
rank: 218
score: 99.86208089192708
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 218
score: 99.8596875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } Set < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value
rank: 218
score: 99.85339071584302
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } }
rank: 218
score: 99.82601868872548
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; }
rank: 218
score: 99.82601768092105
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 218
score: 99.8012186686198
patch: if ( n . get CaMeL Parent ( ) != null ) { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 219
score: 99.86795479910714
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) <= 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 219
score: 99.86206341911765
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 219
score: 99.859658203125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( )
rank: 219
score: 99.85338462271342
patch: while ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 219
score: 99.83978949652777
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 219
score: 99.83499886225728
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 219
score: 99.82598445391415
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ) ;
rank: 219
score: 99.82593252144608
patch: else { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 219
score: 99.8011983235677
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 220
score: 99.8734748746142
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 220
score: 99.86790364583334
patch: } } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 220
score: 99.85964561370481
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 220
score: 99.8533391378012
patch: else if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 220
score: 99.83969427614795
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 220
score: 99.80119004360465
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { break ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 221
score: 99.859541015625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get
rank: 221
score: 99.85331380208333
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 221
score: 99.83964423723118
patch: switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 221
score: 99.8348986037234
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 221
score: 99.82585797991071
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 221
score: 99.80111663510101
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 222
score: 99.873408203125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value (
rank: 222
score: 99.86779005984043
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 222
score: 99.8618805239899
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 222
score: 99.85322709517045
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Node ( ) ) ; } }
rank: 222
score: 99.83959205863403
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( g CaMeL Node ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 222
score: 99.83487391707921
patch: Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 222
score: 99.82583172401685
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Node < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 222
score: 99.82579456676136
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 222
score: 99.80109991776315
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else {
rank: 223
score: 99.86778492647059
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 223
score: 99.85943359375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 )
rank: 223
score: 99.85322038517442
patch: if ( n . get CaMeL Parent ( ) . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 223
score: 99.83955652573529
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n . get CaMeL Next ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 223
score: 99.82582600911458
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 223
score: 99.82579022988506
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , ) ;
rank: 223
score: 99.80108642578125
patch: if ( n . get CaMeL Parent ( ) == null ) { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 224
score: 99.87315150669643
patch: if ( g CaMeL Node . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 224
score: 99.8677394701087
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 224
score: 99.859404296875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges
rank: 224
score: 99.8395284016927
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 224
score: 99.83479656559406
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ! out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 224
score: 99.80106336805555
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 225
score: 99.873134765625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) )
rank: 225
score: 99.8677266438802
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 225
score: 99.85315095925633
patch: if ( g CaMeL Node != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 225
score: 99.83950772849462
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == Branch . UNCOND ) ;
rank: 225
score: 99.82577366504854
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ) ; }
rank: 225
score: 99.82570482336956
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 225
score: 99.8010631443299
patch: if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 226
score: 99.87301503057066
patch: if ( g CaMeL Node . get CaMeL Out CaMeL Edges ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 226
score: 99.85912109375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value
rank: 226
score: 99.85309866573034
patch: if ( out . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 226
score: 99.83942360101744
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { throw try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 226
score: 99.83472521551724
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ! out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 226
score: 99.82572265625
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 226
score: 99.82569550304878
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 227
score: 99.8730135830966
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } }
rank: 227
score: 99.86764526367188
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 227
score: 99.86165364583333
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 227
score: 99.85911248319893
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 227
score: 99.8530574845679
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 227
score: 99.83938953488372
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( $NUMBER$ ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 227
score: 99.83471200980392
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 227
score: 99.82561848958333
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 227
score: 99.80088975694444
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 228
score: 99.87299138849431
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . is CaMeL Empty ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 228
score: 99.86162860576923
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 228
score: 99.85908203125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Node
rank: 228
score: 99.85298978365384
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 228
score: 99.83937333269817
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 228
score: 99.83469082446808
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 228
score: 99.82557508680556
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 229
score: 99.8675511136968
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 229
score: 99.859052734375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . to
rank: 229
score: 99.85297185724431
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 229
score: 99.8345363451087
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 229
score: 99.82547593390805
patch: if ( n . get CaMeL Parent ( ) != null ) { Node < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 230
score: 99.87296549479167
patch: if ( g CaMeL Node . get CaMeL Out ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 230
score: 99.86750955784575
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 230
score: 99.86107575491573
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 230
score: 99.85904605263158
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 230
score: 99.85294189453126
patch: while ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 230
score: 99.83452583539604
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 230
score: 99.80077118234536
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; }
rank: 231
score: 99.87293011209239
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 231
score: 99.867431640625
patch: / * if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 231
score: 99.86105380969101
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 231
score: 99.858984375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL
rank: 231
score: 99.85292271205357
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 231
score: 99.83930821572581
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 231
score: 99.82542563384433
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 231
score: 99.82520559210526
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 231
score: 99.80076002038044
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { break ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 232
score: 99.87287419016768
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 232
score: 99.8674072265625
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 232
score: 99.86101792279412
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } finally { out CaMeL Edges . clear ( ) ; }
rank: 232
score: 99.85291378997093
patch: if ( out . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 232
score: 99.83914888822116
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 232
score: 99.83436841643258
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ! out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 232
score: 99.8251953125
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else {
rank: 232
score: 99.80073735955057
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return n ;
rank: 233
score: 99.87287109375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( )
rank: 233
score: 99.86737575301204
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 233
score: 99.85895944148936
patch: if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 233
score: 99.85290380271084
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 233
score: 99.834345703125
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> g CaMeL Node = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 233
score: 99.82525970123626
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 233
score: 99.8251316236413
patch: if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Type ( ) == Token . BLOCK ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 234
score: 99.85288307883523
patch: if ( out . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 234
score: 99.83907720094086
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 234
score: 99.83431976010101
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 234
score: 99.82516311813187
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 234
score: 99.8250732421875
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ;
rank: 234
score: 99.8006305459105
patch: if ( n == null ) { break ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 235
score: 99.87277434593024
patch: if ( n . get CaMeL Out ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 235
score: 99.86725643382353
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } } } }
rank: 235
score: 99.85272507440476
patch: while ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 235
score: 99.83907063802083
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 235
score: 99.83424136513158
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 235
score: 99.8250855863764
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 235
score: 99.82488458806819
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , n ) ;
rank: 235
score: 99.80062934027778
patch: if ( n . has CaMeL Children ( ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 236
score: 99.86724562872024
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 236
score: 99.86086667239012
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ; } } }
rank: 236
score: 99.85880859375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Out CaMeL
rank: 236
score: 99.85263097426471
patch: if ( g CaMeL Node != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 236
score: 99.83902662627551
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Type ( ) == Token . BLOCK ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 236
score: 99.82506025598404
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 236
score: 99.82483440896739
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 236
score: 99.80061848958333
patch: if ( n instanceof Di CaMeL Graph CaMeL Edge ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 237
score: 99.872734375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ! try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value (
rank: 237
score: 99.86721131859755
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 237
score: 99.858740234375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; while ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 )
rank: 237
score: 99.85259789156626
patch: if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 237
score: 99.82504169592697
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 237
score: 99.82477361505681
patch: if ( n . get CaMeL Parent ( ) == null || n . has CaMeL Children ( ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 237
score: 99.80058996456185
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 238
score: 99.86719823145604
patch: } else { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 238
score: 99.85855205407303
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 238
score: 99.85256288109755
patch: if ( n . get CaMeL Parent ( ) == null ) { Node < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 238
score: 99.83885645604396
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 238
score: 99.83420887212644
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 238
score: 99.82502908909575
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 238
score: 99.82474949048913
patch: if ( n . get CaMeL Parent ( ) . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 238
score: 99.80055509868421
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 239
score: 99.8671875
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 239
score: 99.85844282670455
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { out CaMeL Edges . }
rank: 239
score: 99.85246225421348
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ;
rank: 239
score: 99.83413607402913
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 239
score: 99.82471228158602
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 240
score: 99.8671875
patch: / * if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 240
score: 99.85844136332418
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { out CaMeL Edges . size ( ) ;
rank: 240
score: 99.85243264222757
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 240
score: 99.83878977705793
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 240
score: 99.83413318452381
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 240
score: 99.82500665838069
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 240
score: 99.80049035904256
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 241
score: 99.86713072311046
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } } }
rank: 241
score: 99.8583984375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) .
rank: 241
score: 99.83875290890957
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , n . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 241
score: 99.83410242101648
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 241
score: 99.824609375
patch: if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 241
score: 99.80047817887932
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 242
score: 99.87250564759036
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 242
score: 99.86705582865169
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ; } }
rank: 242
score: 99.86067325367647
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 242
score: 99.85833984375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) out CaMeL Edges . add ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges .
rank: 242
score: 99.8522808908046
patch: if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; }
rank: 242
score: 99.83874760841837
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 242
score: 99.83404071514423
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges [ 0 ] . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 242
score: 99.82497151692708
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 243
score: 99.872421875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( )
rank: 243
score: 99.8522413300305
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 243
score: 99.83868781887755
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . BLOCK ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 243
score: 99.82494140625
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 243
score: 99.82452534520348
patch: if ( n . get CaMeL Parent ( ) > null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 243
score: 99.80043723366477
patch: if ( g CaMeL Node != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 244
score: 99.86057447350544
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges ) ; } }
rank: 244
score: 99.858212890625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( )
rank: 244
score: 99.85219369283537
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 244
score: 99.83868018617021
patch: switch ( n . get CaMeL Parent ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 244
score: 99.82450263444767
patch: if ( n . get CaMeL Parent ( ) . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 244
score: 99.80040640782828
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 245
score: 99.86693145007622
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 245
score: 99.83862783394608
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 245
score: 99.824775390625
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 245
score: 99.82449776785714
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) . get CaMeL Type ( ) == Token . BLOCK ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 245
score: 99.80039284446023
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 246
score: 99.86690687859195
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 246
score: 99.86054895279256
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ; } }
rank: 246
score: 99.858193359375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } Collection < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get
rank: 246
score: 99.85204516882185
patch: if ( n . get CaMeL Parent ( ) . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 246
score: 99.83839574353448
patch: if ( n . get CaMeL Parent ( ) == null ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 246
score: 99.8337890625
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ! out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 246
score: 99.82444976478494
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 246
score: 99.82421875
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && / ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 246
score: 99.80037434895833
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return n ; }
rank: 247
score: 99.87226795014881
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 247
score: 99.86688787286931
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 247
score: 99.85812717013889
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return out CaMeL Edges ; } }
rank: 247
score: 99.85200909870427
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; while ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 247
score: 99.83837890625
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 247
score: 99.83373562794812
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ! out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 247
score: 99.82420789930555
patch: if ( n == null || n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 247
score: 99.8003553025266
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 248
score: 99.872255859375
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } }
rank: 248
score: 99.86681707974138
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 248
score: 99.86052096619898
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ;
rank: 248
score: 99.85192289806548
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 248
score: 99.83833961925288
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( $STRING$ ) ) ;
rank: 248
score: 99.8337146577381
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 248
score: 99.82426313920455
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 248
score: 99.82420739462209
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 248
score: 99.80029296875
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 249
score: 99.87216186523438
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 249
score: 99.86672092013889
patch: if ( n . get CaMeL Parent ( ) . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 249
score: 99.83833904655613
patch: if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Type ( ) == Token . FUNCTION ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 249
score: 99.833701171875
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 249
score: 99.82420777738764
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { break ; } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 249
score: 99.82415896045919
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 249
score: 99.80028782894736
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 250
score: 99.86670496323529
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 250
score: 99.85184151785714
patch: if ( n != null ) { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } } }
rank: 250
score: 99.83831787109375
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { throw try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 250
score: 99.833671875
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ! out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 250
score: 99.82408854166667
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 251
score: 99.87205992353724
patch: if ( n . get CaMeL Out ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 251
score: 99.86669921875
patch: } if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 251
score: 99.85794921875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Destination ( ) . get CaMeL
rank: 251
score: 99.85174209770115
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 251
score: 99.83830122514205
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 1 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 251
score: 99.83363095238096
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 251
score: 99.82413563829788
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 251
score: 99.82402941645408
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 251
score: 99.80026180186171
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 252
score: 99.87201780913979
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 252
score: 99.8666837993421
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 252
score: 99.86024424793956
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Out CaMeL Edges ( ) ) ; }
rank: 252
score: 99.85789998372395
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 252
score: 99.85169876453489
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 252
score: 99.83362408980582
patch: Di CaMeL Graph CaMeL Node < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 252
score: 99.82408511513158
patch: if ( n . get CaMeL Parent ( ) == null || n . has CaMeL Children ( ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 252
score: 99.82399495442708
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 253
score: 99.86667751736111
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 253
score: 99.86016845703125
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 253
score: 99.857880859375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 253
score: 99.85164018110795
patch: if ( node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 253
score: 99.83818957270408
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 253
score: 99.823974609375
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Type ( ) == Token . BLOCK ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 253
score: 99.82395157724056
patch: List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 254
score: 99.871982421875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out
rank: 254
score: 99.86657303370787
patch: / * if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 254
score: 99.85987838273196
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 254
score: 99.85155059070122
patch: if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 254
score: 99.83817049352135
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( g CaMeL Node == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 254
score: 99.83349609375
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 254
score: 99.82390407986111
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 254
score: 99.80009653376437
patch: if ( n == null ) { break ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 255
score: 99.87197681183511
patch: if ( n . get CaMeL Parent ( ) == null && g CaMeL Node . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 255
score: 99.86655680338542
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 255
score: 99.85975534539473
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 255
score: 99.857705078125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } Set < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get
rank: 255
score: 99.85150437127976
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } }
rank: 255
score: 99.82391151685393
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 255
score: 99.82388200431035
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 255
score: 99.80006720430107
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 256
score: 99.87193864115169
patch: if ( g CaMeL Node . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 256
score: 99.86655495383523
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; }
rank: 256
score: 99.8596900201613
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ; }
rank: 256
score: 99.85149619020062
patch: while ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 256
score: 99.83806002869898
patch: if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 256
score: 99.83323102678571
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 256
score: 99.82386846127717
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 256
score: 99.80005900065105
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 257
score: 99.86653288118131
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 257
score: 99.8596700032552
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 257
score: 99.85752776731928
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) }
rank: 257
score: 99.85145660768072
patch: while ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 257
score: 99.83321559175532
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 257
score: 99.8238498263889
patch: if ( n != null || n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 257
score: 99.79997452445652
patch: if ( n . get CaMeL Type ( ) == Branch ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 258
score: 99.86647542317708
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } }
rank: 258
score: 99.85751953125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) .
rank: 258
score: 99.85137384588069
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Node ( ) . get CaMeL Value ( ) ) ; } }
rank: 258
score: 99.8380126953125
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == $NUMBER$ && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 258
score: 99.83320509785354
patch: List < Token > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 258
score: 99.8238416615099
patch: final Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 258
score: 99.82375124667553
patch: if ( n . get CaMeL Parent ( ) == null || n . has CaMeL Children ( ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 258
score: 99.79994710286458
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 259
score: 99.87174125339673
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 259
score: 99.8664042154948
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 259
score: 99.85947375351124
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ; }
rank: 259
score: 99.8575
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < E > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get
rank: 259
score: 99.83801020408163
patch: if ( n . get CaMeL Parent ( ) == null && g CaMeL Node . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 259
score: 99.82374131944445
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node . Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 259
score: 99.823720703125
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 259
score: 99.79991319444444
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 260
score: 99.87173089748475
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) <= 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 260
score: 99.86637716090425
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 260
score: 99.857392578125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < if > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get
rank: 260
score: 99.85133622332317
patch: if ( out . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 260
score: 99.83800551470588
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == Branch . UNCOND ) ;
rank: 260
score: 99.83314005533855
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 260
score: 99.82373046875
patch: if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Next ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 260
score: 99.82368706597222
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 260
score: 99.79990571120689
patch: if ( n . get CaMeL Parent ( ) == null ) { break ; } Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 261
score: 99.87169921875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value (
rank: 261
score: 99.8594386888587
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 261
score: 99.85736328125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 261
score: 99.85126109182099
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 261
score: 99.83800417877907
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 261
score: 99.8330078125
patch: Di CaMeL Graph CaMeL Node < Node , Integer >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 261
score: 99.82371985394022
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 261
score: 99.82361070165095
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 261
score: 99.7998379794034
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 262
score: 99.8716796875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( )
rank: 262
score: 99.86630178052326
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } } } }
rank: 262
score: 99.85124067826705
patch: while ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } }
rank: 262
score: 99.83792039824695
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 262
score: 99.82369640261628
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) <= 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 262
score: 99.82354600694444
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 262
score: 99.79982591711956
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 263
score: 99.857333984375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL
rank: 263
score: 99.85121889467592
patch: if ( n . get CaMeL Parent ( ) == null ) List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 263
score: 99.83791415662651
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 263
score: 99.83289292279412
patch: List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 263
score: 99.82353071732955
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( n ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 263
score: 99.7998046875
patch: if ( n . has CaMeL Children ( ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 264
score: 99.87160773026316
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } } }
rank: 264
score: 99.85728515625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 264
score: 99.85115840517241
patch: if ( out . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 264
score: 99.82350260416666
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return n ; } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 264
score: 99.82348889802631
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 264
score: 99.79977509469697
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 265
score: 99.85923549107143
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 265
score: 99.8570703125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get
rank: 265
score: 99.85112185594512
patch: if ( n . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 265
score: 99.83768503289474
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) , n ) ;
rank: 265
score: 99.83284663228156
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 265
score: 99.82342872191012
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 265
score: 99.82341202445652
patch: if ( g CaMeL Node == null && n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 265
score: 99.7997050382653
patch: if ( n . get CaMeL Parent ( ) != null ) { Node < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 266
score: 99.87159812843407
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 266
score: 99.83766020014045
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 266
score: 99.83278670400944
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 266
score: 99.82335574127907
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 1 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 266
score: 99.79966517857143
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 267
score: 99.87158203125
patch: if ( g CaMeL Node . get CaMeL Out CaMeL Edges ( ) . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 267
score: 99.86600703983517
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return out CaMeL Edges . get ( 0 ) ; } }
rank: 267
score: 99.85919540229885
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } * /
rank: 267
score: 99.856943359375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Node ( ) . get
rank: 267
score: 99.83278586647727
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 267
score: 99.8233173076923
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 267
score: 99.82326274671053
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 268
score: 99.87154362710675
patch: if ( g CaMeL Node . get CaMeL Out ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 268
score: 99.85918846558988
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 268
score: 99.85685221354167
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ! out CaMeL Edges . size ( ) == 1 ) {
rank: 268
score: 99.85089666193181
patch: if ( n . get CaMeL Parent ( ) == null ) { final Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 268
score: 99.83277428668478
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 268
score: 99.82320812136628
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 269
score: 99.87135620117188
patch: if ( n . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 269
score: 99.86588541666667
patch: / * if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 269
score: 99.85918799867021
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 269
score: 99.856845703125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get
rank: 269
score: 99.83757218070652
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 1 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 269
score: 99.83271389563107
patch: List < Di CaMeL Graph CaMeL Edge >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 269
score: 99.82328330592105
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 269
score: 99.8231891134511
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Parent ( ) . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 269
score: 99.79937294407895
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 270
score: 99.87134765625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( )
rank: 270
score: 99.85905294215425
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 270
score: 99.8508633700284
patch: if ( n . get CaMeL Node ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 270
score: 99.83756510416667
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 270
score: 99.8232421875
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 270
score: 99.82313998909883
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 270
score: 99.79934757313829
patch: else { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 271
score: 99.8712783441311
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 271
score: 99.858974609375
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null ) { out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 271
score: 99.85678453947368
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 271
score: 99.8508365028783
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 271
score: 99.83755139802632
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 271
score: 99.82322358630952
patch: Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 271
score: 99.8231201171875
patch: if ( cur CaMeL Cfg . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 271
score: 99.79933763586956
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return n ;
rank: 272
score: 99.86574835526316
patch: if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 272
score: 99.85894097222223
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 272
score: 99.85082125376506
patch: if ( n != null ) { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 272
score: 99.83747664741848
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 272
score: 99.8326307240099
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ! out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 272
score: 99.82321346507354
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 272
score: 99.8231175199468
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 272
score: 99.79930644132654
patch: if ( n . get CaMeL Parent ( ) == null ) { Node < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 273
score: 99.8657072368421
patch: out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 273
score: 99.856689453125
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { out CaMeL Edges . size ( ) ; }
rank: 273
score: 99.8374755859375
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 273
score: 99.8325865502451
patch: if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 273
score: 99.82318474264706
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 273
score: 99.79920226258118
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 274
score: 99.87122844827586
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 274
score: 99.86567925347222
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 274
score: 99.85879991319445
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 274
score: 99.8565625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return g CaMeL Node . get CaMeL Out CaMeL Edges (
rank: 274
score: 99.85075052668539
patch: if ( n . get CaMeL Parent ( ) . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 274
score: 99.82312993893679
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 274
score: 99.82299262152777
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 275
score: 99.871103515625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value (
rank: 275
score: 99.85877150632022
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 275
score: 99.856484375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value (
rank: 275
score: 99.85072858146067
patch: if ( n . get CaMeL Node ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 275
score: 99.83745216836735
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 275
score: 99.82305518617021
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 275
score: 99.82295612373737
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) . get CaMeL Value ( ) ) ;
rank: 275
score: 99.79909752155173
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 276
score: 99.85874872622283
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges ) ; } }
rank: 276
score: 99.8507144325658
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } else
rank: 276
score: 99.83743990384616
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . BLOCK ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 276
score: 99.83253348214286
patch: List < Di CaMeL Graph CaMeL Edge , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 276
score: 99.79904961340206
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 277
score: 99.8710428873698
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } else {
rank: 277
score: 99.86563773777173
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ; } } }
rank: 277
score: 99.85646884412651
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; while ( out CaMeL Edges . size ( ) == 1 ) {
rank: 277
score: 99.85071231617647
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 277
score: 99.83743418817934
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == Branch . UNCOND ) ; }
rank: 277
score: 99.83247166053921
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } ; }
rank: 277
score: 99.82299344044812
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; }
rank: 277
score: 99.79904275412088
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 278
score: 99.87103515625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null && g CaMeL Node . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value
rank: 278
score: 99.86561075846355
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ; } } }
rank: 278
score: 99.8586178897472
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 278
score: 99.85645538015464
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 278
score: 99.85069312118902
patch: synchronized ( g CaMeL Node ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 278
score: 99.83740234375
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 278
score: 99.82295243818682
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 278
score: 99.82288411458333
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 278
score: 99.7989958175505
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { break ; } if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 279
score: 99.87102716619319
patch: if ( n . get CaMeL Parent ( ) == n ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 279
score: 99.85640375664893
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 279
score: 99.82282686781609
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node ) , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 279
score: 99.79898734714673
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 280
score: 99.8709132982337
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) {
rank: 280
score: 99.85637732397151
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) {
rank: 280
score: 99.85066274578652
patch: if ( node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 280
score: 99.83736746651786
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 280
score: 99.82282366071429
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 280
score: 99.79892064144737
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 281
score: 99.87090246456185
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 281
score: 99.86549192994505
patch: / * / if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 281
score: 99.85855427194149
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ; }
rank: 281
score: 99.85632905505952
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 281
score: 99.85063135901163
patch: if ( out . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 281
score: 99.83735251913265
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 281
score: 99.82281494140625
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node . Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 281
score: 99.79885996942934
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 282
score: 99.86544285463484
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) <= 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 282
score: 99.85852786144578
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 282
score: 99.83733258928571
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Type ( ) == Token . BLOCK ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 282
score: 99.82281068313954
patch: if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 282
score: 99.82276596257717
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 282
score: 99.79885896381579
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else {
rank: 283
score: 99.87087890625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( )
rank: 283
score: 99.86537982047872
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 283
score: 99.85059703480114
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL String ( ) ) ; } }
rank: 283
score: 99.83209573997641
patch: if ( n . get CaMeL Parent ( ) == null ) { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 283
score: 99.8227813377809
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) ) ;
rank: 283
score: 99.7987657912234
patch: if ( g CaMeL Node != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 284
score: 99.87079148065476
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 284
score: 99.8651150173611
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ; } } } }
rank: 284
score: 99.85816924426021
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ;
rank: 284
score: 99.8561130798969
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 284
score: 99.83725347751525
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 284
score: 99.83209103954081
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 284
score: 99.8226953125
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; }
rank: 284
score: 99.79875765141753
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 285
score: 99.85054976851852
patch: if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 285
score: 99.83723958333333
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 285
score: 99.82265878652598
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 285
score: 99.82257952008929
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 285
score: 99.79875217013888
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 286
score: 99.86506978581461
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ; } } }
rank: 286
score: 99.85805442116477
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ( out CaMeL Edges . size ( ) == 1 ) || ( out CaMeL Edges . size ( ) == 1 ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 286
score: 99.856064453125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Destination ( ) . get CaMeL Value ( ) )
rank: 286
score: 99.83199757543103
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ! out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 286
score: 99.82257850424757
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 286
score: 99.79872948232324
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { throw try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 287
score: 99.87062624667553
patch: if ( n . get CaMeL Out ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 287
score: 99.8650323275862
patch: } else { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 287
score: 99.85805257161458
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 287
score: 99.85601240335052
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; }
rank: 287
score: 99.85044195713141
patch: if ( g CaMeL Node != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 287
score: 99.83195929276316
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 287
score: 99.79872639973958
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 288
score: 99.86494715073529
patch: } } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 288
score: 99.83719308035714
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 288
score: 99.82243595566861
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 288
score: 99.79868947723766
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n == null ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 289
score: 99.86488850911458
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null ) { out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 289
score: 99.855908203125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get
rank: 289
score: 99.850341796875
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 289
score: 99.83718039772727
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 289
score: 99.82249317354369
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ) ; }
rank: 289
score: 99.79868521341463
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 290
score: 99.8705859375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 )
rank: 290
score: 99.855771484375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Destination ( ) . get CaMeL
rank: 290
score: 99.8502452761628
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 290
score: 99.83712842987805
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 1 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 290
score: 99.83182735233517
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } return n ;
rank: 290
score: 99.82248263888889
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 290
score: 99.79867951766305
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ;
rank: 291
score: 99.85787831182066
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Out CaMeL Edges ( ) ) ; } }
rank: 291
score: 99.8557269216954
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return 0 ; }
rank: 291
score: 99.85022553943452
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 291
score: 99.8371249112216
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 291
score: 99.82236696639151
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 291
score: 99.82235814144737
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 291
score: 99.79867788461539
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { break ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 292
score: 99.87047322591145
patch: if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 292
score: 99.83179552801724
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 292
score: 99.8223326439951
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; }
rank: 292
score: 99.82223542203609
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 292
score: 99.79867229055851
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 293
score: 99.86468574438203
patch: } else if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 293
score: 99.85780222039473
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ; } }
rank: 293
score: 99.855517578125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) )
rank: 293
score: 99.8370616824128
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 293
score: 99.83174565153301
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 293
score: 99.82221137152777
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 293
score: 99.79866190159575
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 294
score: 99.870283203125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } if ( g CaMeL Node . get CaMeL Out CaMeL Edges (
rank: 294
score: 99.85774008075843
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 294
score: 99.855302734375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { out CaMeL Edges . add CaMeL All ( g CaMeL Node . get CaMeL Out CaMeL Edges
rank: 294
score: 99.83699174360795
patch: if ( g CaMeL Node . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 294
score: 99.82217009171195
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 294
score: 99.79866190159575
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 295
score: 99.86460367838542
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } }
rank: 295
score: 99.85528049698796
patch: if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 295
score: 99.85010901162791
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } }
rank: 295
score: 99.83698601973684
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 295
score: 99.83164469401042
patch: List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 295
score: 99.8221462673611
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 295
score: 99.79864159058988
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 296
score: 99.864453125
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 296
score: 99.85752650669643
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } * /
rank: 296
score: 99.85522748161765
patch: List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 296
score: 99.83696656586021
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 296
score: 99.82213245738636
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , true ) ;
rank: 296
score: 99.79859138257575
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 297
score: 99.86444863505747
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } ) ;
rank: 297
score: 99.85749383223684
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 297
score: 99.85521484375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 297
score: 99.8500917016006
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 297
score: 99.836953125
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , n . get CaMeL Parent ( ) . get CaMeL Value ( ) ) ;
rank: 297
score: 99.82223270716293
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 297
score: 99.82202435661765
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 298
score: 99.8643329326923
patch: else { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 298
score: 99.85747799928161
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 298
score: 99.85005326704545
patch: else if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 298
score: 99.83694458007812
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 && n . get CaMeL Next ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 298
score: 99.8221944173177
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ) ; }
rank: 298
score: 99.82196667729592
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 298
score: 99.79852233270202
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ;
rank: 299
score: 99.85746576544943
patch: if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 299
score: 99.84985919331395
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 299
score: 99.83689211727528
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 299
score: 99.83154770934466
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 299
score: 99.8221525493421
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 && n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 299
score: 99.82195490056819
patch: if ( n . get CaMeL Parent ( ) == null && n . has CaMeL Children ( ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 299
score: 99.7984874636628
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 300
score: 99.870126953125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching
rank: 300
score: 99.8574609375
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 300
score: 99.84973879894578
patch: if ( out != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 300
score: 99.82205784574468
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 300
score: 99.8219363190407
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 300
score: 99.7984683388158
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 301
score: 99.864210749247
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 301
score: 99.84969173569277
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 301
score: 99.83684593023256
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 301
score: 99.8315183080808
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == $NUMBER$ ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 301
score: 99.82204258294753
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 301
score: 99.82192595108695
patch: if ( g CaMeL Node . get CaMeL Directed CaMeL Graph CaMeL Node ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 301
score: 99.79845660665761
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 302
score: 99.8700284090909
patch: if ( g CaMeL Node . get CaMeL Out ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 302
score: 99.86420415521978
patch: try { if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 302
score: 99.85498046875
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; }
rank: 302
score: 99.84965701219512
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } }
rank: 302
score: 99.83676087622548
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 302
score: 99.83146005306604
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( n ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 302
score: 99.8220074533046
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 302
score: 99.79840797601744
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == $NUMBER$ ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 303
score: 99.86997919497283
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 303
score: 99.86418013139205
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 303
score: 99.85730636760752
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 303
score: 99.854921875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if (
rank: 303
score: 99.83138713430851
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 303
score: 99.821943359375
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 303
score: 99.8218396775266
patch: if ( n . get CaMeL Parent ( ) == null && n . has CaMeL Children ( ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 303
score: 99.79839638157895
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 304
score: 99.85491365131578
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } }
rank: 304
score: 99.849609375
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } } }
rank: 304
score: 99.836748046875
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 304
score: 99.83116629464286
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) <= 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 304
score: 99.82192547401685
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 304
score: 99.82182173295455
patch: if ( g CaMeL Node . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 304
score: 99.79834594726563
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 305
score: 99.86412760416667
patch: } if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 305
score: 99.85718936011905
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } finally { out CaMeL Edges . close ( ) ;
rank: 305
score: 99.83673930921053
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) == Branch . UNCOND ) ;
rank: 305
score: 99.83114769345238
patch: List < Di CaMeL Graph CaMeL Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 305
score: 99.82189223345588
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 306
score: 99.86404854910714
patch: } if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 306
score: 99.83673023897059
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) == Branch . UNCOND ) ;
rank: 306
score: 99.82189078282828
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 306
score: 99.82172056686046
patch: if ( node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 306
score: 99.79827158938173
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 307
score: 99.86979923691861
patch: if ( n instanceof Di CaMeL Graph CaMeL Edge ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 307
score: 99.86402925531915
patch: List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 307
score: 99.84954279119319
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Type ( ) ) ; } }
rank: 307
score: 99.82188158356742
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 307
score: 99.82164996603261
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 307
score: 99.7982686360677
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 308
score: 99.8639628092448
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } } }
rank: 308
score: 99.85709971005154
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } }
rank: 308
score: 99.854716796875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Destination (
rank: 308
score: 99.8494996488764
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( g CaMeL Node . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 308
score: 99.8216183684593
patch: if ( n . get CaMeL Node ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 308
score: 99.79822980853874
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 309
score: 99.86392144097222
patch: } else if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 309
score: 99.85708984375
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 309
score: 99.84948446584302
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 309
score: 99.830849609375
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 309
score: 99.82186045545212
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 309
score: 99.82161800986842
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node . Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 310
score: 99.86390579578489
patch: else if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 310
score: 99.85698784722223
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 310
score: 99.854462890625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) )
rank: 310
score: 99.849462890625
patch: if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 310
score: 99.83668200804455
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 310
score: 99.83080329517327
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , ) ; }
rank: 310
score: 99.82185006648936
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 310
score: 99.79814680232558
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 311
score: 99.8696936182229
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 311
score: 99.85695043103448
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 311
score: 99.84946050876525
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 1 ) . get CaMeL Destination ( ) ) ; } }
rank: 311
score: 99.83663807744566
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 311
score: 99.82153614457832
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else {
rank: 311
score: 99.7981465657552
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 312
score: 99.86964574353448
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) <= 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 312
score: 99.8569490131579
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } }
rank: 312
score: 99.84945084212663
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 312
score: 99.83663419397865
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 312
score: 99.821748046875
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 312
score: 99.82152258831522
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node . Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 312
score: 99.79811789772727
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 313
score: 99.869609375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 313
score: 99.86381199048913
patch: List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 313
score: 99.8569036989796
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ) ; }
rank: 313
score: 99.854365234375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) )
rank: 313
score: 99.8493985262784
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 313
score: 99.83662317154256
patch: if ( g CaMeL Node == null || g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 313
score: 99.82173549107142
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ;
rank: 313
score: 99.82150723071808
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . length == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 313
score: 99.79809816919192
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 314
score: 99.86380793539325
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 314
score: 99.83661882267442
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 314
score: 99.82149522569445
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , g CaMeL Node ) ;
rank: 315
score: 99.85667146381579
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 315
score: 99.85435546875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Destination (
rank: 315
score: 99.8366044207317
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 315
score: 99.8306660554847
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 315
score: 99.8214366824128
patch: if ( n . get CaMeL Next ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 315
score: 99.79805715460526
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ;
rank: 316
score: 99.86379635989012
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } }
rank: 316
score: 99.85432771381579
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 316
score: 99.8493116425305
patch: if ( node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 316
score: 99.83659846608232
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 316
score: 99.830556640625
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 316
score: 99.82168193247126
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 316
score: 99.79803007392474
patch: if ( n . get CaMeL Parent ( ) == null ) { break ; } Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 317
score: 99.86369820926966
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 317
score: 99.85661368534483
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; }
rank: 317
score: 99.84925426136364
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } } }
rank: 317
score: 99.83040730337079
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ; }
rank: 317
score: 99.8216796875
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 317
score: 99.82133838383838
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ) ;
rank: 317
score: 99.79800451807229
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 318
score: 99.869453125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( )
rank: 318
score: 99.86362408577128
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) . get CaMeL Value ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 318
score: 99.85659722222222
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ; }
rank: 318
score: 99.84921104029605
patch: if ( out . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 318
score: 99.82133345170455
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , ) ; }
rank: 319
score: 99.86937366832386
patch: if ( n . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } }
rank: 319
score: 99.84919877485795
patch: if ( n . get CaMeL Parent ( ) . get CaMeL Value ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 319
score: 99.82166213132022
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 319
score: 99.8212002840909
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 319
score: 99.7979512117347
patch: if ( n . get CaMeL Type ( ) == Branch ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 320
score: 99.85648643092105
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ; } }
rank: 320
score: 99.85416015625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) <= 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 )
rank: 320
score: 99.84916651526163
patch: if ( n . get CaMeL Parent ( ) == null ) { try { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } } }
rank: 320
score: 99.83643740699405
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ;
rank: 320
score: 99.83024613575269
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 320
score: 99.8216331845238
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 320
score: 99.82117229959239
patch: if ( n . get CaMeL Parent ( ) . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 320
score: 99.79793294270833
patch: if ( n != null ) { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 321
score: 99.86356026785714
patch: if ( n . get CaMeL Parent ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 321
score: 99.8564220610119
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) ) ; } }
rank: 321
score: 99.85408203125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) out CaMeL Edges . add ( out CaMeL Edges . get ( 0 ) . get CaMeL Value
rank: 321
score: 99.83639952956989
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 321
score: 99.8302076690051
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 321
score: 99.82162508400538
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 321
score: 99.82112447331461
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 321
score: 99.79793047664141
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 322
score: 99.869248046875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 322
score: 99.8635495364011
patch: } if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 322
score: 99.85641276041666
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 322
score: 99.854033203125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } Collection < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get
rank: 322
score: 99.84902568247126
patch: if ( n . get CaMeL Parent ( ) == null ) { final Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 322
score: 99.83638509114583
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 322
score: 99.83009982638889
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } return n ;
rank: 322
score: 99.821603358477
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == $NUMBER$ ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 322
score: 99.79783183396465
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null && out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 323
score: 99.86353326612904
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) ) ; } }
rank: 323
score: 99.8563922384511
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 323
score: 99.854033203125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get
rank: 323
score: 99.84902121803977
patch: if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 323
score: 99.836328125
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 323
score: 99.82157628676471
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 323
score: 99.82103430706522
patch: if ( g CaMeL Node != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 323
score: 99.79777018229167
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 324
score: 99.8691796875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0
rank: 324
score: 99.86351996527777
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 324
score: 99.856337890625
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 324
score: 99.84890407986111
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 324
score: 99.83631310096153
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 324
score: 99.8215654481132
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 324
score: 99.82091422032828
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) . get CaMeL Destination ( ) ) ;
rank: 324
score: 99.7977627840909
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 325
score: 99.86915172230114
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } }
rank: 325
score: 99.86350740131579
patch: } if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 325
score: 99.85633042279412
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } finally { out CaMeL Edges . clear ( ) ; }
rank: 325
score: 99.853955078125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Node ( ) . get
rank: 325
score: 99.84887989457832
patch: else if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 325
score: 99.83628882431402
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 325
score: 99.83001302083333
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { throw try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 325
score: 99.82155539772727
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 325
score: 99.82078942587209
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 325
score: 99.79775053879311
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n == null ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 326
score: 99.853916015625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ! out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0
rank: 326
score: 99.84885475852273
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node . Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 326
score: 99.83627387152778
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 326
score: 99.82150390625
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 326
score: 99.82078598484848
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ) ;
rank: 326
score: 99.79771529796511
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 327
score: 99.86342985733695
patch: if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 327
score: 99.85630859375
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ) ; } }
rank: 327
score: 99.8539156626506
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) <= 1 ) {
rank: 327
score: 99.84878954475309
patch: if ( n . get CaMeL Parent ( ) == null ) { final Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 327
score: 99.83624588815789
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 327
score: 99.82992229055851
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 327
score: 99.82144201807229
patch: if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 327
score: 99.82072781968391
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ! out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 327
score: 99.79766290838069
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 328
score: 99.8690625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null && g CaMeL Node . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value
rank: 328
score: 99.86342230902778
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } }
rank: 328
score: 99.84878216911764
patch: if ( n . get CaMeL Parent ( ) == null ) { try { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 328
score: 99.82990141369048
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 328
score: 99.82070524796195
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node . Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 328
score: 99.79765852107558
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 329
score: 99.86340460526316
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 329
score: 99.85627885298295
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 329
score: 99.853837890625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 329
score: 99.83611505681819
patch: else { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 329
score: 99.82069463315217
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 329
score: 99.79761309956395
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 330
score: 99.86888860887096
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 330
score: 99.85625831117021
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ; }
rank: 330
score: 99.853818359375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < T > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get
rank: 330
score: 99.8487060546875
patch: if ( n . get CaMeL Parent ( ) == null ) List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 330
score: 99.83610026041667
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . length == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 330
score: 99.82985780297255
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 330
score: 99.821396484375
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 330
score: 99.82068556882022
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) ) ;
rank: 330
score: 99.79758522727273
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 331
score: 99.86886596679688
patch: if ( g CaMeL Node . get CaMeL Out ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 331
score: 99.8634033203125
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 331
score: 99.83609713040866
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) == Branch . UNCOND ) ;
rank: 331
score: 99.82981706373762
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 331
score: 99.8213778409091
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 331
score: 99.8206531613372
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 331
score: 99.79751554099462
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , ) ;
rank: 332
score: 99.86337890625
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 332
score: 99.853798828125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get
rank: 332
score: 99.84867720170455
patch: synchronized ( n ) { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 332
score: 99.83608940972222
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n . get CaMeL Next ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ) ;
rank: 332
score: 99.82978980654762
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 332
score: 99.8213602701823
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 332
score: 99.82065217391305
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node . Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 332
score: 99.79747353830645
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 333
score: 99.86336263020833
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; }
rank: 333
score: 99.85615748355264
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 333
score: 99.853779296875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; while ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 )
rank: 333
score: 99.8485995205966
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; while ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 333
score: 99.82968960013442
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 333
score: 99.82131006384408
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 333
score: 99.82064568014705
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 333
score: 99.79745678191489
patch: if ( n . get CaMeL Parent ( ) == null ) { try { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 334
score: 99.8561480978261
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 334
score: 99.85373757102273
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } }
rank: 334
score: 99.8485137195122
patch: if ( out != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 334
score: 99.83606974283855
patch: if ( n . get CaMeL Parent ( ) == null || g CaMeL Node . has CaMeL Children ( ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 334
score: 99.8296381353022
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } return n ;
rank: 334
score: 99.82051418138587
patch: if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Type ( ) == Token . BLOCK ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 334
score: 99.79745412427326
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return n ;
rank: 335
score: 99.86876260080645
patch: if ( n . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 335
score: 99.86325930477528
patch: if ( n . get CaMeL Parent ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 335
score: 99.85609809027778
patch: else if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 335
score: 99.85363898026316
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 335
score: 99.8485137195122
patch: if ( out == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 335
score: 99.83603277439025
patch: if ( n . get CaMeL Type ( ) == Token . BLOCK ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 335
score: 99.82125
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 335
score: 99.82048611111111
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 335
score: 99.79743726325758
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 336
score: 99.868759765625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value
rank: 336
score: 99.86325008311171
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ) ; }
rank: 336
score: 99.85609375
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ) ; }
rank: 336
score: 99.85361328125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Destination ( ) . get CaMeL Value ( ) )
rank: 336
score: 99.8484851925872
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 336
score: 99.83598090277778
patch: if ( g CaMeL Node . get CaMeL Type ( ) == Token . BLOCK ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 336
score: 99.79738498263889
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 337
score: 99.85607047032828
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 337
score: 99.85361328125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Node
rank: 337
score: 99.84847203696647
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 337
score: 99.83597995923913
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 337
score: 99.82120863970589
patch: if ( n . get CaMeL Parent ( ) != null ) { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 337
score: 99.82028065557066
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node . Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 337
score: 99.79738362630208
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 338
score: 99.86872059811827
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get ( 0 ) . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 338
score: 99.86315247252747
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } } }
rank: 338
score: 99.85606317934783
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Out CaMeL Edges ( ) ) ; } }
rank: 338
score: 99.84843306107955
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Integer > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 338
score: 99.83592732747395
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Directed CaMeL Graph CaMeL Node ( ) . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 338
score: 99.82923692759901
patch: List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 338
score: 99.82023654513888
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) != 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 338
score: 99.79737903225806
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 339
score: 99.85599543539325
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 339
score: 99.8535779587766
patch: List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 339
score: 99.8483827172256
patch: if ( g CaMeL Node != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 339
score: 99.83590458216293
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } break ;
rank: 339
score: 99.82919825185644
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 339
score: 99.79737367021276
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 340
score: 99.86307956861413
patch: } else { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 340
score: 99.85355508207071
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 340
score: 99.84833318536931
patch: if ( n . get CaMeL Node ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 340
score: 99.829189453125
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 340
score: 99.8211078447165
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 340
score: 99.8201171875
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node . Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 341
score: 99.86306423611111
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 341
score: 99.85598273026316
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } finally { out CaMeL Edges . close ( ) ; } }
rank: 341
score: 99.83579323508523
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 341
score: 99.8291015625
patch: if ( n . get CaMeL Parent ( ) == null ) { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 341
score: 99.821025390625
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; }
rank: 341
score: 99.79720744680851
patch: else { if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 342
score: 99.853369140625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Destination (
rank: 342
score: 99.84831157483552
patch: if ( out != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 342
score: 99.8357266512784
patch: if ( n . get CaMeL Parent ( ) == null ) { { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 342
score: 99.82101894946808
patch: List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 342
score: 99.79717807112068
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 343
score: 99.8685886548913
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 343
score: 99.8629862467448
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } }
rank: 343
score: 99.84826944040698
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges ) ; } }
rank: 343
score: 99.82902207485465
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 343
score: 99.82098315135542
patch: if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 343
score: 99.82003348214286
patch: if ( n != null && n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 343
score: 99.79715576171876
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 344
score: 99.868564453125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . equals ( g CaMeL Node . get CaMeL Out CaMeL Edges
rank: 344
score: 99.86298076923077
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 344
score: 99.85590765449439
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 344
score: 99.83567212975544
patch: if ( n . get CaMeL Parent ( ) == null || g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 344
score: 99.82097085674157
patch: if ( n . get CaMeL Parent ( ) != null ) { try { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 344
score: 99.81997282608695
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Type ( ) == Token . BLOCK ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 344
score: 99.79714682667526
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 345
score: 99.86295572916667
patch: try { if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 345
score: 99.85578719429348
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 345
score: 99.853203125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 345
score: 99.84820772058823
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 345
score: 99.8356600674716
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) , n . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 345
score: 99.82895295516305
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 345
score: 99.82093955592106
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; }
rank: 345
score: 99.81990913722827
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 345
score: 99.79714133522727
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 346
score: 99.86294880319149
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 346
score: 99.85575597426471
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 346
score: 99.85314453125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get
rank: 346
score: 99.84820626795977
patch: if ( node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 346
score: 99.83556707974138
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) == Branch . UNCOND ) ;
rank: 346
score: 99.82889851485149
patch: List < Token >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 346
score: 99.8209298670977
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; }
rank: 346
score: 99.79713948567708
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 347
score: 99.86843532986111
patch: if ( n . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 347
score: 99.86294487847222
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } } }
rank: 347
score: 99.85568053463855
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 347
score: 99.853125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 1 )
rank: 347
score: 99.84819526176948
patch: if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } } }
rank: 347
score: 99.8355224609375
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 347
score: 99.82885473901099
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 347
score: 99.81983531605114
patch: if ( cur CaMeL Cfg . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 347
score: 99.79705946180556
patch: if ( n instanceof Di CaMeL Graph CaMeL Edge ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 348
score: 99.86838223071808
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 348
score: 99.84818892045455
patch: while ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 348
score: 99.83547044836956
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 348
score: 99.79702524038461
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges instanceof Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 349
score: 99.86829723011364
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 349
score: 99.8629214638158
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ; } }
rank: 349
score: 99.85557949420104
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 349
score: 99.84817859738372
patch: if ( n . get CaMeL Parent ( ) == null ) { Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 349
score: 99.83544921875
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , 1 ) ;
rank: 349
score: 99.82086527122641
patch: final Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 349
score: 99.81975608648256
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 349
score: 99.79701967592592
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 350
score: 99.86828741776316
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 350
score: 99.86287715517241
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } } }
rank: 350
score: 99.85311702806122
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 350
score: 99.84813850308642
patch: if ( n . get CaMeL Parent ( ) . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 350
score: 99.82080078125
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 350
score: 99.81970994015957
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 351
score: 99.86827596028645
patch: if ( g CaMeL Node . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 351
score: 99.86281331380208
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ; } } }
rank: 351
score: 99.85308388157895
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 351
score: 99.8207727191092
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 351
score: 99.81967516447368
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ) ;
rank: 351
score: 99.7969373337766
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 352
score: 99.85552487428161
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 352
score: 99.85306663074712
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return false ; }
rank: 352
score: 99.81965414325843
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 352
score: 99.79688635537791
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 353
score: 99.86824806787635
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 353
score: 99.86278760302197
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } } }
rank: 353
score: 99.85303773271276
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 353
score: 99.84809401939656
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; while ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 353
score: 99.83535380747126
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 353
score: 99.82866522606383
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; } }
rank: 353
score: 99.8206787109375
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 353
score: 99.8196331521739
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null && out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 353
score: 99.796875
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 354
score: 99.86823678523936
patch: if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 354
score: 99.8627398947011
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 354
score: 99.85548909505208
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; for ( Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges : out CaMeL Edges ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 354
score: 99.84803355823864
patch: if ( parent . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 354
score: 99.83534307065217
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 354
score: 99.82860289228724
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 354
score: 99.82066047054597
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 354
score: 99.81961805555555
patch: if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Next ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 354
score: 99.79685527146465
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 355
score: 99.86258680555555
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } }
rank: 355
score: 99.85294921875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 355
score: 99.84802999614197
patch: if ( out != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 355
score: 99.82062844669117
patch: Di CaMeL Graph CaMeL Node < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 355
score: 99.8196134868421
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 355
score: 99.79684448242188
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ;
rank: 356
score: 99.86817467730978
patch: if ( n . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 356
score: 99.86257770497312
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 356
score: 99.85542534722222
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 356
score: 99.8352902434593
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Name ( ) ) ;
rank: 356
score: 99.82854195926966
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 356
score: 99.820625
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 356
score: 99.81959292763158
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ) ;
rank: 356
score: 99.79680069633152
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 357
score: 99.86815270712209
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 357
score: 99.862548828125
patch: out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } } }
rank: 357
score: 99.84791324013158
patch: if ( n . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 357
score: 99.83527303479381
patch: if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( g CaMeL Node . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 357
score: 99.82853109529702
patch: List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 357
score: 99.82061841114458
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 358
score: 99.86253662109375
patch: / * if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 358
score: 99.85532633463542
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } * /
rank: 358
score: 99.852802734375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) .
rank: 358
score: 99.847900390625
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Key ( ) ) ; } }
rank: 358
score: 99.83524576822917
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 358
score: 99.82850632440476
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 358
score: 99.81949869791667
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 359
score: 99.85524338942308
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 359
score: 99.85277800864361
patch: List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 359
score: 99.84789156626506
patch: if ( g CaMeL Node != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 359
score: 99.83518288352273
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 1 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 359
score: 99.82844407487623
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 359
score: 99.81946471497253
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 360
score: 99.868037109375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Value
rank: 360
score: 99.86252055921052
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 360
score: 99.83515832779256
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 360
score: 99.82843572443181
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 360
score: 99.8205078125
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 360
score: 99.81944208559783
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null || out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 361
score: 99.86243489583333
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } }
rank: 361
score: 99.8551913174716
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ( out CaMeL Edges . size ( ) == 1 ) || ( out CaMeL Edges . size ( ) == 1 ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 361
score: 99.8478271484375
patch: if ( out != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 361
score: 99.83513208762886
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 361
score: 99.82047001008064
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 361
score: 99.79658893623737
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 362
score: 99.86797580948796
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 362
score: 99.86240688590117
patch: } } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 362
score: 99.85263781601124
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return g CaMeL Node ; }
rank: 362
score: 99.84773482399426
patch: if ( n . get CaMeL Node ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 362
score: 99.83511041135205
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 362
score: 99.82830004422169
patch: List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 362
score: 99.81943147078805
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 362
score: 99.79652847782258
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ;
rank: 363
score: 99.867958984375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching
rank: 363
score: 99.86236146438954
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } }
rank: 363
score: 99.85514322916667
patch: if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 363
score: 99.85259789156626
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 363
score: 99.84768602324695
patch: if ( n . get CaMeL Node ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 363
score: 99.8350830078125
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 363
score: 99.81942274305555
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 363
score: 99.79652298328489
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 364
score: 99.86794921875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination (
rank: 364
score: 99.855087890625
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null ) { out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 364
score: 99.85255984042553
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 364
score: 99.84763353924419
patch: if ( n . get CaMeL Parent ( ) == null ) List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 364
score: 99.8350740131579
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 364
score: 99.82828618021844
patch: if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 364
score: 99.81940569196429
patch: if ( n == null && n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 364
score: 99.79651460193452
patch: if ( n . get CaMeL Parent ( ) != null ) { Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 365
score: 99.86229395604396
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return out CaMeL Edges . get ( 0 ) ; } }
rank: 365
score: 99.85506538722827
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 365
score: 99.85246165205793
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 365
score: 99.8476329985119
patch: else if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 365
score: 99.82828463040866
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 365
score: 99.8203457919034
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 365
score: 99.81935649671053
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 366
score: 99.86790974934895
patch: if ( g CaMeL Node . get CaMeL Out ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 366
score: 99.86228412828947
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 366
score: 99.85504872311827
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 366
score: 99.852392578125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( )
rank: 366
score: 99.8476329985119
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 366
score: 99.82032171285377
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 366
score: 99.81931470788044
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 366
score: 99.79637192234848
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 367
score: 99.86226249035494
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } } } }
rank: 367
score: 99.8550445864899
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null ) { out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 367
score: 99.85236328125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) out CaMeL Edges . add ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination
rank: 367
score: 99.83487548828126
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 1 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 367
score: 99.82825377747253
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 367
score: 99.79635555186171
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 368
score: 99.86224856321839
patch: } if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 368
score: 99.8475341796875
patch: if ( n . get CaMeL Parent ( ) == null ) { Node < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 368
score: 99.82821800595238
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 1 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 368
score: 99.8192647298177
patch: if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node . Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 369
score: 99.86783854166667
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } }
rank: 369
score: 99.86223885182584
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 369
score: 99.85492011938203
patch: / * if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 369
score: 99.85228515625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 )
rank: 369
score: 99.83484604779412
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) == Branch . UNCOND ) ;
rank: 369
score: 99.82029030539773
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 369
score: 99.81923828125
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 369
score: 99.7962646484375
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return out CaMeL Edges . get ( 0 ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 370
score: 99.86779399671053
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } }
rank: 370
score: 99.86221056099397
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 370
score: 99.85491536458333
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 370
score: 99.84749348958333
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , n ) ; } }
rank: 370
score: 99.83482398056402
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 370
score: 99.82025367093374
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 370
score: 99.79620434864458
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 371
score: 99.85490750718391
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; }
rank: 371
score: 99.85227788880815
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { continue ; }
rank: 371
score: 99.83480149872449
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 371
score: 99.82813538896276
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 371
score: 99.82023195876289
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 371
score: 99.79614825581395
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 372
score: 99.85489662247475
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 372
score: 99.852255859375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Node ( ) . get
rank: 372
score: 99.83472842261905
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 372
score: 99.82811390269886
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 372
score: 99.82022037146227
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , ) ;
rank: 372
score: 99.79607504986703
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return n ; }
rank: 373
score: 99.86217244466145
patch: } else if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 373
score: 99.85489662247475
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 373
score: 99.852216796875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ! out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0
rank: 373
score: 99.8474180640244
patch: while ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 373
score: 99.8202159168956
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { break ; } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 373
score: 99.81917317708333
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 373
score: 99.7960574127907
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 374
score: 99.86766581632654
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 374
score: 99.86213667674731
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } } }
rank: 374
score: 99.85488809121621
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 374
score: 99.852177734375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } Iterator < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get
rank: 374
score: 99.84738233612805
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 374
score: 99.83465711805556
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 1 ) . get CaMeL Value ( ) ) ;
rank: 374
score: 99.82799602004717
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 374
score: 99.82019647277228
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 374
score: 99.81913854720744
patch: if ( n . has CaMeL Children ( ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 374
score: 99.79605325838415
patch: if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 375
score: 99.86765455163044
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 375
score: 99.852158203125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value
rank: 375
score: 99.8473466082317
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 375
score: 99.83461216517857
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 375
score: 99.82797907686782
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 375
score: 99.82015576774691
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 375
score: 99.8191250887784
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , null ) ;
rank: 375
score: 99.79605034722222
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 376
score: 99.86759440104167
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 376
score: 99.86208651928192
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } }
rank: 376
score: 99.85482564786585
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 376
score: 99.85211181640625
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 376
score: 99.84734235491071
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 376
score: 99.8345934139785
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 376
score: 99.82014791081461
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 376
score: 99.819091796875
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 376
score: 99.79602931701031
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 377
score: 99.86207613031915
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 377
score: 99.84723455255681
patch: while ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 377
score: 99.8345703125
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 377
score: 99.82790798611111
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 377
score: 99.8190281080163
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } case Token . BLOCK :
rank: 377
score: 99.79600918170104
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges instanceof Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 378
score: 99.852021484375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if (
rank: 378
score: 99.84722474563954
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; while ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 378
score: 99.83451251594387
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 378
score: 99.82012562692901
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 378
score: 99.7959806743421
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return n ;
rank: 379
score: 99.8674825032552
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 379
score: 99.86203002929688
patch: out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 379
score: 99.85193292025862
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return 1 ; }
rank: 379
score: 99.8472012606534
patch: if ( n . get CaMeL Parent ( ) . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 379
score: 99.81890540994624
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ) ;
rank: 379
score: 99.7959607712766
patch: try { if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 380
score: 99.867470703125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } else
rank: 380
score: 99.86201746323529
patch: / * if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 380
score: 99.84709651295732
patch: if ( n . get CaMeL Parent ( ) == null ) { Node < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 380
score: 99.83438773777173
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 380
score: 99.82787625294812
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 380
score: 99.82001109182099
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 380
score: 99.81890443313954
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) <= 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 380
score: 99.79595094086021
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , ) ;
rank: 381
score: 99.86729939778645
patch: if ( g CaMeL Node . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 381
score: 99.86201379654256
patch: } if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 381
score: 99.85462306701031
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 381
score: 99.8519140625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Destination ( ) . get CaMeL Value ( ) )
rank: 381
score: 99.82778961489899
patch: List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 381
score: 99.81997931985295
patch: if ( n . has CaMeL Children ( ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 381
score: 99.81890314275569
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else
rank: 382
score: 99.86728515625
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ; } }
rank: 382
score: 99.86197916666667
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 382
score: 99.84706333705357
patch: if ( n . get CaMeL Parent ( ) == null ) { try { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 382
score: 99.83435639880952
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 382
score: 99.79588826497395
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 383
score: 99.86725408380681
patch: if ( n . get CaMeL Parent ( ) == null ) { return < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 383
score: 99.86197550912921
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 383
score: 99.8544298537234
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } finally { out CaMeL Edges . close ( ) ; }
rank: 383
score: 99.8470126065341
patch: if ( n . get CaMeL Parent ( ) == null ) { try { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 383
score: 99.82775758044555
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , n ) ;
rank: 383
score: 99.81996597782258
patch: if ( n . has CaMeL Children ( ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 383
score: 99.81884765625
patch: if ( n . get CaMeL Parent ( ) != null || n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 384
score: 99.8672265625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; if ( out CaMeL Edges .
rank: 384
score: 99.85440250318878
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 384
score: 99.83432721077128
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 384
score: 99.82772884728773
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , n ) ; }
rank: 384
score: 99.81990559895833
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 384
score: 99.81883603050595
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 384
score: 99.79584703947368
patch: if ( n . get CaMeL Parent ( ) == null ) { try { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 385
score: 99.85439665421195
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 385
score: 99.85169038318452
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } else {
rank: 385
score: 99.8468368354885
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 385
score: 99.83430325255102
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 385
score: 99.81984336703431
patch: else { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 385
score: 99.81880040322581
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 386
score: 99.86194259129213
patch: } if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 386
score: 99.85436430431548
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } * /
rank: 386
score: 99.8516796875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value
rank: 386
score: 99.84682103207237
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 386
score: 99.83427615282012
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 386
score: 99.79581351902173
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return n ;
rank: 387
score: 99.86192255434783
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 387
score: 99.85430438701923
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 387
score: 99.8516796875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get
rank: 387
score: 99.84680316091954
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 387
score: 99.83427290482955
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 387
score: 99.82765625
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == $NUMBER$ ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 387
score: 99.81978824013157
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 387
score: 99.81878730688203
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 388
score: 99.86190321180555
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 388
score: 99.85426176264045
patch: if ( n . get CaMeL Parent ( ) == this ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 388
score: 99.84678557981928
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else {
rank: 388
score: 99.83425164473684
patch: switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 388
score: 99.81974110704788
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 388
score: 99.81869574652778
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , out CaMeL Edges . get ( 0 ) ) ; }
rank: 389
score: 99.86186810661765
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } } }
rank: 389
score: 99.8515625
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 389
score: 99.84665364583333
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 389
score: 99.83423606636597
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 389
score: 99.82758477393617
patch: if ( n . get CaMeL Parent ( ) == null ) { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 389
score: 99.81972269492574
patch: final Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 389
score: 99.8186922940341
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 390
score: 99.86712311126374
patch: if ( g CaMeL Node . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 390
score: 99.86183215725806
patch: out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 390
score: 99.85153896837349
patch: List < Di CaMeL Graph CaMeL Edge < Node . Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 390
score: 99.84660823170732
patch: if ( n . get CaMeL Parent ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 390
score: 99.81868843410327
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 390
score: 99.79578293010752
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 391
score: 99.867119140625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value
rank: 391
score: 99.85417351973685
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; for ( Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges : out CaMeL Edges ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 391
score: 99.851513671875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; out CaMeL Edges . add ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges
rank: 391
score: 99.8465243252841
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 1 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 391
score: 99.83409155868902
patch: if ( ( n == null ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 391
score: 99.82756241508152
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } return n ;
rank: 391
score: 99.81971726190476
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 391
score: 99.81867732558139
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Type ( ) ) ;
rank: 391
score: 99.79575749033505
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 )
rank: 392
score: 99.86708530159883
patch: if ( g CaMeL Node . get CaMeL Out CaMeL Edges ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 392
score: 99.85417269483025
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 392
score: 99.85148481889205
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return null ; } }
rank: 392
score: 99.84651884191176
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 392
score: 99.83407521802326
patch: if ( g CaMeL Node . has CaMeL Children ( ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 392
score: 99.81867404513889
patch: if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 392
score: 99.7957508175872
patch: if ( n . get CaMeL Parent ( ) == null ) { Node < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 393
score: 99.86169299450549
patch: } else if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 393
score: 99.84648664607558
patch: if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 393
score: 99.83407118055555
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 393
score: 99.81968706109551
patch: if ( n . get CaMeL Parent ( ) == null ) { try { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 393
score: 99.81860598169192
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) . get CaMeL Value ( ) ) ;
rank: 393
score: 99.79574730282738
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return out CaMeL Edges . get ( 0 ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 394
score: 99.86701088763297
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) <= 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 394
score: 99.86167609554597
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 394
score: 99.851416015625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if (
rank: 394
score: 99.83401621942934
patch: if ( n . get CaMeL Parent ( ) == n . get CaMeL Parent ( ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 394
score: 99.8273828125
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 394
score: 99.81858228600544
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ;
rank: 395
score: 99.86161534926471
patch: } else if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 395
score: 99.85407072368422
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } }
rank: 395
score: 99.85137348790323
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 395
score: 99.84637309229652
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get ( ) ) ; } }
rank: 395
score: 99.83400656960227
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 395
score: 99.82734795026882
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 395
score: 99.81965438179348
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 395
score: 99.8185614224138
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , ) ;
rank: 395
score: 99.79573567708333
patch: if ( n instanceof Di CaMeL Graph CaMeL Edge ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 396
score: 99.86696370442708
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } else {
rank: 396
score: 99.86161200944767
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 396
score: 99.85403262867646
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 396
score: 99.85135323660714
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ! out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 396
score: 99.84633501838235
patch: if ( n . get CaMeL Parent ( ) == null ) { final Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 396
score: 99.8272372159091
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 396
score: 99.81852921195652
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 396
score: 99.79567132994185
patch: if ( n . get CaMeL Node ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 397
score: 99.86695894281915
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 397
score: 99.85126953125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; if ( out CaMeL Edges . size ( ) == 1 )
rank: 397
score: 99.84625321400317
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 397
score: 99.82721292747641
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } ; }
rank: 397
score: 99.79565172697369
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 398
score: 99.86694067651099
patch: if ( g CaMeL Node . get CaMeL Out ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 398
score: 99.86156684027777
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } ;
rank: 398
score: 99.85114220727849
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 398
score: 99.84620927019817
patch: if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 398
score: 99.82720762310606
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 398
score: 99.8196134868421
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 398
score: 99.81840376420455
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , n ) ;
rank: 398
score: 99.79562245244566
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 399
score: 99.866904296875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value
rank: 399
score: 99.86156421703296
patch: } try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 399
score: 99.84614376905488
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 399
score: 99.8338623046875
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == $NUMBER$ ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 399
score: 99.8271484375
patch: List < String >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 399
score: 99.81840183423913
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } switch ( n . get CaMeL Type ( ) ) {
rank: 399
score: 99.79559391801075
patch: if ( n == null ) { break ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 400
score: 99.86689685639881
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } else {
rank: 400
score: 99.86154513888889
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 400
score: 99.85395196143617
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ; }
rank: 400
score: 99.8511041135204
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 400
score: 99.8270622702206
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 400
score: 99.81958468455188
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ; }
rank: 400
score: 99.81839192708334
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 400
score: 99.79557291666667
patch: if ( n . get CaMeL Parent ( ) != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 401
score: 99.86688547036083
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 401
score: 99.86152980638587
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 401
score: 99.85394287109375
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; for ( Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges : out CaMeL Edges ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 401
score: 99.8460663586128
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; while ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 401
score: 99.81956990559895
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ) ; }
rank: 401
score: 99.81839156936813
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 401
score: 99.79556599069149
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 402
score: 99.8668778582317
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) < 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 402
score: 99.86145148026316
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ) ; } }
rank: 402
score: 99.85105040015245
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 402
score: 99.83378673735119
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 402
score: 99.82694538985149
patch: List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 402
score: 99.81834801962209
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node . Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 402
score: 99.79552691915761
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 403
score: 99.866865234375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ! try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) )
rank: 403
score: 99.86143401731928
patch: } if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 403
score: 99.85386439732143
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ) ; }
rank: 403
score: 99.8510105298913
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { out CaMeL Edges . remove ( 0 ) ;
rank: 403
score: 99.84602467606707
patch: if ( n . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 403
score: 99.83378040941456
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ;
rank: 403
score: 99.81955056662088
patch: if ( n != null && n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 403
score: 99.81827988735465
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 404
score: 99.85385577598315
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 404
score: 99.85100911458333
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 404
score: 99.84599497126437
patch: while ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 404
score: 99.83376974587912
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 404
score: 99.82692155934343
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ; }
rank: 404
score: 99.8195469232253
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 404
score: 99.81826853197674
patch: if ( n . get CaMeL Parent ( ) == $STRING$ ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 404
score: 99.79550365691489
patch: if ( n . get CaMeL Parent ( ) != null ) { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 405
score: 99.86684466422872
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 405
score: 99.85380537431318
patch: / * if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 405
score: 99.85095703125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if (
rank: 405
score: 99.8459805575284
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 405
score: 99.81954371675532
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 405
score: 99.81826853197674
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 405
score: 99.79544468118686
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 406
score: 99.86141213037635
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } }
rank: 406
score: 99.85379914314517
patch: if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 406
score: 99.84596737132352
patch: if ( n . get CaMeL Parent ( ) == null ) List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 406
score: 99.83376862281976
patch: if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 406
score: 99.81951784620098
patch: try { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 406
score: 99.818251953125
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ) ; }
rank: 406
score: 99.79536769701087
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 407
score: 99.86674685594512
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . is CaMeL Empty ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 407
score: 99.86138980263158
patch: if ( n . get CaMeL Parent ( ) . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 407
score: 99.83375133167614
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 407
score: 99.82678815230582
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 407
score: 99.81824261209239
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node . Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } switch ( n . get CaMeL Type ( ) ) {
rank: 407
score: 99.79536769701087
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 408
score: 99.86673990885417
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 408
score: 99.86131690014368
patch: try { if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 408
score: 99.85371326264881
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) ) ; } }
rank: 408
score: 99.84593023255815
patch: if ( n . get CaMeL Parent ( ) == null ) { final Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 408
score: 99.8336154513889
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 408
score: 99.81950997834159
patch: case Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 408
score: 99.81823867626404
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 408
score: 99.7953570822011
patch: if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 409
score: 99.86131663602941
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ; } }
rank: 409
score: 99.83359162703805
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null || out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 409
score: 99.81950239701705
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 409
score: 99.81822916666667
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 410
score: 99.86672044836956
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 410
score: 99.85078729059278
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 410
score: 99.84590752180233
patch: while ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 410
score: 99.83358101222827
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 410
score: 99.82671333539604
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 410
score: 99.81949255601415
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; }
rank: 410
score: 99.8181884765625
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 410
score: 99.79520089285714
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 411
score: 99.86671956380208
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( g CaMeL Node . get CaMeL Out CaMeL Edges ( ) . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 411
score: 99.8612087673611
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } } }
rank: 411
score: 99.850751953125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) .
rank: 411
score: 99.84588702313312
patch: else if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 411
score: 99.8335491677989
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { break ; }
rank: 411
score: 99.82667858195755
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 411
score: 99.8194140625
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 411
score: 99.81813742897727
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 411
score: 99.79517663043478
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 412
score: 99.86671057412791
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 412
score: 99.86116536458333
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } }
rank: 412
score: 99.85075052668539
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } }
rank: 412
score: 99.8458584872159
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 412
score: 99.83347925646552
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == Branch . UNCOND ) ;
rank: 412
score: 99.82665512242268
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 412
score: 99.81940487132353
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 412
score: 99.81813226744185
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node + Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 412
score: 99.79516059027777
patch: if ( n . get CaMeL Parent ( ) != null ) { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 413
score: 99.86670470505618
patch: if ( n . get CaMeL Out ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 413
score: 99.85356494633838
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 413
score: 99.82661409198113
patch: Di CaMeL Graph CaMeL Node < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 414
score: 99.86111349587912
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } }
rank: 414
score: 99.85072265625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node . Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get
rank: 414
score: 99.84578080610795
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Type ( ) ) ; } }
rank: 414
score: 99.81936710438829
patch: List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 414
score: 99.81803385416667
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 414
score: 99.79515540081522
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == $NUMBER$ ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 415
score: 99.86656697591145
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 415
score: 99.86110983455882
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } } } }
rank: 415
score: 99.85350566007654
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 415
score: 99.850703125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching (
rank: 415
score: 99.8457634066358
patch: if ( n . get CaMeL Parent ( ) == null ) { final Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 415
score: 99.83336990870787
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 415
score: 99.82652698863636
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 415
score: 99.8192885315534
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 415
score: 99.7951023267663
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 416
score: 99.86106275475544
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return out CaMeL Edges . get ( 0 ) ; } } }
rank: 416
score: 99.85066731770833
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; }
rank: 416
score: 99.84569709683642
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get ( 0 ) ) ; } }
rank: 416
score: 99.81801140445403
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 417
score: 99.86103627873563
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } }
rank: 417
score: 99.85066636029411
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 417
score: 99.83332248263889
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) , g CaMeL Node . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 417
score: 99.82645227413366
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } ;
rank: 417
score: 99.79506429036458
patch: if ( n . get CaMeL Parent ( ) instanceof Di CaMeL Graph CaMeL Edge ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 418
score: 99.85341282894737
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 418
score: 99.85062579719387
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 418
score: 99.83332170758929
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 418
score: 99.81907743566177
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 418
score: 99.81786024305555
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 419
score: 99.85059799382717
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 419
score: 99.84566824776786
patch: if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } }
rank: 419
score: 99.83331163194444
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 419
score: 99.82644440406976
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge [ ] , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 419
score: 99.81906532379519
patch: if ( n . has CaMeL Children ( ) ) { List < Di CaMeL Graph < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 419
score: 99.81777782654494
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , out CaMeL Edges . get ( 0 ) ) ;
rank: 419
score: 99.7949930826823
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Node < Node < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 420
score: 99.8661221590909
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 420
score: 99.86097301136364
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge <= Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 420
score: 99.85335286458333
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 420
score: 99.8505117681962
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null ) {
rank: 420
score: 99.84556193524097
patch: while ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 420
score: 99.83330909242021
patch: switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 420
score: 99.81903076171875
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 420
score: 99.81775753997093
patch: if ( n . get CaMeL Parent ( ) == 0 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 420
score: 99.79499162946429
patch: if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 421
score: 99.865966796875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) .
rank: 421
score: 99.8533135775862
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 421
score: 99.85044921875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get
rank: 421
score: 99.8455441497093
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 421
score: 99.82640219634433
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 421
score: 99.81902573529412
patch: if ( n . get CaMeL Parent ( ) == null ) { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 421
score: 99.8177517361111
patch: if ( n == null && n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 421
score: 99.79498166454081
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 422
score: 99.86594366776316
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 422
score: 99.86089797247024
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 422
score: 99.85044642857143
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 422
score: 99.84554227941176
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges ) ; }
rank: 422
score: 99.8333050271739
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null || out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 422
score: 99.82635633680556
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 422
score: 99.8189858490566
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 422
score: 99.81767805232558
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 423
score: 99.86588899381869
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 423
score: 99.84552323190789
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 423
score: 99.83330305232558
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node != Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 423
score: 99.826328125
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> g CaMeL Node = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( g CaMeL Node == null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 423
score: 99.81881824171687
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 423
score: 99.81761382728494
patch: if ( n . get CaMeL Parent ( ) . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 423
score: 99.79494243421053
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) , n ) ;
rank: 424
score: 99.86583984375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value (
rank: 424
score: 99.86088610197369
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } }
rank: 424
score: 99.85326360887096
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 424
score: 99.84552143895348
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 424
score: 99.83327792553192
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 424
score: 99.81881648936171
patch: List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 424
score: 99.81759982638889
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 425
score: 99.86087824789325
patch: } if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 425
score: 99.85315958658855
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 425
score: 99.8504296875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching (
rank: 425
score: 99.8455010775862
patch: if ( n != null ) { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 425
score: 99.8332186612216
patch: if ( ( n . get CaMeL Parent ( ) == null ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 425
score: 99.81759856468024
patch: if ( n . get CaMeL Parent ( ) == n ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 425
score: 99.79489037298387
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 426
score: 99.86087101063829
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null ) { out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 426
score: 99.8187839673913
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { break ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 426
score: 99.81756449854652
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Object , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 426
score: 99.79487847222222
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 427
score: 99.86576990927419
patch: if ( n . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 427
score: 99.850380859375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Node (
rank: 427
score: 99.84542686060855
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 427
score: 99.82630208333333
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 427
score: 99.81869446997548
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ; }
rank: 427
score: 99.81752982190861
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , ) ;
rank: 428
score: 99.86574343417553
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) <= 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 428
score: 99.85302734375
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 428
score: 99.8503750887784
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 428
score: 99.84542250359195
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; }
rank: 428
score: 99.8262927827381
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 428
score: 99.81868143284575
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 428
score: 99.81749770220588
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 428
score: 99.79484296085859
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 429
score: 99.8608552631579
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 429
score: 99.85301672894022
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 429
score: 99.85021286867978
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ;
rank: 429
score: 99.82627688172043
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 429
score: 99.81747365552326
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 1 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 429
score: 99.79484296085859
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 430
score: 99.86573327105978
patch: if ( n . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 430
score: 99.845388829023
patch: if ( n . get CaMeL Parent ( ) . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 430
score: 99.83311281922043
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 430
score: 99.8262684581044
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 431
score: 99.86078082074175
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 431
score: 99.8501953125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Destination (
rank: 431
score: 99.8453655478395
patch: while ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 431
score: 99.8185798891129
patch: if ( n . get CaMeL Parent ( ) != null ) { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 431
score: 99.81742823401163
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node . Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 431
score: 99.79482014973958
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . has CaMeL Children ( ) ) { break ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 432
score: 99.8607775099734
patch: if ( n . get CaMeL Parent ( ) != null && n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 432
score: 99.850185546875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } Set < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get
rank: 432
score: 99.83308730014535
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 432
score: 99.82618144914215
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , n ) ; }
rank: 432
score: 99.81857115963855
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 432
score: 99.81739390980114
patch: if ( n . has CaMeL Children ( ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 432
score: 99.79478081597222
patch: if ( n . get CaMeL Parent ( ) != null ) { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 433
score: 99.8607107579023
patch: else { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 433
score: 99.85289417613636
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 433
score: 99.85015625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } else if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional
rank: 433
score: 99.8453369140625
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = out CaMeL Edges . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 433
score: 99.83308376736112
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 433
score: 99.826171875
patch: List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 433
score: 99.81737145712209
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ;
rank: 434
score: 99.86069742838542
patch: List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 434
score: 99.85286824087079
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 434
score: 99.85014105902778
patch: if ( g CaMeL Node . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 434
score: 99.84531630478897
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 434
score: 99.82607634171195
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 434
score: 99.81854440789473
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 434
score: 99.79472883357558
patch: if ( n . get CaMeL Parent ( ) != null ) { Node < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 435
score: 99.86554904513889
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } ) ;
rank: 435
score: 99.8606922238372
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } } }
rank: 435
score: 99.85285373263889
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 435
score: 99.85013671875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Node < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( )
rank: 435
score: 99.83306146978022
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == Branch . UNCOND ) ;
rank: 435
score: 99.81733298788265
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 435
score: 99.79472436797752
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 436
score: 99.86541015625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value
rank: 436
score: 99.86067023026315
patch: else if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 436
score: 99.85012448489012
patch: List < Di CaMeL Graph CaMeL Edge < Node , Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 436
score: 99.84522786458334
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 436
score: 99.83304767219387
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . RETURN ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 436
score: 99.82598039215686
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } ; }
rank: 436
score: 99.81851720328282
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 436
score: 99.81732855902777
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node . Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 436
score: 99.79469807942708
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 437
score: 99.8606097341954
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return out CaMeL Edges . get ( 0 ) ; } }
rank: 437
score: 99.85279482886905
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } finally { out CaMeL Edges . close ( ) ;
rank: 437
score: 99.85011985085227
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 437
score: 99.84517045454545
patch: if ( n . get CaMeL Parent ( ) . get CaMeL Value ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 437
score: 99.83301842730978
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null && out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 437
score: 99.82597458964646
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 437
score: 99.81849443151596
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 437
score: 99.81728931183511
patch: if ( g CaMeL Node != null || g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 438
score: 99.86536661783855
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 438
score: 99.86055715460526
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 438
score: 99.850029296875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if
rank: 438
score: 99.84515671502976
patch: if ( n . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 438
score: 99.8330078125
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 438
score: 99.81849025451031
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 438
score: 99.81728405898876
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && / / ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 438
score: 99.79464285714286
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 439
score: 99.86532592773438
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 439
score: 99.86050739694149
patch: if ( n . get CaMeL Parent ( ) != null && n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 439
score: 99.8499609375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . to
rank: 439
score: 99.81847742101648
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 439
score: 99.81723167782738
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 439
score: 99.79463975694445
patch: if ( n . get CaMeL Parent ( ) == null ) { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 440
score: 99.8653231534091
patch: if ( n . get CaMeL Value ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 440
score: 99.86049582741477
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) <= 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 440
score: 99.85276197350544
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 440
score: 99.849951171875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 )
rank: 440
score: 99.8450339988426
patch: if ( n . get CaMeL Parent ( ) == null ) List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 440
score: 99.83299794823232
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Branch . UNCOND ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 440
score: 99.82595076650944
patch: if ( n . get CaMeL Parent ( ) != null ) { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 440
score: 99.81722697805851
patch: if ( n . get CaMeL Parent ( ) != null && n . has CaMeL Children ( ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 441
score: 99.86048955502717
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } } ) ;
rank: 441
score: 99.85271462429775
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { throw try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 441
score: 99.84985849808673
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 441
score: 99.84502883184524
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( g CaMeL Node . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 441
score: 99.83299696180555
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 441
score: 99.81841187836021
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 441
score: 99.81719835069444
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 441
score: 99.79462224786931
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 442
score: 99.84983793218085
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . to CaMeL String ( ) ) ; } }
rank: 442
score: 99.84500229779412
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) , out CaMeL Edges . get ( 0 ) ) ; } }
rank: 442
score: 99.8258203125
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> g CaMeL Node = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 442
score: 99.81839467243977
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 443
score: 99.86044347426471
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) <= 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 443
score: 99.83293508976064
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 443
score: 99.81718977107558
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return n ;
rank: 443
score: 99.79456097146739
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 444
score: 99.865234375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else
rank: 444
score: 99.86043013649426
patch: / * / if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 444
score: 99.84491288034539
patch: if ( node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 444
score: 99.83292923850574
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 444
score: 99.82574134744624
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 444
score: 99.81834920247395
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 444
score: 99.8171633602528
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , out CaMeL Edges . get ( 0 ) ) ;
rank: 444
score: 99.7945543514785
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) != 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 445
score: 99.86514469068878
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 445
score: 99.86040642556179
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } }
rank: 445
score: 99.84487951807229
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , n ) ; }
rank: 445
score: 99.8329190340909
patch: if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 445
score: 99.82571176382211
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 445
score: 99.81715494791666
patch: if ( g CaMeL Node . get CaMeL Out CaMeL Edges ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 446
score: 99.85264756944444
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 446
score: 99.844773625753
patch: if ( n . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 446
score: 99.83290392287235
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 446
score: 99.81712239583334
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get ( ) ) ;
rank: 446
score: 99.79451670545212
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 447
score: 99.85263157894737
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; for ( Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges : out CaMeL Edges ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 447
score: 99.84475009412651
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 447
score: 99.83289930555556
patch: if ( g CaMeL Node . get CaMeL Type ( ) == Token . FUNCTION ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 447
score: 99.8182496488764
patch: else { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 447
score: 99.81709892805233
patch: if ( g CaMeL Node != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 447
score: 99.79451331313776
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 448
score: 99.86498480902777
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( g CaMeL Node . get CaMeL Out CaMeL Edges ( ) . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 448
score: 99.86030910326087
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 448
score: 99.85260641163794
patch: if ( n . get CaMeL Parent ( ) == this ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 448
score: 99.84966796875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 )
rank: 448
score: 99.83288290334302
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 448
score: 99.82544464760639
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 448
score: 99.81824132898352
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 448
score: 99.81708757267442
patch: if ( n . get CaMeL Root ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 448
score: 99.79451331313776
patch: if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 449
score: 99.86025806183511
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 449
score: 99.849658203125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( )
rank: 449
score: 99.84469209558823
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 449
score: 99.82541551776961
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , n ) ; }
rank: 449
score: 99.8182373046875
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ! out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 449
score: 99.81703168890449
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 450
score: 99.8602039425872
patch: } if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 450
score: 99.85259518678161
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; }
rank: 450
score: 99.84468005952381
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } }
rank: 450
score: 99.83286277846534
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 450
score: 99.82541106468024
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 450
score: 99.81821001838236
patch: if ( n . get CaMeL Parent ( ) != null ) { Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 450
score: 99.81693995276163
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 450
score: 99.79448784722223
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 451
score: 99.8601407137784
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 451
score: 99.85259454900569
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 451
score: 99.84467892530488
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else
rank: 451
score: 99.82540389866504
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 451
score: 99.81693608710107
patch: if ( n . get CaMeL Parent ( ) != null || n . has CaMeL Children ( ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 451
score: 99.79446765988372
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) >= 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 452
score: 99.84959909539474
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 452
score: 99.84466231496711
patch: if ( n . get CaMeL Node ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 452
score: 99.83280003324468
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 452
score: 99.82540379213484
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ! out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 452
score: 99.81820154671718
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ;
rank: 452
score: 99.81692637567934
patch: if ( cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 452
score: 99.7944061622191
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 453
score: 99.86007724719101
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 453
score: 99.85258198832418
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 453
score: 99.84956498579545
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 453
score: 99.84465997869319
patch: if ( out . get CaMeL Node ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 453
score: 99.83279079861111
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 453
score: 99.82540189302884
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; }
rank: 453
score: 99.81688317587209
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 453
score: 99.79435483870968
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return n ; }
rank: 454
score: 99.86475123355264
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } else {
rank: 454
score: 99.86007557744566
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } }
rank: 454
score: 99.85250776241988
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 454
score: 99.84951171875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if
rank: 454
score: 99.81813151041666
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 454
score: 99.81680772569445
patch: if ( n . get CaMeL Parent ( ) . has CaMeL Children ( ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 455
score: 99.86470680675288
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) < 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 455
score: 99.86005741716868
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 455
score: 99.85243174793956
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) ) ; } }
rank: 455
score: 99.8494921875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get
rank: 455
score: 99.84462510146103
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } else {
rank: 455
score: 99.81811255151099
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 455
score: 99.79425740979381
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 456
score: 99.86466841264205
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 456
score: 99.85243055555556
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ) ; } }
rank: 456
score: 99.849482421875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get
rank: 456
score: 99.83270263671875
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 1 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 456
score: 99.81810052710843
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 456
score: 99.81674592391305
patch: if ( n . get CaMeL Parent ( ) == null || g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 456
score: 99.7942393313172
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 457
score: 99.864658203125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null && out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( )
rank: 457
score: 99.86004035027473
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 457
score: 99.85239955357143
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges ) ; }
rank: 457
score: 99.84944661458333
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 457
score: 99.84461167279412
patch: if ( g CaMeL Node != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } } }
rank: 457
score: 99.83269660027473
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 1 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == Branch . UNCOND ) ;
rank: 457
score: 99.82518601190476
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 457
score: 99.81800162438118
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 457
score: 99.79423384232955
patch: if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 458
score: 99.85237809065934
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 458
score: 99.84943669016768
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 458
score: 99.84459186422414
patch: if ( out . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 458
score: 99.82514989098837
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 458
score: 99.81791651526163
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 458
score: 99.81666148792614
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , false ) ;
rank: 458
score: 99.79421832997312
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Parent ( ) == null ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 459
score: 99.86001519097222
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } } } }
rank: 459
score: 99.84942250192901
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 459
score: 99.84455217633929
patch: if ( n . get CaMeL Parent ( ) . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 459
score: 99.81790794516509
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ; }
rank: 459
score: 99.79419732862904
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 460
score: 99.864580078125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) .
rank: 460
score: 99.85999116443452
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 460
score: 99.85236350070225
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } * /
rank: 460
score: 99.84940159574468
patch: List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 460
score: 99.84453790838069
patch: synchronized ( n ) { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 460
score: 99.81788219105114
patch: if ( n . get CaMeL Parent ( ) == null ) { return null ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 460
score: 99.81644736842105
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 460
score: 99.79417632728494
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 461
score: 99.85996523008242
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 461
score: 99.85232979910714
patch: List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 461
score: 99.84453125
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 461
score: 99.83260091145833
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 1 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 461
score: 99.81785266804245
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 461
score: 99.8164395419034
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; break ;
rank: 461
score: 99.7941658266129
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 462
score: 99.85994203629032
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 462
score: 99.85230297046704
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } finally { out CaMeL Edges . close ( ) ; }
rank: 462
score: 99.84937474634741
patch: List < Node < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 462
score: 99.84451976102942
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 462
score: 99.82497829861111
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ; }
rank: 462
score: 99.7941647647472
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 463
score: 99.86452842620481
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } else
rank: 463
score: 99.8599344889323
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 463
score: 99.85228207236842
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 463
score: 99.84931413517442
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( out CaMeL Edges ) ;
rank: 463
score: 99.84449494190706
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 463
score: 99.82495368878865
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 463
score: 99.81640625
patch: if ( g CaMeL Node != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ) ;
rank: 463
score: 99.79416232638889
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 464
score: 99.86451898619185
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . length == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 464
score: 99.85992647058823
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 464
score: 99.85225423177083
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) ) ; }
rank: 464
score: 99.8493106617647
patch: try { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 464
score: 99.84441636029412
patch: else { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 464
score: 99.83251459911617
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Branch . UNCOND ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 464
score: 99.82492458230197
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ! out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 465
score: 99.85990870276163
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 465
score: 99.85221689755154
patch: List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 465
score: 99.84438254616477
patch: if ( n . get CaMeL Parent ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 465
score: 99.832509765625
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , n . get CaMeL Type ( ) . get CaMeL Value ( ) ) ;
rank: 465
score: 99.82488321520619
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 465
score: 99.81782483552631
patch: if ( n . get CaMeL Parent ( ) != null || n . has CaMeL Children ( ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 466
score: 99.85218302408855
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } * /
rank: 466
score: 99.84436645507813
patch: if ( out . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 466
score: 99.832421875
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 466
score: 99.81776720412235
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; }
rank: 466
score: 99.81636082848837
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 466
score: 99.79410282258064
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n == null ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 467
score: 99.86435546875
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 467
score: 99.85988451086956
patch: / * if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } }
rank: 467
score: 99.8521754488032
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ; }
rank: 467
score: 99.84919877485795
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 467
score: 99.84434204101562
patch: if ( n . get CaMeL Parent ( ) == null ) List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 467
score: 99.8323948636968
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 467
score: 99.82484723081683
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 467
score: 99.81775588132022
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 467
score: 99.81634324596774
patch: if ( n . has CaMeL Children ( ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 467
score: 99.79403023097827
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 468
score: 99.85216599367978
patch: if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 468
score: 99.84910599226804
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 468
score: 99.83237485532408
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 1 ) . get CaMeL Value ( ) ) ; }
rank: 468
score: 99.82481728830645
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 468
score: 99.81771627286585
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 468
score: 99.81633966619319
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 468
score: 99.79399725731383
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 && n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 469
score: 99.85986842105264
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 469
score: 99.85211622100516
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null ) { out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 469
score: 99.8490498860677
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null ) { out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; }
rank: 469
score: 99.84429390822785
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( ) ; } }
rank: 469
score: 99.83230064655173
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == Branch . UNCOND ) ;
rank: 469
score: 99.8176953125
patch: Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 469
score: 99.81632676235465
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 1 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 469
score: 99.79397647938829
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 470
score: 99.86423611111111
patch: if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 470
score: 99.85986328125
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 470
score: 99.85209703947369
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 470
score: 99.84421446265245
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Node ( ) ) ; } }
rank: 470
score: 99.832275390625
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && false ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 470
score: 99.82477678571429
patch: List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 470
score: 99.81768940770348
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 470
score: 99.81631645114942
patch: else if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 471
score: 99.85984057049419
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } else {
rank: 471
score: 99.84899450231481
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 471
score: 99.84417509191177
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , n ) ; } } }
rank: 471
score: 99.82473958333334
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 471
score: 99.81768798828125
patch: if ( n . get CaMeL Parent ( ) == null || n . has CaMeL Children ( ) ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 471
score: 99.81623149671053
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else {
rank: 471
score: 99.79393503289474
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 472
score: 99.85976978058511
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 472
score: 99.85201822916666
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } else {
rank: 472
score: 99.84891183035714
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 472
score: 99.8441495028409
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( ) ; } }
rank: 472
score: 99.83221293604652
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) , n ) ;
rank: 472
score: 99.82472153465346
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 472
score: 99.79393446180555
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return out CaMeL Edges . get ( 0 ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 473
score: 99.864130859375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node > out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL
rank: 473
score: 99.85976133241758
patch: if ( n . get CaMeL Parent ( ) . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 473
score: 99.84886585582386
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 473
score: 99.84412906044408
patch: while ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 473
score: 99.83220486111111
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 473
score: 99.79392496744792
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 474
score: 99.8640625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) .
rank: 474
score: 99.8519866635101
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 474
score: 99.84884765625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } Iterator < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Destination (
rank: 474
score: 99.84409466911765
patch: if ( n . get CaMeL Parent ( ) == null ) { try { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 474
score: 99.8321822648196
patch: Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 474
score: 99.82470703125
patch: Di CaMeL Graph CaMeL Node < Node , Integer >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 474
score: 99.81766183035714
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 474
score: 99.81618009868421
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 474
score: 99.79392260174419
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 475
score: 99.8640234375
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 475
score: 99.85969682173295
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ; }
rank: 475
score: 99.85198419744319
patch: if ( n . get CaMeL Parent ( ) == this ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 475
score: 99.8440906613372
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 475
score: 99.83214552859043
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 475
score: 99.8176602450284
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 475
score: 99.81616753472223
patch: if ( n . get CaMeL Parent ( ) != null && n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 475
score: 99.79390092329545
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 476
score: 99.863984375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination (
rank: 476
score: 99.85969344429348
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } } } }
rank: 476
score: 99.84880859375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Node
rank: 476
score: 99.8440906613372
patch: if ( n . get CaMeL Parent ( ) . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 476
score: 99.83206697789635
patch: if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 476
score: 99.816162109375
patch: if ( n . get CaMeL Parent ( ) . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 477
score: 99.84876158997253
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) out CaMeL Edges . get ( 0 ) ;
rank: 477
score: 99.8440829190341
patch: List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 477
score: 99.83206492456897
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) == Branch . UNCOND ) ;
rank: 477
score: 99.81760896381579
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 478
score: 99.86382501775569
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) {
rank: 478
score: 99.85958059210526
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 478
score: 99.85193556882022
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 1 ) . get CaMeL Value ( ) ) ; }
rank: 478
score: 99.84404907226562
patch: while ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 478
score: 99.82454427083333
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 478
score: 99.81760602678571
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 478
score: 99.81612273185483
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( out CaMeL Edges . get ( 0 ) ) . get CaMeL Destination ( ) ) ;
rank: 478
score: 99.79385446947674
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 479
score: 99.85957475142045
patch: if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 479
score: 99.851884765625
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ) ; } }
rank: 479
score: 99.848671875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 1 ) . get CaMeL Destination ( ) . get
rank: 479
score: 99.84404414533132
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , ) ; } }
rank: 479
score: 99.81759344362744
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; }
rank: 479
score: 99.81611328125
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 480
score: 99.85952982088415
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 480
score: 99.8486328125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get
rank: 480
score: 99.83198879076087
patch: switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 480
score: 99.82452766262755
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 480
score: 99.81756706957547
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 480
score: 99.8161075367647
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 480
score: 99.79380104758523
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return n ; }
rank: 481
score: 99.86364135742187
patch: if ( n . get CaMeL Out ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 481
score: 99.85952386623475
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } } }
rank: 481
score: 99.85186298076923
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } finally { out CaMeL Edges . close ( ) ; }
rank: 481
score: 99.848623046875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) out CaMeL Edges . add ( g CaMeL Node . get CaMeL Destination ( ) . get CaMeL
rank: 481
score: 99.84397583007812
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 481
score: 99.82451837713069
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ! out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 481
score: 99.81608780570652
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 481
score: 99.79377730174731
patch: if ( n . get CaMeL Parent ( ) == null ) { break ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 482
score: 99.86363447473404
patch: if ( n . get CaMeL Parent ( ) == null && g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 482
score: 99.85951741536458
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } }
rank: 482
score: 99.8518575032552
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 482
score: 99.84391276041667
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 482
score: 99.83198192866162
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Branch . UNCOND ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 482
score: 99.81755952380952
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 482
score: 99.81608072916667
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 482
score: 99.7937723795573
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 483
score: 99.86359375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null && g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value
rank: 483
score: 99.85951005651596
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 483
score: 99.8484375
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } else
rank: 483
score: 99.8439089752907
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } } }
rank: 483
score: 99.83195383955793
patch: while ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 483
score: 99.81753642907303
patch: if ( g CaMeL Node . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 483
score: 99.79375
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 484
score: 99.85179351478494
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges ) ; } } }
rank: 484
score: 99.84842503324468
patch: List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 484
score: 99.82438151041667
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ! out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 484
score: 99.81751976943598
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 484
score: 99.79372240149456
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 485
score: 99.84839672046704
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { out CaMeL Edges . clear ( ) ;
rank: 485
score: 99.84386268028847
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 485
score: 99.83190104166667
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 485
score: 99.82435021033653
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 485
score: 99.81748812806373
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 485
score: 99.81602016715117
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } else { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 485
score: 99.79370391502809
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 486
score: 99.859422063253
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 486
score: 99.84384191176471
patch: while ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 486
score: 99.83186141304348
patch: if ( n . get CaMeL Parent ( ) == n . get CaMeL Type ( ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 486
score: 99.81747213224085
patch: if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 486
score: 99.81596327319588
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 486
score: 99.79370379704301
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ;
rank: 487
score: 99.86351971293605
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 487
score: 99.85169613486842
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 487
score: 99.84830078125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Destination ( ) . get CaMeL
rank: 487
score: 99.8318466558689
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 487
score: 99.81746866414835
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 487
score: 99.81590032003012
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else {
rank: 487
score: 99.7936888415404
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 488
score: 99.85162109375
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 488
score: 99.84830078125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get
rank: 488
score: 99.84381658380681
patch: if ( this . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 488
score: 99.83184191645408
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Parent ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 488
score: 99.82426709467822
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 488
score: 99.8174430941358
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 488
score: 99.8158846768466
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 488
score: 99.79368622448979
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 489
score: 99.863505859375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value
rank: 489
score: 99.8593219259511
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } }
rank: 489
score: 99.8515625
patch: else if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 489
score: 99.84827983810241
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 489
score: 99.8438155011433
patch: if ( out . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 489
score: 99.8318117977528
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == Branch . UNCOND ) ;
rank: 489
score: 99.82426120923913
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ! out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 489
score: 99.81588390261628
patch: if ( n . get CaMeL Value ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 489
score: 99.79366932744566
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 490
score: 99.8634765625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Out ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( )
rank: 490
score: 99.85929361979167
patch: / * if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 490
score: 99.84826171875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } Iterator < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get
rank: 490
score: 99.84378662109376
patch: if ( out . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 490
score: 99.831787109375
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 1 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 490
score: 99.82425130208334
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 490
score: 99.81585115131578
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node . Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 490
score: 99.79358828965054
patch: if ( n . get CaMeL Parent ( ) == null ) { break ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 491
score: 99.85928344726562
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ; } } } }
rank: 491
score: 99.85153952205883
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } } * /
rank: 491
score: 99.83178442651099
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 491
score: 99.81582712572674
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 491
score: 99.79354383680555
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 492
score: 99.84821111505681
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return out CaMeL Edges ;
rank: 492
score: 99.84375
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL String ( ) ) ; } }
rank: 492
score: 99.83177887991573
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { throw try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 492
score: 99.82423975134408
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 492
score: 99.81737183988764
patch: if ( n . get CaMeL Parent ( ) == null ) { return null ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 492
score: 99.81579975328947
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 492
score: 99.79349190848214
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . has CaMeL Children ( ) ) { break ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 493
score: 99.86335320723684
patch: if ( n . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } }
rank: 493
score: 99.85923700747283
patch: else { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } }
rank: 493
score: 99.83177734375
patch: switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 493
score: 99.82423847853535
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == $NUMBER$ ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 493
score: 99.81734375
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; }
rank: 493
score: 99.79344019396552
patch: if ( n . get CaMeL Parent ( ) != null ) { break ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 494
score: 99.863330078125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null && out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( )
rank: 494
score: 99.8592273800872
patch: try { if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 494
score: 99.85145175579896
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 494
score: 99.84818359375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) <= 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 )
rank: 494
score: 99.83177601207386
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 494
score: 99.82422485351563
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 494
score: 99.81729789402173
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 494
score: 99.7934323705808
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , ) ;
rank: 495
score: 99.863330078125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value (
rank: 495
score: 99.85144180126404
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ( out CaMeL Edges . size ( ) == 1 ) || ( out CaMeL Edges . size ( ) == 1 ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 495
score: 99.8481640625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 495
score: 99.84365012428977
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else
rank: 495
score: 99.83177152593085
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 495
score: 99.81720430107526
patch: if ( n . get CaMeL Parent ( ) == null ) { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 495
score: 99.81571628736413
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ) ;
rank: 496
score: 99.85922386532738
patch: } else if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 496
score: 99.8481164691092
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = get CaMeL Out CaMeL Edges ( out CaMeL Edges . get ( 0 ) ) ;
rank: 496
score: 99.83177083333334
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return new Di CaMeL Graph CaMeL Edge < Node , Branch >> ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 496
score: 99.81571357194767
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 496
score: 99.79327002992021
patch: if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 497
score: 99.85917736235119
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 497
score: 99.85136521464646
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 497
score: 99.84360573508523
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node . Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 497
score: 99.83177083333334
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 497
score: 99.8156505766369
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 497
score: 99.79325457317073
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { break ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 498
score: 99.85135633680555
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 498
score: 99.84810467155613
patch: List out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 498
score: 99.8435946377841
patch: if ( n . get CaMeL Destination ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 498
score: 99.8317539544753
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) == Branch . UNCOND ) ;
rank: 498
score: 99.81717433286516
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; }
rank: 498
score: 99.8156317349138
patch: else if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 499
score: 99.85134548611111
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 499
score: 99.84357244318181
patch: if ( n . get CaMeL Parent ( ) > null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 499
score: 99.83175048828124
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 499
score: 99.82413832720589
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } if ( n . get CaMeL Parent ( ) != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 499
score: 99.81716086647727
patch: List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 499
score: 99.81562051005747
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 499
score: 99.79320518092105
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 500
score: 99.86305588942308
patch: if ( g CaMeL Node . get CaMeL Out CaMeL Edges ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 500
score: 99.85910373263889
patch: if ( n . get CaMeL Parent ( ) == null ) { try { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 500
score: 99.848076171875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Value (
rank: 500
score: 99.84356831395348
patch: synchronized ( n . get CaMeL Parent ( ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 500
score: 99.83170572916667
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 500
score: 99.8241299715909
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 500
score: 99.81715029761905
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Value ( ) ) ;
rank: 500
score: 99.81561668882979
patch: if ( g CaMeL Node . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 500
score: 99.79320406626506
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else {
rank: 501
score: 99.86302734375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value
rank: 501
score: 99.85910247093024
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ; } } } }
rank: 501
score: 99.8480562876506
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 ) {
rank: 501
score: 99.8435391512784
patch: if ( out . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } }
rank: 501
score: 99.83167422715054
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 501
score: 99.79317801339286
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 502
score: 99.86301113696808
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) < 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 502
score: 99.851171875
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 502
score: 99.84803263346355
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 502
score: 99.8316547439759
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 502
score: 99.81552956321023
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 502
score: 99.79310684974747
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ;
rank: 503
score: 99.86300062859195
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 503
score: 99.8511629971591
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { throw try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 503
score: 99.84348366477273
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , ? > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 503
score: 99.83162434895833
patch: switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 503
score: 99.8170386904762
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 503
score: 99.81552734375
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 504
score: 99.8510896381579
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 504
score: 99.84797819368131
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( out CaMeL Edges . get ( 0 ) ) ;
rank: 504
score: 99.84345822217988
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 1 ) . get CaMeL Value ( ) ) ; } }
rank: 504
score: 99.83157348632812
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 504
score: 99.82402570857558
patch: if ( n . get CaMeL Parent ( ) != null ) { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 504
score: 99.81698638613861
patch: final Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 504
score: 99.8155184659091
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , $STRING$ ) ;
rank: 504
score: 99.79307489809783
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 505
score: 99.85896381578948
patch: List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 505
score: 99.847919921875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 )
rank: 505
score: 99.84343927556819
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . to CaMeL String ( ) ) ; } }
rank: 505
score: 99.823984375
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 505
score: 99.81697162828948
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 505
score: 99.81550709794207
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 506
score: 99.85895497311827
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 506
score: 99.85102982954545
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null ) { out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 506
score: 99.84790307348901
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } else { return g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; }
rank: 506
score: 99.84343610491071
patch: else if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 506
score: 99.83152173913044
patch: if ( n . get CaMeL Parent ( ) == null || g CaMeL Node . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 506
score: 99.816953125
patch: List < Di CaMeL Graph < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 507
score: 99.86273036858974
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 507
score: 99.85893297697369
patch: } } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 507
score: 99.85102439413265
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } } * /
rank: 507
score: 99.8478582974138
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Node ( ) . get CaMeL Value ( ) ) ; }
rank: 507
score: 99.84343518708882
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 507
score: 99.8315155372191
patch: if ( n . get CaMeL Type ( ) == Token . BLOCK ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 507
score: 99.82389967512377
patch: List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 507
score: 99.81547510901163
patch: if ( g CaMeL Node . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 508
score: 99.86270857445987
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 508
score: 99.8478515625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 1 ) . get
rank: 508
score: 99.84340879141567
patch: if ( out . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 508
score: 99.83151319550305
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 508
score: 99.82386461195055
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ; }
rank: 509
score: 99.86263020833333
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . is CaMeL Empty ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 509
score: 99.85101318359375
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } * /
rank: 509
score: 99.84783325195312
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = get CaMeL Out CaMeL Edges ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 509
score: 99.84340598366477
patch: if ( n . get CaMeL Parent ( ) == 0 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 509
score: 99.83150724085365
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 509
score: 99.8168670997191
patch: if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 509
score: 99.81544053819445
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) != 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 509
score: 99.79296875
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 510
score: 99.85892740885417
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 510
score: 99.84782247340425
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = get CaMeL Out CaMeL Edges ( g CaMeL Node . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 510
score: 99.8314453125
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) ) ;
rank: 510
score: 99.82383219401042
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 510
score: 99.79293690557066
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == $NUMBER$ ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 511
score: 99.85095994015957
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 511
score: 99.8433867663872
patch: if ( n != null ) { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 511
score: 99.83144295933735
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 511
score: 99.82379331683168
patch: List < Token > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 512
score: 99.86255151098901
patch: if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 512
score: 99.85888135302197
patch: } if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 512
score: 99.84329659598214
patch: if ( out . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 512
score: 99.83140120967742
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 512
score: 99.82378791360294
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; break ; }
rank: 512
score: 99.81685431985294
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 512
score: 99.79293387276786
patch: if ( n . get CaMeL Parent ( ) == null ) { Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 513
score: 99.8625252016129
patch: if ( n . get CaMeL Out ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 513
score: 99.85885265261628
patch: } else { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 513
score: 99.8477093240489
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 513
score: 99.84327334449405
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 513
score: 99.83138713430851
patch: switch ( n . get CaMeL Parent ( ) ) { case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 513
score: 99.82378261529126
patch: Node < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 513
score: 99.81528704353933
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 514
score: 99.86251953125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ! try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) )
rank: 514
score: 99.8509009576613
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 514
score: 99.84766675067205
patch: if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 514
score: 99.84324488146552
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } } }
rank: 514
score: 99.83137289325843
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 514
score: 99.82373046875
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 514
score: 99.81526295731707
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 514
score: 99.79287109375
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 515
score: 99.84321120689656
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 515
score: 99.83133370535714
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 515
score: 99.82369930186171
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; }
rank: 515
score: 99.81682082841981
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; }
rank: 515
score: 99.81525530133929
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 515
score: 99.79282448508523
patch: if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 516
score: 99.86246565934066
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 516
score: 99.85881241508152
patch: / * if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 516
score: 99.85084928019663
patch: else if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 516
score: 99.84316644435975
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 516
score: 99.83131586119185
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) == Branch . UNCOND ) ; }
rank: 516
score: 99.82362689393939
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 516
score: 99.81681234529702
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 516
score: 99.79280766752578
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 517
score: 99.85879400712025
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 517
score: 99.850830078125
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } * /
rank: 517
score: 99.84314108455882
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } } ) ;
rank: 517
score: 99.81679318985849
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 518
score: 99.85877316497093
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } } }
rank: 518
score: 99.85078761888587
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 518
score: 99.84755859375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Destination ( ) . get CaMeL Value ( ) .
rank: 518
score: 99.84311745383523
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Parent ( ) . get CaMeL Value ( ) ) ; } }
rank: 518
score: 99.83122091090425
patch: if ( n . get CaMeL Type ( ) == Token . BLOCK ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 518
score: 99.82361225328947
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 519
score: 99.8623828125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination
rank: 519
score: 99.85872738486842
patch: } if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 519
score: 99.85078357514881
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 519
score: 99.8475390625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 519
score: 99.84311464608433
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( g CaMeL Node . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 519
score: 99.8312023074128
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = cur CaMeL Cfg . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 519
score: 99.81678659539473
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 519
score: 99.81516241776316
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node . Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 519
score: 99.79274952168367
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == $NUMBER$ ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 520
score: 99.85871664325843
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 520
score: 99.85078344452248
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 520
score: 99.8475
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } Collection < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Destination (
rank: 520
score: 99.84310288027109
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 520
score: 99.8312023074128
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node == Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 520
score: 99.81677099021084
patch: if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 520
score: 99.81515715843024
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge <= Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 520
score: 99.7927105783046
patch: if ( n . get CaMeL Parent ( ) == null ) { break ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 521
score: 99.862373046875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( )
rank: 521
score: 99.85868626644736
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 521
score: 99.85077897892442
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } } }
rank: 521
score: 99.847490234375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Value (
rank: 521
score: 99.84308416193181
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 521
score: 99.8167391690341
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( n ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 521
score: 99.8151334269663
patch: if ( cur CaMeL Cfg . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 522
score: 99.85077247191012
patch: if ( n . get CaMeL Parent ( ) == this ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 522
score: 99.84746496456185
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 522
score: 99.83115571120689
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 522
score: 99.81668862951807
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 522
score: 99.8150890261628
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 522
score: 99.79270426432292
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 523
score: 99.85864868164063
patch: / * if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 523
score: 99.8474609375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } Set < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Destination (
rank: 523
score: 99.84306196732955
patch: if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 523
score: 99.83111509342784
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == Branch . UNCOND ) ;
rank: 523
score: 99.82352258663366
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 523
score: 99.81665900735294
patch: if ( n . get CaMeL Parent ( ) == null ) { Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 523
score: 99.79269443469101
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { break ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 524
score: 99.8586175380609
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 524
score: 99.84742705676021
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 524
score: 99.8430508700284
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . to CaMeL Array ( ) ) ; } }
rank: 524
score: 99.82350755774456
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 524
score: 99.81663335755815
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null ) { return n ; } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 525
score: 99.86226441688144
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } }
rank: 525
score: 99.85860770089286
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } } }
rank: 525
score: 99.85072244623656
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 525
score: 99.83109085648148
patch: if ( n . get CaMeL Parent ( ) == null ) { { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 525
score: 99.81660730698529
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 525
score: 99.8149896978022
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 525
score: 99.79264322916667
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ;
rank: 526
score: 99.862255859375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } if ( out CaMeL Edges . size
rank: 526
score: 99.85858744959677
patch: List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } } }
rank: 526
score: 99.84740691489361
patch: if ( n . get CaMeL Parent ( ) . get CaMeL Value ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 526
score: 99.84303977272727
patch: if ( out . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 526
score: 99.83106518817205
patch: if ( n . get CaMeL Parent ( ) == null ) { { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 526
score: 99.81497395833334
patch: if ( n != null && n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 526
score: 99.7926100127551
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 527
score: 99.8622265625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination (
rank: 527
score: 99.85060740041209
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges ) ; }
rank: 527
score: 99.84738159179688
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 527
score: 99.84298976463607
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 527
score: 99.8310546875
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ;
rank: 527
score: 99.81658476142474
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 527
score: 99.814951171875
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ) ; }
rank: 528
score: 99.85052010182584
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 528
score: 99.8310546875
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 528
score: 99.81492494733146
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 528
score: 99.79255922379032
patch: if ( n . get CaMeL Parent ( ) != null ) { break ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 529
score: 99.86217368521342
patch: if ( g CaMeL Node . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 529
score: 99.85854436063218
patch: } try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 529
score: 99.8429639862805
patch: if ( g CaMeL Node != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 529
score: 99.82339015151516
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> g CaMeL Node = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 529
score: 99.81658181179775
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 529
score: 99.81491199171687
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 529
score: 99.79253724563954
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 530
score: 99.8585231050532
patch: if ( n . get CaMeL Parent ( ) . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 530
score: 99.85044642857143
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } ) ;
rank: 530
score: 99.847333984375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( )
rank: 530
score: 99.84295099431819
patch: if ( n != null ) { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 530
score: 99.83101399739583
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) , g CaMeL Node . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 530
score: 99.82338722153466
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 530
score: 99.81655325940861
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 530
score: 99.81487630208333
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 530
score: 99.79251722110214
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { throw try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 531
score: 99.86211815308988
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( g CaMeL Node . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 531
score: 99.85843331473214
patch: if ( n . get CaMeL Parent ( ) . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 531
score: 99.85042842741936
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 531
score: 99.847333984375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Parent (
rank: 531
score: 99.84291634908537
patch: if ( node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 531
score: 99.8309814453125
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 531
score: 99.81481352306548
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 531
score: 99.79248571908602
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) >= 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 532
score: 99.86209032012195
patch: if ( n . get CaMeL Parent ( ) == n ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 532
score: 99.84731158088235
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 532
score: 99.84289834665698
patch: if ( n . get CaMeL Parent ( ) == null ) { return ) ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 532
score: 99.83097519985465
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ;
rank: 532
score: 99.81651680424528
patch: List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 532
score: 99.8147937863372
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 532
score: 99.79248046875
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 533
score: 99.86205078125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } else
rank: 533
score: 99.8584285783179
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } } }
rank: 533
score: 99.850341796875
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } * / }
rank: 533
score: 99.8147493855337
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else {
rank: 533
score: 99.79242067920919
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 1 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 534
score: 99.85031654094827
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { throw try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 534
score: 99.8472926363032
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ; } }
rank: 534
score: 99.84286323635058
patch: if ( n . get CaMeL Parent ( ) == null ) List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } }
rank: 534
score: 99.8309353298611
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 534
score: 99.82328086324257
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , ) ; }
rank: 534
score: 99.81471429869185
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 534
score: 99.79238962572674
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { throw try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 535
score: 99.86198601973685
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 535
score: 99.85836659307066
patch: / * / if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 535
score: 99.8428337191358
patch: else if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 535
score: 99.83089192708333
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 535
score: 99.79229600694444
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . has CaMeL Children ( ) ) { break ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 536
score: 99.86198274381869
patch: if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 536
score: 99.85029740767045
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 536
score: 99.84725722446237
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) out CaMeL Edges . add ( g CaMeL Node ) ;
rank: 536
score: 99.83088822798295
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 536
score: 99.82327302631579
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ! out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 536
score: 99.81470788043478
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } switch ( n . get CaMeL Type ( ) ) {
rank: 536
score: 99.79225755774456
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 537
score: 99.861982421875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null && g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value
rank: 537
score: 99.85026773174157
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) <= 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 537
score: 99.847216796875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 537
score: 99.8428035783179
patch: if ( out . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 537
score: 99.82325268817205
patch: List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 537
score: 99.816337890625
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ; }
rank: 537
score: 99.81468563988095
patch: if ( n == null || n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 537
score: 99.79223913433908
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Parent ( ) == null ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 538
score: 99.85830652573529
patch: } if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 538
score: 99.847177734375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 1 ) . get CaMeL Value
rank: 538
score: 99.84278453480114
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node == Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 538
score: 99.8308636209239
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && ( out CaMeL Edges . size ( ) == 1 ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 538
score: 99.82322358630952
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; }
rank: 538
score: 99.816279296875
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Value ( ) ) ; }
rank: 538
score: 99.81467013888889
patch: if ( n == null && n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 538
score: 99.79223090277777
patch: if ( n . get CaMeL Parent ( ) != null ) { Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 539
score: 99.86193981799451
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 539
score: 99.85830543154762
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 539
score: 99.85026041666667
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 539
score: 99.84717371323529
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; } }
rank: 539
score: 99.8427734375
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 539
score: 99.83086164607558
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 539
score: 99.82321034307066
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 539
score: 99.81626953125
patch: Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 539
score: 99.8146639737216
patch: if ( n . get CaMeL Type ( ) == Token . BLOCK ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 539
score: 99.79220920138889
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 540
score: 99.8582138433689
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) <= 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 540
score: 99.85025349069149
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 540
score: 99.847158203125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Node < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( )
rank: 540
score: 99.8427670127467
patch: if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 540
score: 99.830859375
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 540
score: 99.81466160463484
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node . Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else {
rank: 540
score: 99.7921475497159
patch: else { if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 541
score: 99.85818026928192
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 541
score: 99.8471484375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( )
rank: 541
score: 99.84268301504629
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 541
score: 99.83083274147727
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 541
score: 99.8231201171875
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 541
score: 99.81623120577831
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 541
score: 99.81463068181819
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , 0 ) ;
rank: 541
score: 99.79213919690861
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 542
score: 99.8426656351461
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 542
score: 99.83075086805556
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 542
score: 99.81621971558988
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { break ; } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 542
score: 99.81462973736703
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , n ) ;
rank: 542
score: 99.79211956521739
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) >= 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 543
score: 99.861865234375
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 543
score: 99.858154296875
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 543
score: 99.85022891465054
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges ) ; } } }
rank: 543
score: 99.84694303019663
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 543
score: 99.8426577919408
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 543
score: 99.82311341002747
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ;
rank: 543
score: 99.81621476715686
patch: Di CaMeL Graph CaMeL Node < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 543
score: 99.81455532340117
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) < 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 543
score: 99.79210646609043
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { break ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 544
score: 99.8618359375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } Di CaMeL Graph CaMeL Edge out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) )
rank: 544
score: 99.85811121323529
patch: / * if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 544
score: 99.85022503396739
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) , g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ) ; }
rank: 544
score: 99.84691540948276
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) return out CaMeL Edges ;
rank: 544
score: 99.84264823717949
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) , n ) ; } }
rank: 544
score: 99.81620974657012
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ! out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 544
score: 99.8145282451923
patch: if ( g CaMeL Node != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 544
score: 99.79206194196429
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null ) { return n ; } if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 545
score: 99.86179917279412
patch: if ( n instanceof Di CaMeL Graph CaMeL Edge ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 545
score: 99.8501507302989
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 545
score: 99.84691011235955
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { out CaMeL Edges . } }
rank: 545
score: 99.83062744140625
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . BLOCK ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 545
score: 99.8229724702381
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 545
score: 99.81616922026699
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ) ; }
rank: 545
score: 99.81451480263158
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) , n ) ;
rank: 546
score: 99.85014391447369
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 546
score: 99.84258478338069
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( ) ; } }
rank: 546
score: 99.83062542925825
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Branch . UNCOND ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 546
score: 99.82295775182038
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges [ 0 ] . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 546
score: 99.8161365327381
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 546
score: 99.81449558423913
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 546
score: 99.79202510533707
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return n . get CaMeL Destination ( ) . get CaMeL Value ( ) ;
rank: 547
score: 99.861748046875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( )
rank: 547
score: 99.85804731390449
patch: } } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 547
score: 99.85012817382812
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 547
score: 99.84688260957792
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 547
score: 99.84256663602942
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 547
score: 99.83056640625
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . BLOCK ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 547
score: 99.81610045770202
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Value ( ) ) ;
rank: 547
score: 99.81447507022472
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , n ) ; }
rank: 548
score: 99.86172290558511
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Name ( ) ) ; } }
rank: 548
score: 99.85012448489012
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) ) ; } }
rank: 548
score: 99.846806640625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Destination (
rank: 548
score: 99.84255499588816
patch: if ( n . get CaMeL Parent ( ) == null ) { Node < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 548
score: 99.83053234011628
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 1 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 548
score: 99.82294245049505
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 548
score: 99.81609301297169
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 548
score: 99.81446385645604
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 548
score: 99.7919921875
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { break ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 549
score: 99.8616015625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( )
rank: 549
score: 99.85799153645833
patch: } if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 549
score: 99.8467803640464
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 549
score: 99.84254632994185
patch: if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 549
score: 99.83049665178571
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . BLOCK ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 549
score: 99.82289935172872
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == $NUMBER$ ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 549
score: 99.8160470545977
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 549
score: 99.814453125
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node [ ] >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 549
score: 99.7919588955966
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; }
rank: 550
score: 99.8615966796875
patch: if ( n instanceof Di CaMeL Graph CaMeL Edge ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 550
score: 99.85794771634616
patch: } else { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 550
score: 99.84677956321023
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 550
score: 99.84250404094827
patch: if ( n . get CaMeL Parent ( ) != null ) { final Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 550
score: 99.8160464638158
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ) ;
rank: 550
score: 99.81437363735465
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , get CaMeL Destination ( ) ) ;
rank: 550
score: 99.79192313762626
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , ) ;
rank: 551
score: 99.8615010579427
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 551
score: 99.85792151162791
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } }
rank: 551
score: 99.85009251644736
patch: if ( n . get CaMeL Parent ( ) . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 551
score: 99.8467578125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL
rank: 551
score: 99.83043323863636
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Node >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 551
score: 99.82284576113861
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 551
score: 99.79190633585165
patch: if ( n . get CaMeL Parent ( ) != null ) { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return n ; }
rank: 552
score: 99.861494140625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value
rank: 552
score: 99.85777601304945
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 )
rank: 552
score: 99.84671875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) ==
rank: 552
score: 99.84246271306819
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Node ( ) ) ; } }
rank: 552
score: 99.83043226304945
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , Branch . UNCOND ) ;
rank: 552
score: 99.82279829545455
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 552
score: 99.81602590460527
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 && n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 552
score: 99.79186480978261
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 553
score: 99.86147404813218
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get }
rank: 553
score: 99.846708984375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Destination ( ) . get CaMeL
rank: 553
score: 99.84243402248475
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } }
rank: 553
score: 99.82274925595237
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , ) ; }
rank: 553
score: 99.81601949257426
patch: case Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 553
score: 99.81435092659883
patch: if ( n . get CaMeL Type ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 554
score: 99.8500339673913
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 554
score: 99.84669961734694
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 554
score: 99.8424327761628
patch: if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 554
score: 99.830419921875
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 554
score: 99.816015625
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 554
score: 99.79183467741936
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 555
score: 99.86142339939025
patch: if ( g CaMeL Node . get CaMeL Out ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 555
score: 99.85768229166666
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( g CaMeL Node . get CaMeL Out CaMeL Edges ( ) . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 555
score: 99.85003083881578
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null ) { out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 555
score: 99.8466173537234
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { out CaMeL Edges . add ( g CaMeL Node ) ;
rank: 555
score: 99.822734375
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ;
rank: 555
score: 99.8159775152439
patch: if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 555
score: 99.814208984375
patch: if ( n != null || n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 556
score: 99.861376953125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( g CaMeL Node . get CaMeL Out CaMeL Edges ( ) . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( )
rank: 556
score: 99.85765043218085
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Destination ( ) . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 556
score: 99.84659725040585
patch: List < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 556
score: 99.83038979388297
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 556
score: 99.81590839460785
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 556
score: 99.81419427710843
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) , out CaMeL Edges . get ( 0 ) ) ;
rank: 556
score: 99.79181050145348
patch: if ( out != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 557
score: 99.861318359375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value
rank: 557
score: 99.846591796875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Value ( ) . get CaMeL
rank: 557
score: 99.84238978794643
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) , n ) ; } }
rank: 557
score: 99.8303555575284
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 557
score: 99.81590779622395
patch: if ( n . get CaMeL Parent ( ) != null || n . get CaMeL Next ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 557
score: 99.81414473684211
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ) ;
rank: 558
score: 99.86131690014368
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get ( 0 ) . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 558
score: 99.85758463541667
patch: if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } }
rank: 558
score: 99.8465603298611
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } else {
rank: 558
score: 99.8226827973301
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 558
score: 99.81590150983146
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( n ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 558
score: 99.81411637931035
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , ) ;
rank: 558
score: 99.79176117271506
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) <= 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 559
score: 99.84648886494253
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return null ; }
rank: 559
score: 99.84226244549419
patch: if ( n . get CaMeL Parent ( ) == null ) { try { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } } }
rank: 559
score: 99.83027576264881
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 559
score: 99.82265414986558
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 559
score: 99.81589762369792
patch: else { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 559
score: 99.79175415039063
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 560
score: 99.8612890625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } Iterator < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value
rank: 560
score: 99.85755504261364
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 560
score: 99.84993832236842
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } }
rank: 560
score: 99.8464688387784
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return out CaMeL Edges . get ( 0 ) ; } }
rank: 560
score: 99.84225643382354
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } } }
rank: 560
score: 99.83027563202248
patch: else if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 560
score: 99.82261591372283
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ;
rank: 560
score: 99.81589762369792
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 560
score: 99.81410775533537
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , n ) ;
rank: 560
score: 99.79174262152777
patch: if ( n . get CaMeL Parent ( ) == null ) { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 561
score: 99.8612657912234
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) < 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 561
score: 99.85751537566489
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ; }
rank: 561
score: 99.84214484554597
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Type ( ) ) ; }
rank: 561
score: 99.8302734375
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 561
score: 99.8158905372191
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == $NUMBER$ ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 561
score: 99.8140869140625
patch: if ( n . get CaMeL Type ( ) != Token . BLOCK ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 561
score: 99.79173743206522
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 562
score: 99.85750679347827
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 562
score: 99.84991389448925
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ;
rank: 562
score: 99.84644664417614
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 562
score: 99.84213033536585
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else
rank: 562
score: 99.82255091292134
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ! out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 562
score: 99.81404976222827
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 562
score: 99.79168495435393
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge 1 >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 563
score: 99.86118861607143
patch: if ( g CaMeL Node . get CaMeL Out CaMeL Edges ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 563
score: 99.849912109375
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 563
score: 99.846435546875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 1 ) . get CaMeL Destination ( ) . get
rank: 563
score: 99.84211869673295
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Node ( ) ) ; } }
rank: 563
score: 99.82251674107142
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 563
score: 99.81588680186171
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 563
score: 99.81400824652778
patch: if ( g CaMeL Node . get CaMeL Out CaMeL Edges ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 563
score: 99.79168327487245
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 564
score: 99.861142578125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out
rank: 564
score: 99.83015580610795
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 564
score: 99.82249767945545
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 564
score: 99.81587641289893
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 564
score: 99.81400553385417
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ;
rank: 564
score: 99.79166666666667
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 565
score: 99.8611328125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( )
rank: 565
score: 99.85736083984375
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 565
score: 99.84640395220588
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 565
score: 99.8421065167683
patch: if ( n . get CaMeL Node ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 565
score: 99.83013361150569
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch extends Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 565
score: 99.822490234375
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ! out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 565
score: 99.81387329101562
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 565
score: 99.79166468178353
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 566
score: 99.85735748626374
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ; } } }
rank: 566
score: 99.84639115767045
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 566
score: 99.84207500988924
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } } }
rank: 566
score: 99.81580275632022
patch: if ( n . get CaMeL Parent ( ) != null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 566
score: 99.81386264534883
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 566
score: 99.79164428710938
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 567
score: 99.85735529119319
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 567
score: 99.84634399414062
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = get CaMeL Out CaMeL Edges ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 567
score: 99.8420743075284
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 567
score: 99.83011179956897
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 567
score: 99.82240213373656
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 567
score: 99.7916259765625
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { break ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 568
score: 99.8573506673177
patch: try { if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 568
score: 99.84196720566861
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 568
score: 99.830107421875
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 568
score: 99.8223876953125
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 568
score: 99.8138454861111
patch: if ( n . has CaMeL Children ( ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 568
score: 99.79159931752874
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 569
score: 99.85732085129311
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 569
score: 99.84628224927326
patch: if ( get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 569
score: 99.84196333451705
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } finally
rank: 569
score: 99.83008873980978
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 569
score: 99.82238643685567
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 569
score: 99.81383167613636
patch: if ( n . has CaMeL Children ( ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 570
score: 99.86104424055233
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 570
score: 99.84195963541667
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 570
score: 99.82238238790761
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 570
score: 99.81575150923295
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == $NUMBER$ ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 570
score: 99.81382533482143
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return new Di CaMeL Graph CaMeL Edge < Node , Branch >> ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 570
score: 99.79154829545455
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { break ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 571
score: 99.86104090073529
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 571
score: 99.8497647372159
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = ( List < Di CaMeL Graph CaMeL Edge < Node , Branch >> ) g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 571
score: 99.84621765793011
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) out CaMeL Edges . add ( out CaMeL Edges ) ;
rank: 571
score: 99.83005666208791
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { break ;
rank: 571
score: 99.81380859375
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 571
score: 99.79154636548913
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 1 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 572
score: 99.86100260416667
patch: if ( n . get CaMeL Out ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 572
score: 99.85722236223118
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 572
score: 99.8462158203125
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = get CaMeL Out CaMeL Edges ( n ) ;
rank: 572
score: 99.82999840561224
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Branch . UNCOND ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 572
score: 99.82232862903226
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 572
score: 99.81574292452831
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; }
rank: 572
score: 99.81371783088235
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 572
score: 99.79147273936171
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; }
rank: 573
score: 99.84975961538461
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 573
score: 99.84193157327586
patch: synchronized ( n ) { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 573
score: 99.82999674479167
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , g CaMeL Node . get CaMeL Value ( ) ) ;
rank: 573
score: 99.81573692064607
patch: try { if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 573
score: 99.79146321614583
patch: if ( n . get CaMeL Parent ( ) != null ) { Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 574
score: 99.86095703125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } }
rank: 574
score: 99.85721261160714
patch: else if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 574
score: 99.84618101728724
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; out CaMeL Edges . add ( out CaMeL Edges ) ;
rank: 574
score: 99.84193004261364
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 574
score: 99.822265625
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 574
score: 99.81573660714285
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 574
score: 99.81364302201705
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node ) , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 574
score: 99.79145951704545
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { break ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 575
score: 99.86095703125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } return try CaMeL Remove CaMeL Unconditional
rank: 575
score: 99.85719331781915
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) ) ; } } }
rank: 575
score: 99.84615071614583
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; }
rank: 575
score: 99.82991536458333
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) . get CaMeL Destination ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 575
score: 99.82224317528735
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ! out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 575
score: 99.81568764740567
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; }
rank: 576
score: 99.85719331781915
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } }
rank: 576
score: 99.84969338037635
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 576
score: 99.84614701704545
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 576
score: 99.84189675071023
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . to CaMeL String ( ) ) ; } }
rank: 576
score: 99.8298969072165
patch: if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 576
score: 99.81566220238095
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 576
score: 99.79140625
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 577
score: 99.8609375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value
rank: 577
score: 99.85718677662037
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 577
score: 99.8496844951923
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } }
rank: 577
score: 99.8461266942771
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node . Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 577
score: 99.84188771802326
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Type ( ) ) ;
rank: 577
score: 99.82988947088069
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 577
score: 99.82221368018617
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 577
score: 99.81565418462644
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) >= 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 578
score: 99.85713527513587
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return out CaMeL Edges . get ( 0 ) ; } } }
rank: 578
score: 99.84968367866848
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 578
score: 99.846103515625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Destination (
rank: 578
score: 99.8418856534091
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Name ( ) ) ; } }
rank: 578
score: 99.8298216540404
patch: if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 578
score: 99.8222032912234
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> g CaMeL Node = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 578
score: 99.81357828776042
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ;
rank: 578
score: 99.79135577598315
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else {
rank: 579
score: 99.85708220108695
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 579
score: 99.8496805826823
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) ) ; }
rank: 579
score: 99.84608968098958
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 579
score: 99.841796875
patch: if ( n . get CaMeL Parent ( ) == null ) { try { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 579
score: 99.82982057005495
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 579
score: 99.8221447172619
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 579
score: 99.81355605014535
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 579
score: 99.7913449309593
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 580
score: 99.84177389705883
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return out CaMeL Edges ; }
rank: 580
score: 99.82981178977273
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 580
score: 99.82212059096534
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 580
score: 99.81351824504573
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , null ) ;
rank: 581
score: 99.86077440399484
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ! try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 581
score: 99.85703974184783
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } }
rank: 581
score: 99.8496484375
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 581
score: 99.84174138849431
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) try return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 581
score: 99.82978515625
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 581
score: 99.81559053308824
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 581
score: 99.81346594769022
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 581
score: 99.79134114583333
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ;
rank: 582
score: 99.85701778017241
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ; }
rank: 582
score: 99.8460546875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) .
rank: 582
score: 99.82206833964646
patch: Di CaMeL Graph CaMeL Node < Node , Integer >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 582
score: 99.8155859375
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 582
score: 99.81342405913979
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ) ;
rank: 582
score: 99.79134114583333
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { throw try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 583
score: 99.85701407967034
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } }
rank: 583
score: 99.84959920247395
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ; } } }
rank: 583
score: 99.84604837436869
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 583
score: 99.84159247819767
patch: if ( n . get CaMeL Parent ( ) . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 583
score: 99.8297458923969
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 583
score: 99.81558388157895
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ) ;
rank: 583
score: 99.81339345079788
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 583
score: 99.79127471301021
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return n ;
rank: 584
score: 99.8606640625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value
rank: 584
score: 99.85699462890625
patch: / * if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 584
score: 99.84958692528735
patch: if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 584
score: 99.84158250762195
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 584
score: 99.82196514423077
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 584
score: 99.81337780898876
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , out CaMeL Edges . get ( 0 ) ) ;
rank: 584
score: 99.79126838235294
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { break ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 585
score: 99.84957978219697
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 585
score: 99.84603515625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { out CaMeL Edges . add ( out CaMeL Edges . get
rank: 585
score: 99.82972700140449
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 585
score: 99.813330078125
patch: if ( g CaMeL Node == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 585
score: 99.79125724871135
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { break ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 586
score: 99.860625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ! try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) )
rank: 586
score: 99.85697428385417
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 586
score: 99.84603515625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get
rank: 586
score: 99.8414794921875
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) , out CaMeL Edges ) ; } }
rank: 586
score: 99.8297119140625
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 586
score: 99.82195395611703
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 586
score: 99.81547951211735
patch: g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 586
score: 99.81332465277778
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 1 ) . get CaMeL Destination ( ) ) ;
rank: 587
score: 99.86056082589286
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; }
rank: 587
score: 99.85697034610214
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } }
rank: 587
score: 99.84953046085859
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ) ; }
rank: 587
score: 99.84601384943181
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 587
score: 99.84141956676136
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 587
score: 99.82967476222827
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } switch ( n . get CaMeL Type ( ) ) {
rank: 587
score: 99.82189223345588
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 587
score: 99.81546336206897
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 587
score: 99.81328573994253
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , ) ;
rank: 587
score: 99.79124348958334
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 588
score: 99.85694376627605
patch: / * if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 588
score: 99.84952902492088
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 588
score: 99.846005859375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Value (
rank: 588
score: 99.84141501402243
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } } } }
rank: 588
score: 99.82964521585052
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == Branch . UNCOND ) ;
rank: 588
score: 99.82183052289604
patch: List < Node >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 588
score: 99.7912066915761
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) <= 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 589
score: 99.85692297894022
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . size ( ) ) ; } }
rank: 589
score: 99.84952352335165
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 589
score: 99.84140159970238
patch: if ( n . get CaMeL Node ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 589
score: 99.82960119912791
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , ? > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 589
score: 99.8132571102528
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else {
rank: 590
score: 99.860478515625
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 590
score: 99.85691189236111
patch: if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 590
score: 99.84951876610825
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 590
score: 99.84139791349085
patch: if ( n . get CaMeL Parent ( ) . get CaMeL Value ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 590
score: 99.82956713299419
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < ? , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 590
score: 99.82181564031863
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 590
score: 99.81325461647727
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node . Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 590
score: 99.79115068151596
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 591
score: 99.85687810724431
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ; } }
rank: 591
score: 99.84588694852941
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { try {
rank: 591
score: 99.84138627485795
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Task > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 591
score: 99.8295624122191
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 591
score: 99.81325206537356
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) , ) ;
rank: 591
score: 99.79115068151596
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 592
score: 99.860458984375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } if ( out CaMeL Edges . size
rank: 592
score: 99.84950657894737
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 592
score: 99.8458277925532
patch: if ( node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 592
score: 99.84137834821429
patch: if ( n . get CaMeL Parent ( ) == null ) { try { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 592
score: 99.82955143960675
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 592
score: 99.82176717122395
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 592
score: 99.81540774227528
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; }
rank: 592
score: 99.81323982007575
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) . get CaMeL Destination ( ) ) ;
rank: 593
score: 99.86045745481928
patch: if ( g CaMeL Node . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 593
score: 99.85685763888888
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ; } }
rank: 593
score: 99.84950322690217
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 593
score: 99.84137672601744
patch: if ( n . get CaMeL Parent ( ) == null && out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 593
score: 99.82944681186869
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 593
score: 99.815390625
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 593
score: 99.81323809956395
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 1 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 594
score: 99.86040088383838
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; }
rank: 594
score: 99.85685410610465
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } ;
rank: 594
score: 99.84576822916667
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = null ; if ( out CaMeL Edges . size ( ) == 1 ) { out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; }
rank: 594
score: 99.84135356702302
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 594
score: 99.81538676167582
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 594
score: 99.81319267805233
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . remove ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 594
score: 99.79111550071023
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , ) ;
rank: 595
score: 99.86038272938829
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 595
score: 99.85679253472222
patch: } } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 595
score: 99.84945678710938
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 595
score: 99.84576125372024
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) continue ;
rank: 595
score: 99.82935393258427
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 595
score: 99.82173549107142
patch: Di CaMeL Graph CaMeL Node < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 595
score: 99.81538628472222
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( n ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 595
score: 99.79110717773438
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 596
score: 99.85678168402778
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( g CaMeL Node . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 596
score: 99.82171755420919
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 596
score: 99.81316996729652
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 596
score: 99.79107375372024
patch: if ( n == null ) { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 597
score: 99.86036184210526
patch: if ( n . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 597
score: 99.85675698138297
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 597
score: 99.84572265625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } Vector < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 )
rank: 597
score: 99.84132080078125
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 597
score: 99.829296875
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 597
score: 99.82171688988095
patch: List < Di CaMeL Graph CaMeL Edge >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 597
score: 99.81534830729167
patch: try { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 597
score: 99.81315104166667
patch: if ( n != null && n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 597
score: 99.79106702302632
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 598
score: 99.86031539351852
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return ( Di CaMeL Graph CaMeL Edge < Node , Branch >> ) g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; }
rank: 598
score: 99.85670230263158
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) . get CaMeL Value ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 598
score: 99.84568256578947
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 598
score: 99.84130859375
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( ) ;
rank: 598
score: 99.8217061360677
patch: List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 598
score: 99.81534632240853
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 598
score: 99.81313254616477
patch: if ( g CaMeL Node . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 598
score: 99.79104646381579
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , ) ;
rank: 599
score: 99.86031044407895
patch: if ( g CaMeL Node . get CaMeL Out ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 599
score: 99.85668103448276
patch: } else if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 599
score: 99.8456640625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) .
rank: 599
score: 99.84129005142405
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 599
score: 99.82923033997253
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . contains ( n . get CaMeL Next ( ) ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 599
score: 99.81530091002747
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 599
score: 99.8131076388889
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 599
score: 99.79102558992346
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) >= 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 600
score: 99.86031044407895
patch: if ( g CaMeL Node . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 600
score: 99.84934210526316
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . size ( ) ) ; } }
rank: 600
score: 99.84128639914773
patch: if ( node . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 600
score: 99.82166544596355
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 600
score: 99.81527673192771
patch: if ( n == null ) { return null ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 600
score: 99.79100555734536
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; }
rank: 601
score: 99.85665283203124
patch: } else if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 601
score: 99.84933810763889
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 601
score: 99.84556640625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Destination ( ) .
rank: 601
score: 99.84126420454545
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Parent ( ) ) ; } }
rank: 601
score: 99.82921006944444
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 601
score: 99.81308951028963
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 601
score: 99.79097316576087
patch: if ( n . get CaMeL Node ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 602
score: 99.86021061533505
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 602
score: 99.85665211397058
patch: if ( n . get CaMeL Parent ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 602
score: 99.8493319424716
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges ) ; } }
rank: 602
score: 99.84125310724431
patch: if ( n . get CaMeL Parent ( ) == null ) { try { Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 602
score: 99.81524800145348
patch: if ( n . has CaMeL Children ( ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 602
score: 99.8130859375
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return null ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 602
score: 99.79096137152777
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Node < Node < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 603
score: 99.8601953125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; out CaMeL Edges
rank: 603
score: 99.85659391983695
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } } }
rank: 603
score: 99.84931522966868
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; }
rank: 603
score: 99.84553840361446
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) <= 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 603
score: 99.8412203501506
patch: if ( node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 603
score: 99.82153057795699
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } }
rank: 603
score: 99.8130770596591
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } switch ( n . get CaMeL Type ( ) ) {
rank: 603
score: 99.79096069335938
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 604
score: 99.86014597039474
patch: if ( g CaMeL Node . get CaMeL Out CaMeL Edges ( ) . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 604
score: 99.85659075797872
patch: if ( n . get CaMeL Parent ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 604
score: 99.84550548735119
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 604
score: 99.82912538109755
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 604
score: 99.82152549342105
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) {
rank: 604
score: 99.81307212752525
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ) ;
rank: 604
score: 99.79096013849431
patch: try { if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 605
score: 99.8493134469697
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ) ; } }
rank: 605
score: 99.84121927400915
patch: if ( n . get CaMeL Parent ( ) . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 605
score: 99.81521139705882
patch: if ( n . get CaMeL Parent ( ) != null ) { Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 605
score: 99.81304022606383
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; }
rank: 605
score: 99.79095643939394
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 606
score: 99.86009765625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( )
rank: 606
score: 99.85658036901596
patch: List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 606
score: 99.84542074548193
patch: List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 606
score: 99.84121222245066
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; while ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 606
score: 99.82151761968085
patch: List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 606
score: 99.81519745617378
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 606
score: 99.7909532912234
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { break ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 607
score: 99.8600742669753
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 607
score: 99.8565340909091
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 607
score: 99.8492764559659
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ;
rank: 607
score: 99.84541015625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Node >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . to
rank: 607
score: 99.84120396205357
patch: if ( node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 607
score: 99.82908009958791
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 607
score: 99.79094132133152
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) >= 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 608
score: 99.85991821289062
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) <= 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 608
score: 99.84926707474227
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 608
score: 99.84540109536083
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ) ;
rank: 608
score: 99.84117647058824
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else {
rank: 608
score: 99.82907885174419
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } else { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 608
score: 99.82147074854652
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; } }
rank: 608
score: 99.815126953125
patch: List < Di CaMeL Graph < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 608
score: 99.79090831043956
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 )
rank: 609
score: 99.8453515625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } Collection < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get
rank: 609
score: 99.84116152108433
patch: if ( n . get CaMeL Node ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 609
score: 99.82906000664893
patch: switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 609
score: 99.81511896306819
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ! out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 609
score: 99.79090601084184
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 610
score: 99.8564453125
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 610
score: 99.84116152108433
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 610
score: 99.82903497869319
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 610
score: 99.8213712993421
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 610
score: 99.7908909574468
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 611
score: 99.85637947682584
patch: } else { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } }
rank: 611
score: 99.84533203125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Destination ( ) . get CaMeL Value ( ) .
rank: 611
score: 99.8411395733173
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 611
score: 99.82903180803571
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 611
score: 99.81510799632353
patch: if ( n . get CaMeL Parent ( ) == null ) { Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 611
score: 99.81293402777777
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } else { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 611
score: 99.79087911626344
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Parent ( ) != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 612
score: 99.85981033509036
patch: if ( g CaMeL Node . get CaMeL Out ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 612
score: 99.84916548295455
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = ( List < Di CaMeL Graph CaMeL Edge < Node , Branch > ) g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 612
score: 99.84113826308139
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) , out CaMeL Edges ) ; } }
rank: 612
score: 99.82902960526316
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 612
score: 99.8212890625
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 612
score: 99.81510024472891
patch: if ( n . get CaMeL Parent ( ) == null ) { try { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 612
score: 99.81293015252976
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 612
score: 99.79087763247283
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 613
score: 99.85636393229167
patch: else if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 613
score: 99.84529923804013
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = node . get CaMeL Out CaMeL Edges ( ) ;
rank: 613
score: 99.82895611702128
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) , n . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 613
score: 99.82126783288044
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } return n ; }
rank: 613
score: 99.81504564606742
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 613
score: 99.81286039806548
patch: if ( n == null && n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 614
score: 99.8597125771605
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 614
score: 99.85634765625
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 614
score: 99.84106739457832
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 614
score: 99.82889014175258
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 614
score: 99.82123655913979
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 614
score: 99.8150275735294
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ) ;
rank: 614
score: 99.79084725215517
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ;
rank: 615
score: 99.8563232421875
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . size ( ) ) ; } }
rank: 615
score: 99.84512803819445
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } else {
rank: 615
score: 99.841064453125
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 615
score: 99.82885993878865
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 615
score: 99.8150237008427
patch: if ( g CaMeL Node . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 615
score: 99.81273846293605
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } case Token . BLOCK :
rank: 615
score: 99.79081811797752
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge 1 >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 616
score: 99.8563206449468
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 616
score: 99.82885174418605
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == $NUMBER$ ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 616
score: 99.81502359220298
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 616
score: 99.8127108487216
patch: if ( g CaMeL Node != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 616
score: 99.79080946180555
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 617
score: 99.85964801747312
patch: if ( n . get CaMeL Out ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 617
score: 99.85630425347222
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return out CaMeL Edges . get ( 0 ) ; }
rank: 617
score: 99.84511060393258
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return out CaMeL Edges ; }
rank: 617
score: 99.84102006392045
patch: if ( n . get CaMeL Node ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } }
rank: 617
score: 99.82118733723958
patch: if ( n . get CaMeL Parent ( ) != null || n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 617
score: 99.81269304142442
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get [ 0 ] . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 617
score: 99.79073350694445
patch: if ( n != null ) { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 618
score: 99.8596432864011
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 618
score: 99.85629340277778
patch: if ( n . get CaMeL Parent ( ) . get CaMeL Value ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 618
score: 99.84510056515957
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } else
rank: 618
score: 99.8410108612805
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 618
score: 99.82876035391567
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == Branch . UNCOND ) ;
rank: 618
score: 99.81495061910377
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 618
score: 99.81267438616071
patch: if ( n . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 618
score: 99.79072902513587
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 619
score: 99.85963675902062
patch: if ( n . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 619
score: 99.85628858024691
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 619
score: 99.84509858630952
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; } if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 619
score: 99.8410049066311
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( g CaMeL Node . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 619
score: 99.8287428252551
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . BLOCK ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 619
score: 99.79072473404256
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 620
score: 99.85960355718085
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . is CaMeL Empty ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 620
score: 99.85627262766768
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } }
rank: 620
score: 99.84891183035714
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 620
score: 99.8409912109375
patch: if ( node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 620
score: 99.81490384615384
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , g CaMeL Node ) ; }
rank: 620
score: 99.8126571479885
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 1 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 620
score: 99.79070983270202
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 621
score: 99.85952044547872
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 621
score: 99.85622240149456
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 621
score: 99.8489102450284
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 621
score: 99.84502467105263
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null ) { out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 621
score: 99.84096498842592
patch: if ( n . get CaMeL Parent ( ) == null ) List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 621
score: 99.82872242647059
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 621
score: 99.81489800347222
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { break ; } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 621
score: 99.79070095486111
patch: if ( n . get CaMeL Parent ( ) instanceof Di CaMeL Graph CaMeL Edge ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 622
score: 99.85948089231928
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 622
score: 99.85616319444445
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 622
score: 99.84498046875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Node
rank: 622
score: 99.8287109375
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 622
score: 99.82113647460938
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; }
rank: 622
score: 99.81488095238095
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 622
score: 99.81253367456897
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node ) , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 622
score: 99.79069010416667
patch: else if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 623
score: 99.84889615519663
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 623
score: 99.84496008831522
patch: if ( n . get CaMeL Parent ( ) == null && out != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 623
score: 99.84094819568452
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges ) ;
rank: 623
score: 99.81251061480978
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 623
score: 99.7906863190407
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 624
score: 99.84886532738095
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ( out CaMeL Edges . size ( ) == 1 ) || ( out CaMeL Edges . size ( ) == 1 ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 624
score: 99.84494357638889
patch: if ( g CaMeL Node != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 624
score: 99.84093656994048
patch: if ( g CaMeL Node != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 624
score: 99.82861902573529
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node ) >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 624
score: 99.8125
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges [ 0 ] . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 624
score: 99.79065472146739
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 625
score: 99.859375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } Iterator < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value
rank: 625
score: 99.8560546875
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ; } } }
rank: 625
score: 99.84885730962644
patch: if ( n . get CaMeL Parent ( ) == this ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 625
score: 99.844912109375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) ==
rank: 625
score: 99.84093345083842
patch: if ( n . get CaMeL Parent ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 625
score: 99.82857921511628
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 625
score: 99.82111545138889
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 625
score: 99.8148552389706
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 625
score: 99.81244387571839
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 626
score: 99.85934416118421
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 626
score: 99.8560193650266
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 626
score: 99.84883031952248
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 1 ) . get CaMeL Value ( ) ) ; }
rank: 626
score: 99.84486762152778
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) out CaMeL Edges . size ( ) ;
rank: 626
score: 99.84093256106321
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 626
score: 99.82111235119048
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 626
score: 99.81483085200472
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ; }
rank: 626
score: 99.8124287923177
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ;
rank: 626
score: 99.79063695790816
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == $NUMBER$ ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 627
score: 99.85934383311171
patch: if ( g CaMeL Node . get CaMeL Out CaMeL Edges ( ) . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 627
score: 99.85600897606383
patch: } else { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 627
score: 99.84881036931819
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 627
score: 99.82110969387755
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; } }
rank: 627
score: 99.81482562822166
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 627
score: 99.79061702806122
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 628
score: 99.8559903231534
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 628
score: 99.84484206989248
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 628
score: 99.84091443900603
patch: if ( g CaMeL Node != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; }
rank: 628
score: 99.82854817708333
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 628
score: 99.82107843137256
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 628
score: 99.81478256777109
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 628
score: 99.81235573508523
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && / ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 628
score: 99.79058412063954
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 629
score: 99.85928149933511
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } }
rank: 629
score: 99.84879740168539
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } * /
rank: 629
score: 99.84087844122024
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 629
score: 99.82854784149484
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == Branch . UNCOND ) ;
rank: 629
score: 99.82096000339673
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 629
score: 99.81233520507813
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node . Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 629
score: 99.7905804177989
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 630
score: 99.85927111037235
patch: while ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 630
score: 99.8559724506579
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 630
score: 99.84478515625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } Set < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get
rank: 630
score: 99.82853897758152
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 630
score: 99.82095988412921
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 && n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 630
score: 99.81477481617647
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 630
score: 99.79054727359694
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 631
score: 99.85920698924731
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 631
score: 99.85596264367815
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ; } } }
rank: 631
score: 99.8446734884511
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 631
score: 99.84087579900569
patch: if ( node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } }
rank: 631
score: 99.82852320995146
patch: Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 631
score: 99.8209292763158
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 631
score: 99.81476600424757
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ) ; }
rank: 631
score: 99.8123046875
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ) ;
rank: 631
score: 99.79054727359694
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 632
score: 99.85914644281915
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL String ( ) ) ; } }
rank: 632
score: 99.85595703125
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } }
rank: 632
score: 99.84875085851648
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } * / }
rank: 632
score: 99.84085398706897
patch: if ( n . get CaMeL Parent ( ) . get CaMeL Value ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 632
score: 99.82849702380952
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < ? >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 632
score: 99.82091754415761
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 632
score: 99.79051737882654
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 633
score: 99.859130859375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) )
rank: 633
score: 99.8559087396978
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } } }
rank: 633
score: 99.84872631316489
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 633
score: 99.84454995013297
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { out CaMeL Edges . add ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ) ; } }
rank: 633
score: 99.82848539806548
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 633
score: 99.81475123355263
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 633
score: 99.81224476207386
patch: if ( n . get CaMeL Parent ( ) == null || n . has CaMeL Children ( ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 633
score: 99.79051672894022
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 634
score: 99.85910488696808
patch: if ( g CaMeL Node . get CaMeL Out ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 634
score: 99.85587391954788
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 634
score: 99.848720703125
patch: Set < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 634
score: 99.8445354959239
patch: if ( n != null && n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 634
score: 99.84079649390245
patch: else if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 634
score: 99.82846214657738
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 634
score: 99.81222401494566
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ;
rank: 634
score: 99.79049549932066
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 635
score: 99.8590809811828
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 635
score: 99.85585508241758
patch: if ( n . get CaMeL Parent ( ) == null ) { try { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 635
score: 99.84447948042168
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } else
rank: 635
score: 99.81461771418539
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; }
rank: 635
score: 99.8121849798387
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else if ( n . has CaMeL Children ( ) ) {
rank: 635
score: 99.7904790521978
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 636
score: 99.85585314162235
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } }
rank: 636
score: 99.84870186237374
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 636
score: 99.844453125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Out (
rank: 636
score: 99.84078624636628
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 636
score: 99.8283455141129
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 636
score: 99.82086113061797
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 636
score: 99.81461382515823
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 636
score: 99.81217817826705
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , n ) ;
rank: 636
score: 99.7904065860215
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return n ;
rank: 637
score: 99.85904296875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } return try CaMeL Remove CaMeL Unconditional
rank: 637
score: 99.85582386363636
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 637
score: 99.84870016163794
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) <= 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 637
score: 99.844443359375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get
rank: 637
score: 99.84078369140624
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 637
score: 99.8283221905048
patch: else { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 637
score: 99.82083484738372
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 637
score: 99.81459263392857
patch: if ( n != null || n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 637
score: 99.8121706940407
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 638
score: 99.85581825657894
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 638
score: 99.84869864817416
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { throw try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 638
score: 99.844404296875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < if > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get
rank: 638
score: 99.8207727191092
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 638
score: 99.81457648026316
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; }
rank: 638
score: 99.81214272103658
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 638
score: 99.79035701308139
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n == null ) { break ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 639
score: 99.85900493421053
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } else
rank: 639
score: 99.84867267219387
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 639
score: 99.84434621710527
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( ) ; }
rank: 639
score: 99.82826898036859
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 639
score: 99.820751953125
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return n ; }
rank: 639
score: 99.81456367924528
patch: if ( n . has CaMeL Children ( ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 639
score: 99.81196120689656
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return n ; }
rank: 639
score: 99.79035373263889
patch: if ( n . get CaMeL Parent ( ) != null ) { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 640
score: 99.8558121565934
patch: } * / if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 640
score: 99.8486328125
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } }
rank: 640
score: 99.8407470703125
patch: if ( n . get CaMeL Node ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 640
score: 99.82074962797618
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 640
score: 99.81454014542079
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 640
score: 99.81195269574175
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 640
score: 99.79032258064517
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ! out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 641
score: 99.85897008384147
patch: if ( n . get CaMeL Parent ( ) == null ) { return < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 641
score: 99.85580512152778
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null ) { out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 641
score: 99.84862284757654
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ) ; }
rank: 641
score: 99.84423828125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 1 ) . get CaMeL Destination ( ) . get
rank: 641
score: 99.84073893229167
patch: if ( out != null ) { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } } }
rank: 641
score: 99.82825377747253
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) + Branch . UNCOND ) ;
rank: 641
score: 99.82072418811275
patch: List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 641
score: 99.8145154587766
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 641
score: 99.81195136938203
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else {
rank: 641
score: 99.79030354817708
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 642
score: 99.85896222615979
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 642
score: 99.84859834558823
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } } * /
rank: 642
score: 99.84419659870427
patch: if ( out != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 642
score: 99.84073679070724
patch: else if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 642
score: 99.82824946384804
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 642
score: 99.81450840212264
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Value ( ) ) ; }
rank: 642
score: 99.81187220982143
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 642
score: 99.79029381793478
patch: if ( n . get CaMeL Node ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 643
score: 99.858935546875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL
rank: 643
score: 99.84859169407895
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 643
score: 99.844189453125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Value ( ) . get CaMeL
rank: 643
score: 99.84072946947674
patch: if ( out . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 643
score: 99.82824125744048
patch: if ( n == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 643
score: 99.81450678228022
patch: if ( n . get CaMeL Parent ( ) != null ) { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 643
score: 99.81184692382813
patch: if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 643
score: 99.79028577302631
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 644
score: 99.85892740885417
patch: if ( n . get CaMeL Parent ( ) == null && out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 644
score: 99.85576923076923
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ; } }
rank: 644
score: 99.8441796875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 644
score: 99.84070265436748
patch: if ( out != null ) { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 644
score: 99.82823597301136
patch: while ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 644
score: 99.820703125
patch: List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 644
score: 99.81448679956897
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 644
score: 99.81179283405173
patch: if ( ! n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 645
score: 99.85892578125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } return try CaMeL Remove CaMeL Unconditional CaMeL
rank: 645
score: 99.85575939360119
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 645
score: 99.84854125976562
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ; } } }
rank: 645
score: 99.8441796875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0
rank: 645
score: 99.84069683908046
patch: if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; }
rank: 645
score: 99.82821800595238
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 645
score: 99.82069382440476
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 645
score: 99.814453125
patch: if ( n . get CaMeL Parent ( ) == null ) { break ; } Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 645
score: 99.8117816091954
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == - 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 645
score: 99.79025607638889
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ;
rank: 646
score: 99.85575657894736
patch: if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 646
score: 99.844169921875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( )
rank: 646
score: 99.84064909699676
patch: while ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } } }
rank: 646
score: 99.82807134271978
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == Branch . UNCOND ) ;
rank: 646
score: 99.8206895884901
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 646
score: 99.8116805854885
patch: if ( n != null ) { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 646
score: 99.7902301290761
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 647
score: 99.85884765625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get ( 0
rank: 647
score: 99.84850114115169
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ( out CaMeL Edges . size ( ) == 1 ) || ( out CaMeL Edges . size ( ) == 1 ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 647
score: 99.84416695926966
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Node ( ) . get CaMeL Value ( ) ) ; } } }
rank: 647
score: 99.84063165838069
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } }
rank: 647
score: 99.82806865985577
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 647
score: 99.82068810096153
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } return n ;
rank: 647
score: 99.81441112231182
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 648
score: 99.85882896505376
patch: if ( n . get CaMeL Parent ( ) == null && g CaMeL Node . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 648
score: 99.85566179142442
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } }
rank: 648
score: 99.84848022460938
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 648
score: 99.844150390625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) >= 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 )
rank: 648
score: 99.84060852786145
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 648
score: 99.82806396484375
patch: if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 648
score: 99.820634765625
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Name ( ) ) ; }
rank: 648
score: 99.81440822557471
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 648
score: 99.7902067550505
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == $NUMBER$ ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 649
score: 99.85880360704788
patch: if ( g CaMeL Node . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 649
score: 99.85564536236703
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 649
score: 99.84845920138889
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 1 ) . get CaMeL Value ( ) ) ; } }
rank: 649
score: 99.84412109375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < E > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get
rank: 649
score: 99.84053969109195
patch: if ( n . get CaMeL Parent ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 649
score: 99.82804904513888
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 649
score: 99.82062416888297
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 649
score: 99.81439763849431
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , ) ; }
rank: 649
score: 99.81158021438954
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , get CaMeL Value ( ) ) ;
rank: 649
score: 99.79020552201705
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { break ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 650
score: 99.85880114368557
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 650
score: 99.85564350328947
patch: / * if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 650
score: 99.84841464428192
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 650
score: 99.84052846623563
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } } }
rank: 650
score: 99.82804731889205
patch: if ( n . get CaMeL Type ( ) == Token . RETURN ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 650
score: 99.82060446198453
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 650
score: 99.81438654119319
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { break ; } if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 650
score: 99.81155750363372
patch: if ( n . get CaMeL Parent ( ) . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 650
score: 99.79016694568452
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } else { return n ; }
rank: 651
score: 99.858779296875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value
rank: 651
score: 99.85563712284483
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 651
score: 99.84839672046704
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } finally { out CaMeL Edges . close ( ) ; }
rank: 651
score: 99.844091796875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( )
rank: 651
score: 99.82803819444445
patch: if ( n . get CaMeL Type ( ) == Token . BLOCK ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 652
score: 99.85876953125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; if ( out CaMeL Edges . size
rank: 652
score: 99.85561899038461
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 652
score: 99.84837105347938
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 652
score: 99.82056725543478
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 652
score: 99.7901278409091
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 653
score: 99.85560344827586
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 653
score: 99.84836832682292
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 653
score: 99.84399671052631
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 653
score: 99.84046519886364
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 653
score: 99.82803415697674
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 653
score: 99.82052641369047
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 653
score: 99.8143534757653
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ; }
rank: 653
score: 99.7901278409091
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == $NUMBER$ ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 654
score: 99.85867145497312
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; }
rank: 654
score: 99.8555908203125
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return out CaMeL Edges . get ( 0 ) ; } } }
rank: 654
score: 99.84834752457866
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 654
score: 99.84045991443452
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 654
score: 99.82051355698529
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Out CaMeL Edges ( ) ) ; }
rank: 654
score: 99.814345703125
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 654
score: 99.79011797664141
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 655
score: 99.85861660571808
patch: while ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 655
score: 99.8555818256579
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 655
score: 99.84834428267045
patch: if ( n . get CaMeL Parent ( ) == this ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 655
score: 99.84038751775569
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 655
score: 99.82047526041667
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; } }
rank: 655
score: 99.81434087643679
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; }
rank: 655
score: 99.7901027513587
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) <= 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 656
score: 99.85859582779256
patch: if ( n . get CaMeL Parent ( ) == n ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 656
score: 99.85554470486112
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 656
score: 99.84830729166667
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ) ; } }
rank: 656
score: 99.843974609375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } Enumeration < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 )
rank: 656
score: 99.84038696289062
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; while ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 656
score: 99.82795877659575
patch: switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 656
score: 99.820419921875
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ; }
rank: 656
score: 99.79009824810606
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 1 ) . get CaMeL Value ( ) ) ;
rank: 657
score: 99.85856644825269
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) <= 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 657
score: 99.8555438701923
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } } } }
rank: 657
score: 99.843974609375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . to CaMeL Array (
rank: 657
score: 99.84030112737342
patch: if ( g CaMeL Node != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 657
score: 99.82795662715517
patch: if ( n . get CaMeL Parent ( ) == null ) { final List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 657
score: 99.82040550595238
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } ;
rank: 657
score: 99.81125332446808
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ) ; }
rank: 658
score: 99.85553385416667
patch: } if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 658
score: 99.84827867445055
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 658
score: 99.84394739029256
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( ) ;
rank: 658
score: 99.84028151939656
patch: if ( n . get CaMeL Parent ( ) . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 658
score: 99.82793183379121
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == Branch . UNCOND ) ;
rank: 658
score: 99.820400390625
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == $NUMBER$ ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 658
score: 99.81423828125
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ; }
rank: 658
score: 99.79002783764368
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return n ; }
rank: 659
score: 99.8439453125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( )
rank: 659
score: 99.82787224264706
patch: if ( ! n . get CaMeL Parent ( ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 659
score: 99.8203720464939
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 659
score: 99.81422270014045
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 659
score: 99.81122295673077
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , out CaMeL Edges . get ( 0 ) ) ;
rank: 659
score: 99.79001933396465
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 660
score: 99.858515625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Parent
rank: 660
score: 99.85548270089286
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 660
score: 99.84822591145833
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 660
score: 99.84025435014205
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Node ( ) . get CaMeL Value ( ) ) ; } }
rank: 660
score: 99.82786382630815
patch: if ( n == null ) { return n ; } else { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 660
score: 99.81416730182927
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 660
score: 99.79001892719072
patch: if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 661
score: 99.85548095703125
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Node >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 661
score: 99.84820772058823
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } finally { out CaMeL Edges . close ( ) ; }
rank: 661
score: 99.84024160879629
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; while ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 661
score: 99.8278567135989
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 662
score: 99.85848812181122
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ;
rank: 662
score: 99.85548023897059
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } } } }
rank: 662
score: 99.84818293539325
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 662
score: 99.84022288602941
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return out CaMeL Edges ; }
rank: 662
score: 99.8278339092548
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 662
score: 99.81120548691861
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Id ( ) ) ;
rank: 662
score: 99.7899881998698
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 663
score: 99.85840882646276
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; } }
rank: 663
score: 99.84815492021276
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null ) { out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 663
score: 99.84019252232143
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , null ) ; } }
rank: 663
score: 99.82777913411458
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ) ;
rank: 663
score: 99.820322265625
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ! out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 663
score: 99.81119437839673
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 663
score: 99.78997927295919
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 1 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 664
score: 99.858408203125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( )
rank: 664
score: 99.85543302210365
patch: } else { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 664
score: 99.84383042279411
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; } }
rank: 664
score: 99.84019172054597
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 664
score: 99.82777263208763
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == Branch . UNCOND ) ;
rank: 664
score: 99.82029079861111
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } return n ;
rank: 664
score: 99.78990279796511
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 665
score: 99.8583984375
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 665
score: 99.85542436079545
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } }
rank: 665
score: 99.84382595486112
patch: synchronized ( g CaMeL Node ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 665
score: 99.84018089657738
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Type ( ) ) ; } }
rank: 665
score: 99.820224609375
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) < 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 665
score: 99.81401422050561
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } List < Di CaMeL Graph < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 666
score: 99.858369140625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ! try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination (
rank: 666
score: 99.85540140086206
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 666
score: 99.84380859375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get
rank: 666
score: 99.82772352430555
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 666
score: 99.81400413074712
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 666
score: 99.81115337171053
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 666
score: 99.78990255376344
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; }
rank: 667
score: 99.843779296875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 )
rank: 667
score: 99.84016557173295
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Float >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 667
score: 99.82761101973684
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ;
rank: 667
score: 99.82016746596534
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == $NUMBER$ ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 667
score: 99.81394974226804
patch: if ( n . get CaMeL Parent ( ) != null || n . get CaMeL Next ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 667
score: 99.78981711647727
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 668
score: 99.84377055921053
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 668
score: 99.84016170058139
patch: if ( g CaMeL Node != null ) { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } } }
rank: 668
score: 99.82757040895062
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 668
score: 99.81104532877605
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ;
rank: 668
score: 99.78980553668478
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 669
score: 99.858330078125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( g CaMeL Node
rank: 669
score: 99.85536595394737
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } } }
rank: 669
score: 99.84804095643939
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 669
score: 99.84376176581326
patch: Vector < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 669
score: 99.84015447443181
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Type ( ) . get CaMeL Value ( ) ) ; } }
rank: 669
score: 99.82756375718391
patch: if ( n . get CaMeL Parent ( ) == null ) { { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 669
score: 99.82012469951923
patch: if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 669
score: 99.81101481119792
patch: if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ;
rank: 669
score: 99.78980011635639
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 670
score: 99.85830078125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get ( 0
rank: 670
score: 99.85535447140957
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 670
score: 99.84802931882022
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch : out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 670
score: 99.84375
patch: List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 670
score: 99.84015395220588
patch: else { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 670
score: 99.82756121134021
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 670
score: 99.82003948252688
patch: List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 670
score: 99.81392799233491
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ; }
rank: 670
score: 99.81098090277777
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) . get CaMeL Value ( ) ) ;
rank: 670
score: 99.78978993941327
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 671
score: 99.85828882334184
patch: out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 671
score: 99.85532174059139
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; for ( Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 671
score: 99.84802495216837
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 671
score: 99.84373972039474
patch: if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } }
rank: 671
score: 99.84011627906976
patch: if ( n . get CaMeL Parent ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 671
score: 99.82754345154494
patch: if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 671
score: 99.81097196691177
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else {
rank: 672
score: 99.85531850961539
patch: else { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 672
score: 99.8480224609375
patch: List < Di CaMeL Graph CaMeL Edge < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 672
score: 99.840087890625
patch: if ( n . get CaMeL Parent ( ) == null ) { Node < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 672
score: 99.81999044215425
patch: Di CaMeL Graph CaMeL Node < Node , Integer >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 672
score: 99.81390582074175
patch: if ( n . has CaMeL Children ( ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 672
score: 99.81096370045732
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else
rank: 672
score: 99.78978704637096
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 673
score: 99.8553133877841
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 673
score: 99.84801962209302
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } finally { out CaMeL Edges . close ( ) ; } }
rank: 673
score: 99.84372922207447
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 673
score: 99.82752821180556
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 673
score: 99.81998375618812
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } ;
rank: 673
score: 99.81388192806604
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 673
score: 99.81091918945313
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 673
score: 99.78976307744566
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { break ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 674
score: 99.85818026928192
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 674
score: 99.85528174867021
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } }
rank: 674
score: 99.84801136363636
patch: / * if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 674
score: 99.82750459558824
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 674
score: 99.81997234901685
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ! out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 674
score: 99.813857421875
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 674
score: 99.81089819931402
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && / ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 674
score: 99.7897428019663
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 675
score: 99.85816936728395
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 675
score: 99.8552579012784
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 675
score: 99.8479996565934
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } finally { out CaMeL Edges . close ( ) ; }
rank: 675
score: 99.84364752121914
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 675
score: 99.84000459558824
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 675
score: 99.81379872744846
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ) ; }
rank: 675
score: 99.81072126116071
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 675
score: 99.78972061820652
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 676
score: 99.85524338942308
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 676
score: 99.84798943014705
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 676
score: 99.84000459558824
patch: for ( Di CaMeL Graph CaMeL Edge n : g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 676
score: 99.82748413085938
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 676
score: 99.81377963362068
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 676
score: 99.81053590238764
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) ) ;
rank: 676
score: 99.78972061820652
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 677
score: 99.85805191532258
patch: if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 677
score: 99.85524259868421
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 677
score: 99.8436328125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Destination ( ) . get CaMeL Value ( ) .
rank: 677
score: 99.84000452553353
patch: if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 677
score: 99.81047782512626
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ) ;
rank: 677
score: 99.78968492445055
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 678
score: 99.85523412134741
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 678
score: 99.8436328125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Destination ( ) . get CaMeL
rank: 678
score: 99.8399913699128
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 678
score: 99.82747060244846
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 678
score: 99.81372612847223
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 678
score: 99.81041899181548
patch: if ( g CaMeL Node == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 678
score: 99.78968203965054
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ;
rank: 679
score: 99.85520623319893
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 679
score: 99.84361738040124
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 679
score: 99.81366784793815
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 679
score: 99.81039891098484
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) . get CaMeL Value ( ) ) ;
rank: 679
score: 99.78962053571429
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ;
rank: 680
score: 99.85516747007979
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 680
score: 99.8479512532552
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 680
score: 99.83998147035257
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 680
score: 99.81979237432066
patch: if ( n . get CaMeL Parent ( ) . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 680
score: 99.81365847120098
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ) ;
rank: 680
score: 99.81039428710938
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 681
score: 99.85794921875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Parent
rank: 681
score: 99.84792258522727
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 681
score: 99.8434765625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( this . out CaMeL Edges . get (
rank: 681
score: 99.83996865915698
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 681
score: 99.82745971679688
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Name ( ) ) ;
rank: 681
score: 99.81976102941177
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } switch ( n . get CaMeL Type ( ) ) {
rank: 681
score: 99.81039325842697
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 681
score: 99.78956139605978
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 682
score: 99.85515054424157
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) <= 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 682
score: 99.847890625
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 682
score: 99.843447265625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Node ( ) . get
rank: 682
score: 99.83995093368902
patch: if ( out != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } }
rank: 682
score: 99.82741749043367
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( g CaMeL Node ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 682
score: 99.81972249348958
patch: if ( n . get CaMeL Parent ( ) != null && n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 682
score: 99.81361897786458
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 682
score: 99.81037886424731
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 682
score: 99.78955078125
patch: if ( g CaMeL Node == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 683
score: 99.85514322916667
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 683
score: 99.84788977581522
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } * /
rank: 683
score: 99.8433810763889
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } }
rank: 683
score: 99.83994750976562
patch: while ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 683
score: 99.82741391080097
patch: if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 683
score: 99.8196681701031
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 683
score: 99.81034297733517
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 683
score: 99.78955078125
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 684
score: 99.85791015625
patch: if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Out ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 684
score: 99.8551253434066
patch: else if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 684
score: 99.84783286236703
patch: if ( n . get CaMeL Parent ( ) . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 684
score: 99.84329788773148
patch: if ( out == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 684
score: 99.83990052688954
patch: if ( n != null ) { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 684
score: 99.81962778376437
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } return n ;
rank: 684
score: 99.78954016644022
patch: if ( n . get CaMeL Parent ( ) == null ) { Node < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 685
score: 99.85509868421053
patch: } else if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 685
score: 99.8478045886076
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 685
score: 99.839890813253
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 685
score: 99.8196270282452
patch: Node < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 685
score: 99.8135986328125
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 685
score: 99.810302734375
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get ( ) ) ;
rank: 686
score: 99.85508710488506
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 686
score: 99.8477734375
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 686
score: 99.83987947789635
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Integer > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 686
score: 99.82731119791667
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Node < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 686
score: 99.81962316176471
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 686
score: 99.81029979292168
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 686
score: 99.78953503024194
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return n ; }
rank: 687
score: 99.85784333881578
patch: if ( g CaMeL Node . get CaMeL Out ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 687
score: 99.85507347470238
patch: if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 687
score: 99.84321227254746
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 687
score: 99.8398770419034
patch: if ( n . get CaMeL Parent ( ) == null ) { final Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 687
score: 99.81957733497191
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 687
score: 99.81356434339888
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; }
rank: 687
score: 99.81028353230337
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 687
score: 99.78951402889786
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) , ) ;
rank: 688
score: 99.857841796875
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Name ( ) ) ; } }
rank: 688
score: 99.8550335427989
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ; } } } }
rank: 688
score: 99.84772897273936
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 688
score: 99.84318899601064
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Node ( ) ) ; } }
rank: 688
score: 99.83986594460227
patch: if ( n . get CaMeL Parent ( ) == null ) { if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 688
score: 99.81951254986703
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ! out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 688
score: 99.8102794828869
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 688
score: 99.78948419744319
patch: if ( n . has CaMeL Children ( ) ) { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 689
score: 99.85501024199695
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } } }
rank: 689
score: 99.8477274576823
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } * /
rank: 689
score: 99.84314594072166
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 689
score: 99.83985523897059
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 689
score: 99.82717088721265
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node < Node >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 689
score: 99.81027626129519
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 689
score: 99.78945536997126
patch: if ( n . get CaMeL Parent ( ) == null ) { break ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 690
score: 99.85783870045732
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return ( Di CaMeL Graph CaMeL Edge < Node , Branch >> ) g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; } }
rank: 690
score: 99.85500124667553
patch: } if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 690
score: 99.8430696980337
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 690
score: 99.83981397675305
patch: while ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 690
score: 99.81945941091954
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ! out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 690
score: 99.81023297991071
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , g CaMeL Node ) ;
rank: 690
score: 99.78943734217172
patch: if ( n . get CaMeL Parent ( ) == null ) { break ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 691
score: 99.85496437156593
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 691
score: 99.84771050347223
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 691
score: 99.84304645497312
patch: if ( n . get CaMeL Parent ( ) . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 691
score: 99.8397842035061
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node . Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 691
score: 99.819453125
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , ) ;
rank: 691
score: 99.81014278017241
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 691
score: 99.78941278872283
patch: if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 692
score: 99.85489998282966
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 692
score: 99.84769071691177
patch: if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 692
score: 99.8397834683642
patch: if ( node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 692
score: 99.82715810643565
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 692
score: 99.81945219494048
patch: if ( n . get CaMeL Parent ( ) == null ) { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 692
score: 99.81013155531609
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == ) ;
rank: 693
score: 99.85777791341145
patch: if ( n . get CaMeL Parent ( ) == null && out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 693
score: 99.84766631765464
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } }
rank: 693
score: 99.84298191713484
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } else
rank: 693
score: 99.83976633955793
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; while ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 693
score: 99.8271484375
patch: if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 693
score: 99.81945082720588
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 693
score: 99.8101116677989
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ;
rank: 693
score: 99.78933869949495
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return n ;
rank: 694
score: 99.8576994243421
patch: if ( g CaMeL Node . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 694
score: 99.8429734563253
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 694
score: 99.83976606889205
patch: if ( out != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 694
score: 99.8271484375
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 694
score: 99.81942749023438
patch: List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 694
score: 99.81345847800925
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 694
score: 99.78933551747312
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 695
score: 99.85760887632979
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 695
score: 99.85481400923295
patch: else { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } }
rank: 695
score: 99.84763611469072
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 695
score: 99.84295099431819
patch: List out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 695
score: 99.83974155159883
patch: if ( n . get CaMeL Parent ( ) == null ) { try { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } } }
rank: 695
score: 99.82712743615592
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Branch . UNCOND ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ;
rank: 695
score: 99.81941274578652
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( g CaMeL Node ) ; }
rank: 695
score: 99.80995686848958
patch: if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 695
score: 99.78933155293367
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 696
score: 99.85758809840425
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 696
score: 99.84763405539773
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = ( List < Di CaMeL Graph CaMeL Edge < Node , Branch > ) g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 696
score: 99.83970256024097
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 696
score: 99.81344635953609
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 697
score: 99.85756429036458
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 697
score: 99.85480057565789
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 697
score: 99.83970083841463
patch: if ( n . get CaMeL Parent ( ) == null ) { try { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 697
score: 99.82712572674419
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 697
score: 99.80964772294207
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 )
rank: 697
score: 99.789306640625
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 698
score: 99.85743393132717
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) <= 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 698
score: 99.84758994020062
patch: List < Di CaMeL Graph CaMeL Edge < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 698
score: 99.84279443884408
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 698
score: 99.82710404829545
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 698
score: 99.78929351478494
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 699
score: 99.85477941176471
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 699
score: 99.83960912134741
patch: if ( out != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 699
score: 99.81932496488764
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 699
score: 99.80950447682584
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } else {
rank: 699
score: 99.78929105718085
patch: if ( n . has CaMeL Children ( ) ) { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 700
score: 99.85732935855263
patch: if ( n . get CaMeL Out ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } }
rank: 700
score: 99.84756944444445
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 700
score: 99.82708803157216
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) == Branch . UNCOND ) ;
rank: 700
score: 99.81923373909883
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == $NUMBER$ ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 700
score: 99.81336495535714
patch: List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 700
score: 99.80942789713542
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 701
score: 99.85732014973958
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 701
score: 99.85477430555555
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 701
score: 99.84273051167582
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { out CaMeL Edges . next ( ) ;
rank: 701
score: 99.82705863864942
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ;
rank: 701
score: 99.8192138671875
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 701
score: 99.81336030505952
patch: if ( n . has CaMeL Children ( ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 702
score: 99.85731798537235
patch: if ( g CaMeL Node . get CaMeL Out ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 702
score: 99.85473065043605
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 702
score: 99.84750677614795
patch: List < Di CaMeL Graph CaMeL Edge < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 702
score: 99.83959393168605
patch: if ( n . get CaMeL Parent ( ) == null || out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 702
score: 99.81916947798295
patch: List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 703
score: 99.85472261235955
patch: } if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 703
score: 99.84750263342697
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 703
score: 99.84256342405914
patch: List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 703
score: 99.83958740234375
patch: if ( out . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 703
score: 99.81912735133496
patch: List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 703
score: 99.81331571691176
patch: if ( n . get CaMeL Parent ( ) != null ) { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 703
score: 99.80933388157895
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Type ( ) ) ;
rank: 703
score: 99.78925978535354
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { throw try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 704
score: 99.85714885752688
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; }
rank: 704
score: 99.85471754807692
patch: / * / if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 704
score: 99.84748641304348
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } finally { out CaMeL Edges . close ( ) ; }
rank: 704
score: 99.84256165286145
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) >= 1 ) {
rank: 704
score: 99.81329345703125
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; }
rank: 704
score: 99.80925641741071
patch: if ( n == null || n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 705
score: 99.85466251816861
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ; } }
rank: 705
score: 99.84748509987114
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } }
rank: 705
score: 99.84255420918367
patch: List out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 705
score: 99.8395108309659
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( n . get CaMeL Parent ( ) != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 705
score: 99.81328790838069
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 705
score: 99.8091415777439
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 706
score: 99.85712376644737
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( g CaMeL Node . get CaMeL Out CaMeL Edges ( ) . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 706
score: 99.85464802194149
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; }
rank: 706
score: 99.84745279947917
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 706
score: 99.8424794186828
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { out CaMeL Edges . add ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ) ; }
rank: 706
score: 99.83950805664062
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , n ) ; } }
rank: 706
score: 99.80912853422619
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return new Di CaMeL Graph CaMeL Edge < Node , Branch >> ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 706
score: 99.78920676491477
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && ! out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 707
score: 99.85709228515626
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . length == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 707
score: 99.85463645241477
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } }
rank: 707
score: 99.84236163403614
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) ; List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 707
score: 99.83946533203125
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 707
score: 99.82688643292683
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> g CaMeL Node = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( g CaMeL Node == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 707
score: 99.81894918007426
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } }
rank: 707
score: 99.81328339629121
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; break ; }
rank: 707
score: 99.80912189094387
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ) ;
rank: 708
score: 99.85707535282258
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ;
rank: 708
score: 99.85463324652778
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 708
score: 99.8473879635989
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 708
score: 99.839453125
patch: if ( g CaMeL Node != null ) { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 708
score: 99.82686941964286
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 708
score: 99.80898902529762
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 708
score: 99.78916237571023
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 && n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 709
score: 99.85705689709596
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ; }
rank: 709
score: 99.85462535511364
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 709
score: 99.847373046875
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 709
score: 99.84223221009036
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return null ; }
rank: 709
score: 99.818857421875
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> g CaMeL Node = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 709
score: 99.80894978841145
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 709
score: 99.78914741847827
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else {
rank: 710
score: 99.85461709665698
patch: } if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 710
score: 99.8473599894663
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 710
score: 99.84209498355263
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 710
score: 99.81880580357142
patch: List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 710
score: 99.78914650537635
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ! out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 711
score: 99.85684009308511
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; } }
rank: 711
score: 99.84733430631869
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 711
score: 99.84207286005434
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 711
score: 99.83940598060344
patch: if ( n != null ) { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 711
score: 99.8132082760989
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 711
score: 99.80878691620879
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else {
rank: 712
score: 99.85682970412235
patch: if ( g CaMeL Node . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 712
score: 99.84733072916667
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . size ( ) ) ; } }
rank: 712
score: 99.84206414473684
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 712
score: 99.82682674632353
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 712
score: 99.8132001768868
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 712
score: 99.78911182133838
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 713
score: 99.8567645733173
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return ( Di CaMeL Graph CaMeL Edge < Node , Branch >> ) out CaMeL Edges . get ( 0 ) ; }
rank: 713
score: 99.85460316051136
patch: } if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 713
score: 99.84731341422872
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . size ( ) ) ; }
rank: 713
score: 99.84203491210937
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 713
score: 99.82681525735295
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 713
score: 99.81319594109195
patch: if ( n . get CaMeL Parent ( ) > null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 713
score: 99.80873469716495
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 714
score: 99.8472970545977
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return null ; }
rank: 714
score: 99.84203361742425
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 714
score: 99.83932059151786
patch: if ( g CaMeL Node . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 714
score: 99.82674941196237
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 714
score: 99.8187136182598
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == $NUMBER$ ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 714
score: 99.81315461881869
patch: if ( n . get CaMeL Parent ( ) instanceof Di CaMeL Graph CaMeL Edge ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 714
score: 99.80866279987374
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) . get CaMeL Destination ( ) ) ;
rank: 715
score: 99.85659308182566
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 715
score: 99.84727460488506
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } }
rank: 715
score: 99.8419773267663
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { out CaMeL Edges . next ( ) ; }
rank: 715
score: 99.83929227941177
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 715
score: 99.82672828851744
patch: if ( n . get CaMeL Type ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 715
score: 99.81871174291237
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 716
score: 99.85650831653226
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 716
score: 99.85458519345238
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 716
score: 99.84194232047872
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Node ( ) ) ; } }
rank: 716
score: 99.83926156850961
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 716
score: 99.82667738970588
patch: else { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 716
score: 99.80859375
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 716
score: 99.78909301757812
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 717
score: 99.83921682098766
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 717
score: 99.82660590277777
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 717
score: 99.81867844987623
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 717
score: 99.80856397675305
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 )
rank: 717
score: 99.7890857514881
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 718
score: 99.84169514973958
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 718
score: 99.83919896834936
patch: if ( n . get CaMeL Parent ( ) == null ) { try { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 718
score: 99.82654747596153
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 718
score: 99.81864659926471
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ;
rank: 718
score: 99.81311274509804
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 718
score: 99.80849095394737
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 1 ) . get CaMeL Destination ( ) ) ;
rank: 719
score: 99.85639280913979
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 719
score: 99.85455657623626
patch: else if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } }
rank: 719
score: 99.84722222222223
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 719
score: 99.84168956043956
patch: List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ; } }
rank: 719
score: 99.83918108258929
patch: if ( g CaMeL Node != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } }
rank: 719
score: 99.8265306122449
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) == Branch . UNCOND ) ;
rank: 719
score: 99.81863010519803
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 719
score: 99.81307983398438
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 719
score: 99.80844427614795
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ;
rank: 720
score: 99.856337890625
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ; } }
rank: 720
score: 99.84721327319588
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 720
score: 99.84152255969101
patch: if ( ! n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 720
score: 99.83916133283132
patch: if ( n . get CaMeL Parent ( ) == null ) { Node < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 720
score: 99.82647094726562
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node < Node >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 720
score: 99.8186279296875
patch: if ( n . get CaMeL Parent ( ) == null ) { List < ? , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 720
score: 99.8130163433908
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) <= 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 720
score: 99.80835978190105
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 721
score: 99.85631431021342
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 721
score: 99.85450280230978
patch: if ( n == null || n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 721
score: 99.84718371975806
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 721
score: 99.83915051118827
patch: if ( n . get CaMeL Node ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 721
score: 99.82645249640805
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( g CaMeL Node . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 721
score: 99.81301398026316
patch: if ( g CaMeL Node . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 721
score: 99.80819702148438
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 1 ) . get CaMeL Destination ( ) ) ;
rank: 721
score: 99.78901957417582
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 722
score: 99.85630289713542
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 722
score: 99.8544921875
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; while ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 722
score: 99.84716796875
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } * / }
rank: 722
score: 99.83914956701807
patch: else if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 722
score: 99.81841077302632
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 722
score: 99.81301398026316
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 722
score: 99.8081766764323
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 722
score: 99.78899591619319
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { break ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 723
score: 99.8544921875
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 723
score: 99.8391363681891
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 723
score: 99.82637627180233
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 723
score: 99.81299430941358
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 723
score: 99.78898977726064
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 724
score: 99.85614624023438
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; }
rank: 724
score: 99.8544921875
patch: } else if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 724
score: 99.84714279961341
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Out CaMeL Edges ( ) ) ; }
rank: 724
score: 99.83913352272727
patch: if ( n != null ) { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 724
score: 99.81820618872548
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 724
score: 99.81296913296569
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; }
rank: 724
score: 99.80797016189759
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else {
rank: 724
score: 99.78893426452021
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 725
score: 99.8561130798969
patch: if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 725
score: 99.84710761938203
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } } }
rank: 725
score: 99.83912836119185
patch: if ( n . get CaMeL Parent ( ) == null ) { return ) ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 725
score: 99.82635356104652
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 725
score: 99.8129602191092
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ; }
rank: 725
score: 99.80773146609043
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , null ) ;
rank: 725
score: 99.78893426452021
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 726
score: 99.85610301224227
patch: if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 726
score: 99.84709664676966
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 726
score: 99.84124755859375
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = out CaMeL Edges . get ( 0 ) ;
rank: 726
score: 99.82631052276234
patch: else if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 726
score: 99.81819100215517
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge [ ] , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 726
score: 99.81293755073052
patch: if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 726
score: 99.80766858552632
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 727
score: 99.85438998909883
patch: if ( n . get CaMeL Parent ( ) == null ) { try { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 727
score: 99.84696867028062
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . size ( ) ) ; }
rank: 727
score: 99.83910290948276
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get ( 0 ) ) ; } }
rank: 727
score: 99.82625229779411
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 727
score: 99.81817566522277
patch: List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 727
score: 99.81291852678571
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ) ; }
rank: 727
score: 99.80764802631579
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 727
score: 99.78891453598484
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 728
score: 99.85602247100516
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 728
score: 99.85438939144737
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } }
rank: 728
score: 99.84695095486111
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 728
score: 99.84119338132022
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return out CaMeL Edges ; }
rank: 728
score: 99.83910023082386
patch: if ( n . get CaMeL Parent ( ) . get CaMeL Destination ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 728
score: 99.82625044899426
patch: if ( n . get CaMeL Parent ( ) == null ) { { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 728
score: 99.81815632735149
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ;
rank: 728
score: 99.81291360294118
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge [ ] >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 728
score: 99.7889035247093
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> g CaMeL Node = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 729
score: 99.85589159149484
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ;
rank: 729
score: 99.85438939144737
patch: if ( n . get CaMeL Parent ( ) != null && n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 729
score: 99.84693170362904
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) , g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ) ; } }
rank: 729
score: 99.8390780362216
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Name ( ) ) ; } }
rank: 729
score: 99.81812234526699
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 729
score: 99.81288693985849
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; }
rank: 729
score: 99.78889973958333
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 730
score: 99.855859375
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 730
score: 99.84693137886597
patch: List < Di CaMeL Graph CaMeL Edge < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 730
score: 99.84105383831522
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { out CaMeL Edges . add ( n ) ;
rank: 730
score: 99.8390625
patch: if ( n . get CaMeL Parent ( ) == null ) { Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 730
score: 99.8262188251202
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) == Branch . UNCOND ) ;
rank: 730
score: 99.81288404143258
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; break ; }
rank: 730
score: 99.80751953125
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Node >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 730
score: 99.78888081395348
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 731
score: 99.85579091494846
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 731
score: 99.85436580882353
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } } }
rank: 731
score: 99.84691815043605
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 731
score: 99.83904678520115
patch: if ( n instanceof Di CaMeL Graph CaMeL Edge ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 731
score: 99.82621576544943
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 731
score: 99.81283674568965
patch: if ( n . has CaMeL Children ( ) ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 731
score: 99.78883958899456
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) < 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 732
score: 99.85576782226562
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } }
rank: 732
score: 99.85436276355422
patch: } if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 732
score: 99.84690504807692
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } }
rank: 732
score: 99.83904678520115
patch: if ( n . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 732
score: 99.82621387768818
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 732
score: 99.78879712975544
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 733
score: 99.85435956790124
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } } } }
rank: 733
score: 99.846904296875
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) , out CaMeL Edges ) ; } }
rank: 733
score: 99.826171875
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 733
score: 99.81804315476191
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 733
score: 99.8128094059406
patch: final Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 733
score: 99.80728474069149
patch: if ( n . get CaMeL Parent ( ) == null || n . has CaMeL Children ( ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 733
score: 99.7887939453125
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n == null ) { break ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 734
score: 99.85563676075269
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) <= 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 734
score: 99.84089712078652
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } else
rank: 734
score: 99.83901654411764
patch: if ( n . get CaMeL Parent ( ) == null ) { try { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 734
score: 99.82611575071839
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , ? >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 734
score: 99.81279761904761
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 734
score: 99.80714465725806
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 735
score: 99.85560380651596
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 735
score: 99.85434027777778
patch: } else { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 735
score: 99.8469002016129
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 735
score: 99.8408203125
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 735
score: 99.83901605373475
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Parent ( ) ) ; } }
rank: 735
score: 99.82609215561224
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 735
score: 99.81276547330097
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ) ; }
rank: 735
score: 99.80713383838383
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ) ;
rank: 735
score: 99.78871221127717
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 736
score: 99.85433296535327
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } }
rank: 736
score: 99.84689110824742
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Out CaMeL Edges ( ) ) ; }
rank: 736
score: 99.840693359375
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 736
score: 99.83900345203489
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 736
score: 99.82608255525915
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 736
score: 99.81789102359694
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 736
score: 99.80712890625
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ) ; }
rank: 737
score: 99.85542929292929
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 737
score: 99.84053679435483
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ; }
rank: 737
score: 99.8389828330592
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 1 ) ) ; } }
rank: 737
score: 99.81787634408602
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 737
score: 99.80708264802631
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) , n ) ;
rank: 737
score: 99.78870442708333
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null ) { return n ; } if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 738
score: 99.85522980385639
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( g CaMeL Node . get CaMeL Out CaMeL Edges ( ) . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 738
score: 99.84686902104592
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 738
score: 99.83897816051136
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL String ( ) ) ; } }
rank: 738
score: 99.82597236223118
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == Branch . UNCOND ) ;
rank: 738
score: 99.81785194546569
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; break ; }
rank: 738
score: 99.80706988324175
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 738
score: 99.78869047619048
patch: if ( n . get CaMeL Parent ( ) != null ) { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 739
score: 99.85517578125
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 739
score: 99.84032654494382
patch: final if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 739
score: 99.82596261160714
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge != null >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 739
score: 99.80705618351064
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else
rank: 739
score: 99.78868777252907
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 740
score: 99.85431662570225
patch: } else if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 740
score: 99.84683719758064
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 740
score: 99.84029947916666
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ! out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 740
score: 99.83894856770833
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 740
score: 99.82594499684343
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL Next ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ) ; }
rank: 740
score: 99.8069993622449
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . BLOCK ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 740
score: 99.7886738679847
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return n . get CaMeL Destination ( ) . get CaMeL Value ( ) ;
rank: 741
score: 99.85495529961341
patch: if ( g CaMeL Node . get CaMeL Out ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } }
rank: 741
score: 99.84029047539893
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; out CaMeL Edges . add ( g CaMeL Node ) ;
rank: 741
score: 99.83894667514535
patch: if ( n != null && n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 741
score: 99.81783279718137
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } ; }
rank: 741
score: 99.81269951276882
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 741
score: 99.8069443121189
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 741
score: 99.788671875
patch: if ( n . get CaMeL Parent ( ) == null ) { Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 742
score: 99.84683264307229
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 742
score: 99.84020182291667
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 742
score: 99.82584635416667
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 1 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 742
score: 99.80691453887195
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , ) ; }
rank: 742
score: 99.78865913722827
patch: if ( n . get CaMeL Parent ( ) != null ) { Node < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 743
score: 99.8548808195153
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 743
score: 99.85428659539474
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null ) { out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 743
score: 99.84019252232143
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 743
score: 99.83890206473214
patch: if ( out . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 743
score: 99.82584635416667
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 743
score: 99.81770833333333
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , n ) ; }
rank: 743
score: 99.80683979235198
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 744
score: 99.85486469072166
patch: if ( g CaMeL Node . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } }
rank: 744
score: 99.84010912024456
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ) ; }
rank: 744
score: 99.83887828480114
patch: while ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } }
rank: 744
score: 99.82579320790816
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) . get CaMeL Type ( ) != Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 744
score: 99.81263950892857
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 744
score: 99.80680159684066
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get ( ) ) ; }
rank: 744
score: 99.7886379076087
patch: if ( n instanceof Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 745
score: 99.85425372456395
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } ) ;
rank: 745
score: 99.84678248355263
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } finally { out CaMeL Edges . clear ( ) ; } }
rank: 745
score: 99.84006523840206
patch: List out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 745
score: 99.83885450487013
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) , n ) ; }
rank: 745
score: 99.81763174019608
patch: List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , n ) ; }
rank: 745
score: 99.81261743473101
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 745
score: 99.80660912298387
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 745
score: 99.7886365525266
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return n ; } }
rank: 746
score: 99.85469933712122
patch: if ( n . get CaMeL Parent ( ) == null && g CaMeL Node . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 746
score: 99.85424547697369
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 746
score: 99.84677833017676
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 746
score: 99.8388338955966
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; while ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 746
score: 99.82572901526163
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 746
score: 99.81756122295673
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 746
score: 99.8125965831044
patch: if ( n . get CaMeL Parent ( ) == null ) { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 746
score: 99.80657087053571
patch: if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Type ( ) == Token . BLOCK ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 746
score: 99.78862147177419
patch: try { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 747
score: 99.85469148596938
patch: if ( n . get CaMeL Parent ( ) == null && g CaMeL Node . get CaMeL Out ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 747
score: 99.85424262152777
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 747
score: 99.83882279829545
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( 0 == out CaMeL Edges . size ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 747
score: 99.8257134885204
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . BLOCK ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 747
score: 99.81755347390776
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } }
rank: 747
score: 99.81256904987374
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 747
score: 99.80654425370066
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 747
score: 99.78861952319588
patch: if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 748
score: 99.85467529296875
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) < 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 748
score: 99.85423463255495
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } }
rank: 748
score: 99.83998766447368
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 748
score: 99.83881170099431
patch: if ( n . get CaMeL Parent ( ) == null ) { Node < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } }
rank: 748
score: 99.82568895947803
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 748
score: 99.81745186237374
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 748
score: 99.80642599587912
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 748
score: 99.78858483355978
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 749
score: 99.854658203125
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 749
score: 99.85422092013889
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 749
score: 99.8388076410061
patch: synchronized ( n ) { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } } }
rank: 749
score: 99.8256591796875
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 749
score: 99.81255744485294
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 750
score: 99.8542146381579
patch: if ( n . get CaMeL Parent ( ) != null && n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 750
score: 99.84675016108247
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 750
score: 99.83983357747395
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 750
score: 99.83880615234375
patch: if ( n . get CaMeL Parent ( ) == null ) { Node < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 750
score: 99.82565842461341
patch: if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else
rank: 750
score: 99.81739331317205
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 750
score: 99.81254497327302
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ;
rank: 750
score: 99.78853969381314
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 751
score: 99.8545744243421
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 751
score: 99.85418495435393
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 751
score: 99.83982382015306
patch: List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 751
score: 99.83880060369319
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; while ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } }
rank: 751
score: 99.82564952761628
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 751
score: 99.81252146291209
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 751
score: 99.80630794986264
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 751
score: 99.78853175951087
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 752
score: 99.84671914457071
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 752
score: 99.83880060369319
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 752
score: 99.82562457074175
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 752
score: 99.80626763237848
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 752
score: 99.7885259271978
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else return n ;
rank: 753
score: 99.85418146306819
patch: if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 753
score: 99.83879825367647
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; }
rank: 753
score: 99.8124404535061
patch: if ( n == null ) { return null ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 754
score: 99.85451274671053
patch: if ( n . get CaMeL Out ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 754
score: 99.85417872299382
patch: / * if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 754
score: 99.83966818820225
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 754
score: 99.83878769985465
patch: if ( n . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 754
score: 99.82559058779762
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 754
score: 99.817275390625
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 754
score: 99.80615844726563
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null ) { out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 754
score: 99.78848071808511
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 755
score: 99.85417063643293
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 755
score: 99.84665912828947
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } }
rank: 755
score: 99.8255724009901
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 755
score: 99.81725260416667
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 755
score: 99.80614697802197
patch: if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 755
score: 99.78846396169355
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ;
rank: 756
score: 99.85442171391753
patch: if ( g CaMeL Node . get CaMeL Out CaMeL Edges ( ) . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 756
score: 99.85417024381869
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } } } } }
rank: 756
score: 99.83959056712963
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 756
score: 99.83877786775915
patch: if ( n . get CaMeL Node ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 756
score: 99.8254930449695
patch: if ( g CaMeL Node . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 756
score: 99.81723777846534
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 756
score: 99.8123410247093
patch: if ( n . has CaMeL Children ( ) ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 756
score: 99.80611559139786
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 756
score: 99.78844197591145
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 757
score: 99.85431518554688
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 757
score: 99.85414817116477
patch: / * if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } }
rank: 757
score: 99.84661800986842
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 757
score: 99.83877786775915
patch: if ( n . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 757
score: 99.82548595610119
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( g CaMeL Node == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 757
score: 99.81717819940476
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> g CaMeL Node = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 757
score: 99.805927734375
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) . get CaMeL Destination ( ) ) ; }
rank: 757
score: 99.78842608848315
patch: try { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 758
score: 99.85424547697369
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } }
rank: 758
score: 99.85413804945055
patch: } if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 758
score: 99.8394839638158
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 758
score: 99.83876731178977
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } } }
rank: 758
score: 99.82547593390805
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 758
score: 99.81232966933139
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { break ; } if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 758
score: 99.805830078125
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ) ; }
rank: 758
score: 99.78842561141305
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 759
score: 99.8541796875
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 759
score: 99.85412731799451
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 759
score: 99.84658717105263
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null ) { out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 759
score: 99.83947223165761
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 759
score: 99.83872599774097
patch: while ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 759
score: 99.82547433035714
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 759
score: 99.81705729166667
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) , n ) ; }
rank: 759
score: 99.81229440789474
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 759
score: 99.80576529153963
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , n ) ;
rank: 760
score: 99.85411416330645
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) < 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 760
score: 99.82542509191177
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 760
score: 99.81702938988096
patch: if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 760
score: 99.80568192644817
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 760
score: 99.7884012858073
patch: if ( n . get CaMeL Parent ( ) != null ) { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 761
score: 99.83939070554123
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 761
score: 99.82540802908416
patch: if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL Next ( ) ) ) ;
rank: 761
score: 99.81702506188118
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 761
score: 99.81227463942308
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 761
score: 99.80565795898437
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 761
score: 99.78839666193181
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . get ( 0 ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 762
score: 99.85409691220238
patch: / * if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 762
score: 99.85399154469937
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return ( Di CaMeL Graph CaMeL Edge < Node , Branch >> ) out CaMeL Edges . get ( 0 ) ; } }
rank: 762
score: 99.838623046875
patch: if ( parent . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 762
score: 99.81697671720298
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ! out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 762
score: 99.81226490162037
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 762
score: 99.80563289561171
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; }
rank: 762
score: 99.78835130774456
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 763
score: 99.8540686182229
patch: / * if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 763
score: 99.85382729388297
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get ( 0 ) . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 763
score: 99.838623046875
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , n ) ;
rank: 763
score: 99.82535013338415
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 763
score: 99.81688290550595
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) {
rank: 763
score: 99.80559260670732
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 763
score: 99.78834928019663
patch: switch ( n . get CaMeL Type ( ) ) { case Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 764
score: 99.85405939275569
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } } } }
rank: 764
score: 99.8465666118421
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 764
score: 99.83920257260101
patch: List out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 764
score: 99.83861678685898
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } } else {
rank: 764
score: 99.82533001077586
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 1 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 764
score: 99.81686068997524
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 764
score: 99.81221648185483
patch: List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 764
score: 99.80558005712365
patch: if ( n . get CaMeL Parent ( ) . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 764
score: 99.78833254419192
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 765
score: 99.8536885579427
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } ) ;
rank: 765
score: 99.84654169497283
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 765
score: 99.83860719358766
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 765
score: 99.82532958984375
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 765
score: 99.81216732486264
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 766
score: 99.8534765625
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 766
score: 99.8464992357337
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 766
score: 99.8385694550305
patch: if ( n . get CaMeL Parent ( ) == null ) { Node < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 766
score: 99.82532169117647
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 1 ) . get CaMeL Value ( ) == Branch . UNCOND ) ;
rank: 766
score: 99.81675502232143
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else switch ( n . get CaMeL Type ( ) ) {
rank: 766
score: 99.81216517857143
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 766
score: 99.8055133584105
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 766
score: 99.78828761888587
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { break ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) {
rank: 767
score: 99.85404231039325
patch: if ( n . get CaMeL Parent ( ) . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 767
score: 99.84647409539474
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 1 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 767
score: 99.82525024414062
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 1 ) . get CaMeL Value ( ) ) ;
rank: 767
score: 99.816748046875
patch: Di CaMeL Graph CaMeL Node < Node , Integer >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 767
score: 99.81212086397059
patch: if ( n . has CaMeL Children ( ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 767
score: 99.78828125
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 768
score: 99.85403575067934
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; for ( Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 768
score: 99.84646606445312
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 768
score: 99.83900528724747
patch: List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 768
score: 99.83851841517857
patch: if ( n . get CaMeL Parent ( ) == null ) { try { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 768
score: 99.812109375
patch: if ( g CaMeL Node == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 768
score: 99.80525626717034
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 768
score: 99.7882770040761
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { throw try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 769
score: 99.85403575067934
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 769
score: 99.83900390625
patch: List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 769
score: 99.83844064295977
patch: if ( n . get CaMeL Parent ( ) == null ) { Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 769
score: 99.8251953125
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) == Branch . UNCOND ) ;
rank: 769
score: 99.80521253360214
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , ) ;
rank: 769
score: 99.78827676005747
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) {
rank: 770
score: 99.85400965073529
patch: } else { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 770
score: 99.85324657206633
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 770
score: 99.84644294507575
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 770
score: 99.83899456521739
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching (
rank: 770
score: 99.83843597808442
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 770
score: 99.82513552295919
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Directed CaMeL Graph CaMeL Node ( 0 ) . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 770
score: 99.81207334648059
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 770
score: 99.80514526367188
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 770
score: 99.78822858146067
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 771
score: 99.85399854052197
patch: try { if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 771
score: 99.85318667763158
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) <= 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } }
rank: 771
score: 99.84643035239361
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 771
score: 99.8388671875
patch: return if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 771
score: 99.838427734375
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } } } }
rank: 771
score: 99.81656901041667
patch: List < Di CaMeL Graph CaMeL Edge [ ] , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 771
score: 99.81199749696601
patch: g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 771
score: 99.78822393002717
patch: if ( n . get CaMeL Parent ( ) != null ) { Node < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 772
score: 99.84642767137096
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } }
rank: 772
score: 99.83881736288265
patch: List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 772
score: 99.83840867949695
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 772
score: 99.82512732397151
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) == Branch . UNCOND ) ;
rank: 772
score: 99.8165625
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; }
rank: 772
score: 99.81194852941177
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 772
score: 99.8051249186198
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) != 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 772
score: 99.78821417297979
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { throw try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 773
score: 99.85393880208333
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ; } } } }
rank: 773
score: 99.84639616935483
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 773
score: 99.83838500976563
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 773
score: 99.82507765436748
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 773
score: 99.81656095297029
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 773
score: 99.81191986386139
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , ) ; }
rank: 773
score: 99.78820219494048
patch: if ( n . get CaMeL Parent ( ) != null ) { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 774
score: 99.85391268887362
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return out CaMeL Edges . get ( 0 ) ; } }
rank: 774
score: 99.846357421875
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 774
score: 99.83871771364795
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; } }
rank: 774
score: 99.83836082175925
patch: while ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 774
score: 99.82501148897059
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == Branch . UNCOND ) ;
rank: 774
score: 99.81647135416667
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , n ) ;
rank: 774
score: 99.81191526813272
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 774
score: 99.7881390115489
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 775
score: 99.85391090029762
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 775
score: 99.85282389322917
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } ) ;
rank: 775
score: 99.83834913300305
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 775
score: 99.81646603954081
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; } }
rank: 775
score: 99.78812539457071
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 776
score: 99.85390625
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } } ) ;
rank: 776
score: 99.85273034793815
patch: if ( g CaMeL Node . get CaMeL Out ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 776
score: 99.83833508613782
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 776
score: 99.82479440789474
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 776
score: 99.81643708881579
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 776
score: 99.80493421052631
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 777
score: 99.85387573242187
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } } }
rank: 777
score: 99.85271567486703
patch: if ( g CaMeL Node . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 777
score: 99.83842615927419
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 777
score: 99.83827427455357
patch: if ( g CaMeL Node . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 777
score: 99.82478444169207
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 777
score: 99.81170726102941
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 777
score: 99.80481573547979
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) . get CaMeL Destination ( ) ) ;
rank: 777
score: 99.78805634469697
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 778
score: 99.85387264784946
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } } } }
rank: 778
score: 99.83837365591398
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = get CaMeL Out CaMeL Edges ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 778
score: 99.83827333192568
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ;
rank: 778
score: 99.82477247100516
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ) ;
rank: 778
score: 99.80452302631579
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else {
rank: 778
score: 99.78805338541666
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 779
score: 99.85385237068965
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 779
score: 99.83829538445724
patch: if ( out == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 779
score: 99.82470178091398
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 779
score: 99.81636082848837
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 779
score: 99.81165443978658
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 779
score: 99.80445218373494
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else {
rank: 779
score: 99.78804393481182
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 780
score: 99.83823859554597
patch: if ( n . get CaMeL Parent ( ) == null ) { try { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 780
score: 99.83813159496754
patch: if ( out != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 780
score: 99.82467886117789
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 780
score: 99.81635790532178
patch: List < String >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 781
score: 99.85246858891753
patch: if ( g CaMeL Node . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 781
score: 99.83821614583333
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) , n . get CaMeL Value ( ) ) ; } }
rank: 781
score: 99.83809621710526
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 781
score: 99.82461402529762
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 781
score: 99.81633040048544
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 781
score: 99.78799532860825
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { break ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 782
score: 99.85383756868131
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 782
score: 99.84622257313829
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 782
score: 99.83801879882813
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 782
score: 99.82458639705882
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges , g CaMeL Node . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 782
score: 99.81631540697674
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge [ ] , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 782
score: 99.81148357780613
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 782
score: 99.8044192135989
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . get ( 0 ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 782
score: 99.78794942876344
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) , ) ;
rank: 783
score: 99.85381789434524
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ; }
rank: 783
score: 99.852177734375
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Type ( ) ) ; } }
rank: 783
score: 99.83817784926471
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 783
score: 99.83791035353535
patch: List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 783
score: 99.82454833984374
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 1 ) . get CaMeL Value ( ) ) ;
rank: 783
score: 99.8163066007653
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 783
score: 99.81139081790124
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 783
score: 99.7879269622093
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return n ; }
rank: 784
score: 99.84620202105978
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) , g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ) ; }
rank: 784
score: 99.83814697265625
patch: if ( n . get CaMeL Parent ( ) == null ) List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 784
score: 99.82433143028847
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 784
score: 99.81627801452021
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 784
score: 99.81137173847087
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 785
score: 99.85381525213069
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } } ) ;
rank: 785
score: 99.82432725694444
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 785
score: 99.81627261513158
patch: if ( n . get CaMeL Parent ( ) == null ) { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 785
score: 99.81130514705882
patch: if ( n . has CaMeL Children ( ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 785
score: 99.78788425611413
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) < 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 786
score: 99.85380859375
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 786
score: 99.84616570723684
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } }
rank: 786
score: 99.83810389727012
patch: if ( out . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 786
score: 99.82418387276786
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 786
score: 99.81129365808823
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 786
score: 99.80408653846153
patch: if ( n . get CaMeL Parent ( ) == null ) { if ( n . has CaMeL Children ( ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 786
score: 99.78786399147727
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return n ; } }
rank: 787
score: 99.85378994030899
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge <= Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 787
score: 99.84610829454788
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } finally { out CaMeL Edges . clear ( ) ; }
rank: 787
score: 99.8380859375
patch: if ( out . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 787
score: 99.83758921682099
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 787
score: 99.82408179306402
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == $NUMBER$ ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 787
score: 99.81618923611111
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; }
rank: 787
score: 99.81124105798193
patch: if ( g CaMeL Node . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 787
score: 99.80407036675348
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 787
score: 99.7878543814433
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 788
score: 99.85378689236111
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) <= 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } }
rank: 788
score: 99.85182222406915
patch: if ( g CaMeL Node . get CaMeL Out ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 788
score: 99.84610018887362
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 788
score: 99.83806501116071
patch: if ( n . get CaMeL Parent CaMeL Node ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 788
score: 99.83751687885803
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 788
score: 99.82405598958333
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 788
score: 99.816162109375
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 788
score: 99.81123955305233
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 788
score: 99.804013671875
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) . get CaMeL Value ( ) ) ; }
rank: 788
score: 99.78783660239361
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , ) ;
rank: 789
score: 99.85374418218085
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) . get CaMeL Value ( ) != null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 789
score: 99.84609587296195
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ) ; }
rank: 789
score: 99.83805338541667
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 789
score: 99.8375019929847
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 789
score: 99.82403132891415
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 789
score: 99.81611101017442
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; } }
rank: 789
score: 99.80377072704081
patch: if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . BLOCK ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 789
score: 99.78779409123563
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return n ;
rank: 790
score: 99.85374012212644
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 790
score: 99.84608968098958
patch: if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 790
score: 99.8380496002907
patch: while ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 790
score: 99.83748109879032
patch: List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 790
score: 99.78774068813131
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 791
score: 99.85368034638554
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 791
score: 99.85174753289473
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 791
score: 99.84608569587628
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 791
score: 99.83742859543011
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = get CaMeL Out CaMeL Edges ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 791
score: 99.81117211318598
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ! out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 792
score: 99.85366107047872
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ) ; }
rank: 792
score: 99.85162417763158
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 792
score: 99.84607319078947
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 792
score: 99.83799525669643
patch: if ( n != null ) { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } } }
rank: 792
score: 99.83736078789893
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) out CaMeL Edges . add ( g CaMeL Node ) ; }
rank: 792
score: 99.82386474609375
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 792
score: 99.81115337171053
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 792
score: 99.80355674342105
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 792
score: 99.78772503396739
patch: if ( n . get CaMeL Next ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 793
score: 99.85362413194444
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 793
score: 99.85160405585107
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ;
rank: 793
score: 99.83720189144736
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 793
score: 99.82383294753086
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) , ) ;
rank: 793
score: 99.81609637920673
patch: if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 793
score: 99.80350748697917
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 793
score: 99.78772350193299
patch: try { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 794
score: 99.84592141544118
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 794
score: 99.83795082405823
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 794
score: 99.82381604381443
patch: if ( n . get CaMeL Parent ( ) == null ) { { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 794
score: 99.81606783725248
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 794
score: 99.81111163403614
patch: if ( g CaMeL Node . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 794
score: 99.80350703983517
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } switch ( n . get CaMeL Type ( ) )
rank: 794
score: 99.78770862926136
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 795
score: 99.85357055664062
patch: } else if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 795
score: 99.84591775412088
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 795
score: 99.83793604651163
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 795
score: 99.83708207325269
patch: if ( n . get CaMeL Parent ( ) . get CaMeL Value ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 795
score: 99.8237537202381
patch: if ( ( g CaMeL Node == null ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 795
score: 99.80336216517857
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 795
score: 99.7876799508427
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { break ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 796
score: 99.85136114690722
patch: if ( g CaMeL Node . get CaMeL Out CaMeL Edges ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 796
score: 99.83790239081326
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; while ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 796
score: 99.83706858188292
patch: List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return null ; }
rank: 796
score: 99.82369384765624
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , ? >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 796
score: 99.80331636679293
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 796
score: 99.78767533735795
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 797
score: 99.84590657552083
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 797
score: 99.83790225074405
patch: else { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 797
score: 99.83697446842784
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 797
score: 99.81604243259804
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } * /
rank: 797
score: 99.81088005514705
patch: if ( n . get CaMeL Parent ( ) == null ) { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 797
score: 99.80321740591398
patch: if ( g CaMeL Node . get CaMeL Directed CaMeL Graph CaMeL Node ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 797
score: 99.78767163825758
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 1 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 798
score: 99.85106425382654
patch: if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 798
score: 99.84590076264881
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 798
score: 99.83790198037791
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge == Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 798
score: 99.83696899414062
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 798
score: 99.81601361146907
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 798
score: 99.81087239583333
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 798
score: 99.8030493951613
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 799
score: 99.853515625
patch: } } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 799
score: 99.85092877327128
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 799
score: 99.8378846703506
patch: while ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 799
score: 99.836826171875
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 799
score: 99.81598772321429
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 799
score: 99.81079826732673
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 799
score: 99.8030119243421
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 1 ) . get CaMeL Value ( ) ) ;
rank: 799
score: 99.7876613451087
patch: if ( n . get CaMeL Parent ( ) == null ) { Node < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 800
score: 99.85350512432795
patch: out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 800
score: 99.85090481505102
patch: if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 800
score: 99.84581030868902
patch: List < Di CaMeL Graph CaMeL Edge < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 800
score: 99.83784894245427
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 1 ) . get CaMeL Destination ( ) ) ; } }
rank: 800
score: 99.8367984169408
patch: if ( out == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 800
score: 99.82363746279762
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 800
score: 99.81595626531863
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 800
score: 99.81078330592105
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 800
score: 99.80299136513158
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; }
rank: 800
score: 99.78765869140625
patch: Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 801
score: 99.85348343063187
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } }
rank: 801
score: 99.85085499043367
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; }
rank: 801
score: 99.82356770833333
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , n ) ;
rank: 801
score: 99.81587530339806
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 801
score: 99.80287828947368
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) ) ;
rank: 801
score: 99.78760302197803
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 802
score: 99.85082267992425
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Name ( ) ) ; }
rank: 802
score: 99.8457853618421
patch: if ( n . get CaMeL Parent ( ) . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 802
score: 99.83671875
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 802
score: 99.82345145089286
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 802
score: 99.80274487567205
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; }
rank: 803
score: 99.85343881671348
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ; } }
rank: 803
score: 99.85080973307292
patch: if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 803
score: 99.84575244633838
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 803
score: 99.83778344131098
patch: if ( out . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 803
score: 99.83658203125
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Node ( ) ) ; } }
rank: 803
score: 99.82344970703124
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 803
score: 99.81585115131578
patch: List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 803
score: 99.80248503989361
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 803
score: 99.78757642663044
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 804
score: 99.85076904296875
patch: if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 804
score: 99.82344714506173
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 804
score: 99.81583848110465
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node [ ] , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 804
score: 99.80242985551075
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Parent ( ) . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 805
score: 99.85337456597222
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } }
rank: 805
score: 99.85069555165816
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ;
rank: 805
score: 99.84573719113372
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 805
score: 99.8377655773628
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } finally
rank: 805
score: 99.83636924342105
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 805
score: 99.82339514307229
patch: if ( g CaMeL Node == null ) { { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 805
score: 99.81067775451031
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 805
score: 99.7875339673913
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 806
score: 99.85336371527778
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 806
score: 99.8505859375
patch: if ( g CaMeL Node . get CaMeL Out CaMeL Edges ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 806
score: 99.83775634765625
patch: if ( n . get CaMeL Parent ( ) == null ) { try { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } } } }
rank: 806
score: 99.82329053217822
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == Branch . UNCOND ) ;
rank: 806
score: 99.81065219056373
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; }
rank: 806
score: 99.80224609375
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 807
score: 99.85333319024726
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } } }
rank: 807
score: 99.85033922697369
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) <= 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 807
score: 99.83775111607143
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } } else
rank: 807
score: 99.8363671875
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 807
score: 99.8232362328506
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 1 ) . get CaMeL Value ( ) ) ;
rank: 807
score: 99.81575843131188
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , n ) ;
rank: 807
score: 99.81057531856796
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , g CaMeL Node ) ) ;
rank: 807
score: 99.80192057291667
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node . Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 807
score: 99.78751380997475
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 808
score: 99.85333059210527
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( g CaMeL Node . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 808
score: 99.85024068813131
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node > out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 808
score: 99.83774928042763
patch: if ( out != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 808
score: 99.83635896381578
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { out CaMeL Edges . add ( g CaMeL Node ) ; }
rank: 808
score: 99.8157450358073
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 808
score: 99.81046645220589
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 808
score: 99.80191200657895
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) ) ;
rank: 809
score: 99.8502261513158
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 809
score: 99.84568319515306
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ) ; }
rank: 809
score: 99.83773766942771
patch: if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 809
score: 99.83626302083333
patch: if ( node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 809
score: 99.82319623161764
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 809
score: 99.8018400493421
patch: if ( n . get CaMeL Parent ( ) == null && n . has CaMeL Children ( ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 809
score: 99.78750610351562
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , ) ;
rank: 810
score: 99.85331618617958
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 810
score: 99.85010762117346
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ;
rank: 810
score: 99.84564208984375
patch: else if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } }
rank: 810
score: 99.83773766942771
patch: if ( n . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 810
score: 99.83625890031645
patch: if ( g CaMeL Node != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 810
score: 99.82319568452381
patch: if ( n == null && n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 810
score: 99.8157284007353
patch: List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 810
score: 99.8104646381579
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; }
rank: 810
score: 99.801806640625
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ) ; }
rank: 810
score: 99.78749194587628
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 811
score: 99.83771102729885
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 811
score: 99.83614751344086
patch: List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 811
score: 99.82312452936748
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 811
score: 99.81570041769803
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 811
score: 99.81040326286765
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; break ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 811
score: 99.80170530913979
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } } switch ( n . get CaMeL Type ( ) ) {
rank: 811
score: 99.78741164434524
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 812
score: 99.85329861111111
patch: / * / if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 812
score: 99.8456065418956
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 812
score: 99.83613891601563
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 812
score: 99.82312137564433
patch: if ( n . get CaMeL Parent ( ) == null ) { if ( n . has CaMeL Children ( ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 812
score: 99.81562732514881
patch: if ( n . has CaMeL Children ( ) ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 812
score: 99.80158980174731
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ; }
rank: 813
score: 99.8532951108871
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 813
score: 99.84999593098958
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 813
score: 99.83768665941456
patch: if ( n . get CaMeL Parent ( ) == null ) { try { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } } }
rank: 813
score: 99.83592699932795
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . to CaMeL String ( ) ) ; }
rank: 813
score: 99.82305090206185
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 813
score: 99.810263671875
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 1 ) . get CaMeL Destination ( ) ) ; }
rank: 813
score: 99.80157277960527
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 814
score: 99.85328311011905
patch: } else if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 814
score: 99.83767487281976
patch: if ( n . get CaMeL Parent ( ) . get CaMeL Value ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 814
score: 99.83591757015306
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else {
rank: 814
score: 99.81552269345238
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 814
score: 99.81023341049382
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 814
score: 99.78726720328282
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 815
score: 99.85326605902777
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 815
score: 99.8498912693299
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 815
score: 99.84552461357526
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 815
score: 99.82297422827745
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Node < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 815
score: 99.81552220394737
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 815
score: 99.8015372983871
patch: if ( n . get CaMeL Parent ( ) . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 816
score: 99.85325445130815
patch: if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } }
rank: 816
score: 99.84551487198796
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; }
rank: 816
score: 99.83762945130815
patch: if ( out . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 816
score: 99.83577127659575
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { out CaMeL Edges . add ( out CaMeL Edges ) ;
rank: 816
score: 99.82293009020619
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 816
score: 99.8154490253713
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , n ) ;
rank: 816
score: 99.8099844244462
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 816
score: 99.80151098901099
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && / out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 817
score: 99.8532193644663
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } } } ) ;
rank: 817
score: 99.84982860331633
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Name ( ) ) ;
rank: 817
score: 99.8455098470052
patch: List < Di CaMeL Graph CaMeL Edge < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ; }
rank: 817
score: 99.83761000359195
patch: if ( n . get CaMeL Parent ( ) != null ) List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 817
score: 99.83573035037878
patch: List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 817
score: 99.82292659108232
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 817
score: 99.81539176274272
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 817
score: 99.80992597415124
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 817
score: 99.80140078965054
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else if ( n . has CaMeL Children ( ) ) {
rank: 818
score: 99.84982860331633
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ;
rank: 818
score: 99.83759998139881
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 1 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 818
score: 99.8153793492268
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 818
score: 99.8098603805693
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 818
score: 99.8013671875
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 818
score: 99.7871981534091
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 819
score: 99.85320839185393
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; }
rank: 819
score: 99.849814453125
patch: if ( n . get CaMeL Parent ( ) == null && g CaMeL Node . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 819
score: 99.84548483455882
patch: if ( n . get CaMeL Parent ( ) == this ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 819
score: 99.83759884717988
patch: synchronized ( g CaMeL Node ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 819
score: 99.82285853794643
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 819
score: 99.81529103973766
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ! out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 819
score: 99.78717912946429
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Token > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 820
score: 99.84963957796391
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( g CaMeL Node . get CaMeL Out CaMeL Edges ( ) . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 820
score: 99.8454795745482
patch: / * if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 820
score: 99.83757934570312
patch: if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 820
score: 99.82284761679293
patch: if ( n . get CaMeL Parent ( ) == null || g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 820
score: 99.809765625
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ) ;
rank: 820
score: 99.80105426747312
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node . Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 821
score: 99.85313831676136
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 821
score: 99.84958859707447
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 821
score: 99.845458984375
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 821
score: 99.8375613190407
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 821
score: 99.81518796410892
patch: List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 821
score: 99.80975632440476
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 821
score: 99.80103556315105
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 821
score: 99.78714883207071
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ;
rank: 822
score: 99.84545036764706
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } * /
rank: 822
score: 99.83749166349085
patch: if ( node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 822
score: 99.83519195228494
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) {
rank: 822
score: 99.81513671875
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ; }
rank: 822
score: 99.80098260309278
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 823
score: 99.85312287703805
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( ) ; } }
rank: 823
score: 99.84922902960527
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ! try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 823
score: 99.84544921875
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Out CaMeL Edges ( ) ) ; }
rank: 823
score: 99.8374905873494
patch: if ( out . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 823
score: 99.8350616140464
patch: List out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 823
score: 99.822783203125
patch: switch ( n . get CaMeL Parent ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 823
score: 99.80964766398515
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 823
score: 99.78712073037791
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 824
score: 99.85309709821429
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 824
score: 99.83748152449324
patch: if ( out . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 824
score: 99.83497143817205
patch: List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 824
score: 99.82276812803399
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 824
score: 99.8151202815594
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node != null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 824
score: 99.80963936237374
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 824
score: 99.787109375
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , ) ;
rank: 825
score: 99.85308636675825
patch: } } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 825
score: 99.849140625
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . to CaMeL String ( ) ) ; } }
rank: 825
score: 99.8374255952381
patch: synchronized ( g CaMeL Node ) { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } } }
rank: 825
score: 99.8348897298177
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ;
rank: 826
score: 99.85305359543011
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 826
score: 99.84910116390306
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ;
rank: 826
score: 99.83741369912791
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 826
score: 99.83482442876344
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { out CaMeL Edges . size ( ) ; } }
rank: 826
score: 99.82268759645062
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) == Branch . UNCOND ) ;
rank: 826
score: 99.8150275735294
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } break ;
rank: 826
score: 99.80086525537635
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node . Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 826
score: 99.78708902994792
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 827
score: 99.85301571800595
patch: } } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 827
score: 99.84907126913265
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 827
score: 99.84542262300532
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 827
score: 99.83741369912791
patch: if ( n . get CaMeL Parent ( ) == null ) { return ) ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 827
score: 99.834755859375
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 827
score: 99.82267146915585
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 827
score: 99.80085320723684
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 1 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 827
score: 99.78702799479167
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { Node < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ;
rank: 828
score: 99.85300109206989
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = out CaMeL Edges . get ( 0 ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 828
score: 99.8489925986842
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) < 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } }
rank: 828
score: 99.84539733270202
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 828
score: 99.83740795617815
patch: if ( n . get CaMeL Parent ( ) == null ) { final Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } }
rank: 828
score: 99.83469082446808
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } else if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 828
score: 99.81495098039215
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; }
rank: 828
score: 99.80958193824405
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 828
score: 99.78698299632353
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } else { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 829
score: 99.84894172512755
patch: if ( n . get CaMeL Parent ( ) == null && g CaMeL Node . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 829
score: 99.84538424744898
patch: List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 829
score: 99.83737362132354
patch: if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } } }
rank: 829
score: 99.834560546875
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 829
score: 99.82257952008929
patch: if ( n . get ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 829
score: 99.80955868675595
patch: if ( n . get CaMeL Parent ( ) == null ) { Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 829
score: 99.80076132015306
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) . get CaMeL Type ( ) == Token . BLOCK ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 829
score: 99.78697311046511
patch: if ( n . get CaMeL Parent ( ) == null ) { try { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 830
score: 99.84881218112245
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ;
rank: 830
score: 99.8373722029321
patch: if ( n . get CaMeL Parent ( ) == null ) { Node < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 830
score: 99.81490885416666
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 830
score: 99.80946312881098
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ! out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 830
score: 99.80047112542229
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 830
score: 99.78695186491936
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 831
score: 99.85295266544118
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } }
rank: 831
score: 99.84877522786458
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 831
score: 99.84535435267857
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 831
score: 99.834384765625
patch: List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 831
score: 99.82249813988095
patch: if ( n . has CaMeL Children ( ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 831
score: 99.8148702973301
patch: List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 831
score: 99.800322265625
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , n . get CaMeL Next ( ) . get CaMeL Type ( ) ) ;
rank: 831
score: 99.78694136424731
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 832
score: 99.8529385653409
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; }
rank: 832
score: 99.84867393092105
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 832
score: 99.84533062177834
patch: List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 832
score: 99.834375
patch: if ( n . get CaMeL Parent ( ) . get CaMeL Value ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 832
score: 99.82247704574742
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 832
score: 99.81482319078947
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } }
rank: 832
score: 99.78691855244253
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 833
score: 99.8528988486842
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 833
score: 99.84867267219387
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; try
rank: 833
score: 99.84531048646907
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Out CaMeL Edges ( ) ) ; }
rank: 833
score: 99.83732397762346
patch: if ( n . get CaMeL Parent ( ) == null ) { final Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 833
score: 99.83436758306962
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 833
score: 99.82247488839286
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 833
score: 99.8093479269802
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ;
rank: 833
score: 99.80029810855264
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node . Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 834
score: 99.85283717105263
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 834
score: 99.83730111471037
patch: if ( n . get CaMeL Parent ( ) == null ) { final Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 834
score: 99.83433667919304
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return null ; }
rank: 834
score: 99.82245163690476
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 834
score: 99.81479153774752
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 834
score: 99.809345703125
patch: List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; }
rank: 834
score: 99.800263671875
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) . get CaMeL Value ( ) ) ; }
rank: 834
score: 99.78687633167614
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 835
score: 99.8528330813172
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ) ; } }
rank: 835
score: 99.848583984375
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 835
score: 99.84530222039474
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 835
score: 99.83730014534883
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 835
score: 99.83417179608585
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 835
score: 99.82243034638554
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 835
score: 99.81470911711165
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 835
score: 99.80007934570312
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 835
score: 99.78686785954301
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 836
score: 99.85282294694767
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 836
score: 99.84855227126289
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ;
rank: 836
score: 99.83729727056962
patch: if ( g CaMeL Node != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 836
score: 99.83404296875
patch: List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 836
score: 99.81468290441177
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ! out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 836
score: 99.8092884181701
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ) ;
rank: 836
score: 99.79999402104592
patch: if ( g CaMeL Node != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 836
score: 99.78684895833334
patch: if ( n . get CaMeL Parent ( ) == null ) { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 837
score: 99.85281956449468
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) . get CaMeL Value ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 837
score: 99.8485197368421
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 837
score: 99.8372866981908
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } else
rank: 837
score: 99.83394237231182
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) {
rank: 837
score: 99.82237413194444
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) == Branch . UNCOND ) ;
rank: 837
score: 99.80928793298193
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 837
score: 99.78682887300532
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 838
score: 99.84519974226804
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Out CaMeL Edges ( ) ) ; }
rank: 838
score: 99.83728637695313
patch: if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 838
score: 99.83378486223118
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 838
score: 99.82218017578126
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 838
score: 99.81434676670793
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 838
score: 99.80926828286083
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 838
score: 99.78678782393293
patch: Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 839
score: 99.85280106707317
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 839
score: 99.8483005798969
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ;
rank: 839
score: 99.82205420425258
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 839
score: 99.81434151785714
patch: Di CaMeL Graph CaMeL Node < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 839
score: 99.80925324675324
patch: if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 839
score: 99.79960123697917
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 839
score: 99.78676922401685
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , ) ;
rank: 840
score: 99.848232421875
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } }
rank: 840
score: 99.8372433684593
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 840
score: 99.83366871843434
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 840
score: 99.82195971385542
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == Branch . UNCOND ) ;
rank: 840
score: 99.80918451003086
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 840
score: 99.79958624588816
patch: if ( g CaMeL Node != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 840
score: 99.78676060267857
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { break ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 841
score: 99.852783203125
patch: } if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 841
score: 99.821943359375
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 841
score: 99.80915862438725
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ) ;
rank: 841
score: 99.7994140625
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ) ; }
rank: 841
score: 99.78672329215117
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 842
score: 99.84822425063776
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ;
rank: 842
score: 99.84508167613636
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ) ; } }
rank: 842
score: 99.83720590876437
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } } } }
rank: 842
score: 99.83359375
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 842
score: 99.82194213867187
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( $NUMBER$ ) . get CaMeL Value ( ) ) ;
rank: 842
score: 99.81421802662037
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 842
score: 99.80913521039604
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , ) ; }
rank: 842
score: 99.79939350328948
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Type ( ) ) ;
rank: 842
score: 99.7866365131579
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { break ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 843
score: 99.85275493421052
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 843
score: 99.84812942976804
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 843
score: 99.84505208333333
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ;
rank: 843
score: 99.82193811928353
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 843
score: 99.81421140160892
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ; }
rank: 843
score: 99.7993876139323
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; }
rank: 843
score: 99.78655133928571
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 844
score: 99.84502551020408
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . size ( ) ) ; }
rank: 844
score: 99.83720128676471
patch: if ( n . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 844
score: 99.83358347039474
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 844
score: 99.809013671875
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , ) ;
rank: 844
score: 99.79930623372395
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 845
score: 99.84798519736842
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Name ( ) ) ; } } }
rank: 845
score: 99.84501852448453
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 845
score: 99.83718345905173
patch: if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 845
score: 99.81413717830883
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 845
score: 99.80896577380952
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 845
score: 99.79924958881578
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else {
rank: 845
score: 99.78651685393258
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else {
rank: 846
score: 99.85269657258064
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 846
score: 99.847900390625
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ! try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 846
score: 99.84498541039157
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 846
score: 99.837158203125
patch: if ( n . get CaMeL Parent ( ) == null ) { try { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 846
score: 99.83349084341398
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Node ( ) ) ; }
rank: 846
score: 99.8216655685241
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , ) ;
rank: 846
score: 99.8141338641827
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , g CaMeL Node ) ; }
rank: 846
score: 99.79915364583333
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ) ; }
rank: 846
score: 99.78643663194444
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return n . get CaMeL Destination ( ) . get CaMeL Value ( ) ; }
rank: 847
score: 99.85267073384831
patch: } if ( n . get CaMeL Parent ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 847
score: 99.847783203125
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 847
score: 99.84494805090206
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 847
score: 99.833271484375
patch: List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 847
score: 99.82164242393092
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 847
score: 99.80881395526961
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; }
rank: 847
score: 99.7991056743421
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( null ) ;
rank: 847
score: 99.78641887626263
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 848
score: 99.84774685889175
patch: Di CaMeL Graph CaMeL Edge out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 848
score: 99.83712086397058
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 848
score: 99.821640625
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 848
score: 99.81402803308823
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ! out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 848
score: 99.80879870756173
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 848
score: 99.78641343390805
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { break ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 849
score: 99.84762573242188
patch: out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 849
score: 99.84493371212122
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ) ; }
rank: 849
score: 99.83710488505747
patch: synchronized ( n ) { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 849
score: 99.83319284539473
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 849
score: 99.81396949404763
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 849
score: 99.80871140813252
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 849
score: 99.7990234375
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) . get CaMeL Destination ( ) ) ; }
rank: 849
score: 99.78639398619185
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( n . get CaMeL Parent ( ) == null ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 850
score: 99.84759584407216
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 850
score: 99.84491557459677
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 850
score: 99.83710488505747
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . to CaMeL String ( ) ) ; }
rank: 850
score: 99.83308919270833
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 850
score: 99.82158320783132
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 850
score: 99.81392299107142
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 850
score: 99.80868765024039
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , g CaMeL Node ) ) ; }
rank: 850
score: 99.79893092105263
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Type ( ) ) ;
rank: 850
score: 99.78636955492425
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 )
rank: 851
score: 99.85262990552326
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } }
rank: 851
score: 99.83708243534483
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 851
score: 99.81390625
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) < 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 851
score: 99.79892578125
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , ) ) ;
rank: 851
score: 99.7863537016369
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } else { return n ; }
rank: 852
score: 99.85262886135058
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 852
score: 99.84745896464646
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ; }
rank: 852
score: 99.8448486328125
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 852
score: 99.83706292873475
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 852
score: 99.83301798502605
patch: List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 852
score: 99.81388346354167
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ! out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 852
score: 99.80867745535714
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ;
rank: 852
score: 99.79883840460526
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 853
score: 99.85260489817416
patch: if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 853
score: 99.84741981907895
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . is CaMeL Empty ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } }
rank: 853
score: 99.84482876090117
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && ( out CaMeL Edges . size ( ) == 1 ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 853
score: 99.82134946842784
patch: if ( n . get CaMeL Parent ( ) == null || g CaMeL Node . has CaMeL Children ( ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 854
score: 99.85255962171053
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } } }
rank: 854
score: 99.8472391764323
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 854
score: 99.84482421875
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 854
score: 99.83703002929687
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 854
score: 99.83296795280613
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ; }
rank: 854
score: 99.8212890625
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { throw try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 854
score: 99.81370879382622
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 854
score: 99.79871622721355
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 854
score: 99.78630118534483
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 855
score: 99.84718789859694
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 855
score: 99.83702328330592
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 855
score: 99.83296625664893
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) out CaMeL Edges . add ( out CaMeL Edges ) ; }
rank: 855
score: 99.82123413085938
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == $NUMBER$ ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 855
score: 99.8135762117347
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 855
score: 99.80836123511905
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 855
score: 99.79827302631578
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 1 ) . get CaMeL Destination ( ) ) ;
rank: 855
score: 99.78626104797979
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 1 ) . get CaMeL Destination ( ) ) ;
rank: 856
score: 99.8525390625
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 856
score: 99.84715317234848
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 856
score: 99.84479703608247
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) ) ; } }
rank: 856
score: 99.82114514802632
patch: if ( g CaMeL Node == null || g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 856
score: 99.81357520517676
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> g CaMeL Node = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 856
score: 99.80834263392858
patch: List < Di CaMeL Graph < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 856
score: 99.7862215909091
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 857
score: 99.85252743675595
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } } }
rank: 857
score: 99.84713344381314
patch: if ( g CaMeL Node . get CaMeL Out CaMeL Edges ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 857
score: 99.8447265625
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } } * /
rank: 857
score: 99.8328145345052
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { out CaMeL Edges . add ( g CaMeL Node ) ; } }
rank: 857
score: 99.81357230392157
patch: List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } ; }
rank: 857
score: 99.80830078125
patch: case Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 857
score: 99.79818040497449
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node . Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } switch ( n . get CaMeL Type ( ) ) {
rank: 857
score: 99.78607603561046
patch: if ( g CaMeL Node != null ) { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 858
score: 99.84679805871212
patch: if ( n . get CaMeL Parent ( ) == null && g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 858
score: 99.83689053087349
patch: if ( n != null ) { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 858
score: 99.83275390625
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ) ; } else {
rank: 859
score: 99.85245768229167
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 859
score: 99.84642059948979
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 859
score: 99.8446756998698
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . size ( ) ) ; } } }
rank: 859
score: 99.8324896364796
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 859
score: 99.82092598157051
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 859
score: 99.81341967536407
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 859
score: 99.80828125
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , ) ;
rank: 859
score: 99.79784128289474
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 860
score: 99.84602179276315
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 860
score: 99.83240375322166
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 860
score: 99.820849609375
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Branch . UNCOND ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 860
score: 99.81334635416667
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 860
score: 99.80825433498475
patch: if ( n == null ) { break ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 860
score: 99.7977384868421
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( this ) ;
rank: 860
score: 99.78604600694445
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } else { return n ; }
rank: 861
score: 99.84579564144737
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) < 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 861
score: 99.83674568965517
patch: while ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; }
rank: 861
score: 99.83234831574676
patch: if ( out == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 861
score: 99.82077100800305
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 861
score: 99.8082538073576
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 861
score: 99.78603515625
patch: Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 862
score: 99.8522450436828
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ; } } } }
rank: 862
score: 99.84561251610825
patch: out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 862
score: 99.84455180921053
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 862
score: 99.83219401041667
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( ) ; } }
rank: 862
score: 99.8207360692771
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 862
score: 99.81328876201923
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 862
score: 99.79755463471284
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 862
score: 99.78602056393679
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 863
score: 99.84561060855263
patch: while ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } }
rank: 863
score: 99.84450507409794
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 863
score: 99.83671374198718
patch: else if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } } }
rank: 863
score: 99.8321533203125
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } else {
rank: 863
score: 99.82069702148438
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 863
score: 99.81327550551471
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } ; }
rank: 863
score: 99.80809036726804
patch: if ( n . get CaMeL Parent ( ) != null && n . get CaMeL Next ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 863
score: 99.79752939755154
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node . Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ;
rank: 863
score: 99.78599811422414
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( $STRING$ ) ) ;
rank: 864
score: 99.84560139973958
patch: if ( g CaMeL Node . get CaMeL Out CaMeL Edges ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 864
score: 99.84448982007575
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 864
score: 99.82065943667763
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ;
rank: 864
score: 99.81327351485149
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } ;
rank: 864
score: 99.78597919592697
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ;
rank: 865
score: 99.83201047207447
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return out CaMeL Edges . get ( 0 ) ; }
rank: 865
score: 99.82063466494846
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ;
rank: 865
score: 99.81323493878865
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 865
score: 99.808076171875
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ; }
rank: 865
score: 99.79729646381578
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 1 ) . get CaMeL Destination ( ) ) ;
rank: 865
score: 99.78594680059524
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 866
score: 99.84539421237245
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ;
rank: 866
score: 99.84430653561827
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 866
score: 99.83662221623563
patch: if ( node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 866
score: 99.82063116776315
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , n . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 866
score: 99.81322763480392
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } ; }
rank: 866
score: 99.807958984375
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 866
score: 99.79717702963917
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node . Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 866
score: 99.78594581117021
patch: if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 867
score: 99.85216703869048
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 867
score: 99.84530855429293
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Type ( ) ) ; }
rank: 867
score: 99.84429807079081
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 867
score: 99.83658854166667
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 867
score: 99.83196957236842
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 867
score: 99.82062459729381
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Directed CaMeL Graph CaMeL Node ( ) . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 867
score: 99.81318264563107
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 867
score: 99.80795627170139
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 867
score: 99.7970479329427
patch: if ( g CaMeL Node != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ) ; }
rank: 867
score: 99.78590425531915
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , n ) ;
rank: 868
score: 99.85214003696237
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 868
score: 99.84527021585052
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ;
rank: 868
score: 99.83656869283537
patch: if ( g CaMeL Node != null ) { List < Di CaMeL Graph CaMeL Edge , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 868
score: 99.83194064110825
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 868
score: 99.82056419136597
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , ) ;
rank: 868
score: 99.79697672526042
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 868
score: 99.78576944040698
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 869
score: 99.84419759114583
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 869
score: 99.83656204578489
patch: if ( n != null ) { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 869
score: 99.83192845394737
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 869
score: 99.82054227941177
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == Branch . UNCOND ) ;
rank: 869
score: 99.8130478277439
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 869
score: 99.80791133283132
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 869
score: 99.79688517252605
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 869
score: 99.78570963541667
patch: if ( n . get CaMeL Parent ( ) != null ) { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 870
score: 99.84496572066327
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ;
rank: 870
score: 99.84418633643617
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 870
score: 99.83652223186728
patch: if ( out . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 870
score: 99.83192163584184
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 870
score: 99.82054004854369
patch: if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 870
score: 99.8130181760204
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; }
rank: 870
score: 99.80786887886597
patch: if ( n . get CaMeL Parent ( ) != null || n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 870
score: 99.79686513573232
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 870
score: 99.78570772058823
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , n ) ;
rank: 871
score: 99.8441796875
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 871
score: 99.83649723704268
patch: else if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 871
score: 99.83172286184211
patch: List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 871
score: 99.82052521658416
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 871
score: 99.81301245358911
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 871
score: 99.80780089727723
patch: Di CaMeL Graph CaMeL Node < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 871
score: 99.79685444078947
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( true ) ;
rank: 871
score: 99.7855962396978
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 872
score: 99.8447564572704
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 872
score: 99.84415516954788
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } } }
rank: 872
score: 99.83648751795977
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) ) ; } }
rank: 872
score: 99.831416015625
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 872
score: 99.8204889871988
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) == Branch . UNCOND ) ;
rank: 872
score: 99.81296410891089
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; break ;
rank: 872
score: 99.79649861653645
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node . Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 872
score: 99.78556504360465
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 873
score: 99.84463595360825
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } }
rank: 873
score: 99.84414478058511
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null ) { out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 873
score: 99.83648681640625
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get ( 0 ) ) ; }
rank: 873
score: 99.831328125
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 873
score: 99.8077936746988
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 873
score: 99.79649242912372
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) , out CaMeL Edges ) ;
rank: 873
score: 99.78549855025773
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 874
score: 99.85200858410494
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = out CaMeL Edges . get ( 0 ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 874
score: 99.8446044921875
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } } else {
rank: 874
score: 99.82045471783981
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 874
score: 99.80774661144578
patch: if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 874
score: 99.79634046052631
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 875
score: 99.85196659482759
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 )
rank: 875
score: 99.84457708864795
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Type ( ) ) ;
rank: 875
score: 99.83647228422619
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , n ) ; } }
rank: 875
score: 99.83128865559895
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; }
rank: 875
score: 99.82042324420104
patch: else if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 875
score: 99.81284808168317
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 875
score: 99.79617309570312
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node . Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 875
score: 99.7854884826031
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) ) ;
rank: 876
score: 99.85190533577128
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ; } }
rank: 876
score: 99.84457236842105
patch: if ( n . get CaMeL Parent ( ) == n ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } }
rank: 876
score: 99.84405891262755
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 876
score: 99.83126027960526
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 876
score: 99.8203369140625
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 1 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 876
score: 99.81278443567962
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 876
score: 99.78544821198453
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( )
rank: 877
score: 99.85189819335938
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 877
score: 99.84452097039474
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } }
rank: 877
score: 99.8364538433908
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; while ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 877
score: 99.83125
patch: List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 877
score: 99.82031876001602
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) , n ) ;
rank: 877
score: 99.81276807598039
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL First CaMeL Child ( ) ) ; }
rank: 877
score: 99.80757499035494
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; }
rank: 877
score: 99.79603653724747
patch: if ( n . has CaMeL Children ( ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 878
score: 99.85188802083333
patch: / * if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 878
score: 99.8443667763158
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } } }
rank: 878
score: 99.83643139367815
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } } }
rank: 878
score: 99.8312223800505
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ; } }
rank: 878
score: 99.82026427469135
patch: if ( n . get CaMeL Parent ( ) == null ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 878
score: 99.81275390625
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 878
score: 99.8075495049505
patch: else { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 878
score: 99.7852596507353
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return n ; } }
rank: 879
score: 99.85184063488924
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 879
score: 99.84432385631443
patch: if ( n . get CaMeL Parent ( ) == null && out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 879
score: 99.83642016882185
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) return return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 879
score: 99.83108552631579
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . to CaMeL String ( ) ) ; } } }
rank: 879
score: 99.82017211914062
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 879
score: 99.8127223855198
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ;
rank: 879
score: 99.78523482399426
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , ) ;
rank: 880
score: 99.85183261303192
patch: out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 880
score: 99.8440234375
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 880
score: 99.83639171511628
patch: if ( node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 880
score: 99.82016225961539
patch: if ( g CaMeL Node == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 880
score: 99.795458984375
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) , ) ;
rank: 880
score: 99.78515625
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return n ; } }
rank: 881
score: 99.85181451612904
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 881
score: 99.8442681760204
patch: List < Di CaMeL Graph CaMeL Edge >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ;
rank: 881
score: 99.844013671875
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 881
score: 99.831005859375
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 881
score: 99.8201617959105
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 881
score: 99.81265782828282
patch: Di CaMeL Graph CaMeL Node < Node , Integer >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 881
score: 99.80745246611446
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 881
score: 99.79526110197368
patch: if ( g CaMeL Node . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 881
score: 99.78509812127976
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Token >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 882
score: 99.85174418604652
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 882
score: 99.84416852678571
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ! try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 882
score: 99.83636900436046
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 882
score: 99.82011912128714
patch: if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ;
rank: 882
score: 99.81258236069277
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 882
score: 99.80744047619048
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) == Branch . UNCOND ) ; }
rank: 883
score: 99.8517433449074
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } } }
rank: 883
score: 99.84390419407895
patch: / * if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 883
score: 99.83633493822674
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL String ( ) ) ;
rank: 883
score: 99.83080808080808
patch: List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 883
score: 99.8201124811747
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 883
score: 99.80741583440722
patch: if ( n . get CaMeL Parent ( ) == null || n . has CaMeL Children ( ) ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 883
score: 99.794990234375
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , ) ) ;
rank: 883
score: 99.78506469726562
patch: if ( n != null ) { Node < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 884
score: 99.85169900873656
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ) ; } }
rank: 884
score: 99.8440275493421
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL String ( ) ) ; } } }
rank: 884
score: 99.84389700940861
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null ) { out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 884
score: 99.83632070806962
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } } }
rank: 884
score: 99.83075657894737
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 884
score: 99.81995006443299
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 884
score: 99.81250930059524
patch: List < Token >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 884
score: 99.7948919802296
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 884
score: 99.78503134084302
patch: if ( n != null ) { Node < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 885
score: 99.84391447368421
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } else {
rank: 885
score: 99.84389094716495
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . to CaMeL Array ( ) ) ; } }
rank: 885
score: 99.83631914511494
patch: if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 885
score: 99.81985740291262
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 885
score: 99.80732783564815
patch: if ( n . get CaMeL Parent ( ) == null ) { try { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 885
score: 99.79489135742188
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) . get CaMeL Value ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 886
score: 99.8438720703125
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 886
score: 99.84364720394737
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; } } }
rank: 886
score: 99.83623657226562
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 886
score: 99.83060546875
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 886
score: 99.81983844053399
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 886
score: 99.81245165532178
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 886
score: 99.79482014973958
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) {
rank: 887
score: 99.85162984913794
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } } }
rank: 887
score: 99.84385850694444
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 887
score: 99.8435687822165
patch: if ( n . get CaMeL Parent ( ) == null && out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 887
score: 99.83621651785714
patch: if ( n . get CaMeL Parent ( ) == null ) { return ) ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 887
score: 99.81982421875
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 887
score: 99.81243426983173
patch: List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 887
score: 99.80708068094135
patch: if ( n . get CaMeL Parent ( ) == null ) { try { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 887
score: 99.7849972747093
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 888
score: 99.84356066645408
patch: Iterator < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ;
rank: 888
score: 99.83619025735294
patch: if ( g CaMeL Node . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 888
score: 99.819677734375
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 888
score: 99.79470486111111
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 889
score: 99.85162417763158
patch: if ( n . get CaMeL Parent ( ) . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 889
score: 99.84352851159794
patch: if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Out ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 889
score: 99.83617876838235
patch: if ( n . get CaMeL Parent ( ) == null ) { return ) ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 889
score: 99.8303600193299
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 889
score: 99.79468790690105
patch: if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 889
score: 99.7849454012784
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 890
score: 99.85158521075581
patch: } else { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 890
score: 99.84373213605183
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { throw try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 890
score: 99.84351356907895
patch: while ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 890
score: 99.8361756859756
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Integer > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 890
score: 99.81934204101563
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) < 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 890
score: 99.812275390625
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; }
rank: 890
score: 99.80702533143939
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Value ( ) ) ;
rank: 890
score: 99.79463704427083
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) != 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 890
score: 99.78488685344827
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 891
score: 99.84370831745427
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges ) ; } }
rank: 891
score: 99.84351084183673
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ;
rank: 891
score: 99.8361484857253
patch: if ( n . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 891
score: 99.83029735331633
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else {
rank: 891
score: 99.81223707932692
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 891
score: 99.80700306056701
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 891
score: 99.79462239583333
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK :
rank: 891
score: 99.7848575367647
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 892
score: 99.85155114462209
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 892
score: 99.8361375188253
patch: if ( out == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 892
score: 99.81907348632812
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Id ( ) ) ;
rank: 892
score: 99.78484235491071
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Token > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 893
score: 99.85155044367283
patch: } else { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 893
score: 99.84365748355263
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 893
score: 99.83612351190476
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( g CaMeL Node . get CaMeL Out CaMeL Edges ( ) . get ( 0 ) ) ; } }
rank: 893
score: 99.82998046875
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 893
score: 99.81898850661058
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . RETURN ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 893
score: 99.81223192401961
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else {
rank: 893
score: 99.80699292919304
patch: if ( n == null ) { List < Di CaMeL Graph < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 893
score: 99.78469067950581
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 894
score: 99.85153952205883
patch: / * / if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 894
score: 99.84365748355263
patch: if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } }
rank: 894
score: 99.84324178890306
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; for ( Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 894
score: 99.83611904046474
patch: if ( g CaMeL Node . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 894
score: 99.82993421052632
patch: List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 894
score: 99.81222534179688
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 894
score: 99.80697006777109
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 894
score: 99.79434204101562
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 895
score: 99.85150637571839
patch: if ( n . get CaMeL Parent ( ) == null ) { return Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 895
score: 99.84319196428571
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ;
rank: 895
score: 99.8361139871988
patch: synchronized ( g CaMeL Node ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 895
score: 99.82983141447369
patch: if ( node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } }
rank: 895
score: 99.81884291565534
patch: else { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 895
score: 99.8122181056701
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 895
score: 99.80696614583333
patch: List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 895
score: 99.79430135091145
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else {
rank: 895
score: 99.78464525799419
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 896
score: 99.85150437127976
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 896
score: 99.84302512886597
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 896
score: 99.83607884457237
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 896
score: 99.8297265625
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 896
score: 99.81877367424242
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . BLOCK ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 896
score: 99.81216796875
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 896
score: 99.7940673828125
patch: if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Next ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 896
score: 99.78459664676966
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , n ) ;
rank: 897
score: 99.85147849462365
patch: } else { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 897
score: 99.84293126578282
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . to CaMeL String ( ) ) ; }
rank: 897
score: 99.82942488386824
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 897
score: 99.818359375
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 897
score: 99.81216796875
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ! out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 897
score: 99.79404296875
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ;
rank: 898
score: 99.84360532407408
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 898
score: 99.8428556743421
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; } } }
rank: 898
score: 99.83606387867647
patch: if ( n . get CaMeL Parent ( ) == null && out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 898
score: 99.82940848214285
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 898
score: 99.8183400371287
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 1 ) . get CaMeL Value ( ) ) ;
rank: 898
score: 99.8069103422619
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ;
rank: 898
score: 99.79399671052632
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( false ) ;
rank: 898
score: 99.78442651098901
patch: if ( n . get CaMeL Parent ( ) == null ) { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return n ; }
rank: 899
score: 99.84352384868421
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } }
rank: 899
score: 99.84273274739583
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ;
rank: 899
score: 99.82931743421052
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 899
score: 99.7938232421875
patch: if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Type ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 899
score: 99.78440117590206
patch: try { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ;
rank: 900
score: 99.85141314338236
patch: if ( n . get CaMeL Parent ( ) . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 900
score: 99.84352080676021
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null ) { out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 900
score: 99.84272361288265
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ;
rank: 900
score: 99.83605238970588
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 900
score: 99.82930086096938
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 900
score: 99.81813401442308
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Parent ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 900
score: 99.80684094551282
patch: if ( n == null ) { List < Di CaMeL Graph < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 900
score: 99.79378255208333
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Type ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 900
score: 99.78438358516483
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } else { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 901
score: 99.85138588763297
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 901
score: 99.84348366477273
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 901
score: 99.84240337171053
patch: Di CaMeL Graph CaMeL Edge out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ;
rank: 901
score: 99.83603162650603
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( g CaMeL Node . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } }
rank: 901
score: 99.82927911931819
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 901
score: 99.81808706430289
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . BLOCK ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 901
score: 99.81201655321782
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 901
score: 99.80682983398438
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 901
score: 99.79353101325758
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Branch . UNCOND ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 901
score: 99.78434244791667
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 902
score: 99.85137867647059
patch: / * if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 902
score: 99.84348094706633
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 902
score: 99.83601586612654
patch: synchronized ( n ) { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 902
score: 99.82909149484536
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; } }
rank: 902
score: 99.81803072415866
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . BLOCK ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 902
score: 99.81200583584338
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 902
score: 99.79350981841216
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 902
score: 99.78431595203489
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( n . get CaMeL Parent ( ) != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 903
score: 99.84343833111703
patch: if ( n . get CaMeL Parent ( ) . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 903
score: 99.84203849871135
patch: if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 903
score: 99.83601459703948
patch: if ( n . get CaMeL Parent ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 903
score: 99.82898966471355
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 903
score: 99.81798828125
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Branch . UNCOND ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 903
score: 99.81198299632354
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , null ) ; }
rank: 903
score: 99.80680140053353
patch: if ( n . has CaMeL Children ( ) ) { List < Di CaMeL Graph < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 903
score: 99.7935078938802
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ) ; }
rank: 903
score: 99.78431230709876
patch: if ( n . get CaMeL Parent ( ) == null ) { break ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 904
score: 99.85135323660714
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ; } }
rank: 904
score: 99.84343112244898
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) , out CaMeL Edges ) ; } }
rank: 904
score: 99.84192911783855
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } else }
rank: 904
score: 99.835984563253
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; ; } }
rank: 904
score: 99.81796480429293
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 904
score: 99.81197415865384
patch: List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; }
rank: 904
score: 99.80678565903466
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 904
score: 99.79345209911617
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . BLOCK ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 904
score: 99.78430606617647
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 905
score: 99.84190761920104
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 905
score: 99.83596319901316
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 905
score: 99.81771819760101
patch: if ( n . get CaMeL Parent ( ) == null || g CaMeL Node . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 905
score: 99.80673333662975
patch: if ( n != null ) { List < Di CaMeL Graph < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 905
score: 99.79335530598958
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 905
score: 99.78426948635058
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 906
score: 99.85129998319893
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 906
score: 99.841806640625
patch: if ( n . get CaMeL Parent ( ) == null && g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 906
score: 99.83596103162651
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 1 ) . get CaMeL Destination ( ) ) ; } } }
rank: 906
score: 99.8289203447165
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ) ;
rank: 906
score: 99.817626953125
patch: if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 906
score: 99.81195427389706
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 906
score: 99.80667782738095
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 906
score: 99.79321787308673
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , ) ;
rank: 907
score: 99.85129188629519
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 907
score: 99.84341119260205
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Out CaMeL Edges ( ) ) ; } }
rank: 907
score: 99.841796875
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ; } } else {
rank: 907
score: 99.83594926581326
patch: if ( node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 907
score: 99.82891414141415
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) out CaMeL Edges . add ( g CaMeL Node . get CaMeL Destination ( ) ) ;
rank: 907
score: 99.81757429534314
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 907
score: 99.81190453506098
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return out CaMeL Edges ; }
rank: 907
score: 99.8066599628713
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 907
score: 99.79315185546875
patch: if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 907
score: 99.78419982280928
patch: if ( n . get CaMeL Parent ( ) != null ) { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 908
score: 99.84172712053571
patch: Iterator < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ;
rank: 908
score: 99.8359375
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) , n ) ; } } }
rank: 908
score: 99.82875569661458
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 908
score: 99.81188372269418
patch: List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 908
score: 99.80663123497597
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 908
score: 99.79310825892857
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else {
rank: 908
score: 99.78413426598837
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } else { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 909
score: 99.84329788773148
patch: List < Di CaMeL Graph CaMeL Edge < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 909
score: 99.8416972257653
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 909
score: 99.82872289540816
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else {
rank: 909
score: 99.817138671875
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 909
score: 99.8065234375
patch: final Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 909
score: 99.79302978515625
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 910
score: 99.84140014648438
patch: List < Di CaMeL Graph CaMeL Edge , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ; }
rank: 910
score: 99.8359130859375
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 910
score: 99.81703473081683
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 910
score: 99.80638893363403
patch: if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Next ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 910
score: 99.79302014802632
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) ) ;
rank: 910
score: 99.78397833440722
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { break ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 911
score: 99.84320068359375
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 1 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 911
score: 99.84137403350516
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 911
score: 99.82846422697368
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } else
rank: 911
score: 99.8169191919192
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . BLOCK ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 911
score: 99.81180108762256
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } ; }
rank: 911
score: 99.79300944010417
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ) ; }
rank: 911
score: 99.78385416666667
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return n ; }
rank: 912
score: 99.85117422816265
patch: } else if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 912
score: 99.82821751644737
patch: if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 912
score: 99.81673499381188
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 912
score: 99.8063505569307
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 912
score: 99.79286702473958
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 )
rank: 912
score: 99.78381928943452
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else {
rank: 913
score: 99.8431321747449
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Out CaMeL Edges ( ) ) ; } }
rank: 913
score: 99.84111926020408
patch: if ( n . get CaMeL Parent ( ) == null && g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 913
score: 99.83587239583333
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 913
score: 99.82813496492346
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 913
score: 99.80625
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 913
score: 99.79273955676021
patch: if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 914
score: 99.84308182565789
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 914
score: 99.83587036132812
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 914
score: 99.81650199142157
patch: if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return n ; }
rank: 914
score: 99.81166847153466
patch: List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , ) ; }
rank: 914
score: 99.80620659722223
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 914
score: 99.79269969706633
patch: if ( n . get CaMeL Parent ( ) != null && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . BLOCK ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 914
score: 99.78377175632912
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 915
score: 99.85106286337209
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } }
rank: 915
score: 99.84303252551021
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 915
score: 99.84093989158163
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 915
score: 99.83581090856481
patch: if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 915
score: 99.82769325657895
patch: List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 915
score: 99.81646369485294
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 915
score: 99.81166208526234
patch: if ( n . get CaMeL Parent ( ) == null ) { List < ? , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 915
score: 99.7925313313802
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 915
score: 99.78373161764706
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 916
score: 99.84084087171053
patch: List < Di CaMeL Graph CaMeL Edge , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ;
rank: 916
score: 99.83569041792168
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 916
score: 99.82764689127605
patch: List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 916
score: 99.8163200827206
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else
rank: 916
score: 99.81165489783653
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; }
rank: 916
score: 99.79249043367346
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node . Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching (
rank: 916
score: 99.78369689255618
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else {
rank: 917
score: 99.85099546370968
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 917
score: 99.84297688802083
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 917
score: 99.84071180555556
patch: if ( n . get CaMeL Parent ( ) == null && g CaMeL Node . get CaMeL Out ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 917
score: 99.83569041792168
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } } }
rank: 917
score: 99.82748046875
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; }
rank: 917
score: 99.81626263786765
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 917
score: 99.811640625
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ; }
rank: 917
score: 99.80592447916666
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 917
score: 99.79244995117188
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ) ; } else {
rank: 917
score: 99.78353987068965
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 918
score: 99.8509765625
patch: else if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 918
score: 99.84071069834184
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 918
score: 99.82747727997449
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else {
rank: 918
score: 99.81607858758224
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 918
score: 99.80586134785354
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 918
score: 99.79230057565789
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) ) ;
rank: 918
score: 99.78352864583333
patch: if ( n . get CaMeL Parent ( ) != null ) { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 919
score: 99.8428243001302
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } * /
rank: 919
score: 99.81593724300987
patch: if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 919
score: 99.792216796875
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ) ; }
rank: 920
score: 99.84276315789474
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 920
score: 99.84028672680412
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } }
rank: 920
score: 99.83552389705882
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; }
rank: 920
score: 99.82744654605263
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { out CaMeL Edges . add ( out CaMeL Edges ) ; }
rank: 920
score: 99.81591313428218
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else
rank: 920
score: 99.8114990234375
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 920
score: 99.80576171875
patch: if ( n != null ) { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 920
score: 99.78348374640805
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , ) ;
rank: 921
score: 99.85091488486842
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Destination ( ) . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 921
score: 99.84268188476562
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 921
score: 99.84021245216837
patch: List < Di CaMeL Graph CaMeL Edge , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 921
score: 99.8355233880538
patch: if ( n . get CaMeL Parent ( ) == null ) { return ) ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 921
score: 99.8274259868421
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Node ( ) ) ; } } }
rank: 921
score: 99.81571691176471
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ) ;
rank: 921
score: 99.81148476175743
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , ) ; }
rank: 921
score: 99.79219148596938
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } switch ( n . get CaMeL Type ( ) ) {
rank: 921
score: 99.78346512957317
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 922
score: 99.85072220203489
patch: } else { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 922
score: 99.84268188476562
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } finally { out CaMeL Edges . close ( ) ; } } }
rank: 922
score: 99.84018297697368
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } } else
rank: 922
score: 99.83544333584338
patch: if ( n . get CaMeL Parent ( ) . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } } }
rank: 922
score: 99.81556114783653
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 922
score: 99.81140966322816
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 922
score: 99.792158203125
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) . get CaMeL Value ( ) ) ; }
rank: 922
score: 99.78345007183908
patch: if ( n . get CaMeL Type ( ) == Branch ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 923
score: 99.8506482712766
patch: } if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 923
score: 99.84268092105263
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null ) { out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 923
score: 99.8271625905797
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 923
score: 99.81551670792079
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 923
score: 99.81135075266768
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 923
score: 99.80539138595779
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 923
score: 99.792109375
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) . get CaMeL Destination ( ) , ) ;
rank: 923
score: 99.78333400451031
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node != null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 924
score: 99.85062000363372
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 924
score: 99.84261266196647
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ( out CaMeL Edges . size ( ) == 1 ) || ( out CaMeL Edges . size ( ) == 1 ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 924
score: 99.83973413584184
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . to CaMeL String ( ) ) ;
rank: 924
score: 99.835400390625
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 924
score: 99.82700452302632
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 924
score: 99.8153545673077
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 924
score: 99.81131280637256
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } * /
rank: 924
score: 99.80525390625
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , ) ;
rank: 924
score: 99.79210408528645
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 925
score: 99.84260896381579
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ; } } }
rank: 925
score: 99.83969427614795
patch: if ( n . get CaMeL Parent ( ) == null && out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 925
score: 99.82692228618421
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 925
score: 99.81529432240099
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 925
score: 99.81130323223039
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 925
score: 99.80517113095237
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 925
score: 99.7920430501302
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) . get CaMeL Value ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 925
score: 99.783203125
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } else { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 926
score: 99.85043010305851
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 926
score: 99.83942522321429
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } else {
rank: 926
score: 99.83521459009741
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 926
score: 99.82689144736842
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ; } }
rank: 926
score: 99.81514057360198
patch: if ( ( n == null ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 926
score: 99.81129365808823
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } ) ;
rank: 926
score: 99.79198201497395
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 926
score: 99.7831650771104
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 927
score: 99.85042146381579
patch: if ( n . get CaMeL Parent ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 927
score: 99.84259868421053
patch: else if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 927
score: 99.8267463235294
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 927
score: 99.8150634765625
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 927
score: 99.80502288510101
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ;
rank: 927
score: 99.791533203125
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) , ) ;
rank: 927
score: 99.78311332614942
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return n ; }
rank: 928
score: 99.850390625
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ) ; } }
rank: 928
score: 99.84256628787878
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 928
score: 99.83902662627551
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 928
score: 99.8351092761076
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 928
score: 99.82660361842105
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 )
rank: 928
score: 99.8148193359375
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) . get CaMeL Type ( ) != Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 928
score: 99.8112484830097
patch: List < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 928
score: 99.80481319616337
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 928
score: 99.79151387117346
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , out CaMeL Edges . get ( 0 ) , out CaMeL Edges . get ( 0 ) ) ;
rank: 929
score: 99.85034442204301
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ) ; } }
rank: 929
score: 99.84255642361111
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 929
score: 99.83504746835443
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( ) ; } }
rank: 929
score: 99.81463683477723
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 929
score: 99.8112140315594
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 929
score: 99.80461090686275
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ) ;
rank: 929
score: 99.79125724871135
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node . Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 930
score: 99.83500916280865
patch: if ( n . get CaMeL Parent ( ) . get CaMeL Value ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 930
score: 99.82648078762755
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 930
score: 99.79100566007654
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . BLOCK ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 930
score: 99.78276654411765
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return n ;
rank: 931
score: 99.85032342069893
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . size ( ) ) ; } } }
rank: 931
score: 99.84251434948979
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) , out CaMeL Edges ) ; } }
rank: 931
score: 99.83880678157216
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } } ) ;
rank: 931
score: 99.81426164215686
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 931
score: 99.81104937803399
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node != null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 931
score: 99.78259130271084
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 932
score: 99.85031532379519
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) <= 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 932
score: 99.84248445471938
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . size ( ) ) ; }
rank: 932
score: 99.83874760841837
patch: if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Out ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 932
score: 99.83496696566358
patch: if ( n . get CaMeL Parent ( ) . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 932
score: 99.826298828125
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 932
score: 99.81359145220588
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) . get CaMeL Destination ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 932
score: 99.81104910714286
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 932
score: 99.80446428571429
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 932
score: 99.790927734375
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) . get CaMeL Destination ( ) ) ; }
rank: 932
score: 99.78242420014881
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Token >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 933
score: 99.83852838010205
patch: if ( n . get CaMeL Parent ( ) == null && out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 933
score: 99.82628038194444
patch: List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 933
score: 99.813544921875
patch: switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 933
score: 99.81100260416666
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 933
score: 99.80440848214286
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Value ( ) ) ;
rank: 933
score: 99.790439453125
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ) ; }
rank: 934
score: 99.85014391447369
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ; } }
rank: 934
score: 99.82627467105263
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { out CaMeL Edges . add ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ) ; } } }
rank: 934
score: 99.81342869178921
patch: if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL Next ( ) ) ) ; }
rank: 934
score: 99.81099685968137
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Name ( ) ) ; }
rank: 934
score: 99.79035794005102
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 934
score: 99.78216773343374
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 935
score: 99.85008544921875
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 935
score: 99.83848852040816
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 935
score: 99.8262715242347
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } } }
rank: 935
score: 99.813388671875
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 935
score: 99.81079348169192
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ;
rank: 935
score: 99.80425666360294
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; }
rank: 935
score: 99.78204055059524
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 936
score: 99.85007957175925
patch: / * if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 936
score: 99.84231032538659
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) ) ; } }
rank: 936
score: 99.83837387242268
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } }
rank: 936
score: 99.83480224609374
patch: if ( out . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 936
score: 99.82623291015625
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { out CaMeL Edges . add CaMeL All ( out CaMeL Edges ) ;
rank: 936
score: 99.8133817506068
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . BLOCK ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 936
score: 99.80425037202382
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 936
score: 99.789921875
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) . get CaMeL Value ( ) ) ; }
rank: 936
score: 99.7820155767747
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 937
score: 99.83800023915816
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 937
score: 99.8347412109375
patch: if ( n . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 937
score: 99.82614167203609
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 937
score: 99.81318744860198
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) , n ) ;
rank: 937
score: 99.80424272896039
patch: else { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 937
score: 99.78963635631443
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 937
score: 99.78200827205882
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 938
score: 99.84228515625
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 938
score: 99.83782087053571
patch: if ( n . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 938
score: 99.82607987998189
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 938
score: 99.81312913161058
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 938
score: 99.8106219951923
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 938
score: 99.80420405321782
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 938
score: 99.78959517045455
patch: if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . BLOCK ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 938
score: 99.78181966145833
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else if ( n . has CaMeL Children ( ) ) {
rank: 939
score: 99.8422210385101
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 939
score: 99.83761160714286
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 939
score: 99.8346435546875
patch: if ( n . get CaMeL Parent ( ) == null ) { Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 939
score: 99.81300113075658
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) , n ) ;
rank: 939
score: 99.80416259765624
patch: if ( n == null ) { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 939
score: 99.7895703125
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node (
rank: 939
score: 99.78163364955357
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return n ; }
rank: 940
score: 99.85000840053763
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) . get CaMeL Value ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 940
score: 99.84221971649484
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 940
score: 99.83756846005154
patch: List < Di CaMeL Graph CaMeL Edge , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ; } }
rank: 940
score: 99.8345703125
patch: if ( n . get CaMeL Parent ( ) == null ) { final Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 940
score: 99.82586984536083
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return out CaMeL Edges . get CaMeL Out CaMeL Edges ( ) ; }
rank: 940
score: 99.81295955882354
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 940
score: 99.81060431985294
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; }
rank: 940
score: 99.78956074617346
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ) ;
rank: 940
score: 99.78163364955357
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 941
score: 99.84220204454788
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 941
score: 99.83720304528062
patch: if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 941
score: 99.83448533887987
patch: if ( out != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 941
score: 99.8258565266927
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 941
score: 99.81295072115384
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 941
score: 99.81059474571079
patch: List < Token >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , n ) ; }
rank: 941
score: 99.80411703279702
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 941
score: 99.78904296875
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node . Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 942
score: 99.83707350127551
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 942
score: 99.82567855992268
patch: List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 942
score: 99.8105662128713
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> g CaMeL Node = g CaMeL Node . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 942
score: 99.80402393830128
patch: if ( n != null ) { List < Di CaMeL Graph < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 942
score: 99.78903229703609
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else {
rank: 942
score: 99.7814881859756
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , n ) ;
rank: 943
score: 99.84987948803192
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 943
score: 99.842177734375
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ; } }
rank: 943
score: 99.83699378188776
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ;
rank: 943
score: 99.8341796875
patch: synchronized ( n . get CaMeL Parent ( ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 943
score: 99.81268780048077
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . BLOCK ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 943
score: 99.80396459009741
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 943
score: 99.788818359375
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) {
rank: 944
score: 99.84984580592105
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 944
score: 99.83669704861111
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; }
rank: 944
score: 99.82544202302631
patch: if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 944
score: 99.812470703125
patch: switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 944
score: 99.81052734375
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; }
rank: 944
score: 99.788759765625
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) , ) ;
rank: 945
score: 99.84978243670886
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 945
score: 99.84212932180851
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 945
score: 99.83654296875
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 945
score: 99.83402934827302
patch: if ( n . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 945
score: 99.82538034539473
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 945
score: 99.80377807617188
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 945
score: 99.78867885044643
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 945
score: 99.78125
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Node >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 946
score: 99.84970388104838
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } ) ;
rank: 946
score: 99.83654155927834
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 946
score: 99.8338558799342
patch: if ( out . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 946
score: 99.82535978618421
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 946
score: 99.81225827660892
patch: if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return n ;
rank: 946
score: 99.81044358473558
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , ) ;
rank: 946
score: 99.80361424814356
patch: try { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 946
score: 99.78860945554123
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get ( ) ) ; }
rank: 947
score: 99.84965093085107
patch: else if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 947
score: 99.84212239583333
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ) ; } }
rank: 947
score: 99.83654155927834
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 947
score: 99.83383018092105
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } finally
rank: 947
score: 99.825224609375
patch: List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 947
score: 99.812099609375
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 947
score: 99.80345982142858
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ;
rank: 947
score: 99.78816565688776
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 948
score: 99.84956737231182
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 948
score: 99.84203849871135
patch: List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 948
score: 99.83631000322166
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } } else {
rank: 948
score: 99.83374974634741
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 948
score: 99.82512626262626
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 948
score: 99.812021484375
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 948
score: 99.81030515160892
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 948
score: 99.80328690378289
patch: if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 948
score: 99.7879296875
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) . get CaMeL Destination ( ) ) ; }
rank: 949
score: 99.8495498285061
patch: } else { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 949
score: 99.84198620854592
patch: List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 949
score: 99.83628986791237
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 949
score: 99.81194887066832
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ;
rank: 949
score: 99.81028581373762
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 949
score: 99.80322265625
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; break ; }
rank: 949
score: 99.78759765625
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ) ; }
rank: 950
score: 99.8495361328125
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } }
rank: 950
score: 99.8362109375
patch: if ( n . get CaMeL Parent ( ) == null && g CaMeL Node . get CaMeL Out ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 950
score: 99.8333848397943
patch: else { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } } }
rank: 950
score: 99.82481060606061
patch: List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 950
score: 99.81004901960785
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } ;
rank: 950
score: 99.80312753652598
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 950
score: 99.78752790178571
patch: if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; }
rank: 950
score: 99.78081466490964
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 951
score: 99.84943276263297
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ; } }
rank: 951
score: 99.841923828125
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 951
score: 99.8333804481908
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 951
score: 99.81176994842232
patch: if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else
rank: 951
score: 99.80997800364078
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; } }
rank: 951
score: 99.80309119591347
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; }
rank: 951
score: 99.7874416076031
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node . Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ;
rank: 951
score: 99.78074340820312
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 952
score: 99.84940159574468
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ; } }
rank: 952
score: 99.83612683354592
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } else {
rank: 952
score: 99.83305220170455
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) , ) ; } }
rank: 952
score: 99.82463152384021
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 952
score: 99.81157622466216
patch: if ( n == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 952
score: 99.80991839418317
patch: List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 952
score: 99.80305989583333
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ;
rank: 952
score: 99.7872770675505
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 953
score: 99.8359673947704
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; }
rank: 953
score: 99.83283659699676
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 953
score: 99.8115708434466
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , g CaMeL Node . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 953
score: 99.80982881433823
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 953
score: 99.78718909438776
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 953
score: 99.78012048192771
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 954
score: 99.841796875
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Out CaMeL Edges ( ) ) ; } }
rank: 954
score: 99.8359375
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } ) ;
rank: 954
score: 99.8109130859375
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ) ;
rank: 954
score: 99.80962775735294
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 954
score: 99.80286711165049
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 954
score: 99.78707978219697
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) . get CaMeL Type ( ) == Token . BLOCK ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 955
score: 99.84176114710365
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 955
score: 99.83271611201299
patch: if ( out . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } } }
rank: 955
score: 99.82392678801547
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 955
score: 99.81089430588942
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 955
score: 99.80283453525641
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 955
score: 99.78701073232324
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ; }
rank: 955
score: 99.77982177734376
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else if ( n == null ) {
rank: 956
score: 99.84932154605264
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } } }
rank: 956
score: 99.8417432831555
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 )
rank: 956
score: 99.83586774553571
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ! try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ) {
rank: 956
score: 99.83265725160257
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 956
score: 99.8238308005137
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = null ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 956
score: 99.81081760519803
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null || g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 956
score: 99.80954130569307
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 956
score: 99.8027537128713
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 956
score: 99.7869281572165
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node . Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } switch ( n . get CaMeL Type ( ) )
rank: 956
score: 99.77975574171687
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 957
score: 99.84172640141753
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ; } } }
rank: 957
score: 99.83585778061224
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; {
rank: 957
score: 99.83246170847039
patch: if ( out != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 957
score: 99.82358448775773
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 957
score: 99.81077665441177
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 957
score: 99.80951450892857
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ; }
rank: 957
score: 99.80266864483173
patch: g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 957
score: 99.78686775128865
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node . Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 957
score: 99.77973751905488
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { break ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 958
score: 99.849267578125
patch: } } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 958
score: 99.83565143623737
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 958
score: 99.83222399259868
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 958
score: 99.82356770833333
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node . Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 958
score: 99.80951229888613
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == $NUMBER$ ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 958
score: 99.80249255952381
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ) ; }
rank: 958
score: 99.78672466856061
patch: if ( n . has CaMeL Children ( ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Type ( ) ) ;
rank: 959
score: 99.84919254954268
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return out CaMeL Edges ; } }
rank: 959
score: 99.8416796875
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 || out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 959
score: 99.83202446831598
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 959
score: 99.8102719205097
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == Branch . UNCOND ) ;
rank: 959
score: 99.80942527846534
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Out CaMeL Edges ( ) ) ;
rank: 959
score: 99.80236235119048
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 959
score: 99.7865964330808
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , ) ;
rank: 959
score: 99.77948374807099
patch: if ( n . get CaMeL Parent ( ) == null ) { break ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 960
score: 99.84918934811827
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; } }
rank: 960
score: 99.84158203125
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 960
score: 99.83530970982143
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 960
score: 99.83162006578948
patch: if ( node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 960
score: 99.8234354654948
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 960
score: 99.81010125910194
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else
rank: 960
score: 99.80941560952971
patch: Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 960
score: 99.8023131127451
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; }
rank: 960
score: 99.78655565399484
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node . Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ;
rank: 961
score: 99.84916834677419
patch: try { if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 961
score: 99.83505062181122
patch: Di CaMeL Graph CaMeL Edge out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } } }
rank: 961
score: 99.83136541193181
patch: if ( n . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } } }
rank: 961
score: 99.82342960858585
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Node ( ) ) ; }
rank: 961
score: 99.81001508353961
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ;
rank: 961
score: 99.80940755208333
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , ) ; } }
rank: 961
score: 99.80228794642858
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Value ( ) ) ;
rank: 961
score: 99.786376953125
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node . Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 )
rank: 962
score: 99.84913684475806
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( ) ; } } }
rank: 962
score: 99.84152067550505
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 962
score: 99.83503069196429
patch: if ( n . get CaMeL Parent ( ) == null && g CaMeL Node . get CaMeL Out ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 962
score: 99.83111251027961
patch: while ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 962
score: 99.82341974431819
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 962
score: 99.8099915747549
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 962
score: 99.80922898968447
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 962
score: 99.77915568524097
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 963
score: 99.84907384072581
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 963
score: 99.84148520611703
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 963
score: 99.83449782538659
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } else {
rank: 963
score: 99.83093420251623
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 963
score: 99.8099915747549
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 963
score: 99.80912469660194
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ;
rank: 963
score: 99.8021349009901
patch: Di CaMeL Graph CaMeL Node < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 963
score: 99.786123046875
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , ) ) ;
rank: 963
score: 99.77909909018987
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 964
score: 99.841396484375
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 964
score: 99.834208984375
patch: if ( n . get CaMeL Parent ( ) == null || g CaMeL Node . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 964
score: 99.83087713068181
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 964
score: 99.8232421875
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } else {
rank: 964
score: 99.80990872524752
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 964
score: 99.80907738095237
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 964
score: 99.78589607007575
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 965
score: 99.84138831313776
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Out CaMeL Edges ( ) ) ; } }
rank: 965
score: 99.83082640016234
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } else {
rank: 965
score: 99.82321259469697
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 965
score: 99.80978302908416
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , n . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 965
score: 99.80902885210396
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 965
score: 99.80124535891089
patch: try { Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 965
score: 99.78579051224227
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 966
score: 99.8486930941358
patch: else { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 966
score: 99.84117268041237
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ;
rank: 966
score: 99.83361187177834
patch: if ( g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else {
rank: 966
score: 99.83052785773026
patch: if ( n . get CaMeL Node ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 966
score: 99.82301839192708
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 966
score: 99.80876779084159
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node != null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 966
score: 99.80107886904761
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 966
score: 99.78539787371135
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else
rank: 967
score: 99.84108207152062
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ) ; } } }
rank: 967
score: 99.83334319760101
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node > out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 967
score: 99.83023665787337
patch: else if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 967
score: 99.80960860906863
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else
rank: 967
score: 99.80870010829207
patch: List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , n ) ;
rank: 967
score: 99.785361328125
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node (
rank: 967
score: 99.77764515817901
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { Node < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 968
score: 99.84829935213415
patch: } if ( n . get CaMeL Parent ( ) == null ) { List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 968
score: 99.84108207152062
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } } }
rank: 968
score: 99.83328683035714
patch: if ( n . get CaMeL Parent ( ) == null || g CaMeL Node . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 968
score: 99.83017958603897
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } } }
rank: 968
score: 99.8095229065534
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 968
score: 99.80075334821429
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 968
score: 99.78524685889175
patch: if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node . Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 969
score: 99.84825478830645
patch: out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } } }
rank: 969
score: 99.841044921875
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 969
score: 99.83308835373711
patch: if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; }
rank: 969
score: 99.83003373579545
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } } }
rank: 969
score: 99.82270408163265
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else {
rank: 969
score: 99.808837890625
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 969
score: 99.80069422957921
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 969
score: 99.7851059117268
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . get ( 0 ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 969
score: 99.7774169921875
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 970
score: 99.83299784757654
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; try
rank: 970
score: 99.82990234375
patch: if ( out . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 970
score: 99.8223159632732
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; } }
rank: 970
score: 99.80849706064356
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; * /
rank: 970
score: 99.78503543814433
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ; }
rank: 970
score: 99.777392578125
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 971
score: 99.84816834984755
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } } }
rank: 971
score: 99.840859375
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) != 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 971
score: 99.8329574742268
patch: if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; }
rank: 971
score: 99.82987520292208
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } } }
rank: 971
score: 99.82190064709596
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 971
score: 99.80873460036058
patch: if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; }
rank: 971
score: 99.80843098958333
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( ! out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 971
score: 99.80043658088235
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , ) ;
rank: 971
score: 99.77680053710938
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 972
score: 99.84081034757654
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . size ( ) ) ; }
rank: 972
score: 99.83278858418367
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 972
score: 99.82983081371754
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 972
score: 99.82184278350516
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 972
score: 99.80870863970588
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 972
score: 99.80838516383496
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; }
rank: 972
score: 99.80013652912622
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , ) ; }
rank: 972
score: 99.78481394974227
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 973
score: 99.84779275873656
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ; } } }
rank: 973
score: 99.840703125
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 973
score: 99.8327762564433
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ;
rank: 973
score: 99.82981471011513
patch: if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 973
score: 99.82177016314338
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 973
score: 99.80838516383496
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 973
score: 99.79983340992646
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , ) ;
rank: 973
score: 99.784599609375
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) . get CaMeL Destination ( ) ) ; }
rank: 974
score: 99.82966051603618
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . remove ( 0 ) ) ; } }
rank: 974
score: 99.82167163337628
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 974
score: 99.80828387920673
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 1 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 975
score: 99.84764419367283
patch: try { if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } }
rank: 975
score: 99.82963110695422
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ; } }
rank: 975
score: 99.82164417613636
patch: List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 975
score: 99.80816291360294
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 975
score: 99.80786369842232
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , g CaMeL Node ) ;
rank: 975
score: 99.79969200721153
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ) ;
rank: 975
score: 99.7841015625
patch: if ( g CaMeL Node != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node (
rank: 975
score: 99.77499746347402
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 976
score: 99.8473876953125
patch: try { if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 976
score: 99.84054411300505
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ; }
rank: 976
score: 99.83201132015306
patch: if ( g CaMeL Node . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } else {
rank: 976
score: 99.82958984375
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 976
score: 99.82143702651516
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 976
score: 99.80808129641089
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 976
score: 99.80784473604369
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } return n ;
rank: 976
score: 99.783896484375
patch: if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . BLOCK ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 976
score: 99.77452674278847
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) {
rank: 977
score: 99.83187342171718
patch: if ( n . get CaMeL Parent ( ) == null && g CaMeL Node . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; }
rank: 977
score: 99.82932642886513
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Integer > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 977
score: 99.8212002840909
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 977
score: 99.80775669642857
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 977
score: 99.78291706123737
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , out CaMeL Edges . get ( 0 ) ) ;
rank: 978
score: 99.8473388671875
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 978
score: 99.84024645618557
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ;
rank: 978
score: 99.83158282844387
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; try
rank: 978
score: 99.82893880208333
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } }
rank: 978
score: 99.82115234375
patch: List out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 978
score: 99.80774165134804
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } } }
rank: 978
score: 99.80767407463593
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 978
score: 99.782080078125
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 978
score: 99.77233714788733
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 979
score: 99.84732022849462
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; }
rank: 979
score: 99.84022845643939
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 979
score: 99.83156289859694
patch: if ( g CaMeL Node . get CaMeL Out ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } else {
rank: 979
score: 99.82104245580808
patch: List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 979
score: 99.80764563106796
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) == Branch . UNCOND ) ;
rank: 979
score: 99.80748697916667
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 979
score: 99.7990978422619
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 979
score: 99.781474609375
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 979
score: 99.7723341112013
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 980
score: 99.83140980113636
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 980
score: 99.82873019366197
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 980
score: 99.80739397321429
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; break ;
rank: 980
score: 99.79906017945545
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; break ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 980
score: 99.78125
patch: if ( n . has CaMeL Children ( ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 980
score: 99.77201704545455
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 981
score: 99.83975314110825
patch: if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 981
score: 99.831357421875
patch: List < Di CaMeL Graph CaMeL Edge , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ;
rank: 981
score: 99.82092408459596
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 981
score: 99.8073422330097
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , g CaMeL Node ) ;
rank: 981
score: 99.80701401654412
patch: if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ; }
rank: 981
score: 99.77738882211538
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) {
rank: 982
score: 99.84713121639786
patch: try { if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 982
score: 99.83955178801547
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 982
score: 99.83070943813131
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 982
score: 99.82699459546232
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } } }
rank: 982
score: 99.82071520618557
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges == null ) { out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; } }
rank: 982
score: 99.8073422330097
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 982
score: 99.79886680074257
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ;
rank: 982
score: 99.77517927938433
patch: if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 982
score: 99.76937271712663
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 983
score: 99.8459536903783
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 983
score: 99.83820272229381
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ) ;
rank: 983
score: 99.82582216005068
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 983
score: 99.82056640625
patch: List < Node >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 983
score: 99.807177734375
patch: if ( n . get CaMeL Parent ( ) != null ) { List < ? , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 983
score: 99.8063213641827
patch: if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } break ;
rank: 983
score: 99.79877232142857
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 983
score: 99.77457386363636
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 983
score: 99.76878163512323
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 984
score: 99.83814231636597
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } } * /
rank: 984
score: 99.829951171875
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get } ) ;
rank: 984
score: 99.820498046875
patch: List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 984
score: 99.80712416565534
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ;
rank: 984
score: 99.79874441964286
patch: Di CaMeL Graph CaMeL Node < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Value ( ) ) ;
rank: 984
score: 99.76574913930085
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 985
score: 99.8452084189967
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 985
score: 99.83796109858247
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ;
rank: 985
score: 99.82993016098484
patch: out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } } }
rank: 985
score: 99.82529438405797
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 985
score: 99.80616191789215
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 985
score: 99.7686434659091
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 985
score: 99.76030356197033
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return n ; }
rank: 986
score: 99.82967369002525
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 986
score: 99.8251078591418
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 986
score: 99.82033203125
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 986
score: 99.80682076759709
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 986
score: 99.80609916460396
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else
rank: 986
score: 99.7982728247549
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 986
score: 99.76518290751689
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 986
score: 99.75425248579545
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 987
score: 99.84420698116988
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 987
score: 99.81994752209596
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } } else { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 987
score: 99.80623685396634
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ;
rank: 987
score: 99.80555770420793
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == Branch . UNCOND ) ;
rank: 987
score: 99.79754464285715
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 987
score: 99.75259254092262
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 988
score: 99.83745771585052
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; for ( Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges : out CaMeL Edges ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 988
score: 99.82943359375
patch: if ( n . get CaMeL Parent ( ) == null && g CaMeL Node . get CaMeL Destination ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } }
rank: 988
score: 99.82017804574275
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 988
score: 99.81985945554123
patch: List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 988
score: 99.80595238095238
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Name ( ) . get CaMeL Value ( ) ) ;
rank: 988
score: 99.80553260216347
patch: if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } } }
rank: 988
score: 99.79749474158653
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , ) ;
rank: 988
score: 99.7638506822183
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 988
score: 99.72626023065476
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 989
score: 99.83738724226804
patch: try { if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } } }
rank: 989
score: 99.82942708333333
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 989
score: 99.82015498991936
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 989
score: 99.81943458017676
patch: List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 989
score: 99.80572040264423
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 989
score: 99.804931640625
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Branch . UNCOND ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) == Branch . UNCOND ) ;
rank: 989
score: 99.75880969410211
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 989
score: 99.71666899181548
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 990
score: 99.83736710695877
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) , out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 990
score: 99.82932844065657
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 990
score: 99.81964470358456
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 990
score: 99.81934580176768
patch: out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 990
score: 99.80567354368932
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 990
score: 99.80485816140776
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 990
score: 99.75615234375
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 990
score: 99.69779829545455
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 991
score: 99.83768039279514
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } }
rank: 991
score: 99.828974609375
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else
rank: 991
score: 99.8190625
patch: List < Node > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 991
score: 99.81894672780797
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 991
score: 99.80440579927884
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ) ;
rank: 991
score: 99.79614494842232
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 991
score: 99.75510541130515
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges != null ) {
rank: 991
score: 99.69706798735119
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node . Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 992
score: 99.8287890625
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } else
rank: 992
score: 99.819033203125
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ) ; } else {
rank: 992
score: 99.81807391826923
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; } }
rank: 992
score: 99.80540807038835
patch: List < Di CaMeL Graph CaMeL Edge < Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 992
score: 99.8042743389423
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node (
rank: 992
score: 99.79542437803399
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , cur CaMeL Cfg ) ) ;
rank: 992
score: 99.75050330528846
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 992
score: 99.69052269345238
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 993
score: 99.83446502685547
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 993
score: 99.82734572285354
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 993
score: 99.81876953125
patch: List < Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } }
rank: 993
score: 99.81623863106343
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 993
score: 99.80518052184466
patch: Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 993
score: 99.74812825520833
patch: if ( n == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 993
score: 99.67229903371711
patch: if ( g CaMeL Node == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 994
score: 99.827109375
patch: Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ;
rank: 994
score: 99.81464260727611
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ;
rank: 994
score: 99.80482835036058
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; ;
rank: 994
score: 99.80386263652913
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ) ;
rank: 994
score: 99.77855705492425
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 994
score: 99.68106689453126
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 994
score: 99.6698968349359
patch: if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 995
score: 99.8265625
patch: Di CaMeL Graph CaMeL Edge out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 995
score: 99.81787602588383
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) out CaMeL Edges . add ( g CaMeL Node . get CaMeL Value ( ) ) ;
rank: 995
score: 99.81378658234127
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 995
score: 99.80448839502426
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Out CaMeL Edges ( ) ) ; } }
rank: 995
score: 99.80372032752403
patch: if ( n == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 995
score: 99.65617540147569
patch: if ( n != null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 995
score: 99.63278198242188
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 995
score: 99.5995460792824
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 996
score: 99.82946213942307
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } }
rank: 996
score: 99.8263395675505
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . is CaMeL Empty ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges ) ; } }
rank: 996
score: 99.804443359375
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , out CaMeL Edges ) ; }
rank: 996
score: 99.80276281856796
patch: if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . BLOCK ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) == Branch . UNCOND ) ;
rank: 996
score: 99.55152306189903
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 996
score: 99.39180261948529
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ;
rank: 996
score: 99.2905742938702
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 997
score: 99.8260830965909
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 997
score: 99.82593536376953
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ; }
rank: 997
score: 99.80982232862904
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 997
score: 99.80441518930289
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 && out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Value ( ) ) ; }
rank: 997
score: 99.8023172026699
patch: if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; break ;
rank: 997
score: 99.35797991071429
patch: if ( n . get CaMeL Parent ( ) == null ) {
rank: 997
score: 99.2357928936298
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out ) ;
rank: 998
score: 99.82579703282828
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 0 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 998
score: 99.8075939360119
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 998
score: 99.80433669599515
patch: if ( n . get CaMeL Parent ( ) != null ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; } }
rank: 998
score: 99.80226031553399
patch: if ( n . get CaMeL Parent ( ) == null || g CaMeL Node . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == Branch . UNCOND ) ;
rank: 998
score: 99.75537109375
patch: if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 998
score: 99.10024007161458
patch: if ( n . has CaMeL Children ( ) ) {
rank: 998
score: 98.63494873046875
patch: if ( n == null ) {
rank: 998
score: 98.13742065429688
patch: return g CaMeL Node ;
rank: 999
score: 99.825732421875
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) > 1 ) { List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 999
score: 99.80343862680289
patch: Di CaMeL Graph CaMeL Node < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ,
rank: 999
score: 99.80259967672414
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; }
rank: 999
score: 99.80200432342232
patch: if ( n . get CaMeL Parent ( ) == null ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else
rank: 999
score: 99.73585146949405
patch: List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) {
rank: 999
score: 98.91647338867188
patch: if ( g CaMeL Node == null ) {
rank: 999
score: 97.17206573486328
patch: return n ;
rank: 999
score: 96.36149088541667
patch: } }
rank: 1000
score: 99.8256640625
patch: List < Node >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) ) ;
rank: 1000
score: 99.80049986758475
patch: List < Di CaMeL Graph CaMeL Edge > out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) ) ; } }
rank: 1000
score: 99.78525390625
patch: List < Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 1000
score: 99.23975481305804
patch: return g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 1000
score: 97.02386474609375
patch: return out ;
rank: 1000
score: 94.54638671875
patch: }
