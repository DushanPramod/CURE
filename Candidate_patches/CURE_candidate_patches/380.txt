rank: 1
score: 99.88716052827381
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 1
score: 99.87806222098214
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 1
score: 99.87491763930723
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 1
score: 99.87302809495192
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 1
score: 99.8617527173913
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 1
score: 99.856689453125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis .
rank: 1
score: 99.82897089568662
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 2
score: 99.88268183318662
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 2
score: 99.87171800830696
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 2
score: 99.857421875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 2
score: 99.808828125
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 3
score: 99.87936927532327
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 3
score: 99.85706890060241
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 3
score: 99.85576036241319
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 3
score: 99.80674984580592
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 3
score: 99.7588088576858
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 4
score: 99.87787155877976
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 4
score: 99.86181022547468
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 4
score: 99.84587890625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL
rank: 4
score: 99.83400390625
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 4
score: 99.80578776041666
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 4
score: 99.80490069322182
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 4
score: 99.7538998252467
patch: try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 5
score: 99.85243733723958
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 5
score: 99.84423828125
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 5
score: 99.84117012593283
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 5
score: 99.83372395833334
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 5
score: 99.82261321504237
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 5
score: 99.80523360402961
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 5
score: 99.79893092105263
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 5
score: 99.75360677083333
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 6
score: 99.85702514648438
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 6
score: 99.8507624246988
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 6
score: 99.84290813577586
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 6
score: 99.83346264982876
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; }
rank: 6
score: 99.8050754494863
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 6
score: 99.79690175513699
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 6
score: 99.75285993303571
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 7
score: 99.87463550836267
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 7
score: 99.84817752322635
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 7
score: 99.841843938253
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 7
score: 99.83563956567797
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 7
score: 99.83186848958333
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 7
score: 99.80472140842014
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 7
score: 99.75028092893835
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 8
score: 99.841025390625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 8
score: 99.83524206912878
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 8
score: 99.82912083675987
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ;
rank: 8
score: 99.81499953497024
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 8
score: 99.80376800933442
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 8
score: 99.79563854586694
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 9
score: 99.86927129181338
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { n . get CaMeL First CaMeL Child ( ) ; }
rank: 9
score: 99.838857421875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 9
score: 99.83347602739725
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 9
score: 99.82787407769098
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , first ) ;
rank: 9
score: 99.81395696824596
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; }
rank: 9
score: 99.803125
patch: case Token . BLOCK : case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 9
score: 99.79554770026408
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 9
score: 99.74747941300676
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 10
score: 99.86767578125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL
rank: 10
score: 99.84858774038462
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 10
score: 99.836025390625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis .
rank: 10
score: 99.83188045726104
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 10
score: 99.82600648941532
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 10
score: 99.81345358455883
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 10
score: 99.80254557291667
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 10
score: 99.79468936011905
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 10
score: 99.74736724028716
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 11
score: 99.86321231617647
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 11
score: 99.84424567945075
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 11
score: 99.84134977409639
patch: case Token . FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 11
score: 99.8358839081555
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 11
score: 99.83060515873017
patch: case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 11
score: 99.82486746651786
patch: case Type . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 11
score: 99.80250343116555
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 11
score: 99.79462615536971
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 11
score: 99.74697519277598
patch: try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 12
score: 99.84076450892857
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 12
score: 99.835791015625
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 12
score: 99.82961107336956
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 12
score: 99.82375797755282
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 12
score: 99.80225894325658
patch: case Token . BLOCK : case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 12
score: 99.7934149380388
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 13
score: 99.85974609375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node (
rank: 13
score: 99.8397324960443
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 13
score: 99.83949838033537
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 13
score: 99.82953844572368
patch: case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 13
score: 99.82366265190973
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 13
score: 99.81077665441177
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 13
score: 99.79238682577055
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 13
score: 99.74664481026785
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 14
score: 99.83944091796874
patch: try { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 14
score: 99.83943986304013
patch: case BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 14
score: 99.82642842955508
patch: } case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 14
score: 99.82152622767858
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 14
score: 99.80982607886905
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 14
score: 99.74643686655405
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 15
score: 99.856142578125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL
rank: 15
score: 99.83896484375
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 15
score: 99.83843703497024
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 15
score: 99.81951032366071
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 15
score: 99.80955177017405
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; }
rank: 15
score: 99.798828125
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ;
rank: 15
score: 99.79043619791666
patch: case Di CaMeL Graph CaMeL Edge . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 15
score: 99.74507221422698
patch: try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 16
score: 99.85591796875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n
rank: 16
score: 99.83888572982595
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 16
score: 99.83803578969595
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . BLOCK ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 16
score: 99.83072265625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) )
rank: 16
score: 99.82593724634741
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 16
score: 99.81833930864725
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 16
score: 99.80885461258562
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 16
score: 99.79869832871836
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 16
score: 99.78897309639085
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 16
score: 99.74455915178571
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 17
score: 99.837158203125
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 17
score: 99.83064350328948
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 17
score: 99.82473533740942
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 17
score: 99.81764280641234
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 17
score: 99.80803079044118
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ) ;
rank: 17
score: 99.78873697916667
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 17
score: 99.74432373046875
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 18
score: 99.855361328125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL
rank: 18
score: 99.83831091772151
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 18
score: 99.82455105251736
patch: } case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 18
score: 99.7980892783717
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 18
score: 99.78834727112677
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 18
score: 99.74317708333334
patch: case Token . BREAK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 19
score: 99.854453125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n . get CaMeL First CaMeL Child ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node
rank: 19
score: 99.83741947642544
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 19
score: 99.83004282756023
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 19
score: 99.82423938160211
patch: } case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 19
score: 99.80758628362342
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; }
rank: 19
score: 99.79745840097402
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ; }
rank: 19
score: 99.78708874339789
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 19
score: 99.74250651041666
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 20
score: 99.85442341549296
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 20
score: 99.82983097029322
patch: } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 20
score: 99.82391357421875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 20
score: 99.807373046875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; }
rank: 20
score: 99.797119140625
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 20
score: 99.7869183084239
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 21
score: 99.83572998046876
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 21
score: 99.82942708333333
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 21
score: 99.82308197021484
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 21
score: 99.81597541360294
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else if ( n . has CaMeL Children ( ) ) {
rank: 21
score: 99.80712890625
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 21
score: 99.796875
patch: case Token . BLOCK : if ( n . get CaMeL Next ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 21
score: 99.7862331442637
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 21
score: 99.74174360795455
patch: try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 22
score: 99.83435639880952
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { final Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 22
score: 99.83257004310344
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 22
score: 99.8290625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 22
score: 99.82290482954545
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 22
score: 99.81583333333333
patch: case Token . BLOCK : case Token . FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 22
score: 99.80696186266448
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 22
score: 99.79524061414931
patch: case Token . BLOCK : if ( n . get CaMeL Next ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 22
score: 99.78620256696429
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 22
score: 99.74166622677365
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 23
score: 99.85417451054217
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 23
score: 99.83312837577161
patch: case RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 23
score: 99.83232009242958
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 23
score: 99.82875279017857
patch: case Token . BLOCK : while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 23
score: 99.82241536458334
patch: case Token . BLOCK : Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 23
score: 99.81560546875
patch: case Token . BLOCK : case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 23
score: 99.8047107514881
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node n = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 23
score: 99.79511176215277
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 23
score: 99.78546962453358
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 23
score: 99.74150107563406
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 24
score: 99.85382285814607
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 24
score: 99.83150111607142
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 24
score: 99.81544288429055
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , g CaMeL Node ) ;
rank: 24
score: 99.80347931690706
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 24
score: 99.79502333603897
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 24
score: 99.74109375
patch: case Token . RETURN : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 25
score: 99.85361328125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL
rank: 25
score: 99.8328232183689
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 25
score: 99.83146158854167
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 25
score: 99.82771484375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node
rank: 25
score: 99.82096819196428
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 25
score: 99.81537030194256
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 25
score: 99.80301432291667
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . BLOCK ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 25
score: 99.78449842664931
patch: case Token . UNCOND : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 25
score: 99.74085286458333
patch: case Token . BLOCK : case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 26
score: 99.8535546875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) .
rank: 26
score: 99.83275204613095
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 26
score: 99.83095703125
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 26
score: 99.8274446980337
patch: case Token . BLOCK : { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 26
score: 99.82049479166666
patch: case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 26
score: 99.79391994724025
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 26
score: 99.74032911613806
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 27
score: 99.85326171875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n
rank: 27
score: 99.8325135766006
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 27
score: 99.83070068359375
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 27
score: 99.82734818892045
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 27
score: 99.81947039175725
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 27
score: 99.81355116102431
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 27
score: 99.79337565104167
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) || n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 27
score: 99.78334754621478
patch: case Token . FUNCTION : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 27
score: 99.74002982474663
patch: case Di CaMeL Graph CaMeL Edge . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 28
score: 99.85295657835145
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { n . has CaMeL Children ( ) ; }
rank: 28
score: 99.83235280106707
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 28
score: 99.8263927641369
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 28
score: 99.8191307178442
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 28
score: 99.81304106841216
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , cur CaMeL Cfg ) ;
rank: 28
score: 99.79280598958333
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 28
score: 99.78329427083334
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 29
score: 99.85265625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) . get CaMeL
rank: 29
score: 99.83193479938272
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 29
score: 99.82948668573944
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 29
score: 99.8262227376302
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 29
score: 99.81886693050987
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 29
score: 99.8130080764358
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 29
score: 99.80171162373311
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL First CaMeL Child ( ) ) ; }
rank: 29
score: 99.79254924075704
patch: case Type . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 29
score: 99.73923688616071
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 30
score: 99.852607421875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node (
rank: 30
score: 99.83155616554055
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . RETURN ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 30
score: 99.82878960503473
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 30
score: 99.82530120481928
patch: case Token . BLOCK : while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 30
score: 99.81854771205357
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 30
score: 99.81285903033088
patch: case BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 30
score: 99.80141168908227
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 30
score: 99.79141026327055
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; }
rank: 30
score: 99.73870693108974
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 31
score: 99.85248046875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) . get CaMeL Parent ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child
rank: 31
score: 99.83083164544753
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 31
score: 99.82827758789062
patch: } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 31
score: 99.82466264204545
patch: case Token . BLOCK : { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 31
score: 99.81770833333333
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 31
score: 99.81280259683099
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 31
score: 99.80118918117088
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 31
score: 99.79140314980158
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 31
score: 99.78236967941811
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 31
score: 99.73868709415585
patch: case Token . BLOCK : case Token . CONTINUE : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 32
score: 99.8299560546875
patch: case Token . BREAK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 32
score: 99.82822875976562
patch: } } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 32
score: 99.8246474847561
patch: } else { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 32
score: 99.81753849637681
patch: } if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 32
score: 99.80059814453125
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 32
score: 99.78224690755208
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 32
score: 99.73814978966347
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 33
score: 99.85150390625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) .
rank: 33
score: 99.82890505907012
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 33
score: 99.82798902294304
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 33
score: 99.8174064390121
patch: case Token . BLOCK : Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 33
score: 99.80050223214286
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 33
score: 99.79073026582792
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 33
score: 99.78215921336206
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 33
score: 99.7380939640411
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 34
score: 99.82777518656717
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 34
score: 99.823759765625
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 34
score: 99.81601034628379
patch: case Token . BLOCK : Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 34
score: 99.81066545758928
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 34
score: 99.80043658088235
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 34
score: 99.79038599917763
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 34
score: 99.78215579710145
patch: case $STRING$ : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 34
score: 99.73735087626689
patch: case Di CaMeL Graph CaMeL Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 35
score: 99.8512109375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( )
rank: 35
score: 99.82865978422619
patch: try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 35
score: 99.82757753314394
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 35
score: 99.8218891189759
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 35
score: 99.81544975385275
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 35
score: 99.8103889016544
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 35
score: 99.80000964506173
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ) ;
rank: 35
score: 99.79026041666667
patch: case Token . BLOCK : case Token . BREAK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 35
score: 99.7820477552817
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 35
score: 99.73716227213542
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 36
score: 99.85064453125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL
rank: 36
score: 99.8275484751506
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { int first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 36
score: 99.82736127804488
patch: case Token . BLOCK : if ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 36
score: 99.81006537543402
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , node ) ;
rank: 36
score: 99.79948313643293
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 36
score: 99.78955078125
patch: case Token . BLOCK : case Token . BREAK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 36
score: 99.7810920266544
patch: case Token . BLOCK : case Token . CONTINUE : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 36
score: 99.73693517736487
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 37
score: 99.850302734375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute
rank: 37
score: 99.82735770089286
patch: case Token . BLOCK : if ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 37
score: 99.8212002840909
patch: case Node . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 37
score: 99.81449869791666
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 37
score: 99.81006493506493
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ; }
rank: 37
score: 99.79935758659639
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 37
score: 99.78097005208333
patch: case Di CaMeL Graph CaMeL Node . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 38
score: 99.849873046875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node (
rank: 38
score: 99.82729867788461
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 38
score: 99.82693481445312
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 38
score: 99.8206275201613
patch: } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 38
score: 99.8140007467831
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 38
score: 99.80986870659723
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 38
score: 99.7809375
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 39
score: 99.849853515625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) . get CaMeL Parent ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child (
rank: 39
score: 99.82719116210937
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 39
score: 99.82677909655449
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 39
score: 99.81331129807693
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 39
score: 99.80939398871527
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 39
score: 99.79929633989725
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; }
rank: 39
score: 99.78005455280173
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 39
score: 99.73604166666667
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 40
score: 99.84913465711806
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 40
score: 99.82718542850378
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 40
score: 99.82666015625
patch: case Token . RETURN : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 40
score: 99.82028198242188
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 40
score: 99.81327998173701
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 40
score: 99.80919053819444
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ) ;
rank: 40
score: 99.79889787946429
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = node . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 40
score: 99.78000139508929
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 41
score: 99.84892578125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n . get CaMeL First CaMeL Child ( ) ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL
rank: 41
score: 99.82697143554688
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 41
score: 99.819921875
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 41
score: 99.81319661458333
patch: } try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 41
score: 99.77941717617753
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 41
score: 99.73585269325658
patch: try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 42
score: 99.84861328125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL
rank: 42
score: 99.82632300967262
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 42
score: 99.82599954044117
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 42
score: 99.81988525390625
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 42
score: 99.80829535590277
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 42
score: 99.79854090073529
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 42
score: 99.78776719835069
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 42
score: 99.77930356378425
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 42
score: 99.73580446105072
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 43
score: 99.848466796875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL
rank: 43
score: 99.82628038194444
patch: case Token . RETURN : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 43
score: 99.82559088212025
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 43
score: 99.81945144489248
patch: if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 43
score: 99.81293487548828
patch: case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 43
score: 99.80820174955986
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , ) ;
rank: 43
score: 99.78744589315879
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == null ? null : try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ) ;
rank: 44
score: 99.826025390625
patch: case Token . FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 44
score: 99.82557373046875
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 44
score: 99.81941451149426
patch: case Node . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 44
score: 99.81289316152598
patch: } case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 44
score: 99.80805045114437
patch: case Token . BLOCK : if ( ! n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 44
score: 99.79752604166667
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 44
score: 99.78721454326923
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 44
score: 99.73524088541667
patch: try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return n . get CaMeL Destination ( ) . get CaMeL Value ( ) ; }
rank: 45
score: 99.84770439040493
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 45
score: 99.82557896205357
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 45
score: 99.82522786458334
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 45
score: 99.81900024414062
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; }
rank: 45
score: 99.81272135416667
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 45
score: 99.80758928571429
patch: case Exception . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 45
score: 99.78700764973958
patch: case Token . BLOCK : case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 46
score: 99.8474845467033
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 46
score: 99.82548217773437
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 46
score: 99.82522003560126
patch: if ( ! n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 46
score: 99.81189727783203
patch: } case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 46
score: 99.79724264705882
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 46
score: 99.77859455265411
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 47
score: 99.847314453125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node (
rank: 47
score: 99.82432861328125
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 47
score: 99.81810413707386
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 47
score: 99.8113515074824
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; }
rank: 47
score: 99.79664805237677
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 47
score: 99.78626302083333
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 47
score: 99.77837456597223
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 47
score: 99.7343986265121
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 48
score: 99.847138671875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL
rank: 48
score: 99.82502809289383
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL Next ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ) ;
rank: 48
score: 99.82432154605263
patch: if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 48
score: 99.81777556046195
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 48
score: 99.81123860677083
patch: } case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 48
score: 99.79664481026786
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 48
score: 99.7342578125
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 49
score: 99.84682184533227
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 49
score: 99.82490466889881
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 49
score: 99.82407659216773
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( first . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 49
score: 99.81103515625
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 49
score: 99.80634631849315
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , first ) ; }
rank: 49
score: 99.79617096656976
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ;
rank: 49
score: 99.7862215909091
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 49
score: 99.77773838827055
patch: case Branch . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 50
score: 99.84618591994382
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ;
rank: 50
score: 99.82477936921296
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 50
score: 99.82393704927884
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ;
rank: 50
score: 99.8162062311747
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 50
score: 99.81087679476352
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 50
score: 99.80618489583334
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { break ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 50
score: 99.79600545804794
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 50
score: 99.7862109375
patch: case Di CaMeL Graph CaMeL Node . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 50
score: 99.77767605251736
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 50
score: 99.73406487542229
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 51
score: 99.84603515625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node (
rank: 51
score: 99.81058175223214
patch: } if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 51
score: 99.78620256696429
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 51
score: 99.77763536241319
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 51
score: 99.73399522569444
patch: case Token . BREAK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 52
score: 99.82327657350352
patch: case Token . BLOCK : { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 52
score: 99.81559847608025
patch: } else { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 52
score: 99.81057692307692
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 52
score: 99.80550588688381
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( new Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 52
score: 99.78612029246794
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ) ;
rank: 52
score: 99.77733656939338
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 52
score: 99.73363226232394
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 53
score: 99.845947265625
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 53
score: 99.82353283110119
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 53
score: 99.82312622070313
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 53
score: 99.8099170629529
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 53
score: 99.8051822060033
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } case Token . RETURN :
rank: 53
score: 99.79568665286145
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node n = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 53
score: 99.78591086647727
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Value ( ) ) ; }
rank: 53
score: 99.7335106102196
patch: case Di CaMeL Graph CaMeL Node . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 54
score: 99.8458203125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child (
rank: 54
score: 99.82311681798987
patch: case Token . BREAK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 54
score: 99.82264833192568
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 54
score: 99.8152579842033
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 54
score: 99.80856838474025
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 54
score: 99.80513451804578
patch: case Type . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 54
score: 99.79549678679436
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; }
rank: 54
score: 99.78582512842466
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 54
score: 99.7763813405797
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 55
score: 99.845810546875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) . get CaMeL Parent ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child
rank: 55
score: 99.82269577752976
patch: case Token . FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 55
score: 99.82208638251582
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; }
rank: 55
score: 99.81517578125
patch: case Node . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 55
score: 99.80844350961539
patch: } if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 55
score: 99.80492829623287
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 55
score: 99.7953851161859
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ;
rank: 55
score: 99.78579427083334
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; }
rank: 55
score: 99.73311197916667
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 56
score: 99.84517578125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node (
rank: 56
score: 99.82207165025685
patch: case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 56
score: 99.81477481617647
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 56
score: 99.80844198690879
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 56
score: 99.80490944602273
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 56
score: 99.78572805304276
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ) ;
rank: 56
score: 99.77593169341216
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 56
score: 99.73292943050987
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 57
score: 99.844482421875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) , n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL
rank: 57
score: 99.82176513671875
patch: if ( ! n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 57
score: 99.80825892857143
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ;
rank: 57
score: 99.8046806227993
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ) ;
rank: 57
score: 99.79537915426587
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } }
rank: 57
score: 99.78538111636513
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Value ( ) ) ;
rank: 57
score: 99.7748779296875
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 57
score: 99.73277698863636
patch: case Token . BLOCK : case Token . BREAK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 58
score: 99.8224464699074
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 58
score: 99.80792327425372
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 58
score: 99.8045155699824
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 58
score: 99.79500325520833
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; }
rank: 58
score: 99.7852882179054
patch: case Token . BLOCK : if ( n . get CaMeL Next ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 58
score: 99.73250882919521
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 59
score: 99.84439453125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) )
rank: 59
score: 99.82242380061619
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 59
score: 99.80781635485198
patch: } case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 59
score: 99.80445620888158
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 59
score: 99.73223797686688
patch: try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 60
score: 99.82225385918674
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { remove CaMeL Dead CaMeL Expr CaMeL Statement CaMeL Safely ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 60
score: 99.82109203673245
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 60
score: 99.81416223404256
patch: if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 60
score: 99.80421206825658
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 60
score: 99.78464869449013
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 60
score: 99.73205352247807
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 61
score: 99.82178337191358
patch: case BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 61
score: 99.82095336914062
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 61
score: 99.81407277960527
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 61
score: 99.80736644847973
patch: } else { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 61
score: 99.80396864149306
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 61
score: 99.7943474264706
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 61
score: 99.78461657072368
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 61
score: 99.73202473958334
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 62
score: 99.843564453125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) . get CaMeL Parent
rank: 62
score: 99.82173156738281
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 62
score: 99.80732996323529
patch: } if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 62
score: 99.79384173768939
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 62
score: 99.77430402728874
patch: case Object . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 62
score: 99.7313232421875
patch: case Token . BLOCK : case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 63
score: 99.84318875718391
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; }
rank: 63
score: 99.82168802400915
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 63
score: 99.82031860351563
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 63
score: 99.81388671875
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 63
score: 99.80697428385416
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 63
score: 99.80380588107639
patch: case Type . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 63
score: 99.78454919763513
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 63
score: 99.7737109375
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else return n ;
rank: 63
score: 99.73125542534723
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 64
score: 99.84313071646342
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 64
score: 99.82164667693662
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 64
score: 99.82022485977564
patch: if ( n . has CaMeL Children ( ) ) { Node first = first . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 64
score: 99.81361455502717
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 64
score: 99.80686257102273
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 64
score: 99.80375591077302
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 64
score: 99.79339522349683
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 64
score: 99.78386262175324
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 64
score: 99.77353355532787
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ;
rank: 65
score: 99.82161850527109
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 65
score: 99.81350948033707
patch: case Token . BLOCK : { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 65
score: 99.80640680017606
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 65
score: 99.80354352678572
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( false ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 65
score: 99.79338235294118
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 65
score: 99.73116048177083
patch: case Token . RETURN : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 66
score: 99.8430078125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) )
rank: 66
score: 99.8211699695122
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 66
score: 99.82013325751582
patch: if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 66
score: 99.80332545230263
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } case Token . RETURN :
rank: 66
score: 99.79323299632352
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 66
score: 99.78354363692434
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 66
score: 99.77329995598592
patch: case Branch . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 66
score: 99.7309768264358
patch: case Di CaMeL Graph CaMeL Edge . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 67
score: 99.82106278582317
patch: case BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 67
score: 99.81985592532467
patch: if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 67
score: 99.80599225153688
patch: } else { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 67
score: 99.80295758928571
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( null ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 67
score: 99.78352864583333
patch: case Token . BREAK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 67
score: 99.77304222470238
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 68
score: 99.84287232990506
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; }
rank: 68
score: 99.82093178353658
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 68
score: 99.81983723958334
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 68
score: 99.81309742647059
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 68
score: 99.80567708333334
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 68
score: 99.80295572916667
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 68
score: 99.79307942708333
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) != null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 68
score: 99.783447265625
patch: case Token . BREAK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 68
score: 99.77279792033451
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 68
score: 99.73070337865259
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 69
score: 99.8428125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) . get CaMeL
rank: 69
score: 99.82092432228916
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node next = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 69
score: 99.81967163085938
patch: if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 69
score: 99.81291360294118
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 69
score: 99.80250608766234
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , compute CaMeL Following ( n ) ) ;
rank: 69
score: 99.79302757906626
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 69
score: 99.78310922475961
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 69
score: 99.77278926454741
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 69
score: 99.73058752111487
patch: try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return n . get CaMeL Destination ( ) . get CaMeL Value ( ) ;
rank: 70
score: 99.842119140625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) . get CaMeL Parent ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL
rank: 70
score: 99.82028610641892
patch: case Token . RETURN : if ( n . get CaMeL Type ( ) == Token . BLOCK ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 70
score: 99.80534561820652
patch: } try { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 70
score: 99.80214051942568
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 70
score: 99.79264734968355
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; }
rank: 70
score: 99.78307291666667
patch: case Token . RETURN : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 70
score: 99.77273875269397
patch: case Token . FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 70
score: 99.73056640625
patch: case Token . BREAK : case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 71
score: 99.84196920955883
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 71
score: 99.82022997359155
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { final Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 71
score: 99.8195646261867
patch: if ( n . has CaMeL Children ( ) ) { Node first = first . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 71
score: 99.81259084302326
patch: } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 71
score: 99.80525830765845
patch: } Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 71
score: 99.79262455174181
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ;
rank: 71
score: 99.78303608141448
patch: case Token . RETURN : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 71
score: 99.77258463541666
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 71
score: 99.73055680071721
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 72
score: 99.84193004261364
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 72
score: 99.82007137345678
patch: case Branch : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 72
score: 99.81954627403846
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 72
score: 99.81231496710527
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 72
score: 99.8051822060033
patch: case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 72
score: 99.80179219850352
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else if ( n . has CaMeL Children ( ) ) { break ; }
rank: 72
score: 99.79253609572785
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 72
score: 99.78264417146382
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 72
score: 99.73036104090073
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ;
rank: 73
score: 99.841923828125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) . get CaMeL Parent ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL
rank: 73
score: 99.81999482304217
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 73
score: 99.81949462890626
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 73
score: 99.80176459418402
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; break ;
rank: 73
score: 99.7724609375
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 73
score: 99.73027079814189
patch: case Token . FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 74
score: 99.8416796875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node (
rank: 74
score: 99.81995952560241
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 74
score: 99.81937866210937
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 74
score: 99.81204659598214
patch: case Token . BLOCK : while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 74
score: 99.80483669704861
patch: case Token . BLOCK : { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 74
score: 99.78244140625
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . RETURN ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 74
score: 99.73016276041666
patch: case Token . RETURN : case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 75
score: 99.84167694627193
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return n . get CaMeL First CaMeL Child ( ) ; }
rank: 75
score: 99.81965748856707
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 75
score: 99.78237630208334
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) || n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 75
score: 99.7296484375
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 76
score: 99.81942635995371
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 76
score: 99.81909919507575
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 76
score: 99.81150098778735
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 76
score: 99.8046875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 76
score: 99.8011328125
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { remove CaMeL Dead CaMeL Expr CaMeL Statement CaMeL Safely ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 76
score: 99.79155040922619
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; }
rank: 76
score: 99.78221336570945
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , g CaMeL Node ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 76
score: 99.77201224662163
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n . get CaMeL First CaMeL Child ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 77
score: 99.84154411764706
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 77
score: 99.81909555288462
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 77
score: 99.81118691934121
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 77
score: 99.80451594172297
patch: } try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 77
score: 99.801025390625
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , next ) ;
rank: 77
score: 99.79154508659639
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 77
score: 99.7817883613782
patch: if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 77
score: 99.77165928171642
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ) ; }
rank: 77
score: 99.72939706777598
patch: case Token . BREAK : case Token . CONTINUE : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 78
score: 99.81890510110294
patch: } else { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 78
score: 99.81883480674342
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL Next ( ) ) ) ;
rank: 78
score: 99.81110983455882
patch: case Token . BLOCK : { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 78
score: 99.80424499511719
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 78
score: 99.80098353794642
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 78
score: 99.78146774704392
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 78
score: 99.77155314700704
patch: case String . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 78
score: 99.72921125856165
patch: try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; }
rank: 79
score: 99.84111328125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) , n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node
rank: 79
score: 99.81886693050987
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 79
score: 99.81820455411585
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 79
score: 99.80423880912163
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 79
score: 99.80084549753289
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Next ( ) ) ;
rank: 79
score: 99.79144897460938
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 79
score: 99.78139973958334
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , g CaMeL Node ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 79
score: 99.72904763292911
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 80
score: 99.81811229292168
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 80
score: 99.81074465981013
patch: while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 80
score: 99.80422044836956
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 80
score: 99.80076032366071
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( true ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 80
score: 99.7812890625
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 80
score: 99.77130126953125
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 80
score: 99.72874207427536
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 81
score: 99.84083984375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node
rank: 81
score: 99.81848316461267
patch: case Token . BLOCK : { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 81
score: 99.81767835115132
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 81
score: 99.81073288690476
patch: case Type . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 81
score: 99.80418602195945
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 81
score: 99.77126736111111
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; } }
rank: 82
score: 99.81838463092673
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 82
score: 99.817626953125
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 82
score: 99.80403645833333
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 82
score: 99.80061170789931
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 82
score: 99.79077774439102
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 82
score: 99.77126430457747
patch: case Integer . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 82
score: 99.72829489511986
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 83
score: 99.81066313244048
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 83
score: 99.80364752435065
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 83
score: 99.80026292067308
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 83
score: 99.79076580668605
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 83
score: 99.78047375801282
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 83
score: 99.7279892958604
patch: case Token . BLOCK : case Token . CONTINUE : case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 84
score: 99.84029296875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child (
rank: 84
score: 99.8181720890411
patch: } else { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 84
score: 99.81755762924382
patch: case FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 84
score: 99.81035862198796
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 84
score: 99.80319590111301
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 84
score: 99.80000697544642
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 84
score: 99.79075896434294
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 84
score: 99.78047260485198
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 84
score: 99.77115885416667
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 85
score: 99.840166015625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child (
rank: 85
score: 99.8180731411638
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 85
score: 99.81739457831326
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 85
score: 99.81016885080645
patch: } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 85
score: 99.80318196614583
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 85
score: 99.79992159991197
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 85
score: 99.79051254734848
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 85
score: 99.78033353365385
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 85
score: 99.77114739216549
patch: case Number . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 85
score: 99.72773850132042
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) ;
rank: 86
score: 99.8401171875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) , n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL
rank: 86
score: 99.81805033623418
patch: if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 86
score: 99.80998678768383
patch: } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 86
score: 99.80313325264085
patch: } case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 86
score: 99.79030871035448
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 86
score: 99.7710669732863
patch: case Di CaMeL Graph CaMeL Edge . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 87
score: 99.81798377403847
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 87
score: 99.80998211596386
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 87
score: 99.803125
patch: } Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 87
score: 99.79001433939874
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 87
score: 99.7802544135552
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 87
score: 99.72756545608108
patch: case Di CaMeL Graph CaMeL Edge . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 88
score: 99.840087890625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) . get CaMeL Parent CaMeL Node ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First
rank: 88
score: 99.81794367609797
patch: case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 88
score: 99.80311802455357
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 88
score: 99.78017578125
patch: case Di CaMeL Graph CaMeL Edge . FUNCTION : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 88
score: 99.77058807791096
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 89
score: 99.817919921875
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 89
score: 99.81697479666096
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 89
score: 99.80966282894737
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 89
score: 99.80302598741319
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 89
score: 99.7990154109589
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 89
score: 99.78986559416118
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 89
score: 99.78017446157095
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 89
score: 99.77044761344177
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 89
score: 99.7273147170608
patch: case Di CaMeL Graph CaMeL Node . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 90
score: 99.83994140625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node (
rank: 90
score: 99.81785231370192
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 90
score: 99.81677063899254
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 90
score: 99.80936104910714
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 90
score: 99.80291047643442
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 90
score: 99.798828125
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 90
score: 99.78966864224138
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 90
score: 99.77993734780844
patch: if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 90
score: 99.72721565543831
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return n ; }
rank: 91
score: 99.839921875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n )
rank: 91
score: 99.81673569277109
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 91
score: 99.80913880813954
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 91
score: 99.79879056490384
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) || n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 91
score: 99.7894860692771
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = node . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 91
score: 99.77008551520271
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 91
score: 99.72684244791667
patch: case Di CaMeL Graph CaMeL Edge . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 92
score: 99.83978355094177
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 92
score: 99.81649169921874
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 92
score: 99.80909220377605
patch: case Token . BLOCK : while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 92
score: 99.80271251166045
patch: } Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 92
score: 99.7987419577206
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL Node ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 92
score: 99.78924239309211
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 92
score: 99.77001953125
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Branch . UNCOND ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 92
score: 99.72671875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 93
score: 99.80249357876713
patch: } try { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 93
score: 99.79869249131944
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 93
score: 99.78891136532738
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 93
score: 99.77978515625
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 93
score: 99.72669921875
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 94
score: 99.839248046875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) . get CaMeL Parent ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis .
rank: 94
score: 99.81746215820313
patch: if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 94
score: 99.81640625
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { final Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 94
score: 99.808251953125
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 94
score: 99.80242000214041
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 94
score: 99.79865321828358
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } switch ( n . get CaMeL Type ( ) ) {
rank: 94
score: 99.78883120888158
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) ; }
rank: 94
score: 99.7796063490317
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ) ;
rank: 94
score: 99.76989215353261
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 94
score: 99.72653377757354
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ;
rank: 95
score: 99.83917557565789
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 95
score: 99.81741032130282
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 95
score: 99.8160546875
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 95
score: 99.80238079202586
patch: } Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 95
score: 99.79835359815141
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 95
score: 99.78867979307432
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = ( Node ) n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 95
score: 99.779541015625
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 95
score: 99.76986116976352
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; }
rank: 96
score: 99.8081701807229
patch: } else { } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 96
score: 99.80237850900424
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 96
score: 99.79832699424342
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 96
score: 99.7886603860294
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 96
score: 99.77930939503206
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Di CaMeL Graph CaMeL Edge . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 96
score: 99.76963056144068
patch: case Token . UNCOND : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 96
score: 99.72591359991776
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 97
score: 99.83906964557927
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 97
score: 99.81733072916667
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 97
score: 99.81600374788852
patch: case Token . RETURN : if ( n . get CaMeL Type ( ) == Token . RETURN ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 97
score: 99.8080780372191
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 97
score: 99.80231298159246
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 97
score: 99.7983200485642
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 97
score: 99.78864203559027
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 97
score: 99.77901151582792
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . get CaMeL Next ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 97
score: 99.76952385179925
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 97
score: 99.72581914645522
patch: case Token . BLOCK : case Token . CONTINUE : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 98
score: 99.8390625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) . get CaMeL Value ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL
rank: 98
score: 99.81702270507813
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 98
score: 99.81589673913044
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 98
score: 99.80781947544642
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return n . get CaMeL First CaMeL Child ( ) ; }
rank: 98
score: 99.8021573153409
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 98
score: 99.79829915364583
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } switch ( n . get CaMeL Type ( ) ) { case Token . RETURN :
rank: 98
score: 99.78862984572785
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) || n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 98
score: 99.77873399522569
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 98
score: 99.76941499255952
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 98
score: 99.7256095640121
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 99
score: 99.839013671875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow
rank: 99
score: 99.81584123883928
patch: case BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 99
score: 99.79811006433823
patch: case Branch : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 99
score: 99.77847867398648
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 99
score: 99.7693593199824
patch: case Node . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 99
score: 99.72551133897569
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 100
score: 99.83894954819277
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 100
score: 99.81693638392858
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 100
score: 99.81574781013258
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 100
score: 99.80774596497253
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 100
score: 99.80153294613487
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 100
score: 99.78847804214016
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 100
score: 99.72546545251623
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 101
score: 99.8388671875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node
rank: 101
score: 99.8169189453125
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 101
score: 99.80149147727273
patch: case Token . BLOCK : try { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 101
score: 99.78834514853395
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 101
score: 99.77838917267628
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Di CaMeL Graph CaMeL Edge . BLOCK ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 101
score: 99.72545885059931
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 102
score: 99.838798828125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n )
rank: 102
score: 99.815185546875
patch: case Token . BLOCK : if ( ! n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 102
score: 99.80132697610294
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) ; }
rank: 102
score: 99.79772271050348
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 102
score: 99.78824626865672
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; }
rank: 102
score: 99.76885728433099
patch: case Node . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 102
score: 99.72528334066901
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 103
score: 99.8387920673077
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 103
score: 99.81654575892857
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 103
score: 99.8151200457317
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 103
score: 99.80131918697033
patch: case Token . BLOCK : { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 103
score: 99.79770379317434
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } case Token . BREAK :
rank: 103
score: 99.78823707217262
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; }
rank: 103
score: 99.77826891447368
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 103
score: 99.72525363498264
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ;
rank: 104
score: 99.81643097310126
patch: if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 104
score: 99.81499885110294
patch: case RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 104
score: 99.80726921695403
patch: case Token . BLOCK : if ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 104
score: 99.8008700284091
patch: case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 104
score: 99.79767523871527
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , null ) ;
rank: 104
score: 99.78823110219595
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL First CaMeL Child ( ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL First CaMeL Child ( ) ) ; }
rank: 104
score: 99.77813877203526
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 104
score: 99.76874314692982
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 105
score: 99.83876843398876
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 105
score: 99.81619873046876
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 105
score: 99.80713478915662
patch: case Token . BLOCK : while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 105
score: 99.8008171530331
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 105
score: 99.78821302440069
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) , n . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 105
score: 99.77808568384741
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 106
score: 99.83845186781609
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; }
rank: 106
score: 99.81596869926948
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 106
score: 99.8146240234375
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 106
score: 99.8006937966418
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; }
rank: 106
score: 99.79760064019098
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) != null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 106
score: 99.78804976851852
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; }
rank: 106
score: 99.76759387600806
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 106
score: 99.72495719178082
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 107
score: 99.81459008193598
patch: case RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 107
score: 99.80060433650362
patch: } while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 107
score: 99.78769066220238
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 107
score: 99.7778510551948
patch: case Token . BLOCK : case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 107
score: 99.72492418791118
patch: * / return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 108
score: 99.838056640625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( )
rank: 108
score: 99.81582641601562
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; }
rank: 108
score: 99.81453548569277
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { String first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 108
score: 99.8062641189759
patch: case Type . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 108
score: 99.80060011340726
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) != null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 108
score: 99.79744698660714
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( this ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 108
score: 99.7875390625
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 108
score: 99.76627361240672
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 108
score: 99.72482139185855
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 109
score: 99.83803013392857
patch: } case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 109
score: 99.81580729166667
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 109
score: 99.80625
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 109
score: 99.80046251085069
patch: case Token . BLOCK : { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 109
score: 99.79743957519531
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) , n ) ;
rank: 109
score: 99.7873093938253
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ;
rank: 109
score: 99.77776943108974
patch: case Token . BLOCK : case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 109
score: 99.76615287162163
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { break ; } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 110
score: 99.83795487253289
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ;
rank: 110
score: 99.81431616806402
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 110
score: 99.80620404411765
patch: try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 110
score: 99.80037667410714
patch: } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 110
score: 99.79732452876983
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } case Token . RETURN :
rank: 110
score: 99.78699171686748
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . BLOCK ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 110
score: 99.77766081574676
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; }
rank: 110
score: 99.7660888671875
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) != null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 110
score: 99.72439236111111
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 111
score: 99.83792509191177
patch: } case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 111
score: 99.80590015453296
patch: case Token . BLOCK : { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 111
score: 99.77761358963816
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 111
score: 99.76607983732876
patch: case Branch . BLOCK : if ( n . get CaMeL Parent ( ) != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 111
score: 99.72438802083333
patch: case Di CaMeL Graph CaMeL Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 112
score: 99.81551513671874
patch: if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 112
score: 99.8142295745482
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Object first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 112
score: 99.8057737886236
patch: case Node . BLOCK : { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 112
score: 99.79999831627156
patch: } case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 112
score: 99.7970469300176
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 112
score: 99.78655395507812
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; } }
rank: 112
score: 99.77759415064102
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 112
score: 99.7660546875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( first ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 112
score: 99.72432564400337
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 113
score: 99.837666015625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL
rank: 113
score: 99.81419427710843
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { remove CaMeL Dead CaMeL Expr CaMeL Statement CaMeL Safely ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 113
score: 99.80533854166667
patch: case Token . BLOCK : try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 113
score: 99.79996219758064
patch: } try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 113
score: 99.78647085336539
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 113
score: 99.77743070419521
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ;
rank: 113
score: 99.76596408420139
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } ;
rank: 113
score: 99.7241275185033
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 114
score: 99.8140184355945
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 114
score: 99.8051477191092
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 114
score: 99.79994223151408
patch: case Token . BLOCK : if ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 114
score: 99.78631232766544
patch: case Token . BLOCK : case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 114
score: 99.7773303724315
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 114
score: 99.76572916666667
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 114
score: 99.72410396107456
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 115
score: 99.81400602409639
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 115
score: 99.80514526367188
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 115
score: 99.79988141741072
patch: Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 115
score: 99.77732496995192
patch: if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 115
score: 99.7656640625
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 115
score: 99.723974609375
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 116
score: 99.83733167146382
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 116
score: 99.81504047780797
patch: } else { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 116
score: 99.81395278742283
patch: case CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 116
score: 99.80511474609375
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 116
score: 99.79975190033784
patch: } else { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 116
score: 99.79641208400975
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 116
score: 99.78614416787791
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ) ;
rank: 116
score: 99.77727593315973
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ) ; }
rank: 116
score: 99.76565987723214
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 116
score: 99.72388756793478
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; }
rank: 117
score: 99.81502075195313
patch: if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 117
score: 99.81392366340361
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 117
score: 99.80498952963917
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 117
score: 99.79630962171052
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } case Token . BREAK :
rank: 117
score: 99.78609664351852
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; }
rank: 117
score: 99.77721838048987
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) != null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 117
score: 99.72360530369718
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL Destination ( ) . get CaMeL Value ( ) ; }
rank: 118
score: 99.81499565972223
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 118
score: 99.80495174632352
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 118
score: 99.79952272227112
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 118
score: 99.79618489583333
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 118
score: 99.78608685661764
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first , n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 118
score: 99.77717219172297
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 118
score: 99.76560345818015
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 118
score: 99.72337147887323
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ) ;
rank: 119
score: 99.8371484375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) . get CaMeL Parent ( ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child
rank: 119
score: 99.81497395833334
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 119
score: 99.81388647762346
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 119
score: 99.80475050403226
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 119
score: 99.79946463448661
patch: } try { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 119
score: 99.79608319256756
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 119
score: 99.78579028684702
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 119
score: 99.77709643871754
patch: case Token . BLOCK : case Token . RETURN : if ( n . get CaMeL Next ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 119
score: 99.72313818993507
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 120
score: 99.8149664463141
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 120
score: 99.80444679797536
patch: case Token . BLOCK : while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 120
score: 99.7994320518092
patch: case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 120
score: 99.79595626027961
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 120
score: 99.78556315104167
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 120
score: 99.77707107345779
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 120
score: 99.76537082619863
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } ; }
rank: 120
score: 99.72313802083333
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 121
score: 99.83703476123596
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 121
score: 99.81488715277777
patch: try { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 121
score: 99.804443359375
patch: case Token . BLOCK : { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 121
score: 99.79937385110294
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 121
score: 99.78510199652777
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) , n ) ) ; }
rank: 121
score: 99.77697916666666
patch: case Di CaMeL Graph CaMeL Edge . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 121
score: 99.76534786739865
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 121
score: 99.72308670847039
patch: case Token . BREAK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 122
score: 99.83698763912672
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 122
score: 99.81484869462025
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 122
score: 99.79932996961806
patch: Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 122
score: 99.79583984375
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 122
score: 99.78508649553571
patch: case Token . BLOCK : if ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 122
score: 99.77686866554055
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . BREAK ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 122
score: 99.76526738556338
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 122
score: 99.72307854729729
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 123
score: 99.81461165787337
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 123
score: 99.80434283088235
patch: } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 123
score: 99.79930039702869
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 123
score: 99.79583740234375
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 123
score: 99.78495228441456
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 123
score: 99.77669493792808
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == null ? null : Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 123
score: 99.7229794784331
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 124
score: 99.81458740234375
patch: if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 124
score: 99.8130126953125
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) . get CaMeL Type ( ) == Token . BLOCK ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 124
score: 99.80433519580696
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 124
score: 99.78478860294118
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 124
score: 99.77660039645522
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 124
score: 99.72280544704861
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 125
score: 99.8365234375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL
rank: 125
score: 99.81451231060606
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 125
score: 99.8129749036815
patch: case Token . BREAK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 125
score: 99.80421006944445
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 125
score: 99.79926215277777
patch: } case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 125
score: 99.79555989583334
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 125
score: 99.78471479023973
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 125
score: 99.77657376802884
patch: case Token . BLOCK : case Token . RETURN : if ( n . get CaMeL Next ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 125
score: 99.7649579115317
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 125
score: 99.72279296875
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 126
score: 99.81440873579545
patch: } if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 126
score: 99.81260718368902
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 126
score: 99.80418157003012
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 126
score: 99.79541015625
patch: case BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 126
score: 99.77655194256756
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 126
score: 99.76492838541667
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Branch . BLOCK ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 126
score: 99.72268415178571
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 127
score: 99.836357421875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching
rank: 127
score: 99.81232048483456
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 127
score: 99.80398033405173
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 127
score: 99.79924382390203
patch: } case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 127
score: 99.79540307971014
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 127
score: 99.7845703125
patch: case Token . BLOCK : case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 127
score: 99.77652994791667
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ;
rank: 128
score: 99.81420158617425
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 128
score: 99.8036012113764
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 128
score: 99.79922645970395
patch: case Token . BLOCK : { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 128
score: 99.79534326840754
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; break ; }
rank: 128
score: 99.78444086119185
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 128
score: 99.77636058910473
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , g CaMeL Node ) ;
rank: 128
score: 99.76462013134058
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 128
score: 99.72252179574275
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 129
score: 99.83596969436813
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ;
rank: 129
score: 99.81378956330128
patch: if ( n . has CaMeL Children ( ) ) { Node first = node . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 129
score: 99.81210112235915
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 129
score: 99.80358455882353
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 129
score: 99.7991748754529
patch: } if ( n . has CaMeL Children ( ) ) { Node first = node . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 129
score: 99.79520670572917
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } switch ( n . get CaMeL Type ( ) ) { case Token . BREAK :
rank: 129
score: 99.78444086119185
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 129
score: 99.7224911971831
patch: case Token . BREAK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 130
score: 99.83588187302215
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 130
score: 99.81376342773437
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 130
score: 99.80355798192771
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 130
score: 99.79913884943181
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 130
score: 99.78416313559322
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } }
rank: 130
score: 99.77632649739583
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 130
score: 99.72242337740384
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 131
score: 99.83568359375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) . get CaMeL Parent ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow
rank: 131
score: 99.81372379351266
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 131
score: 99.80352711397059
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 131
score: 99.79898031655844
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 131
score: 99.776123046875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 131
score: 99.76447211371527
patch: case Branch . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 131
score: 99.72232181078768
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return n . get CaMeL Destination ( ) . get CaMeL Value ( ) ; }
rank: 132
score: 99.83568274456522
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 132
score: 99.8035203887195
patch: } else { } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 132
score: 99.79896763392857
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 132
score: 99.79478934151786
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else if ( n . has CaMeL Children ( ) ) { break ;
rank: 132
score: 99.77586622362013
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . get CaMeL Next ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 132
score: 99.76429191468254
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 132
score: 99.7222999366554
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( first ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 133
score: 99.8356640625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis .
rank: 133
score: 99.8133643897804
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 133
score: 99.81160835597827
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 133
score: 99.79476589626736
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , false ) ;
rank: 133
score: 99.77580823396382
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 133
score: 99.76414640184859
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 133
score: 99.72201171875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 134
score: 99.81323586047536
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 134
score: 99.8034914852528
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 134
score: 99.79865432997882
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 134
score: 99.79434364720395
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Value ( ) ) ;
rank: 134
score: 99.78338999807099
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) , n ) ; }
rank: 134
score: 99.77574965533088
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 134
score: 99.76414271763393
patch: case $STRING$ : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 134
score: 99.72199358258929
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 135
score: 99.83512972608025
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n . get CaMeL First CaMeL Child ( ) ) ) ; }
rank: 135
score: 99.81323551226266
patch: if ( n . has CaMeL Children ( ) ) { Node first = node . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 135
score: 99.81146460843374
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 135
score: 99.77573305600649
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 135
score: 99.76405164930556
patch: case Token . UNCOND : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 135
score: 99.72189529220779
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : case RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 136
score: 99.835107421875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n
rank: 136
score: 99.81321149553571
patch: case Token . BLOCK : while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 136
score: 99.81133208403716
patch: case Token . BREAK : if ( n . get CaMeL Type ( ) == Token . BLOCK ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 136
score: 99.80340576171875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 136
score: 99.7939586900685
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; Node try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 136
score: 99.78335608057229
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) != null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; }
rank: 136
score: 99.77571614583333
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 136
score: 99.7639813490317
patch: case Token . FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 136
score: 99.7218116554054
patch: case Di CaMeL Graph CaMeL Node . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 137
score: 99.83506825206044
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 137
score: 99.80308314732143
patch: case Token . BLOCK : if ( node . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 137
score: 99.7983916311553
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ;
rank: 137
score: 99.79391961348684
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { break ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 137
score: 99.77564728565706
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . get CaMeL Next ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 137
score: 99.76364474826389
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) ; }
rank: 137
score: 99.72176631804436
patch: case Token . BREAK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 138
score: 99.81270105698529
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 138
score: 99.81115206866197
patch: case Token . BLOCK : if ( ! n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 138
score: 99.8030422044837
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; }
rank: 138
score: 99.79818148226352
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 138
score: 99.7937400928442
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 138
score: 99.78318684895834
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; }
rank: 138
score: 99.77557942708333
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . BREAK ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 138
score: 99.76348307291667
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 138
score: 99.72143237621754
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 139
score: 99.81259617660984
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 139
score: 99.8030078125
patch: case Node . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 139
score: 99.7978515625
patch: } try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 139
score: 99.7935444846082
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 139
score: 99.78306525735294
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 139
score: 99.775546875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , g CaMeL Node ) ; }
rank: 139
score: 99.76347824622844
patch: case Type . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 139
score: 99.72137276785715
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL Destination ( ) . get CaMeL Value ( ) ;
rank: 140
score: 99.80284369169776
patch: } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 140
score: 99.79783149614725
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 140
score: 99.79346372003425
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } break ;
rank: 140
score: 99.78300170898437
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 140
score: 99.77545487253289
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . get CaMeL Next ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 140
score: 99.7633856411638
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) ) { break ; }
rank: 140
score: 99.72130347079919
patch: case Di CaMeL Graph CaMeL Edge . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 141
score: 99.81230185688406
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 141
score: 99.80268895348837
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 141
score: 99.79782552083333
patch: } try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 141
score: 99.79314690667229
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) , n ) ;
rank: 141
score: 99.78288517441861
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; }
rank: 141
score: 99.77542818509616
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 141
score: 99.7632564715485
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 141
score: 99.72124481201172
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 142
score: 99.83471325860508
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 142
score: 99.81229248046876
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n , n . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 142
score: 99.79314221833882
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 142
score: 99.77542550223214
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { try { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 142
score: 99.76309663955479
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 142
score: 99.72117017663044
patch: case Token . BLOCK : case Token . CONTINUE : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 143
score: 99.81089952256944
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == Branch . UNCOND ) ;
rank: 143
score: 99.80257515285327
patch: while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 143
score: 99.79775538589016
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 143
score: 99.79308923498377
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . get CaMeL Type ( ) == Token . FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 143
score: 99.7827439948694
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 143
score: 99.77533280222039
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == null ? null : try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 143
score: 99.76268880208333
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 143
score: 99.72111680772569
patch: case Token . BREAK : case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 144
score: 99.834404296875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL
rank: 144
score: 99.81199317642405
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; }
rank: 144
score: 99.81077315167683
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 144
score: 99.80255998883929
patch: case Node . BLOCK : while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 144
score: 99.79769112723214
patch: } else { } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 144
score: 99.79300130208334
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , g CaMeL Node ) ; }
rank: 144
score: 99.78258856411638
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 144
score: 99.77517860814145
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 144
score: 99.72093441611842
patch: case Token . RETURN : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 145
score: 99.81195670114437
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 145
score: 99.81077270507812
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 145
score: 99.802490234375
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 145
score: 99.79744344682835
patch: case Token . BLOCK : Node first = Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 145
score: 99.79289202008928
patch: case Token . BLOCK : if ( n . has CaMeL Next ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 145
score: 99.7208187705592
patch: case Token . BLOCK : case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 146
score: 99.83411175271739
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 146
score: 99.81194010416667
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = null ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 146
score: 99.81076171875
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 146
score: 99.80238640445403
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 146
score: 99.79735677083333
patch: } try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 146
score: 99.78251720610119
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; }
rank: 146
score: 99.77501894822761
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 146
score: 99.76255923411885
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { break ; } case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 146
score: 99.72053385416666
patch: case Di CaMeL Graph CaMeL Node . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 147
score: 99.81073512801204
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 147
score: 99.80232377485795
patch: case Node . BLOCK : { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 147
score: 99.79727761787281
patch: } if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 147
score: 99.79280831473214
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 147
score: 99.78250988618827
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ) ;
rank: 147
score: 99.72037301936619
patch: case Token . RETURN : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 148
score: 99.833876953125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL
rank: 148
score: 99.81184244791666
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 148
score: 99.81050415039063
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 148
score: 99.80222886029412
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 148
score: 99.79724884033203
patch: case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 148
score: 99.7927968199824
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , ) ) ;
rank: 148
score: 99.7825
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 148
score: 99.77484955658784
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . CONTINUE ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 148
score: 99.72022840711806
patch: case Token . RETURN : case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 149
score: 99.833876953125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child
rank: 149
score: 99.81176403985508
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return n . get CaMeL First CaMeL Child ( ) ;
rank: 149
score: 99.80212279040404
patch: case Token . BLOCK : if ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 149
score: 99.79723442925348
patch: } try { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 149
score: 99.79256510416667
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; case Token . RETURN :
rank: 149
score: 99.78237951807229
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ;
rank: 149
score: 99.7747150577911
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 149
score: 99.76227864583333
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 149
score: 99.72007533482143
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 150
score: 99.83369140625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) , n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node (
rank: 150
score: 99.81166098151408
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 150
score: 99.81042639001623
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 150
score: 99.80207975618131
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 150
score: 99.7970660665761
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 150
score: 99.79255022321429
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node next = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 150
score: 99.78235294117647
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 150
score: 99.7746875
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 150
score: 99.76214810075432
patch: case Object . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 150
score: 99.71992323133681
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 151
score: 99.833671875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL
rank: 151
score: 99.81039511190879
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . BLOCK ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 151
score: 99.79686771222015
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 151
score: 99.78217093552215
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 151
score: 99.76210088315217
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ) ; }
rank: 151
score: 99.71990769909274
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 152
score: 99.833623046875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n
rank: 152
score: 99.81165052440069
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 152
score: 99.81039037459936
patch: case Token . BREAK : if ( n . get CaMeL Parent ( ) == null ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 152
score: 99.79683961730072
patch: } else { } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 152
score: 99.7923726663961
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 152
score: 99.78216737689394
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) || n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 152
score: 99.77454144021739
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 152
score: 99.7620018115942
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( next . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 152
score: 99.71973325128425
patch: case Token . FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 153
score: 99.833564453125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n . get CaMeL First CaMeL Child ( ) ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node
rank: 153
score: 99.8116371468322
patch: } else { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 153
score: 99.81016366693038
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 153
score: 99.80194606551204
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 153
score: 99.79673978365385
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n ; } }
rank: 153
score: 99.78203830948796
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 153
score: 99.77445788261218
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 153
score: 99.7619921875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 153
score: 99.7197265625
patch: case Token . BREAK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 154
score: 99.83355034722223
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 154
score: 99.80997395833333
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 154
score: 99.80189251077586
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 154
score: 99.7966839334239
patch: } Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 154
score: 99.79213169642857
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL Last CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 154
score: 99.78202024647888
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = node . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 154
score: 99.71963661595395
patch: try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 155
score: 99.81154406910211
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 155
score: 99.80179310993977
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 155
score: 99.79658615757042
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 155
score: 99.77425756209936
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 156
score: 99.833427734375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis .
rank: 156
score: 99.81151614972015
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 156
score: 99.80941917782738
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { int first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 156
score: 99.80171508789063
patch: } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 156
score: 99.79208583047945
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 156
score: 99.77422008775685
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ) ;
rank: 156
score: 99.76151398689517
patch: case Di CaMeL Graph CaMeL Node . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 156
score: 99.71951336927818
patch: case Token . BLOCK : case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 157
score: 99.83340308779762
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 157
score: 99.80920557228916
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 157
score: 99.8016690340909
patch: case Type . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 157
score: 99.79645134420956
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 157
score: 99.79205078125
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , first ) ;
rank: 157
score: 99.78166751585145
patch: case Token . BLOCK : case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 157
score: 99.77403135557432
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 157
score: 99.7195060483871
patch: case Token . RETURN : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 158
score: 99.83302734375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) .
rank: 158
score: 99.81148274739583
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 158
score: 99.80907440185547
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 158
score: 99.80158748183139
patch: case Token . BLOCK : if ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 158
score: 99.78156559641768
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 158
score: 99.77392578125
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 158
score: 99.7614356884058
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } switch ( n . get CaMeL Type ( ) ) {
rank: 158
score: 99.71944173177083
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 159
score: 99.832841796875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( )
rank: 159
score: 99.79201755275975
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) || n . get CaMeL Type ( ) == Token . FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 159
score: 99.7813232421875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } }
rank: 159
score: 99.77385979729729
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 159
score: 99.7614177547089
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else {
rank: 159
score: 99.71933162913604
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ) ;
rank: 160
score: 99.81139418658088
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 160
score: 99.7963616786859
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 160
score: 99.79200654871323
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL Next ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 160
score: 99.77372546073718
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) , n ) ;
rank: 160
score: 99.76135784646739
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 160
score: 99.71932180304276
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 161
score: 99.83265165441176
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 161
score: 99.81123310810811
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ;
rank: 161
score: 99.80879318882042
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 161
score: 99.8014541253811
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 161
score: 99.7919723923142
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 161
score: 99.78119437302215
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; }
rank: 161
score: 99.77369749391234
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 161
score: 99.76132674955986
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } . try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 161
score: 99.71918726679104
patch: case Token . BLOCK : case Token . BREAK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 162
score: 99.81107271634616
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 162
score: 99.80141551224227
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 162
score: 99.79633159022177
patch: case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 162
score: 99.79191545758928
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( $STRING$ ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 162
score: 99.78113511029412
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 162
score: 99.76125053510275
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 162
score: 99.71910439768145
patch: case Token . BLOCK : case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 163
score: 99.83259765625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node (
rank: 163
score: 99.79177594866071
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = node . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 163
score: 99.78088030133928
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; }
rank: 163
score: 99.77365885416667
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . CONTINUE ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 163
score: 99.71895714962122
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 164
score: 99.83242441152598
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ; }
rank: 164
score: 99.8083298141892
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 164
score: 99.80138629415761
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 164
score: 99.79628155048077
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 164
score: 99.79154575892858
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else if ( n . has CaMeL Children ( ) ) {
rank: 164
score: 99.78085409628379
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) != null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 164
score: 99.77333333333333
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 164
score: 99.71892346833882
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return n ;
rank: 165
score: 99.83238636363636
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 165
score: 99.81029964398734
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ;
rank: 165
score: 99.80137416294643
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 165
score: 99.78082770270271
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return first ; } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 165
score: 99.77328099959936
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( compute CaMeL Following ( n ) ) ;
rank: 165
score: 99.71874212449596
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 166
score: 99.80813151041667
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { break ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 166
score: 99.80134225398936
patch: } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 166
score: 99.79621124267578
patch: case Token . BLOCK : try { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 166
score: 99.79143880208333
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , cur CaMeL Cfg ) ; }
rank: 166
score: 99.78076746323529
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , false ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 166
score: 99.77326058650362
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == null ? null : try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ) ;
rank: 166
score: 99.76090271832192
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 167
score: 99.83234375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first
rank: 167
score: 99.7960399682971
patch: Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 167
score: 99.79143032962328
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else {
rank: 167
score: 99.78074935719937
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 167
score: 99.76090240478516
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 167
score: 99.7185546875
patch: case Di CaMeL Graph CaMeL Edge . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 168
score: 99.8323046875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node
rank: 168
score: 99.80801851455479
patch: case Token . RETURN : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 168
score: 99.8011944110577
patch: while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 168
score: 99.79126674107142
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { break ; } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 168
score: 99.78074340820312
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 168
score: 99.77305201480263
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 168
score: 99.76086927440069
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { break ; } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 168
score: 99.71832575563525
patch: case Di CaMeL Graph CaMeL Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 169
score: 99.83228515625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute
rank: 169
score: 99.80985260009766
patch: if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 169
score: 99.80793018830128
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL Next ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 169
score: 99.80116705246914
patch: if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 169
score: 99.79589068700396
patch: case Token . BLOCK : Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 169
score: 99.79119388640873
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } case Token . BREAK :
rank: 169
score: 99.78070820847603
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; }
rank: 169
score: 99.77292994449013
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 169
score: 99.76081095950704
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 169
score: 99.71830610795455
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return n ; }
rank: 170
score: 99.80971429286859
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 170
score: 99.8079208746189
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 170
score: 99.79579486268939
patch: } if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 170
score: 99.79107421875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 170
score: 99.77279502467105
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 170
score: 99.71828178510275
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 171
score: 99.83202506922468
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 171
score: 99.80956302472015
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( first . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 171
score: 99.80781964557927
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 171
score: 99.8009322648196
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 171
score: 99.79571624300372
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 171
score: 99.79107142857143
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( node ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 171
score: 99.78055540272888
patch: case Token . BLOCK : case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 171
score: 99.77276041666667
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 171
score: 99.76074887628425
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 171
score: 99.71824869791666
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 172
score: 99.80939875422297
patch: case Token . BLOCK : try { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 172
score: 99.80768500434027
patch: case Token . FUNCTION : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 172
score: 99.80089314778645
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; }
rank: 172
score: 99.79571444746377
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 172
score: 99.79097549229452
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ) ; }
rank: 172
score: 99.78052734375
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; }
rank: 172
score: 99.77274889823718
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ;
rank: 173
score: 99.80917474287975
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 173
score: 99.79562334947182
patch: } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 173
score: 99.78047749533582
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; }
rank: 173
score: 99.77273077713816
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ;
rank: 173
score: 99.7180897887324
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL Out CaMeL Edges ( ) ;
rank: 174
score: 99.8317578125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching
rank: 174
score: 99.80898708767361
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 174
score: 99.80741954985119
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 174
score: 99.79560546875
patch: case Token . BLOCK : Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 174
score: 99.79090033637152
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { try { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 174
score: 99.78035386029411
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , true ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 174
score: 99.7726953125
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == null ? null : try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ) ; }
rank: 174
score: 99.76063151041667
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 174
score: 99.71807391826923
patch: case Token . BLOCK : case Token . CONTINUE : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 175
score: 99.8316796875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) . get CaMeL Parent (
rank: 175
score: 99.80889254897389
patch: try { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 175
score: 99.80719866071429
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 175
score: 99.80069040697674
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 175
score: 99.79085964626736
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } case Token . RETURN : if ( n . has CaMeL Children ( ) ) {
rank: 175
score: 99.7802734375
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 175
score: 99.77268288352273
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 175
score: 99.71779350385275
patch: if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 176
score: 99.831513671875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; }
rank: 176
score: 99.80719489020271
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 176
score: 99.79557291666667
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return n . get CaMeL First CaMeL Child ( ) ; }
rank: 176
score: 99.78026717748398
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 176
score: 99.77267497859589
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , null ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 176
score: 99.76041015625
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 176
score: 99.7177544135552
patch: case Token . RETURN : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 177
score: 99.80707077752976
patch: case Token . BREAK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 177
score: 99.79556851773648
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 177
score: 99.79027622767858
patch: case Token . BLOCK : if ( n . has CaMeL Child ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 177
score: 99.78026692708333
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL First CaMeL Child ( ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL First CaMeL Child ( ) ) ; } }
rank: 177
score: 99.77264083059211
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 177
score: 99.71772786458334
patch: try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return n ; }
rank: 178
score: 99.83140345982143
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 178
score: 99.80851236979167
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( first . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 178
score: 99.80705915178571
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { int first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 178
score: 99.80055030616555
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 178
score: 99.77260228207237
patch: case Type . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 179
score: 99.831337890625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent CaMeL Node ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent CaMeL Node ( ) . get CaMeL
rank: 179
score: 99.80838111139113
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 179
score: 99.80705656828704
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 179
score: 99.79537160773026
patch: case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; }
rank: 179
score: 99.78993733723958
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK :
rank: 179
score: 99.78006685697116
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 179
score: 99.77249438142124
patch: case Token . BLOCK : case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 179
score: 99.76026204427083
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } ; }
rank: 179
score: 99.71765485491072
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 180
score: 99.831201171875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent CaMeL Node ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n
rank: 180
score: 99.80038941936728
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 180
score: 99.7953464673913
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) ; } }
rank: 180
score: 99.78967447916666
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 180
score: 99.78005514705882
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first , n ) ) ;
rank: 180
score: 99.7724799614448
patch: if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 180
score: 99.71752189867425
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ) ;
rank: 181
score: 99.83095703125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) . get CaMeL Parent (
rank: 181
score: 99.80690586419753
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 181
score: 99.80034722222223
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally {
rank: 181
score: 99.7952730948465
patch: } else { } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 181
score: 99.77993479082662
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; }
rank: 181
score: 99.77242702907986
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , null ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 181
score: 99.7174903759058
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 182
score: 99.8309375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute
rank: 182
score: 99.8003438313802
patch: case Token . BLOCK : while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 182
score: 99.79523026315789
patch: Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 182
score: 99.78956363075658
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 182
score: 99.71748697916667
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 183
score: 99.80806544569673
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 183
score: 99.80679321289062
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 183
score: 99.7951907835145
patch: } if ( n . has CaMeL Children ( ) ) { Node first = first . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 183
score: 99.7797256097561
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Source ( ) . get CaMeL Value ( ) ) ;
rank: 183
score: 99.77230874594156
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 183
score: 99.75950668797348
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) || n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 183
score: 99.71747147409539
patch: case Di CaMeL Graph CaMeL Edge . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 184
score: 99.8308203125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) .
rank: 184
score: 99.80796412417763
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 184
score: 99.80650366806402
patch: case Token . FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 184
score: 99.8001009480337
patch: case Token . BLOCK : try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 184
score: 99.78948653371711
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 184
score: 99.77966452205882
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , false ) ) ;
rank: 184
score: 99.77203285530823
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 184
score: 99.75938737896126
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 184
score: 99.71745469835069
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 185
score: 99.80795094936708
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 185
score: 99.80646306818181
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { break ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 185
score: 99.80009443681318
patch: while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 185
score: 99.79509534333882
patch: case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 185
score: 99.789404296875
patch: case BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 185
score: 99.77950084058544
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 185
score: 99.75933159722223
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 185
score: 99.71737510279605
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 186
score: 99.83078273338607
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 186
score: 99.8079364483173
patch: if ( n . has CaMeL Children ( ) ) { Object first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 186
score: 99.7999618354885
patch: case Type . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 186
score: 99.78923371550324
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 186
score: 99.77949084974315
patch: case Token . Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 186
score: 99.77197899756493
patch: case Token . BLOCK : case Token . RETURN : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 186
score: 99.75912430037313
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 186
score: 99.71736759334415
patch: case Token . BLOCK : case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 187
score: 99.83077870244566
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 187
score: 99.80791386471519
patch: if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 187
score: 99.8061773838141
patch: case Token . RETURN : if ( n . get CaMeL Parent ( ) == null ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 187
score: 99.7997814360119
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 187
score: 99.79488332648026
patch: case Token . BLOCK : try { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 187
score: 99.77197265625
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ; }
rank: 187
score: 99.75904482886905
patch: case Token . BREAK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 187
score: 99.71726329291045
patch: case Token . BREAK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 188
score: 99.80785807291667
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 188
score: 99.80601377744932
patch: case Token . RETURN : if ( n . get CaMeL Type ( ) == Token . BREAK ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 188
score: 99.79975486288265
patch: } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 188
score: 99.78910435267858
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( node ) ) ;
rank: 188
score: 99.77944983057229
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 188
score: 99.77193306587837
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 188
score: 99.75864730342742
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 189
score: 99.830703125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ,
rank: 189
score: 99.80767352764423
patch: if ( node . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 189
score: 99.80595978213029
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 189
score: 99.7945068359375
patch: } try { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 189
score: 99.78904981737013
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , compute CaMeL Following ( n ) ) ;
rank: 189
score: 99.77939967105263
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 189
score: 99.77185574383803
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 189
score: 99.75858072916667
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; } }
rank: 189
score: 99.71721540178571
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 190
score: 99.83069661458333
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 190
score: 99.80764288651316
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 190
score: 99.80587332589286
patch: case Token . BREAK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 190
score: 99.79959542410714
patch: return return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 190
score: 99.79440146998355
patch: case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 190
score: 99.78896885702055
patch: case Token . BLOCK : if ( ! n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 190
score: 99.77931565504808
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) || n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 190
score: 99.77171495225694
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 190
score: 99.7585647170608
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; }
rank: 190
score: 99.71720377604167
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ) ;
rank: 191
score: 99.83069428943452
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; }
rank: 191
score: 99.80756774129746
patch: if ( n . has CaMeL Children ( ) ) { Object first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 191
score: 99.79958651928192
patch: } else { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 191
score: 99.79437339469177
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 191
score: 99.78864498414855
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 191
score: 99.77170444542253
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; }
rank: 191
score: 99.75844793450342
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 191
score: 99.71718098958333
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 192
score: 99.830673828125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n
rank: 192
score: 99.80754651521382
patch: case Token . BLOCK : { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 192
score: 99.80578031994048
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { remove CaMeL Dead CaMeL Expr CaMeL Statement CaMeL Safely ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 192
score: 99.78863525390625
patch: case Token . BLOCK : if ( ! n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 192
score: 99.77928451344937
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 192
score: 99.75827287946429
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 193
score: 99.80754045758928
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = first . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 193
score: 99.80565104166666
patch: case Token . RETURN : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 193
score: 99.79953672827745
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 193
score: 99.78837754991319
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , true ) ;
rank: 193
score: 99.77921645220589
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , null ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 193
score: 99.71711531929348
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 194
score: 99.83052734375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get
rank: 194
score: 99.79425299657534
patch: } try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 194
score: 99.7883689990942
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { break ; } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 194
score: 99.77906945633562
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , false ) ) ; }
rank: 194
score: 99.7715344551282
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Out CaMeL Edges ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 194
score: 99.75812262457771
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } return n ;
rank: 194
score: 99.717041015625
patch: case Di CaMeL Graph CaMeL Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ;
rank: 195
score: 99.83052619485294
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return n . get CaMeL First CaMeL Child ( ) ; }
rank: 195
score: 99.80542326626713
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL Next ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ) ;
rank: 195
score: 99.79402669270833
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } }
rank: 195
score: 99.77899460565476
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; }
rank: 195
score: 99.75809895833333
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 195
score: 99.71692396190069
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 196
score: 99.80712890625
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 196
score: 99.7993396577381
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Object first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 196
score: 99.7939598880597
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 196
score: 99.78817057291667
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { remove CaMeL Dead CaMeL Expr CaMeL Statement CaMeL Safely ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 196
score: 99.77895833333334
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return first ; } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 196
score: 99.75805329623287
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 196
score: 99.71682326858108
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 197
score: 99.80711605674342
patch: if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 197
score: 99.80533414273648
patch: case Token . BREAK : if ( n . get CaMeL Type ( ) == Token . RETURN ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 197
score: 99.79925321691177
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 197
score: 99.79390222886029
patch: } if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 197
score: 99.78811424365942
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 197
score: 99.778955078125
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) , n ) ) ;
rank: 197
score: 99.71680955762987
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ;
rank: 198
score: 99.83044921875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node (
rank: 198
score: 99.80707946004746
patch: if ( node . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 198
score: 99.80517578125
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 198
score: 99.79913933722527
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { }
rank: 198
score: 99.79377253605769
patch: case Token . BLOCK : { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 198
score: 99.78807198660714
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 198
score: 99.77099609375
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 198
score: 99.75791766826923
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 199
score: 99.80707539597603
patch: try { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 199
score: 99.8050875376506
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { final Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 199
score: 99.79365498310811
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 199
score: 99.78806587114725
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , node ) ; }
rank: 199
score: 99.77892214752907
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node < Node > n = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 199
score: 99.71660431338029
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 200
score: 99.830361328125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) { return try CaMeL Remove
rank: 200
score: 99.8050537109375
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 200
score: 99.79904961340206
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 200
score: 99.79363141741071
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 200
score: 99.78805842869718
patch: case Exception . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 200
score: 99.77891322544643
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 200
score: 99.77089293573944
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 200
score: 99.75781928168402
patch: case Token . BLOCK : case Token . CONTINUE : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 200
score: 99.71651974239865
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( first ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 201
score: 99.80704646915585
patch: if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 201
score: 99.80491973132622
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 201
score: 99.79358117055085
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } }
rank: 201
score: 99.78803013392857
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else return return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 201
score: 99.77889437288852
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 201
score: 99.7708882913961
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ) ; }
rank: 201
score: 99.75779594809322
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } ;
rank: 201
score: 99.71646457248264
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 202
score: 99.80699118589743
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { throw try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 202
score: 99.80490944602273
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . BLOCK ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 202
score: 99.79895690247253
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ) ;
rank: 202
score: 99.79355610280797
patch: } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 202
score: 99.78801133897569
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , this ) ;
rank: 202
score: 99.77878448109568
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; }
rank: 202
score: 99.7708692674513
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 202
score: 99.75770547945206
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 202
score: 99.71622832833904
patch: try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else return n . get CaMeL Destination ( ) . get CaMeL Value ( ) ;
rank: 203
score: 99.83030116705247
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n . get CaMeL First CaMeL Child ( ) ) ) ; }
rank: 203
score: 99.80695906929348
patch: } else { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 203
score: 99.79892800071023
patch: case Token . BLOCK : if ( ! try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 203
score: 99.79329427083333
patch: case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 203
score: 99.78796214788733
patch: case Token . BLOCK : else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 203
score: 99.77866152108433
patch: case Token . BLOCK : case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 203
score: 99.7708310409331
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , g CaMeL Node ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 203
score: 99.71618489583334
patch: try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return n ; }
rank: 204
score: 99.79890649112654
patch: if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 204
score: 99.79327227618244
patch: } else { } Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 204
score: 99.78781901041667
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) != null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 204
score: 99.77847599637681
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 204
score: 99.7708270733173
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 204
score: 99.71617296006944
patch: case Di CaMeL Graph CaMeL Edge . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ;
rank: 205
score: 99.83024649784483
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) != null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 205
score: 99.80476888020833
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else
rank: 205
score: 99.78771456866197
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( ! Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 205
score: 99.77847250405844
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 205
score: 99.77075512378246
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . get CaMeL Parent ( ) != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 205
score: 99.75762114653716
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , g CaMeL Node . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 205
score: 99.71598958333334
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 206
score: 99.830234375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) . get CaMeL Parent CaMeL Node ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL
rank: 206
score: 99.79873399849397
patch: case Token . BLOCK : if ( node . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 206
score: 99.79308363970588
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 206
score: 99.78765044341216
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 206
score: 99.7576118364726
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 206
score: 99.71598518668831
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 207
score: 99.80682373046875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 207
score: 99.80452706473214
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 207
score: 99.79871622721355
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 207
score: 99.79305869654605
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Node ( ) ) ;
rank: 207
score: 99.78763303894928
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 207
score: 99.77843056955645
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) != null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 207
score: 99.77059545272436
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ) ; }
rank: 207
score: 99.75747501148896
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 207
score: 99.7159324852196
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ;
rank: 208
score: 99.83014787946429
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( node ) ) ; }
rank: 208
score: 99.7986709770115
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 208
score: 99.79299550513699
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 208
score: 99.78758463541666
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { remove CaMeL Dead CaMeL Expr CaMeL Statement CaMeL Safely ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 208
score: 99.77830895712209
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first , n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 208
score: 99.71593034771126
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 209
score: 99.83008684430804
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 209
score: 99.80675198739036
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 209
score: 99.80434808498475
patch: case Token . FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 209
score: 99.79863048735119
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 209
score: 99.79295349121094
patch: case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 209
score: 99.7875088778409
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 209
score: 99.77830403645834
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally {
rank: 209
score: 99.77045430222603
patch: case Token . BLOCK : if ( n . get CaMeL Next ( ) != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 209
score: 99.75741916232639
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 209
score: 99.71591525607639
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 210
score: 99.8298828125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL
rank: 210
score: 99.80666097005208
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , first ) ) ;
rank: 210
score: 99.80434698807566
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 210
score: 99.79862253289474
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 210
score: 99.79287860576923
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 210
score: 99.78750697544643
patch: case Throwable . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 210
score: 99.77829760174419
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ) ;
rank: 210
score: 99.77043805803571
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 210
score: 99.75732421875
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 210
score: 99.71590971610915
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ;
rank: 211
score: 99.82986328125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL
rank: 211
score: 99.80665989925987
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = null ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 211
score: 99.80424048195422
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 211
score: 99.79851044804217
patch: case Node . BLOCK : while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 211
score: 99.79285943330224
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 211
score: 99.78749712775735
patch: case BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 211
score: 99.77824082485465
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = ( Node ) n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 211
score: 99.77038732751623
patch: case Token . BLOCK : case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 211
score: 99.71577658582089
patch: case Token . BLOCK : case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 212
score: 99.79840959821429
patch: case Token . BLOCK : } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 212
score: 99.79281490796232
patch: } case Token . BLOCK : { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 212
score: 99.78741375811688
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 212
score: 99.77821180555556
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 212
score: 99.7703662817029
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 212
score: 99.7570366010274
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 212
score: 99.71577533922698
patch: case Token . BLOCK : case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 213
score: 99.82974582248264
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return n . get CaMeL First CaMeL Child ( ) ; }
rank: 213
score: 99.79839547072785
patch: case Token . BLOCK : while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 213
score: 99.78740098741319
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 213
score: 99.77811197916667
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 213
score: 99.7703387920673
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Out CaMeL Edges ( ) ) ;
rank: 213
score: 99.75694537984914
patch: case String . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 214
score: 99.82961203835227
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) != null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 214
score: 99.80657881724683
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 214
score: 99.80388362233232
patch: case BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 214
score: 99.7982795621142
patch: } else { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 214
score: 99.79278846153846
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 214
score: 99.78735677083333
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . get CaMeL Type ( ) == Token . FUNCTION || n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 214
score: 99.71560546875
patch: case Di CaMeL Graph CaMeL Edge . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 215
score: 99.80633050042229
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 215
score: 99.79826171875
patch: case Type . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 215
score: 99.79274739583333
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) == null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 215
score: 99.78727213541667
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , next ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 215
score: 99.77789522058823
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , ) ) ; }
rank: 215
score: 99.77024332682292
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 215
score: 99.71557263360508
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ) ;
rank: 216
score: 99.829453125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis .
rank: 216
score: 99.80386207217262
patch: case Token . RETURN : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 216
score: 99.79823983433735
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 216
score: 99.79266183035715
patch: } if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 216
score: 99.78722985998377
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) || n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 216
score: 99.77783203125
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; }
rank: 216
score: 99.7701463575487
patch: case Type . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 216
score: 99.71541694972827
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) != null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 217
score: 99.82939009232955
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 217
score: 99.80608357174296
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 217
score: 99.80384789443598
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } switch ( n . get CaMeL Type ( ) ) {
rank: 217
score: 99.79797503591954
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 217
score: 99.7926072950487
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 217
score: 99.78719401041667
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { remove CaMeL Dead CaMeL Expr CaMeL Statement CaMeL Safely ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 217
score: 99.77782585047468
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; }
rank: 217
score: 99.77007026176948
patch: case Token . BLOCK : if ( n . get CaMeL Next ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 217
score: 99.75679285386029
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 217
score: 99.71538704885563
patch: case Token . BLOCK : case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 218
score: 99.82931985294118
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , true ) ) ;
rank: 218
score: 99.80603357263513
patch: case Token . BLOCK : if ( ! try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 218
score: 99.80381556919643
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 218
score: 99.79792751736112
patch: case Token . BLOCK : { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 218
score: 99.77764601934524
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) . get CaMeL Parent ( ) ) ;
rank: 218
score: 99.77005709134616
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 218
score: 99.75677763526119
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 218
score: 99.71536741394928
patch: case Token . BLOCK : case Token . BREAK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 219
score: 99.8059735365317
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return n . get CaMeL First CaMeL Child ( ) ; } }
rank: 219
score: 99.7979170636433
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 219
score: 99.79243469238281
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 219
score: 99.78685845269098
patch: case Exception . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 219
score: 99.77762612951807
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) != null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; }
rank: 219
score: 99.77005165501645
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) , n ) ;
rank: 219
score: 99.7153510551948
patch: case Token . BREAK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 220
score: 99.803758000753
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 220
score: 99.79240587022569
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 220
score: 99.78680508378623
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 220
score: 99.77761840820312
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) , n ) ;
rank: 220
score: 99.76961495535714
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 220
score: 99.75674930695564
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 220
score: 99.71533872003425
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ;
rank: 221
score: 99.8292605377907
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 221
score: 99.80558371242088
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 221
score: 99.80369262695312
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 221
score: 99.79239521329364
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 221
score: 99.7867578125
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 221
score: 99.77761130136986
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , null ) ) ; }
rank: 221
score: 99.7695248252467
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Value ( ) == null ? null : try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 221
score: 99.75660211267606
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 222
score: 99.82913594850352
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 222
score: 99.803466796875
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) != Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 222
score: 99.79740668402778
patch: case Token . BLOCK : { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 222
score: 99.79239052220395
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 222
score: 99.7866401176948
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . get CaMeL Type ( ) == Token . FUNCTION ) if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 222
score: 99.7695248252467
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 223
score: 99.82912907130282
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } finally { n . get CaMeL First CaMeL Child ( ) ; }
rank: 223
score: 99.80550130208333
patch: try { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 223
score: 99.803466796875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ;
rank: 223
score: 99.79239032451923
patch: } case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 223
score: 99.78660789695945
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , g CaMeL Node ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 223
score: 99.77748960024351
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ; }
rank: 223
score: 99.76951768663194
patch: case Token . BLOCK : if ( n . get CaMeL Next ( ) != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 223
score: 99.75658307756696
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 223
score: 99.71519711143092
patch: case Di CaMeL Graph CaMeL Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 224
score: 99.80544155458861
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 224
score: 99.8034099422089
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 224
score: 99.79233072916666
patch: case Token . BLOCK : return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 224
score: 99.78658810177365
patch: case Di CaMeL Graph CaMeL Edge . FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 224
score: 99.77745093368902
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . BLOCK ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 224
score: 99.7693897192029
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { try { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 224
score: 99.75645901864036
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 224
score: 99.71514973958334
patch: case Di CaMeL Graph CaMeL Node . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 225
score: 99.82904343377976
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = first . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 225
score: 99.8053695436508
patch: if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 225
score: 99.8033447265625
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL Next ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 225
score: 99.79229329427083
patch: } case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 225
score: 99.78648731806507
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { try { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 225
score: 99.76938151041666
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 225
score: 99.75641454409246
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) != null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 225
score: 99.71509448902027
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return n ; }
rank: 226
score: 99.829033203125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL
rank: 226
score: 99.80511944110577
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n . has CaMeL Children ( ) ) ) ;
rank: 226
score: 99.80326383659639
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { final Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 226
score: 99.79718709729381
patch: try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 226
score: 99.79229213169643
patch: } if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 226
score: 99.78647974917763
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 226
score: 99.77715163934427
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 226
score: 99.76936197916666
patch: case Token . BLOCK : if ( n . get CaMeL Next ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 227
score: 99.82890392485119
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 227
score: 99.80316452752976
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node next = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 227
score: 99.79227754667208
patch: case Token . BLOCK : { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 227
score: 99.78647189670139
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( new Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 227
score: 99.77707107345779
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 227
score: 99.7692935341283
patch: case Token . BLOCK : if ( n . get CaMeL Next ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 227
score: 99.75619904891305
patch: case $STRING$ : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 227
score: 99.71504557291667
patch: try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 228
score: 99.82889811197917
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { n . get CaMeL First CaMeL Child ( ) ; } }
rank: 228
score: 99.80315290178571
patch: case Token . BREAK : case Token . CONTINUE : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 228
score: 99.7922722311581
patch: } try { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 228
score: 99.78630913628473
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , ) ; }
rank: 228
score: 99.7770427547089
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; }
rank: 228
score: 99.76925223214286
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 228
score: 99.71501754502118
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ;
rank: 229
score: 99.82888793945312
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return first ; }
rank: 229
score: 99.7970703125
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 229
score: 99.79223958333333
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 229
score: 99.78626844618056
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , node ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 229
score: 99.76923076923077
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; }
rank: 229
score: 99.75609691722973
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Branch . BLOCK ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 229
score: 99.71492838541667
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 230
score: 99.82884765625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n
rank: 230
score: 99.80492424242425
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 230
score: 99.80287109375
patch: case Token . RETURN : if ( n . get CaMeL Type ( ) == Branch . UNCOND ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 230
score: 99.7970703125
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 230
score: 99.79204172327898
patch: } if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 230
score: 99.77686848958334
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . BLOCK ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 230
score: 99.76920572916667
patch: case Token . BLOCK : if ( n . get CaMeL Next ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ;
rank: 230
score: 99.7149166277985
patch: case Token . RETURN : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 231
score: 99.8049161886867
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , ) ) ;
rank: 231
score: 99.80275560461956
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 231
score: 99.77680195847603
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , true ) ) ; }
rank: 231
score: 99.76904296875
patch: case Type . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 231
score: 99.71486979166667
patch: case Token . FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 232
score: 99.82873046875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL
rank: 232
score: 99.80459121919014
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 232
score: 99.80275390625
patch: case Token . BREAK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 232
score: 99.79703776041667
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 232
score: 99.79190224095395
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 232
score: 99.7861194349315
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 232
score: 99.71475260416666
patch: try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 233
score: 99.828681640625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) )
rank: 233
score: 99.80449848790323
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 233
score: 99.802734375
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 233
score: 99.79183568709936
patch: } if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 233
score: 99.77675929214016
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 233
score: 99.7690179286859
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 233
score: 99.71473052536231
patch: if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 234
score: 99.80448273689517
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 234
score: 99.80272834683642
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 234
score: 99.78595648871527
patch: case Token . BLOCK : try { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 234
score: 99.77669270833333
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 234
score: 99.76899988511029
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 234
score: 99.75580610795454
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 235
score: 99.828642578125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) . get CaMeL Parent ( ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child (
rank: 235
score: 99.79674711681548
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 235
score: 99.77663225446429
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; }
rank: 235
score: 99.75568983289931
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 235
score: 99.71470929574275
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 236
score: 99.80446370442708
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 236
score: 99.80252259036145
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 236
score: 99.79166412353516
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 236
score: 99.78572696834415
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) || n . get CaMeL Type ( ) == Token . FUNCTION ) if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 236
score: 99.77660101232394
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 236
score: 99.76886605525362
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else if ( n . has CaMeL Children ( ) ) { break ;
rank: 236
score: 99.7556640625
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 237
score: 99.80437412546642
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 237
score: 99.80251057942708
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else
rank: 237
score: 99.79655679424157
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 237
score: 99.78571529664855
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 237
score: 99.77647569444444
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; }
rank: 237
score: 99.76857475385275
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; }
rank: 237
score: 99.71464269301471
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ;
rank: 238
score: 99.828369140625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL
rank: 238
score: 99.80422881155303
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 238
score: 99.79653785342262
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 238
score: 99.77645956503379
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 238
score: 99.71443917410714
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 239
score: 99.80410661368535
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 239
score: 99.80247802734375
patch: case BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 239
score: 99.79649861653645
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 239
score: 99.78547297297297
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 239
score: 99.77632580773304
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 239
score: 99.76845831620066
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) || n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 239
score: 99.75559754302536
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 239
score: 99.7144283465485
patch: case Token . BREAK : case Token . CONTINUE : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 240
score: 99.8040625
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 240
score: 99.79635009765624
patch: else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 240
score: 99.79154459635417
patch: case Token . BLOCK : else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 240
score: 99.78544270833333
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) || n . get CaMeL Type ( ) == Token . FUNCTION || n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 240
score: 99.77627081620066
patch: case Token . BLOCK : case Token . LINE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 240
score: 99.76842322716347
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 240
score: 99.7555430237676
patch: case Object . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 241
score: 99.8282900528169
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 241
score: 99.8040508801424
patch: if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; }
rank: 241
score: 99.8023046875
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 241
score: 99.79145132211538
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 241
score: 99.78544108072917
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , parent ) ;
rank: 241
score: 99.76840753424658
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 241
score: 99.75539860255282
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 241
score: 99.71432334498355
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ;
rank: 242
score: 99.82818359375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) . get CaMeL Parent ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL
rank: 242
score: 99.80229903990964
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 242
score: 99.79138342126623
patch: case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 242
score: 99.78538643973214
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 242
score: 99.77616159539474
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; }
rank: 242
score: 99.76840691817434
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) == null ? null : try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 242
score: 99.75537778253425
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 242
score: 99.71421490293561
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 243
score: 99.82813752003206
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ; } }
rank: 243
score: 99.80227661132812
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 243
score: 99.79630623282966
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 243
score: 99.79133864182693
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return first ; } }
rank: 243
score: 99.77603400735295
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ;
rank: 243
score: 99.75530919894366
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 243
score: 99.7141835387324
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 244
score: 99.79127502441406
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 244
score: 99.7759906814759
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ;
rank: 245
score: 99.828076171875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child (
rank: 245
score: 99.80207730516975
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Following ( n ) ) ;
rank: 245
score: 99.79611672794118
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 245
score: 99.79124257262323
patch: } Token first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 245
score: 99.78526785714286
patch: case Token . BLOCK : if ( node . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 245
score: 99.7683041221217
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( compute CaMeL Following ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 245
score: 99.75512017144098
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 245
score: 99.71411792652027
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ) ;
rank: 246
score: 99.80376233552632
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 246
score: 99.78523763020833
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , 0 ) ;
rank: 246
score: 99.77588665674604
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) != null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 246
score: 99.75505913628473
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 246
score: 99.7140850360577
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( first ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 247
score: 99.827763671875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) . get CaMeL
rank: 247
score: 99.80202842620481
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 247
score: 99.79602786144578
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return n . get CaMeL First CaMeL Child ( ) ; }
rank: 247
score: 99.79103088378906
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 247
score: 99.77569580078125
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { n . get CaMeL First CaMeL Child ( ) . get CaMeL Parent ( ) . get CaMeL Parent ( ) . get CaMeL Parent ( ) . get CaMeL Parent ( ) ; }
rank: 247
score: 99.71376480594758
patch: case Token . BLOCK : case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 248
score: 99.827763671875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL
rank: 248
score: 99.80363516971983
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 248
score: 99.8019578313253
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 248
score: 99.7960177951389
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 248
score: 99.7910014719203
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 248
score: 99.7851171875
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Branch . UNCOND ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 248
score: 99.7756893382353
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , this ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 248
score: 99.76817801339286
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 248
score: 99.71376016695206
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; }
rank: 249
score: 99.80347931690706
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 249
score: 99.7909523292824
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 249
score: 99.78510199652777
patch: case Token . Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 249
score: 99.7681742086039
patch: case Token . BLOCK : case Token . CONTINUE : case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 249
score: 99.7549256441886
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 249
score: 99.71373273324275
patch: try { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 250
score: 99.82755859375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow
rank: 250
score: 99.80342824835526
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 250
score: 99.79084329044117
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 250
score: 99.77562120225694
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , ) ) ; }
rank: 250
score: 99.71370901188381
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) ;
rank: 251
score: 99.80182926829268
patch: case Branch : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 251
score: 99.7956963900862
patch: case Token . BLOCK : Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 251
score: 99.79082538555195
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; }
rank: 251
score: 99.78485003972457
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } switch ( n . get CaMeL Type ( ) ) { case Token . RETURN :
rank: 251
score: 99.7755382449128
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 251
score: 99.76813616071429
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) , n ) ; }
rank: 251
score: 99.71369280133929
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 252
score: 99.79565716911765
patch: case Token . BLOCK : else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 252
score: 99.79075326492537
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 252
score: 99.7847900390625
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , null ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 252
score: 99.76808675130208
patch: case Type . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 252
score: 99.75482261344177
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } break ;
rank: 252
score: 99.71367645263672
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( first ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 253
score: 99.8273046875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) )
rank: 253
score: 99.79074509079392
patch: } case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 253
score: 99.78475996376811
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) || n . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 253
score: 99.77550753741197
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 253
score: 99.76805989583333
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( compute CaMeL Following ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 254
score: 99.79564412434895
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 254
score: 99.79073780980603
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) ; } }
rank: 254
score: 99.78464762369792
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , current ) ;
rank: 254
score: 99.77544945406626
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Source ( ) . get CaMeL Value ( ) ) ; }
rank: 254
score: 99.7679912860577
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 254
score: 99.75475260416667
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 254
score: 99.71352132161458
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 255
score: 99.82728515625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node (
rank: 255
score: 99.80162527901786
patch: case RETURN : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 255
score: 99.79542178199405
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 255
score: 99.7907184103261
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 255
score: 99.7845901268116
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) || n . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 255
score: 99.75466961927818
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 255
score: 99.7134509477459
patch: case Di CaMeL Graph CaMeL Node . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 256
score: 99.80319552951389
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 256
score: 99.80131775655865
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 256
score: 99.79066051136364
patch: } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 256
score: 99.78455946180556
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 256
score: 99.77538393621575
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = ( Node ) n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 256
score: 99.76788008840461
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . get CaMeL Parent ( ) != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 256
score: 99.7546139039855
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 256
score: 99.71344957853618
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 257
score: 99.827265625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL
rank: 257
score: 99.8031448143116
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 257
score: 99.80127571202532
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 257
score: 99.79056919642858
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 257
score: 99.78442708333333
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) != null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { remove CaMeL Dead CaMeL Expr CaMeL Statement CaMeL Safely ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 257
score: 99.7677833446558
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 257
score: 99.71340427150975
patch: case Token . RETURN : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 258
score: 99.80309285996836
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { throw try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 258
score: 99.80126327123398
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n . get CaMeL Next ( ) ) ) ;
rank: 258
score: 99.79521725501543
patch: try { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 258
score: 99.7905204665493
patch: Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 258
score: 99.7751310324367
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 258
score: 99.76776947846284
patch: case Token . BLOCK : if ( n . get CaMeL Next ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 258
score: 99.75450981987848
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 258
score: 99.71336605674342
patch: case Token . BLOCK : case Token . CONTINUE : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 259
score: 99.82723838404605
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 259
score: 99.80303130278716
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , Token . BLOCK ) ) ) ;
rank: 259
score: 99.80120192307692
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 259
score: 99.795166015625
patch: case Token . BLOCK : if ( ! try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 259
score: 99.7904892958604
patch: } case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 259
score: 99.78439453125
patch: case Type . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 259
score: 99.76774739583334
patch: case Type . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 259
score: 99.75442843967014
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 259
score: 99.7133598823052
patch: case Token . BLOCK : case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 260
score: 99.82721282623626
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 260
score: 99.80301920572917
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 260
score: 99.79499080882353
patch: case Token . BLOCK : } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 260
score: 99.79043794014085
patch: } case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ;
rank: 260
score: 99.78430989583333
patch: case Type . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 260
score: 99.76772054036458
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , null ) ;
rank: 261
score: 99.827197265625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) .
rank: 261
score: 99.80299207899306
patch: case Token . BLOCK : { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 261
score: 99.79494287634408
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; }
rank: 261
score: 99.79035456730769
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 261
score: 99.78428526182432
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 261
score: 99.77509445440573
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = ( Node ) n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 261
score: 99.76771375868056
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 261
score: 99.75412513469827
patch: case Node . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 261
score: 99.71319415118244
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return n . get CaMeL Destination ( ) . get CaMeL Value ( ) ; }
rank: 262
score: 99.80292693661971
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = null ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 262
score: 99.80111116976352
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . RETURN ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 262
score: 99.77508544921875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , false ) ) ;
rank: 262
score: 99.76766880580357
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 262
score: 99.71318866680195
patch: case Token . BLOCK : case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 263
score: 99.80287879621478
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 263
score: 99.80097381161971
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 263
score: 99.7948477056962
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 263
score: 99.79030959670608
patch: } try { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 263
score: 99.78406479779412
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL Parent ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 263
score: 99.77495404411765
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } }
rank: 263
score: 99.76754513302365
patch: case Token . BLOCK : if ( n . get CaMeL Next ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . RETURN ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 263
score: 99.75387912326389
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 263
score: 99.71311707427536
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 264
score: 99.82701171875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL
rank: 264
score: 99.79482550370066
patch: case Token . BLOCK : { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 264
score: 99.790283203125
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 264
score: 99.78405589788733
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 264
score: 99.77492161800987
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 264
score: 99.76749568790585
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) != null || n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 264
score: 99.75385044642857
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } . try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 265
score: 99.80270606884058
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 265
score: 99.79480106314433
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; }
rank: 265
score: 99.78403727213542
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 265
score: 99.77486108054578
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { n . remove CaMeL First CaMeL Child ( ) ; }
rank: 265
score: 99.71275111607143
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 266
score: 99.82684584066901
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; }
rank: 266
score: 99.8026963271104
patch: case Token . BLOCK : { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 266
score: 99.80089393028847
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n . get CaMeL Next ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 266
score: 99.7947265625
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return n . get CaMeL First CaMeL Child ( ) ; }
rank: 266
score: 99.79021253083882
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 266
score: 99.78389875856165
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( new Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 266
score: 99.77485420334507
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 266
score: 99.7674609375
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , cur CaMeL Cfg ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 266
score: 99.75377604166667
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 267
score: 99.826845703125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; }
rank: 267
score: 99.80263384650735
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 267
score: 99.794677734375
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( this ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 267
score: 99.79015925480769
patch: case Token . BLOCK : { try { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 267
score: 99.78387254284274
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 267
score: 99.77470341435185
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; }
rank: 267
score: 99.76742951766305
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 267
score: 99.7537742820946
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; } } switch ( n . get CaMeL Type ( ) ) {
rank: 267
score: 99.71259182602611
patch: case Token . BLOCK : case Token . CONTINUE : case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 268
score: 99.8267578125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n . get CaMeL First CaMeL
rank: 268
score: 99.80261694026899
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = first . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 268
score: 99.80082743876689
patch: case Token . FUNCTION : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 268
score: 99.78999224101027
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 268
score: 99.78381510416666
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ;
rank: 268
score: 99.77465494791667
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 268
score: 99.767333984375
patch: case Type . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 268
score: 99.75373186383929
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 268
score: 99.71257625214041
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 269
score: 99.79459212662337
patch: } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 269
score: 99.78992838541667
patch: } try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 269
score: 99.78369774756493
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Next ( ) ) ; }
rank: 269
score: 99.77458168143657
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { n . close ( ) ; }
rank: 269
score: 99.75362723214286
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else if ( n . has CaMeL Children ( ) ) { break ; }
rank: 270
score: 99.80082563920455
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 270
score: 99.79456459603658
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( ) ) ;
rank: 270
score: 99.76717924735915
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , ) ;
rank: 270
score: 99.71232096354167
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 271
score: 99.80079301581326
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( this ) ) ;
rank: 271
score: 99.79449678308823
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ) ;
rank: 271
score: 99.78981164383562
patch: } else { } Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 271
score: 99.78352864583333
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( false ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 271
score: 99.76710269325658
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == null ? null : try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 271
score: 99.7533042594178
patch: case Token . FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 271
score: 99.7123046875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 272
score: 99.80078793878425
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 272
score: 99.78971131207192
patch: } case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 272
score: 99.7670703125
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 272
score: 99.75326199001736
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 272
score: 99.7122901710304
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; }
rank: 273
score: 99.80230547930744
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( first . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 273
score: 99.7944490131579
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; }
rank: 273
score: 99.78961098030823
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 273
score: 99.78319634331598
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , false ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 273
score: 99.77432168496621
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 273
score: 99.76702724358974
patch: case Token . BLOCK : case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; }
rank: 273
score: 99.75322433997844
patch: case Node . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 273
score: 99.71219308035714
patch: * / return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 274
score: 99.826416015625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow
rank: 274
score: 99.80230034722223
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 274
score: 99.80071614583333
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n . get CaMeL Next ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ) ;
rank: 274
score: 99.79437681686046
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( ) ) ;
rank: 274
score: 99.78944052419355
patch: } else { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 274
score: 99.78312059859155
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( null ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 274
score: 99.77432016225961
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ) ;
rank: 274
score: 99.75318702491555
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 274
score: 99.71213479238014
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 275
score: 99.82633463541667
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { n . get CaMeL First CaMeL Child ( ) ; } }
rank: 275
score: 99.80218098958333
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 275
score: 99.79436848958333
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; }
rank: 275
score: 99.78943871670081
patch: } else { } Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 275
score: 99.78311317845395
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 275
score: 99.77430338541667
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 275
score: 99.7669820413961
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 275
score: 99.71208389945652
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 276
score: 99.82630859375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis .
rank: 276
score: 99.80217351140203
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 276
score: 99.80067422945206
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 276
score: 99.7942859738372
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally {
rank: 276
score: 99.78941221494932
patch: } try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 276
score: 99.78308621258803
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( false ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 276
score: 99.77414344879519
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; }
rank: 276
score: 99.7531502016129
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 276
score: 99.71206825657895
patch: case Di CaMeL Graph CaMeL Edge . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 277
score: 99.80201171875
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 277
score: 99.8005859375
patch: case BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 277
score: 99.79423709032012
patch: } else { while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 277
score: 99.75303819444444
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 277
score: 99.71206121575342
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return n . get CaMeL Destination ( ) . get CaMeL Value ( ) ;
rank: 278
score: 99.8262890625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = ( Node ) n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL
rank: 278
score: 99.80197644589552
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 278
score: 99.78921875
patch: case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ;
rank: 278
score: 99.78287337662337
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , compute CaMeL Following ( n ) , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 278
score: 99.76675724637681
patch: case Token . BLOCK : case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 278
score: 99.75303583559783
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 278
score: 99.71204176682693
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 279
score: 99.80197100572182
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = first . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 279
score: 99.79413356551204
patch: } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 279
score: 99.78919857838115
patch: } case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 279
score: 99.77403492647059
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , this ) ) ;
rank: 279
score: 99.75302734375
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 279
score: 99.71202674278847
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 280
score: 99.826201171875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) . get CaMeL
rank: 280
score: 99.80043161651234
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 280
score: 99.79410181290064
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n . get CaMeL First CaMeL Child ( ) ) ) ) ;
rank: 280
score: 99.78277909128289
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { remove CaMeL Dead CaMeL Expr CaMeL Statement CaMeL Safely ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 280
score: 99.77381727430556
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , null ) ) ;
rank: 280
score: 99.76668294270833
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 280
score: 99.75300045289855
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 280
score: 99.71198283450704
patch: * / if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 281
score: 99.82618323037791
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 281
score: 99.78255208333333
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 281
score: 99.77380917677239
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) || n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 281
score: 99.7666015625
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , cur CaMeL Cfg ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 281
score: 99.75296407350352
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 281
score: 99.71196153428819
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ;
rank: 282
score: 99.826123046875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent (
rank: 282
score: 99.8019140625
patch: case Token . BLOCK : if ( ! try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 282
score: 99.7940185546875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( first . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 282
score: 99.78888811383929
patch: } Token first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 282
score: 99.77369634789157
patch: case Token . BLOCK : if ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 282
score: 99.76658887987013
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 282
score: 99.71192169189453
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n ; }
rank: 283
score: 99.8260546875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL
rank: 283
score: 99.80190911091549
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; }
rank: 283
score: 99.80035079152961
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 283
score: 99.79382905505952
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( node ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 283
score: 99.78888558650362
patch: } if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 283
score: 99.78254328547297
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) != Token . FUNCTION ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 283
score: 99.77365112304688
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; }
rank: 283
score: 99.76651460830479
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 283
score: 99.75283474392361
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL First CaMeL Child ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 283
score: 99.7119140625
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return n ; }
rank: 284
score: 99.826044921875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n
rank: 284
score: 99.80020302220395
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 284
score: 99.79377547554348
patch: else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 284
score: 99.78888423859127
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 284
score: 99.78251689189189
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Branch . UNCOND ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 284
score: 99.77360511893657
patch: case Token . BLOCK : case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) != null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 284
score: 99.76650140224359
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 284
score: 99.752783203125
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } * /
rank: 284
score: 99.71183507582721
patch: try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 285
score: 99.8259765625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child
rank: 285
score: 99.80186423277243
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 285
score: 99.80020302220395
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 285
score: 99.78887532552083
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 285
score: 99.77350563226744
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 285
score: 99.75277370876736
patch: case Branch . BLOCK : if ( n . get CaMeL Parent ( ) != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 285
score: 99.71182942708333
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) ;
rank: 286
score: 99.82593655873494
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 286
score: 99.80175155248398
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n . has CaMeL Children ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 286
score: 99.80018833705357
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 286
score: 99.79371226917614
patch: case Token . BLOCK : { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 286
score: 99.78884055397727
patch: case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 286
score: 99.78248131793478
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , first ) ;
rank: 286
score: 99.773486328125
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 286
score: 99.76633707682292
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , ) ; }
rank: 286
score: 99.75272492439517
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { break ; } case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 286
score: 99.7117984169408
patch: case Token . BLOCK : case Token . CONTINUE : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ;
rank: 287
score: 99.82593173668033
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { }
rank: 287
score: 99.7935688064759
patch: return return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 287
score: 99.78878728693182
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 287
score: 99.78248131793478
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 287
score: 99.77338187302215
patch: case Token . BLOCK : case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) != null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 287
score: 99.76626978165064
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 287
score: 99.75271935096154
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( next == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 287
score: 99.71156070106908
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 288
score: 99.82593107876713
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; }
rank: 288
score: 99.7935078938802
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ) ;
rank: 288
score: 99.78875990316901
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 288
score: 99.78242043887867
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 288
score: 99.77327665441176
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , null ) ) ;
rank: 288
score: 99.76626302083334
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 288
score: 99.75260977909483
patch: case Branch . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 288
score: 99.71154957086267
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ) ;
rank: 289
score: 99.80006239149306
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { final Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 289
score: 99.79345141882185
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( first . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 289
score: 99.78872341579861
patch: } try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 289
score: 99.78226725260417
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , true ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 289
score: 99.77324445857558
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; }
rank: 289
score: 99.76602864583333
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; }
rank: 290
score: 99.80000157510081
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 290
score: 99.79335239955357
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 290
score: 99.78867497519842
patch: case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 290
score: 99.77317708333334
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; }
rank: 290
score: 99.76602836277173
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 290
score: 99.7525417380137
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; }
rank: 290
score: 99.71138080797698
patch: case Di CaMeL Graph CaMeL Node . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 291
score: 99.80146340762867
patch: try { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 291
score: 99.79995245682566
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Branch . UNCOND ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 291
score: 99.79334741709184
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 291
score: 99.78858129528986
patch: else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 291
score: 99.78214518229167
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; break ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 291
score: 99.77316623263889
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , true ) ) ;
rank: 291
score: 99.76601690995066
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 291
score: 99.75249801856884
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 291
score: 99.71133213827055
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 292
score: 99.8257472826087
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; }
rank: 292
score: 99.80140904017857
patch: if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 292
score: 99.79332914806548
patch: case Token . BLOCK : else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 292
score: 99.78849962022569
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 292
score: 99.78211954195206
patch: case Type . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; }
rank: 292
score: 99.7731640625
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 292
score: 99.7659912109375
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ) ;
rank: 292
score: 99.7524547838185
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 292
score: 99.71130538313356
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) . get CaMeL Value ( ) ; }
rank: 293
score: 99.8257472826087
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 293
score: 99.79989996189025
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 293
score: 99.78821518841912
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 293
score: 99.76598557692307
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 294
score: 99.8257421875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node (
rank: 294
score: 99.80126274956598
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , null ) ) ) ;
rank: 294
score: 99.79981208570075
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 294
score: 99.79327466114458
patch: case Token . BLOCK : while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 294
score: 99.78819352489407
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 294
score: 99.7729255922379
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return first ; } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 294
score: 99.71124945746527
patch: case Di CaMeL Graph CaMeL Node . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ;
rank: 295
score: 99.8257421875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) . get CaMeL Parent (
rank: 295
score: 99.80120933219177
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 295
score: 99.79975818452381
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 295
score: 99.78817119295636
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) != null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 295
score: 99.78179036458333
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 295
score: 99.77280560661765
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) . get CaMeL Parent ( ) ) ; }
rank: 295
score: 99.75231431934931
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } * /
rank: 295
score: 99.71121036305146
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ;
rank: 296
score: 99.825673828125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Last CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n
rank: 296
score: 99.80110437729779
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 296
score: 99.79965209960938
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n . get CaMeL First CaMeL Child ( ) ) ;
rank: 296
score: 99.78812132019928
patch: } if ( node . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 296
score: 99.7815594740317
patch: case ( Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 296
score: 99.76585194762323
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 297
score: 99.82564968532986
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 297
score: 99.7996484375
patch: case Token . RETURN : if ( n . get CaMeL Type ( ) == Token . BLOCK ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 297
score: 99.79301167582418
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 297
score: 99.78810600385275
patch: case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 297
score: 99.78154839409723
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( null ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 297
score: 99.77278912653688
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { n . get CaMeL First CaMeL Child ( ) ; }
rank: 297
score: 99.76568924753289
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 297
score: 99.71113024259868
patch: case Token . BREAK : case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 298
score: 99.7880669135552
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 298
score: 99.78150390625
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; case Token . BREAK :
rank: 298
score: 99.77276753270348
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ) ; }
rank: 298
score: 99.75221082899306
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 298
score: 99.71112530048077
patch: case Token . BLOCK : case Token . BREAK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 299
score: 99.825595703125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL
rank: 299
score: 99.80095246550324
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 299
score: 99.79960327148437
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL Next ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ) ;
rank: 299
score: 99.79300166783707
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 299
score: 99.78802655194256
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 299
score: 99.78147741866438
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n . get CaMeL Next ( ) == null && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) ) ;
rank: 299
score: 99.76550622888513
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Node . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 299
score: 99.7520668343322
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ;
rank: 299
score: 99.7110095414959
patch: case Di CaMeL Graph CaMeL Edge . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 300
score: 99.8255859375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node (
rank: 300
score: 99.80085834703948
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 300
score: 99.799560546875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 300
score: 99.78800101902173
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 300
score: 99.78115885416666
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 300
score: 99.77268506659836
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 300
score: 99.76548453553082
patch: case Type . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 300
score: 99.75203125
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 301
score: 99.80085523200758
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 301
score: 99.79955127571202
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 301
score: 99.79299286265432
patch: } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 301
score: 99.77266845703124
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ;
rank: 301
score: 99.76546223958333
patch: case Token . BLOCK : if ( n . get CaMeL Next ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 302
score: 99.825458984375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( )
rank: 302
score: 99.80080800513699
patch: case Token . BLOCK : Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 302
score: 99.78111554574275
patch: case Branch : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 302
score: 99.7726199127907
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 302
score: 99.75184755067568
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 302
score: 99.7109375
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; }
rank: 303
score: 99.825458984375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) . get CaMeL Parent ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute
rank: 303
score: 99.80077506922468
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , ! try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 303
score: 99.79948909108232
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 303
score: 99.79288926235465
patch: } else { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 303
score: 99.78775111607143
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } }
rank: 303
score: 99.78110284674658
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { remove CaMeL Dead CaMeL Expr CaMeL Statement CaMeL Safely ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 303
score: 99.71093052455358
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( first ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 304
score: 99.825390625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n .
rank: 304
score: 99.80077406939338
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 304
score: 99.79947493912337
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 304
score: 99.79285561166158
patch: if ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 304
score: 99.78769672780797
patch: } try { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 304
score: 99.78101870888158
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 304
score: 99.7725765830592
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 304
score: 99.75168185763889
patch: case Token . RETURN : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 304
score: 99.71092122395834
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL Destination ( ) . get CaMeL Value ( ) ;
rank: 305
score: 99.82538555194805
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 305
score: 99.80068887246621
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , Node . BLOCK ) ) ) ;
rank: 305
score: 99.79945591517857
patch: case BREAK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 305
score: 99.78098307291667
patch: case Token . BLOCK : case Token . FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 305
score: 99.77256239853897
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 305
score: 99.76503525771103
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 305
score: 99.75152673855634
patch: case String . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 305
score: 99.71086968315973
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 306
score: 99.79945412660257
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n . get CaMeL Next ( ) ) ;
rank: 306
score: 99.78096354166667
patch: case Token . BLOCK : case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 306
score: 99.71086040296052
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return n . get CaMeL First CaMeL Child ( ) . get CaMeL Value ( ) ; }
rank: 307
score: 99.825283203125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching
rank: 307
score: 99.80063909216773
patch: } if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 307
score: 99.79941268705986
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { final Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 307
score: 99.79274338942308
patch: while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 307
score: 99.7874267578125
patch: } case Token . BLOCK : { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 307
score: 99.78090122767857
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 307
score: 99.77246719751602
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 307
score: 99.7514419555664
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 307
score: 99.71084112870066
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; }
rank: 308
score: 99.8251171875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node
rank: 308
score: 99.7994025735294
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 308
score: 99.7927013578869
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 308
score: 99.78742155481558
patch: case Token . BLOCK : Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 308
score: 99.78089057074652
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( true ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 308
score: 99.7724609375
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; }
rank: 308
score: 99.76496688179348
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 308
score: 99.75142578125
patch: if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 309
score: 99.80060546875
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 309
score: 99.79938065378289
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL Next ( ) ) ) ;
rank: 309
score: 99.76495272871377
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 309
score: 99.75131769049658
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n . get CaMeL First CaMeL Child ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 309
score: 99.71064196134868
patch: case Token . RETURN : case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 310
score: 99.79932925575658
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 310
score: 99.78075474330358
patch: case Token . TYPE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 310
score: 99.77241474873311
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 310
score: 99.76491536458333
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Node . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 310
score: 99.75129045758929
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 310
score: 99.71061417863176
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; }
rank: 311
score: 99.824921875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control
rank: 311
score: 99.80052425986842
patch: if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 311
score: 99.7924524066092
patch: case Token . BLOCK : if ( ! try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 311
score: 99.78727864583334
patch: } try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 311
score: 99.78074048913044
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) || n . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , first ) ;
rank: 311
score: 99.77232142857143
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ;
rank: 311
score: 99.76483979096284
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 311
score: 99.75115335398706
patch: case Number . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 311
score: 99.71058768656717
patch: case Token . RETURN : case Token . CONTINUE : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 312
score: 99.824892578125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( ) .
rank: 312
score: 99.80052274816177
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 312
score: 99.79237767269737
patch: case Token . BLOCK : { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 312
score: 99.78723862591912
patch: case Token . BLOCK : return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 312
score: 99.78073459201389
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 312
score: 99.7723019622093
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ;
rank: 312
score: 99.76482833059211
patch: case Type . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ;
rank: 312
score: 99.75110581341912
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 312
score: 99.71050666360294
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n ; }
rank: 313
score: 99.82487336881869
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ) ;
rank: 313
score: 99.80051676432292
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n , first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 313
score: 99.79919897151899
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 313
score: 99.79214638157895
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( ) ) ;
rank: 313
score: 99.780703125
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . get CaMeL Type ( ) == Token . FUNCTION && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 313
score: 99.77227145522389
patch: case Token . BLOCK : if ( ( n . has CaMeL Children ( ) ) || ( n . has CaMeL Children ( ) ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 313
score: 99.76475485777243
patch: case Token . BLOCK : if ( n . get CaMeL Next ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 313
score: 99.7509765625
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 313
score: 99.71049647177419
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) . get CaMeL Value ( ) ;
rank: 314
score: 99.82483915441176
patch: case Token . BLOCK : if ( ! n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 314
score: 99.79919592126623
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL Next ( ) ) ) ; }
rank: 314
score: 99.78713896780303
patch: case Token . BLOCK : { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 314
score: 99.77226789607558
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) . get CaMeL First CaMeL Child ( ) ) ;
rank: 314
score: 99.75091145833333
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 315
score: 99.824794921875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n )
rank: 315
score: 99.80044216579861
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 315
score: 99.78705512152777
patch: } case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; }
rank: 315
score: 99.7806480094178
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . RETURN :
rank: 315
score: 99.76468282350352
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 315
score: 99.7508984375
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 315
score: 99.71041666666666
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 316
score: 99.79912953317901
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 316
score: 99.7920154389881
patch: case Token . BLOCK : while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 316
score: 99.78693498883929
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 316
score: 99.78064453125
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) != null && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 316
score: 99.7720703125
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 316
score: 99.75087239583333
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { break ;
rank: 316
score: 99.71040482954545
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 317
score: 99.824638671875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis
rank: 317
score: 99.80024614726027
patch: try { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 317
score: 99.76462965745192
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Value ( ) ) ;
rank: 317
score: 99.75086630544355
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 317
score: 99.71028645833333
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 318
score: 99.824541015625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n )
rank: 318
score: 99.8001953125
patch: case Token . BLOCK : try { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 318
score: 99.79894341362848
patch: case BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 318
score: 99.79183766811708
patch: case Token . BLOCK : while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( first . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 318
score: 99.7868121603261
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 318
score: 99.78055436643835
patch: case Token . BLOCK : try { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 318
score: 99.77205183699324
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node < Node > first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 318
score: 99.7646233974359
patch: case Token . BLOCK : case Token . CONTINUE : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 318
score: 99.71023807010135
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 319
score: 99.80019017269737
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 319
score: 99.7988817168445
patch: case FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 319
score: 99.78677528782895
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 319
score: 99.78053826800847
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } switch ( n . get CaMeL Type ( ) ) { case Token . BREAK :
rank: 319
score: 99.7720373682229
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . BLOCK ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; }
rank: 319
score: 99.71011223591549
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 320
score: 99.82431503080986
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 320
score: 99.80013020833333
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 320
score: 99.79887369791666
patch: case Token . RETURN : case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 320
score: 99.791748046875
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 320
score: 99.78676835317461
patch: case Token . BLOCK : { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 320
score: 99.78049723307292
patch: case Token . FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 320
score: 99.76457682291667
patch: case Token . BLOCK : if ( n . get CaMeL Next ( ) == null || n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 320
score: 99.7506640625
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else return n ;
rank: 320
score: 99.71009211753731
patch: case Token . BLOCK : case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 321
score: 99.824306640625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node
rank: 321
score: 99.80006602112677
patch: case Token . BLOCK : { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 321
score: 99.79880242598684
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 321
score: 99.78046875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 321
score: 99.77188501602564
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n . get CaMeL First CaMeL Child ( ) ) ; }
rank: 321
score: 99.76455479452055
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; }
rank: 321
score: 99.71005859375
patch: case Di CaMeL Graph CaMeL Node . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 322
score: 99.80003004807692
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 322
score: 99.79879513302365
patch: case Token . RETURN : if ( n . get CaMeL Type ( ) == Token . CONTINUE ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 322
score: 99.7916628815407
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 322
score: 99.78674157873377
patch: case Token . BLOCK : { try { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 322
score: 99.7804522447183
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( true ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 322
score: 99.77188181322674
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 322
score: 99.76453993055556
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 322
score: 99.75056185787672
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { break ; } case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 322
score: 99.70994140625
patch: try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ;
rank: 323
score: 99.79978614517405
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 323
score: 99.79861328125
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { break ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 323
score: 99.78666247351696
patch: case Token . BLOCK : else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 323
score: 99.78029406910211
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 323
score: 99.77182539682539
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 323
score: 99.75051467483108
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { break ; } case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 323
score: 99.70991847826087
patch: * / if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 324
score: 99.79975654709507
patch: case Token . BLOCK : { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 324
score: 99.79155373086735
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; }
rank: 324
score: 99.78663545496323
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 324
score: 99.7802734375
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL Node ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 324
score: 99.77181755514705
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 324
score: 99.7644240920608
patch: case Token . BLOCK : if ( n . get CaMeL Next ( ) != null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 324
score: 99.75042365579044
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 324
score: 99.70987153389085
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( first ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 325
score: 99.7997185202206
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 325
score: 99.79856119791667
patch: case Token . FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 325
score: 99.79154459635417
patch: case Type . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 325
score: 99.77181755514705
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ) ;
rank: 325
score: 99.76436047676282
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 325
score: 99.75032332136824
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 325
score: 99.70984564887152
patch: try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 326
score: 99.82408756996269
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { n . get CaMeL First ( ) ; }
rank: 326
score: 99.79830771998355
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Branch . UNCOND ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 326
score: 99.7864990234375
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 326
score: 99.78019205729167
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; }
rank: 326
score: 99.7716796875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 326
score: 99.76426866319444
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 326
score: 99.75032332136824
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n . get CaMeL First CaMeL Child ( ) . get CaMeL Value ( ) ) ; }
rank: 326
score: 99.70980342741936
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 327
score: 99.79970189144737
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 327
score: 99.79830496651786
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 327
score: 99.79141465053763
patch: } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 327
score: 99.78018973214286
patch: case State . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 327
score: 99.77166848104508
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ; }
rank: 327
score: 99.7642489346591
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 327
score: 99.75031990840517
patch: case Integer . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 327
score: 99.70977957589285
patch: case Token . BLOCK : case Token . CONTINUE : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 328
score: 99.824033203125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) . get CaMeL Parent ( ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL
rank: 328
score: 99.79963077910959
patch: } else { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 328
score: 99.79829764660494
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 328
score: 99.79130446742958
patch: case Token . BLOCK : while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 328
score: 99.78641183035714
patch: case Token . BLOCK : Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 328
score: 99.77165784333882
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Source ( ) ) ;
rank: 328
score: 99.7501719300176
patch: case Token . UNCOND : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 328
score: 99.70977703936688
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 329
score: 99.79825632195724
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 329
score: 99.79129675662878
patch: while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 329
score: 99.78639280641234
patch: case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 329
score: 99.78011997767857
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( null ) ;
rank: 329
score: 99.77163152825342
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , this ) ) ; }
rank: 329
score: 99.76422704409246
patch: case Token . RETURN : if ( n . get CaMeL Next ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 329
score: 99.709765625
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 330
score: 99.82382373595506
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 330
score: 99.79952663845486
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , node ) ) ;
rank: 330
score: 99.7982261344178
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ) ;
rank: 330
score: 99.79129624640805
patch: while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 330
score: 99.78637251420454
patch: } if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 330
score: 99.78011067708333
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } switch ( n . get CaMeL Type ( ) ) { case Token . CONTINUE :
rank: 330
score: 99.77161815068493
patch: case Token . BLOCK : case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 330
score: 99.76420028895548
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , null ) ; }
rank: 330
score: 99.75008026541096
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( g CaMeL Node ) ; }
rank: 330
score: 99.70974892064145
patch: case Di CaMeL Graph CaMeL Edge . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 331
score: 99.79951028262867
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 331
score: 99.7912365141369
patch: case Token . BLOCK : if ( first . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 331
score: 99.78007427014802
patch: case Type . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ;
rank: 331
score: 99.77157628676471
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 331
score: 99.7641376201923
patch: case Token . BLOCK : if ( n . get CaMeL Next ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 331
score: 99.70974249588816
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return n ;
rank: 332
score: 99.79123046875
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( first . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 332
score: 99.78634600572182
patch: case Token . BLOCK : if ( node . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 332
score: 99.78005022321429
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , first ) ; } else if ( n . has CaMeL Children ( ) ) {
rank: 332
score: 99.77151041666667
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 332
score: 99.76398859797297
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , g CaMeL Node ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 332
score: 99.74998046875
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 332
score: 99.70973036024306
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 333
score: 99.823486328125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child (
rank: 333
score: 99.79929762620192
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 333
score: 99.79119194878473
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 333
score: 99.78001257491438
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 333
score: 99.77141462053571
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Source ( ) ) ; }
rank: 333
score: 99.76398577008929
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) != null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 333
score: 99.74997395833333
patch: case Token . FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 333
score: 99.70966968201755
patch: case Token . FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 334
score: 99.79921538254311
patch: case Token . BLOCK : { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 334
score: 99.78622755363806
patch: } if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 334
score: 99.77998432360198
patch: case Token . BLOCK : case Token . FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 334
score: 99.77137169471153
patch: case Token . BLOCK : case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 334
score: 99.76396991680195
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 334
score: 99.7096280184659
patch: case Di CaMeL Graph CaMeL Edge . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 335
score: 99.82342529296875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 335
score: 99.79109700520833
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( this ) ) ; }
rank: 335
score: 99.78620158450704
patch: case Token . BLOCK : Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 335
score: 99.77996905438312
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 335
score: 99.77135946584302
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) , n . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 335
score: 99.76392552759741
patch: case Type . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ; }
rank: 335
score: 99.74992370605469
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 335
score: 99.7096011513158
patch: case Di CaMeL Graph CaMeL Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 336
score: 99.79916561351104
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { try { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 336
score: 99.79792865953948
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 336
score: 99.78617136101974
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ;
rank: 336
score: 99.76391927083333
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 336
score: 99.74990800498189
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( first . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 336
score: 99.70950610017124
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 337
score: 99.823359375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ,
rank: 337
score: 99.78610755657327
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = node . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 337
score: 99.77986886160714
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( parent ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 337
score: 99.7638962204392
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 337
score: 99.74988471137152
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 337
score: 99.70943566524622
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ;
rank: 338
score: 99.79887431376689
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 338
score: 99.79090494791667
patch: case Token . BLOCK : { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 338
score: 99.77986542166096
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . get CaMeL Next ( ) . get CaMeL Type ( ) != Token . FUNCTION ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 338
score: 99.77124763257575
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) != null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; }
rank: 338
score: 99.74985424440298
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 338
score: 99.70924246651786
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 339
score: 99.823271484375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( node
rank: 339
score: 99.7978515625
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 339
score: 99.79088056848404
patch: } if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 339
score: 99.78583021566901
patch: } Node first = n . get CaMeL First CaMeL Child ( ) ; Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 339
score: 99.77123363597973
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n . get CaMeL First CaMeL Child ( ) ) ; }
rank: 339
score: 99.74976399739583
patch: case Branch . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 340
score: 99.79884998833955
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 340
score: 99.79781811857876
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 340
score: 99.78581891741071
patch: } } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 340
score: 99.77120049055233
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 340
score: 99.76372260551948
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ) ;
rank: 341
score: 99.79884739925987
patch: if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 341
score: 99.79781668526786
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return n . get CaMeL First CaMeL Child ( ) ;
rank: 341
score: 99.78576483242753
patch: } if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 341
score: 99.77116915545886
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 341
score: 99.76371146537163
patch: case Token . BLOCK : if ( n . get CaMeL Next ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 341
score: 99.7497123822774
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 342
score: 99.82322265625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL
rank: 342
score: 99.79870256696428
patch: case Token . BLOCK : if ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 342
score: 99.79781197212837
patch: case Token . RETURN : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 342
score: 99.77955686891234
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { break ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 342
score: 99.7711514559659
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n . get CaMeL First CaMeL Child ( ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 342
score: 99.76365094866071
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 342
score: 99.74968998015873
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 343
score: 99.82320106907895
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ) ;
rank: 343
score: 99.79766635237068
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 343
score: 99.79073324548193
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( node ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 343
score: 99.7854891690341
patch: case Token . BLOCK : try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 343
score: 99.77944863809121
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 343
score: 99.77110612896126
patch: case Token . BLOCK : if ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 343
score: 99.76360927483974
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 344
score: 99.79856460813492
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 344
score: 99.79761745505137
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL Next ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ) ;
rank: 344
score: 99.79070081208882
patch: } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 344
score: 99.7854572452911
patch: } case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 344
score: 99.77943250868056
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 344
score: 99.76358943790585
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 344
score: 99.70903251540493
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ) ;
rank: 345
score: 99.79856178977273
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 345
score: 99.79056186868686
patch: } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; }
rank: 345
score: 99.78545673076923
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return first ; }
rank: 345
score: 99.77941216362848
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else g CaMeL Node = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 345
score: 99.7710848721591
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 345
score: 99.76354478809931
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL Next ( ) ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 345
score: 99.74963909646739
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) . try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 345
score: 99.70901608157467
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 346
score: 99.79855099239865
patch: } else { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 346
score: 99.79757169397865
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ;
rank: 346
score: 99.78545572916667
patch: case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 346
score: 99.77927760074013
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } case Token . BLOCK :
rank: 346
score: 99.77106789981617
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 346
score: 99.76353809931507
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 346
score: 99.74960506663604
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 346
score: 99.70893623459507
patch: try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 347
score: 99.82314590669014
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { n . get CaMeL First CaMeL Child ( ) ; }
rank: 347
score: 99.79846504407051
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 347
score: 99.79756887335526
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL Next ( ) ) ) ;
rank: 347
score: 99.79030811543367
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 347
score: 99.78542446082747
patch: } if ( n . get CaMeL First CaMeL Child ( ) != null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 347
score: 99.7792732484879
patch: case Token . BLOCK : case Token . FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 347
score: 99.76353809931507
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 347
score: 99.74957361355634
patch: case Node . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 347
score: 99.70892776268116
patch: try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 348
score: 99.82314453125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( )
rank: 348
score: 99.79838666523973
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } catch ( ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 348
score: 99.79756091889881
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { remove CaMeL Dead CaMeL Expr CaMeL Statement CaMeL Safely ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 348
score: 99.79019201807229
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( this ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 348
score: 99.78533316349638
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( node ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 348
score: 99.77923224954044
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } } switch ( n . get CaMeL Type ( ) ) {
rank: 348
score: 99.77092633928571
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 348
score: 99.76350911458333
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 348
score: 99.74952674278846
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 348
score: 99.70892333984375
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) . get CaMeL Value ( ) ;
rank: 349
score: 99.79833366297468
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n . has CaMeL Children ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 349
score: 99.7975139853395
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 349
score: 99.79011742862654
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 349
score: 99.7852340919384
patch: } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 349
score: 99.77082081330128
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) , n . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 349
score: 99.76350402832031
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 349
score: 99.74935670882937
patch: case Token . BLOCK : case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 349
score: 99.70891655815973
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 350
score: 99.79828482614437
patch: case Token . BLOCK : while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 350
score: 99.7900993441358
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 350
score: 99.78523084852431
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 350
score: 99.7790962114726
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , next ) ; }
rank: 350
score: 99.77080078125
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 350
score: 99.76341453758445
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . RETURN ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 350
score: 99.74917941623264
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 350
score: 99.7088687294408
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ;
rank: 351
score: 99.82311559606481
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n . get CaMeL First CaMeL Child ( ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 351
score: 99.79745565878379
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else
rank: 351
score: 99.79006204044117
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally {
rank: 351
score: 99.78522600446429
patch: } if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 351
score: 99.77908283390411
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; }
rank: 351
score: 99.76326497395833
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . get CaMeL Next ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 351
score: 99.749169921875
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 351
score: 99.70880047686688
patch: case Token . BLOCK : case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 352
score: 99.82308349609374
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 352
score: 99.79822240901899
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ;
rank: 352
score: 99.79745322779605
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 352
score: 99.79002888997395
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 352
score: 99.78516412550404
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) == null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 352
score: 99.77903878348214
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( element ) ) ;
rank: 352
score: 99.77078977772888
patch: case Token . BLOCK : case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 352
score: 99.76322741386218
patch: case Token . BLOCK : if ( n . get CaMeL Next ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 352
score: 99.74916585286458
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } * / return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 352
score: 99.70869140625
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 353
score: 99.82307291666666
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) != null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 353
score: 99.7982113486842
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 353
score: 99.78994821947674
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 353
score: 99.78514917346014
patch: } if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 353
score: 99.77073160807292
patch: case Token . BLOCK : case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 353
score: 99.76321072048611
patch: case Type . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 353
score: 99.70864051496478
patch: case Token . BREAK : case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 354
score: 99.823056640625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) , false ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node (
rank: 354
score: 99.79739200367646
patch: case FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 354
score: 99.78514305320945
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 354
score: 99.77067057291667
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) ; } }
rank: 354
score: 99.76315755208333
patch: case Token . BLOCK : if ( n . get CaMeL Next ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Branch . UNCOND ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 354
score: 99.74908621651785
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 354
score: 99.70859662224265
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) ) ;
rank: 355
score: 99.8230549015411
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 355
score: 99.7981391802226
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 355
score: 99.79735620471014
patch: case BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 355
score: 99.78510199652777
patch: case Token . BLOCK : if ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 355
score: 99.77896712662337
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ;
rank: 355
score: 99.7490234375
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 356
score: 99.82305385044643
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return n . get CaMeL First CaMeL Child ( ) ; }
rank: 356
score: 99.79809261273734
patch: if ( n . has CaMeL Children ( ) ) { Node first = Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 356
score: 99.79728075484155
patch: case BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 356
score: 99.77893238336267
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( ! first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 356
score: 99.77045430222603
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , first ) ) ; }
rank: 356
score: 99.76305434283088
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 356
score: 99.7490234375
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 356
score: 99.70858723958334
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; }
rank: 357
score: 99.82303873697917
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; }
rank: 357
score: 99.79727991615853
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL Next ( ) . get CaMeL Value ( ) ) ) ;
rank: 357
score: 99.78493761660448
patch: } Token first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 357
score: 99.7788864356884
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ,
rank: 357
score: 99.77042528609155
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 357
score: 99.76304867393092
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 357
score: 99.74900189568015
patch: case Token . BREAK : case Token . CONTINUE : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 357
score: 99.7085848721591
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 358
score: 99.82303873697917
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { n . get CaMeL First CaMeL Child ( ) . set CaMeL Parent ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ) ; }
rank: 358
score: 99.7972364549513
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 358
score: 99.78966703869048
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , ) ) ;
rank: 358
score: 99.78491950757575
patch: } else { case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 358
score: 99.77885932426948
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , compute CaMeL Following ( n ) ) ;
rank: 358
score: 99.77041590073529
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; }
rank: 358
score: 99.76303385416666
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , g CaMeL Node ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 358
score: 99.74897693452381
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 358
score: 99.70856207770271
patch: if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 359
score: 99.82297253964552
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { n . has CaMeL Children ( ) ; }
rank: 359
score: 99.78484176377118
patch: } Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 359
score: 99.77882893880208
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , $STRING$ ) ;
rank: 359
score: 99.77026668595678
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 359
score: 99.74896323844177
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; } }
rank: 360
score: 99.8229296875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node (
rank: 360
score: 99.79711174242425
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . RETURN ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 360
score: 99.78954516882185
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ;
rank: 360
score: 99.78483072916667
patch: } try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 360
score: 99.77877004523026
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 360
score: 99.77024257330247
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; }
rank: 360
score: 99.76296657986111
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 360
score: 99.74889929819915
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 360
score: 99.70844795334507
patch: try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return n . get CaMeL Out CaMeL Edges ( ) ; }
rank: 361
score: 99.82292451054217
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( node ) ) ;
rank: 361
score: 99.79796424278847
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return n ; } }
rank: 361
score: 99.79710241866438
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 361
score: 99.78951554445877
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 361
score: 99.78478119338769
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 361
score: 99.77022967761076
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; }
rank: 361
score: 99.7628959760274
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ) ; }
rank: 361
score: 99.74887827280405
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } ) ; }
rank: 362
score: 99.82283203125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) )
rank: 362
score: 99.79790182674633
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 362
score: 99.78951009114583
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ) ;
rank: 362
score: 99.78477154356061
patch: case Token . BLOCK : { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 362
score: 99.77875651041667
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 362
score: 99.77016528684702
patch: case Token . BLOCK : case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) != null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 362
score: 99.76283378031717
patch: case Token . BLOCK : if ( n . get CaMeL Next ( ) == null ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 362
score: 99.74882192460318
patch: case Token . CONTINUE : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 362
score: 99.70836542693662
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL Out CaMeL Edges ( ) ;
rank: 363
score: 99.79773627387152
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } catch ( ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 363
score: 99.79707295185811
patch: case Token . BREAK : if ( n . get CaMeL Type ( ) == Token . BREAK ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 363
score: 99.78470187717014
patch: } case Token . BLOCK : { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 363
score: 99.77867367393092
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } case Token . BLOCK :
rank: 363
score: 99.77011253720238
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } }
rank: 363
score: 99.7626953125
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 363
score: 99.74876354586694
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 363
score: 99.7083310409331
patch: case Token . RETURN : case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 364
score: 99.8226171875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; }
rank: 364
score: 99.7977145010965
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 364
score: 99.79688856336806
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 364
score: 99.7893125952744
patch: } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 364
score: 99.7846821218297
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( node ) ; }
rank: 364
score: 99.77865640219156
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 364
score: 99.77007515822785
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 364
score: 99.76265887360074
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ) ; }
rank: 364
score: 99.74874834947182
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } . return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 364
score: 99.70832061767578
patch: case Token . BREAK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 365
score: 99.79686337425595
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 365
score: 99.78924309717466
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally {
rank: 365
score: 99.77863420758929
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( true ) ;
rank: 365
score: 99.77007247740964
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) , n ) ;
rank: 365
score: 99.7626171875
patch: case Token . BLOCK : if ( n . get CaMeL Next ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; }
rank: 365
score: 99.7487084173387
patch: case Token . FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 365
score: 99.70830585430195
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else {
rank: 366
score: 99.8224333175505
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ;
rank: 366
score: 99.79685974121094
patch: case Token . BREAK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 366
score: 99.78922358247422
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 366
score: 99.78460903825432
patch: } Token first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 366
score: 99.7786003561581
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else switch ( n . get CaMeL Type ( ) ) {
rank: 366
score: 99.76255859375
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 366
score: 99.74862879922945
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 366
score: 99.70826514991555
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 367
score: 99.822392578125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child
rank: 367
score: 99.79765124198718
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 367
score: 99.79680142337328
patch: case BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 367
score: 99.7891845703125
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( this ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 367
score: 99.78460286458333
patch: case Token . BLOCK : { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 367
score: 99.77858723958333
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { remove CaMeL Dead CaMeL Expr CaMeL Statement CaMeL Safely ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 367
score: 99.76996451364437
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) , n . has CaMeL Children ( ) ) ) ;
rank: 367
score: 99.76251715582771
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == null ? null : n . get CaMeL First CaMeL Child ( ) . get CaMeL Value ( ) ) ;
rank: 367
score: 99.74860026041667
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 367
score: 99.70822045110887
patch: case Di CaMeL Graph CaMeL Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 368
score: 99.82229953342014
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 368
score: 99.79764873798077
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 368
score: 99.79676910768072
patch: case BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 368
score: 99.78918319873596
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 368
score: 99.78458230537281
patch: } if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 368
score: 99.77855767144098
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } switch ( n . get CaMeL Type ( ) ) { case Token . FUNCTION :
rank: 368
score: 99.76989591574367
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; }
rank: 368
score: 99.7625080265411
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 368
score: 99.70815496575342
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return n ;
rank: 369
score: 99.822294921875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) )
rank: 369
score: 99.79757557744566
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ;
rank: 369
score: 99.79665798611111
patch: case RETURN : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 369
score: 99.7891133626302
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 369
score: 99.78447265625
patch: case Token . BLOCK : Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 369
score: 99.7624900928442
patch: case Token . BLOCK : case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 369
score: 99.70808346170774
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 370
score: 99.8222419984879
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ; }
rank: 370
score: 99.79754896566901
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = null ; while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 370
score: 99.79663696289063
patch: case RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 370
score: 99.78910405585107
patch: } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; }
rank: 370
score: 99.77846891983695
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } } else if ( n . has CaMeL Children ( ) ) {
rank: 370
score: 99.76985401218221
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 370
score: 99.76247524207747
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == null ? null : g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ) ; }
rank: 370
score: 99.74840978673987
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return
rank: 370
score: 99.7080307006836
patch: case Token . BLOCK : case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 371
score: 99.82220703125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL
rank: 371
score: 99.79749348958333
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 371
score: 99.79662134740259
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n , n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 371
score: 99.7844009399414
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return first ; }
rank: 371
score: 99.778466796875
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 371
score: 99.7698462701613
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return first ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 371
score: 99.74834118150685
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 371
score: 99.7080078125
patch: case Token . BREAK : case Token . BREAK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 372
score: 99.8221578226461
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 372
score: 99.79748222155449
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 372
score: 99.78908521075581
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { }
rank: 372
score: 99.78434535435268
patch: } else { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 372
score: 99.77844916449652
patch: case Token . BLOCK : if ( g CaMeL Node . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 372
score: 99.76984145220588
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) , n ) ;
rank: 372
score: 99.76244782748287
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 372
score: 99.74830386513158
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { break ; } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 372
score: 99.70799067982456
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 373
score: 99.822119140625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child
rank: 373
score: 99.79745023544521
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 373
score: 99.78908263530928
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 373
score: 99.78430008561644
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 373
score: 99.76982964409723
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 373
score: 99.76240808823529
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 373
score: 99.74829445422536
patch: case Node . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 373
score: 99.70784505208333
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return n . get CaMeL First CaMeL Child ( ) . get CaMeL Value ( ) ;
rank: 374
score: 99.79657240316901
patch: case Token . RETURN : if ( ! n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 374
score: 99.7890292080966
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , ) ) ;
rank: 374
score: 99.77830711570945
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 374
score: 99.76975429205247
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; }
rank: 374
score: 99.76230197482639
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 374
score: 99.74826388888889
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 375
score: 99.79736328125
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 375
score: 99.79656110491071
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { String first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 375
score: 99.78902803308823
patch: case Node . BLOCK : { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 375
score: 99.78424269153226
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 375
score: 99.77811739042208
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , first ) ;
rank: 375
score: 99.76965942382813
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 375
score: 99.76229467147436
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Value ( ) ) ;
rank: 375
score: 99.74825710720486
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 375
score: 99.70775082236842
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ;
rank: 376
score: 99.79647163722827
patch: case RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 376
score: 99.78893162048969
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } }
rank: 376
score: 99.78415432224025
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 376
score: 99.77809244791666
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) || n . get CaMeL Type ( ) == Token . FUNCTION && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 376
score: 99.76958550347223
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; } }
rank: 376
score: 99.76226963141026
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , g CaMeL Node ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , g CaMeL Node ) ;
rank: 376
score: 99.74823288690476
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 376
score: 99.7076914612676
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) ;
rank: 377
score: 99.79725626070206
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 377
score: 99.77807241586538
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 377
score: 99.76953876201924
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return first ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 377
score: 99.76207994434931
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 377
score: 99.70767806412337
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ;
rank: 378
score: 99.821982421875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n )
rank: 378
score: 99.79710820895522
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 378
score: 99.7962890625
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { String first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 378
score: 99.78407796223958
patch: } Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 378
score: 99.77804763595779
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { remove CaMeL Dead CaMeL Expr CaMeL Statement CaMeL Safely ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 378
score: 99.7695062099359
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 378
score: 99.76207817925348
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 378
score: 99.7482188050176
patch: case Branch . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 378
score: 99.70766225961539
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 379
score: 99.821962890625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n
rank: 379
score: 99.79710629111842
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 379
score: 99.79628670933735
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 379
score: 99.7840731534091
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 379
score: 99.76943760702055
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL First CaMeL Child ( ) ) ;
rank: 379
score: 99.76206186655405
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 380
score: 99.8219140625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node (
rank: 380
score: 99.79625746783088
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 380
score: 99.7887037627551
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 380
score: 99.78406155493951
patch: } try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 380
score: 99.77774950484155
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( this ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 380
score: 99.76941680908203
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; }
rank: 380
score: 99.76204866976352
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , g CaMeL Node ) ) ;
rank: 380
score: 99.748046875
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 380
score: 99.70765625
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 381
score: 99.7962547508446
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 381
score: 99.78870159646739
patch: while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; }
rank: 381
score: 99.76940524193549
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; }
rank: 381
score: 99.74802533318015
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ) ;
rank: 382
score: 99.79617557010135
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 382
score: 99.78867797851562
patch: if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 382
score: 99.77769639756944
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( this ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 382
score: 99.7694044237013
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) != null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; }
rank: 382
score: 99.76196606128246
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == null ? null : try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ) ; }
rank: 382
score: 99.74800561179578
patch: case Number . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 382
score: 99.70755208333334
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , ) ;
rank: 383
score: 99.7968359375
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n . get CaMeL First CaMeL Child ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 383
score: 99.78402193509615
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return n ; }
rank: 383
score: 99.76939174107143
patch: case Token . BLOCK : case Token . LINE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 383
score: 99.76195037059294
patch: case Token . BLOCK : case Token . RETURN : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 383
score: 99.74797058105469
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 383
score: 99.70750427246094
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 384
score: 99.82171875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n . get CaMeL First CaMeL Child
rank: 384
score: 99.796142578125
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 384
score: 99.78397156762296
patch: } try { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 384
score: 99.76936383928572
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { n . get CaMeL First CaMeL Child ( ) . has CaMeL Children ( ) ; }
rank: 384
score: 99.76194661458334
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 384
score: 99.74793027052239
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 384
score: 99.7075
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 385
score: 99.821650390625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent CaMeL Node ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) . get CaMeL
rank: 385
score: 99.79679890422078
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( ) ) ;
rank: 385
score: 99.78860363328313
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = first . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 385
score: 99.78396684695512
patch: case Token . BLOCK : { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 385
score: 99.7774559227196
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 385
score: 99.76935686383929
patch: case Token . BLOCK : case Token . BLOCK : case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 385
score: 99.76190863715277
patch: case Token . RETURN : if ( n . get CaMeL Next ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 385
score: 99.74788411458333
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 385
score: 99.70746291893116
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ;
rank: 386
score: 99.82164171006944
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 386
score: 99.78855657003012
patch: case Token . BLOCK : while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 386
score: 99.78392235008445
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) == null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 386
score: 99.77745442708333
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . get CaMeL Next ( ) . get CaMeL Type ( ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 386
score: 99.74780991498162
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 386
score: 99.70733963815789
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 387
score: 99.82163869598766
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n . get CaMeL First CaMeL Child ( ) ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 387
score: 99.79662082619863
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ;
rank: 387
score: 99.79611022213855
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 387
score: 99.78855387369792
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = node . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 387
score: 99.78391676682692
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 387
score: 99.77745225694444
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } case Token . BREAK : if ( n . has CaMeL Children ( ) ) {
rank: 387
score: 99.76934735186688
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 387
score: 99.76190104166666
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 387
score: 99.74769928495763
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 387
score: 99.70730549015411
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return n ; }
rank: 388
score: 99.796484375
patch: } else { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 388
score: 99.79607979910715
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 388
score: 99.78852251838235
patch: try { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 388
score: 99.77737205615942
patch: case Type . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 388
score: 99.7692626953125
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ) ;
rank: 388
score: 99.76179334852431
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , this ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 388
score: 99.74759872645548
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } ) ;
rank: 388
score: 99.707275390625
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 389
score: 99.82162173763736
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 389
score: 99.79641384548611
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 389
score: 99.79605679898648
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 389
score: 99.78851248204023
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 389
score: 99.78386773003473
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 389
score: 99.77733706121575
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; }
rank: 389
score: 99.76924986758475
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { n . has CaMeL Children ( ) ; }
rank: 389
score: 99.76172501001602
patch: case Token . BLOCK : case Token . BREAK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 389
score: 99.74756537543402
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( new Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 390
score: 99.821591796875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute
rank: 390
score: 99.79635027985074
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 390
score: 99.79604285871478
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 390
score: 99.78844209558824
patch: case Token . BLOCK : while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 390
score: 99.78382662259615
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 390
score: 99.77733018663194
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 390
score: 99.76921357304217
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) , n ) ) ;
rank: 390
score: 99.7616828469669
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 390
score: 99.74756537543402
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 390
score: 99.70725319602273
patch: case Di CaMeL Graph CaMeL Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 391
score: 99.82155967620481
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 391
score: 99.79602213541666
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 391
score: 99.78381878396739
patch: case Token . BLOCK : return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 391
score: 99.76919681078768
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first , n ) ) ; }
rank: 391
score: 99.76167492988782
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ;
rank: 391
score: 99.7072265625
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 392
score: 99.82155004040948
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { Thread . current CaMeL Thread ( ) . interrupt ( ) ; }
rank: 392
score: 99.79600432981928
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 392
score: 99.78842644942434
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; } }
rank: 392
score: 99.78373278601696
patch: } case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 392
score: 99.76916666666666
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first , n ) ) ; }
rank: 392
score: 99.76163297086148
patch: case Token . BLOCK : if ( n . get CaMeL Next ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . BREAK ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 392
score: 99.74748601140203
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 392
score: 99.70722113715277
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 393
score: 99.79625294306507
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n . get CaMeL First CaMeL Child ( ) ) ;
rank: 393
score: 99.79598659939236
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 393
score: 99.78837122542134
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . has CaMeL Children ( ) ) ) ;
rank: 393
score: 99.78368432971014
patch: } if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 393
score: 99.76913597470238
patch: case Token . BLOCK : case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 393
score: 99.7616184182363
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , this ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 393
score: 99.74743480413733
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 393
score: 99.70722005208333
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ;
rank: 394
score: 99.82146721917229
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = ( Node ) n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 394
score: 99.78836167279412
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , node ) ) ;
rank: 394
score: 99.78365181587837
patch: } case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 394
score: 99.77704821134868
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ;
rank: 394
score: 99.76155841884328
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 394
score: 99.74743150684931
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } / /
rank: 394
score: 99.70719640395221
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ) ;
rank: 395
score: 99.79624456091773
patch: if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 395
score: 99.79593373493977
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 395
score: 99.78834727112677
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 395
score: 99.78365127354452
patch: } case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 395
score: 99.77701400162337
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; }
rank: 395
score: 99.7690680088141
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 395
score: 99.76152060688406
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , n ) ;
rank: 395
score: 99.7474013506356
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 395
score: 99.70716796875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( first ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 396
score: 99.79621744791666
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( first . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 396
score: 99.79588524070945
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 396
score: 99.77696248929794
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 396
score: 99.76899857954545
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ;
rank: 396
score: 99.76149867957747
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 396
score: 99.70714047080592
patch: case Token . BLOCK : case Token . BREAK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 397
score: 99.821318359375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) . get CaMeL Parent
rank: 397
score: 99.79620282061688
patch: } else { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 397
score: 99.79585404829545
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 397
score: 99.78811848958334
patch: case Token . BLOCK : { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 397
score: 99.776953125
patch: case Token . BLOCK : if ( n . size ( ) == 1 ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 397
score: 99.76146509740259
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ) ;
rank: 397
score: 99.70708907277961
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 398
score: 99.82131029211956
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; }
rank: 398
score: 99.79616292317708
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 398
score: 99.78805106026786
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( parent ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 398
score: 99.78347778320312
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 398
score: 99.77693359375
patch: case Token . BLOCK : case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 398
score: 99.7614311322774
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 398
score: 99.74731779751713
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; }
rank: 398
score: 99.70702456121575
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 399
score: 99.821220703125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL
rank: 399
score: 99.79583062065973
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 399
score: 99.78347439236111
patch: case try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 399
score: 99.77686922315141
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 399
score: 99.76870950838415
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ) ; }
rank: 399
score: 99.70700970818015
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ;
rank: 400
score: 99.82120414402173
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { first . has CaMeL Children ( ) ; }
rank: 400
score: 99.7960703675176
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 400
score: 99.78802425986842
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 400
score: 99.7834224977355
patch: } if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 400
score: 99.76128985430744
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ) ; }
rank: 400
score: 99.70700024801587
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n ;
rank: 401
score: 99.7960674579327
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 401
score: 99.79578575721153
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL Next ( ) ) ) ;
rank: 401
score: 99.78802154876374
patch: case Token . BLOCK : { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally {
rank: 401
score: 99.77671223958333
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 401
score: 99.76859777113971
patch: case Token . BLOCK : case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 401
score: 99.76124348958334
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 401
score: 99.74723307291667
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; break ;
rank: 401
score: 99.70692567567568
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , ) ;
rank: 402
score: 99.79578314887152
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 402
score: 99.788017578125
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( this ) ) ) ;
rank: 402
score: 99.77663845486111
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , this ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 402
score: 99.7685791015625
patch: case Token . BLOCK : { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 402
score: 99.76114106514085
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 402
score: 99.74722005208334
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; } }
rank: 402
score: 99.7069234476461
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 403
score: 99.7955974422089
patch: case Token . BLOCK : { if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 403
score: 99.78801700367647
patch: case Token != Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 403
score: 99.78332913306451
patch: case Token . BLOCK : Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 403
score: 99.77662805008562
patch: case Token . BLOCK : if ( ! n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 403
score: 99.76856269211065
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ;
rank: 403
score: 99.76113030849359
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 403
score: 99.74717733304794
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else if ( n . has CaMeL Children ( ) ) { break ; }
rank: 403
score: 99.70689603365385
patch: case Token . BREAK : case Token . CONTINUE : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 404
score: 99.79605697037337
patch: if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 404
score: 99.79551016566265
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n . get CaMeL Next ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) ) ;
rank: 404
score: 99.78331634963769
patch: } } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 404
score: 99.77657453981165
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n . get CaMeL Next ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) ) ;
rank: 404
score: 99.76107193587663
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Value ( ) ) ; }
rank: 404
score: 99.74712969805744
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n . get CaMeL First CaMeL Child ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 405
score: 99.79548177083333
patch: case Token . RETURN : if ( n . get CaMeL Type ( ) == Token . RETURN ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 405
score: 99.78325892857143
patch: } ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 405
score: 99.7685546875
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ) ;
rank: 405
score: 99.7067935341283
patch: try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return n . get CaMeL Destination ( ) . get CaMeL Value ( ) ; } }
rank: 406
score: 99.82083984375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n )
rank: 406
score: 99.79600765830592
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n . get CaMeL First CaMeL Child ( ) ) ) ; }
rank: 406
score: 99.79543992949695
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 406
score: 99.78324869791666
patch: case Token . BLOCK : Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; }
rank: 406
score: 99.77643785978618
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 406
score: 99.76847550675676
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 406
score: 99.76096540178571
patch: case Token . BLOCK : case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 406
score: 99.74707709418402
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 406
score: 99.7066710425205
patch: case Di CaMeL Graph CaMeL Node . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 407
score: 99.820732421875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent CaMeL Node (
rank: 407
score: 99.7960062398539
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Node ( ) ) ; }
rank: 407
score: 99.795166015625
patch: case CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 407
score: 99.7878664852528
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n . get CaMeL First CaMeL Child ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 407
score: 99.78320990668402
patch: try { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 407
score: 99.7684512867647
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 407
score: 99.76089298023896
patch: case Token . BLOCK : case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 407
score: 99.70665228544776
patch: case Token . RETURN : case Token . BREAK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 408
score: 99.82072265625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) . get CaMeL First CaMeL
rank: 408
score: 99.79499246987952
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n . get CaMeL Next ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Branch . UNCOND ) ;
rank: 408
score: 99.78783318014706
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; }
rank: 408
score: 99.76841681985294
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 408
score: 99.7066138482863
patch: case Token . BREAK : case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 409
score: 99.82071146150915
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) . get CaMeL Parent ( ) ) ;
rank: 409
score: 99.79598858173077
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 409
score: 99.79493995949075
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) . get CaMeL Type ( ) == Token . BLOCK ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 409
score: 99.77629361087328
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BREAK :
rank: 409
score: 99.76839599609374
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } }
rank: 409
score: 99.76086755701013
patch: case Token . BLOCK : if ( n . get CaMeL Next ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . BLOCK ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 409
score: 99.74687364366319
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL First CaMeL Child ( ) . get CaMeL Value ( ) ) ; }
rank: 410
score: 99.820703125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL
rank: 410
score: 99.79592447916667
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 410
score: 99.7949287522007
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 410
score: 99.78779163099315
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 410
score: 99.78316873899648
patch: } Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 410
score: 99.7762668557363
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 410
score: 99.76839192708333
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) . get CaMeL First CaMeL Child ( ) ) ; }
rank: 410
score: 99.76082356770833
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 410
score: 99.74681260850694
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 410
score: 99.70647893186475
patch: case Di CaMeL Graph CaMeL Edge . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 411
score: 99.7959130130597
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 411
score: 99.78777071795886
patch: else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 411
score: 99.78311786954364
patch: case Token . BLOCK : Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 411
score: 99.77625558035714
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL Node ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 411
score: 99.76837713068181
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL First CaMeL Child ( ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 411
score: 99.76077517947635
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 411
score: 99.7064144736842
patch: case Di CaMeL Graph CaMeL Node . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 412
score: 99.82066243489584
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { n . get CaMeL First CaMeL Child ( ) . close ( ) ; }
rank: 412
score: 99.79490064538044
patch: case RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 412
score: 99.7876838235294
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 412
score: 99.78308272688356
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return n ; }
rank: 412
score: 99.76830760542168
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ) ) ;
rank: 412
score: 99.76077270507812
patch: case Token . BLOCK : if ( n . get CaMeL Next ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 412
score: 99.74679977829392
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 412
score: 99.70640120967742
patch: case Token . RETURN : case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 413
score: 99.82065716911765
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 413
score: 99.79587053571429
patch: if ( n . has CaMeL Children ( ) ) { Node first = Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 413
score: 99.79473619058099
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , g CaMeL Node . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 413
score: 99.7876347409019
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 413
score: 99.78307194496269
patch: } while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 413
score: 99.77620943509615
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) , n ) ; }
rank: 413
score: 99.76829892113095
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) . get CaMeL Value ( ) ) ;
rank: 413
score: 99.76075613839286
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 413
score: 99.74679657907197
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 414
score: 99.79469445633562
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL Parent ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ) ;
rank: 414
score: 99.78304036458333
patch: case Token . BLOCK : } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 414
score: 99.77613890016234
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Value ( ) ) ; }
rank: 414
score: 99.70636858258929
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : case Di CaMeL Graph CaMeL Edge . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 415
score: 99.794677734375
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 415
score: 99.78291890158582
patch: } } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 415
score: 99.77610909598214
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( element ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 415
score: 99.76810709635417
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } catch ( ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 415
score: 99.76066545758928
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 415
score: 99.74673704117063
patch: case Token . BLOCK : case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 416
score: 99.82052825218024
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 416
score: 99.79464017427884
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 416
score: 99.78757248711341
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 416
score: 99.77609897667253
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , first ) ;
rank: 416
score: 99.76809985017124
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n , first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 416
score: 99.76065640836148
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 416
score: 99.74671269806338
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 417
score: 99.79577795251623
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { n . has CaMeL Children ( ) ; }
rank: 417
score: 99.7946246603261
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 417
score: 99.78287259615385
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 417
score: 99.74668518926056
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 417
score: 99.70615885416667
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 418
score: 99.82050095942982
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return first . get CaMeL First CaMeL Child ( ) ; }
rank: 418
score: 99.78753863324175
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 418
score: 99.78284222146739
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 418
score: 99.77587890625
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 418
score: 99.76048219358766
patch: case Token . BLOCK : if ( n . get CaMeL Next ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 418
score: 99.74664199561404
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 418
score: 99.70615671641791
patch: case Token . BLOCK : case Token . BREAK : case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 419
score: 99.82048828125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ,
rank: 419
score: 99.79459635416667
patch: case Token . RETURN : case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 419
score: 99.78753051757812
patch: } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 419
score: 99.78283898305085
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; ; }
rank: 419
score: 99.77583821614583
patch: case Type . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , first ) ;
rank: 419
score: 99.76789580195783
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 419
score: 99.76046505489865
patch: case Token . RETURN : if ( n . get CaMeL Next ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 419
score: 99.74662017822266
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 419
score: 99.70610026041666
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else return n ;
rank: 420
score: 99.82045692121478
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { n . get CaMeL First CaMeL Child ( ) ; }
rank: 420
score: 99.78752367424242
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( ) ) ;
rank: 420
score: 99.77580281047078
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 420
score: 99.7677990141369
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) . get CaMeL Parent ( ) ) ) ;
rank: 420
score: 99.76040566934121
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 420
score: 99.74658862964527
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 421
score: 99.79566217237904
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 421
score: 99.7945842978395
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 421
score: 99.78745734554597
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( this ) ) ;
rank: 421
score: 99.78275553385417
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 421
score: 99.7757901278409
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 421
score: 99.76776123046875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { n . get CaMeL First CaMeL Child ( ) . get CaMeL First CaMeL Child ( ) ; }
rank: 421
score: 99.76040414663461
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ) ;
rank: 422
score: 99.7955752090669
patch: } else { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 422
score: 99.77575860507247
patch: if ( n . get CaMeL Type ( ) == Token . BLOCK ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 422
score: 99.76774088541667
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 422
score: 99.76039247255068
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 422
score: 99.74658203125
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ) ; }
rank: 422
score: 99.70599043996711
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 423
score: 99.79454985119048
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 423
score: 99.78269449869792
patch: } case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 423
score: 99.77567708333333
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 423
score: 99.76771566901408
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) || n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 423
score: 99.74648902529762
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 423
score: 99.70597759046052
patch: case Di CaMeL Graph CaMeL Edge . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 424
score: 99.79551866319444
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 424
score: 99.79453974184783
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 424
score: 99.78733072916667
patch: while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 424
score: 99.78260967548077
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return null ; } }
rank: 424
score: 99.77567661830358
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( next ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 424
score: 99.76770697699652
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 424
score: 99.76037910657051
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 424
score: 99.74642898787313
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 424
score: 99.70593098958334
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 425
score: 99.8201953125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n . get CaMeL First CaMeL
rank: 425
score: 99.79550904865506
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n . has CaMeL Children ( ) ) ) ; }
rank: 425
score: 99.7873093938253
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 425
score: 99.78251333085318
patch: } case Token . BLOCK : Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 425
score: 99.7603660789696
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) == null ? null : try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ) ;
rank: 425
score: 99.74641927083333
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ) ; }
rank: 425
score: 99.70592091181507
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ) ;
rank: 426
score: 99.79548625202922
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n . get CaMeL First CaMeL Child ( ) ) ;
rank: 426
score: 99.79438064759036
patch: case BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 426
score: 99.7872665229885
patch: while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( first . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 426
score: 99.78249411386986
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , node ) ) ; }
rank: 426
score: 99.77562275870902
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 426
score: 99.76764787946429
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 426
score: 99.76032366071429
patch: case Token . BLOCK : case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 426
score: 99.74641687729779
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 426
score: 99.70588514539931
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return n ; }
rank: 427
score: 99.82013693820225
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 427
score: 99.79543050130208
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 427
score: 99.79435332833904
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 427
score: 99.78247788373162
patch: } } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 427
score: 99.7755912885274
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , null ) ; }
rank: 427
score: 99.76763415727459
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ;
rank: 427
score: 99.76023204291045
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 427
score: 99.74641219429348
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ) ; }
rank: 427
score: 99.70587921142578
patch: case Token . RETURN : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 428
score: 99.82013671875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( )
rank: 428
score: 99.79434204101562
patch: case RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 428
score: 99.78725873161764
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , node ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 428
score: 99.78243255615234
patch: case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 428
score: 99.7755859375
patch: case Branch . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 428
score: 99.76762494648973
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 428
score: 99.74632019927536
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 428
score: 99.70586081112133
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ;
rank: 429
score: 99.79431668133803
patch: case Token . FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 429
score: 99.78242631392045
patch: } case Token . BLOCK : { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 429
score: 99.76760213883196
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 429
score: 99.70577775186567
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 430
score: 99.78718991623711
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ) ;
rank: 430
score: 99.78241912411971
patch: case Token . BLOCK : } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 430
score: 99.77554408482143
patch: case Branch . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 430
score: 99.74631238339552
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 430
score: 99.70574131296642
patch: case Token . BLOCK : case Token . RETURN : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 431
score: 99.82007264254386
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 431
score: 99.79528090533088
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 431
score: 99.78713235294117
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , first ) ) ;
rank: 431
score: 99.78241912411971
patch: } try { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 431
score: 99.76748184419014
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 431
score: 99.74627007378473
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 431
score: 99.70572673740672
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) ; }
rank: 432
score: 99.79527839781746
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return n ; } }
rank: 432
score: 99.79425122364458
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else if ( n . has CaMeL Children ( ) ) {
rank: 432
score: 99.78712086397059
patch: case Token . BLOCK : while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 432
score: 99.78237433182566
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 432
score: 99.77543131510417
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , current ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 432
score: 99.76742037259615
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 432
score: 99.7600311814693
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 432
score: 99.74606584821429
patch: case Object . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 432
score: 99.70570395026408
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 433
score: 99.79524489182693
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return n . get CaMeL First CaMeL Child ( ) ; }
rank: 433
score: 99.78709864354396
patch: if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 433
score: 99.78237231809702
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 433
score: 99.77542550223214
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( false ) ;
rank: 433
score: 99.74603355094177
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; break ; }
rank: 433
score: 99.70567562705592
patch: case Di CaMeL Graph CaMeL Edge . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 434
score: 99.82005974264706
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 434
score: 99.7952313490317
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( node ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 434
score: 99.79415545886076
patch: case Token . BREAK : if ( n . get CaMeL Parent ( ) == null ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 434
score: 99.78704769736842
patch: } else if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 434
score: 99.78234347491197
patch: } case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 434
score: 99.7753525771104
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 434
score: 99.7673602764423
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { n . get CaMeL First CaMeL Child ( ) . remove CaMeL First CaMeL Child ( first ) ; }
rank: 434
score: 99.75994194878473
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 434
score: 99.74598371478874
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } . try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 434
score: 99.70566268705986
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ) ;
rank: 435
score: 99.7952178030303
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 435
score: 99.78219357052365
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 435
score: 99.77531995271382
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } case Token . CONTINUE :
rank: 435
score: 99.76729736328124
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 435
score: 99.75992415787337
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , ) ;
rank: 435
score: 99.74593599759615
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . get CaMeL Parent ( ) == null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 436
score: 99.8200390625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL
rank: 436
score: 99.78214164402173
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( node ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 436
score: 99.77530367080479
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else switch ( n . get CaMeL Type ( ) ) { case Token . RETURN :
rank: 436
score: 99.76727764423077
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ;
rank: 436
score: 99.74591559332771
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 436
score: 99.70563151041667
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 437
score: 99.820009765625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis .
rank: 437
score: 99.7951814675633
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = node . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 437
score: 99.79411340932377
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 437
score: 99.78700474330357
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; }
rank: 437
score: 99.78213588169643
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 437
score: 99.7672603546627
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 437
score: 99.75988951725746
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . get CaMeL Next ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 437
score: 99.74590473790323
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 437
score: 99.70561780427632
patch: case Di CaMeL Graph CaMeL Node . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 438
score: 99.7951129415761
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 438
score: 99.7940590218322
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } } }
rank: 438
score: 99.78691198470744
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 438
score: 99.78211954195206
patch: } try { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 438
score: 99.7752621299342
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 438
score: 99.76722237723214
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 438
score: 99.7598385027985
patch: case Token . BLOCK : case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 438
score: 99.74586486816406
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 438
score: 99.70555962456598
patch: case Di CaMeL Graph CaMeL Edge . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ;
rank: 439
score: 99.81994047619048
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( ! try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 439
score: 99.79511021205357
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 439
score: 99.79405462919776
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 439
score: 99.78209947559931
patch: } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 439
score: 99.77525684931507
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; }
rank: 439
score: 99.76722160218254
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; }
rank: 439
score: 99.75983629728618
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Value ( ) ) ;
rank: 439
score: 99.74585620777027
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return n . get CaMeL First CaMeL Child ( ) ; }
rank: 439
score: 99.70555900804925
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ) ;
rank: 440
score: 99.81991786172945
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , false ) ) ; }
rank: 440
score: 99.79510857077206
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 440
score: 99.7939453125
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else
rank: 440
score: 99.77524928042763
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ;
rank: 440
score: 99.76721772693452
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) . get CaMeL Parent ( ) ) ;
rank: 440
score: 99.75979817708334
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 440
score: 99.74582926432292
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( g CaMeL Node ) ; }
rank: 440
score: 99.70554633989725
patch: try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 441
score: 99.819853515625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL
rank: 441
score: 99.79506429036458
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 441
score: 99.79389252533784
patch: case Token . BREAK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 441
score: 99.786806640625
patch: case Token . BLOCK : if ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; }
rank: 441
score: 99.78197210607394
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 441
score: 99.77522321428572
patch: case Branch : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 441
score: 99.75979166666667
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , g CaMeL Node ) ) ; }
rank: 441
score: 99.70548930921052
patch: case Token . BLOCK : case Token . BREAK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ;
rank: 442
score: 99.81982421875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child (
rank: 442
score: 99.79501815580986
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 442
score: 99.79383370535714
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Object first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 442
score: 99.78675554800725
patch: } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 442
score: 99.78194986979166
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 442
score: 99.77521571828358
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) && n . get CaMeL Type ( ) == Token . FUNCTION ) {
rank: 442
score: 99.759765625
patch: case Token . BLOCK : case Token . RETURN : if ( n . get CaMeL Next ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 442
score: 99.74575407608695
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 442
score: 99.70547700264085
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ) ;
rank: 443
score: 99.79500204057835
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n , n . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 443
score: 99.79380412274097
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Branch . UNCOND ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 443
score: 99.78666639819588
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; }
rank: 443
score: 99.77519665025685
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 443
score: 99.76715087890625
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , this ) ) ;
rank: 443
score: 99.75974635074013
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 443
score: 99.74574301276408
patch: case Token . FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 443
score: 99.70547441123189
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 444
score: 99.79495442708334
patch: try { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 444
score: 99.78665949789325
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , null ) ) ;
rank: 444
score: 99.78187003968254
patch: case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 444
score: 99.7751529091283
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else if ( n . has CaMeL Children ( ) || n . has CaMeL Children ( ) ) {
rank: 444
score: 99.76714618389423
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) , n ) ) ;
rank: 444
score: 99.70546437733209
patch: case Token . BLOCK : case Token . CONTINUE : case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 445
score: 99.7937762920673
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 445
score: 99.78663271949405
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 445
score: 99.78181086359797
patch: } if ( n . has CaMeL Children ( ) ) { Node first = Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 445
score: 99.77513363486842
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , cur CaMeL Cfg ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 445
score: 99.76705078125
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; }
rank: 445
score: 99.75970052083333
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ;
rank: 445
score: 99.70544610507247
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 446
score: 99.79480658637152
patch: case Token . BLOCK : { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 446
score: 99.78657670454545
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; }
rank: 446
score: 99.77512555803571
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( parent ) ) ;
rank: 446
score: 99.76704427083334
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) , n . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 446
score: 99.75969587053571
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 446
score: 99.74555121527777
patch: case Token . FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 446
score: 99.70544600813356
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Destination ( ) ) ;
rank: 447
score: 99.81974871134021
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) . get CaMeL Value ( ) ) ) ;
rank: 447
score: 99.79471842447917
patch: case Token . BLOCK : { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 447
score: 99.7936356707317
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 447
score: 99.7865675019055
patch: } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 447
score: 99.78172433035714
patch: Token first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 447
score: 99.77507188585069
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else if ( n . get CaMeL Type ( ) == Token . FUNCTION ) {
rank: 447
score: 99.76701726140203
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } } finally {
rank: 447
score: 99.74554526969177
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 448
score: 99.819697265625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL
rank: 448
score: 99.79469025440706
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 448
score: 99.79359837582237
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 448
score: 99.78646225527109
patch: case Token . BLOCK : if ( first . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 448
score: 99.78153422341418
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 448
score: 99.77505580357143
patch: case Token . ) : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 448
score: 99.7670156744462
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL First CaMeL Child ( ) ) ; }
rank: 448
score: 99.75959034455128
patch: case Token . BLOCK : if ( n . get CaMeL Next ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Value ( ) ) ;
rank: 448
score: 99.7455166903409
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Di CaMeL Graph CaMeL Edge . CONTINUE ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 448
score: 99.70538241621377
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; }
rank: 449
score: 99.79465680803571
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ;
rank: 449
score: 99.7935546875
patch: case Token . BREAK : case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 449
score: 99.78645833333333
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 449
score: 99.78151506696429
patch: } else { } if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 449
score: 99.775048828125
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 449
score: 99.76693233366936
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = ( Node ) n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 449
score: 99.75955078125
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 449
score: 99.74544270833333
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; }
rank: 449
score: 99.70537366365132
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 450
score: 99.8196484375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) != null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL
rank: 450
score: 99.79459635416667
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 450
score: 99.79349772135417
patch: case BLOCK : if ( n . get CaMeL Type ( ) == Token . BLOCK ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 450
score: 99.78642477448453
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , null ) ) ;
rank: 450
score: 99.78150153882575
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 450
score: 99.7750291700487
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 450
score: 99.7669002757353
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; }
rank: 450
score: 99.75951804577464
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 450
score: 99.70536009022888
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 451
score: 99.79457600911458
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 451
score: 99.7934861823694
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 451
score: 99.78139575559702
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 451
score: 99.77497016059027
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , element ) ;
rank: 451
score: 99.76684244791667
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; }
rank: 451
score: 99.75941581156717
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 451
score: 99.74543563179348
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 451
score: 99.70534104567308
patch: case Token . BLOCK : case Token . CONTINUE : case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 452
score: 99.81961945564517
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { n . get CaMeL First CaMeL Child ( ) . has CaMeL Children ( ) ; }
rank: 452
score: 99.79454752604167
patch: } else { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 452
score: 99.79346329126602
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 452
score: 99.78636259191177
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 452
score: 99.77490963152985
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 452
score: 99.76683213975694
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ;
rank: 452
score: 99.75936848958334
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; }
rank: 452
score: 99.74540858114919
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 452
score: 99.70528157552083
patch: case Token . FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 453
score: 99.81958830758427
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ) ;
rank: 453
score: 99.786328125
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , null ) ;
rank: 453
score: 99.78129185267858
patch: } if ( n . get CaMeL First CaMeL Child ( ) != null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 453
score: 99.77487483494718
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else if ( n . get CaMeL Type ( ) == Token . FUNCTION :
rank: 453
score: 99.75930606617646
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == null ? null : try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ) ;
rank: 453
score: 99.74540732563406
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 453
score: 99.70526380941901
patch: try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( null ) ;
rank: 454
score: 99.819580078125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) . get CaMeL Parent CaMeL
rank: 454
score: 99.79336313100961
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n . get CaMeL Parent ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 454
score: 99.786318359375
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( this ) ) ;
rank: 454
score: 99.7812732514881
patch: } case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 454
score: 99.77486923993644
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK :
rank: 454
score: 99.76672794117647
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) . get CaMeL Value ( ) ) ; }
rank: 454
score: 99.75929920708955
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ) ; }
rank: 454
score: 99.7052001953125
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 455
score: 99.819580078125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child
rank: 455
score: 99.78627545646067
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . has CaMeL Children ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 455
score: 99.78115362870066
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 455
score: 99.76671424278847
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) , n ) ;
rank: 455
score: 99.75927108373398
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 455
score: 99.74535757211538
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( next != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 456
score: 99.81953983516483
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent CaMeL Node ( ) ) ;
rank: 456
score: 99.79440146998355
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . has CaMeL Children ( ) ) ) ;
rank: 456
score: 99.79324419070512
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { remove CaMeL Dead CaMeL Expr CaMeL Statement CaMeL Safely ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 456
score: 99.78626505533855
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( this ) ) ;
rank: 456
score: 99.78111478365385
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 456
score: 99.77461322985198
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) {
rank: 456
score: 99.76666416266026
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 456
score: 99.75921135979729
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 456
score: 99.74534606933594
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) != null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 456
score: 99.70514410895271
patch: try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return n ;
rank: 457
score: 99.81953125
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 457
score: 99.79320629222973
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 457
score: 99.78103976779514
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 457
score: 99.77454291449652
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Branch ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 457
score: 99.7591552734375
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 457
score: 99.70514090401785
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 458
score: 99.81953125
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , try CaMeL Remove CaMeL Unconditional CaMeL
rank: 458
score: 99.78615089699075
patch: case Token . BLOCK : while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ) ;
rank: 458
score: 99.77449432791096
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; }
rank: 458
score: 99.75910750679348
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 458
score: 99.74528874577703
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else break ;
rank: 458
score: 99.70513751055744
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 459
score: 99.819521484375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control
rank: 459
score: 99.78612219769022
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; }
rank: 459
score: 99.77444797092014
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 459
score: 99.76658979668674
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( ) ) ; }
rank: 459
score: 99.75906032986111
patch: case Type . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 459
score: 99.74527219742063
patch: case Node . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 459
score: 99.70509292140152
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ) ;
rank: 460
score: 99.81950431034483
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) == null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 460
score: 99.79426432291666
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 460
score: 99.79286702473958
patch: case Token . BLOCK : if ( ! n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 460
score: 99.78098866637323
patch: } ) . if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 460
score: 99.77439283288044
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 460
score: 99.75902966485508
patch: case Token . BLOCK : case Token . BREAK : case Token . CONTINUE : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 460
score: 99.74525669642857
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 460
score: 99.7050717002467
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 461
score: 99.79425048828125
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 461
score: 99.79285421489197
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 461
score: 99.78088909646739
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 461
score: 99.77434430803571
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n . get CaMeL Next ( ) == null && n . get CaMeL Type ( ) == Token . FUNCTION ) ) ;
rank: 461
score: 99.74525282118056
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 461
score: 99.70507152660473
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 462
score: 99.79422701322116
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 462
score: 99.78603293678977
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( this ) ) ; }
rank: 462
score: 99.780810546875
patch: } . if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 462
score: 99.77431508657095
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ; } else if ( n . has CaMeL Children ( ) ) {
rank: 462
score: 99.75898041596284
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 462
score: 99.70500202922078
patch: case Token . BREAK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 463
score: 99.79420979817708
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } }
rank: 463
score: 99.79282756024097
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( 0 ) ) ;
rank: 463
score: 99.78593175551471
patch: } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 463
score: 99.77430704195206
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; return n ;
rank: 463
score: 99.7664453125
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ;
rank: 463
score: 99.74513154871323
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; } }
rank: 463
score: 99.70498612998189
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ) ;
rank: 464
score: 99.81943359375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( )
rank: 464
score: 99.79419872428798
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 464
score: 99.78580729166667
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; }
rank: 464
score: 99.7807997666396
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ;
rank: 464
score: 99.77418387276786
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( current ) ) ;
rank: 464
score: 99.76643318965517
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = node . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 464
score: 99.75890625
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; }
rank: 464
score: 99.74510362413194
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 464
score: 99.70496961805556
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) . get CaMeL Value ( ) ; }
rank: 465
score: 99.79419787176724
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 465
score: 99.79271556712963
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL Next ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) ) ;
rank: 465
score: 99.78577677408855
patch: case Node . BLOCK : while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 465
score: 99.77414957682292
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 465
score: 99.76643277391975
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) , first ) ; }
rank: 465
score: 99.75888803842905
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == null ? null : try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ) ;
rank: 465
score: 99.74509655589789
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 465
score: 99.704931640625
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL Destination ( ) . get CaMeL Value ( ) ;
rank: 466
score: 99.79418601452464
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 466
score: 99.79264768835617
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 466
score: 99.7857421875
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else {
rank: 466
score: 99.78061252170139
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 466
score: 99.77407355057566
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } case Token . CONTINUE :
rank: 466
score: 99.76633360327745
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) != null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 466
score: 99.75879635027985
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 466
score: 99.70491768973214
patch: try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 467
score: 99.79416015625
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; }
rank: 467
score: 99.7857327748494
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( parent ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 467
score: 99.78056808997844
patch: case Token . BLOCK : while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 467
score: 99.77407020246478
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 467
score: 99.75879566089527
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 468
score: 99.81931640625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) . get CaMeL Parent ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent (
rank: 468
score: 99.79412667410715
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 468
score: 99.79261610243056
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 468
score: 99.78572265625
patch: case Node . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 468
score: 99.77395408740942
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 468
score: 99.76625651041667
patch: case Token . BLOCK : case Token . LINE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 468
score: 99.75876953125
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == null ? null : g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ) ;
rank: 468
score: 99.70486408390411
patch: try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 469
score: 99.81929204705057
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ;
rank: 469
score: 99.79412482766544
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 469
score: 99.79258099724265
patch: case CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 469
score: 99.78569435586735
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Node . BLOCK ) ) ;
rank: 469
score: 99.78051017992425
patch: } Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 469
score: 99.77389747509058
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL Next ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 469
score: 99.76624705693493
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; }
rank: 469
score: 99.75875031001983
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 469
score: 99.74491003787878
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 469
score: 99.70481178977273
patch: case Token . BREAK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ;
rank: 470
score: 99.79407649253731
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 470
score: 99.78046875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 470
score: 99.77385220462328
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; else try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 470
score: 99.76624145507813
patch: case Token . BLOCK : case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 470
score: 99.75867902728874
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 470
score: 99.74487718485169
patch: case Branch . UNCOND : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 470
score: 99.7048103578629
patch: case Token . FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 471
score: 99.81920955882353
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; } }
rank: 471
score: 99.79403866038604
patch: } else { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 471
score: 99.79242264597039
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . BLOCK ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 471
score: 99.78566487630208
patch: case Token . BLOCK : if ( node . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 471
score: 99.78040461753731
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 471
score: 99.76615710136218
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ) ;
rank: 471
score: 99.75863337862319
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 471
score: 99.74487704918033
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ;
rank: 471
score: 99.70480018028846
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 472
score: 99.8191944067029
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { n . get CaMeL Next ( ) ; }
rank: 472
score: 99.78029406910211
patch: } case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 472
score: 99.76610739834338
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Source ( ) . get CaMeL Value ( ) ) ; }
rank: 472
score: 99.75853515625
patch: case Token . BLOCK : case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == null ? null : g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ) ;
rank: 472
score: 99.7047950634058
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ;
rank: 473
score: 99.81914196275685
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 473
score: 99.79239803165585
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 473
score: 99.78562071265245
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 473
score: 99.78025251116071
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 473
score: 99.76610165550595
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; }
rank: 473
score: 99.75848709909539
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , g CaMeL Node ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 473
score: 99.7448212594697
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { break ; } case Token . RETURN : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 473
score: 99.70475480363176
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( first ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 474
score: 99.81912109375
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL
rank: 474
score: 99.79383609169408
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 474
score: 99.79235692771084
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 474
score: 99.78551240808824
patch: case Token . BLOCK : try { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 474
score: 99.78012213908451
patch: } if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 474
score: 99.77382525275735
patch: case null : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 474
score: 99.76605409564394
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 474
score: 99.75848307291666
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) != null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 474
score: 99.7447265625
patch: case Di CaMeL Graph CaMeL Edge < Node , Branch >> g CaMeL Node = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 474
score: 99.70467789446721
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL Destination ( ) . get CaMeL Value ( ) ; }
rank: 475
score: 99.8191015625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ) ) ; } else { return try CaMeL
rank: 475
score: 99.79374873173701
patch: } if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 475
score: 99.79233160251525
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } switch ( n . get CaMeL Type ( ) ) {
rank: 475
score: 99.78011067708333
patch: Token first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 475
score: 99.77379608154297
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) , first ) ;
rank: 475
score: 99.76602836277173
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL Parent ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 475
score: 99.75848214285715
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) || n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 476
score: 99.78540340470678
patch: } else { while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 476
score: 99.7800537109375
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n ; }
rank: 476
score: 99.77379086143092
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } case Token . RETURN :
rank: 476
score: 99.766015625
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 476
score: 99.7584795884683
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) || n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 476
score: 99.74463665674604
patch: case Token . BLOCK : case Node . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 476
score: 99.7045962685033
patch: try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 477
score: 99.8191015625
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) )
rank: 477
score: 99.79373127140411
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 477
score: 99.79226845189145
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL Next ( ) ) ) ;
rank: 477
score: 99.78002604166667
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) != null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 477
score: 99.77371060646186
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } case Token . RETURN : if ( n . has CaMeL Children ( ) ) {
rank: 477
score: 99.76600302419355
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) ; }
rank: 477
score: 99.7584658340669
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 477
score: 99.74453691123189
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) . try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 477
score: 99.70458984375
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ) ;
rank: 478
score: 99.819091796875
patch: private Node try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Node n ) { / * * For each of the unconditional branching control flow node , check to see * if the Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node of that node is same as * the branching target . If it is , the branch node is safe to be removed . * * This is not as clever as Minimize CaMeL Exit CaMeL Points because it doesn t do any * if - else conversion but it handles more complicated switch statements * much nicer . * / / / If n is null the target is the end of the function , nothing to do . if ( n == null ) { return n ; } Di CaMeL Graph CaMeL Node < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ; if ( g CaMeL Node == null ) { return n ; } if ( n . get CaMeL Parent ( ) == null ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> out CaMeL Edges = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( out CaMeL Edges . size ( ) == 1 ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( out CaMeL Edges . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control
rank: 478
score: 99.79371789383562
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 478
score: 99.79223331404322
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n . get CaMeL Next ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION )
rank: 478
score: 99.78516621492346
patch: try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; }
rank: 478
score: 99.78000359786184
patch: case Token . BLOCK : Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 478
score: 99.77369225543478
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 478
score: 99.76594172297297
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; } }
rank: 478
score: 99.7583984375
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 478
score: 99.74448482325819
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { break ; } case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 478
score: 99.70457682291666
patch: case Token . FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 479
score: 99.81904797676282
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 479
score: 99.7936260516827
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ;
rank: 479
score: 99.79215240478516
patch: case Token . RETURN : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 479
score: 99.77367829623287
patch: case BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 479
score: 99.76590401785714
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; }
rank: 479
score: 99.74446868896484
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 479
score: 99.70457664695945
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 480
score: 99.79209807981928
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; }
rank: 480
score: 99.78511029411764
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 480
score: 99.77366491866438
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 480
score: 99.75838216145833
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) == Branch . UNCOND ) ;
rank: 481
score: 99.79354697779605
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . has CaMeL Children ( ) ) ;
rank: 481
score: 99.77983794341216
patch: case Token . BLOCK : Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ;
rank: 481
score: 99.77364464962122
patch: case Token . BLOCK : if ( n != null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 481
score: 99.76585127667683
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) . get CaMeL Parent ( ) ) ) ;
rank: 481
score: 99.75835658482143
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ;
rank: 481
score: 99.74430803571428
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 482
score: 99.81888933879573
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) . get CaMeL Value ( ) ) ;
rank: 482
score: 99.79347139246323
patch: } else { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 482
score: 99.79209498355263
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 482
score: 99.78508366765203
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { }
rank: 482
score: 99.77363006161971
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 482
score: 99.7658441005609
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ;
rank: 482
score: 99.75830775669642
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == null ? null : try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ) ; }
rank: 482
score: 99.70446428571428
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 483
score: 99.81878446691177
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } ;
rank: 483
score: 99.79208730722402
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 483
score: 99.78500511532738
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 483
score: 99.77980550130208
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 483
score: 99.77362630208333
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL Next ( ) == null && n . get CaMeL Type ( ) == Token . FUNCTION ) ) ;
rank: 483
score: 99.76581774259868
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) || n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 483
score: 99.74422315140845
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) ) { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ;
rank: 484
score: 99.79327304121377
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 484
score: 99.77978515625
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 484
score: 99.77359095982143
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( this ) ;
rank: 484
score: 99.76580810546875
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } }
rank: 484
score: 99.75827985491071
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 484
score: 99.74410049229452
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { break ; } case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 485
score: 99.79326014364919
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return n ; }
rank: 485
score: 99.78483408505154
patch: case Token . BLOCK : while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 485
score: 99.77975643382354
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , node ) ;
rank: 485
score: 99.77358111213235
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ;
rank: 485
score: 99.76576254401408
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n . get CaMeL First CaMeL Child ( ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } }
rank: 485
score: 99.75824576364437
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 485
score: 99.74404155344203
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 485
score: 99.70439960430195
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ) ;
rank: 486
score: 99.7847873263889
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; }
rank: 486
score: 99.77969215029762
patch: } Node first = Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 486
score: 99.7656785918445
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL First CaMeL Child ( ) . get CaMeL First CaMeL Child ( ) ) ; }
rank: 486
score: 99.704345703125
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 487
score: 99.79315506784539
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 487
score: 99.79206380208333
patch: case Token . RETURN : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 487
score: 99.77966638513513
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 487
score: 99.77348564040493
patch: case Token . BLOCK : if ( n . has CaMeL Next ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 487
score: 99.7582421875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ) ) ;
rank: 487
score: 99.74398716517857
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 487
score: 99.70431179470486
patch: case Di CaMeL Graph CaMeL Node . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ;
rank: 488
score: 99.8185791015625
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { n . get CaMeL First CaMeL Child ( ) . clear ( ) ; }
rank: 488
score: 99.79312928082192
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 488
score: 99.76563856336806
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 488
score: 99.7582133278918
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 488
score: 99.74397786458333
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } ;
rank: 488
score: 99.70429970561594
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( first ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 489
score: 99.81857766544118
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else
rank: 489
score: 99.79310472705696
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 489
score: 99.79198600672468
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL Next ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 489
score: 99.77958857548701
patch: } case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; }
rank: 489
score: 99.76563218060662
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) ; }
rank: 489
score: 99.75810411241319
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , this ) ;
rank: 489
score: 99.74393039279514
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 489
score: 99.70424429086539
patch: try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 490
score: 99.81856282552083
patch: } case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 490
score: 99.79196006373355
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First ( ) ) ) ;
rank: 490
score: 99.78448988970588
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 490
score: 99.779541015625
patch: try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 490
score: 99.77334255642361
patch: case Token . BLOCK : if ( n . has CaMeL Next ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 490
score: 99.765625
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 490
score: 99.75807883522727
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 490
score: 99.74393028846154
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 490
score: 99.70416715251865
patch: case Token . BREAK : case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 491
score: 99.7930575284091
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ,
rank: 491
score: 99.79193511566558
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 491
score: 99.78446018949468
patch: } else { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 491
score: 99.75804379111842
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 491
score: 99.74391989511986
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ;
rank: 491
score: 99.70412692775975
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ) ;
rank: 492
score: 99.79303075396825
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return first ; } }
rank: 492
score: 99.79186197916667
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 492
score: 99.78441642992425
patch: case Token . BLOCK : while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 492
score: 99.77946965144231
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 492
score: 99.77332335633118
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 492
score: 99.7655362215909
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL First CaMeL Child ( ) ) ; }
rank: 492
score: 99.7580316005609
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 493
score: 99.79300631009616
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 493
score: 99.77946524784483
patch: case Token . BLOCK : if ( node . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 493
score: 99.76553300498189
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ;
rank: 493
score: 99.7580065604968
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , null ) ;
rank: 493
score: 99.74373372395833
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 493
score: 99.70406811857876
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else {
rank: 494
score: 99.79297509131493
patch: if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 494
score: 99.79180650308099
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 494
score: 99.78439670138889
patch: case Token . BLOCK : { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 494
score: 99.77937586167279
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 494
score: 99.77326359160959
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , false ) ; }
rank: 494
score: 99.76552988027598
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 494
score: 99.75800637637867
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 494
score: 99.74363227739725
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ;
rank: 494
score: 99.70406197212837
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 495
score: 99.79292492988782
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n , n . has CaMeL Children ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 495
score: 99.79178292410714
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL Next ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL Next ( ) ) ) ;
rank: 495
score: 99.77935697115385
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } }
rank: 495
score: 99.76552610759494
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = node . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; }
rank: 495
score: 99.74360584077381
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; } }
rank: 496
score: 99.79291373239437
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 496
score: 99.77935014204546
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } }
rank: 496
score: 99.77321055237677
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node next = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 496
score: 99.76551011029412
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; }
rank: 496
score: 99.75789602179276
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ;
rank: 496
score: 99.70398279138513
patch: try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return n ;
rank: 497
score: 99.81829044117647
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , first ) ;
rank: 497
score: 99.79288522820724
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n . get CaMeL First CaMeL Child ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 497
score: 99.79172877261513
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { break ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 497
score: 99.78420266544117
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 497
score: 99.779296875
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 497
score: 99.76550808758803
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) != null ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 497
score: 99.75788922991072
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 497
score: 99.74350961538461
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 497
score: 99.70389873798077
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 498
score: 99.79288179580479
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 498
score: 99.79170980798193
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 498
score: 99.78420091711956
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 498
score: 99.77918419471153
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 498
score: 99.77303059895833
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , 0 ) ) ;
rank: 498
score: 99.76547204442771
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) != null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 498
score: 99.75784594392124
patch: case Token . BLOCK : case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 498
score: 99.74342447916666
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 499
score: 99.79284496038733
patch: if ( n . has CaMeL Children ( ) ) { Node first = Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 499
score: 99.79166015625
patch: case Token . BREAK : if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 499
score: 99.78419174382717
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 499
score: 99.77915102475649
patch: case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 499
score: 99.77301025390625
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else if ( n . get CaMeL Type ( ) == Token . RETURN ) {
rank: 499
score: 99.75783128004808
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ) ; }
rank: 499
score: 99.74338107638889
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } ;
rank: 499
score: 99.70383335167253
patch: try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( this ) ;
rank: 500
score: 99.79284354967949
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ;
rank: 500
score: 99.79162430436644
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } } }
rank: 500
score: 99.78410287921348
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return n ; }
rank: 500
score: 99.77913161057693
patch: case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 500
score: 99.7728172508446
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) , n ) ;
rank: 500
score: 99.76544089395492
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = ( Node ) n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 500
score: 99.74332181490385
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 500
score: 99.70377145686619
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 501
score: 99.79278950751582
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; }
rank: 501
score: 99.79160670230263
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 501
score: 99.78410200639205
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( node ) ) ; }
rank: 501
score: 99.77906276755137
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return first ; }
rank: 501
score: 99.77281668526786
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 501
score: 99.76543666294643
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n . get CaMeL First CaMeL Child ( ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; }
rank: 501
score: 99.75778079342533
patch: case Token . BLOCK : case Token . BREAK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 501
score: 99.70373717350746
patch: case Token . RETURN : case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 502
score: 99.79157552083333
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . BLOCK ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 502
score: 99.78409830729167
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 502
score: 99.779052734375
patch: case Token . BLOCK : { Node first = Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 502
score: 99.77276692708334
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , first ) ;
rank: 502
score: 99.76538373161765
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ) ) ;
rank: 502
score: 99.75777550899622
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 502
score: 99.74325605751811
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; } else if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 502
score: 99.70369791666667
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 503
score: 99.81809400475544
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; }
rank: 503
score: 99.79274338942308
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ;
rank: 503
score: 99.78409568212365
patch: try { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 503
score: 99.77901418585526
patch: case Token . BLOCK : Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 503
score: 99.77271511130137
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { break ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 503
score: 99.765380859375
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ) ;
rank: 503
score: 99.75775615985577
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 503
score: 99.74324658890845
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 503
score: 99.70369698660714
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 504
score: 99.79267842060811
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 504
score: 99.79156309185606
patch: case Token . RETURN : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 504
score: 99.77899932861328
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 504
score: 99.77270861639492
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 504
score: 99.76537475585937
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) . get CaMeL Parent ( ) ) ) ;
rank: 504
score: 99.7432277513587
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 504
score: 99.70366467927632
patch: case Di CaMeL Graph CaMeL Edge . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 505
score: 99.79264079990672
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 505
score: 99.78402151188381
patch: case Token . BLOCK : while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 505
score: 99.77268685867537
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 505
score: 99.7574932391827
patch: case Token . BLOCK : case Token . CONTINUE : case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 505
score: 99.74320419520548
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } ; }
rank: 505
score: 99.70361328125
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL Out CaMeL Edges ( ) . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 506
score: 99.79260086686644
patch: } else { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 506
score: 99.79153221240942
patch: case BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 506
score: 99.78399465460527
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( ) ) ) ;
rank: 506
score: 99.77896118164062
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 506
score: 99.77268100792253
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 506
score: 99.76514260165662
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; }
rank: 506
score: 99.75743910845588
patch: case Token . BLOCK : if ( n . get CaMeL Next ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 507
score: 99.77266927083333
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 507
score: 99.7574320211039
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ; }
rank: 507
score: 99.74306911892361
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 507
score: 99.70354450924296
patch: case Token . FUNCTION : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 508
score: 99.81768698770492
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } }
rank: 508
score: 99.79145833333334
patch: case Token . BREAK : if ( n . get CaMeL Type ( ) == Token . BLOCK ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 508
score: 99.77264153467466
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , first , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ) ;
rank: 508
score: 99.76512435719937
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) != null ) { if ( n . get CaMeL First CaMeL Child ( ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 508
score: 99.7574116721082
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 508
score: 99.74305826822916
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 508
score: 99.70349279626623
patch: case Token . RETURN : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 509
score: 99.7839599609375
patch: case Token . BLOCK : while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 509
score: 99.77260335286458
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = node . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 509
score: 99.76506273674242
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 509
score: 99.75740559895833
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . RETURN ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 509
score: 99.70348751183712
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 510
score: 99.79240587022569
patch: case Token . BLOCK : { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 510
score: 99.77877491918103
patch: } if ( n . get CaMeL First CaMeL Child ( ) != null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 510
score: 99.77260044642857
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 510
score: 99.76505859375
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; }
rank: 510
score: 99.70342852618244
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 511
score: 99.81750670475746
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { first . close ( ) ; }
rank: 511
score: 99.79225454757463
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 511
score: 99.79130723741319
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 511
score: 99.78392693014706
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 511
score: 99.77875757929104
patch: } if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 511
score: 99.77248806423611
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , first ) ;
rank: 511
score: 99.74294793801229
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { break ; } case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 511
score: 99.70341930650685
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 512
score: 99.81748501090117
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else {
rank: 512
score: 99.79130144817073
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 512
score: 99.77872507195724
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 512
score: 99.76484118009868
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Root ( ) ) ;
rank: 512
score: 99.74292689732142
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 512
score: 99.70341670048701
patch: case Token . BLOCK : case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ;
rank: 513
score: 99.79203356726696
patch: try { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 513
score: 99.78367106119792
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( this ) ) ) ;
rank: 513
score: 99.77867974175348
patch: } case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 513
score: 99.77241279709507
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL Last CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 513
score: 99.76480441623264
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 513
score: 99.75731762035473
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , ) ; }
rank: 514
score: 99.78366088867188
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( this ) ) ; }
rank: 514
score: 99.75731119791666
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 514
score: 99.74282754434121
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; } } switch ( n . get CaMeL Type ( ) ) {
rank: 514
score: 99.70337611607142
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 515
score: 99.81724330357143
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( node ) ) ; }
rank: 515
score: 99.79192038143383
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 515
score: 99.79112484580592
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { final Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 515
score: 99.77865835336539
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) . get CaMeL First CaMeL Child ( ) ) ;
rank: 515
score: 99.7723828125
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) , n ) ; }
rank: 515
score: 99.74280696128731
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ) ; }
rank: 515
score: 99.70337231128246
patch: case Token . BREAK : case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 516
score: 99.78359985351562
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( node ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 516
score: 99.75723031850961
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ;
rank: 516
score: 99.74280206088362
patch: case Long . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 516
score: 99.70333059210526
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 517
score: 99.81708233173077
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 517
score: 99.79190278389085
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 517
score: 99.79102937940141
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , cur CaMeL Cfg . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 517
score: 99.78358226102941
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 517
score: 99.77855318509616
patch: } case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 517
score: 99.77228461371527
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL Last CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 517
score: 99.7645881558642
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; }
rank: 517
score: 99.75718778722427
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } if ( n . has CaMeL Children ( ) ) { break ;
rank: 517
score: 99.74279415246212
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ;
rank: 517
score: 99.70331068441901
patch: try { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 518
score: 99.79189202724359
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 518
score: 99.77852957589286
patch: case Token . BLOCK : Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 518
score: 99.77227492559524
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 518
score: 99.76455688476562
patch: case Token . BLOCK : case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) != null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 518
score: 99.75712607563406
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , null ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 518
score: 99.70325055803572
patch: case Token . BLOCK : case Token . BREAK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 519
score: 99.791875
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n , n . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 519
score: 99.79100167410714
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 519
score: 99.7785285500919
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 519
score: 99.7722602739726
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else switch ( n . get CaMeL Type ( ) ) { case Token . BREAK :
rank: 519
score: 99.76454595871914
patch: case Token . Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; }
rank: 519
score: 99.75709829757463
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 519
score: 99.74267578125
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) ) { break ;
rank: 519
score: 99.70324878961267
patch: case Token . CONTINUE : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 520
score: 99.81700721153847
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 520
score: 99.79097989710365
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . BLOCK ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 520
score: 99.78348482572116
patch: while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 520
score: 99.77852213541667
patch: case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 520
score: 99.77215254934211
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , first ) ;
rank: 520
score: 99.76450996968283
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( first . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 520
score: 99.75706185867537
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( compute CaMeL Following ( n ) ) ; }
rank: 520
score: 99.70324191241197
patch: case Token . BREAK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ;
rank: 521
score: 99.8169827748494
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) . get CaMeL Type ( ) == Token . BLOCK ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 521
score: 99.79184776628522
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 521
score: 99.79091055181962
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { List < Di CaMeL Graph CaMeL Edge < Node , Branch >> g CaMeL Node = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( g CaMeL Node == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 521
score: 99.78348025760135
patch: case Node . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 521
score: 99.77208754595588
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 521
score: 99.76438551682692
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) , n ) ) ;
rank: 521
score: 99.75704520089286
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ) ;
rank: 521
score: 99.74264618844697
patch: case Di CaMeL Graph CaMeL Edge . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 521
score: 99.70322916666667
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL Out CaMeL Edges ( ) ;
rank: 522
score: 99.79072008634868
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . BLOCK ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 522
score: 99.78346011513158
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 522
score: 99.77846392463235
patch: } ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 522
score: 99.76436470650337
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 522
score: 99.75703999533582
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; }
rank: 522
score: 99.74256876070206
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; }
rank: 523
score: 99.816923828125
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; }
rank: 523
score: 99.79173448350694
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 523
score: 99.78337751116071
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 523
score: 99.77841796875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 523
score: 99.7720614346591
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; }
rank: 523
score: 99.7643455795095
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; }
rank: 523
score: 99.75698812905844
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ) ;
rank: 523
score: 99.74251980251736
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ) ; }
rank: 523
score: 99.7030958488806
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 524
score: 99.81689453125
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { n . get CaMeL First CaMeL Child ( ) ; }
rank: 524
score: 99.79169921875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 524
score: 99.79064782873377
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 524
score: 99.78336958451705
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; }
rank: 524
score: 99.7643359375
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL First CaMeL Child ( ) ) ; } }
rank: 524
score: 99.7569627637987
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , g CaMeL Node ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; }
rank: 524
score: 99.7424820188492
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 524
score: 99.70309329342533
patch: case Token . BLOCK : case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 525
score: 99.81686108732876
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , true ) ) ; }
rank: 525
score: 99.79161487926136
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 525
score: 99.79058478860294
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 525
score: 99.78333400451031
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ) ;
rank: 525
score: 99.7783069349315
patch: } Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 525
score: 99.75692085597827
patch: case Token . BLOCK : case Token . CONTINUE : case Token . CONTINUE : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 525
score: 99.7424737338362
patch: case Branch > 1 : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 525
score: 99.70305524553571
patch: case Token . RETURN : case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 526
score: 99.81673943014705
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 526
score: 99.79161487926136
patch: if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 526
score: 99.78324512768818
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 526
score: 99.77825410487289
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 526
score: 99.77190667229729
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 526
score: 99.76429966517857
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , ) ;
rank: 526
score: 99.75688666801948
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; }
rank: 526
score: 99.70302036830357
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 527
score: 99.81668862951807
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) . get CaMeL Parent ( ) ) ; }
rank: 527
score: 99.79157571231617
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 527
score: 99.79047439759036
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else switch ( n . get CaMeL Type ( ) ) {
rank: 527
score: 99.78315662202381
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( parent ) ) ; }
rank: 527
score: 99.77821955605158
patch: case Node . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 527
score: 99.75686424365942
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 527
score: 99.74241129557292
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } . return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 527
score: 99.7029670266544
patch: case Token . BLOCK : case Token . BREAK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 528
score: 99.79154205322266
patch: } if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 528
score: 99.79046533978175
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 528
score: 99.77820587158203
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 528
score: 99.77174570862677
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( $STRING$ ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 528
score: 99.7642578125
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 528
score: 99.75682933910473
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , cur CaMeL Cfg ) ;
rank: 528
score: 99.74240822988014
patch: case Token . FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 529
score: 99.8166000124008
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 529
score: 99.79041883680556
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == Branch . UNCOND ) ;
rank: 529
score: 99.78312076430723
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 529
score: 99.77819260817307
patch: case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 529
score: 99.771728515625
patch: case Type . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 529
score: 99.7568217844203
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 529
score: 99.74235265395221
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 529
score: 99.70283777573529
patch: try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 530
score: 99.81652113970588
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , false ) ;
rank: 530
score: 99.79146484375
patch: if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 530
score: 99.7831027932363
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 530
score: 99.77812056107955
patch: case Token . BLOCK : { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 530
score: 99.77165178571428
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( 0 ) ) ;
rank: 530
score: 99.76419106012658
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; while ( first . has CaMeL Children ( ) ) { Node first = first . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 530
score: 99.75676707732372
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , ) ; }
rank: 530
score: 99.74231326941288
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 530
score: 99.70283338758681
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 531
score: 99.81648667279411
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , true ) ;
rank: 531
score: 99.79035750679348
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 531
score: 99.78306640625
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( node ) ) ) ;
rank: 531
score: 99.77810470779221
patch: case Token . BLOCK : try { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 531
score: 99.77159598214286
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( id ) ) ;
rank: 531
score: 99.76416590073529
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , ) ; }
rank: 531
score: 99.7567471590909
patch: case Type . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 531
score: 99.7423012093322
patch: case Token . UNCOND : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 532
score: 99.81648297991072
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return first . get CaMeL First CaMeL Child ( ) ; }
rank: 532
score: 99.79137465533088
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 532
score: 99.78304036458333
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( node ) ) ;
rank: 532
score: 99.77799729567307
patch: case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } }
rank: 532
score: 99.77154017857143
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else if ( n . has CaMeL Children ( ) ) {
rank: 532
score: 99.76416015625
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; }
rank: 532
score: 99.75674258961396
patch: case Token . BLOCK : case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 532
score: 99.70266772073413
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ;
rank: 533
score: 99.79136533994932
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } catch ( ?
rank: 533
score: 99.79031173904221
patch: case Di CaMeL Graph CaMeL Edge < Node , Branch > g CaMeL Node = cur CaMeL Cfg . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; if ( g CaMeL Node == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 533
score: 99.77792537913604
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 533
score: 99.77152312748017
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 533
score: 99.7641532790493
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 533
score: 99.75671056798987
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ) ; }
rank: 533
score: 99.74219457653986
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 533
score: 99.70262386924342
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) ; }
rank: 534
score: 99.79135874155405
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; }
rank: 534
score: 99.7902397260274
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 534
score: 99.7829822358631
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 534
score: 99.77786333133012
patch: case Token . BLOCK : { try { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 534
score: 99.76406521267361
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Source ( ) . get CaMeL Value ( ) ) ;
rank: 534
score: 99.75657927684294
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , g CaMeL Node ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , g CaMeL Node ) ) ;
rank: 534
score: 99.74216074486301
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ;
rank: 534
score: 99.70258393158784
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return n ; }
rank: 535
score: 99.791357421875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 535
score: 99.7902390813253
patch: case RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 535
score: 99.78297061011905
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 535
score: 99.77781951121794
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 535
score: 99.77147662450396
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) || n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 535
score: 99.76406370563272
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ;
rank: 535
score: 99.75653599330357
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; }
rank: 535
score: 99.74214441636029
patch: case $STRING$ : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 535
score: 99.70251652644231
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL Destination ( ) . get CaMeL Value ( ) ;
rank: 536
score: 99.79134114583333
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( first != null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 536
score: 99.78289240056819
patch: case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 536
score: 99.77778520976027
patch: } case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 536
score: 99.77144793610074
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) || n . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 536
score: 99.76402180989584
patch: case Token . Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 536
score: 99.74209550498189
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 536
score: 99.70242745535714
patch: case Di CaMeL Graph CaMeL Edge . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 537
score: 99.79129256063433
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 537
score: 99.79020182291667
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { break ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 537
score: 99.78286994485295
patch: case Token . BLOCK : while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 537
score: 99.77769252232143
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 537
score: 99.77143690321181
patch: case Branch . UNCOND ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 537
score: 99.7640186254529
patch: case Token . BLOCK : case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 537
score: 99.756484375
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 537
score: 99.74208577473958
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 537
score: 99.70242267765411
patch: try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 538
score: 99.7828266189759
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( this ) ) ) ;
rank: 538
score: 99.77763148716518
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } }
rank: 538
score: 99.77142935739437
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ;
rank: 538
score: 99.76399500229779
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) || n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 538
score: 99.75642023859797
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ) ;
rank: 538
score: 99.70240020751953
patch: case Token . BLOCK : case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 539
score: 99.79117838541667
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 539
score: 99.79013671875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ) ;
rank: 539
score: 99.7828125
patch: case Node . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 539
score: 99.77762910917208
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n . get CaMeL First CaMeL Child ( ) ) ) ; }
rank: 539
score: 99.77140977647569
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( $STRING$ ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 539
score: 99.76399293664383
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; }
rank: 539
score: 99.74202008928572
patch: case String . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 540
score: 99.79117415787337
patch: if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { n . has CaMeL Children ( ) ; }
rank: 540
score: 99.79011932791096
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } * /
rank: 540
score: 99.77752130681819
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 540
score: 99.76396484375
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } }
rank: 540
score: 99.7563857041396
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 540
score: 99.70234949448529
patch: case Di CaMeL Graph CaMeL Edge . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n ; }
rank: 541
score: 99.81609910534274
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return first ; }
rank: 541
score: 99.79115316901408
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 541
score: 99.79009408010563
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { final Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 541
score: 99.77749338457662
patch: case Token . BLOCK : Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 541
score: 99.76390975560898
patch: case Token . BLOCK : case Token . BLOCK : case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 541
score: 99.75638464725378
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 541
score: 99.74181707974138
patch: case Token . UNCOND : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 541
score: 99.7023395040761
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ;
rank: 542
score: 99.79113439611487
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 542
score: 99.79007076907467
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 542
score: 99.78275324789325
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 542
score: 99.7774429321289
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return null ; }
rank: 542
score: 99.7713124449824
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 542
score: 99.7638931274414
patch: case Token . BLOCK : case Token . LINE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 542
score: 99.75637478298611
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , g CaMeL Node ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 542
score: 99.74175347222223
patch: if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return n ; }
rank: 543
score: 99.79006618923611
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == Branch . UNCOND ) ;
rank: 543
score: 99.78270487882654
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; }
rank: 543
score: 99.77743326822916
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else {
rank: 543
score: 99.77129448784723
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , first ) ;
rank: 543
score: 99.76378173828125
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; }
rank: 543
score: 99.75632195723684
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 543
score: 99.74174230238971
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 544
score: 99.8159481095679
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 544
score: 99.77128770616319
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( node ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 544
score: 99.76377704326923
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 544
score: 99.75626739083904
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , ) ;
rank: 544
score: 99.74174107142858
patch: case $STRING$ : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 544
score: 99.7022640830592
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return n ;
rank: 545
score: 99.81588040865384
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 545
score: 99.7900390625
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . BLOCK ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 545
score: 99.78264322916667
patch: while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( first . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 545
score: 99.7773193359375
patch: } if ( n . get CaMeL First CaMeL Child ( ) != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 545
score: 99.77126242897727
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n . get CaMeL Next ( ) == null || n . get CaMeL Type ( ) == Token . FUNCTION ) ) ;
rank: 545
score: 99.76375882919521
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 545
score: 99.75625147964016
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 545
score: 99.74170590753425
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 545
score: 99.70219152113971
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 546
score: 99.81587146577381
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( ) ) ; } }
rank: 546
score: 99.79102998621323
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n , n . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 546
score: 99.78257893041237
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; }
rank: 546
score: 99.77728456439394
patch: Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 546
score: 99.75616366621377
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { break ; } if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 546
score: 99.70218487639926
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; }
rank: 547
score: 99.81584821428571
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( next ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 547
score: 99.79098307291666
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 547
score: 99.78994974275915
patch: case Token . BREAK : if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 547
score: 99.77726976799242
patch: } while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 547
score: 99.77097486413044
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , first ) ;
rank: 547
score: 99.76370849609376
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 547
score: 99.74149693080358
patch: case Token . FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 547
score: 99.7021843405331
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 548
score: 99.79095373019366
patch: case Token . BLOCK : ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 548
score: 99.78256330818965
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( node ) ) ;
rank: 548
score: 99.77724900886194
patch: } else { case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 548
score: 99.77083556292808
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK :
rank: 548
score: 99.75607139185855
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ) ;
rank: 548
score: 99.74148297991071
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 548
score: 99.70216966711956
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ;
rank: 549
score: 99.79089668469551
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) .
rank: 549
score: 99.78994008657095
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 549
score: 99.78256265219156
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 549
score: 99.77721058238636
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 549
score: 99.77081040933099
patch: case Token . BLOCK : if ( n . has CaMeL Child ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 549
score: 99.76357559419014
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node < Node > n = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 549
score: 99.74145842251713
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } ; }
rank: 549
score: 99.70215503589527
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 550
score: 99.81568908691406
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return null ; }
rank: 550
score: 99.78989583333333
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } } }
rank: 550
score: 99.7825594815341
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; }
rank: 550
score: 99.7771649427817
patch: case try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 550
score: 99.77068413628473
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( node ) , n ) ;
rank: 550
score: 99.75605211759868
patch: case Token . BLOCK : if ( n . get CaMeL Next ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 550
score: 99.7021338619403
patch: case Token . BREAK : case Token . CONTINUE : case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 551
score: 99.78255615234374
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 551
score: 99.77707107345779
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 551
score: 99.77067735460069
patch: case Token . BLOCK : if ( n . has CaMeL Child ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 551
score: 99.76355421686748
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 551
score: 99.75602213541667
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , g CaMeL Node ) ;
rank: 551
score: 99.74143981933594
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ; }
rank: 551
score: 99.70207868303571
patch: case Token . RETURN : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ;
rank: 552
score: 99.81549862132353
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 552
score: 99.79074741417253
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 552
score: 99.7898155120482
patch: case BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else
rank: 552
score: 99.78252797067901
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( ) ) ;
rank: 552
score: 99.77706909179688
patch: case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } }
rank: 552
score: 99.77067057291667
patch: case BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 552
score: 99.7635211709105
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 552
score: 99.75600714432566
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == null ? null : g CaMeL Node . get CaMeL Out CaMeL Edges ( ) . get CaMeL Value ( ) ) ;
rank: 552
score: 99.74141905737704
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 553
score: 99.77706681436567
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 553
score: 99.77061848958333
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; }
rank: 553
score: 99.7414046999008
patch: case Token . UNCOND : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 554
score: 99.81539417613637
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { n . has CaMeL Children ( ) ; } }
rank: 554
score: 99.79067654079861
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 554
score: 99.77704326923077
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 554
score: 99.77059895833334
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; case Token . RETURN :
rank: 554
score: 99.75599580652573
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ) ;
rank: 554
score: 99.74138641357422
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; } } }
rank: 554
score: 99.70188710387323
patch: case Token . BLOCK : case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ;
rank: 555
score: 99.81534830729167
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 555
score: 99.78964349287975
patch: case Token . RETURN : if ( n . get CaMeL Parent ( ) == null ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 555
score: 99.77702384159483
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = first . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 555
score: 99.76348968050372
patch: case Token . BLOCK : if ( ( n . has CaMeL Children ( ) ) && ( n . has CaMeL Children ( ) ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 555
score: 99.7559814453125
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; try { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 555
score: 99.70188660552536
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; }
rank: 556
score: 99.81534305695564
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 556
score: 99.79060872395833
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( ) ) ;
rank: 556
score: 99.78247371720678
patch: if ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 556
score: 99.7770134420956
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , first ) ;
rank: 556
score: 99.77053317775975
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 556
score: 99.75594932154605
patch: case Type . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 556
score: 99.70188151041667
patch: case Di CaMeL Graph CaMeL Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) ;
rank: 557
score: 99.79057874177632
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 557
score: 99.78953721788194
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 557
score: 99.77697207322761
patch: } if ( n . has CaMeL Children ( ) ) { Node first = node . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 557
score: 99.77052066200658
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { remove CaMeL Dead CaMeL Expr CaMeL Statement CaMeL Safely ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 557
score: 99.76347392314189
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 557
score: 99.75594289679276
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ;
rank: 557
score: 99.74132930871212
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { break ; } case Token . BREAK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 557
score: 99.70186730587122
patch: case Di CaMeL Graph CaMeL Node . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 558
score: 99.81525735294117
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; }
rank: 558
score: 99.79054109815141
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 558
score: 99.78946261935764
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { final Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 558
score: 99.77696228027344
patch: } case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 558
score: 99.77043423587328
patch: case Token . BLOCK : { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 558
score: 99.76345732717803
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 558
score: 99.75592823517628
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( compute CaMeL Following ( n ) ) ; }
rank: 558
score: 99.7412400886194
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 559
score: 99.79053463152985
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 559
score: 99.78939693921232
patch: case Token . FUNCTION : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 559
score: 99.78244977678571
patch: case Token . BLOCK : while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 559
score: 99.75590556376689
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) || n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 559
score: 99.7412307326858
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 559
score: 99.70173725328948
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return n ; }
rank: 560
score: 99.81524143448796
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 560
score: 99.79052734375
patch: case Token . BLOCK : { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 560
score: 99.78934972426471
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . BLOCK ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 560
score: 99.78234460851648
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ) ;
rank: 560
score: 99.77668994968221
patch: } Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 560
score: 99.77038741438356
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 560
score: 99.75583930864725
patch: case Type . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; }
rank: 560
score: 99.70163411458333
patch: case Di CaMeL Graph CaMeL Edge . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) ;
rank: 561
score: 99.81522722942073
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ;
rank: 561
score: 99.79043496621621
patch: } else { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 561
score: 99.78230337078652
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ;
rank: 561
score: 99.77662760416666
patch: case Token . BLOCK : { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 561
score: 99.7703857421875
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 561
score: 99.75580193014706
patch: case Token . BLOCK : if ( n . get CaMeL Next ( ) == null ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 561
score: 99.70159149169922
patch: case Token . BREAK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( first ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 562
score: 99.81520182291666
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ; }
rank: 562
score: 99.79043283770162
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return first ; }
rank: 562
score: 99.78930998501713
patch: case RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 562
score: 99.7766177528783
patch: } case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ;
rank: 562
score: 99.77038225446428
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL Next ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 562
score: 99.7633319323576
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node n = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 562
score: 99.75578327922078
patch: case Di CaMeL Graph CaMeL Node . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; }
rank: 562
score: 99.74113103693182
patch: if ( n . get CaMeL Parent ( ) == null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 562
score: 99.70149953741776
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ;
rank: 563
score: 99.7904270119863
patch: } else { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 563
score: 99.78225009412651
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; }
rank: 563
score: 99.77660435267858
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 563
score: 99.77035476912313
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else if ( n . has CaMeL Children ( ) )
rank: 563
score: 99.76331339003164
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Last CaMeL Child ( ) ) ; }
rank: 563
score: 99.75575921474359
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 563
score: 99.74106577280405
patch: case Token . UNCOND : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 563
score: 99.7014396421371
patch: case Di CaMeL Graph CaMeL Edge . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 564
score: 99.81514291914682
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { break ; }
rank: 564
score: 99.79039809283088
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { n . has CaMeL Children ( ) ;
rank: 564
score: 99.78224690755208
patch: case Type . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 564
score: 99.77660006009616
patch: } case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 564
score: 99.77021350599315
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , ) , n ) ;
rank: 564
score: 99.76331147693452
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 564
score: 99.74104597761824
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 564
score: 99.701416015625
patch: try { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 565
score: 99.79035206330128
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n . has CaMeL Children ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 565
score: 99.78219357052365
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return n . get CaMeL First CaMeL Child ( ) ; }
rank: 565
score: 99.77649688720703
patch: case Token . BLOCK : { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 565
score: 99.77017372532895
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , first ) ;
rank: 565
score: 99.76330050616197
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } }
rank: 565
score: 99.75575005830224
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 565
score: 99.74104077888258
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; } } return n ;
rank: 565
score: 99.70140569982394
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL Out CaMeL Edges ( ) ;
rank: 566
score: 99.79031415052818
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 566
score: 99.78909737723214
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 566
score: 99.78218217329545
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 566
score: 99.77648532006049
patch: } try { try { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 566
score: 99.77015206473214
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( $STRING$ ) ) ;
rank: 566
score: 99.76324659778226
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; }
rank: 566
score: 99.75570913461539
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 566
score: 99.70134141710069
patch: case Di CaMeL Graph CaMeL Edge . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ;
rank: 567
score: 99.79029572315706
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 567
score: 99.78218005952381
patch: case Token . BLOCK : while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; }
rank: 567
score: 99.77646921641791
patch: else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 567
score: 99.77015019806338
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 567
score: 99.76319580078125
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) , n ) ;
rank: 567
score: 99.74099551930146
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 567
score: 99.70133674918831
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; if ( next . has CaMeL Children ( ) ) {
rank: 568
score: 99.81477588718221
patch: } case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 568
score: 99.7902634079392
patch: if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 568
score: 99.78907729640152
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 568
score: 99.78217673788265
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } finally {
rank: 568
score: 99.7764559659091
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } }
rank: 568
score: 99.77012510557432
patch: case BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ;
rank: 568
score: 99.76318962191358
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; } finally {
rank: 568
score: 99.74098748675847
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) != null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 568
score: 99.70131244081439
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 569
score: 99.8147127175633
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 569
score: 99.79023162411971
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 569
score: 99.78902859157986
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else
rank: 569
score: 99.78216843377976
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 569
score: 99.77009114583333
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 569
score: 99.76316505142405
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = node . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; }
rank: 569
score: 99.75562843116555
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 569
score: 99.70129064611487
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , g CaMeL Node ) ) ;
rank: 570
score: 99.81470677759741
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return n ; }
rank: 570
score: 99.79019210587687
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 570
score: 99.78900311444256
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 570
score: 99.78209228515625
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 570
score: 99.77640573601974
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 570
score: 99.7699836282169
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; }
rank: 570
score: 99.76314290364583
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } }
rank: 570
score: 99.74092548076923
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( first == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 570
score: 99.70126805160984
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ;
rank: 571
score: 99.7901611328125
patch: try { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 571
score: 99.78897135416666
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL Next ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ) ;
rank: 571
score: 99.78205855174731
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 571
score: 99.77640417850378
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 571
score: 99.76991536458333
patch: case Di CaMeL Graph CaMeL Edge . FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 571
score: 99.76309344951923
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = ( Node ) n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; }
rank: 571
score: 99.755546875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Value ( ) ) ;
rank: 571
score: 99.74091968201755
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } * / return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 571
score: 99.7011520798142
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; }
rank: 572
score: 99.81468290441177
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { n . get CaMeL First CaMeL Child ( ) . return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 572
score: 99.79015719506049
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( first != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 572
score: 99.77638872931985
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 572
score: 99.76309159873189
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 572
score: 99.74091932508681
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 572
score: 99.70110589104729
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 573
score: 99.81462868679775
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n . get CaMeL First CaMeL Child ( ) ) ) ; }
rank: 573
score: 99.78189711972891
patch: } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally {
rank: 573
score: 99.77638725385275
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ; }
rank: 573
score: 99.7698927049513
patch: case Token . BLOCK : if ( ! n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ;
rank: 573
score: 99.70109577922078
patch: case Di CaMeL Graph CaMeL Edge . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else {
rank: 574
score: 99.79011164484797
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ;
rank: 574
score: 99.76988389756944
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , id ) ;
rank: 574
score: 99.76304408482143
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 574
score: 99.75543047930744
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 575
score: 99.814560546875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; }
rank: 575
score: 99.78885323660714
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 575
score: 99.78178453947369
patch: } if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 575
score: 99.77633713942308
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 575
score: 99.76977221996754
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) , ) ;
rank: 575
score: 99.75542743389423
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ; } else if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 575
score: 99.74073815724206
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) ) { break ; }
rank: 576
score: 99.81455927309783
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 576
score: 99.78995090060764
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 576
score: 99.78883315577652
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . BLOCK ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 576
score: 99.78170304445877
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 576
score: 99.7697364696558
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 576
score: 99.75537109375
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ) ;
rank: 576
score: 99.74073107489224
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL Last CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 576
score: 99.70098555715461
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 577
score: 99.81452993328652
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 577
score: 99.78992462158203
patch: case Token . BLOCK : { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 577
score: 99.78883231026786
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 577
score: 99.7762668557363
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = node . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 577
score: 99.76972791883681
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node next = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 577
score: 99.7629458778783
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; }
rank: 577
score: 99.75529082833904
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 577
score: 99.74050641741071
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 577
score: 99.70096164279514
patch: case Token . FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 578
score: 99.81450892857143
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } return n . get CaMeL First CaMeL Child ( ) ;
rank: 578
score: 99.78992047991072
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 578
score: 99.78882962740384
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 578
score: 99.78164743822674
patch: try { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 578
score: 99.77619371916118
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 578
score: 99.76972522474315
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , next ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 578
score: 99.7628807357595
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ;
rank: 578
score: 99.74041958512932
patch: case Branch . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 578
score: 99.70094651442308
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( first ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 579
score: 99.81443093039773
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 579
score: 99.78880673363095
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 579
score: 99.78163655598958
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( node ) ) ; }
rank: 579
score: 99.76287231445312
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ;
rank: 579
score: 99.75523337339743
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) , g CaMeL Node ) ;
rank: 579
score: 99.70091532044492
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ;
rank: 580
score: 99.81441774230072
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n . get CaMeL First CaMeL Child ( ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 580
score: 99.78976482234589
patch: try { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 580
score: 99.78870130565069
patch: case Token . FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL Next ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ) ;
rank: 580
score: 99.78162472747093
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 580
score: 99.77614232113487
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) . get CaMeL Node ( ) ) ;
rank: 580
score: 99.76286969866071
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , ; }
rank: 580
score: 99.75518275669643
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { break ; } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 580
score: 99.74020686619718
patch: case Type . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 580
score: 99.70085515202703
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ;
rank: 581
score: 99.78864274945175
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 581
score: 99.77611929086538
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 581
score: 99.76966145833333
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { remove CaMeL Dead CaMeL Expr CaMeL Statement CaMeL Safely ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 581
score: 99.75514787946429
patch: case Token . BLOCK : case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 581
score: 99.74019949776786
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 581
score: 99.70085375236742
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 582
score: 99.81434581043956
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ;
rank: 582
score: 99.78860061233108
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) . get CaMeL Value ( ) == Branch . UNCOND ) ;
rank: 582
score: 99.78162042025862
patch: } else { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 582
score: 99.77609154485887
patch: } case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 582
score: 99.76962762129934
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { remove CaMeL Dead CaMeL Expr CaMeL Statement CaMeL Safely ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 582
score: 99.76280517578125
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } }
rank: 582
score: 99.75510416666667
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 582
score: 99.74019499747983
patch: case Type . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 582
score: 99.70078638980263
patch: case Di CaMeL Graph CaMeL Node . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 583
score: 99.78970914273648
patch: } else { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 583
score: 99.77607421875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 583
score: 99.76960002200704
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( node ) ) ; }
rank: 583
score: 99.76280453330592
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) , n ) ) ;
rank: 583
score: 99.7550880321558
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 583
score: 99.7007839255137
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 584
score: 99.78963330765845
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 584
score: 99.78856670673076
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 584
score: 99.7815173921131
patch: case Node . BLOCK : { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 584
score: 99.7760661922089
patch: } case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , node ) ;
rank: 584
score: 99.75506756756756
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) ) ;
rank: 584
score: 99.70076622596154
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 585
score: 99.81425083705358
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 585
score: 99.78956628224206
patch: } if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 585
score: 99.78855567642405
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == Branch . UNCOND ) ;
rank: 585
score: 99.78150431315105
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Object first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 585
score: 99.76953125
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , g CaMeL Node ) ;
rank: 585
score: 99.76270680147059
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , false ) ) ) ;
rank: 585
score: 99.7550616197183
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ; }
rank: 585
score: 99.74002390894397
patch: case Branch >> * / if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 586
score: 99.7885544235642
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 586
score: 99.7694675611413
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 586
score: 99.76267677017405
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( first . has CaMeL Children ( ) ) { Node first = first . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 586
score: 99.75501598011364
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ; }
rank: 586
score: 99.7400146484375
patch: case Node . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 586
score: 99.7007194967831
patch: try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 587
score: 99.81416116301547
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ;
rank: 587
score: 99.7895309860642
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; }
rank: 587
score: 99.78852127259036
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 587
score: 99.78148716517858
patch: case Token . BLOCK : while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 587
score: 99.77592917049633
patch: } if ( ! n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 587
score: 99.73994954427083
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 588
score: 99.7885139371142
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL Next ( ) ) ) ;
rank: 588
score: 99.78146014636076
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 588
score: 99.76933447994404
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) || n . get CaMeL Type ( ) == Token . FUNCTION ) {
rank: 588
score: 99.76264880952381
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 588
score: 99.75498923277243
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 588
score: 99.73989993578768
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , this ) ; }
rank: 589
score: 99.81409409466912
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n . get CaMeL First CaMeL Child ( ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 589
score: 99.78946010044643
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 589
score: 99.78851318359375
patch: case Token . BLOCK : { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 589
score: 99.77582925052967
patch: case Token . BLOCK : } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 589
score: 99.769287109375
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 589
score: 99.76260986328126
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; }
rank: 589
score: 99.75495990953948
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , ) ; }
rank: 589
score: 99.7005550986842
patch: case Token . BREAK : case Token . CONTINUE : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ;
rank: 590
score: 99.81406656901042
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 590
score: 99.78943048007247
patch: } else { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 590
score: 99.77580915178571
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 590
score: 99.769287109375
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , 1 ) ;
rank: 590
score: 99.76257717993951
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 590
score: 99.75491536458334
patch: case Token . FUNCTION : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 590
score: 99.7398681640625
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 590
score: 99.70053335336539
patch: case Token . BREAK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 591
score: 99.81404049295774
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 591
score: 99.78936089409723
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 591
score: 99.78838790090461
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 591
score: 99.78139094716495
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 591
score: 99.7757785744863
patch: } try { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 591
score: 99.762548828125
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) != null && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 591
score: 99.75490920608108
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 591
score: 99.70050223214285
patch: case Token . BLOCK : case Token . CONTINUE : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ;
rank: 592
score: 99.78931342230902
patch: try { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 592
score: 99.78838397930195
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 592
score: 99.78135731456044
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 592
score: 99.775732421875
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return first ; }
rank: 592
score: 99.76918051276408
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } case Token . BLOCK :
rank: 592
score: 99.76252769356343
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n . get CaMeL First CaMeL Child ( ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 592
score: 99.7549053485577
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 592
score: 99.73980439598881
patch: case Token . FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 592
score: 99.70046352332747
patch: case Token . RETURN : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ;
rank: 593
score: 99.78930235745614
patch: case Token . BLOCK : while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 593
score: 99.78835647170608
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL Next ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ) ; }
rank: 593
score: 99.78130208333333
patch: case Token . BLOCK : { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 593
score: 99.76910985659246
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else {
rank: 593
score: 99.76251220703125
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return first ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 593
score: 99.7549026076858
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 593
score: 99.70041538292253
patch: try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 594
score: 99.8139717209507
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { Thread . current CaMeL Thread ( ) . interrupt ( ) ; }
rank: 594
score: 99.78922526041667
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 594
score: 99.78835161994485
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Following ( n ) ) ;
rank: 594
score: 99.78128020296391
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 594
score: 99.77564728565706
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 594
score: 99.7691015625
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; case Token . CONTINUE :
rank: 594
score: 99.76248508029514
patch: case Token . BLOCK : if ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 594
score: 99.73980034722223
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 594
score: 99.70037286931819
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else
rank: 595
score: 99.78921900040064
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( ) ) ; }
rank: 595
score: 99.78831722861842
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 595
score: 99.77556453339041
patch: } case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 595
score: 99.7691015625
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; case Token . BLOCK :
rank: 595
score: 99.76242897727273
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . BLOCK ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; }
rank: 595
score: 99.75481770833333
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , cur CaMeL Cfg ) ; }
rank: 595
score: 99.70036969866071
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 596
score: 99.78831380208334
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { break ;
rank: 596
score: 99.7812645755597
patch: } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 596
score: 99.76908255912163
patch: case Token . BLOCK : if ( n != null && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 596
score: 99.76240234375
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 596
score: 99.75480671672078
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; }
rank: 596
score: 99.73969507929104
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 596
score: 99.70034877232143
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ) ;
rank: 597
score: 99.78904893663194
patch: case Token . BLOCK : while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 597
score: 99.78822866586539
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 597
score: 99.78119574652777
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 597
score: 99.77547433035714
patch: } if ( ! n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 597
score: 99.76238731971154
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return first ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 597
score: 99.75480382582721
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 597
score: 99.7396484375
patch: case Branch . BLOCK : if ( n . get CaMeL Parent ( ) != null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 597
score: 99.70026607789855
patch: try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else if ( n . has CaMeL Children ( ) ) {
rank: 598
score: 99.8138397961128
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { n . has CaMeL Children ( ) ; }
rank: 598
score: 99.78902123679578
patch: case Token . BLOCK : { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 598
score: 99.78806807355183
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL Next ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL Next ( ) ) ) ;
rank: 598
score: 99.78115234375
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else ;
rank: 598
score: 99.77543075770548
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 598
score: 99.76898276969177
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; return next ;
rank: 598
score: 99.75474234803082
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 598
score: 99.70020816200658
patch: case Di CaMeL Graph CaMeL Edge . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 599
score: 99.81383883568549
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ; }
rank: 599
score: 99.78893871038733
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 599
score: 99.7880557966821
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 599
score: 99.77538174715909
patch: } } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 599
score: 99.7689307960304
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; Node try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 599
score: 99.762353515625
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; } }
rank: 599
score: 99.75472976912313
patch: case Token . BLOCK : if ( n . get CaMeL Next ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 599
score: 99.7001953125
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 600
score: 99.78891389266305
patch: } else { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 600
score: 99.78107884987114
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 600
score: 99.77533922697368
patch: case Token . BLOCK : Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 600
score: 99.76889120565879
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) , first ) ;
rank: 600
score: 99.76230951003086
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ) ;
rank: 600
score: 99.75469649465461
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 600
score: 99.73951357886905
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 600
score: 99.70015517979452
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 601
score: 99.78888095953526
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 601
score: 99.78802490234375
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 601
score: 99.78103077168367
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ) ; }
rank: 601
score: 99.76888912671232
patch: case Token . BLOCK : else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 601
score: 99.7545997509058
patch: case Token . BLOCK : case Token . RETURN : if ( n . get CaMeL Next ( ) == null || n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 601
score: 99.70012842465754
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 602
score: 99.81374709670608
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } }
rank: 602
score: 99.78881422139831
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 602
score: 99.78094276685393
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , this ) ) ;
rank: 602
score: 99.77529164907095
patch: } else { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; }
rank: 602
score: 99.76888234991776
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 602
score: 99.76223575367646
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , ) ) ) ; }
rank: 602
score: 99.75459635416667
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 602
score: 99.73950582837301
patch: case Token . FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 602
score: 99.70008002387152
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL Out CaMeL Edges ( ) ; }
rank: 603
score: 99.78880709134616
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ;
rank: 603
score: 99.7880130597015
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 603
score: 99.77528130830224
patch: } Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 603
score: 99.7622302827381
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 603
score: 99.75456574675324
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Value ( ) == null ? null : try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; }
rank: 603
score: 99.70004147046232
patch: try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else return n ;
rank: 604
score: 99.81371330492425
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 604
score: 99.78876323084677
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 604
score: 99.78796756628788
patch: case Token . BREAK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 604
score: 99.78090463033537
patch: } else { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; }
rank: 604
score: 99.77523983226104
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 604
score: 99.76218938253012
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Source ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 604
score: 99.75454249526516
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 604
score: 99.7394783266129
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , g CaMeL Node ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 604
score: 99.70004111842105
patch: case Di CaMeL Graph CaMeL Node . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 605
score: 99.7807758718297
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } finally { n . has CaMeL Children ( ) ; }
rank: 605
score: 99.77523678296232
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 605
score: 99.76216681985294
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) . get CaMeL Parent ( ) ) ) ; }
rank: 605
score: 99.73947788292253
patch: case Di CaMeL Graph CaMeL Edge . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 605
score: 99.7000399502841
patch: case Di CaMeL Graph CaMeL Edge . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 606
score: 99.78785342261905
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 606
score: 99.780712890625
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n . get CaMeL First CaMeL Child ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 606
score: 99.76866170804794
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , node ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 606
score: 99.76214522349683
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 606
score: 99.75452161815069
patch: case Token . BLOCK : if ( n . get CaMeL Next ( ) == null || n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 606
score: 99.73943413628473
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) ; }
rank: 606
score: 99.70003756009615
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( first ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 607
score: 99.81360677083333
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ; }
rank: 607
score: 99.78783017113095
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , node . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 607
score: 99.78070877259036
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( parent ) ) ;
rank: 607
score: 99.7751953125
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 607
score: 99.76865885416667
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , g CaMeL Node ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 607
score: 99.76209788602941
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node n = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 607
score: 99.75449656016791
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 607
score: 99.73940873579545
patch: if ( n . get CaMeL Parent ( ) != null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 607
score: 99.7000248015873
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ;
rank: 608
score: 99.81358753551136
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) == null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 608
score: 99.78781072443182
patch: case BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 608
score: 99.78068524096386
patch: case Token . BLOCK : while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 608
score: 99.77518956801471
patch: } if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 608
score: 99.76865544394842
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) || n . has CaMeL Children ( ) ) {
rank: 608
score: 99.76204927884615
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 608
score: 99.75448652626811
patch: case Token . BLOCK : case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 608
score: 99.739404296875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 608
score: 99.69999186197917
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 609
score: 99.81356319304436
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } return n ;
rank: 609
score: 99.78868744338769
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 609
score: 99.78062545421511
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 609
score: 99.77518463134766
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 609
score: 99.76858181423611
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else return return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 609
score: 99.75446520353618
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == null ? null : g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ) ;
rank: 609
score: 99.73934597439236
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 609
score: 99.69991932744566
patch: try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 610
score: 99.78868353544776
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 610
score: 99.78780691964286
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 610
score: 99.77511393229166
patch: } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 610
score: 99.76852638134058
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 610
score: 99.76199776785714
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL Parent ( ) ) ) ; }
rank: 610
score: 99.7542660361842
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ;
rank: 610
score: 99.73927260890152
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 610
score: 99.69988922574628
patch: if ( n . get CaMeL Next ( ) == null ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 611
score: 99.81338395743535
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return n . get CaMeL First CaMeL Child ( ) ; } }
rank: 611
score: 99.78867059004934
patch: if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 611
score: 99.78056640625
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( node ) ) ;
rank: 611
score: 99.76199070411393
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 611
score: 99.75423177083333
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 611
score: 99.7392578125
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 611
score: 99.6998650045956
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ) ;
rank: 612
score: 99.81338243599397
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( ) ) ; }
rank: 612
score: 99.78866185897436
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( node ) ) ;
rank: 612
score: 99.78050875376506
patch: case Token . BLOCK : while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 612
score: 99.77506760817307
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return n ; } }
rank: 612
score: 99.76852030149648
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; case Token . RETURN : if ( n . has CaMeL Children ( ) ) {
rank: 612
score: 99.76198299632352
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ;
rank: 612
score: 99.75421424278846
patch: case Token . BLOCK : case Token . RETURN : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 612
score: 99.73923627068015
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 612
score: 99.69979095458984
patch: case Token . BLOCK : case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( first ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 613
score: 99.81336167279412
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 613
score: 99.780458984375
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 613
score: 99.77504303495763
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 613
score: 99.76843939887152
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 613
score: 99.76197193287037
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; }
rank: 613
score: 99.75420055650685
patch: case Token . BLOCK : case Token . CONTINUE : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 613
score: 99.69978955765845
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) ;
rank: 614
score: 99.78777398003473
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 614
score: 99.78044899929775
patch: case Node . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 614
score: 99.761962890625
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , - 1 ) ) ; }
rank: 614
score: 99.75415736607142
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 614
score: 99.73912217881944
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 614
score: 99.69976485402961
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 615
score: 99.81329180743244
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 615
score: 99.78862448299633
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 615
score: 99.78776253043831
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 615
score: 99.78040835731908
patch: case Token . BLOCK : { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 615
score: 99.77498812288852
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 615
score: 99.76841026628522
patch: case Throwable . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 615
score: 99.76194254557292
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 615
score: 99.75409256784539
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == null ? null : try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) , n ) ) ;
rank: 615
score: 99.73911539713542
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 615
score: 99.69972139246323
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 616
score: 99.81321473052536
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { n . get CaMeL First CaMeL Child ( ) ; } } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 616
score: 99.78859958400975
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ) ; }
rank: 616
score: 99.78769818474265
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 616
score: 99.77490234375
patch: case Token . BLOCK : Node first = Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 616
score: 99.7619140625
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 616
score: 99.75409100506756
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == null ? null : Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 616
score: 99.69967403927365
patch: try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else return n . get CaMeL Destination ( ) . get CaMeL Value ( ) ; }
rank: 617
score: 99.78766832853618
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 617
score: 99.78035084794207
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ;
rank: 617
score: 99.76834106445312
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . get CaMeL Type ( ) == Token . FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 617
score: 99.69965424408784
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL Out CaMeL Edges ( ) . get ( 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 618
score: 99.813125
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } } return n ;
rank: 618
score: 99.7885810959507
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 618
score: 99.78759131493507
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL Next ( ) ) ) ;
rank: 618
score: 99.78034078663794
patch: case Token . BLOCK : Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 618
score: 99.77481515066964
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 618
score: 99.76189566349638
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ;
rank: 618
score: 99.75399619654605
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . RETURN ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 618
score: 99.73893694196428
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 618
score: 99.69965201364437
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 619
score: 99.81305147058823
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ) ;
rank: 619
score: 99.76827663845486
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , first ) ;
rank: 619
score: 99.75399320419521
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } case Token . RETURN : if ( n . has CaMeL Children ( ) ) { break ;
rank: 619
score: 99.69964299436475
patch: case Di CaMeL Graph CaMeL Node . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 620
score: 99.78744313686708
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . BLOCK ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 620
score: 99.77474814967105
patch: } Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 620
score: 99.76823136613176
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) || n . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 620
score: 99.75395903716216
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 621
score: 99.78733565167683
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 621
score: 99.78018188476562
patch: case Token . BLOCK : while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 621
score: 99.7681884765625
patch: case Di CaMeL Graph CaMeL Edge . FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 621
score: 99.76179917279411
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , 0 ) ) ;
rank: 621
score: 99.73855329241071
patch: case Node . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 621
score: 99.69960145692568
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 622
score: 99.81290064102564
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 622
score: 99.7746826171875
patch: } case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 622
score: 99.76816268705986
patch: case BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; }
rank: 622
score: 99.76169084821429
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ;
rank: 622
score: 99.75393455615942
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . get CaMeL Next ( ) == null || n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 622
score: 99.7385009765625
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 622
score: 99.69957817925348
patch: try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 623
score: 99.8128591954023
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = ( Node ) n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 623
score: 99.78842836850649
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 623
score: 99.78728861748418
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == Branch . UNCOND ) ;
rank: 623
score: 99.78011246565934
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ) ;
rank: 623
score: 99.77462332589286
patch: Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 623
score: 99.76815840126811
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { if ( n . has CaMeL Children ( ) ) {
rank: 623
score: 99.76166092722039
patch: case Token . BLOCK : case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 623
score: 99.75389956121575
patch: case Type . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 623
score: 99.69954681396484
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; }
rank: 624
score: 99.81283967391305
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 624
score: 99.78840494791666
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 624
score: 99.78008510044643
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 624
score: 99.76163736979167
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n . get CaMeL First CaMeL Child ( ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n . get CaMeL First CaMeL Child ( ) ) ; }
rank: 624
score: 99.7538920969203
patch: case Token . BLOCK : case Token . RETURN : case Token . CONTINUE : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 624
score: 99.73833383413462
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 624
score: 99.6995063677226
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 625
score: 99.81281672297297
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , false ) ) ; } }
rank: 625
score: 99.78834680008562
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 625
score: 99.78719181209415
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 625
score: 99.78007604720744
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( ) ) ;
rank: 625
score: 99.76809177150975
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 625
score: 99.76155323093221
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = node . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 625
score: 99.75384605094177
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 625
score: 99.7383041381836
patch: case Token . BLOCK : if ( n . get CaMeL Next ( ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 626
score: 99.81272007042253
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( next ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 626
score: 99.78832594014831
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 626
score: 99.7871875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n . get CaMeL Next ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 626
score: 99.77457415471312
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return first ; }
rank: 626
score: 99.76809177150975
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 626
score: 99.76148412134741
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Root ( ) ) ; }
rank: 626
score: 99.69941980698529
patch: case Token . BLOCK : if ( n . get CaMeL Next ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 627
score: 99.78717595880681
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 627
score: 99.7799757050305
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return n . get CaMeL First CaMeL Child ( ) ;
rank: 627
score: 99.77454524253731
patch: } ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 627
score: 99.76798614083904
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , null ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 627
score: 99.75382486979167
patch: case Token . BLOCK : if ( n . get CaMeL Next ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 627
score: 99.73808422423245
patch: case Type . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 628
score: 99.81266061883224
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ;
rank: 628
score: 99.77996764520202
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } finally { }
rank: 628
score: 99.77451963682432
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; } }
rank: 628
score: 99.76140528549382
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) , n . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 628
score: 99.69933363970588
patch: case Di CaMeL Graph CaMeL Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n ; }
rank: 629
score: 99.81260219840117
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , false ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 629
score: 99.7870952219203
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 629
score: 99.7745143942637
patch: } if ( n . has CaMeL Children ( ) ) { Node first = Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 629
score: 99.76138305664062
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { n . get CaMeL First CaMeL Child ( ) ; }
rank: 629
score: 99.75379702919408
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; }
rank: 629
score: 99.69932819234914
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 630
score: 99.81257680828652
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 630
score: 99.77988710508242
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; }
rank: 630
score: 99.77447595730634
patch: try { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 630
score: 99.76790804476352
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 630
score: 99.76136067708333
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first , n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; }
rank: 630
score: 99.75378964552239
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . RETURN ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 630
score: 99.73789813701923
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } ; }
rank: 631
score: 99.7881637794384
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 631
score: 99.7868884858631
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return n . get CaMeL First CaMeL Child ( ) ;
rank: 631
score: 99.7798733998494
patch: case Token . BLOCK : while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ;
rank: 631
score: 99.77447509765625
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return first ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 631
score: 99.76788411458334
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } case Token . RETURN :
rank: 631
score: 99.76130514705882
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . has CaMeL Children ( ) ) ; }
rank: 631
score: 99.737890625
patch: case Number . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 631
score: 99.69928175403226
patch: case Token . FUNCTION : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 632
score: 99.8125
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 632
score: 99.78812779017858
patch: case Token . BLOCK : while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 632
score: 99.78687686011905
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 632
score: 99.77984619140625
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ) ;
rank: 632
score: 99.77435064935065
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 632
score: 99.76781529017858
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( false ) ) ;
rank: 632
score: 99.76128216911765
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ; }
rank: 632
score: 99.73780871975806
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { break ; } case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 632
score: 99.69923231336806
patch: case Token . FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 633
score: 99.8124344988567
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL Parent ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 633
score: 99.78811130275975
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ;
rank: 633
score: 99.78682355182927
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node , n ) ;
rank: 633
score: 99.7797782790493
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return n . get CaMeL First CaMeL Child ( ) ;
rank: 633
score: 99.77434717465754
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , node ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 633
score: 99.75361713610198
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 633
score: 99.73780084425404
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 634
score: 99.81238511029412
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 634
score: 99.78807942708333
patch: if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 634
score: 99.77971055772569
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 634
score: 99.77425986842105
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 634
score: 99.76771304481908
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { remove CaMeL Dead CaMeL Expr CaMeL Statement CaMeL Safely ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 634
score: 99.7612245141006
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { n . get CaMeL First CaMeL Child ( ) . get CaMeL First CaMeL Child ( ) . get CaMeL Parent ( ) . get CaMeL Parent ( ) . get CaMeL Parent ( ) ; }
rank: 634
score: 99.73780048076924
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node < Di CaMeL Graph CaMeL Edge > first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 635
score: 99.81236478365385
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return first ; } }
rank: 635
score: 99.7880790602993
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 635
score: 99.77968267746914
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally {
rank: 635
score: 99.76767578125
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( compute CaMeL Following ( n ) ) ) ;
rank: 635
score: 99.76122246413935
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return first ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 635
score: 99.75360820819805
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) == null ? null : try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; }
rank: 635
score: 99.73757684426229
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { break ; } case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 635
score: 99.69911977407095
patch: try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; } }
rank: 636
score: 99.81236373546511
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , false ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 636
score: 99.78806559244792
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = null ; while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 636
score: 99.77424684289383
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) ; } }
rank: 636
score: 99.76764012896825
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) {
rank: 636
score: 99.76121744791666
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; }
rank: 636
score: 99.75359612542229
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ) ; }
rank: 636
score: 99.73751502403846
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 637
score: 99.81228412828948
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ;
rank: 637
score: 99.78805055480072
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 637
score: 99.78666355298913
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 637
score: 99.77423095703125
patch: case Node . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 637
score: 99.76754981884058
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } switch ( n . get CaMeL Type ( ) ) {
rank: 637
score: 99.76121215820312
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Source ( ) . get CaMeL Value ( ) ) ) ;
rank: 637
score: 99.75359552556819
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ; }
rank: 637
score: 99.73748372395833
patch: case Token . BLOCK : if ( n . get CaMeL Next ( ) == null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 637
score: 99.69904719172297
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) ) ;
rank: 638
score: 99.81227258133562
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 638
score: 99.7866591416396
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL Next ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == Branch . UNCOND ) ;
rank: 638
score: 99.7741195436508
patch: case Token . BLOCK : { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 638
score: 99.7675400771104
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) , first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 638
score: 99.75356716579861
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 638
score: 99.73734537760417
patch: case $STRING$ : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 638
score: 99.6990186347336
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL Destination ( ) . get CaMeL Value ( ) ; }
rank: 639
score: 99.81225317651099
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent CaMeL Node ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 639
score: 99.78662743506493
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL Next ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 639
score: 99.77409340018657
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) || n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 639
score: 99.76751953125
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL Next ( ) == null || n . get CaMeL Type ( ) == Token . FUNCTION ) ) ;
rank: 639
score: 99.76118396577381
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ) ; }
rank: 639
score: 99.75356119791667
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 639
score: 99.73727158368644
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 639
score: 99.69900673314145
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ;
rank: 640
score: 99.81222534179688
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return n ; }
rank: 640
score: 99.78800695082721
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 640
score: 99.77961359797297
patch: case Node . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 640
score: 99.77407541582662
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 640
score: 99.76748318142361
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ) ; }
rank: 640
score: 99.76115399096386
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; }
rank: 640
score: 99.75355360243056
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ;
rank: 640
score: 99.73715164412313
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ) ; }
rank: 641
score: 99.78799229452055
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 641
score: 99.7795931355337
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , node ) ) ;
rank: 641
score: 99.77406099759615
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return node ; } }
rank: 641
score: 99.76115011867088
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ; }
rank: 641
score: 99.75353285845588
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 641
score: 99.73715049342105
patch: case Object . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 642
score: 99.81218009159483
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } finally { n . get CaMeL First CaMeL Child ( ) ; }
rank: 642
score: 99.78656099759615
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n . get CaMeL Next ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ) ;
rank: 642
score: 99.77953839045699
patch: } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ) ;
rank: 642
score: 99.77393863075658
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 642
score: 99.76743955869932
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ;
rank: 642
score: 99.76105700041118
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ; }
rank: 642
score: 99.75353211241882
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , g CaMeL Node ) ; }
rank: 642
score: 99.73712332589285
patch: case Node . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 642
score: 99.698974609375
patch: case Token . CONTINUE : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 643
score: 99.78787570529514
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 643
score: 99.78650841346153
patch: case Token . BREAK : case Token . CONTINUE : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 643
score: 99.77953069982394
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 643
score: 99.76743570963542
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 643
score: 99.76098958333333
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; }
rank: 643
score: 99.75351434004934
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == null ? null : try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ) ;
rank: 644
score: 99.81201171875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ) ; }
rank: 644
score: 99.78783835827464
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ) ; }
rank: 644
score: 99.77951882102273
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; }
rank: 644
score: 99.77389865451389
patch: } Node first = Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 644
score: 99.7609600360577
patch: case Token . BLOCK : case Token . BLOCK : case Token . LINE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 644
score: 99.75351291232639
patch: case Token . BLOCK : if ( n . get CaMeL Next ( ) == null || n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 644
score: 99.73697141617063
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 644
score: 99.69889768835617
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else {
rank: 645
score: 99.78782145182292
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 645
score: 99.78631591796875
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 645
score: 99.7738898782169
patch: } if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 645
score: 99.75351131663604
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) ) ;
rank: 645
score: 99.73696794181035
patch: case Node . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 645
score: 99.6988525390625
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ;
rank: 646
score: 99.78779602050781
patch: if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 646
score: 99.7863047425176
patch: case BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL Next ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ) ;
rank: 646
score: 99.76738145616319
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , first ) ;
rank: 646
score: 99.76083213404605
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 646
score: 99.75349406452922
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 646
score: 99.73693084716797
patch: case Di CaMeL Graph CaMeL Edge < Node , Branch >> g CaMeL Node = g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 646
score: 99.69881184895833
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL Destination ( ) . get CaMeL Value ( ) ; }
rank: 647
score: 99.81190952034883
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , true ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 647
score: 99.78778645833333
patch: } if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 647
score: 99.77377681408899
patch: } case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 647
score: 99.76738145616319
patch: case Throwable . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 647
score: 99.7608163568038
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( first . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ;
rank: 647
score: 99.75345923195422
patch: case Token . BLOCK : case Token . RETURN : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 647
score: 99.73688616071429
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 647
score: 99.69880945542279
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 648
score: 99.81190592447916
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { n . get CaMeL First CaMeL Child ( ) . reset ( ) ; }
rank: 648
score: 99.77946333451705
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n . get CaMeL First CaMeL Child ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 648
score: 99.76736252029221
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) , n ) ;
rank: 648
score: 99.76080137310606
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n . get CaMeL First CaMeL Child ( ) ) ; }
rank: 648
score: 99.7534471198694
patch: case Token . BLOCK : if ( n . get CaMeL Next ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 648
score: 99.7368681936553
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 649
score: 99.81186868686869
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 649
score: 99.7877391870471
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 649
score: 99.77944263059702
patch: } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 649
score: 99.77357127568493
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } }
rank: 649
score: 99.7607802353896
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 649
score: 99.75342465753425
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 649
score: 99.69878985430744
patch: try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 650
score: 99.81178264853395
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ; }
rank: 650
score: 99.78763156467014
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = null ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 650
score: 99.78621859163852
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { try { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 650
score: 99.7735595703125
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 650
score: 99.7672183388158
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Branch . UNCOND ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 650
score: 99.76077835648148
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; }
rank: 650
score: 99.7534115439967
patch: case Token . BLOCK : if ( n . get CaMeL Next ( ) == null || n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 650
score: 99.69877060145548
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 651
score: 99.78616493626645
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First ( ) ) ) ;
rank: 651
score: 99.77935394683442
patch: } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( first . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 651
score: 99.76077270507812
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ;
rank: 651
score: 99.75336014597039
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ;
rank: 651
score: 99.69874366554055
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( first ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 652
score: 99.81169376816861
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , true ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 652
score: 99.78760607489224
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 652
score: 99.78610677083333
patch: case Token . RETURN : if ( n . get CaMeL Type ( ) == Token . BREAK ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 652
score: 99.77935236150569
patch: case Token . BLOCK : Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 652
score: 99.7607619826858
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 652
score: 99.75333770333904
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 652
score: 99.73676127772177
patch: case Object . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 653
score: 99.77932837701613
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . has CaMeL Children ( ) ) ) ;
rank: 653
score: 99.7734130859375
patch: } case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 653
score: 99.76715087890625
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } switch ( n . get CaMeL Type ( ) ) { case Token . BREAK : case Token . CONTINUE :
rank: 653
score: 99.73670959472656
patch: case Token . UNCOND : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 653
score: 99.69873754528986
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 654
score: 99.8116226196289
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return next ; }
rank: 654
score: 99.78757758989725
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n . get CaMeL First CaMeL Child ( ) , n . has CaMeL Children ( ) ) ) ;
rank: 654
score: 99.78604585830479
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } ) ;
rank: 654
score: 99.779228515625
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 654
score: 99.76715087890625
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( ! Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 654
score: 99.76074947527985
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL First CaMeL Child ( ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 654
score: 99.75332559121621
patch: case Token . FUNCTION : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 654
score: 99.73669251399254
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ) ; }
rank: 654
score: 99.6987079326923
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 655
score: 99.81161733774039
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) , n ) ;
rank: 655
score: 99.78603769277598
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 655
score: 99.77334449404762
patch: } try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 655
score: 99.76713666523973
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , true ) ; }
rank: 655
score: 99.7607421875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , ) ) ) ;
rank: 655
score: 99.75330078125
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 656
score: 99.8115234375
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 656
score: 99.78755018446181
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 656
score: 99.78595581054688
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL Next ( ) ) ) ;
rank: 656
score: 99.77917340158046
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 656
score: 99.77331173058712
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 656
score: 99.76712890625
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else return n ;
rank: 656
score: 99.76071735963983
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return n . get CaMeL First CaMeL Child ( ) ; }
rank: 656
score: 99.75324842664931
patch: case Token . BLOCK : case Token . CONTINUE : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 656
score: 99.69868800951087
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : case RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 657
score: 99.78754104393116
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { try { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 657
score: 99.78593364514802
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 657
score: 99.7791553442029
patch: } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 657
score: 99.77330433238636
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 657
score: 99.76710269325658
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } case Token . BREAK :
rank: 657
score: 99.76070556640624
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) , first ) ;
rank: 657
score: 99.75324105525362
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) ) ; }
rank: 657
score: 99.73641231142241
patch: case Token . BLOCK : if ( n . get CaMeL Next ( ) == null ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 657
score: 99.69865788640203
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return n . get CaMeL Destination ( ) . get CaMeL Value ( ) ; } }
rank: 658
score: 99.81140667459239
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; }
rank: 658
score: 99.78592447916667
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } break ;
rank: 658
score: 99.77330106847427
patch: } Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 658
score: 99.76706345016892
patch: case Token . Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 658
score: 99.76070149739583
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; } }
rank: 658
score: 99.75307015196918
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ) ;
rank: 658
score: 99.73640829057835
patch: case Di CaMeL Graph CaMeL Edge . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 658
score: 99.6986553485577
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL Destination ( ) . get CaMeL Value ( ) ; }
rank: 659
score: 99.81140625
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; }
rank: 659
score: 99.7875247784515
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 659
score: 99.78587835607394
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { int first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 659
score: 99.77911184210527
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( this ) ) ;
rank: 659
score: 99.77329024057539
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 659
score: 99.76060464348592
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ;
rank: 659
score: 99.75305989583333
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 659
score: 99.73637863685344
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node next = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 659
score: 99.69862843983209
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 660
score: 99.78743732509328
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 660
score: 99.78586077008929
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 660
score: 99.77320536629098
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return n ; }
rank: 660
score: 99.76060267857143
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 660
score: 99.75301546663852
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 660
score: 99.73633541277985
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 660
score: 99.69858269942434
patch: case Di CaMeL Graph CaMeL Edge . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 661
score: 99.81131847993827
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n . get CaMeL First CaMeL Child ( ) ) ; }
rank: 661
score: 99.78741705907534
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 661
score: 99.76683892144098
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 661
score: 99.76059895833333
patch: case Token . BLOCK : if ( ( n . has CaMeL Children ( ) ) || ( n . has CaMeL Children ( ) ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 661
score: 99.69856550886824
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return n ; }
rank: 662
score: 99.78582268792229
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else ) ;
rank: 662
score: 99.7790372824367
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( node . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 662
score: 99.77314453125
patch: } Node first = n . get CaMeL First CaMeL Child ( ) ; if ( first != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 662
score: 99.76679180194805
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 662
score: 99.7605702574824
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 662
score: 99.75295061383929
patch: case Token . BLOCK : case Token . BREAK : case Token . CONTINUE : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 662
score: 99.73610336061508
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 662
score: 99.69856305803572
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; }
rank: 663
score: 99.77314196134868
patch: case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 663
score: 99.76678292410715
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( null ) ) ;
rank: 663
score: 99.76054551866319
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 663
score: 99.7529296875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 663
score: 99.73606305803571
patch: if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 663
score: 99.69853772615132
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ;
rank: 664
score: 99.78738446302818
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 664
score: 99.77903053977273
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 664
score: 99.77304997519842
patch: } case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 664
score: 99.76675992398648
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 664
score: 99.76054067460318
patch: case Token . BLOCK : case Token . ) : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 664
score: 99.75292239972015
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 664
score: 99.73598040956439
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { break ; } case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 664
score: 99.69850260416666
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL Destination ( ) . get CaMeL Value ( ) ;
rank: 665
score: 99.78575375205592
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL Next ( ) ) ) ;
rank: 665
score: 99.77902560763889
patch: } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; }
rank: 665
score: 99.77298677884616
patch: } case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n ; }
rank: 665
score: 99.76053619384766
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 665
score: 99.69840980643657
patch: case Token . RETURN : case Token . CONTINUE : case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 666
score: 99.78738223805146
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 666
score: 99.78572371199324
patch: case Token . BREAK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 666
score: 99.77902221679688
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ;
rank: 666
score: 99.77298266267124
patch: } case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , first ) ;
rank: 666
score: 99.76671159771126
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) ) ;
rank: 666
score: 99.76049503279322
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = ( Node ) n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 666
score: 99.73595770474138
patch: case Token . BLOCK : if ( n . has CaMeL Next ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 666
score: 99.69840494791667
patch: case Token . BLOCK : case Token . CONTINUE : case Token . CONTINUE : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 667
score: 99.81111886160714
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 667
score: 99.78736831202652
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return n . get CaMeL First CaMeL Child ( ) ; }
rank: 667
score: 99.77899235551075
patch: else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; }
rank: 667
score: 99.77297634548611
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 667
score: 99.76664970290493
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( null ) ; }
rank: 667
score: 99.76049470248287
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , 0 ) ) ; }
rank: 667
score: 99.75277994791666
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) ) ; }
rank: 667
score: 99.7359286221591
patch: case $STRING$ : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 667
score: 99.69839602953768
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) ) ;
rank: 668
score: 99.81111564217034
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) . get CaMeL Value ( ) ) ) ;
rank: 668
score: 99.78731496710526
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return n ; }
rank: 668
score: 99.78566864390432
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL Next ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 668
score: 99.77899169921875
patch: } else if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 668
score: 99.77290239726027
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; }
rank: 668
score: 99.76664733886719
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) || n . get CaMeL Type ( ) == Token . FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 668
score: 99.7604730068109
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 668
score: 99.7527118389423
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 668
score: 99.73579915364583
patch: case Token . CONTINUE : if ( n . get CaMeL Parent ( ) == null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 668
score: 99.69833233173077
patch: case Token . RETURN : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 669
score: 99.7872966609589
patch: case Token . BLOCK : { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 669
score: 99.77894890445403
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; }
rank: 669
score: 99.7728974313447
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 669
score: 99.76664282570422
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( true ) ; }
rank: 669
score: 99.7604648919753
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; }
rank: 669
score: 99.75258657094595
patch: case Type . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 669
score: 99.69831616950758
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ) ;
rank: 670
score: 99.81101740056818
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { System . out . println ( $STRING$ ) ; }
rank: 670
score: 99.78729538690476
patch: if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 670
score: 99.7728974313447
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 670
score: 99.7666213576858
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; break ;
rank: 670
score: 99.76040599385246
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node < Node > first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 671
score: 99.78728889016544
patch: case Token . BLOCK : Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 671
score: 99.77888569078948
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return n . get CaMeL First CaMeL Child ( ) ; }
rank: 671
score: 99.77285684121621
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } }
rank: 671
score: 99.76038178943452
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; }
rank: 671
score: 99.7525551155822
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 671
score: 99.73577008928571
patch: if ( n . get CaMeL Parent ( ) != null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 672
score: 99.81099269701087
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; }
rank: 672
score: 99.78543619791667
patch: case Token . BREAK : if ( n . get CaMeL Type ( ) == Token . RETURN ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 672
score: 99.77887935914855
patch: } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 672
score: 99.77284905849359
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 672
score: 99.76654449066558
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { remove CaMeL Dead CaMeL Expr CaMeL Statement CaMeL Safely ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 672
score: 99.75251953125
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else if ( n . has CaMeL Children ( ) ) { break ;
rank: 672
score: 99.73575721153846
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 673
score: 99.78725071957237
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n , n . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 673
score: 99.77887834821429
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 673
score: 99.7727783203125
patch: case Token . BLOCK : try { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 673
score: 99.76653693704044
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION || n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 673
score: 99.76035035686728
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) , n ) ) ; }
rank: 673
score: 99.69816589355469
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n ; }
rank: 674
score: 99.81093974497126
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 674
score: 99.78722723599138
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 674
score: 99.77885841836735
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 674
score: 99.77276611328125
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) , n ) ;
rank: 674
score: 99.7603280755538
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) , n . get CaMeL First CaMeL Child ( ) . get CaMeL Value ( ) ) ) ;
rank: 674
score: 99.7356826006356
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) ) { break ; } }
rank: 675
score: 99.81077223557692
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { System . out . println ( $STRING$ + n . get CaMeL First CaMeL Child ( ) ) ; }
rank: 675
score: 99.78719075520833
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 675
score: 99.78533935546875
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 675
score: 99.77274088541667
patch: } try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; }
rank: 675
score: 99.76651903609155
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; }
rank: 675
score: 99.76031691028226
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = node . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; }
rank: 675
score: 99.75238861908784
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) ) ;
rank: 675
score: 99.73555501302083
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 676
score: 99.78718014039855
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ;
rank: 676
score: 99.77880859375
patch: case Token . BLOCK : try { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 676
score: 99.77271792763158
patch: } else { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 676
score: 99.76649305555556
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , flow ) ;
rank: 676
score: 99.75233583192568
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 676
score: 99.73551897321428
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else return n . get CaMeL First CaMeL Child ( ) ;
rank: 676
score: 99.6979462594697
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) ;
rank: 677
score: 99.81068313953489
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 677
score: 99.78717814700704
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 677
score: 99.77879333496094
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 677
score: 99.77270132211538
patch: } case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 677
score: 99.7664008989726
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , cur CaMeL Cfg ) ;
rank: 677
score: 99.76029411764706
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 677
score: 99.75231370192307
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 677
score: 99.69781051856884
patch: if ( n . get CaMeL Parent ( ) != null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 678
score: 99.8106689453125
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 678
score: 99.78717362253289
patch: if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 678
score: 99.7726787860577
patch: case Token . BLOCK : { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 678
score: 99.76025390625
patch: case Token . BLOCK : case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 678
score: 99.75227156929348
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ;
rank: 678
score: 99.6977684818097
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) . get CaMeL Value ( ) ;
rank: 679
score: 99.810546875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ; }
rank: 679
score: 99.78715376420455
patch: if ( ! n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 679
score: 99.778701171875
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( ) ) ) ; }
rank: 679
score: 99.77265782510081
patch: } if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 679
score: 99.76636420355902
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , end ) ;
rank: 679
score: 99.75218599759616
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 679
score: 99.73533676609848
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; } } return n ;
rank: 679
score: 99.69773267663044
patch: case Token . BLOCK : case Token . CONTINUE : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ;
rank: 680
score: 99.78709635416666
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 680
score: 99.78517150878906
patch: case Token . BREAK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 680
score: 99.7725890112705
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 680
score: 99.76632888595779
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Next ( ) ) ; }
rank: 680
score: 99.76018629807692
patch: case Token . BLOCK : if ( ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 680
score: 99.75216542119566
patch: case Token . BLOCK : case Token . CONTINUE : case Token . BREAK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 680
score: 99.73519147028688
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ;
rank: 680
score: 99.6977310180664
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ;
rank: 681
score: 99.8104965367268
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 681
score: 99.78702920942165
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 681
score: 99.77861328125
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ) ;
rank: 681
score: 99.77251800933442
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 681
score: 99.76017922794118
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ;
rank: 681
score: 99.75207691461267
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ) ;
rank: 682
score: 99.81045069839016
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL First CaMeL Child ( ) ) ; }
rank: 682
score: 99.78697090718283
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 682
score: 99.78509880514706
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 682
score: 99.77250840928819
patch: } Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 682
score: 99.76626504434121
patch: case Token . BLOCK : if ( n == null && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 682
score: 99.7601656626506
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . BLOCK ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; }
rank: 682
score: 99.7520392922794
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 682
score: 99.69771205357142
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; } }
rank: 683
score: 99.77249849759616
patch: case Token . BLOCK : { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 683
score: 99.76624716481855
patch: case Type . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 683
score: 99.76002745697464
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( first . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; }
rank: 683
score: 99.75203339041096
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ) ;
rank: 683
score: 99.73504356971154
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 683
score: 99.69768831623135
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n ;
rank: 684
score: 99.78687555017606
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 684
score: 99.78505859375
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node next = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 684
score: 99.778564453125
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 684
score: 99.77248769263699
patch: } try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 684
score: 99.75999401461694
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . BLOCK ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 684
score: 99.75202001284246
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else switch ( n . get CaMeL Type ( ) ) { case Token . RETURN : if ( n . has CaMeL Children ( ) ) { break ;
rank: 684
score: 99.73503875732422
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 684
score: 99.69757276965726
patch: case Di CaMeL Graph CaMeL Node . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 685
score: 99.78499771712663
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 685
score: 99.778544921875
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( this ) ) ;
rank: 685
score: 99.7724859775641
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 685
score: 99.75201910895271
patch: case Type . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == null ? null : try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ) ;
rank: 685
score: 99.73503766741071
patch: if ( n . get CaMeL Parent ( ) == null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 685
score: 99.69757183527543
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; }
rank: 686
score: 99.81036119058099
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( ! try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 686
score: 99.7868217572774
patch: case Token . BLOCK : { try { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 686
score: 99.78499629579741
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { final Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 686
score: 99.7724609375
patch: } if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 686
score: 99.76610059862013
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return n ; }
rank: 686
score: 99.75196614583334
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 686
score: 99.73501124526516
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 687
score: 99.81025695800781
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 687
score: 99.78676470588235
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 687
score: 99.78489273313492
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Branch . UNCOND ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 687
score: 99.7785203313253
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( this ) ) ; }
rank: 687
score: 99.77242891905738
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 687
score: 99.75983629728618
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) != null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 687
score: 99.75191968107876
patch: case Token . BLOCK : case Token . BREAK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 687
score: 99.73496531016791
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 687
score: 99.69741525957662
patch: case Di CaMeL Graph CaMeL Edge . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 688
score: 99.78675554800725
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 688
score: 99.77847450657895
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } }
rank: 688
score: 99.7723617553711
patch: } case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 688
score: 99.75187747579226
patch: case Token . BLOCK : case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ) ;
rank: 688
score: 99.73492887126865
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { break ; } case Token . RETURN : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 688
score: 99.69735378689236
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 689
score: 99.81019890445403
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 689
score: 99.78675554800725
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 689
score: 99.78486071134868
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 689
score: 99.7723531351461
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 689
score: 99.76595275042808
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , false ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 689
score: 99.75977918836806
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 689
score: 99.7518409522804
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { break ; } case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 689
score: 99.73490700792911
patch: case Type . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 689
score: 99.69728597005208
patch: try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( null ) ; }
rank: 690
score: 99.81012548159246
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { if ( n . has CaMeL Children ( ) ) { Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; } }
rank: 690
score: 99.78672960069444
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 690
score: 99.78480931332237
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { final Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 690
score: 99.77227492559524
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 690
score: 99.7659482284331
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 690
score: 99.759765625
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return null ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 690
score: 99.75181749131944
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 690
score: 99.7348876953125
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 690
score: 99.69723849826389
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 691
score: 99.81012369791667
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 691
score: 99.78672466856061
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 691
score: 99.78478633996212
patch: case Token . RETURN : if ( n . get CaMeL Type ( ) == Token . BLOCK ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 691
score: 99.77841186523438
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( this ) ) ; }
rank: 691
score: 99.77225378787878
patch: } if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 691
score: 99.76593268407534
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 691
score: 99.75179928296232
patch: case Token . BLOCK : case Token . RETURN : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 691
score: 99.73475748697916
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Branch ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 691
score: 99.69719587053571
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) || n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 692
score: 99.78473427854938
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 692
score: 99.77835250686813
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n . get CaMeL First CaMeL Child ( ) ) ;
rank: 692
score: 99.7722526999081
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 692
score: 99.7597522474315
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node < Node > first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 692
score: 99.75169866857394
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 692
score: 99.73475477430556
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; } }
rank: 692
score: 99.69719102647569
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) ; }
rank: 693
score: 99.81010232042911
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 693
score: 99.78670027449324
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 693
score: 99.78472689924568
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . BLOCK ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 693
score: 99.77835215692934
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( node ) ) ; }
rank: 693
score: 99.77221345248287
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 693
score: 99.76589626736111
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } case Token . BLOCK :
rank: 693
score: 99.75975012400794
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { n . get CaMeL First CaMeL Child ( ) . remove CaMeL Child ( first ) ; }
rank: 693
score: 99.73456448227611
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ) ; }
rank: 693
score: 99.69716796875
patch: case Token . BLOCK : case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 694
score: 99.78665964226974
patch: case Token . BLOCK : { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 694
score: 99.78472075591216
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 694
score: 99.75971759733606
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } catch ( ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 694
score: 99.75142111707089
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) != null ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 694
score: 99.69709752817623
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 695
score: 99.81000046502976
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; }
rank: 695
score: 99.78471544053819
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == Branch . UNCOND ) ;
rank: 695
score: 99.77834706763699
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } finally {
rank: 695
score: 99.77216968201755
patch: Token first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 695
score: 99.76584123883929
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 695
score: 99.75967050527598
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ) ; }
rank: 695
score: 99.75140654151119
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else if ( n . has CaMeL Children ( ) ) {
rank: 695
score: 99.73443603515625
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } ;
rank: 695
score: 99.69704182942708
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n ;
rank: 696
score: 99.80995858433735
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) . get CaMeL Parent ( ) ) ; }
rank: 696
score: 99.78662827435662
patch: } else { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 696
score: 99.78464965820312
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 696
score: 99.7782566236413
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 696
score: 99.77215091765873
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 696
score: 99.76581897474315
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ;
rank: 696
score: 99.75966099330357
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ;
rank: 696
score: 99.75135633680556
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 696
score: 99.69696682602611
patch: if ( n . get CaMeL Next ( ) != null ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 697
score: 99.80987723214285
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 697
score: 99.78662778253425
patch: } else { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 697
score: 99.78459337022569
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 697
score: 99.77824096679687
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n . get CaMeL First CaMeL Child ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 697
score: 99.77214543269231
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 697
score: 99.7658038072183
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { break ; } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 697
score: 99.75956912157012
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) != null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ;
rank: 697
score: 99.69696044921875
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : case RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 698
score: 99.80985093390805
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ;
rank: 698
score: 99.78660046214789
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Object first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 698
score: 99.78454241071428
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { int first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 698
score: 99.7721431671627
patch: } else { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 698
score: 99.76575566681338
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , first ) ;
rank: 698
score: 99.75133928571428
patch: case Type . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 698
score: 99.73413957868304
patch: case 0 : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 699
score: 99.7845394736842
patch: case Token . RETURN : if ( n . get CaMeL Type ( ) == Branch . UNCOND ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 699
score: 99.77209102746212
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 699
score: 99.75133366371269
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; }
rank: 699
score: 99.73405456542969
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { try { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 700
score: 99.78650272253788
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 700
score: 99.7781631645115
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ;
rank: 700
score: 99.7720458984375
patch: } case Token . BLOCK : else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 700
score: 99.76572916666667
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 700
score: 99.75954674030173
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 700
score: 99.73376885775862
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { break ; } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 700
score: 99.69673665364583
patch: * / if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 701
score: 99.78448407061688
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 701
score: 99.77815572331461
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , null ) ;
rank: 701
score: 99.7656475360577
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . get CaMeL Type ( ) == Token . FUNCTION ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 701
score: 99.73369723647389
patch: case Object . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 701
score: 99.6966219815341
patch: case Di CaMeL Graph CaMeL Edge . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 702
score: 99.80968034771126
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 702
score: 99.78448109567901
patch: case BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 702
score: 99.7781279592803
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( first . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 702
score: 99.76563856336806
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , first ) ;
rank: 702
score: 99.75950055803571
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n . get CaMeL First CaMeL Child ( ) ) ; }
rank: 702
score: 99.75120590672348
patch: case Token . BLOCK : if ( n . get CaMeL Next ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 702
score: 99.69659064797794
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 703
score: 99.7844302528783
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { break ; }
rank: 703
score: 99.77810329861111
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( ) ) ) ;
rank: 703
score: 99.77190290178571
patch: } if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 703
score: 99.76563228777985
patch: case BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 703
score: 99.75948469606165
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally {
rank: 703
score: 99.75119430954392
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ) ; }
rank: 703
score: 99.73367625269397
patch: case Symbol . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 704
score: 99.80958081317205
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 704
score: 99.78640548904221
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . has CaMeL Children ( ) ) ; }
rank: 704
score: 99.784423828125
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . RETURN ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 704
score: 99.77807360197369
patch: } else { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 704
score: 99.77186848958333
patch: case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 704
score: 99.76563197544642
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( $STRING$ ) ;
rank: 704
score: 99.75946229876894
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 704
score: 99.75113254123264
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , null ) ) ;
rank: 704
score: 99.733642578125
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 704
score: 99.69650065104166
patch: try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 705
score: 99.80955908764368
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; }
rank: 705
score: 99.78634207589286
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 705
score: 99.77804565429688
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = node . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 705
score: 99.7717725409836
patch: try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 705
score: 99.75945658623418
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; }
rank: 705
score: 99.75112575954861
patch: case Token . BLOCK : case Token . BREAK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 705
score: 99.7335265112705
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ;
rank: 706
score: 99.78630719866071
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 706
score: 99.78428248355263
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . BLOCK ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else
rank: 706
score: 99.77804565429688
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( node ) ) ) ;
rank: 706
score: 99.77171266233766
patch: case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , node ) ;
rank: 706
score: 99.76553005642361
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , compute CaMeL Following ( n ) ) ;
rank: 706
score: 99.75944496268657
patch: case Token . BLOCK : case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 706
score: 99.73338216145834
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 706
score: 99.69635184151785
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) || n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 707
score: 99.80954678087349
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) . get CaMeL Value ( ) ) ; }
rank: 707
score: 99.78621179917279
patch: case Token . BLOCK : { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 707
score: 99.78424599729938
patch: case BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 707
score: 99.77169841609589
patch: case Token . BLOCK : { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 707
score: 99.76552083333333
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 707
score: 99.75104215251865
patch: case Di CaMeL Graph CaMeL Node . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 707
score: 99.73328218005952
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 707
score: 99.6963249655331
patch: case Token . BLOCK : case Token . CONTINUE : case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 708
score: 99.7862079326923
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n . get CaMeL First CaMeL Child ( ) ) ;
rank: 708
score: 99.77166263640873
patch: } case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) != null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 708
score: 99.76545061383929
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( this ) ) ;
rank: 708
score: 99.7332763671875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } / /
rank: 709
score: 99.80952489098837
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; }
rank: 709
score: 99.7861328125
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , ) ) ;
rank: 709
score: 99.78419253700658
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . RETURN ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 709
score: 99.77790335323034
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n . get CaMeL First CaMeL Child ( ) ) ) ; }
rank: 709
score: 99.77163613809121
patch: case Token . BLOCK : return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 709
score: 99.76544024493244
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { break ; } case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 709
score: 99.75937352035984
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 709
score: 99.7509765625
patch: case Token . BLOCK : case Token . RETURN : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 709
score: 99.73322405133929
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { break ; } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 710
score: 99.80943231997283
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; }
rank: 710
score: 99.78611924913194
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 710
score: 99.78417228929925
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 710
score: 99.77782552083333
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return first ; }
rank: 710
score: 99.77160974451013
patch: case Token . BLOCK : Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 710
score: 99.75936848958334
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , false ) ) ; }
rank: 710
score: 99.75093470982142
patch: case Token . BLOCK : case Token . CONTINUE : case Token . CONTINUE : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 710
score: 99.73319498697917
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { try { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 710
score: 99.69621725643383
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) ) ;
rank: 711
score: 99.80934581537356
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 711
score: 99.78601866883118
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n . get CaMeL First CaMeL Child ( ) ) ) ; }
rank: 711
score: 99.77781032986111
patch: case Node . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally {
rank: 711
score: 99.7714709974315
patch: case Token . BLOCK : if ( node . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 711
score: 99.76541095890411
patch: case Exception . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; }
rank: 711
score: 99.73319437966418
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 711
score: 99.6962016091418
patch: case Token . FUNCTION : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 712
score: 99.80925186820652
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ) ; }
rank: 712
score: 99.78601655505952
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 712
score: 99.77778876582279
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( first . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 712
score: 99.7653610641892
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 712
score: 99.75934810914855
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; }
rank: 712
score: 99.75090258049242
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . RETURN ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 712
score: 99.73313551682692
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) != null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 712
score: 99.69619432136194
patch: case Token . CONTINUE : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 713
score: 99.80924849076705
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) . get CaMeL Value ( ) ) ;
rank: 713
score: 99.78599789268092
patch: try { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 713
score: 99.78405083550348
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 713
score: 99.77138020833333
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 713
score: 99.76533069349315
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ;
rank: 713
score: 99.75934392755681
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . BLOCK ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; }
rank: 713
score: 99.75073939732142
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 713
score: 99.73312150186567
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 713
score: 99.69605585354478
patch: case Token . BREAK : case Token . BREAK : case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 714
score: 99.78598705690298
patch: case Token . BLOCK : while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 714
score: 99.7777683423913
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( this ) ) ; }
rank: 714
score: 99.77136811755952
patch: case Token . BLOCK : { Token first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 714
score: 99.76528113996478
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , first ) ;
rank: 714
score: 99.75933672930744
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ) ;
rank: 714
score: 99.75072180706522
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , ) ; }
rank: 714
score: 99.73308841765873
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; } }
rank: 714
score: 99.69601702008929
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 715
score: 99.80917440878379
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , true ) ) ; } }
rank: 715
score: 99.78596754807693
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return n . get CaMeL First CaMeL Child ( ) ;
rank: 715
score: 99.78393898547536
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 715
score: 99.777734375
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( this ) ) ) ;
rank: 715
score: 99.75070057744566
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 715
score: 99.69596121651786
patch: case Di CaMeL Graph CaMeL Edge . CONTINUE : case Di CaMeL Graph CaMeL Edge . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 716
score: 99.80914984809027
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 716
score: 99.77771935096153
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 716
score: 99.77130621832771
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 716
score: 99.75927734375
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; }
rank: 716
score: 99.7506298120471
patch: case Token . BLOCK : case Token . BREAK : case Token . BREAK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 716
score: 99.7329326923077
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; }
rank: 717
score: 99.8091351052989
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent CaMeL Node ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 717
score: 99.78589231576493
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 717
score: 99.78390370244566
patch: case BREAK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 717
score: 99.77761557667526
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 717
score: 99.77130126953125
patch: case Token . BLOCK : else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 717
score: 99.75927108373398
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ;
rank: 717
score: 99.75061598557693
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 717
score: 99.69591567095588
patch: switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 718
score: 99.78587805706522
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; final Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 718
score: 99.78386262175324
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 718
score: 99.77759356831395
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , null ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 718
score: 99.77126736111111
patch: case Token . BLOCK : } Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 718
score: 99.76509164663462
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) || n . get CaMeL Type ( ) == Token . FUNCTION ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 718
score: 99.7506103515625
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 718
score: 99.73278387661638
patch: case Token . BLOCK : case Token . CONTINUE : case Token . CONTINUE : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 718
score: 99.69580078125
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 719
score: 99.80909830729166
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } break ;
rank: 719
score: 99.78584248310811
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 719
score: 99.77758514747191
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . has CaMeL Children ( ) ) ) ) ;
rank: 719
score: 99.77124974634741
patch: } if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ;
rank: 719
score: 99.75922037760417
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 719
score: 99.69577287946429
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 720
score: 99.80909812843407
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( ) ) ; }
rank: 720
score: 99.78584120008681
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 720
score: 99.78365071614583
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else
rank: 720
score: 99.77122395833334
patch: } else { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 720
score: 99.76503356073944
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 720
score: 99.75921795819256
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 720
score: 99.7505108173077
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 720
score: 99.7324462890625
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 720
score: 99.695703125
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else {
rank: 721
score: 99.80906982421875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 721
score: 99.78581468986742
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return n . get CaMeL First CaMeL Child ( ) ; } }
rank: 721
score: 99.7834973457532
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n . get CaMeL Next ( ) ) ) ;
rank: 721
score: 99.77113678495763
patch: try { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 721
score: 99.76501134923987
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 721
score: 99.75921103395062
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n . get CaMeL First CaMeL Child ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 721
score: 99.7504104393116
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Value ( ) ) ;
rank: 721
score: 99.73242975050404
patch: case String . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 721
score: 99.69567153033088
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) . get CaMeL Value ( ) ; }
rank: 722
score: 99.80906519396552
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ) ) ;
rank: 722
score: 99.78579477163461
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 722
score: 99.78348214285714
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { break ;
rank: 722
score: 99.77756958007812
patch: if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 722
score: 99.77113172743056
patch: Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 722
score: 99.76498592601104
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , first ) ;
rank: 722
score: 99.75920758928571
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( first != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 722
score: 99.75037977430556
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ) ; }
rank: 722
score: 99.73232421875
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 722
score: 99.69566689768145
patch: case Token . RETURN : case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 723
score: 99.7834670608108
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else ) ;
rank: 723
score: 99.7775634765625
patch: case Token . BLOCK : while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( first . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 723
score: 99.77113172743056
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 723
score: 99.76492267765411
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , true ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 723
score: 99.75917271205357
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . has CaMeL Children ( ) ) ) ) ;
rank: 723
score: 99.75034112799658
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , null ) ) ; }
rank: 723
score: 99.73227163461539
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 723
score: 99.69566345214844
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 724
score: 99.77754516601563
patch: } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 724
score: 99.77112688337054
patch: } if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 724
score: 99.76480887276786
patch: case BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 724
score: 99.75024070202464
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ) ;
rank: 724
score: 99.73224361359127
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 724
score: 99.69559363162878
patch: case Di CaMeL Graph CaMeL Node . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 725
score: 99.78574505974265
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 725
score: 99.77752685546875
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , ) ) ) ;
rank: 725
score: 99.7711245888158
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 725
score: 99.76479973591549
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 725
score: 99.7502052196558
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } if ( n . has CaMeL Children ( ) ) { break ; }
rank: 725
score: 99.73220732717803
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ) ;
rank: 725
score: 99.69557542067308
patch: case Token . BREAK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL Destination ( ) . get CaMeL Value ( ) ;
rank: 726
score: 99.80895841574367
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 726
score: 99.7857196514423
patch: if ( n . has CaMeL Children ( ) ) { Node first = first . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 726
score: 99.78336588541667
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 726
score: 99.76477581521739
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 726
score: 99.75015304337687
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 726
score: 99.7319756869612
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) ) { break ; }
rank: 726
score: 99.69553444602273
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return n ; }
rank: 727
score: 99.80894949776786
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { n . has CaMeL Children ( ) ; } }
rank: 727
score: 99.77105629280823
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ;
rank: 727
score: 99.76463524070945
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 727
score: 99.7589655496988
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) == null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; }
rank: 727
score: 99.75006009615385
patch: case Token . BLOCK : case Token . CONTINUE : case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 727
score: 99.73192517510776
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } : { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 728
score: 99.77746035447761
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 728
score: 99.77101210297131
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 728
score: 99.76456148330479
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } case Token . RETURN :
rank: 728
score: 99.75002712673611
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , false ) ;
rank: 728
score: 99.73190048993644
patch: case ? Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 728
score: 99.69520733173077
patch: case Di CaMeL Graph CaMeL Edge . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL Destination ( ) . get CaMeL Value ( ) ; }
rank: 729
score: 99.80862379807692
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return first ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 729
score: 99.7774534761236
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; } }
rank: 729
score: 99.76452135059931
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; break ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 729
score: 99.73188219572368
patch: case String . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 729
score: 99.69516170726104
patch: case Di CaMeL Graph CaMeL Node . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n ; }
rank: 730
score: 99.783251953125
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n . get CaMeL Next ( ) ) ) ;
rank: 730
score: 99.77095227363782
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 730
score: 99.76442770761986
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , this ) ; }
rank: 730
score: 99.75893985523896
patch: case Token . BLOCK : case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) != null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 730
score: 99.74998474121094
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 730
score: 99.73184833829364
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 731
score: 99.80855520148026
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ;
rank: 731
score: 99.78324685167911
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . BLOCK ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 731
score: 99.77736475134408
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { n . has CaMeL Children ( ) ;
rank: 731
score: 99.77066634537337
patch: case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , first ) ;
rank: 731
score: 99.76440764126713
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , 0 ) ; }
rank: 731
score: 99.75891676682693
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first , n ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } }
rank: 731
score: 99.73159427966101
patch: case Token . BLOCK : if ( ! n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 731
score: 99.69508463541666
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 732
score: 99.80852508544922
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { n . get CaMeL First CaMeL Child ( ) ; }
rank: 732
score: 99.78543429904514
patch: case Token . BLOCK : ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 732
score: 99.78321792140152
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 732
score: 99.7773046875
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( parent ) ) ) ;
rank: 732
score: 99.77065558182566
patch: case Token . BLOCK : { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 732
score: 99.76436750856165
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) || n . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ;
rank: 732
score: 99.75888511782787
patch: case Token . Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 732
score: 99.74985943418561
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 732
score: 99.73156550480769
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ? try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) : try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 732
score: 99.69504681755515
patch: case Token . FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ;
rank: 733
score: 99.80849821671195
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 733
score: 99.78538111636513
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 733
score: 99.78319702148437
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 733
score: 99.77058531746032
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 733
score: 99.76432511613176
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n , n ) ;
rank: 733
score: 99.7314224243164
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 733
score: 99.69496783088235
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ;
rank: 734
score: 99.78534294577206
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 734
score: 99.78317775974025
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } } }
rank: 734
score: 99.77711022418478
patch: if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; }
rank: 734
score: 99.77056995738636
patch: } if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 734
score: 99.7588641826923
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 734
score: 99.74982048483456
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { break ; } if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 734
score: 99.73134428879311
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL Out CaMeL Edges ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 734
score: 99.69477771577381
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; }
rank: 735
score: 99.78314605316558
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } }
rank: 735
score: 99.77709692651099
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } } finally {
rank: 735
score: 99.76423688616072
patch: case BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , first ) ;
rank: 735
score: 99.75882118626645
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ) ;
rank: 735
score: 99.74978298611111
patch: case Type . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 735
score: 99.69471490205224
patch: case Token . RETURN : case Token . BREAK : case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 736
score: 99.78525982481061
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 736
score: 99.78312852647569
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 736
score: 99.77707741477273
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { }
rank: 736
score: 99.77044270833333
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 736
score: 99.7588126890121
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) == null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 736
score: 99.74975920376713
patch: case Token . BLOCK : if ( n . get CaMeL Next ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ) ;
rank: 736
score: 99.73125
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } ; }
rank: 736
score: 99.69462744869404
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; }
rank: 737
score: 99.80829326923077
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) . get CaMeL Parent ( ) ) ;
rank: 737
score: 99.78305136190879
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 737
score: 99.77703125
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 737
score: 99.77044182854729
patch: } try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 737
score: 99.75880833675987
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL Parent ( ) ) ) ;
rank: 737
score: 99.74973913741438
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 737
score: 99.73121358580508
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 737
score: 99.69438171386719
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 738
score: 99.78520726445896
patch: case Token . BLOCK : { if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 738
score: 99.77032955109127
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 738
score: 99.76416015625
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) != Token . FUNCTION ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 738
score: 99.7587658110119
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 738
score: 99.74964289878731
patch: case Token . BLOCK : if ( n . get CaMeL Next ( ) != null ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 738
score: 99.6943359375
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 739
score: 99.7829059103261
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL Parent ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 739
score: 99.77021985176282
patch: } if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 739
score: 99.76409590871711
patch: case Exception . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ;
rank: 739
score: 99.75869605654762
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { n . get CaMeL First CaMeL Child ( ) . set CaMeL Parent ( first ) ; }
rank: 739
score: 99.69430721507354
patch: case Token . RETURN : case Token . CONTINUE : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 740
score: 99.77702158505154
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Node . ) ) ;
rank: 740
score: 99.7699966430664
patch: } case Token . BLOCK : { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 740
score: 99.7640872784515
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } if ( n . has CaMeL Children ( ) ) {
rank: 740
score: 99.75868055555556
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first , n ) ) ;
rank: 740
score: 99.74953922755282
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == Branch . BLOCK ) ;
rank: 740
score: 99.73111478365385
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 740
score: 99.69421968005952
patch: case Token . BLOCK : case Token . CONTINUE : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ) ;
rank: 741
score: 99.80816449175825
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 741
score: 99.78282487896126
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 741
score: 99.76997994087837
patch: } case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; }
rank: 741
score: 99.76406715029762
patch: case Token . BLOCK : case Token . FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 741
score: 99.75863610692771
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ;
rank: 741
score: 99.74951171875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ) ; }
rank: 741
score: 99.7310810391865
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 741
score: 99.69416103078358
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 742
score: 99.80813083400975
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return null ; }
rank: 742
score: 99.78279976222827
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 742
score: 99.77694873595506
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first , n ) ) ;
rank: 742
score: 99.76403645833334
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 742
score: 99.75861628605769
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; }
rank: 742
score: 99.7494983411815
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 742
score: 99.7310546875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 742
score: 99.69408439867425
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 743
score: 99.80811149691358
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 743
score: 99.78277946920956
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . RETURN ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 743
score: 99.77694561298077
patch: while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 743
score: 99.76985677083333
patch: } try { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 743
score: 99.76401654411765
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 743
score: 99.74949165239725
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == Branch . UNCOND ) ; }
rank: 744
score: 99.80809868706598
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 744
score: 99.78487830528846
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 744
score: 99.77694038722827
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ) ;
rank: 744
score: 99.7585220336914
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n , n ) ; }
rank: 744
score: 99.74949165239725
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 744
score: 99.73084161931818
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 745
score: 99.80801741803279
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { Node first = n . get CaMeL First CaMeL Child ( ) ; break ; }
rank: 745
score: 99.78471169542911
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 745
score: 99.78275730298913
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 745
score: 99.77692522321429
patch: case Node . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { }
rank: 745
score: 99.76972198486328
patch: case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 745
score: 99.76390316611842
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , g CaMeL Node , n ) ;
rank: 745
score: 99.75851779513889
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . BLOCK ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 745
score: 99.74945162259615
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 745
score: 99.73080494364754
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { break ; } case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 745
score: 99.69389204545455
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) ) {
rank: 746
score: 99.80798055959302
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } break ;
rank: 746
score: 99.78468983208955
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 746
score: 99.78268185177365
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n . get CaMeL Destination ( ) . get CaMeL Value ( ) == Branch . UNCOND ) ;
rank: 746
score: 99.77690529336735
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ) ; }
rank: 746
score: 99.7696449593322
patch: } if ( n . get CaMeL First CaMeL Child ( ) != null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 746
score: 99.76388704978814
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } switch ( n . get CaMeL Type ( ) ) { case Token . CONTINUE :
rank: 746
score: 99.75851710838607
patch: case Type . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; }
rank: 746
score: 99.74943991268383
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 746
score: 99.69386291503906
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 747
score: 99.80793913118131
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( node ) ) ;
rank: 747
score: 99.77686656605114
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( parent ) ) ; }
rank: 747
score: 99.76963271103897
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; }
rank: 747
score: 99.76385498046875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , compute CaMeL Following ( n ) ) ;
rank: 747
score: 99.75848911830357
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) , n ) ) ;
rank: 747
score: 99.73072160993304
patch: case null : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 747
score: 99.69376373291016
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL Destination ( ) . get CaMeL Value ( ) ;
rank: 748
score: 99.8079144021739
patch: case Token . BLOCK : if ( n ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 748
score: 99.78465221774194
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( first . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 748
score: 99.78255915987319
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 748
score: 99.77684326171875
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 748
score: 99.76961477179276
patch: case Token . BLOCK : Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 748
score: 99.75847138554217
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; }
rank: 748
score: 99.73064701140873
patch: case Type . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 749
score: 99.78464226973684
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( first . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 749
score: 99.77679036458333
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 749
score: 99.76959144905823
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 749
score: 99.74934895833333
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ) ;
rank: 749
score: 99.7306392609127
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else if ( n . has CaMeL Children ( ) ) { break ; }
rank: 750
score: 99.80779209421642
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { n . has CaMeL Children ( ) ; } } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 750
score: 99.78460015190973
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 750
score: 99.782470703125
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n . get CaMeL Next ( ) ) ) ;
rank: 750
score: 99.77678414676966
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , false ) ) ;
rank: 750
score: 99.76958403716216
patch: case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; }
rank: 750
score: 99.76379743303572
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 750
score: 99.74915052440069
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 750
score: 99.730517578125
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 751
score: 99.78454219933712
patch: if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 751
score: 99.78241131756756
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 751
score: 99.76956469392124
patch: } case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , node ) ) ;
rank: 751
score: 99.76372419084821
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 751
score: 99.75833019578313
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Source ( ) . get CaMeL Value ( ) ) ; }
rank: 751
score: 99.73050812752017
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ;
rank: 752
score: 99.80769486860795
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 752
score: 99.7844974578373
patch: case Token . BLOCK : { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 752
score: 99.78232709099265
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 752
score: 99.77669949001736
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 752
score: 99.7695122260552
patch: case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 752
score: 99.75829399956598
patch: case Token . BLOCK : case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) != null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 752
score: 99.6936271421371
patch: case Token . BLOCK : case Token . CONTINUE : case Token . CONTINUE : case Token . CONTINUE : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 753
score: 99.78443122632575
patch: if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 753
score: 99.78232284330986
patch: case RETURN : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 753
score: 99.76947521772541
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 753
score: 99.76362537202381
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 753
score: 99.74906589673913
patch: case Token . BLOCK : case Token . RETURN : case Token . BREAK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 753
score: 99.73041449652777
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 753
score: 99.69355799788136
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 754
score: 99.807568359375
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { n . get CaMeL First CaMeL Child ( ) . pop ( ) ; }
rank: 754
score: 99.78440663512323
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 754
score: 99.78221420094937
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n . get CaMeL Next ( ) ) ) ; }
rank: 754
score: 99.7694156044408
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) != null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 754
score: 99.7635013640873
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } case Token . CONTINUE :
rank: 754
score: 99.75827696265245
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . BLOCK ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ;
rank: 754
score: 99.73039124503968
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; } }
rank: 754
score: 99.69353926809211
patch: case Token . BLOCK : case Token . BREAK : case Token . CONTINUE : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 755
score: 99.78435459421642
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 755
score: 99.78219117980072
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 755
score: 99.77660858497191
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Node . BLOCK ) ) ;
rank: 755
score: 99.76936848958333
patch: case Token . BLOCK : try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 755
score: 99.76322732042911
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Branch : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 755
score: 99.74896323844177
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 755
score: 99.73037269467213
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ;
rank: 755
score: 99.69347944415983
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ;
rank: 756
score: 99.80729502255154
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 756
score: 99.7843081825658
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Name ( ) ) ;
rank: 756
score: 99.78211263020833
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 756
score: 99.7765877016129
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 756
score: 99.76926369863014
patch: } else { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ;
rank: 756
score: 99.76321614583334
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . RETURN ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 756
score: 99.75823317307692
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { n . has CaMeL Children ( ) ; }
rank: 756
score: 99.74895654965754
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; }
rank: 756
score: 99.69345411613806
patch: case Token . BLOCK : case Token . BREAK : case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 757
score: 99.78200011322464
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 757
score: 99.7691138482863
patch: } else { } Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 757
score: 99.76314233054578
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( false ) ; }
rank: 757
score: 99.69344742571721
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL Destination ( ) . get CaMeL Value ( ) ; }
rank: 758
score: 99.80723314606742
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ;
rank: 758
score: 99.78194754464286
patch: case Token . RETURN : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 758
score: 99.7764918550532
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { n . has CaMeL Children ( ) ; }
rank: 758
score: 99.76909647902397
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 758
score: 99.75819875233209
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) != null && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 758
score: 99.74886290667808
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL Next ( ) . get CaMeL Value ( ) ) . get CaMeL Value ( ) ) ;
rank: 758
score: 99.73012115995763
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { final Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 759
score: 99.80718809185606
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { if ( n . has CaMeL Children ( ) ) { n . has CaMeL Children ( ) ; } }
rank: 759
score: 99.78418666294642
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } } else { return n . get CaMeL First CaMeL Child ( ) ;
rank: 759
score: 99.77647569444444
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 759
score: 99.76909505208333
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) != null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; }
rank: 759
score: 99.75818058894231
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) ; }
rank: 759
score: 99.73009072580645
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } case Token . RETURN : if ( n . has CaMeL Children ( ) ) { break ; }
rank: 759
score: 99.6933361235119
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 760
score: 99.80718568313954
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; }
rank: 760
score: 99.78190516218355
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n . get CaMeL Next ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 760
score: 99.77642331178161
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 760
score: 99.76292852145522
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { remove CaMeL Dead CaMeL Expr CaMeL Statement CaMeL Safely ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 760
score: 99.75815862341773
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) , n ) ; }
rank: 760
score: 99.74885581856343
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , g CaMeL Node ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 760
score: 99.69329316737289
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ;
rank: 761
score: 99.80712329382185
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) . get CaMeL Value ( ) ) ; }
rank: 761
score: 99.78414481026786
patch: case Token . BLOCK : if ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 761
score: 99.77641701211735
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally {
rank: 761
score: 99.76281408361487
patch: case Type . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , cur CaMeL Cfg ) ;
rank: 761
score: 99.72998046875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( first != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 762
score: 99.80709464089912
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return first . get CaMeL First CaMeL Child ( ) ; }
rank: 762
score: 99.78410788143383
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 762
score: 99.7763671875
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( parent ) ) ;
rank: 762
score: 99.76895601455479
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = first . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 762
score: 99.76278097587719
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , first ) ;
rank: 762
score: 99.758056640625
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL First CaMeL Child ( ) , n ) ; }
rank: 762
score: 99.7487002090669
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 762
score: 99.69319411057693
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 763
score: 99.80707925052967
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { Node first = n . get CaMeL First CaMeL Child ( ) ; }
rank: 763
score: 99.78408494636194
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( first . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 763
score: 99.78169582201087
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 763
score: 99.7763671875
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 763
score: 99.76888243792808
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 763
score: 99.7627681902985
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , first ) ;
rank: 763
score: 99.75805276537699
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node < Node > n = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 763
score: 99.74845499067165
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . BLOCK ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 763
score: 99.69310735887096
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) . get CaMeL Value ( ) ;
rank: 764
score: 99.80705015120968
patch: case Token . BLOCK : if ( n ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 764
score: 99.77635596264368
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; }
rank: 764
score: 99.76885579427083
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 764
score: 99.76267344916045
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 764
score: 99.75799479166666
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , true ) ) ; }
rank: 764
score: 99.74842664930556
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 764
score: 99.72950032552083
patch: case Token . BREAK : if ( n . get CaMeL Parent ( ) == null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 765
score: 99.80695258246527
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 765
score: 99.78381529850746
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n , first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 765
score: 99.78166950924296
patch: case BREAK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 765
score: 99.77633426966293
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else
rank: 765
score: 99.76882223886986
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 765
score: 99.75796072823661
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } finally { n . has CaMeL Children ( ) ; }
rank: 765
score: 99.74841657366072
patch: case Token . BLOCK : case Token . RETURN : case Token . CONTINUE : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 765
score: 99.72947474888393
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL Destination ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 765
score: 99.69309645432692
patch: case Token . BLOCK : case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 766
score: 99.78164527529762
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 766
score: 99.768798828125
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) != null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 766
score: 99.74837472098214
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Value ( ) ) ;
rank: 766
score: 99.72944568452381
patch: case Object . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 766
score: 99.69308035714286
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n ;
rank: 767
score: 99.80694110576923
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 767
score: 99.7837788596082
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = first . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 767
score: 99.77632279829545
patch: case Token . BLOCK : while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( first . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 767
score: 99.76876280737704
patch: } try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 767
score: 99.76251502403846
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . has CaMeL Next ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 767
score: 99.72935384114584
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 767
score: 99.69307084517045
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ) ;
rank: 768
score: 99.80689817994505
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 768
score: 99.7837788596082
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 768
score: 99.78144677005596
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Branch . UNCOND ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 768
score: 99.77629813762626
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( ) ) ;
rank: 768
score: 99.76875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 768
score: 99.74827008928571
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 768
score: 99.729248046875
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 768
score: 99.69306786380596
patch: case Token . RETURN : case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 769
score: 99.806884765625
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 769
score: 99.76874457465277
patch: case Token . BLOCK : { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; }
rank: 769
score: 99.75785006009616
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 769
score: 99.74826006822182
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else if ( n . has CaMeL Children ( ) ) { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ;
rank: 769
score: 99.72921549479166
patch: case Node . BLOCK : if ( n . get CaMeL Parent ( ) != null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 769
score: 99.69301684934702
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL Out CaMeL Edges ( ) ; }
rank: 770
score: 99.80676409841954
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 770
score: 99.7762451171875
patch: } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ;
rank: 770
score: 99.76863606770833
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 770
score: 99.75785006009616
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = node . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 770
score: 99.72900390625
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 770
score: 99.6930160522461
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else {
rank: 771
score: 99.78362482244319
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; }
rank: 771
score: 99.78133764022436
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n . get CaMeL Next ( ) ) ;
rank: 771
score: 99.76863344254032
patch: } else { } case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 771
score: 99.75784893889926
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 771
score: 99.72897240423387
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 771
score: 99.69300227378731
patch: case Token . BLOCK : case Token . RETURN : case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 772
score: 99.78353078741776
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { n . has CaMeL Children ( ) ;
rank: 772
score: 99.78095703125
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 772
score: 99.76851593501983
patch: case Token . BLOCK : else Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 772
score: 99.76157299440298
patch: case Token . BLOCK : case Token . FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 772
score: 99.74793419471153
patch: case Type . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 772
score: 99.72893986936475
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { break ; } case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 773
score: 99.80671830610795
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ;
rank: 773
score: 99.78351530481558
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( first . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 773
score: 99.77621694711539
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 773
score: 99.76851509712837
patch: } try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ;
rank: 773
score: 99.74793365036231
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 773
score: 99.72888849431818
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 773
score: 99.692626953125
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n ; }
rank: 774
score: 99.783447265625
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , first ) ) ;
rank: 774
score: 99.78082431891026
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { break ; }
rank: 774
score: 99.77619956856343
patch: } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return n . get CaMeL First CaMeL Child ( ) ; }
rank: 774
score: 99.76846474095395
patch: } if ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 774
score: 99.7578322951858
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { n . get CaMeL First CaMeL Child ( ) . get CaMeL Parent ( ) . get CaMeL Parent ( ) . get CaMeL Parent ( ) ; }
rank: 774
score: 99.7479053442029
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) || n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ;
rank: 774
score: 99.69254557291667
patch: case Token . BREAK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL Destination ( ) . get CaMeL Value ( ) ; }
rank: 775
score: 99.78336827895221
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 775
score: 99.76842840786638
patch: Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 775
score: 99.76133817784927
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 775
score: 99.75781901041667
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n , n ) ) ; }
rank: 775
score: 99.74784712357955
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { try { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 775
score: 99.72882486979167
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , node ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 775
score: 99.69251457093254
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ;
rank: 776
score: 99.80655477335165
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( ) ) ; }
rank: 776
score: 99.78012084960938
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 776
score: 99.77618767233456
patch: if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 776
score: 99.76840049342105
patch: case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 776
score: 99.76133122519842
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 776
score: 99.747802734375
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ;
rank: 776
score: 99.72882080078125
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } }
rank: 776
score: 99.6923828125
patch: case Token . FUNCTION : case Token . CONTINUE : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 777
score: 99.7761466733871
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n . get CaMeL First CaMeL Child ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 777
score: 99.76834733518835
patch: } case Token . BLOCK : { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 777
score: 99.76120442708333
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 777
score: 99.74772135416667
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 777
score: 99.72881980020492
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 777
score: 99.69235079405738
patch: try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 778
score: 99.78332331730769
patch: if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 778
score: 99.77612982855902
patch: try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 778
score: 99.76833123675847
patch: } Token first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 778
score: 99.76115148207721
patch: case Type . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else if ( n . has CaMeL Children ( ) ) {
rank: 778
score: 99.74764675564236
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 778
score: 99.72879914314517
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { break ; } case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 779
score: 99.80650111607143
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 779
score: 99.78003717237904
patch: case BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 779
score: 99.77608345650337
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n . get CaMeL First CaMeL Child ( ) ) ;
rank: 779
score: 99.76822649846312
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 779
score: 99.72879126764113
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } case Token . RETURN : if ( n . has CaMeL Children ( ) ) { break ; }
rank: 779
score: 99.6917495727539
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; }
rank: 780
score: 99.78321140095339
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 780
score: 99.780029296875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 780
score: 99.76820248463115
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else {
rank: 780
score: 99.76112489442568
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } }
rank: 780
score: 99.75760967548077
patch: case Token . BLOCK : case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) != null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 780
score: 99.74755181206598
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 780
score: 99.69173677884615
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else {
rank: 781
score: 99.7830746299342
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n . get CaMeL First CaMeL Child ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 781
score: 99.77974207261029
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 781
score: 99.76819661458333
patch: } else { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 781
score: 99.75760853441456
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Source ( ) , n ) ; }
rank: 781
score: 99.74752371651786
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 781
score: 99.72859191894531
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 781
score: 99.69165426587301
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ) ;
rank: 782
score: 99.78298770680146
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; }
rank: 782
score: 99.77598741319444
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , ) ) ;
rank: 782
score: 99.76819241431451
patch: case Token . BLOCK : Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 782
score: 99.76108530405405
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; }
rank: 782
score: 99.7575946514423
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 782
score: 99.74752160274622
patch: case Token . BLOCK : if ( n . get CaMeL Next ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 782
score: 99.728466796875
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 782
score: 99.6916289747807
patch: case Token . BLOCK : case Token . CONTINUE : case Token . BREAK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 783
score: 99.80639080668605
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , false ) ) ; }
rank: 783
score: 99.78298611111111
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 783
score: 99.76819054555085
patch: case Token . BLOCK : while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 783
score: 99.75758056640625
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) , ) ) ; }
rank: 783
score: 99.72844587053571
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ;
rank: 784
score: 99.77591145833334
patch: case Token . BLOCK : { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 784
score: 99.7681372857863
patch: case Token . BLOCK : Node first = first . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 784
score: 99.74740998641305
patch: case Token . BLOCK : case Token . CONTINUE : case Token . RETURN : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 784
score: 99.72838320974576
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } ;
rank: 784
score: 99.69136687247983
patch: case Token . BREAK : case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 785
score: 99.8063252766927
patch: case Token . BLOCK : if ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 785
score: 99.78293744255515
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 785
score: 99.77588451867815
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { }
rank: 785
score: 99.76807428175404
patch: Node first = Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 785
score: 99.75754494863014
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; }
rank: 785
score: 99.74739826259328
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 785
score: 99.72822265625
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( g CaMeL Node ) ; }
rank: 785
score: 99.69102822580645
patch: case Di CaMeL Graph CaMeL Node . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 786
score: 99.80616273271276
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 786
score: 99.7829353578629
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 786
score: 99.77947443181819
patch: case Token . RETURN : if ( n . get CaMeL Type ( ) == Token . RETURN ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 786
score: 99.77586873372395
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ) ;
rank: 786
score: 99.7680283583604
patch: } case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Node ( ) ) ;
rank: 786
score: 99.7608249470339
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } switch ( n . get CaMeL Type ( ) ) { case Token . FUNCTION :
rank: 786
score: 99.72818509615385
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; } }
rank: 787
score: 99.78292686060855
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Type ( ) ) ;
rank: 787
score: 99.77942288306451
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 787
score: 99.77581787109375
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( node ) ) ; }
rank: 787
score: 99.76798722550676
patch: } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 787
score: 99.75748197115385
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally {
rank: 787
score: 99.74734317555146
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { try { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 787
score: 99.69072265625
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) || n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 788
score: 99.80604727056962
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; }
rank: 788
score: 99.78286280776516
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = first . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 788
score: 99.77934265136719
patch: case Token . RETURN : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 788
score: 99.77563202247191
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return n ; }
rank: 788
score: 99.76789030481558
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 788
score: 99.76067620354729
patch: case Token . BLOCK : if ( n != null || n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 788
score: 99.75745799443493
patch: case Token . BLOCK : case Token . BLOCK : case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 788
score: 99.72813197544643
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL Next ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 788
score: 99.69049169146825
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 789
score: 99.78277480811404
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 789
score: 99.77933175223214
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Following ( n ) ) ;
rank: 789
score: 99.76788884943181
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 789
score: 99.74722110523896
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) != null ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 789
score: 99.69048481602823
patch: case Token . BREAK : case Token . FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 790
score: 99.80596301020408
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; }
rank: 790
score: 99.78271484375
patch: try { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 790
score: 99.7793114505597
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 790
score: 99.76788824957771
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } }
rank: 790
score: 99.75731833584338
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ) ) ;
rank: 790
score: 99.74715047807835
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 790
score: 99.7281024639423
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; } }
rank: 791
score: 99.78267609126983
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 791
score: 99.76781901041667
patch: } try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 791
score: 99.76052444045608
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) != null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 791
score: 99.75731795873398
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; }
rank: 791
score: 99.74712533010563
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Value ( ) ) ; }
rank: 791
score: 99.72801184275794
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 791
score: 99.69034576416016
patch: case Di CaMeL Graph CaMeL Edge . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL Destination ( ) . get CaMeL Value ( ) ;
rank: 792
score: 99.78248549952652
patch: if ( n . has CaMeL Children ( ) ) { Node first = first . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 792
score: 99.77926856884058
patch: case BLOCK : if ( n . has CaMeL Children ( ) ) { final Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 792
score: 99.76774088541667
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } } else { return n ; }
rank: 792
score: 99.75730543870192
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 792
score: 99.74708406690141
patch: case Token . BLOCK : case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 792
score: 99.7279052734375
patch: case Branch : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 792
score: 99.69019294507575
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ) ;
rank: 793
score: 99.8058345734127
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } } return n ;
rank: 793
score: 99.78244544719827
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 793
score: 99.77922712053571
patch: case Token . BREAK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 793
score: 99.76770988343254
patch: case Token . BLOCK : try { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 793
score: 99.76046592310855
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else return n ; }
rank: 793
score: 99.75727282072368
patch: case Token . BLOCK : case Token . BLOCK : if ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 793
score: 99.74707738903986
patch: case Token . BREAK : case Token . CONTINUE : case Token . CONTINUE : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 793
score: 99.72785897090517
patch: case Branch . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 793
score: 99.68990885416666
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) ) {
rank: 794
score: 99.80578476123596
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Node ( ) ) ;
rank: 794
score: 99.78233816964286
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 794
score: 99.77914826766305
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 794
score: 99.77547433035714
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 794
score: 99.76767578125
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; }
rank: 794
score: 99.75725686961206
patch: case Type . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 794
score: 99.7470703125
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 794
score: 99.7278252963362
patch: case Style . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 794
score: 99.68986265120968
patch: case Token . BLOCK : case Token . BREAK : case Token . CONTINUE : case Token . CONTINUE : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 795
score: 99.80572845123626
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ;
rank: 795
score: 99.77913172104779
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) . get CaMeL Value ( ) , n . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 795
score: 99.77541257022472
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return null ; }
rank: 795
score: 99.76765422077922
patch: case Token . BLOCK : try { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; }
rank: 795
score: 99.76032552083333
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 795
score: 99.75723758820564
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return next ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 795
score: 99.74701286764706
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 795
score: 99.72778748629386
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { break ; } } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 795
score: 99.68980084043561
patch: case Di CaMeL Graph CaMeL Node . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 796
score: 99.80567691200658
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 796
score: 99.78220130657327
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 796
score: 99.77904211956522
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 796
score: 99.77538055734536
patch: case Token . BLOCK : { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 796
score: 99.76753315172698
patch: case Token . BLOCK : Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , node ) ;
rank: 796
score: 99.76018229166667
patch: case Token . BLOCK : case Token . FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 796
score: 99.75720052083334
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; }
rank: 796
score: 99.74699850643383
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ) ;
rank: 796
score: 99.72773742675781
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 796
score: 99.68972876764113
patch: case Token . BLOCK : case Token . CONTINUE : case Token . BREAK : case Token . CONTINUE : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 797
score: 99.8056003736413
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; }
rank: 797
score: 99.78197149020522
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 797
score: 99.77537977430555
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } } }
rank: 797
score: 99.76748206967213
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 797
score: 99.76017680921052
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , cur CaMeL Cfg , n ) ;
rank: 797
score: 99.75718206091773
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) || n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; }
rank: 797
score: 99.74695172991072
patch: case Token . BLOCK : case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; }
rank: 797
score: 99.7276761239035
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) ; }
rank: 798
score: 99.8055543363764
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) , n ) ; }
rank: 798
score: 99.78192047574628
patch: if ( ! n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 798
score: 99.77838541666667
patch: case BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 798
score: 99.77529994419643
patch: case Token . BLOCK : while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return n . get CaMeL First CaMeL Child ( ) ; }
rank: 798
score: 99.76740975215517
patch: } if ( n . get CaMeL First CaMeL Child ( ) == null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 798
score: 99.76012976694915
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; break ;
rank: 798
score: 99.74677276611328
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 798
score: 99.72765112704919
patch: case $STRING$ : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 798
score: 99.68961087740385
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return n ;
rank: 799
score: 99.78184586864407
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n , first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 799
score: 99.77525215718283
patch: } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 799
score: 99.76740284455128
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 799
score: 99.7467539612676
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 799
score: 99.72761615953948
patch: case Node . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 800
score: 99.80553528502747
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Last CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 800
score: 99.77830287388393
patch: case BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 800
score: 99.77524470186782
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; }
rank: 800
score: 99.75994140625
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; }
rank: 800
score: 99.75701983563312
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 800
score: 99.72754706711065
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { break ; } case Token . BREAK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 800
score: 99.68937174479167
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ) ;
rank: 801
score: 99.781787109375
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n , first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 801
score: 99.77829367897728
patch: case RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 801
score: 99.77515490301724
patch: case Token . BLOCK : { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( ) ) ;
rank: 801
score: 99.7673908390411
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; }
rank: 801
score: 99.75990295410156
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . get CaMeL Type ( ) == Token . FUNCTION ) if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 801
score: 99.75701349431819
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Source ( ) ) ; }
rank: 801
score: 99.74663304570896
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ) ; }
rank: 801
score: 99.72753092447917
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 802
score: 99.8053764447774
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; }
rank: 802
score: 99.78162167677239
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , first ) ) ;
rank: 802
score: 99.77824358258928
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 802
score: 99.77513825491573
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , parent ) ) ;
rank: 802
score: 99.7673780097336
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n ; } }
rank: 802
score: 99.75982987253289
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 802
score: 99.74650573730469
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) , n ) ;
rank: 802
score: 99.72747285487289
patch: case ? Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 802
score: 99.68909660218254
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ;
rank: 803
score: 99.78149049673507
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 803
score: 99.77508866159539
patch: } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( first . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 803
score: 99.7673576108871
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 803
score: 99.7597297219669
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } case Token . BREAK : case Token . CONTINUE :
rank: 803
score: 99.75699869791667
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , null ) ) ; }
rank: 803
score: 99.74642857142857
patch: case Token . BLOCK : case Token . CONTINUE : case Token . BREAK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 803
score: 99.7273193359375
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 804
score: 99.77786404969262
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . BLOCK ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 804
score: 99.77508859536083
patch: case Token . BLOCK : while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; }
rank: 804
score: 99.76734730113637
patch: } ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 804
score: 99.75972603462837
patch: case Token . BLOCK : if ( ! n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; }
rank: 804
score: 99.75699429898648
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , ) ) ; }
rank: 804
score: 99.74641676682693
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 804
score: 99.72722981770833
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; break ; }
rank: 805
score: 99.7813784950658
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = first . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 805
score: 99.77508171237245
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; }
rank: 805
score: 99.76734058277027
patch: case Token . BLOCK : { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 805
score: 99.7596499794408
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 805
score: 99.74636196082747
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ) ;
rank: 805
score: 99.72722981770833
patch: case Token . CONTINUE : if ( n . get CaMeL Parent ( ) != null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 806
score: 99.77738018889926
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 806
score: 99.77506846005154
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 806
score: 99.76715959821429
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 806
score: 99.75958806818181
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 806
score: 99.75696411132813
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 806
score: 99.72722457627118
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 806
score: 99.68843078613281
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 807
score: 99.78130425347223
patch: if ( n . has CaMeL Children ( ) ) { try { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 807
score: 99.77500406901042
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( ) ;
rank: 807
score: 99.76714922930744
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 807
score: 99.75696113782051
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) , n ) ) ) ;
rank: 807
score: 99.74623736213235
patch: case Token . BLOCK : case Token . BREAK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 807
score: 99.72715594951923
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ;
rank: 807
score: 99.68838641826923
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else {
rank: 808
score: 99.80507298519737
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 808
score: 99.78130326704546
patch: try { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 808
score: 99.76711659888699
patch: case Token . BLOCK : while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 808
score: 99.74617638221154
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) != null || n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 808
score: 99.68837890625
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 809
score: 99.80504200556507
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 809
score: 99.78129372667911
patch: if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 809
score: 99.77709585336538
patch: case Token . BREAK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 809
score: 99.77475992838542
patch: case Token . BLOCK : while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ) ;
rank: 809
score: 99.76704259072581
patch: } try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 809
score: 99.75691203327922
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , false ) ) ;
rank: 809
score: 99.72689924568965
patch: case Object . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 809
score: 99.68833480342742
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; }
rank: 810
score: 99.80501302083333
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 810
score: 99.75915197423987
patch: case Token . BLOCK : if ( n == null || n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 810
score: 99.7568299828506
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Source ( ) . get CaMeL Value ( ) ) ;
rank: 810
score: 99.74607252038044
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) || n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Value ( ) ) ;
rank: 810
score: 99.7268802703373
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else if ( n . has CaMeL Children ( ) ) { break ; }
rank: 810
score: 99.68823629712301
patch: case Token . BLOCK : case Token . CONTINUE : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ) ;
rank: 811
score: 99.78121356110074
patch: if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 811
score: 99.77705652573529
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 811
score: 99.7747290826613
patch: } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( this ) ) ) ;
rank: 811
score: 99.76700458829364
patch: try { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 811
score: 99.7591323852539
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } switch ( n . get CaMeL Type ( ) ) { case Token . RETURN : case Token . CONTINUE :
rank: 811
score: 99.74605887276786
patch: case Token . BLOCK : case Token . RETURN : if ( n . get CaMeL Next ( ) == null || n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 811
score: 99.72673087284483
patch: case Branch >> ) : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 811
score: 99.68819640112704
patch: if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 812
score: 99.80499102618244
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } } ) ;
rank: 812
score: 99.78120814732142
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = first . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 812
score: 99.77685546875
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 812
score: 99.77471609213917
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 812
score: 99.76698578381148
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) != null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 812
score: 99.75873627533784
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 812
score: 99.75675357680723
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , ;
rank: 812
score: 99.74600360576923
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) || n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 812
score: 99.68810835040983
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ) ;
rank: 813
score: 99.77684795673076
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 813
score: 99.7746875
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( parent ) ) ;
rank: 813
score: 99.76693765219156
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 813
score: 99.75872443704044
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n . get CaMeL Next ( ) ) ) ;
rank: 813
score: 99.75664645522389
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; }
rank: 813
score: 99.74583565848214
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; }
rank: 813
score: 99.68806457519531
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) != null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 814
score: 99.804931640625
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 814
score: 99.78111267089844
patch: if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 814
score: 99.7767693014706
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 814
score: 99.76686789772727
patch: case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; }
rank: 814
score: 99.75664382684427
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } }
rank: 814
score: 99.74571397569444
patch: case Token . BLOCK : if ( n . get CaMeL Next ( ) == null || n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 814
score: 99.72645670572916
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; }
rank: 814
score: 99.68804253472223
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) . get CaMeL Value ( ) ; }
rank: 815
score: 99.80491041100544
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 815
score: 99.78098366477273
patch: } else { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 815
score: 99.77658260569854
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 815
score: 99.7746073404948
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( ) ) ;
rank: 815
score: 99.76686639300847
patch: } case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 815
score: 99.75843811035156
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) || n . get CaMeL Type ( ) == Token . FUNCTION ) if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 815
score: 99.75664206112133
patch: case Token . BLOCK : if ( ( n . has CaMeL Children ( ) ) || ( n . has CaMeL Children ( ) ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 815
score: 99.74570904356061
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , g CaMeL Node ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 815
score: 99.72645113760964
patch: case Node . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 816
score: 99.80484054337687
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( next . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 816
score: 99.7764189749053
patch: case Token . RETURN : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 816
score: 99.77455540707237
patch: } else if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 816
score: 99.76683369620902
patch: } case Token . BLOCK : { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 816
score: 99.75843811035156
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n , n ) ) ;
rank: 816
score: 99.75662392064145
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ) ;
rank: 816
score: 99.74569614955357
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , null ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 816
score: 99.72644805908203
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 816
score: 99.68787977430556
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 817
score: 99.80483014396067
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; }
rank: 817
score: 99.77631460336538
patch: case BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 817
score: 99.76680018538136
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 817
score: 99.75840281016791
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 817
score: 99.75659839527027
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = ( Node ) n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 817
score: 99.72640830592105
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 817
score: 99.68778138241525
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 818
score: 99.80472156613372
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } } }
rank: 818
score: 99.77560950969827
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . RETURN ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 818
score: 99.77449776785714
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 818
score: 99.76676860608552
patch: } case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 818
score: 99.72622385332662
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 818
score: 99.68736267089844
patch: case Di CaMeL Graph CaMeL Node . BLOCK : case RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 819
score: 99.80470944522472
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ) ) ;
rank: 819
score: 99.78062930349576
patch: case Token . BLOCK : { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 819
score: 99.77550722947761
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . RETURN ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 819
score: 99.77445606518818
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , null ) ) ;
rank: 819
score: 99.7580795288086
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 819
score: 99.75655691964286
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { n . get CaMeL First CaMeL Child ( ) ;
rank: 819
score: 99.7456346198694
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 819
score: 99.72603352864583
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { break ; case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 819
score: 99.68722098214286
patch: case Token . BREAK : case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 820
score: 99.80470872961956
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Last CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 820
score: 99.78057137182203
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 820
score: 99.77544487847223
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 820
score: 99.77444556451613
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ) ;
rank: 820
score: 99.76660998114224
patch: case Token . NULL : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 820
score: 99.74562733208955
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ;
rank: 820
score: 99.7260313870614
patch: case Branch . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 821
score: 99.7803454789959
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 821
score: 99.77543435167911
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ) ;
rank: 821
score: 99.77440708705358
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return n . get CaMeL First CaMeL Child ( ) ; }
rank: 821
score: 99.76655796595982
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 821
score: 99.72602081298828
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 821
score: 99.68715347782258
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) . get CaMeL Value ( ) ;
rank: 822
score: 99.80467640269886
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; } }
rank: 822
score: 99.77540717690678
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else
rank: 822
score: 99.77439856150794
patch: } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 822
score: 99.76654877533784
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 822
score: 99.75646602746212
patch: case Token . BLOCK : case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 822
score: 99.74551072761194
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . BREAK ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 822
score: 99.72595429002193
patch: case Integer . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 822
score: 99.6870346069336
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 823
score: 99.7802734375
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return first ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 823
score: 99.77540542140152
patch: case Token . BREAK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 823
score: 99.77436967329545
patch: case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 823
score: 99.76650705645162
patch: } try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 823
score: 99.75794038318452
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 823
score: 99.7563977363782
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ;
rank: 823
score: 99.72583849676724
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 823
score: 99.6869884672619
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n ;
rank: 824
score: 99.80466478924419
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 824
score: 99.78024818157327
patch: case Token . BLOCK : { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 824
score: 99.77435980902777
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 824
score: 99.7579345703125
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . RETURN :
rank: 824
score: 99.7563712827621
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ;
rank: 824
score: 99.745458984375
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Di CaMeL Graph CaMeL Edge . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 824
score: 99.72560307017544
patch: case Number . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 824
score: 99.6869140625
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL Destination ( ) . get CaMeL Value ( ) ;
rank: 825
score: 99.80463237147177
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } return first ;
rank: 825
score: 99.78015506628788
patch: } if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 825
score: 99.77516867897727
patch: case Token . BREAK : if ( n . get CaMeL Type ( ) == Token . BLOCK ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 825
score: 99.76638752140411
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 825
score: 99.75781909839527
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 825
score: 99.75634025804925
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 825
score: 99.74535745287699
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 825
score: 99.72557737116227
patch: case - 1 : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 825
score: 99.6868877108135
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) ) ;
rank: 826
score: 99.804609375
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; }
rank: 826
score: 99.78014929819915
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 826
score: 99.7743503736413
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . has CaMeL Children ( ) ) ) ;
rank: 826
score: 99.766357421875
patch: } case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 826
score: 99.7578189247533
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . get CaMeL Directed CaMeL Graph CaMeL Node ( n ) , cur CaMeL Cfg ) ;
rank: 826
score: 99.72555391905738
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ;
rank: 826
score: 99.68680359887296
patch: case Control CaMeL Flow CaMeL Analysis . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 827
score: 99.78008848248106
patch: if ( n . has CaMeL Children ( ) ) { Node first = null ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 827
score: 99.77499708488806
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { break ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 827
score: 99.77434624565973
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 827
score: 99.76635416666667
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } }
rank: 827
score: 99.75779965049342
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else if ( n . has CaMeL Children ( ) ) {
rank: 827
score: 99.75631665426587
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) == null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 827
score: 99.74515964673913
patch: case Token . BLOCK : case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 827
score: 99.72555338541666
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 827
score: 99.68680245535714
patch: case Token . RETURN : case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 828
score: 99.80458135190217
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ) ; }
rank: 828
score: 99.78001450047348
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , ) ) ;
rank: 828
score: 99.77430216471355
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( parent ) ) ;
rank: 828
score: 99.75777395148026
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , compute CaMeL Following ( n ) ) ;
rank: 828
score: 99.75630493164063
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 828
score: 99.7451030344203
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; break ;
rank: 828
score: 99.72548518105158
patch: case Token . FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; } }
rank: 828
score: 99.68662581905242
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else return n ;
rank: 829
score: 99.80456730769231
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 829
score: 99.77999230587122
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 829
score: 99.7749314948694
patch: case Token . FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 829
score: 99.76625374571918
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 829
score: 99.7577607125947
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 829
score: 99.75627055921052
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . BLOCK ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 829
score: 99.74510216346154
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) , n ) ; }
rank: 829
score: 99.68661148821721
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) ; }
rank: 830
score: 99.80454323508523
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) . get CaMeL Parent ( ) ) ;
rank: 830
score: 99.77996826171875
patch: } if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 830
score: 99.7745028409091
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 830
score: 99.77425462372449
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , null ) ) ; }
rank: 830
score: 99.75624527469758
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return next ; } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 830
score: 99.74509626116071
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) . get CaMeL Destination ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) ; }
rank: 830
score: 99.72542317708333
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ;
rank: 831
score: 99.77996504934211
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 831
score: 99.77450211321721
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) , n . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 831
score: 99.76622086864407
patch: } try { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 831
score: 99.75761098710318
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) ) ;
rank: 831
score: 99.75618881777109
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 831
score: 99.7450443097015
patch: case Token . BLOCK : case Token . BREAK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 831
score: 99.72539992559524
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { break ; }
rank: 831
score: 99.68658854166667
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 832
score: 99.80448774857955
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 832
score: 99.77960689484127
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 832
score: 99.7741825064433
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 832
score: 99.77403509794776
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n . get CaMeL First CaMeL Child ( ) ) ;
rank: 832
score: 99.76615885416666
patch: } case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 832
score: 99.75740774054276
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) || n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else if ( n . has CaMeL Children ( ) ) {
rank: 832
score: 99.74494977678572
patch: case Token . BLOCK : case Token . BREAK : case Token . BREAK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 832
score: 99.72532495959052
patch: case Token . TYPE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 832
score: 99.68641137295081
patch: if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 833
score: 99.80448273689517
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return null ; }
rank: 833
score: 99.77941706730769
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 833
score: 99.77416648327464
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 833
score: 99.76601396980932
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = node . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 833
score: 99.75609099559294
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Source ( ) ) ;
rank: 833
score: 99.7448199728261
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == null ? null : try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ) ; }
rank: 833
score: 99.7252977715164
patch: case Token . FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ;
rank: 833
score: 99.68634230090726
patch: case Token . BLOCK : case Token . CONTINUE : case Token . CONTINUE : case Token . BREAK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 834
score: 99.77931213378906
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 834
score: 99.77382960464016
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 834
score: 99.75736065764926
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } switch ( n . has CaMeL Children ( ) ) {
rank: 834
score: 99.74476336050725
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) == null ? null : try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ) ;
rank: 834
score: 99.72522393588362
patch: case Branch >> 1 : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 834
score: 99.68632507324219
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . get CaMeL Parent ( ) == null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 835
score: 99.7792217548077
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 835
score: 99.7737525201613
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 835
score: 99.76595332704741
patch: } Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 835
score: 99.74476143973214
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Di CaMeL Graph CaMeL Edge . BLOCK ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 835
score: 99.72519867995689
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 835
score: 99.68631784539474
patch: case Token . BLOCK : case Token . BREAK : case Token . BREAK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 836
score: 99.77911931818181
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 836
score: 99.7739504419192
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ) ;
rank: 836
score: 99.77367001488095
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 836
score: 99.76589924015411
patch: } case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 836
score: 99.75731136924342
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 836
score: 99.75602489406779
patch: case Token . BLOCK : { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 836
score: 99.72518570696721
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n ; if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 837
score: 99.80430772569444
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( ) ) ;
rank: 837
score: 99.7791015625
patch: } else { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 837
score: 99.76586042131696
patch: } else { } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 837
score: 99.75723121279762
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 837
score: 99.7559833829365
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = node . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 837
score: 99.74460797991071
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , 0 ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 837
score: 99.72516500538794
patch: case Node . FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 837
score: 99.68623046875
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) ) {
rank: 838
score: 99.80423859627017
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return n ; }
rank: 838
score: 99.77893460181451
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 838
score: 99.7739453125
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( node ) ) ;
rank: 838
score: 99.77355587121212
patch: case Token . BREAK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 838
score: 99.76585594383445
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 838
score: 99.7571063701923
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 838
score: 99.7559784679878
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Root ( ) . get CaMeL Value ( ) ) ;
rank: 838
score: 99.7251209077381
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; } }
rank: 839
score: 99.80420709425404
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return next ; }
rank: 839
score: 99.77890014648438
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 839
score: 99.75590006510417
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ) ; }
rank: 839
score: 99.74448529411765
patch: case Token . BLOCK : if ( n . get CaMeL Next ( ) != null ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 839
score: 99.72511393229166
patch: case Token . FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 839
score: 99.68612966229838
patch: case Token . BLOCK : case Token . BREAK : case Token . BREAK : case Token . CONTINUE : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 840
score: 99.77391899956598
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 840
score: 99.77350408380681
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n , n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 840
score: 99.76568393049568
patch: Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 840
score: 99.75678628177967
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } case Token . BREAK : if ( n . has CaMeL Children ( ) ) {
rank: 840
score: 99.75589376100352
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( parent ) ) ; }
rank: 840
score: 99.74430803571428
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 840
score: 99.72486165364583
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 840
score: 99.6860587827621
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 841
score: 99.80411430027173
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ) ; }
rank: 841
score: 99.77868088942307
patch: } if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 841
score: 99.77390358664773
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n . get CaMeL First CaMeL Child ( ) ) ) ) ;
rank: 841
score: 99.77344621930804
patch: case Token . RETURN : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 841
score: 99.76567302766394
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 841
score: 99.74420058936404
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { break ; } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 841
score: 99.68597412109375
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : case BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 842
score: 99.80408566497093
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 842
score: 99.77846594024123
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 842
score: 99.77388080797698
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return first ; } }
rank: 842
score: 99.77326912715517
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 842
score: 99.76561658135776
patch: case Token . EMPTY : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 842
score: 99.75648612406717
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 842
score: 99.75582364710365
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 842
score: 99.744140625
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . get CaMeL Next ( ) == null || n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 842
score: 99.72479838709677
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 843
score: 99.80407184103261
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( node ) ) ; }
rank: 843
score: 99.77808004712301
patch: if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 843
score: 99.77382405598958
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( parent ) ) ; }
rank: 843
score: 99.77312677556819
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 843
score: 99.76558540962837
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 843
score: 99.75648153981855
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , compute CaMeL Following ( n ) ) ;
rank: 843
score: 99.74410752118644
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 843
score: 99.72466362847223
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ;
rank: 843
score: 99.68574838789682
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . get CaMeL Parent ( ) != null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 844
score: 99.80404974489795
patch: case Token . BLOCK : if ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) return null ;
rank: 844
score: 99.77784778225806
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 844
score: 99.77379452284946
patch: if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 844
score: 99.77283108618951
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Parent ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 844
score: 99.76556706832628
patch: } if ( n . has CaMeL Children ( ) ) { Node first = Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 844
score: 99.75576463386194
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 844
score: 99.75556798135081
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , node ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , node ) ; }
rank: 844
score: 99.7245857484879
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } * / return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 844
score: 99.68563079833984
patch: case Token . BREAK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ;
rank: 845
score: 99.77782451923076
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( node ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 845
score: 99.7737193943299
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , null ) ) ) ;
rank: 845
score: 99.77259482106855
patch: case Token . BREAK : if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 845
score: 99.76552734375
patch: } if ( ! n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 845
score: 99.74405670166016
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 845
score: 99.72453227796052
patch: case Branch >> : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 845
score: 99.68546937003968
patch: case Token . BLOCK : case Token . BREAK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ) ;
rank: 846
score: 99.77779892743644
patch: case Token . BLOCK : try { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 846
score: 99.77370932667526
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . has CaMeL Children ( ) ) ) ;
rank: 846
score: 99.74403130830224
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 846
score: 99.72446529200819
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { break ; } case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 847
score: 99.80394940043605
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , true ) ) ; }
rank: 847
score: 99.77762169471154
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 847
score: 99.77367146809895
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return n . get CaMeL First CaMeL Child ( ) ;
rank: 847
score: 99.77244614109848
patch: case Token . FUNCTION : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 847
score: 99.72443033854167
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 847
score: 99.68541511656746
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 848
score: 99.80394736842105
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) . get CaMeL Parent ( ) ) ;
rank: 848
score: 99.77757588370902
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return first ;
rank: 848
score: 99.77362225506756
patch: while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 848
score: 99.77239118303571
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { final Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 848
score: 99.76543868215461
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 848
score: 99.7554455773305
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 848
score: 99.75455729166667
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) , n ) ;
rank: 848
score: 99.74386858258929
patch: case Token . BLOCK : case Token . RETURN : case Token . BREAK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 848
score: 99.72434948336694
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Branch . BLOCK ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 848
score: 99.68539186507937
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 849
score: 99.77755892478814
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = null ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 849
score: 99.77237701416016
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 849
score: 99.7654052734375
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 849
score: 99.72431640625
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else if ( n . has CaMeL Children ( ) ) { break ; }
rank: 849
score: 99.68537139892578
patch: case Token . BLOCK : case Token . CONTINUE : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 850
score: 99.77747550843254
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 850
score: 99.77235412597656
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 850
score: 99.7654052734375
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return null ; }
rank: 850
score: 99.75542182426948
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , ) ) ; }
rank: 850
score: 99.74381772933468
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ) ;
rank: 850
score: 99.72428661281779
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ;
rank: 850
score: 99.68500066207628
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n ; }
rank: 851
score: 99.77738131009616
patch: if ( n . has CaMeL Children ( ) ) { Node first = node . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 851
score: 99.77230834960938
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n , n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 851
score: 99.76528448807566
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 851
score: 99.75426136363636
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) , g CaMeL Node ) ;
rank: 851
score: 99.74375287224265
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 851
score: 99.72427262931035
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 851
score: 99.68494046118951
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) ; }
rank: 852
score: 99.77732799899194
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 852
score: 99.7734375
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 852
score: 99.76527443910257
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 852
score: 99.75538429054055
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first , n ) ) ;
rank: 852
score: 99.75425845286885
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } case Token . RETURN : if ( n . has CaMeL Children ( ) ) { break ;
rank: 852
score: 99.74369480298913
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 852
score: 99.72426285282258
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { break ; } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 852
score: 99.68472493489584
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else {
rank: 853
score: 99.80370032269022
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 853
score: 99.77723969006148
patch: } else { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 853
score: 99.7734375
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 853
score: 99.76524593955592
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ;
rank: 853
score: 99.7553642165493
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) . get CaMeL Parent ( ) ) ) ;
rank: 853
score: 99.74364505597015
patch: case Di CaMeL Graph CaMeL Edge . FUNCTION : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 853
score: 99.72426060267857
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ;
rank: 853
score: 99.68463027686404
patch: case Token . BREAK : case Token . CONTINUE : case Token . CONTINUE : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 854
score: 99.77210653981855
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 854
score: 99.76522786458334
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; }
rank: 854
score: 99.74361696105072
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ; }
rank: 855
score: 99.80361599392361
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return first . get CaMeL First CaMeL Child ( ) ; }
rank: 855
score: 99.77698625837054
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { try { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 855
score: 99.77335497359155
patch: case Node . BLOCK : while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 855
score: 99.77172088623047
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 855
score: 99.76522666529605
patch: case Token . BLOCK : Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , first ) ;
rank: 855
score: 99.75533294677734
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { n . get CaMeL First CaMeL Child ( ) . remove CaMeL First CaMeL Child ( ) ; }
rank: 855
score: 99.75336456298828
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } switch ( n . get CaMeL Type ( ) ) { case Token . RETURN : case Token . BREAK :
rank: 855
score: 99.74359654017857
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 855
score: 99.72407749720982
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 855
score: 99.68399677579364
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 856
score: 99.80329132080078
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { n . set CaMeL Parent ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ) ; }
rank: 856
score: 99.77687147797131
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } catch ( ?
rank: 856
score: 99.76516197467673
patch: Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 856
score: 99.75532941120427
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Source ( ) . get CaMeL Value ( ) ) ;
rank: 856
score: 99.72405133928571
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 856
score: 99.68399398053279
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 857
score: 99.80327868852459
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } ) ;
rank: 857
score: 99.77322387695312
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , ) ) ;
rank: 857
score: 99.76514485677083
patch: case Token . BLOCK : else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 857
score: 99.74354619565217
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == null ? null : try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ) ;
rank: 857
score: 99.72403583829364
patch: case String . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 857
score: 99.68398597592213
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 858
score: 99.77647235576923
patch: } else { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 858
score: 99.77316696579392
patch: case Node . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 858
score: 99.7651123046875
patch: } case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 858
score: 99.75310578893442
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ;
rank: 858
score: 99.74349201259328
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { try { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; }
rank: 858
score: 99.72393208165323
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 858
score: 99.68388500548245
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 859
score: 99.80307039650538
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 859
score: 99.77631205897177
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 859
score: 99.77310180664062
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( parent ) ) ) ;
rank: 859
score: 99.77156313004032
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 859
score: 99.76509712837837
patch: } try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 859
score: 99.75523262593283
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; }
rank: 859
score: 99.75305739182693
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) , first ) ; }
rank: 859
score: 99.74341538373162
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 859
score: 99.72390407986111
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ;
rank: 860
score: 99.77628300107759
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = null ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 860
score: 99.77149225050404
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . BLOCK ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 860
score: 99.76485533633475
patch: } Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 860
score: 99.75522030101104
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } }
rank: 860
score: 99.74329144021739
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 860
score: 99.72338438870614
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; * / return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 860
score: 99.68308064088983
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ;
rank: 861
score: 99.80288613809121
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 861
score: 99.77607579385081
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( first . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 861
score: 99.7713558799342
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . BLOCK ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 861
score: 99.75521256087663
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , true ) ) ;
rank: 861
score: 99.75304361979167
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else if ( n . has CaMeL Children ( ) ) {
rank: 861
score: 99.74321507695896
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 861
score: 99.7233650453629
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) ) { break ;
rank: 861
score: 99.68305821572581
patch: case Token . BLOCK : case Token . BREAK : case Token . CONTINUE : case Token . BREAK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 862
score: 99.80287613407258
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { n . has CaMeL Children ( ) ; }
rank: 862
score: 99.77605329241071
patch: } else { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 862
score: 99.77130408653846
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 862
score: 99.76466619318182
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 862
score: 99.75289713541666
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else switch ( n . get CaMeL Type ( ) ) { case Token . RETURN :
rank: 862
score: 99.74317193800404
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 862
score: 99.72333984375
patch: case Token . FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 862
score: 99.68305744108606
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 863
score: 99.77579498291016
patch: } else { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 863
score: 99.77126242897727
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 863
score: 99.76461544552365
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 863
score: 99.75516654349663
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 863
score: 99.75247395833334
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BREAK :
rank: 863
score: 99.7430419921875
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 863
score: 99.68303571428571
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else
rank: 864
score: 99.80270478219697
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ;
rank: 864
score: 99.77564717955508
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } catch ( ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 864
score: 99.77294921875
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 864
score: 99.77125901442308
patch: case Token . RETURN : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 864
score: 99.76438844358766
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 864
score: 99.75515747070312
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first , n ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; }
rank: 864
score: 99.75214029947917
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } break ;
rank: 864
score: 99.74303668478261
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 864
score: 99.72326867055085
patch: case Branch . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 864
score: 99.68292339777543
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 865
score: 99.80270070043103
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = ( Node ) n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 865
score: 99.77269881810898
patch: } else { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 865
score: 99.77124410962301
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 865
score: 99.76430792557566
patch: case Token . BLOCK : try { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ;
rank: 865
score: 99.75510817307692
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 865
score: 99.75187914299242
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) && n . get CaMeL Type ( ) == Token . FUNCTION :
rank: 865
score: 99.74296254960318
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ) ; }
rank: 865
score: 99.68290395585318
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) . get CaMeL Value ( ) ; }
rank: 866
score: 99.77539890095339
patch: case Token . BLOCK : { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 866
score: 99.77258051658163
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else {
rank: 866
score: 99.77100436970339
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 866
score: 99.76422750538794
patch: } case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) ; }
rank: 866
score: 99.75504134537337
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . has CaMeL Children ( ) ) ) ; }
rank: 866
score: 99.7516845703125
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; Node try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 866
score: 99.74295609085648
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 866
score: 99.72305192618535
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) ) { break ; }
rank: 866
score: 99.68286561129386
patch: case Token . BLOCK : case Token . CONTINUE : case Token . CONTINUE : case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 867
score: 99.77536010742188
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 867
score: 99.77089533730158
patch: case Token . BLOCK : if ( ! n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 867
score: 99.76416015625
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 867
score: 99.75503457559121
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , false ) ) ;
rank: 867
score: 99.72297615840517
patch: case Position . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 867
score: 99.68281870039682
patch: case Token . BLOCK : if ( n . get CaMeL Next ( ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 868
score: 99.80241419057377
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } break ; }
rank: 868
score: 99.77519200211864
patch: try { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 868
score: 99.77254585597827
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node (
rank: 868
score: 99.76407771915585
patch: case Token . BLOCK : { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 868
score: 99.75499348958333
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; }
rank: 868
score: 99.75161903782895
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 868
score: 99.74285797574628
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . CONTINUE ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 868
score: 99.72293526785714
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL Parent ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 868
score: 99.68278270656779
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; }
rank: 869
score: 99.80236395474138
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( next ) ; }
rank: 869
score: 99.77252752130681
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 869
score: 99.77061462402344
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 869
score: 99.76405093544408
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } }
rank: 869
score: 99.75494111473881
patch: case Token . BLOCK : case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 869
score: 99.72284526209677
patch: case Node . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 870
score: 99.7705303485577
patch: case Token . BREAK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 870
score: 99.75485899390245
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) . get CaMeL Parent ( ) ) ) ;
rank: 870
score: 99.75116066854508
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; Node try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 870
score: 99.74279608242753
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return n . get CaMeL First CaMeL Child ( ) ; }
rank: 870
score: 99.72281620420259
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 870
score: 99.6824931795635
patch: case Di CaMeL Graph CaMeL Edge . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ;
rank: 871
score: 99.80219414893617
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ) ; }
rank: 871
score: 99.772431640625
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 871
score: 99.77052307128906
patch: case Token . FUNCTION : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 871
score: 99.75484793526786
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 871
score: 99.74276878720238
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 871
score: 99.68230794270833
patch: case Token . BLOCK : case Token . CONTINUE : case Token . CONTINUE : if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 872
score: 99.77233005798969
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 872
score: 99.76379707532051
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 872
score: 99.75477013221153
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ;
rank: 872
score: 99.74276592548077
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 872
score: 99.72271137852823
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 872
score: 99.68216892930327
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return n ;
rank: 873
score: 99.77230171535327
patch: if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( ) ) ;
rank: 873
score: 99.76361083984375
patch: } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 873
score: 99.75474964488636
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , null ) ) ;
rank: 873
score: 99.74273496685606
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . BREAK ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 873
score: 99.72268880208334
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; break ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 874
score: 99.770263671875
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 874
score: 99.76343433277027
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , first ) ; } }
rank: 874
score: 99.75472780257937
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ;
rank: 874
score: 99.75072079613095
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 874
score: 99.74253521543561
patch: case Token . BLOCK : case Token . CONTINUE : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 874
score: 99.7226806640625
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } * /
rank: 874
score: 99.68185478344299
patch: case Token . BLOCK : if ( n . get CaMeL Next ( ) == null ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 875
score: 99.80206298828125
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { n . get CaMeL First CaMeL Child ( ) ; }
rank: 875
score: 99.77410481770833
patch: try { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 875
score: 99.77220569957386
patch: case Token . BLOCK : { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 875
score: 99.77024792086694
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 875
score: 99.7634341591283
patch: case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ;
rank: 875
score: 99.75460907907197
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ;
rank: 875
score: 99.75070091985887
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; case Token . RETURN :
rank: 875
score: 99.74189598880596
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 875
score: 99.72264783135776
patch: case Object . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 875
score: 99.6818138860887
patch: case Token . BLOCK : case Token . CONTINUE : case Token . BREAK : case Token . BREAK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 876
score: 99.8019515749008
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { n . get CaMeL First CaMeL Child ( ) . set CaMeL Parent ( n ) ; }
rank: 876
score: 99.77408854166667
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( first != null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 876
score: 99.77015474759615
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 876
score: 99.763427734375
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , node ) ; } }
rank: 876
score: 99.75457512842466
patch: case Token . BLOCK : case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ;
rank: 876
score: 99.75024827860169
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { try { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 876
score: 99.72255045572916
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { try { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } * / return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 876
score: 99.68179813508064
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( first ) ) ;
rank: 877
score: 99.77398274739583
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 877
score: 99.77203369140625
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return n . get CaMeL First CaMeL Child ( ) ; }
rank: 877
score: 99.77007004310344
patch: case Token . RETURN : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 877
score: 99.76336749188312
patch: case Token . BLOCK : { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 877
score: 99.75445391680744
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } return null ;
rank: 877
score: 99.72240397135417
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 877
score: 99.68176663306451
patch: case Token . CONTINUE : case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 878
score: 99.80190700954861
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , false ) ) ;
rank: 878
score: 99.77393365675404
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = null ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 878
score: 99.76998697916666
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 878
score: 99.76334195523648
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } }
rank: 878
score: 99.7415438565341
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 878
score: 99.72236159752156
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) ) { break ; }
rank: 878
score: 99.68158549647177
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . get CaMeL Next ( ) == null ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 879
score: 99.7737808227539
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( first != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 879
score: 99.77195231119792
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( ) ) ;
rank: 879
score: 99.7698745727539
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 879
score: 99.76332493832237
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 879
score: 99.75418619791667
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ) ;
rank: 879
score: 99.74964904785156
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } switch ( n . get CaMeL Type ( ) ) { case Token . RETURN : case Token . FUNCTION :
rank: 879
score: 99.74139313199628
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ) ; }
rank: 879
score: 99.68147523941532
patch: case Token . FUNCTION : case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 880
score: 99.8016869329637
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { } }
rank: 880
score: 99.77377158717105
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = node . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 880
score: 99.76951497395834
patch: case RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 880
score: 99.76315104166666
patch: } } case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 880
score: 99.74922943115234
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) , node ) ;
rank: 880
score: 99.74119657628677
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 880
score: 99.72219366776316
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { break ; } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 880
score: 99.68135579427083
patch: case Token . BREAK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 881
score: 99.80152318384741
patch: case Token . BLOCK : break ; case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 881
score: 99.77359771728516
patch: } else { if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 881
score: 99.7719140625
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ;
rank: 881
score: 99.76945249495968
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 881
score: 99.76313920454545
patch: case Token . BLOCK : Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; }
rank: 881
score: 99.75412946428571
patch: case Token . BLOCK : case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 881
score: 99.72210903825432
patch: case Level . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 881
score: 99.68106429303279
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ; if ( next == null ) {
rank: 882
score: 99.80143936820652
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; }
rank: 882
score: 99.76313219572368
patch: case Token . BLOCK : Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 882
score: 99.75406678082192
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) . get CaMeL Parent ( ) . get CaMeL Parent ( ) ) ;
rank: 882
score: 99.74898274739583
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else switch ( n . get CaMeL Type ( ) ) { case Token . BREAK :
rank: 882
score: 99.74075317382812
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 882
score: 99.72196934586864
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 882
score: 99.68074410860656
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) ;
rank: 883
score: 99.77349950396825
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 883
score: 99.76902553013393
patch: case RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 883
score: 99.76307717347757
patch: } case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return n ; }
rank: 883
score: 99.74073815724206
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 883
score: 99.68063742897728
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) ) {
rank: 884
score: 99.80132004310344
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; }
rank: 884
score: 99.77311731557377
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ;
rank: 884
score: 99.763046875
patch: } else { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 884
score: 99.75397883234797
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , true ) ) ;
rank: 884
score: 99.74872233072917
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 884
score: 99.74070079291045
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { try { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 884
score: 99.72184507308468
patch: case Token . BLOCK : case Node . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 884
score: 99.68045359644397
patch: switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 885
score: 99.7729913119612
patch: case Token . BLOCK : else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 885
score: 99.77175071022727
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { }
rank: 885
score: 99.76802201704545
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 885
score: 99.76298067167208
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; }
rank: 885
score: 99.75397770579268
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) . get CaMeL Parent ( ) ) ) ) ;
rank: 885
score: 99.74864783653847
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) || n . has CaMeL Next ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 885
score: 99.74068390376983
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == null ? null : try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ) ;
rank: 885
score: 99.7216796875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } return n ;
rank: 886
score: 99.77295749470339
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 886
score: 99.76723257211539
patch: case RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 886
score: 99.76297701322116
patch: case Token . BLOCK : { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 886
score: 99.75397385817308
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) || n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 886
score: 99.74862467447916
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 886
score: 99.74060821533203
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 886
score: 99.7216560609879
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else if ( n . has CaMeL Children ( ) ) { break ; }
rank: 886
score: 99.68038390112704
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL Destination ( ) . get CaMeL Value ( ) ; }
rank: 887
score: 99.80106026785714
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; }
rank: 887
score: 99.77274576822917
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 887
score: 99.77169764727012
patch: case Token . BLOCK : Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 887
score: 99.75397223395271
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) . get CaMeL Parent ( ) ) ;
rank: 887
score: 99.74036754261364
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 887
score: 99.72154580393145
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 887
score: 99.68032140899123
patch: case Token . BREAK : case Token . BREAK : case Token . CONTINUE : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 888
score: 99.80098839962122
patch: case Token . BLOCK : if ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 888
score: 99.77164713541667
patch: case Token . BLOCK : while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 888
score: 99.7671123798077
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 888
score: 99.76275527686404
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 888
score: 99.7539196275685
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 888
score: 99.7484606726695
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . get CaMeL Type ( ) == Token . FUNCTION ) {
rank: 888
score: 99.74026442307692
patch: case Type . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 888
score: 99.72154360911885
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL Destination ( ) . get CaMeL Value ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 888
score: 99.6802466607863
patch: case Token . RETURN : case Token . FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 889
score: 99.80089199420104
patch: case Token . BLOCK : if ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 889
score: 99.77270921610169
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 889
score: 99.77164359714673
patch: case Token . BLOCK : { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { }
rank: 889
score: 99.7669165826613
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . BLOCK ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 889
score: 99.76271214978448
patch: } try { try { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 889
score: 99.75389990868507
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Name ( ) ) ; }
rank: 889
score: 99.74821472167969
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 889
score: 99.74021251166045
patch: case Di CaMeL Graph CaMeL Edge . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 889
score: 99.68017578125
patch: case Token . FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL Destination ( ) . get CaMeL Value ( ) ;
rank: 890
score: 99.8008634868421
patch: case Token . BLOCK : if ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) )
rank: 890
score: 99.7726181806144
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = null ; while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 890
score: 99.77162532216495
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 890
score: 99.76658581149194
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return n ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 890
score: 99.76253469366776
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 890
score: 99.74798583984375
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 890
score: 99.72137254284274
patch: case Object . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 890
score: 99.68015095338983
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) ) {
rank: 891
score: 99.77258694556451
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 891
score: 99.77161754261364
patch: case Token . BLOCK : { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ;
rank: 891
score: 99.76658555327869
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . RETURN ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 891
score: 99.7538544625947
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { }
rank: 891
score: 99.74797821044922
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) , first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 891
score: 99.73988252527573
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 891
score: 99.68010957362289
patch: * / if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 892
score: 99.80063562225877
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return next . get CaMeL First CaMeL Child ( ) ; }
rank: 892
score: 99.77240668402777
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 892
score: 99.76653752561475
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 892
score: 99.7624932650862
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( node ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 892
score: 99.75377061631944
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ) ;
rank: 892
score: 99.7398348721591
patch: case Token . BLOCK : case Token . RETURN : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 892
score: 99.72123142930327
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } ) ; }
rank: 892
score: 99.68010725054825
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL Out CaMeL Edges ( ) ; }
rank: 893
score: 99.80050942332474
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) . get CaMeL Parent ( ) ) ;
rank: 893
score: 99.77234468005952
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 893
score: 99.77141462053571
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 893
score: 99.76653421336206
patch: case Token . BREAK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 893
score: 99.76248484644397
patch: } else { } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 893
score: 99.75374849759615
patch: case Token . BLOCK : case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ;
rank: 893
score: 99.73980212602459
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 894
score: 99.80048320819805
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 894
score: 99.77220837823276
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 894
score: 99.76640004960318
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 894
score: 99.76237630208334
patch: } case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 894
score: 99.75369466145834
patch: case Token . Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 894
score: 99.7476826016865
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 894
score: 99.7211493130388
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) != null ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 894
score: 99.679833984375
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; }
rank: 895
score: 99.80045240752551
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; }
rank: 895
score: 99.77220517113095
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 895
score: 99.76629317434211
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { int first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 895
score: 99.7622320713141
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; }
rank: 895
score: 99.75364583333334
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) , n ) ;
rank: 895
score: 99.74755859375
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 895
score: 99.73974609375
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . CONTINUE ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 895
score: 99.72107327368951
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { break ; } case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 895
score: 99.67979029605263
patch: case Token . RETURN : case Token . CONTINUE : case Token . CONTINUE : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 896
score: 99.80042613636364
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { n . set CaMeL Parent ( first ) ; }
rank: 896
score: 99.77219154094827
patch: case Token . BLOCK : { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 896
score: 99.7712910970052
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 896
score: 99.76592426915323
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Following ( n ) ) ;
rank: 896
score: 99.7208740234375
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } ; }
rank: 897
score: 99.80022321428571
patch: case Token . BLOCK : if ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) return n ;
rank: 897
score: 99.77215909090908
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { try { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 897
score: 99.77121254832474
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 897
score: 99.76194545200893
patch: } if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 897
score: 99.74714781746032
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) , n ) ;
rank: 897
score: 99.67970405190678
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 898
score: 99.77198093220339
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 898
score: 99.771181640625
patch: case Token . BLOCK : Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 898
score: 99.75360107421875
patch: case Token . BLOCK : case Token . ) : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 898
score: 99.74701021634615
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , first ) ;
rank: 898
score: 99.73946814903846
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { try { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 898
score: 99.72046740301724
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) ) { break ; }
rank: 898
score: 99.679541015625
patch: case Token . RETURN : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 899
score: 99.80020985704788
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 899
score: 99.77117546237245
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 899
score: 99.76528635332662
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 899
score: 99.76173650568182
patch: } try { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 899
score: 99.75349426269531
patch: case Token . Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; }
rank: 899
score: 99.72044657044492
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { break ; } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 900
score: 99.80015804893092
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) != null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 900
score: 99.77174789186508
patch: if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 900
score: 99.76137444911859
patch: } if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; }
rank: 900
score: 99.75347075591216
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , null ) ) ;
rank: 900
score: 99.73915423768939
patch: case Token . BLOCK : case Token . BREAK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 900
score: 99.72027994791667
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 900
score: 99.67950542902543
patch: case Token . RETURN : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 901
score: 99.80013020833333
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 901
score: 99.77173639112904
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n , n . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 901
score: 99.77106153350516
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 901
score: 99.76521301269531
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) == Branch . UNCOND ) ;
rank: 901
score: 99.75344366776316
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { n . remove CaMeL First CaMeL Child ( first ) ; }
rank: 901
score: 99.72027180989583
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } ; }
rank: 902
score: 99.80011089777543
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } finally { return n . get CaMeL First CaMeL Child ( ) ; }
rank: 902
score: 99.77106153350516
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 902
score: 99.76515197753906
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) . get CaMeL Type ( ) == Token . BLOCK ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 902
score: 99.76131290584415
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 902
score: 99.74693080357143
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return next ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 902
score: 99.67937301377118
patch: case Token . BREAK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 903
score: 99.77099105992268
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; }
rank: 903
score: 99.76500701904297
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 903
score: 99.76119876217533
patch: case Token . BLOCK : { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 903
score: 99.75336588541667
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; }
rank: 903
score: 99.67905359100877
patch: case Token . BREAK : case Token . CONTINUE : case Token . BREAK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 904
score: 99.80005670362904
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) . get CaMeL Parent ( ) ) ; }
rank: 904
score: 99.77128575211864
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 904
score: 99.76487320188492
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 904
score: 99.76119679418103
patch: } if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 904
score: 99.75336371527777
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ;
rank: 904
score: 99.73880597014926
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) , n ) ; }
rank: 904
score: 99.72015080686475
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } case Token . RETURN : if ( n . has CaMeL Children ( ) ) { break ;
rank: 904
score: 99.67899231991525
patch: case Token . FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ;
rank: 905
score: 99.80005258413462
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return null ; } }
rank: 905
score: 99.77067896262886
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , this ) ) ) ;
rank: 905
score: 99.76483154296875
patch: case BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 905
score: 99.76117720170454
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; ; }
rank: 905
score: 99.73844158115672
patch: case Token . BLOCK : case Token . CONTINUE : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 905
score: 99.72011553230932
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 905
score: 99.67875162760417
patch: case Token . BLOCK : case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 906
score: 99.77121025219299
patch: case Token . BLOCK : while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 906
score: 99.7706298828125
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; }
rank: 906
score: 99.76104839777543
patch: } case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) ; } }
rank: 906
score: 99.75320342092803
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 906
score: 99.74627488659274
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } case Token . BREAK : if ( n . has CaMeL Children ( ) ) { break ; }
rank: 906
score: 99.73802584134616
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) || n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 906
score: 99.72002121497844
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Branch first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 906
score: 99.67873663651316
patch: case Token . BLOCK : case Token . BREAK : case Token . CONTINUE : case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 907
score: 99.79996744791667
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = ( Node ) n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 907
score: 99.77118326822917
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 907
score: 99.76100218141234
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } }
rank: 907
score: 99.74625901442307
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , compute CaMeL Following ( n ) ) ; }
rank: 907
score: 99.73798245102611
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , n ) ;
rank: 908
score: 99.79993974401596
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ) ) ;
rank: 908
score: 99.7706074617347
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 908
score: 99.76464016154661
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . BLOCK ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 908
score: 99.76097790948276
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( node ) ; }
rank: 908
score: 99.7531502016129
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node < Node > first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 908
score: 99.73782397073413
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 908
score: 99.71988118489584
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return n ; } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 908
score: 99.67855884989754
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) , n ) ;
rank: 909
score: 99.7706074617347
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally {
rank: 909
score: 99.75312366224315
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 909
score: 99.7461162860577
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) || n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , first ) ;
rank: 909
score: 99.73759608114919
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 909
score: 99.71978259477459
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { break ; } case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 910
score: 99.77082104952831
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 910
score: 99.77059849330357
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 910
score: 99.76069779829545
patch: case Token . BLOCK : { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ;
rank: 910
score: 99.75311848958333
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) , n ) ; }
rank: 910
score: 99.74608587449596
patch: case Exception . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 910
score: 99.73753641419492
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return n ; } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 910
score: 99.71963552701271
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 910
score: 99.67816569010417
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 911
score: 99.7708023313492
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 911
score: 99.7375244140625
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return n ; }
rank: 911
score: 99.71944640112704
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { break ; } Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 911
score: 99.67811506885593
patch: case Token . BLOCK : case Token . BREAK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 912
score: 99.7996475395115
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , false ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , false ) ) ;
rank: 912
score: 99.77057756696429
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( first . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 912
score: 99.76402064732143
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 912
score: 99.71937435963115
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 912
score: 99.6780941611842
patch: case Token . RETURN : case Token . BREAK : case Token . CONTINUE : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 913
score: 99.77047631048387
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; }
rank: 913
score: 99.77024605347938
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } }
rank: 913
score: 99.7638003700658
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . RETURN ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 913
score: 99.75993399784483
patch: } Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 913
score: 99.73728249289773
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 913
score: 99.71930338541667
patch: case Token . BLOCK : if ( n . get CaMeL Next ( ) != null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 913
score: 99.67802734375
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else {
rank: 914
score: 99.79959141522988
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) . get CaMeL Parent ( ) ) ) ;
rank: 914
score: 99.7704345703125
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 914
score: 99.7701416015625
patch: case Token . BLOCK : while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 914
score: 99.76366387038935
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Branch . UNCOND ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 914
score: 99.75993049918831
patch: case Token . BLOCK : Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; }
rank: 914
score: 99.75305989583333
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 914
score: 99.74567522321429
patch: case Token . BLOCK : if ( ! n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 914
score: 99.73710779989919
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 914
score: 99.71920626280738
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return n ; }
rank: 914
score: 99.6778064164959
patch: case Token . BLOCK : case Token . CONTINUE : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ) ;
rank: 915
score: 99.79958274147727
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { n . set CaMeL Parent ( n ) ; }
rank: 915
score: 99.7703793174342
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return n . get CaMeL First CaMeL Child ( ) ;
rank: 915
score: 99.77010921556122
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else ;
rank: 915
score: 99.75989879261364
patch: case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , node ) ) ;
rank: 915
score: 99.7530184659091
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 915
score: 99.74537658691406
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } case Token . RETURN :
rank: 915
score: 99.73697415865385
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; }
rank: 915
score: 99.71917093211206
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Object first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 915
score: 99.67774294133773
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) ; }
rank: 916
score: 99.79953985699153
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( next ) ; } }
rank: 916
score: 99.77030222039474
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( node ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 916
score: 99.77008611505681
patch: } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 916
score: 99.76336880387932
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 916
score: 99.7598812705592
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 916
score: 99.75295451536017
patch: case Type . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 916
score: 99.74528503417969
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } switch ( n . get CaMeL Type ( ) ) { case Token . CONTINUE : case Token . CONTINUE :
rank: 916
score: 99.73684599905303
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 916
score: 99.71905924479167
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } * / return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 916
score: 99.67721182839912
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Object first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 917
score: 99.79950272409539
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { n . get CaMeL First CaMeL Child ( ) ; }
rank: 917
score: 99.770263671875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = null ; while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 917
score: 99.77006935586735
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 917
score: 99.76330352247807
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 917
score: 99.75975705866227
patch: } if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } }
rank: 917
score: 99.75291649070945
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { }
rank: 917
score: 99.74520111083984
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } switch ( n . get CaMeL Type ( ) ) { case Token . RETURN : case Token . RETURN :
rank: 917
score: 99.71899814293033
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } }
rank: 917
score: 99.67703919491525
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return g CaMeL Node . get CaMeL Out CaMeL Edges ( ) ; }
rank: 918
score: 99.77013739224138
patch: case Token . BLOCK : while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 918
score: 99.770068359375
patch: case Node . BLOCK : while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 918
score: 99.76316784274194
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 918
score: 99.75971235795454
patch: else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 918
score: 99.75284830729167
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 918
score: 99.74513244628906
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 918
score: 99.71897110849056
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { break ; } case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 918
score: 99.67690990010246
patch: case Di CaMeL Graph CaMeL Edge . ) : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 919
score: 99.76315696022728
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 919
score: 99.75959440949676
patch: case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } }
rank: 919
score: 99.75281871448864
patch: case Token . BLOCK : case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { n . get CaMeL First CaMeL Child ( ) ; }
rank: 919
score: 99.71896517478814
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 919
score: 99.67687174479167
patch: case Token . BREAK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) ) {
rank: 920
score: 99.7993410669192
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 920
score: 99.76998429445877
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , null ) ) ;
rank: 920
score: 99.76982918432203
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 920
score: 99.76304154829545
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 920
score: 99.75280391808712
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { n . has CaMeL Children ( ) ; } }
rank: 920
score: 99.73611548639113
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 920
score: 99.71893717447917
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } ; }
rank: 921
score: 99.76993815104167
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 921
score: 99.76979114163306
patch: if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 921
score: 99.75913149350649
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) . get CaMeL Node ( ) ) ; }
rank: 921
score: 99.74502268145162
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 921
score: 99.71881103515625
patch: case Branch >> if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 921
score: 99.67664645010964
patch: case Token . BLOCK : if ( n . get CaMeL Next ( ) != null ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 922
score: 99.76271932633196
patch: case Token . RETURN : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 922
score: 99.75899832589286
patch: } case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 922
score: 99.75263671875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; }
rank: 922
score: 99.74461263020834
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } switch ( n . get CaMeL Type ( ) ) { case Token . BLOCK :
rank: 922
score: 99.67657791940789
patch: case Token . BLOCK : case Token . CONTINUE : case Token . CONTINUE : case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 923
score: 99.79922003495066
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 923
score: 99.76241179435483
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Branch . UNCOND ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 923
score: 99.75870916193182
patch: } while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 923
score: 99.67649298199153
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 924
score: 99.79920062822166
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ;
rank: 924
score: 99.76958176185344
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 924
score: 99.76233331088362
patch: case Token . RETURN : if ( n . get CaMeL Type ( ) == Token . BLOCK ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 924
score: 99.75213723104508
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 924
score: 99.7440414428711
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; break ;
rank: 924
score: 99.67646655701755
patch: case Token . BLOCK : case Token . CONTINUE : case Token . BREAK : case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 925
score: 99.79916487068965
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , true ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , false ) ) ;
rank: 925
score: 99.75831791392544
patch: } if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 925
score: 99.7520771329365
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return null ;
rank: 925
score: 99.74384765625
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 925
score: 99.71861758474576
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 925
score: 99.6761950476695
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( first ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 926
score: 99.76960834703948
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 926
score: 99.75812550080128
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 926
score: 99.75204326923077
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , first ) ) ;
rank: 926
score: 99.74347027277543
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } switch ( n . has CaMeL Children ( ) ) { case Token . RETURN :
rank: 926
score: 99.71860930879237
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else if ( n . has CaMeL Children ( ) ) { break ; } }
rank: 926
score: 99.67594401041667
patch: case Token . BLOCK : if ( n . has CaMeL Next ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 927
score: 99.76950104703609
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , ) ) ) ; }
rank: 927
score: 99.75811232182018
patch: } if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 927
score: 99.74311680947581
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) , Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 927
score: 99.73526351178279
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ) ; }
rank: 927
score: 99.67593544407895
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 928
score: 99.79885864257812
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( ) ) ) ; }
rank: 928
score: 99.7694979580966
patch: case Token . BLOCK : { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 928
score: 99.76197530455508
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Branch . UNCOND ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 928
score: 99.75806505926724
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 928
score: 99.74266777663935
patch: case Token . BLOCK : if ( n != null && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 928
score: 99.735107421875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ) ;
rank: 928
score: 99.71836103019068
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 929
score: 99.79869495738636
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) , n . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 929
score: 99.76946077641753
patch: case Token . BLOCK : { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; }
rank: 929
score: 99.76863919771634
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 929
score: 99.7619414747807
patch: case Token . RETURN : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 929
score: 99.75791396103897
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 929
score: 99.74247233072917
patch: case Token . BLOCK : case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 929
score: 99.73510328389831
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { break ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 929
score: 99.718212890625
patch: case Token . FUNCTION : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 929
score: 99.67568864493535
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 930
score: 99.79857984639831
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 930
score: 99.76863606770833
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 930
score: 99.7617907914959
patch: case BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 930
score: 99.75775542816558
patch: Node first = Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 930
score: 99.74203853283899
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . get CaMeL Type ( ) == Token . RETURN ) {
rank: 930
score: 99.73497953869048
patch: case Token . FUNCTION : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 930
score: 99.71811275158899
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else return n . get CaMeL Destination ( ) . get CaMeL Value ( ) ;
rank: 930
score: 99.67566338900862
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n ;
rank: 931
score: 99.7685546875
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 931
score: 99.76167149697581
patch: case Token . RETURN : if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 931
score: 99.75774515086206
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 931
score: 99.74191534323771
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } case Token . RETURN :
rank: 931
score: 99.73496734118852
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 932
score: 99.7982889811198
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ; }
rank: 932
score: 99.76924226721938
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 932
score: 99.76845230594758
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( first == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 932
score: 99.75773640422078
patch: case Token . BLOCK : { try { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ;
rank: 932
score: 99.7177734375
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; } else if ( n . has CaMeL Children ( ) ) { break ; }
rank: 932
score: 99.67503597861842
patch: case Token . BLOCK : case Token . CONTINUE : case Token . RETURN : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 933
score: 99.79822887073864
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) . get CaMeL Value ( ) ) ;
rank: 933
score: 99.76841292842742
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( first != null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 933
score: 99.76160481770833
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 933
score: 99.75762728987068
patch: case Token . NONE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 933
score: 99.7515770164696
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; }
rank: 933
score: 99.7418212890625
patch: case Token . BLOCK : case Token . FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 934
score: 99.79805934175532
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ; }
rank: 934
score: 99.76833951271186
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 934
score: 99.76150459155701
patch: case Token . BREAK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 934
score: 99.75762469951923
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 934
score: 99.75150486680327
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return first ; } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 934
score: 99.71750033103814
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { if ( n . has CaMeL Children ( ) ) { break ; }
rank: 934
score: 99.67493710275424
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 935
score: 99.79803093112245
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 935
score: 99.76916881443299
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , parent ) ) ;
rank: 935
score: 99.76831468485169
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 935
score: 99.75746733566811
patch: } Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 935
score: 99.73458806818182
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 935
score: 99.71748046875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node [ ] first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 935
score: 99.67491227489407
patch: case Token . BLOCK : case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 936
score: 99.7980192550505
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 936
score: 99.7608487215909
patch: case BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 936
score: 99.75736107016509
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 936
score: 99.75144883452869
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } finally {
rank: 936
score: 99.71742827316811
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { throw try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 936
score: 99.67485894097223
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n ; }
rank: 937
score: 99.79796362704919
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { n . get CaMeL First CaMeL Child ( ) . close ( ) ; } }
rank: 937
score: 99.76903187144886
patch: case Token . BLOCK : { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( this ) ) ;
rank: 937
score: 99.76026232489224
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 937
score: 99.75730494449013
patch: case Token . BLOCK : try { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 937
score: 99.71731085526316
patch: case Long . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 937
score: 99.67470877511161
patch: case Token . BLOCK : if ( n . get CaMeL Next ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 938
score: 99.79788582785088
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return next . get CaMeL First CaMeL Child ( ) ; }
rank: 938
score: 99.76896746134021
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , node ) ) ;
rank: 938
score: 99.76784227715164
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ;
rank: 938
score: 99.76012002268145
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { int first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 938
score: 99.75728567023026
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) != null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ;
rank: 938
score: 99.75137183779762
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = ( Node ) n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 938
score: 99.7405945824795
patch: case Token . BLOCK : if ( n == null && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 938
score: 99.73438251201924
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 938
score: 99.71729329427083
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; }
rank: 939
score: 99.79773342993951
patch: } else { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 939
score: 99.75133514404297
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first , n ) ; }
rank: 939
score: 99.73377227783203
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ) ) ;
rank: 939
score: 99.71726032838983
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 939
score: 99.6744736493644
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 940
score: 99.79770729758523
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } }
rank: 940
score: 99.7688321200284
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return n ;
rank: 940
score: 99.7599676724138
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 940
score: 99.75693016721492
patch: Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 940
score: 99.75132308467742
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; }
rank: 940
score: 99.74018471927967
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , next ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 940
score: 99.73357747395833
patch: case Token . BLOCK : if ( n . get CaMeL Next ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 940
score: 99.71718584480932
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } ;
rank: 940
score: 99.674462890625
patch: case Token . RETURN : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) ) {
rank: 941
score: 99.79765181107955
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ;
rank: 941
score: 99.76882102272727
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 941
score: 99.76710697642544
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 941
score: 99.75984700520833
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 941
score: 99.7563977363782
patch: } case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 941
score: 99.751318359375
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) . get CaMeL Type ( ) == Token . BLOCK ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 941
score: 99.7401516154661
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } switch ( n . has CaMeL Children ( ) ) { case Token . BREAK :
rank: 941
score: 99.73352444556451
patch: case Token . BLOCK : case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 941
score: 99.71715887661638
patch: case Token . BLOCK : if ( n . get CaMeL Next ( ) != null ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 941
score: 99.67431640625
patch: try { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 942
score: 99.79740858569588
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 942
score: 99.75971235795454
patch: case Branch : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 942
score: 99.73330688476562
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; }
rank: 942
score: 99.71699549788136
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) ) { return first ; }
rank: 942
score: 99.67421361019737
patch: case Token . BREAK : case Token . BREAK : case Token . BREAK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 943
score: 99.79729352678571
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ; } }
rank: 943
score: 99.76878403172348
patch: while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 943
score: 99.76698882004311
patch: case Token . BLOCK : while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 943
score: 99.7596435546875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 943
score: 99.75620180600649
patch: case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; } }
rank: 943
score: 99.7393863075658
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n ) ) ;
rank: 943
score: 99.73330543154762
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 943
score: 99.71691473599138
patch: case Branch . UNCOND : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 944
score: 99.79717394770408
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 944
score: 99.76877663352273
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n , n . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 944
score: 99.76690995065789
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 944
score: 99.75611936891234
patch: } if ( n . get CaMeL First CaMeL Child ( ) . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 944
score: 99.75107421875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { n . get CaMeL First CaMeL Child ( ) . next ( ) ; }
rank: 944
score: 99.73265729631696
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { try { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 944
score: 99.71684738685344
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } * / return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 944
score: 99.67404228344299
patch: case Token . BLOCK : case Token . CONTINUE : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 945
score: 99.79708984375
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) . get CaMeL Parent ( ) ) ) ) ;
rank: 945
score: 99.76874743009868
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 945
score: 99.7667080965909
patch: } else { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 945
score: 99.75948780980603
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { final Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 945
score: 99.7559022066886
patch: } Token first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 945
score: 99.75086030505952
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) ; } }
rank: 945
score: 99.73773403825432
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , n ) ; }
rank: 945
score: 99.71669756355932
patch: case Di CaMeL Graph CaMeL Edge . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 945
score: 99.67389665570175
patch: case Token . RETURN : case Token . CONTINUE : case Token . BREAK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 946
score: 99.79701334635416
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { n . get CaMeL Parent ( ) . has CaMeL Children ( ) ; }
rank: 946
score: 99.76857482280928
patch: case Token . BLOCK : } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 946
score: 99.76660943800404
patch: if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 946
score: 99.75543450689935
patch: case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) , n ) ;
rank: 946
score: 99.75071667086694
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) != null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 946
score: 99.73264600409836
patch: case Token . BLOCK : case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 946
score: 99.71662008351294
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( null ) ; }
rank: 946
score: 99.67387778072033
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else
rank: 947
score: 99.76857421875
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( ) ) ; }
rank: 947
score: 99.76628707627118
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 947
score: 99.75876380657327
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 947
score: 99.75513646509741
patch: case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } }
rank: 947
score: 99.75067729334677
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , this ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , this ) ; }
rank: 947
score: 99.73728813559322
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , node ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 947
score: 99.71658170021186
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } ;
rank: 948
score: 99.796875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ;
rank: 948
score: 99.76623046875
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 948
score: 99.75063554067461
patch: case Token . BLOCK : case Token . LINE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 948
score: 99.73723493303571
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 948
score: 99.73236083984375
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 948
score: 99.71649894067797
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return cur CaMeL Cfg . get CaMeL First CaMeL Child ( ) ; }
rank: 948
score: 99.67366832386364
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else {
rank: 949
score: 99.76844394329896
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return n . get CaMeL First CaMeL Child ( ) ; }
rank: 949
score: 99.76601089969758
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 949
score: 99.75802061987704
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { break ; } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 949
score: 99.75498744419643
patch: } { } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 949
score: 99.73686606197033
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , null ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 949
score: 99.73215835813492
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) ) ; } else if ( n . has CaMeL Children ( ) ) { break ;
rank: 949
score: 99.7160858689693
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) ; }
rank: 949
score: 99.67365679824562
patch: case Token . BLOCK : case Token . RETURN : case Token . CONTINUE : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 950
score: 99.76818169487848
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 950
score: 99.7580078125
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . BLOCK ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 950
score: 99.75492136101974
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; }
rank: 950
score: 99.75031217981558
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ;
rank: 950
score: 99.7367098721591
patch: case Type . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 950
score: 99.73203765368852
patch: case Token . BLOCK : case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ) ;
rank: 950
score: 99.71584556842673
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { String first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 950
score: 99.67241467927632
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) ; }
rank: 951
score: 99.7966434439433
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 951
score: 99.76793049291237
patch: case Type . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 951
score: 99.7545315926535
patch: } case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 951
score: 99.75009260506465
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 951
score: 99.71564898574562
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL Last CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 951
score: 99.6718321683114
patch: case Token . BLOCK : case Token . BREAK : case Token . BREAK : case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 952
score: 99.79642195554123
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; }
rank: 952
score: 99.76524077868852
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } catch ( ;
rank: 952
score: 99.75790055071721
patch: case Token . BREAK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 952
score: 99.75443812779018
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else {
rank: 952
score: 99.75005340576172
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = node . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 952
score: 99.73354997306035
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { break ; } } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 952
score: 99.73153336321721
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 952
score: 99.71561341366525
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } ;
rank: 952
score: 99.67177220394737
patch: case Token . RETURN : case Token . BREAK : case Token . BREAK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 953
score: 99.76778411865234
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return first ; }
rank: 953
score: 99.76522090517241
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 953
score: 99.7575469435307
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( this ) ;
rank: 953
score: 99.75439453125
patch: } if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 953
score: 99.749951171875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n , n ) ; }
rank: 953
score: 99.73207563920455
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 954
score: 99.767763671875
patch: case Token . BLOCK : { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( ) ) ;
rank: 954
score: 99.76515327065678
patch: case Token . BLOCK : { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 954
score: 99.75435093470982
patch: } try { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 954
score: 99.74990549395162
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , null ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , null ) ; }
rank: 954
score: 99.73193359375
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , ) ;
rank: 954
score: 99.73139728483606
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ) ;
rank: 954
score: 99.71518049568965
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 955
score: 99.79549573131443
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) . get CaMeL Parent ( ) ) ) ;
rank: 955
score: 99.76492513020834
patch: } else { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 955
score: 99.75734049479166
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 955
score: 99.75395122327302
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 955
score: 99.74987993084017
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , ) ; }
rank: 955
score: 99.71500651041667
patch: case Branch > 1 : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 956
score: 99.79539998372395
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) . get CaMeL Value ( ) ) ) ; }
rank: 956
score: 99.76766183035714
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 956
score: 99.76483878442797
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 956
score: 99.75710227272727
patch: case FUNCTION : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 956
score: 99.75377308238636
patch: case Token . BLOCK : { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 956
score: 99.71462486530173
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 956
score: 99.6701874314693
patch: case Token . BREAK : case Token . CONTINUE : case Token . CONTINUE : case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 957
score: 99.79534280711206
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { Node first = n . get CaMeL First CaMeL Child ( ) ;
rank: 957
score: 99.76748046875
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( parent ) ) ;
rank: 957
score: 99.76481711647727
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 957
score: 99.7570068359375
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 957
score: 99.74959834929436
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; }
rank: 957
score: 99.73063151041667
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) , ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 957
score: 99.72942116477273
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 957
score: 99.71452113560268
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 957
score: 99.67005504261364
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) ) {
rank: 958
score: 99.79533011014344
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { n . get CaMeL First CaMeL Child ( ) . clear ( ) ; } }
rank: 958
score: 99.76632743969299
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 958
score: 99.76480852971312
patch: } else { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 958
score: 99.75694537984914
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 958
score: 99.75320595189145
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ;
rank: 958
score: 99.7491966985887
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 958
score: 99.73046074538935
patch: case Token . BLOCK : case Token . RETURN : if ( n . get CaMeL Next ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 958
score: 99.71450109649123
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { break ; } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 959
score: 99.79506429036458
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( first ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 959
score: 99.7654296875
patch: case Node . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( this ) ) ;
rank: 959
score: 99.7646484375
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 959
score: 99.75689019097223
patch: case BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 959
score: 99.75311358563312
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 959
score: 99.72666196469908
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } switch ( n . get CaMeL Type ( ) ) {
rank: 960
score: 99.76460040983606
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 960
score: 99.75308388157895
patch: } try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 960
score: 99.7490943170363
patch: case Type . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; }
rank: 960
score: 99.73037574404762
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ; } else if ( n . has CaMeL Children ( ) ) { break ;
rank: 960
score: 99.7142269736842
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 960
score: 99.66955336084905
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n ;
rank: 961
score: 99.79453461745689
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( next ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 961
score: 99.76453508649554
patch: } else { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 961
score: 99.75238909040179
patch: } ) ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 961
score: 99.7302001953125
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 961
score: 99.726171875
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 961
score: 99.71411561129386
patch: case Branch >> * / if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 961
score: 99.66911368534483
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 962
score: 99.79441879734848
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent CaMeL Node ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent CaMeL Node ( ) ) ;
rank: 962
score: 99.7644921875
patch: case Token . BLOCK : { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( ) ) ) ;
rank: 962
score: 99.76433148300438
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = first . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 962
score: 99.75636478892544
patch: case Token . BREAK : if ( n . get CaMeL Type ( ) == Token . FUNCTION ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 962
score: 99.75217110770089
patch: case try { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 962
score: 99.74881079889113
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; }
rank: 962
score: 99.7301805840164
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . get CaMeL Next ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 962
score: 99.72442237367021
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 962
score: 99.71393571820175
patch: case Branch . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 962
score: 99.66891043526786
patch: try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 963
score: 99.79435782596983
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = first . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 963
score: 99.76422526041667
patch: case Token . BLOCK : { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 963
score: 99.763701171875
patch: case Token . BLOCK : { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( ) ) ;
rank: 963
score: 99.75606984105603
patch: case Token . RETURN : if ( n . get CaMeL Type ( ) == Token . RETURN ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 963
score: 99.75200544084821
patch: } if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 963
score: 99.724091796875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 963
score: 99.71353310032895
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { break ; } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 963
score: 99.66889391447368
patch: case Token . BLOCK : case Token . RETURN : case Token . BREAK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 964
score: 99.76412589089912
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( node ) ;
rank: 964
score: 99.75137765066964
patch: } if ( n . has CaMeL Children ( ) ) { try { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 964
score: 99.72236328125
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) || n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 964
score: 99.71309116908482
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 964
score: 99.66868373325893
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { if ( n . has CaMeL Children ( ) ) {
rank: 965
score: 99.7939453125
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { Thread . current CaMeL Thread ( ) . interrupt ( ) ; } }
rank: 965
score: 99.7639892578125
patch: try { case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 965
score: 99.75571868379237
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 965
score: 99.75100868626645
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) == null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } }
rank: 965
score: 99.71656976744185
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 965
score: 99.66796875
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL Out CaMeL Edges ( ) ; }
rank: 966
score: 99.79391571969697
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Last CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ;
rank: 966
score: 99.76393285290948
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 966
score: 99.762412109375
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 966
score: 99.75569942079741
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { int first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 966
score: 99.75100272042411
patch: } } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 966
score: 99.74834304559427
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return next ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 966
score: 99.72904392930327
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( compute CaMeL Following ( n ) ) ; }
rank: 966
score: 99.71286492598684
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 966
score: 99.66795099431818
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; }
rank: 967
score: 99.793271484375
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ) ) ) ;
rank: 967
score: 99.761669921875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } finally {
rank: 967
score: 99.75561109639831
patch: case Token . BLOCK : if ( n . get CaMeL Type ( ) == Token . RETURN ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 967
score: 99.75088936941964
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 967
score: 99.72888383709017
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 967
score: 99.71273367745536
patch: if ( n . has CaMeL Children ( ) ) { break ; } case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 967
score: 99.66745476973684
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL Destination ( ) . get CaMeL Value ( ) ; } }
rank: 968
score: 99.79318359375
patch: case Token . BLOCK : if ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) . get CaMeL Value ( ) ) { return n ; }
rank: 968
score: 99.75554242050438
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node next = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 968
score: 99.75062144886364
patch: } if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 968
score: 99.71265933388158
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) ) { break ;
rank: 968
score: 99.70193481445312
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } case Token . RETURN :
rank: 968
score: 99.66730291193181
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL Next ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 969
score: 99.7930683992347
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( ) . get CaMeL First CaMeL Child ( ) ) ;
rank: 969
score: 99.75535396107456
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( false ) ;
rank: 969
score: 99.74993785511364
patch: } : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 969
score: 99.71258877840908
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 969
score: 99.69859095982143
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 969
score: 99.6672577439693
patch: case Token . BLOCK : case Token . BREAK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 970
score: 99.76303998161765
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 970
score: 99.75491707785088
patch: case Token . RETURN : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 970
score: 99.74775721663136
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ;
rank: 970
score: 99.72792632004311
patch: case Token . BLOCK : case Token . BREAK : case Token . CONTINUE : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 970
score: 99.69288126627605
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } case Token . BREAK :
rank: 971
score: 99.75476526331019
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 971
score: 99.74779829545454
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 971
score: 99.74746907552084
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n , first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 971
score: 99.72742319915254
patch: case Token . BLOCK : case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 971
score: 99.71232386997768
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { try { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 971
score: 99.68568193151596
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 971
score: 99.66710354989036
patch: case Token . BLOCK : case Token . BREAK : case Token . CONTINUE : case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 972
score: 99.7927734375
patch: case Token . BLOCK : if ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 972
score: 99.74725341796875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL Parent ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 972
score: 99.74604936079545
patch: } if ( n . has CaMeL Children ( ) ) { Node first = node . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 972
score: 99.68412358710107
patch: case Token . BLOCK : case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 973
score: 99.79276739690722
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) . get CaMeL Value ( ) ) ;
rank: 973
score: 99.7611416903409
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 973
score: 99.7598365045363
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return null ; }
rank: 973
score: 99.75458299067982
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { String first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 973
score: 99.74703776041666
patch: case Token . BLOCK : if ( n . get CaMeL First CaMeL Child ( ) != null ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { n . get CaMeL First CaMeL Child ( ) ; }
rank: 973
score: 99.72685867059427
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ) ;
rank: 973
score: 99.71062911184211
patch: case Node . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 973
score: 99.68232421875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else {
rank: 973
score: 99.66678799715909
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 974
score: 99.79257611146907
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent ( ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ;
rank: 974
score: 99.76095145089286
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 974
score: 99.7530517578125
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { break ; } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 974
score: 99.74628409692797
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ;
rank: 974
score: 99.74521484375
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 974
score: 99.72661052766394
patch: case Token . BLOCK : case Token . RETURN : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ) ;
rank: 974
score: 99.67298473011364
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ;
rank: 974
score: 99.66450718470982
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 975
score: 99.79255445075758
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n . get CaMeL First CaMeL Child ( ) ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ;
rank: 975
score: 99.75811434659092
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 975
score: 99.74600271451271
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; } else { return n . get CaMeL First CaMeL Child ( ) ; }
rank: 975
score: 99.74503728693182
patch: } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 975
score: 99.7265625
patch: case Token . BLOCK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 975
score: 99.70871310763889
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { break ; } case Token . RETURN : if ( n . has CaMeL Children ( ) ) { break ; } else if ( n . has CaMeL Children ( ) ) { break ; }
rank: 975
score: 99.6684802827381
patch: case Type . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 975
score: 99.66329390914352
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 976
score: 99.7925103635204
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 976
score: 99.75727815448113
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 976
score: 99.75268110795454
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 976
score: 99.74487718485169
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } }
rank: 976
score: 99.74481879340277
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 976
score: 99.7264052568856
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 976
score: 99.70869140625
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else switch ( n . get CaMeL Type ( ) ) {
rank: 976
score: 99.66317313058036
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 976
score: 99.66263253348214
patch: case Branch . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 977
score: 99.7924558080808
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Parent CaMeL Node ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ;
rank: 977
score: 99.75713778409092
patch: case Token . BLOCK : { if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 977
score: 99.75204903738839
patch: case BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 977
score: 99.74465460526316
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { n . close ( ) ; }
rank: 977
score: 99.7263623847336
patch: case Token . BLOCK : case Token . BREAK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ) ;
rank: 977
score: 99.70810372488839
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 977
score: 99.66271306818182
patch: * / if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 977
score: 99.62839704241071
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) {
rank: 978
score: 99.755859375
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 978
score: 99.73102678571429
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 978
score: 99.726318359375
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 978
score: 99.66174768518519
patch: case Token . BREAK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n ; }
rank: 978
score: 99.61908123944256
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 979
score: 99.7578553316886
patch: case Token . BLOCK : while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) ; }
rank: 979
score: 99.75560619212963
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 979
score: 99.75182883522727
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 979
score: 99.74361746651786
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; } finally { n . has CaMeL Children ( ) ; }
rank: 979
score: 99.72739545036765
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( first != null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 979
score: 99.66083984375
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) ) {
rank: 979
score: 99.61631651182432
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) {
rank: 980
score: 99.79092520254629
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { n . has CaMeL Children ( ) ; }
rank: 980
score: 99.75648834745763
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 980
score: 99.75134491502193
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( null ) ;
rank: 980
score: 99.74325666756465
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , first ) ; } finally { n . get CaMeL First CaMeL Child ( ) ; }
rank: 980
score: 99.70610795454546
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } switch ( n . get CaMeL Type ( ) ) {
rank: 980
score: 99.66071555397727
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 980
score: 99.61485188802084
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ;
rank: 981
score: 99.79042376893939
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( ) . get CaMeL First CaMeL Child ( ) ) ; }
rank: 981
score: 99.75156618514151
patch: if ( n . has CaMeL Children ( ) ) { Node first = null ; if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 981
score: 99.75119850852273
patch: case Token . BLOCK : if ( ! n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 981
score: 99.74285016741071
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; }
rank: 981
score: 99.724833984375
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 981
score: 99.72456799523304
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return n ;
rank: 981
score: 99.57866840977823
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 982
score: 99.79001242897728
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { n . set CaMeL Parent ( next ) ; }
rank: 982
score: 99.75077601841518
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n , n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 982
score: 99.74967134915866
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 982
score: 99.74181914747807
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return node . get CaMeL First CaMeL Child ( ) ; }
rank: 982
score: 99.72326171875
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 982
score: 99.70495383522727
patch: case 0 : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 982
score: 99.6603370949074
patch: case Token . BLOCK : case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n ; }
rank: 982
score: 99.55285223599138
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) || n . get CaMeL Type ( ) == Token . FUNCTION ) {
rank: 983
score: 99.78897958431604
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { System . exit ( 0 ) ; }
rank: 983
score: 99.75491707785088
patch: case Token . BLOCK : while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 983
score: 99.75067471590908
patch: case CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 983
score: 99.74613204656863
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 983
score: 99.74169065241227
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL Parent ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } }
rank: 983
score: 99.72409583782327
patch: case Token . BLOCK : case Token . RETURN : if ( n . has CaMeL Children ( ) ) { if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 983
score: 99.71811930338542
patch: case Token . BLOCK : { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 983
score: 99.659375
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 983
score: 99.55014143318965
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) && n . get CaMeL Type ( ) == Token . FUNCTION ) {
rank: 984
score: 99.78774328399123
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } finally { return n . get CaMeL First CaMeL Child ( ) ; }
rank: 984
score: 99.72412109375
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 984
score: 99.72392247086864
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 984
score: 99.70408380681818
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 984
score: 99.701171875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 984
score: 99.5106201171875
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 985
score: 99.78765625
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Last CaMeL Child ( ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL First CaMeL Child ( ) ) ; }
rank: 985
score: 99.7544373629386
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n . get CaMeL First CaMeL Child ( ) ; }
rank: 985
score: 99.75010463169643
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } }
rank: 985
score: 99.74042283442982
patch: case Token . BLOCK : case Token . BLOCK : case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 985
score: 99.7235583289195
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ) ; }
rank: 985
score: 99.69955962558963
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { break ; } case Token . BREAK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 985
score: 99.65568801591981
patch: case Token . BREAK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n ;
rank: 985
score: 99.49513671875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) || n . has CaMeL Children ( ) ) {
rank: 986
score: 99.7528469279661
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 986
score: 99.72328764816811
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 986
score: 99.71082394622093
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; }
rank: 986
score: 99.65398363797169
patch: case Token . BLOCK : case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n ;
rank: 986
score: 99.44453699448529
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) {
rank: 987
score: 99.78733132102273
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { n . set CaMeL Parent ( null ) ; }
rank: 987
score: 99.7522841631356
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 987
score: 99.74925013950893
patch: case Token . FUNCTION : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 987
score: 99.73978035910088
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( ) ; }
rank: 987
score: 99.72265625
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 987
score: 99.7100830078125
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 987
score: 99.69101009728773
patch: case $STRING$ : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 987
score: 99.67197265625
patch: } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ) ;
rank: 987
score: 99.6531231219952
patch: case Token . BLOCK : case Token . CONTINUE : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 987
score: 99.42938232421875
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { break ; }
rank: 988
score: 99.78468572443182
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 988
score: 99.69334010074013
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 988
score: 99.6892412293632
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else if ( n . has CaMeL Children ( ) ) { break ; }
rank: 988
score: 99.65102631191037
patch: case Token . RETURN : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n ;
rank: 988
score: 99.37859143708882
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { break ;
rank: 989
score: 99.7478515625
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 989
score: 99.72127706962719
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ; }
rank: 989
score: 99.682265625
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { break ; } else if ( n . has CaMeL Children ( ) ) { break ; } else if ( n . has CaMeL Children ( ) ) { break ; }
rank: 989
score: 99.63371725643383
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 989
score: 99.23892211914062
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) )
rank: 990
score: 99.78429509943182
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { System . err . println ( $STRING$ ) ; }
rank: 990
score: 99.75184553760593
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 990
score: 99.74594003182871
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null || n . get CaMeL Next ( ) . get CaMeL Type ( ) == Token . FUNCTION ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 990
score: 99.7368592379386
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; }
rank: 990
score: 99.71506980613425
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { break ; } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 990
score: 99.68011833639706
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } else { return n ; }
rank: 990
score: 99.67642372532895
patch: } if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 990
score: 99.63104926215277
patch: } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 990
score: 99.04210316051136
patch: case Token . BLOCK : case Token . CONTINUE :
rank: 991
score: 99.78159466911765
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } finally { return first ; }
rank: 991
score: 99.75098512883773
patch: case Token . BLOCK : while ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 991
score: 99.66922904349663
patch: if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 991
score: 99.63011136968085
patch: case Token . BREAK : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 991
score: 99.03656560724431
patch: case Token . BLOCK : case Token . RETURN :
rank: 992
score: 99.77711342865567
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { n . close ( ) ; } }
rank: 992
score: 99.73649992766204
patch: case Token . BLOCK : case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return null ; }
rank: 992
score: 99.7098939185049
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ) ;
rank: 992
score: 99.67650868941327
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { break ; } case Token . RETURN : case Token . CONTINUE : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { break ; }
rank: 992
score: 99.62738946143617
patch: case Token . BLOCK : case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 992
score: 99.5830711082176
patch: } Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 992
score: 99.0137606534091
patch: case Token . BLOCK : case Token . BREAK :
rank: 993
score: 99.77459831957547
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { Thread . sleep ( $NUMBER$ ) ; }
rank: 993
score: 99.70939895341981
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 993
score: 99.6754225127551
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { break ; } case Token . BREAK : case Token . CONTINUE : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { break ; }
rank: 993
score: 99.6268907912234
patch: case Token . RETURN : case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 993
score: 99.54117838541667
patch: } Token first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 993
score: 99.42989773220486
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 993
score: 98.9638671875
patch: case Token . BLOCK : case Token . FUNCTION :
rank: 994
score: 99.7661803002451
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } finally { return next ; }
rank: 994
score: 99.7314453125
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } finally { n . close ( ) ; }
rank: 994
score: 99.71407645089286
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 994
score: 99.44655539772727
patch: case Token . BLOCK : return Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ;
rank: 994
score: 99.38893636067708
patch: case Token . BLOCK : return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 994
score: 98.8460693359375
patch: case Token . BLOCK :
rank: 995
score: 99.76393037683823
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } finally { return n ; }
rank: 995
score: 99.74838952850877
patch: case Node . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 995
score: 99.73084214154412
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; } finally { return null ; }
rank: 995
score: 99.71184747869319
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 995
score: 99.66315866023936
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { break ; } else if ( n . has CaMeL Children ( ) ) { break ; } } switch ( n . get CaMeL Type ( ) ) {
rank: 995
score: 99.61961829144022
patch: case Di CaMeL Graph CaMeL Edge . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 995
score: 99.2140362079327
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 995
score: 98.29164632161458
patch: case Token . RETURN :
rank: 996
score: 99.75783242984694
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return first ; }
rank: 996
score: 99.72513595281863
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return first ; } else { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ; }
rank: 996
score: 99.68233330305233
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ; }
rank: 996
score: 99.17415677584134
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 996
score: 98.28114827473958
patch: case Token . BREAK :
rank: 997
score: 99.74635120738637
patch: } else if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; } finally { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ; }
rank: 997
score: 99.70244806463069
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first , n ) ;
rank: 997
score: 99.70018368675595
patch: case Token . BREAK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 997
score: 99.66392299107143
patch: case Token . RETURN : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 997
score: 99.31461879185268
patch: } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( n ) ;
rank: 997
score: 98.47766985212054
patch: case Token . BLOCK : {
rank: 997
score: 98.14707438151042
patch: case Type . BLOCK :
rank: 998
score: 99.66332397460937
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 998
score: 99.66206190321181
patch: case Token . BLOCK : if ( n . get CaMeL Parent ( ) == null ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 998
score: 99.59029715401786
patch: case Token . CONTINUE : if ( n . has CaMeL Children ( ) ) { Node first = n . get CaMeL First CaMeL Child ( ) ; return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 998
score: 99.29738071986607
patch: } return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( first ) ;
rank: 998
score: 98.1052958170573
patch: case Branch . BLOCK :
rank: 999
score: 99.64952895220588
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 999
score: 99.63572862413194
patch: case Token . BLOCK : if ( n . has CaMeL Children ( ) ) { return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Follow CaMeL Node ( n ) ) ;
rank: 999
score: 99.56925241570724
patch: return try CaMeL Remove CaMeL Unconditional CaMeL Branching ( Control CaMeL Flow CaMeL Analysis . compute CaMeL Follow CaMeL Node ( n ) . get CaMeL Destination ( ) . get CaMeL Value ( ) ) ;
rank: 999
score: 99.05979225852273
patch: case Token . BLOCK : case Token . BLOCK :
rank: 999
score: 98.10385131835938
patch: case Node . BLOCK :
rank: 999
score: 97.52946472167969
patch: } else {
rank: 1000
score: 99.53128051757812
patch: case Di CaMeL Graph CaMeL Edge < Node , Branch >> g CaMeL Node = try CaMeL Remove CaMeL Unconditional CaMeL Branching ( compute CaMeL Following ( n ) ) ;
rank: 1000
score: 98.030029296875
patch: case Exception . BLOCK :
rank: 1000
score: 97.21882629394531
patch: case Branch >>
rank: 1000
score: 94.50226593017578
patch: }
