rank: 1
score: 99.8609952059659
patch: case $STRING$ : sb . append ( $STRING$ ) ;
rank: 1
score: 99.83543043870192
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 1
score: 99.6894763764881
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) . append ( $STRING$ ) ;
rank: 1
score: 99.685791015625
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ;
rank: 2
score: 99.72545276988636
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; break ;
rank: 2
score: 99.67315204326923
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; break ;
rank: 2
score: 99.65774972098214
patch: case $STRING$ : sb . append ( $STRING$ ) ; } return sb . to CaMeL String ( ) ;
rank: 3
score: 99.69695281982422
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ :
rank: 3
score: 99.69638893821023
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ; break ;
rank: 3
score: 99.65721784319196
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; }
rank: 3
score: 99.64734700520833
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; $STRING$ ;
rank: 3
score: 99.62860717773438
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ; break ;
rank: 3
score: 99.60836452907986
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( $STRING$ ) ;
rank: 4
score: 99.68190002441406
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ;
rank: 4
score: 99.67420372596153
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ;
rank: 4
score: 99.66517549402573
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; default : break ;
rank: 4
score: 99.66446533203126
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( backslash CaMeL Escape ) ;
rank: 4
score: 99.63275615985577
patch: case 1 : sb . append ( $STRING$ ) ; break ;
rank: 4
score: 99.59535522460938
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( $STRING$ ) ; break ;
rank: 4
score: 99.58894653320313
patch: case $STRING$ : sb . append ( $STRING$ ) ; return sb . to CaMeL String ( ) ;
rank: 5
score: 99.65491485595703
patch: case $STRING$ : case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 5
score: 99.64299180772569
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( c ) ;
rank: 5
score: 99.6158088235294
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; $STRING$ ; break ;
rank: 5
score: 99.60981889204545
patch: case $STRING$ : sb . append ( c ) ;
rank: 5
score: 99.6072998046875
patch: case 0 : sb . append ( $STRING$ ) ; break ;
rank: 5
score: 99.6040371981534
patch: case $STRING$ : sb . append ( Character . to CaMeL Char CaMeL Array ( c ) ) ; break ;
rank: 5
score: 99.5856464092548
patch: case $STRING$ : sb . append ( c ) ; break ;
rank: 5
score: 99.5827407836914
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; } break ;
rank: 6
score: 99.64220660665761
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( sb . char CaMeL At ( i ) ) ;
rank: 6
score: 99.61075032552084
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; break ;
rank: 6
score: 99.6046875
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; break ;
rank: 7
score: 99.64023166232639
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) ; break ;
rank: 7
score: 99.61073521205357
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; ;
rank: 7
score: 99.59737820095486
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; break ; case $STRING$ :
rank: 8
score: 99.55780029296875
patch: case $STRING$ : sb . append ( $STRING$ ) ; } break ;
rank: 8
score: 99.55360717773438
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; sb . append ( $STRING$ ) ;
rank: 9
score: 99.63135827105978
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( s . char CaMeL At ( i ) ) ;
rank: 9
score: 99.5873779296875
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ;
rank: 9
score: 99.5543212890625
patch: case $STRING$ : sb . append ( quote ) ;
rank: 9
score: 99.5538330078125
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ;
rank: 9
score: 99.53551567925348
patch: case $STRING$ : break ; case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 10
score: 99.63126627604167
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; default : break ; }
rank: 10
score: 99.62267303466797
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) ;
rank: 10
score: 99.55250854492188
patch: sb . append ( $STRING$ ) ; break ;
rank: 10
score: 99.54674762228261
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; break ;
rank: 10
score: 99.538916015625
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$
rank: 10
score: 99.52798227163461
patch: case STRING : sb . append ( $STRING$ ) ; break ;
rank: 11
score: 99.62071397569444
patch: case $STRING$ : sb . append ( sb . char CaMeL At ( i ) ) ;
rank: 11
score: 99.61920928955078
patch: case $STRING$ : break ; case $STRING$ : sb . append ( $STRING$ ) ;
rank: 11
score: 99.55129107306985
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; else break ; }
rank: 11
score: 99.54446847098214
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ;
rank: 11
score: 99.524169921875
patch: case $STRING$ : try { sb . append ( $STRING$ ) ; break ;
rank: 11
score: 99.52136993408203
patch: case $STRING$ : sb . append ( c ) ; break ; case $STRING$ :
rank: 12
score: 99.61359405517578
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) ;
rank: 12
score: 99.6057637532552
patch: case $STRING$ : sb . append ( $STRING$ ) ; }
rank: 12
score: 99.57197498139881
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( c ) ;
rank: 12
score: 99.54414295014881
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; break ;
rank: 12
score: 99.53759765625
patch: case $STRING$ : sb . append ( sb . append ( $STRING$ ) ) ; break ;
rank: 12
score: 99.53425736860795
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; sb . append ( $STRING$ ) ; break ;
rank: 12
score: 99.5208231608073
patch: $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 13
score: 99.61216227213542
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( backslash CaMeL Escape ) ;
rank: 13
score: 99.61166779891305
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) . append ( $STRING$ ) ;
rank: 13
score: 99.60209517045455
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( $STRING$ ) ) ; break ;
rank: 13
score: 99.564580078125
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) . append ( $STRING$ ) ;
rank: 13
score: 99.54523577008929
patch: case $STRING$ : sb . append ( $STRING$ ) ; return sb . to CaMeL String ( ) ; }
rank: 13
score: 99.5318936434659
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( backslash CaMeL Escape ) ; break ;
rank: 13
score: 99.52942708333333
patch: break ; case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 14
score: 99.60049099392361
patch: case $STRING$ : sb . append ( c ) ; sb . append ( $STRING$ ) ;
rank: 14
score: 99.6004638671875
patch: case $STRING$ : sb . append ( Character . to CaMeL Hex CaMeL String ( c ) ) ; break ;
rank: 14
score: 99.55871000744048
patch: case $NUMBER$ : sb . append ( $STRING$ ) . append ( c ) . append ( $STRING$ ) ;
rank: 14
score: 99.54508209228516
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; else break ;
rank: 14
score: 99.51316324869792
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : break ;
rank: 14
score: 99.48804473876953
patch: case $STRING$ : sb . append ( quote ) ; break ; case $STRING$ :
rank: 15
score: 99.60054738898026
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( doublequote CaMeL Escape ) ;
rank: 15
score: 99.59961615668402
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) ; break ;
rank: 15
score: 99.52588829627403
patch: case $STRING$ : sb . append ( $STRING$ ) ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ;
rank: 15
score: 99.50875854492188
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; $STRING$ ; ;
rank: 15
score: 99.5071029663086
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ ;
rank: 15
score: 99.47842172475961
patch: case $STRING$ : sb . append ( quote ) ; break ;
rank: 16
score: 99.50107643821023
patch: case $NUMBER$ : sb . append ( $STRING$ ) ;
rank: 16
score: 99.4610595703125
patch: break ; case $STRING$ : sb . append ( $STRING$ ) ;
rank: 17
score: 99.59380493164062
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; sb . append ( c ) ;
rank: 17
score: 99.59115998641305
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; ; break ;
rank: 17
score: 99.5906649502841
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( sb . to CaMeL String ( ) ) ;
rank: 17
score: 99.55445397418478
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) . append ( $STRING$ ) ; break ;
rank: 17
score: 99.53509114583333
patch: case $STRING$ ? $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 17
score: 99.51171264648437
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( c ) ; break ;
rank: 17
score: 99.50090680803571
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; $STRING$
rank: 17
score: 99.50007847377232
patch: case $STRING$ : sb . append ( $STRING$ ) ; return $STRING$ ;
rank: 18
score: 99.55363159179687
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ;
rank: 18
score: 99.53248009314903
patch: case $STRING$ : sb . append ( $STRING$ ) ; continue ;
rank: 18
score: 99.50003255208334
patch: case $STRING$ : break ; sb . append ( $STRING$ ) ; break ;
rank: 18
score: 99.48824310302734
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $NUMBER$ :
rank: 19
score: 99.55213994565217
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; break ; }
rank: 19
score: 99.52926475123355
patch: case $STRING$ : sb . append ( $STRING$ ) ; } sb . append ( $STRING$ ) ;
rank: 19
score: 99.51149583899456
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : sb . append ( $STRING$ ) ;
rank: 19
score: 99.48575592041016
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case 1 :
rank: 19
score: 99.44969177246094
patch: case $STRING$ : sb . append ( c ) . append ( $STRING$ ) ;
rank: 20
score: 99.58264741443452
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( sb . append ( c ) ) ;
rank: 20
score: 99.57605561755952
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( doublequote CaMeL Escape ) ;
rank: 20
score: 99.55000385485198
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( $STRING$ ) ; }
rank: 20
score: 99.52701822916667
patch: sb . append ( $STRING$ ) . append ( sb . to CaMeL String ( ) ) ; break ;
rank: 20
score: 99.50757853190105
patch: case $STRING$ : String CaMeL Builder sb = new String CaMeL Builder ( s . char CaMeL At ( i ) ) ;
rank: 20
score: 99.499755859375
patch: case $STRING$ : { sb . append ( $STRING$ ) ; break ;
rank: 20
score: 99.48458099365234
patch: case $STRING$ : sb . append ( sb . append ( $STRING$ ) ) ;
rank: 21
score: 99.52570657169117
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; } break ; }
rank: 21
score: 99.50474039713542
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( sb . to CaMeL String ( ) ) ;
rank: 21
score: 99.43948567708334
patch: case s . length ( ) : sb . append ( $STRING$ ) ;
rank: 22
score: 99.5474853515625
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) . append ( $STRING$ ) ; }
rank: 22
score: 99.50167410714286
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ;
rank: 22
score: 99.47918146306819
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; sb . append ( backslash CaMeL Escape ) ;
rank: 22
score: 99.42522515190973
patch: case $STRING$ : sb . append ( quote ) ; sb . append ( $STRING$ ) ;
rank: 23
score: 99.5753662109375
patch: case $STRING$ : sb . append ( sb . char CaMeL At ( i ) ) ; break ;
rank: 23
score: 99.57091175426136
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( $STRING$ ) ) ; break ;
rank: 23
score: 99.55694901315789
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( singlequote CaMeL Escape ) ;
rank: 23
score: 99.54474609375
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) . append ( $STRING$ ) ;
rank: 23
score: 99.52100287543402
patch: sb . append ( $STRING$ ) ; } return sb . to CaMeL String ( ) ;
rank: 23
score: 99.4927619485294
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; break ; $STRING$ ; break ;
rank: 23
score: 99.47877261513158
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : String CaMeL Builder
rank: 23
score: 99.47275797526042
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( break ) ;
rank: 24
score: 99.51134440104167
patch: case $STRING$ + $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 24
score: 99.49195692274306
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; $STRING$ ; } break ;
rank: 24
score: 99.47721593520221
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ;
rank: 24
score: 99.46962890625
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; break ; break ;
rank: 24
score: 99.4209228515625
patch: case $STRING$ : sb . append ( backslash CaMeL Escape , $STRING$ ) ;
rank: 25
score: 99.57045049252717
patch: case $STRING$ : sb . append ( sb . append ( s . char CaMeL At ( i ) ) ) ;
rank: 25
score: 99.5417247953869
patch: case $STRING$ : s . append ( $STRING$ ) . append ( c ) . append ( $STRING$ ) ;
rank: 25
score: 99.50910295758929
patch: case 1 : sb . append ( $STRING$ ) ; } return sb . to CaMeL String ( ) ;
rank: 25
score: 99.49184841579861
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : System .
rank: 25
score: 99.49136555989584
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; break ; $STRING$ ;
rank: 25
score: 99.47658404181985
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ? $STRING$ : $STRING$ ;
rank: 25
score: 99.42052408854167
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder != null ) {
rank: 26
score: 99.56687644675925
patch: case $STRING$ : sb . append ( output CaMeL Charset CaMeL Encoder . append ( sb . char CaMeL At ( i ) ) ) ;
rank: 26
score: 99.54756673177083
patch: case $STRING$ : sb . append ( $STRING$ ) : sb . append ( $STRING$ ) ;
rank: 26
score: 99.54048879523026
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( c ) ; }
rank: 26
score: 99.50597034801136
patch: sb . append ( $STRING$ ) ; break ; }
rank: 26
score: 99.4203369140625
patch: case : sb . append ( $STRING$ ) ; break ; case $STRING$ :
rank: 27
score: 99.56527855282738
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ; break ;
rank: 27
score: 99.54566107855902
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , c ) ;
rank: 27
score: 99.50370065789474
patch: case $STRING$ : sb . append ( sb . to CaMeL String ( ) ) ; break ;
rank: 27
score: 99.4589510830966
patch: case 1 : sb . append ( $STRING$ ) ;
rank: 28
score: 99.56506878396739
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ; ; break ;
rank: 28
score: 99.50015462239584
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; } }
rank: 28
score: 99.48136901855469
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; ; break ;
rank: 29
score: 99.5610119047619
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; }
rank: 29
score: 99.53872680664062
patch: case $STRING$ : sb . append ( Character . to CaMeL Char CaMeL Array ( c ) ) ;
rank: 29
score: 99.5302966889881
patch: case $STRING$ : sb . append ( ( char ) s . char CaMeL At ( i ) ) ;
rank: 29
score: 99.4985122680664
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; break ; }
rank: 29
score: 99.47919778262867
patch: case $STRING$ : break ; $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 29
score: 99.45567321777344
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $NUMBER$ ;
rank: 30
score: 99.5625530740489
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( backslash CaMeL Escape ) ;
rank: 30
score: 99.56048224954044
patch: case $STRING$ : sb . append ( c ) ; break ; default : break ;
rank: 30
score: 99.53703962053571
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( $STRING$ ) ;
rank: 30
score: 99.4955822172619
patch: case 0 : sb . append ( $STRING$ ) ; } return sb . to CaMeL String ( ) ;
rank: 30
score: 99.47853716681985
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; $STRING$ : break ;
rank: 30
score: 99.46608189174107
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ;
rank: 30
score: 99.39841134207589
patch: case $STRING$ : sb . append ( $STRING$ ) ; } else {
rank: 31
score: 99.56193324497768
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ;
rank: 31
score: 99.55655517578126
patch: case $STRING$ : sb . append ( Character . to CaMeL Chars ( c ) ) ; break ;
rank: 31
score: 99.4748779296875
patch: case $STRING$ : sb . append ( $STRING$ + s . char CaMeL At ( i ) ) ;
rank: 31
score: 99.4539325420673
patch: case $STRING$ ; sb . append ( $STRING$ ) ; break ;
rank: 31
score: 99.39762115478516
patch: switch ( c ) { case $STRING$ : sb . append ( $STRING$ ) ;
rank: 32
score: 99.49175666360294
patch: case $STRING$ : case $STRING$ : sb . append ( $STRING$ ) ; break ; }
rank: 32
score: 99.4746326264881
patch: case $STRING$ : break ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ;
rank: 32
score: 99.4724609375
patch: case $STRING$ : $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 32
score: 99.45669555664062
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; sb . append ( backslash CaMeL Escape ) ; break ;
rank: 32
score: 99.45026041666667
patch: case Token . $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 32
score: 99.39463895909927
patch: case s . length ( ) : sb . append ( $STRING$ ) ; break ;
rank: 33
score: 99.55748833550348
patch: case $STRING$ : sb . append ( c ) ; sb . append ( c ) ;
rank: 33
score: 99.5468113111413
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ; break ; }
rank: 33
score: 99.53091430664062
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) . to CaMeL Lower CaMeL Case ( ) ;
rank: 33
score: 99.48375179893092
patch: sb . append ( $STRING$ ) ; } else { sb . append ( $STRING$ ) ; }
rank: 33
score: 99.38939615885417
patch: case $STRING$ : c = s . char CaMeL At ( i ) ;
rank: 34
score: 99.5444091796875
patch: case $STRING$ : sb . append ( Character . to CaMeL String ( c ) ) ; break ;
rank: 34
score: 99.52197875976563
patch: case $STRING$ : sb . append ( $STRING$ ) : sb . append ( backslash CaMeL Escape ) ;
rank: 34
score: 99.47921752929688
patch: sb . append ( $STRING$ ) . append ( sb . to CaMeL String ( ) ) ; }
rank: 34
score: 99.47017728365384
patch: case $STRING$ : sb . append ( $NUMBER$ ) ; break ;
rank: 34
score: 99.45418294270833
patch: case $STRING$ : sb . append ( $STRING$ ) ; break . append ( $STRING$ ) ;
rank: 34
score: 99.44768880208333
patch: case Character . $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 34
score: 99.38873650045956
patch: case $STRING$ : if ( backslash CaMeL Escape ) sb . append ( $STRING$ ) ;
rank: 35
score: 99.55250186011905
patch: case $STRING$ : sb . append ( sb . append ( $STRING$ ) ) . append ( c ) ;
rank: 35
score: 99.54297688802083
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; default :
rank: 35
score: 99.47739129317434
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) ; break ; }
rank: 35
score: 99.46025933159723
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String ( ) ) ; break ;
rank: 35
score: 99.3887077780331
patch: default : sb . append ( $STRING$ ) ; sb . append ( $STRING$ ) ;
rank: 36
score: 99.550546875
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ; sb . append ( $STRING$ ) ;
rank: 36
score: 99.51933737362133
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; }
rank: 36
score: 99.4495849609375
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String ( ) ) ;
rank: 36
score: 99.38770294189453
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; break ; case $STRING$ :
rank: 37
score: 99.53647682883523
patch: case $STRING$ : sb . append ( Character . to CaMeL Char CaMeL Array ( $STRING$ ) ) ; break ;
rank: 37
score: 99.52774711277173
patch: case $STRING$ : case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ;
rank: 37
score: 99.51818266369048
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder != null ) sb . append ( $STRING$ ) ;
rank: 37
score: 99.47421875
patch: case $STRING$ : sb . append ( $STRING$ ) ; } return sb . append ( $STRING$ ) ;
rank: 37
score: 99.46528063322368
patch: case $STRING$ : sb . append ( $STRING$ ) ; return sb . append ( $STRING$ ) ;
rank: 37
score: 99.44812542459239
patch: case $STRING$ : String CaMeL Builder sb = new String CaMeL Builder ( s . to CaMeL String ( ) ) ;
rank: 37
score: 99.43771362304688
patch: case $NUMBER$ : case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 37
score: 99.3863525390625
patch: case $STRING$ : sb . append ( backslash CaMeL Escape , backslash CaMeL Escape ) ;
rank: 38
score: 99.54740978422619
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( backslash CaMeL Escape ) ; }
rank: 38
score: 99.53321475074405
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ; }
rank: 38
score: 99.4715511924342
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) ; break ; }
rank: 38
score: 99.46064104352679
patch: case $STRING$ : sb . append ( $STRING$ ) ; return break ;
rank: 38
score: 99.44806463068181
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; sb . append ( c ) ; break ;
rank: 39
score: 99.54547674005681
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder != null ) { sb . append ( c ) ;
rank: 39
score: 99.52744140625
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ;
rank: 39
score: 99.51692030164931
patch: case $STRING$ : break ; case $STRING$ : sb . append ( backslash CaMeL Escape ) ;
rank: 39
score: 99.47042043585526
patch: sb . append ( $STRING$ ) ; break ; } } sb . append ( $STRING$ ) ;
rank: 39
score: 99.45965576171875
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; break ; ;
rank: 39
score: 99.451904296875
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( s . char CaMeL At ( i ) ) ;
rank: 39
score: 99.44338989257812
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( backslash CaMeL Escape ) ; break ;
rank: 39
score: 99.43476867675781
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case 1 ;
rank: 39
score: 99.3820556640625
patch: break ; case $STRING$ : sb . append ( backslash CaMeL Escape ) ;
rank: 40
score: 99.54543728298611
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) ;
rank: 40
score: 99.46745749080883
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; i ++ ; }
rank: 40
score: 99.45913357204861
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; $STRING$ ; ; break ;
rank: 40
score: 99.43471854073661
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; break ; }
rank: 40
score: 99.37937825520834
patch: case $STRING$ : sb . append ( backslash CaMeL Escape , c ) ;
rank: 41
score: 99.54496626420455
patch: case $STRING$ : output CaMeL Charset CaMeL Encoder . append ( sb . char CaMeL At ( i ) ) ;
rank: 41
score: 99.46296772203948
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) ; } break ;
rank: 41
score: 99.45716203962054
patch: case $STRING$ : sb . append ( $STRING$ ) ; ; break ;
rank: 41
score: 99.44551908052884
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) sb . append ( $STRING$ ) ;
rank: 41
score: 99.42876790364583
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; ; ;
rank: 41
score: 99.37722342354911
patch: case $STRING$ : sb . append ( c ) ; } else {
rank: 42
score: 99.52716936383929
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ; break ;
rank: 42
score: 99.51267408288044
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; sb . append ( $STRING$ ) ;
rank: 42
score: 99.45295266544117
patch: case 1 : sb . append ( $STRING$ ) ; break ; $STRING$ ; break ;
rank: 42
score: 99.44540550595238
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c ) ; break ;
rank: 42
score: 99.42701631433823
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; else { break ;
rank: 42
score: 99.37647162543402
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( charset ) ;
rank: 43
score: 99.54350353422619
patch: case $STRING$ : sb . append ( sb . append ( $STRING$ ) ) . append ( $STRING$ ) ;
rank: 43
score: 99.5260342684659
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; continue ;
rank: 43
score: 99.5199862393466
patch: case $NUMBER$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; break ;
rank: 43
score: 99.51181640625
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) : sb . append ( $STRING$ ) ;
rank: 43
score: 99.45156680836396
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; break ; break ;
rank: 43
score: 99.435498046875
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; break ; case $STRING$ : sb . append ( $STRING$ ) ;
rank: 44
score: 99.54157366071429
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( sb . append ( $STRING$ ) ) ;
rank: 44
score: 99.52118598090277
patch: case $STRING$ : sb . append ( c ) ; break ; default : break ; }
rank: 44
score: 99.46199544270833
patch: case $STRING$ : sb . append ( $STRING$ ) ; } sb . append ( $STRING$ ) ; break ;
rank: 44
score: 99.45125906808036
patch: case $STRING$ : return sb . append ( $STRING$ ) ; break ;
rank: 44
score: 99.44256122295673
patch: if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append ( $STRING$ ) ; break ;
rank: 44
score: 99.42186390269886
patch: case 0 : sb . append ( $STRING$ ) ;
rank: 45
score: 99.54017223011364
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder != null ) { sb . append ( $STRING$ ) ;
rank: 45
score: 99.51985168457031
patch: case $STRING$ : case $STRING$ : sb . append ( c ) ; break ;
rank: 45
score: 99.51042938232422
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( s , c ) ;
rank: 45
score: 99.4604724702381
patch: case $STRING$ ? sb . char CaMeL Value ( ) : sb . append ( $STRING$ ) ; break ;
rank: 45
score: 99.44190615699405
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( $STRING$ ) ; break ;
rank: 45
score: 99.43500366210938
patch: case $STRING$ : sb . append ( quote ) ; sb . append ( $STRING$ ) ; break ;
rank: 45
score: 99.42084503173828
patch: case $STRING$ : try { sb . append ( $STRING$ ) ; break ; }
rank: 45
score: 99.37359619140625
patch: case $STRING$ : sb . append ( quote . char CaMeL At ( i ) ) ;
rank: 46
score: 99.53883958899456
patch: case $STRING$ : sb . append ( sb . char CaMeL At ( i ) ) . append ( $STRING$ ) ;
rank: 46
score: 99.51803823617789
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( c ) . append ( $STRING$ ) ;
rank: 46
score: 99.45591825597427
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; } } break ;
rank: 46
score: 99.44580891927083
patch: case 1 : sb . append ( $STRING$ ) ; break ; $STRING$ ;
rank: 46
score: 99.44062805175781
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) && output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) )
rank: 46
score: 99.42015787760417
patch: case 1 : sb . append ( $STRING$ ) ; break ; break ;
rank: 46
score: 99.37110053168402
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( quote ) ;
rank: 47
score: 99.53837253736413
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) . append ( c ) ;
rank: 47
score: 99.51475458559783
patch: case $STRING$ : sb . append ( Character . to CaMeL Char CaMeL Array ( c ) ) ; break ; }
rank: 47
score: 99.45560128348214
patch: case $STRING$ ] : sb . append ( $STRING$ ) ; break ;
rank: 47
score: 99.44429524739583
patch: case $STRING$ : System . out . println ( $STRING$ ) ; break ;
rank: 47
score: 99.44044921875
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; sb . append ( $STRING$ ) ; break ;
rank: 47
score: 99.37013872931985
patch: case $STRING$ : sb . append ( sb . to CaMeL String ( ) ) ;
rank: 48
score: 99.53716796875
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( sb . char CaMeL At ( i ) ) ;
rank: 48
score: 99.51497395833333
patch: case $STRING$ : sb . append ( c ) . append ( $STRING$ ) ; break ;
rank: 48
score: 99.50973074776786
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , doublequote CaMeL Escape ) ;
rank: 48
score: 99.45528738839286
patch: case $STRING$ : sb . append ( $STRING$ + sb . to CaMeL String ( ) ) ; break ;
rank: 48
score: 99.4400301846591
patch: case $STRING$ : sb . append ( $STRING$ + s . char CaMeL At ( i ) ) ; break ;
rank: 48
score: 99.43191528320312
patch: case $STRING$ : sb . append ( c ) ; sb . append ( $STRING$ ) ; break ;
rank: 48
score: 99.41919817243304
patch: case case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 48
score: 99.36777565696023
patch: case quote : sb . append ( $STRING$ ) ;
rank: 49
score: 99.5366275185033
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ; }
rank: 49
score: 99.512099609375
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) . to CaMeL Lower CaMeL Case ( ) ; }
rank: 49
score: 99.45458374023437
patch: sb . append ( $STRING$ ) ; break ; } return sb . to CaMeL String ( ) ;
rank: 49
score: 99.43840475643383
patch: case $STRING$ : if ( sb . length ( ) > 0 ) { break ;
rank: 49
score: 99.43583679199219
patch: case $STRING$ ; case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 49
score: 99.36717122395834
patch: case $STRING$ : sb . append ( $STRING$ + backslash CaMeL Escape ) ;
rank: 50
score: 99.51350541548295
patch: case $STRING$ : sb . append ( Character . to CaMeL Hex CaMeL String ( $STRING$ ) ) ; break ;
rank: 50
score: 99.51059358016305
patch: sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( c ) . append ( $STRING$ ) ;
rank: 50
score: 99.50888206845238
patch: String CaMeL Builder sb = new String CaMeL Builder ( s . char CaMeL At ( i ) ) ;
rank: 50
score: 99.45276596966912
patch: sb . append ( $STRING$ ) ; return sb . to CaMeL String ( ) ;
rank: 50
score: 99.41786193847656
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; break ; case $NUMBER$ :
rank: 51
score: 99.53401692708333
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder != null && output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) )
rank: 51
score: 99.50848388671875
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , sb , c ) ;
rank: 51
score: 99.45191592261905
patch: case $STRING$ ; sb . append ( $STRING$ ) ; } return sb . to CaMeL String ( ) ;
rank: 51
score: 99.437890625
patch: case $STRING$ : sb . append ( $STRING$ + $STRING$ ) ; break ;
rank: 51
score: 99.43029254415761
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : sb . append ( c ) ;
rank: 51
score: 99.41624348958334
patch: case 0 : sb . append ( $STRING$ ) ; break ; break ;
rank: 51
score: 99.36119927300348
patch: case $STRING$ : sb . append ( c ) ; sb . append ( quote ) ;
rank: 52
score: 99.50696331521739
patch: case Character . $STRING$ : sb . append ( $STRING$ ) . append ( c ) . append ( $STRING$ ) ;
rank: 52
score: 99.50541548295455
patch: case $STRING$ : sb . append ( Integer . to CaMeL Lower CaMeL Case ( c ) ) ; break ;
rank: 52
score: 99.43557559742646
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; break ; $STRING$ ;
rank: 52
score: 99.42960611979167
patch: case $STRING$ : sb . append ( ( String ) s . char CaMeL At ( i ) ) ;
rank: 52
score: 99.36062442555146
patch: if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) {
rank: 53
score: 99.50476837158203
patch: case $STRING$ : break ; default : sb . append ( $STRING$ ) ; }
rank: 53
score: 99.45016714242789
patch: case $STRING$ + sb . append ( $STRING$ ) ; break ;
rank: 53
score: 99.43516540527344
patch: case $STRING$ : String sb = sb . append ( $STRING$ ) ; break ;
rank: 53
score: 99.43146623883929
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) break ;
rank: 53
score: 99.429169921875
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 53
score: 99.41531372070312
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; break ; ;
rank: 53
score: 99.36028693704044
patch: break ; case $STRING$ : sb . append ( backslash CaMeL Escape ) ; break ;
rank: 54
score: 99.53234332540761
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( sb . append ( backslash CaMeL Escape ) ) ;
rank: 54
score: 99.49728054470486
patch: case $STRING$ : sb . append ( $STRING$ ) : sb . append ( c ) ;
rank: 54
score: 99.44986300998264
patch: sb . append ( $STRING$ ) ; } sb . append ( $STRING$ ) ; break ;
rank: 54
score: 99.43405490451389
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ ; break ;
rank: 54
score: 99.35982840401786
patch: case $STRING$ : sb . append ( doublequote CaMeL Escape ) ;
rank: 55
score: 99.53003833912037
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append ( $STRING$ ) ;
rank: 55
score: 99.50307436342592
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) . char CaMeL At ( 0 ) ) ;
rank: 55
score: 99.50218563988095
patch: case $STRING$ : sb . append ( $STRING$ ) ; ; return sb . to CaMeL String ( ) ;
rank: 55
score: 99.49724469866071
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( doublequote CaMeL Escape ) ; break ;
rank: 55
score: 99.44955589657738
patch: case $STRING$ + sb . append ( $STRING$ ) ; } return sb . to CaMeL String ( ) ;
rank: 55
score: 99.43363734654018
patch: case $STRING$ : else sb . append ( $STRING$ ) ; break ;
rank: 55
score: 99.4125747680664
patch: case 1 : sb . append ( $STRING$ ) ; break ; case $NUMBER$ :
rank: 55
score: 99.35918830422794
patch: case $STRING$ && output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ;
rank: 56
score: 99.52963256835938
patch: if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append ( $STRING$ ) ;
rank: 56
score: 99.50201416015625
patch: case $STRING$ : sb . append ( Integer . to CaMeL String ( c ) ) ; break ;
rank: 56
score: 99.50126509232955
patch: case $STRING$ : s . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; break ;
rank: 56
score: 99.44877794053819
patch: sb . append ( $STRING$ ) ; break ; } sb . append ( $STRING$ ) ;
rank: 56
score: 99.427314453125
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) . append ( $STRING$ ) ; break ;
rank: 56
score: 99.35913848876953
patch: case quote : sb . append ( $STRING$ ) ; break ; case $STRING$ :
rank: 57
score: 99.50181995738636
patch: case $STRING$ : sb . append ( $STRING$ ) ; return sb . to CaMeL Char CaMeL Array ( ) ;
rank: 57
score: 99.5006687330163
patch: case $STRING$ : case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ;
rank: 57
score: 99.4937054177989
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( backslash CaMeL Escape ) . append ( $STRING$ ) ;
rank: 57
score: 99.44850376674107
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; else
rank: 57
score: 99.41203038832721
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; ; case $STRING$ :
rank: 57
score: 99.35905905330883
patch: switch ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) {
rank: 58
score: 99.52890014648438
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder != null ) { sb . append ( backslash CaMeL Escape ) ;
rank: 58
score: 99.49984077785327
patch: case $STRING$ : sb . append ( Character . to CaMeL Char CaMeL Array ( c ) ) ; ; break ;
rank: 58
score: 99.49200994318181
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , output CaMeL Charset CaMeL Encoder ) ;
rank: 58
score: 99.42791389016544
patch: case $STRING$ : sb . append ( sb . trim ( ) ) ; break ;
rank: 58
score: 99.42595880681819
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( output CaMeL Charset CaMeL Encoder ) ;
rank: 58
score: 99.42221467391305
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( doublequote CaMeL Escape ) ; break ;
rank: 58
score: 99.41141510009766
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; $STRING$ ; }
rank: 58
score: 99.3590087890625
patch: case $STRING$ : sb . append ( ( char ) $STRING$ ) ;
rank: 59
score: 99.52791694972827
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( sb . append ( c ) ) ;
rank: 59
score: 99.49867158777573
patch: case $STRING$ : case $STRING$ : case $STRING$ : sb . append ( $STRING$ ) ;
rank: 59
score: 99.49819113991477
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ; continue ;
rank: 59
score: 99.42782592773438
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; break ; } break ;
rank: 59
score: 99.42175903320313
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) + $STRING$ ) ;
rank: 59
score: 99.35860188802083
patch: switch ( backslash CaMeL Escape ) { case $STRING$ : sb . append ( $STRING$ ) ;
rank: 60
score: 99.52742513020833
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; else sb . append ( $STRING$ ) ;
rank: 60
score: 99.49748883928571
patch: case STRING : sb . append ( $STRING$ ) . append ( c ) . append ( $STRING$ ) ;
rank: 60
score: 99.4448474702381
patch: append ( sb . to CaMeL String ( ) ) ; sb . append ( $STRING$ ) ; break ;
rank: 60
score: 99.42728678385417
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; $STRING$ ; break ; }
rank: 60
score: 99.4202880859375
patch: case $STRING$ : sb . append ( $STRING$ + c ) ; break ;
rank: 60
score: 99.4106112393466
patch: else sb . append ( $STRING$ ) ; break ;
rank: 60
score: 99.35693359375
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; } else {
rank: 61
score: 99.49659946986607
patch: case $STRING$ : case $STRING$ : sb . append ( $STRING$ ) ;
rank: 61
score: 99.44363064236111
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( i ) ; break ;
rank: 61
score: 99.42677935431985
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; ; } break ;
rank: 61
score: 99.3568115234375
patch: case s : sb . append ( $STRING$ ) ;
rank: 62
score: 99.525458984375
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ; sb . append ( c ) ;
rank: 62
score: 99.495859375
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ;
rank: 62
score: 99.49562766335227
patch: case $STRING$ : sb . append ( $STRING$ ) ; return sb . to CaMeL Lower CaMeL Case ( ) ;
rank: 62
score: 99.48748168945312
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) {
rank: 62
score: 99.44284237132354
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; else return $STRING$ ;
rank: 62
score: 99.42341613769531
patch: case $STRING$ : String $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 62
score: 99.420869140625
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String ( ) ) ;
rank: 62
score: 99.41910807291667
patch: case $STRING$ : sb . append ( $STRING$ ) ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; }
rank: 62
score: 99.35610622829861
patch: char c = s . char CaMeL At ( i ) ; switch ( c ) {
rank: 63
score: 99.52506256103516
patch: case $STRING$ : sb . append ( sb . append ( c ) ) ;
rank: 63
score: 99.44197998046874
patch: append ( sb . to CaMeL String ( ) ) ; sb . append ( $STRING$ ) ; }
rank: 63
score: 99.41990831163194
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; $STRING$ ; break ; ;
rank: 63
score: 99.41892700195312
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; }
rank: 63
score: 99.35483224051339
patch: case ) { case $STRING$ : sb . append ( $STRING$ ) ;
rank: 64
score: 99.48367745535714
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; break ; case $STRING$ :
rank: 64
score: 99.44073807565789
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) ; } break ;
rank: 64
score: 99.4088134765625
patch: append ( sb . append ( $STRING$ ) ) ; break ;
rank: 65
score: 99.49411010742188
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( $STRING$ ) ) ;
rank: 65
score: 99.48308715820312
patch: case $STRING$ : sb . append ( $STRING$ + sb . char CaMeL At ( i ) ) ;
rank: 65
score: 99.41740278764205
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; }
rank: 65
score: 99.41562787224265
patch: case $STRING$ : if ( sb . append ( $STRING$ ) ) break ; break ;
rank: 65
score: 99.41549862132354
patch: case $STRING$ : if ( c != $STRING$ ) sb . append ( $STRING$ ) ;
rank: 65
score: 99.3545391376202
patch: case $STRING$ : sb . append ( $STRING$ + c ) ;
rank: 66
score: 99.523193359375
patch: case $STRING$ : sb . append ( $STRING$ ) ; } sb . append ( backslash CaMeL Escape ) ;
rank: 66
score: 99.493388671875
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( $STRING$ ) ) . append ( $STRING$ ) ;
rank: 66
score: 99.48228236607143
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( singlequote CaMeL Escape ) ;
rank: 66
score: 99.43963623046875
patch: case 1 : sb . append ( $STRING$ ) ; break ; }
rank: 66
score: 99.4172607421875
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : sb . append (
rank: 66
score: 99.41506029211956
patch: case $STRING$ : String CaMeL Builder sb = new String CaMeL Builder ( s . length ( ) + $NUMBER$ ) ;
rank: 66
score: 99.35378011067708
patch: case $STRING$ : sb . append ( backslash CaMeL Escape , doublequote CaMeL Escape ) ;
rank: 67
score: 99.52306598165761
patch: case $STRING$ : sb . append ( sb . append ( $STRING$ ) ) . append ( backslash CaMeL Escape ) ;
rank: 67
score: 99.4932421875
patch: case Char CaMeL Sequence . $STRING$ : sb . append ( $STRING$ ) . append ( c ) . append ( $STRING$ ) ;
rank: 67
score: 99.43944498697917
patch: case $STRING$ : sb . append ( $STRING$ ) ; } return break ;
rank: 67
score: 99.41359991776316
patch: case $STRING$ : sb . append ( $STRING$ + sb . length ( ) ) ; break ;
rank: 67
score: 99.405517578125
patch: case 1 : sb . append ( $STRING$ ) ; break ; case 1 :
rank: 67
score: 99.35293579101562
patch: case s : sb . append ( $STRING$ ) ; break ; case $STRING$ :
rank: 68
score: 99.49066925048828
patch: case $STRING$ : sb . append ( ( char ) c ) ; break ;
rank: 68
score: 99.48055013020833
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( ( char ) backslash CaMeL Escape ) ;
rank: 68
score: 99.4393310546875
patch: else sb . append ( $STRING$ ) ; } return sb . to CaMeL String ( ) ;
rank: 68
score: 99.41700122974537
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { sb . append ( $STRING$ ) ; }
rank: 68
score: 99.41348353794643
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; }
rank: 68
score: 99.41326032366071
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; break ; $STRING$
rank: 68
score: 99.40536499023438
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; break ; case 1 :
rank: 69
score: 99.4393246299342
patch: case $STRING$ + sb . length ( ) : sb . append ( $STRING$ ) ; break ;
rank: 69
score: 99.41642252604167
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ; break ; }
rank: 69
score: 99.41273498535156
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; ( break ;
rank: 69
score: 99.41199261209239
patch: case $STRING$ : sb . append ( c ) ; break ; case $STRING$ : sb . append ( $STRING$ ) ;
rank: 69
score: 99.40533806295956
patch: case $STRING$ : sb . append ( $STRING$ ) ; value = $STRING$ ; break ;
rank: 69
score: 99.35167020909927
patch: char c = s . char CaMeL At ( i ) ; switch ( c )
rank: 70
score: 99.49170763739224
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( c ) . to CaMeL Lower CaMeL Case ( ) ;
rank: 70
score: 99.48904551630434
patch: case - 1 : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; break ;
rank: 70
score: 99.47278362771739
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , c , doublequote CaMeL Escape ) ;
rank: 70
score: 99.41119854266827
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c ) ;
rank: 70
score: 99.35035923549107
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; }
rank: 71
score: 99.51924189814815
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append ( c ) ;
rank: 71
score: 99.49118041992188
patch: case Character . $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; break ;
rank: 71
score: 99.48654014185855
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; default : break ; } }
rank: 71
score: 99.47048468338816
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( ( char ) $STRING$ ) ;
rank: 71
score: 99.4371337890625
patch: case $STRING$ : sb . append ( $STRING$ ) ; } sb . append ( $STRING$ ) ; }
rank: 71
score: 99.41066136853448
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( c ) ) ;
rank: 71
score: 99.40352376302083
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; ) ;
rank: 71
score: 99.34976016773896
patch: case : sb . append ( backslash CaMeL Escape ) ; break ; case $STRING$ :
rank: 72
score: 99.51901479867789
patch: case $STRING$ : sb . append ( c ) ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ;
rank: 72
score: 99.49058180588942
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) . to CaMeL Lower CaMeL Case ( ) ; break ;
rank: 72
score: 99.46954055059524
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , c ) ;
rank: 72
score: 99.41107177734375
patch: case 1 : sb . append ( $STRING$ ) ; break ; ;
rank: 72
score: 99.40964762369792
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) . to CaMeL String ( ) ) ;
rank: 72
score: 99.40274047851562
patch: case $STRING$ : sb . append ( $STRING$ ) ; return $STRING$ ; break ;
rank: 72
score: 99.3475112915039
patch: case $STRING$ : sb . append ( c ) . append ( c ) ;
rank: 73
score: 99.518798828125
patch: case $STRING$ : sb . append ( ( String ) sb . char CaMeL At ( i ) ) ;
rank: 73
score: 99.49022327769886
patch: case $STRING$ : return s . char CaMeL At ( i ) . to CaMeL Lower CaMeL Case ( ) ;
rank: 73
score: 99.48513454861111
patch: case $STRING$ : break ; default : sb . append ( $STRING$ ) ; break ; }
rank: 73
score: 99.4356689453125
patch: } case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 73
score: 99.41454016644022
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( s , c ) ; break ;
rank: 73
score: 99.40957845052084
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder ) ;
rank: 73
score: 99.40859750600961
patch: case $STRING$ : sb . append ( 0 ) ; break ;
rank: 73
score: 99.34727478027344
patch: case $STRING$ : sb . append ( ( String ) backslash CaMeL Escape ) ;
rank: 74
score: 99.488876953125
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( Character . to CaMeL Char CaMeL Array ( c ) ) ;
rank: 74
score: 99.46895168138587
patch: case $STRING$ : String CaMeL Builder sb = new String CaMeL Builder ( sb . to CaMeL String ( ) ) ;
rank: 74
score: 99.43521118164062
patch: case $STRING$ : sb . append ( sb . to CaMeL String ( ) ) ; break ; }
rank: 74
score: 99.41389266304348
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; sb . append ( c ) ;
rank: 74
score: 99.40955607096355
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( s . to CaMeL String ( ) ) ;
rank: 74
score: 99.40670776367188
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; $STRING$ break ;
rank: 74
score: 99.4001235961914
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; break ; case $STRING$ ;
rank: 74
score: 99.34622395833334
patch: case String CaMeL Builder . $STRING$ : sb . append ( $STRING$ ) ;
rank: 75
score: 99.48792860243056
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) . append ( $STRING$ ) ; break ;
rank: 75
score: 99.47914817116477
patch: case $NUMBER$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ; break ;
rank: 75
score: 99.43465169270833
patch: } sb . append ( $STRING$ ) ; return sb . to CaMeL String ( ) ;
rank: 75
score: 99.41327373798077
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c ) ;
rank: 75
score: 99.40861241957721
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ break ;
rank: 75
score: 99.39754486083984
patch: case 1 : case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 75
score: 99.344482421875
patch: default : sb . append ( $STRING$ ) ; break ; case $STRING$ :
rank: 76
score: 99.48739463404605
patch: case $STRING$ : break ; case $STRING$ : return s . char CaMeL At ( i ) ;
rank: 76
score: 99.4790771484375
patch: case $STRING$ : sb . append ( String . value CaMeL Of ( $STRING$ ) ) ; break ;
rank: 76
score: 99.43411254882812
patch: break ; } sb . append ( $STRING$ ) ; return sb . to CaMeL String ( ) ;
rank: 76
score: 99.41296968005952
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( s , c ) ; break ;
rank: 76
score: 99.407958984375
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : i
rank: 76
score: 99.40648696001838
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; ) { break ;
rank: 76
score: 99.33879538143383
patch: case : sb . append ( $STRING$ ) ; sb . append ( $STRING$ ) ;
rank: 77
score: 99.515634765625
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( output CaMeL Charset CaMeL Encoder ) . append ( $STRING$ ) ;
rank: 77
score: 99.47904636548913
patch: case $STRING$ : sb . append ( Character . to CaMeL Hex CaMeL String ( c ) ) ; ; break ;
rank: 77
score: 99.46446644176136
patch: case $STRING$ : sb . append ( $STRING$ ) + $STRING$ : sb . append ( backslash CaMeL Escape ) ;
rank: 77
score: 99.43135579427083
patch: case $STRING$ : { sb . append ( $STRING$ ) ; break ; }
rank: 77
score: 99.41291155133929
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation (
rank: 77
score: 99.40793744255515
patch: case $STRING$ break ; case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 77
score: 99.40442657470703
patch: case $STRING$ : System . ; sb . append ( $STRING$ ) ; break ;
rank: 77
score: 99.39637169471153
patch: case DEFAULT : sb . append ( $STRING$ ) ; break ;
rank: 77
score: 99.3385009765625
patch: case $STRING$ : sb . append ( $STRING$ + $STRING$ ) ;
rank: 78
score: 99.51417178199405
patch: case $STRING$ : sb . append ( $STRING$ ) ; else sb . append ( backslash CaMeL Escape ) ;
rank: 78
score: 99.47889293323864
patch: case $STRING$ : sb . append ( $STRING$ ) ; } } return sb . to CaMeL String ( ) ;
rank: 78
score: 99.46382068452381
patch: case $STRING$ + $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ;
rank: 78
score: 99.4305908203125
patch: case $STRING$ : sb . append ( $STRING$ ) ; } } sb . append ( $STRING$ ) ;
rank: 78
score: 99.40303308823529
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; ) ; break ;
rank: 78
score: 99.3962890625
patch: case $STRING$ : sb . append ( $STRING$ ) ; return $STRING$ ; ;
rank: 78
score: 99.3367431640625
patch: $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ :
rank: 79
score: 99.51399031929348
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( sb . append ( $STRING$ ) ) ;
rank: 79
score: 99.48509837962963
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( sb . char CaMeL At ( i ) ) ) ;
rank: 79
score: 99.47883406929348
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; default : sb . append ( $STRING$ ) ; }
rank: 79
score: 99.46336059570312
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( output CaMeL Charset CaMeL Encoder ) ;
rank: 79
score: 99.42985704210069
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $NUMBER$ ) ; break ;
rank: 79
score: 99.39540608723958
patch: case $NUMBER$ : sb . append ( $STRING$ ) . append ( $STRING$ ) ; break ;
rank: 79
score: 99.33396402994792
patch: case $STRING$ : sb . append ( c ) ; }
rank: 80
score: 99.51350007233796
patch: if ( output CaMeL Charset CaMeL Encoder != null ) { if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) )
rank: 80
score: 99.47880626860119
patch: case $STRING$ : sb . append ( Character . to CaMeL Char CaMeL Array ( c ) ; break ;
rank: 80
score: 99.42860764723558
patch: case $STRING$ : sb . append ( $STRING$ ) ; } }
rank: 80
score: 99.41136532738095
patch: case $STRING$ : sb . append ( backslash CaMeL Escape . to CaMeL String ( ) ) ; break ;
rank: 80
score: 99.40409712357955
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( backslash CaMeL Escape , $STRING$ ) ;
rank: 80
score: 99.39991519325658
patch: case $STRING$ : sb . append ( $STRING$ + sb . trim ( ) ) ; break ;
rank: 80
score: 99.39539513221153
patch: case LINE : sb . append ( $STRING$ ) ; break ;
rank: 80
score: 99.333251953125
patch: case c : sb . append ( $STRING$ ) ; break ; case $STRING$ :
rank: 81
score: 99.51251775568181
patch: case $STRING$ : sb . append ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) ;
rank: 81
score: 99.48415208899456
patch: case $STRING$ : case $STRING$ : sb . append ( Character . to CaMeL Char CaMeL Array ( c ) ) ;
rank: 81
score: 99.4759188565341
patch: case 0 : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; break ;
rank: 81
score: 99.4616062330163
patch: case $STRING$ : String CaMeL Builder sb = new String CaMeL Builder ( s . char CaMeL At ( i ) ;
rank: 81
score: 99.42845916748047
patch: case $STRING$ + $STRING$ : sb . append ( $STRING$ ) ; break ; }
rank: 81
score: 99.39909282483552
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( break $NUMBER$ ) ; break ;
rank: 81
score: 99.33240424262152
patch: byte c = s . char CaMeL At ( i ) ; switch ( c ) {
rank: 82
score: 99.51195271809895
patch: if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append ( c ) ;
rank: 82
score: 99.48343698601974
patch: case $STRING$ : sb . append ( c ) ; sb . append ( $STRING$ ) ; }
rank: 82
score: 99.47583725873162
patch: case Integer . MIN _ VALUE : sb . append ( $STRING$ ) ; break ;
rank: 82
score: 99.46119273792614
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String ( ) , c ) ;
rank: 82
score: 99.42769129136029
patch: sb . append ( $STRING$ ) ; } return sb . append ( $STRING$ ) ;
rank: 82
score: 99.41121732271634
patch: case $STRING$ : sb . append ( $STRING$ ) ; if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) )
rank: 82
score: 99.40344848632813
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( s ) ; break ;
rank: 82
score: 99.39751519097223
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; break ; } break ;
rank: 82
score: 99.39487130301339
patch: case $STRING$ : sb . append ( $STRING$ ) ; { break ;
rank: 82
score: 99.33094024658203
patch: case $STRING$ : sb . append ( $STRING$ ) ; continue ; case $STRING$ :
rank: 83
score: 99.47498668323864
patch: case $STRING$ ; sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; break ;
rank: 83
score: 99.42744750976563
patch: case 1 : sb . append ( $STRING$ ) ; return sb . to CaMeL String ( ) ;
rank: 83
score: 99.4097964638158
patch: case $STRING$ : sb . append ( s . to CaMeL String ( ) ) ; break ;
rank: 83
score: 99.40328543526786
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( backslash CaMeL Escape ) ;
rank: 83
score: 99.39667825137867
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; } break ; ;
rank: 83
score: 99.39417940027573
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; } return $STRING$ ;
rank: 83
score: 99.33091227213542
patch: switch ( c ) { case $STRING$ : sb . append ( backslash CaMeL Escape ) ;
rank: 84
score: 99.48246256510417
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) . to CaMeL Upper CaMeL Case ( ) ;
rank: 84
score: 99.4749422940341
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; default : sb . append ( $STRING$ ) ;
rank: 84
score: 99.45984468005952
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( singlequote CaMeL Escape ) ; break ;
rank: 84
score: 99.42694854736328
patch: case $STRING$ ? $STRING$ : sb . append ( $STRING$ ) ; break ; }
rank: 84
score: 99.39415785845588
patch: case $STRING$ : sb . append ( sb . append ( $STRING$ ) ; break ;
rank: 85
score: 99.48233145254629
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) . char CaMeL At ( i ) ) ;
rank: 85
score: 99.405859375
patch: case $STRING$ : break ; case $STRING$ : sb . append ( backslash CaMeL Escape ) ; break ;
rank: 85
score: 99.40192260742188
patch: case $STRING$ : sb . append ( $STRING$ ) : sb . append ( $STRING$ ) ; break ;
rank: 85
score: 99.3940658569336
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; return $STRING$ ;
rank: 85
score: 99.32964010799633
patch: case s . length ( ) : sb . append ( backslash CaMeL Escape ) ;
rank: 86
score: 99.5081851356908
patch: case $STRING$ : sb . append ( $STRING$ ) ; else sb . append ( c ) ;
rank: 86
score: 99.48174493963069
patch: case $STRING$ : if ( Character . is CaMeL Digit ( c ) ) sb . append ( $STRING$ ) ;
rank: 86
score: 99.45736694335938
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i + $NUMBER$ ) ) ;
rank: 86
score: 99.4253288717831
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) ; }
rank: 86
score: 99.40481387867646
patch: case $STRING$ : output CaMeL Charset CaMeL Encoder . append ( $STRING$ ) ; break ;
rank: 86
score: 99.40143291766827
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( $STRING$ ) ;
rank: 86
score: 99.32943386501736
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; sb . append ( $STRING$ ) ;
rank: 87
score: 99.507294921875
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( sb . append ( backslash CaMeL Escape ) ) ;
rank: 87
score: 99.48165760869566
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( c ) ; break ;
rank: 87
score: 99.47319479549633
patch: case $STRING$ : throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ + c ) ;
rank: 87
score: 99.4564208984375
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( s , c ) ;
rank: 87
score: 99.42510308159723
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( break ) ; break ;
rank: 87
score: 99.40480143229166
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; return sb . to CaMeL String ( ) ;
rank: 87
score: 99.3935546875
patch: case 1 : sb . append ( $STRING$ ) ; break ; case $STRING$ :
rank: 87
score: 99.39303927951389
patch: case $NUMBER$ : break ; case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 87
score: 99.32878960503473
patch: case $STRING$ : sb . append ( String . char CaMeL At ( i ) ) ;
rank: 88
score: 99.50685628255208
patch: case $STRING$ : sb . append ( quote ) ; sb . append ( c ) ;
rank: 88
score: 99.48131872106481
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) . char CaMeL At ( 0 ) ) ;
rank: 88
score: 99.46889038085938
patch: case $STRING$ : if ( $STRING$ . equals ( c ) ) sb . append ( $STRING$ ) ;
rank: 88
score: 99.45550537109375
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( s ) ;
rank: 88
score: 99.42467583550348
patch: sb . append ( $STRING$ ) ; return sb . to CaMeL String ( ) ; }
rank: 88
score: 99.40397426060268
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; sb . append ( $STRING$ ) ;
rank: 88
score: 99.39903259277344
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder , c ) ;
rank: 88
score: 99.39325714111328
patch: case $STRING$ : try { sb . append ( $STRING$ ) ; break ; ;
rank: 88
score: 99.32794744318181
patch: case c : sb . append ( $STRING$ ) ;
rank: 89
score: 99.50628051757812
patch: case $STRING$ : sb . append ( c ) ; sb . append ( backslash CaMeL Escape ) ;
rank: 89
score: 99.48116361177884
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) . append ( $STRING$ ) . append ( $STRING$ ) ;
rank: 89
score: 99.46866861979167
patch: case $STRING$ : sb . append ( Character . to CaMeL Char CaMeL Array ( c ) ) ; }
rank: 89
score: 99.45515711167279
patch: case $STRING$ : String CaMeL Builder sb = new String CaMeL Builder ( $STRING$ ) ;
rank: 89
score: 99.423095703125
patch: case $STRING$ : sb . append ( $STRING$ ) ; } return sb . char CaMeL Value ( ) ;
rank: 89
score: 99.4038837139423
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , doublequote CaMeL Escape ) ; break ;
rank: 89
score: 99.39269341362848
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; $STRING$ ; return $STRING$ ;
rank: 89
score: 99.32756491268383
patch: return backslash CaMeL Escape ) ; case $STRING$ : sb . append ( $STRING$ ) ;
rank: 90
score: 99.50620966372283
patch: case $STRING$ : sb . append ( sb . append ( sb . char CaMeL At ( i ) ) ) ;
rank: 90
score: 99.46781198601974
patch: case $STRING$ : sb . append ( $STRING$ ) ; } sb . append ( c ) ;
rank: 90
score: 99.45440063476562
patch: case $STRING$ : sb . append ( $STRING$ ) + s . char CaMeL At ( i ) ;
rank: 90
score: 99.42304920014881
patch: case $STRING$ ? sb . to CaMeL String ( ) : sb . append ( $STRING$ ) ; break ;
rank: 90
score: 99.32620578342014
patch: case s . char CaMeL At ( i ) : sb . append ( $STRING$ ) ;
rank: 91
score: 99.50302269345238
patch: case $STRING$ : sb . append ( s . append ( $STRING$ ) ) . append ( c ) ;
rank: 91
score: 99.47875
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; break ; case $STRING$ :
rank: 91
score: 99.46702991832386
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; ; }
rank: 91
score: 99.45439009232955
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( ( char ) doublequote CaMeL Escape ) ;
rank: 91
score: 99.42268880208333
patch: case $STRING$ : sb . append ( $STRING$ ) ; return sb . to CaMeL String ( ) ) ;
rank: 91
score: 99.40274160879629
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String ( ) , c ) ;
rank: 91
score: 99.39147077287946
patch: case STRING : { sb . append ( $STRING$ ) ; break ;
rank: 91
score: 99.32565646701389
patch: int c = s . char CaMeL At ( i ) ; switch ( c ) {
rank: 92
score: 99.5022481282552
patch: case $STRING$ : output CaMeL Charset CaMeL Encoder . append ( sb . char CaMeL At ( i ) ) ; break ;
rank: 92
score: 99.47817758413461
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) . append ( $STRING$ ) ; }
rank: 92
score: 99.46613875679348
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; return $STRING$ ;
rank: 92
score: 99.45406971807066
patch: case $STRING$ : String CaMeL Builder sb = new String CaMeL Builder ( ) ; sb . append ( $STRING$ ) ;
rank: 92
score: 99.40263439360119
patch: if ( output CaMeL Charset CaMeL Encoder != null ) { sb . append ( $STRING$ ) ; break ;
rank: 92
score: 99.39099839154412
patch: case $STRING$ : if ( $STRING$ . length ( ) > 0 ) { break ;
rank: 92
score: 99.38710239955357
patch: case $STRING$ : } sb . append ( $STRING$ ) ; break ;
rank: 92
score: 99.3253173828125
patch: case $STRING$ : sb . append ( ( char ) c ) ;
rank: 93
score: 99.50068010602679
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder != null && output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) {
rank: 93
score: 99.47808283025569
patch: case $NUMBER$ : sb . append ( Character . to CaMeL Char CaMeL Array ( c ) ) ; break ;
rank: 93
score: 99.4656649502841
patch: case $STRING$ : sb . append ( char CaMeL At . char CaMeL At ( i ) ) ; break ;
rank: 93
score: 99.45406765407986
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( $NUMBER$ ) ;
rank: 93
score: 99.32512749565973
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) . append ( $STRING$ ) ;
rank: 94
score: 99.50055252878289
patch: case $STRING$ : sb . append ( c ) ; else sb . append ( $STRING$ ) ;
rank: 94
score: 99.47638671875
patch: case $STRING$ : case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; break ;
rank: 94
score: 99.46438731317934
patch: case $STRING$ : { sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; break ;
rank: 94
score: 99.42192731584821
patch: case 0 : sb . append ( $STRING$ ) ; break ; }
rank: 94
score: 99.4021465594952
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { sb . append ( $STRING$ ) ;
rank: 94
score: 99.39573838975694
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( s ) ;
rank: 94
score: 99.38919830322266
patch: case 1 : sb . append ( $STRING$ ) ; break ; } break ;
rank: 94
score: 99.38636881510416
patch: case 0 : sb . append ( $STRING$ ) ; break ; $STRING$ ;
rank: 94
score: 99.32413976332721
patch: byte c = s . char CaMeL At ( i ) ; switch ( c )
rank: 95
score: 99.50054640997024
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; else sb . append ( c ) ;
rank: 95
score: 99.45348590353261
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , doublequote CaMeL Escape , $STRING$ ) ;
rank: 95
score: 99.42136744449013
patch: } sb . append ( $STRING$ ) ; } return sb . to CaMeL String ( ) ;
rank: 95
score: 99.39500075120192
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb ) ;
rank: 95
score: 99.38809364720395
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) ; break ; ;
rank: 95
score: 99.38370513916016
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; ; $STRING$ ;
rank: 95
score: 99.32376302083334
patch: case Charset CaMeL Encoder . $STRING$ : sb . append ( $STRING$ ) ;
rank: 96
score: 99.49962848165761
patch: case $STRING$ : sb . append ( s . append ( s . char CaMeL At ( i ) ) ) ;
rank: 96
score: 99.46221313476562
patch: case $STRING$ : sb . append ( c ) ; return sb . to CaMeL String ( ) ;
rank: 96
score: 99.45314622961956
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , quote , doublequote CaMeL Escape ) ;
rank: 96
score: 99.42120682565789
patch: case $STRING$ : sb . append ( $STRING$ ) ; } return sb . trim ( ) ;
rank: 96
score: 99.40134840745192
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( sb . to CaMeL String ( ) ) ; break ;
rank: 96
score: 99.38786046645221
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; break ; $STRING$ : break ;
rank: 96
score: 99.3834979717548
patch: case $STRING$ ? sb . append ( $STRING$ ) ; break ;
rank: 96
score: 99.3223876953125
patch: case quote : sb . append ( $STRING$ ) ; break ;
rank: 97
score: 99.49888671875
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( output CaMeL Charset CaMeL Encoder . append ( c ) ) ;
rank: 97
score: 99.47332404641544
patch: case $STRING$ : break ; case $STRING$ : sb . append ( $STRING$ ) ; }
rank: 97
score: 99.42096710205078
patch: break ; } case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 97
score: 99.40129288383152
patch: case $STRING$ : break ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; break ;
rank: 97
score: 99.3941650390625
patch: case $STRING$ : sb . append ( char CaMeL At ( i ) ) ; break ;
rank: 97
score: 99.3875732421875
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; $STRING$ ; continue ;
rank: 97
score: 99.38346862792969
patch: break ; case $STRING$ : sb . append ( $STRING$ ) ; break ; }
rank: 97
score: 99.3197998046875
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; true ;
rank: 98
score: 99.47322591145833
patch: case $STRING$ : sb . append ( c ) . append ( $STRING$ ) . append ( $STRING$ ) ;
rank: 98
score: 99.46024753736413
patch: case - 1 : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ; break ;
rank: 98
score: 99.42087689568015
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; } return break ;
rank: 98
score: 99.39187282986111
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { sb . append ( c ) ; }
rank: 98
score: 99.3861083984375
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; $STRING$ ; ; ;
rank: 98
score: 99.31973031850961
patch: case s : sb . append ( $STRING$ ) ; break ;
rank: 99
score: 99.49816313244048
patch: case $STRING$ : sb . append ( s . append ( $STRING$ ) ) . append ( $STRING$ ) ;
rank: 99
score: 99.47305297851562
patch: case $STRING$ : if ( Character . is CaMeL Upper CaMeL Case ( c ) ) sb . append ( $STRING$ ) ;
rank: 99
score: 99.4579441236413
patch: case $STRING$ : sb . append ( Character . to CaMeL Hex CaMeL String ( c ) ) ; break ; }
rank: 99
score: 99.45181884765626
patch: String CaMeL Builder sb = new String CaMeL Builder ( s . length ( ) + $NUMBER$ ) ;
rank: 99
score: 99.42066650390625
patch: case $STRING$ ? sb . append ( $STRING$ ) : sb . append ( $STRING$ ) ; break ;
rank: 99
score: 99.38534981863839
patch: case $NUMBER$ : { sb . append ( $STRING$ ) ; break ;
rank: 99
score: 99.3822021484375
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; break ; case $NUMBER$ ;
rank: 99
score: 99.31953430175781
patch: case $STRING$ : sb . append ( c ) . append ( quote ) ;
rank: 100
score: 99.47233442826705
patch: case $STRING$ : s . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ; break ;
rank: 100
score: 99.45789104959239
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( $STRING$ ) ) ; break ; }
rank: 100
score: 99.45171356201172
patch: case $STRING$ : String CaMeL Builder sb = new String CaMeL Builder ( ) ;
rank: 100
score: 99.4191162109375
patch: case 0 : sb . append ( $STRING$ ) ; return sb . to CaMeL String ( ) ;
rank: 100
score: 99.39013671875
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder ) ;
rank: 100
score: 99.31944861778847
patch: case $STRING$ : sb . append ( $STRING$ ) ; true ;
rank: 101
score: 99.494951171875
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( output CaMeL Charset CaMeL Encoder ) . append ( c ) ;
rank: 101
score: 99.47214762369792
patch: case $STRING$ : if ( $STRING$ . equals CaMeL Ignore CaMeL Case ( c ) ) sb . append ( $STRING$ ) ;
rank: 101
score: 99.45057896205357
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( char CaMeL At ( i ) ) ;
rank: 101
score: 99.41907319568452
patch: sb . append ( $STRING$ ) ; sb . append ( sb . to CaMeL String ( ) ) ;
rank: 101
score: 99.38992513020834
patch: case $STRING$ : sb . append ( $STRING$ ) ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , output CaMeL Charset CaMeL Encoder ) ;
rank: 101
score: 99.31934271918402
patch: case $NUMBER$ : sb . append ( backslash CaMeL Escape ) ; break ; case $STRING$ :
rank: 102
score: 99.494541015625
patch: case $STRING$ : sb . append ( sb . char CaMeL At ( i ) ) ; sb . append ( $STRING$ ) ;
rank: 102
score: 99.41902465820313
patch: break . to CaMeL String ( ) ; } else { sb . append ( $STRING$ ) ; }
rank: 102
score: 99.3993609884511
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ; break ; case $STRING$ :
rank: 102
score: 99.38931274414062
patch: case $STRING$ : sb . append ( ( ( String ) backslash CaMeL Escape ) . to CaMeL String ( ) ) ;
rank: 102
score: 99.38404038373162
patch: case $STRING$ : if ( sb . equals ( $STRING$ ) ) break ; break ;
rank: 102
score: 99.381591796875
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $NUMBER$ : break ;
rank: 102
score: 99.319091796875
patch: case s . length ( ) : sb . append ( c ) ;
rank: 103
score: 99.47020580150463
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) . append ( $STRING$ ) ; break ;
rank: 103
score: 99.45715862771739
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( $STRING$ ) ) ; ; break ;
rank: 103
score: 99.44886474609375
patch: case $STRING$ : sb . append ( $STRING$ ) + $STRING$ : sb . append ( $STRING$ ) ;
rank: 103
score: 99.41876983642578
patch: break ; } else { sb . append ( $STRING$ ) ; break ; }
rank: 103
score: 99.39918870192308
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; sb . append ( $STRING$ ) ;
rank: 103
score: 99.38894171463816
patch: case $STRING$ : return $STRING$ ; case $STRING$ : sb . append ( backslash CaMeL Escape ) ;
rank: 103
score: 99.38378188189338
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; ; else break ;
rank: 103
score: 99.31685144761029
patch: int c = s . char CaMeL At ( i ) ; switch ( c )
rank: 104
score: 99.470185546875
patch: case $STRING$ : sb . append ( Character . to CaMeL Char CaMeL Array ( c ) ) . append ( $STRING$ ) ;
rank: 104
score: 99.45694732666016
patch: case $STRING$ : sb . append ( ( char ) $STRING$ ) ; break ;
rank: 104
score: 99.41855875651042
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; else { break ; }
rank: 104
score: 99.39845628004808
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { sb . append ( c ) ;
rank: 104
score: 99.38859610721983
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; }
rank: 104
score: 99.3160041360294
patch: case $STRING$ : sb . append ( backslash CaMeL Escape , $STRING$ ) ; break ;
rank: 105
score: 99.45647786458333
patch: case $STRING$ : throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;
rank: 105
score: 99.4177310341283
patch: sb . append ( $STRING$ ) ; break ; } sb . append ( $STRING$ ) ; }
rank: 105
score: 99.38838026258681
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder , output CaMeL Charset CaMeL Encoder ) ;
rank: 105
score: 99.38130457261029
patch: case $STRING$ : final case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 105
score: 99.3801498413086
patch: case 1 : sb . append ( $STRING$ ) ; break ; case $NUMBER$ ;
rank: 106
score: 99.49213256835938
patch: case $STRING$ : sb . append ( quote ) ; sb . append ( backslash CaMeL Escape ) ;
rank: 106
score: 99.46908365885416
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) . append ( $STRING$ ) ;
rank: 106
score: 99.45611017400569
patch: case $STRING$ ; sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ; break ;
rank: 106
score: 99.41517052283653
patch: sb . append ( $STRING$ ) ; break ; } break ;
rank: 106
score: 99.31492614746094
patch: return backslash CaMeL Escape ; case $STRING$ : sb . append ( $STRING$ ) ;
rank: 107
score: 99.49067826704545
patch: case $STRING$ : sb . append ( backslash CaMeL Escape , s . char CaMeL At ( i ) ) ;
rank: 107
score: 99.4688720703125
patch: case $STRING$ : if ( Character . is CaMeL Whitespace ( c ) ) sb . append ( $STRING$ ) ;
rank: 107
score: 99.44624660326087
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , doublequote CaMeL Escape , c ) ;
rank: 107
score: 99.4150390625
patch: sb . append ( $STRING$ ) ; } else { sb . append ( $STRING$ ) ; break ; }
rank: 107
score: 99.3880974264706
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; break ; case $STRING$
rank: 107
score: 99.37931554457721
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; } case $STRING$ :
rank: 107
score: 99.31475151909723
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; continue ; case $STRING$ :
rank: 108
score: 99.48955977590461
patch: case $STRING$ : sb . append ( $STRING$ ) ; else sb . append ( $STRING$ ) ;
rank: 108
score: 99.467734375
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( $STRING$ ) ) . append ( $STRING$ ) ;
rank: 108
score: 99.445947265625
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , output CaMeL Charset CaMeL Encoder ) ;
rank: 108
score: 99.41459575452302
patch: sb . append ( $STRING$ ) . append ( sb . to CaMeL String ( ) ) ;
rank: 108
score: 99.38759202223558
patch: case $STRING$ : sb . append ( s ) ; break ;
rank: 108
score: 99.38028757195724
patch: $STRING$ : sb . append ( $STRING$ ) ; sb . append ( $STRING$ ) ; break ;
rank: 108
score: 99.37913602941177
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; ; case $STRING$ ;
rank: 108
score: 99.31393432617188
patch: case ( $STRING$ : sb . append ( $STRING$ ) ;
rank: 109
score: 99.45249720982143
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( ) ) ; break ;
rank: 109
score: 99.44578915550595
patch: case $STRING$ : sb . append ( $STRING$ ) : sb . append ( doublequote CaMeL Escape ) ;
rank: 109
score: 99.41417439778645
patch: else sb . append ( $STRING$ ) ; break ; }
rank: 109
score: 99.38028293185764
patch: case $STRING$ : break ; case 1 : sb . append ( $STRING$ ) ; break ;
rank: 109
score: 99.37853325737848
patch: case $STRING$ : sb . append ( sb . append ( $STRING$ ) ; { break ;
rank: 109
score: 99.31269836425781
patch: case ) : sb . append ( $STRING$ ) ; break ; case $STRING$ :
rank: 110
score: 99.48896484375
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( output CaMeL Charset CaMeL Encoder ) ;
rank: 110
score: 99.46759643554688
patch: case $STRING$ : sb . append ( Character . char CaMeL At ( c ) ) ; break ;
rank: 110
score: 99.45193301930146
patch: case Char CaMeL Sequence . $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 110
score: 99.4455502158717
patch: if ( output CaMeL Charset CaMeL Encoder != null ) { sb . append ( $STRING$ ) ;
rank: 110
score: 99.41389545641448
patch: sb . append ( $STRING$ ) ; break ; else sb . append ( $STRING$ ) ; }
rank: 110
score: 99.39701625279018
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; sb . append ( c ) ;
rank: 110
score: 99.386044921875
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : sb . append ( backslash CaMeL Escape ) ;
rank: 110
score: 99.38022867838542
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : break ;
rank: 110
score: 99.37820434570312
patch: case 0 : case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 110
score: 99.31263316761364
patch: case $STRING$ : sb . append ( s ) ;
rank: 111
score: 99.48707116168478
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) . append ( quote ) ;
rank: 111
score: 99.4133533296131
patch: case $STRING$ + $STRING$ : sb . append ( sb . to CaMeL String ( ) ) ; break ;
rank: 111
score: 99.39664432920259
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String ( ) , c ) ; break ;
rank: 111
score: 99.38578033447266
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb ) ;
rank: 111
score: 99.37982536764706
patch: case $STRING$ : break ; sb . append ( $STRING$ ) ; break ; $STRING$ ;
rank: 111
score: 99.37706647600446
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; return $STRING$ ;
rank: 111
score: 99.31207634420956
patch: case String CaMeL Builder . $STRING$ : sb . append ( backslash CaMeL Escape ) ;
rank: 112
score: 99.46668352399554
patch: case $STRING$ : return s . char CaMeL At ( i ) ;
rank: 112
score: 99.451171875
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; } break ;
rank: 112
score: 99.41102510340073
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; break ; } }
rank: 112
score: 99.39588341346153
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) . to CaMeL String ( ) ) ; break ;
rank: 112
score: 99.38519577752976
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; sb . append ( c ) ; }
rank: 112
score: 99.37940889246323
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; $STRING$ } break ;
rank: 112
score: 99.37693684895834
patch: break ; case 1 : sb . append ( $STRING$ ) ; break ;
rank: 112
score: 99.31034088134766
patch: case $STRING$ : int c = s . char CaMeL At ( i ) ;
rank: 113
score: 99.48658389136905
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; sb . append ( $STRING$ ) ; }
rank: 113
score: 99.45023018973214
patch: case - 1 : sb . append ( $STRING$ ) ; break ;
rank: 113
score: 99.41067940848214
patch: case $STRING$ : sb . append ( sb . to CaMeL Lower CaMeL Case ( ) ) ; break ;
rank: 113
score: 99.38468794389205
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) + $STRING$ ) ; break ;
rank: 113
score: 99.37618815104166
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; ; }
rank: 113
score: 99.31012432391827
patch: case $STRING$ : sb . append ( $STRING$ ) ; false ;
rank: 114
score: 99.46612548828125
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . to CaMeL Lower CaMeL Case ( ) ;
rank: 114
score: 99.44919655539773
patch: default : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; break ; }
rank: 114
score: 99.38444249770221
patch: case $STRING$ : return $STRING$ ; case $STRING$ : sb . append ( $STRING$ ) ;
rank: 114
score: 99.37906222873264
patch: case $STRING$ : sb . append ( $STRING$ ) ; return sb . trim ( ) ;
rank: 114
score: 99.37548828125
patch: case $STRING$ ? sb . append ( $STRING$ ) : sb . append ( $STRING$ ) ;
rank: 114
score: 99.3098895733173
patch: case $STRING$ : sb . char CaMeL At ( i ) ;
rank: 115
score: 99.48557447350544
patch: case $STRING$ : sb . append ( c ) . append ( $STRING$ ) . append ( backslash CaMeL Escape ) ;
rank: 115
score: 99.4640225497159
patch: case $STRING$ : s . append ( Character . to CaMeL Char CaMeL Array ( c ) ) ; break ;
rank: 115
score: 99.44722707648026
patch: case $STRING$ : case $STRING$ : case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 115
score: 99.44326782226562
patch: case $STRING$ : break ; case $STRING$ : sb . append ( c ) ;
rank: 115
score: 99.41008843315973
patch: break . append ( $STRING$ ) ; } return sb . to CaMeL String ( ) ;
rank: 115
score: 99.38443359375
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) ; sb . append ( backslash CaMeL Escape ) ;
rank: 115
score: 99.37822614397321
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; )
rank: 116
score: 99.4845770474138
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) ;
rank: 116
score: 99.4638338955966
patch: case STRING : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; break ;
rank: 116
score: 99.4468410326087
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; } return sb . to CaMeL String ( ) ;
rank: 116
score: 99.44220291940789
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else {
rank: 116
score: 99.40980747767857
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( sb . length ( ) ) ; }
rank: 116
score: 99.38417454769737
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; break ? $STRING$ : $STRING$ ;
rank: 116
score: 99.3781967163086
patch: case $STRING$ : if ( sb . equals ( $STRING$ ) ) { break ;
rank: 116
score: 99.37348937988281
patch: case 1 : sb . append ( $STRING$ ) ; break ; case $STRING$ ;
rank: 117
score: 99.46351453993056
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; break ;
rank: 117
score: 99.44654430042614
patch: case 0 : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ; break ;
rank: 117
score: 99.44160388764881
patch: case $STRING$ : String CaMeL Builder sb = new String CaMeL Builder ( s . length ( ) ) ;
rank: 117
score: 99.4091796875
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( sb . trim ( ) ) ;
rank: 117
score: 99.39281412760417
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; sb . append ( backslash CaMeL Escape ) ;
rank: 117
score: 99.37791612413194
patch: case $STRING$ : String sb = $STRING$ ; sb . append ( $STRING$ ) ; break ;
rank: 117
score: 99.3734489889706
patch: case $STRING$ : case $STRING$ : sb . append ( $STRING$ ) ; break ; ;
rank: 117
score: 99.30907524956598
patch: case $STRING$ : sb . append ( $STRING$ . char CaMeL At ( i ) ) ;
rank: 118
score: 99.48359736689815
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ; sb . append ( backslash CaMeL Escape ) ;
rank: 118
score: 99.44641694568452
patch: case Integer . MIN _ VALUE : sb . append ( $STRING$ ) ; break ; default : break ;
rank: 118
score: 99.44145275297619
patch: case $STRING$ : sb . append ( ( int ) s . char CaMeL At ( i ) ) ;
rank: 118
score: 99.40900530133929
patch: case $STRING$ ? $STRING$ : sb . append ( sb . to CaMeL String ( ) ) ; break ;
rank: 118
score: 99.38307495117188
patch: case $STRING$ : sb . append ( $STRING$ ) ; break . append ( backslash CaMeL Escape ) ;
rank: 118
score: 99.3772331686581
patch: case $STRING$ : sb . append ( sb . length ( ) ) ; break ;
rank: 118
score: 99.37308078342014
patch: case $STRING$ : sb . append ( sb . parse ( $STRING$ ) ) ; break ;
rank: 119
score: 99.48335266113281
patch: case $STRING$ : sb . append ( s . append ( $STRING$ ) ) ;
rank: 119
score: 99.460693359375
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) . to CaMeL Upper CaMeL Case ( ) ; }
rank: 119
score: 99.44563598632813
patch: default : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; }
rank: 119
score: 99.40867784288194
patch: sb . append ( $STRING$ ) ; sb . append ( $STRING$ ) ; break ; }
rank: 119
score: 99.39265950520833
patch: case $STRING$ : sb = new String CaMeL Builder ( s . char CaMeL At ( i ) ) ;
rank: 119
score: 99.37560317095588
patch: case STRING : sb . append ( $STRING$ ) ; break ; $STRING$ ; break ;
rank: 119
score: 99.30903894761029
patch: case String CaMeL Builder . $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 120
score: 99.445556640625
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; } sb . append ( $STRING$ ) ;
rank: 120
score: 99.44052124023438
patch: String CaMeL Builder sb = new String CaMeL Builder ( ) ; sb . append ( $STRING$ ) ;
rank: 120
score: 99.40780784970238
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( sb . trim ( ) ) ; }
rank: 120
score: 99.3829574584961
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c ) ;
rank: 120
score: 99.37553405761719
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; ) break ;
rank: 120
score: 99.37288411458333
patch: case $NUMBER$ : sb . append ( sb . append ( $STRING$ ) ) ; break ;
rank: 120
score: 99.30892944335938
patch: case $STRING$ : sb . append ( s ) ; break ; case $STRING$ :
rank: 121
score: 99.48279389880952
patch: case $STRING$ : sb . append ( $STRING$ ) ; { sb . append ( backslash CaMeL Escape ) ;
rank: 121
score: 99.44545676491477
patch: case $STRING$ : sb . append ( Integer . to CaMeL Upper CaMeL Case ( c ) ) ; break ;
rank: 121
score: 99.4074348000919
patch: sb . append ( $STRING$ ) ; } } sb . append ( $STRING$ ) ;
rank: 121
score: 99.37372185202206
patch: case $STRING$ : if ( sb . length ( ) > $NUMBER$ ) { break ;
rank: 121
score: 99.372509765625
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; $NUMBER$ ;
rank: 121
score: 99.30873018152573
patch: n = s . char CaMeL At ( i ) ; switch ( c ) {
rank: 122
score: 99.48268724524456
patch: case $STRING$ : sb . append ( s . append ( $STRING$ ) ) . append ( backslash CaMeL Escape ) ;
rank: 122
score: 99.46058391702586
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) . char CaMeL At ( 0 ) ) ; break ;
rank: 122
score: 99.44459635416666
patch: case Character . MIN : sb . append ( $STRING$ ) ; break ;
rank: 122
score: 99.4386874112216
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) + $STRING$ : sb . append ( $STRING$ ) ;
rank: 122
score: 99.40742797851563
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( sb . length ( ) ) ;
rank: 122
score: 99.39099609375
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( s . char CaMeL At ( i ) ) ; break ;
rank: 122
score: 99.38276502821181
patch: case $STRING$ : sb . append ( s . append ( $STRING$ ) ) ; break ;
rank: 122
score: 99.37311469184027
patch: case $STRING$ : sb . append ( sb . equals ( $STRING$ ) ) ; break ;
rank: 122
score: 99.3075439453125
patch: case $STRING$ : sb . append ( $STRING$ ) ? $STRING$ : $STRING$ ;
rank: 123
score: 99.44442085597827
patch: default : sb . append ( $STRING$ ) ; break ; } } return sb . to CaMeL String ( ) ;
rank: 123
score: 99.406884765625
patch: sb . append ( $STRING$ ) ; break ; } sb . append ( $STRING$ ) ; break ;
rank: 123
score: 99.39084694602273
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ;
rank: 123
score: 99.3728759765625
patch: case $NUMBER$ : try { sb . append ( $STRING$ ) ; break ;
rank: 123
score: 99.30720520019531
patch: case 0 : sb . append ( $STRING$ ) ; break ; case $STRING$ :
rank: 124
score: 99.48149278428819
patch: case $STRING$ : if ( backslash CaMeL Escape ) { sb . append ( $STRING$ ) ;
rank: 124
score: 99.46019071691177
patch: case $STRING$ : return s . char CaMeL At ( i ) ; case $STRING$ :
rank: 124
score: 99.44430541992188
patch: case $STRING$ : sb . append ( Character . to CaMeL String ( $STRING$ ) ) ; break ;
rank: 124
score: 99.40687471277573
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; } break ; else
rank: 124
score: 99.3822021484375
patch: case $STRING$ : System . out . append ( $STRING$ ) ; sb . append ( backslash CaMeL Escape ) ;
rank: 124
score: 99.3726806640625
patch: case $STRING$ : if ( sb . length ( ) > 0 ) break ;
rank: 124
score: 99.37095133463542
patch: case 1 : sb . append ( $STRING$ ) . append ( $STRING$ ) ; break ;
rank: 125
score: 99.46012369791667
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ;
rank: 125
score: 99.44392664292279
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; default : continue ;
rank: 125
score: 99.43745349702381
patch: case $STRING$ + c ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ;
rank: 125
score: 99.40641566685268
patch: case $STRING$ : sb . append ( $STRING$ ) ; continue ; }
rank: 125
score: 99.372314453125
patch: case STRING : sb . append ( $STRING$ ) ; break ; $STRING$ ;
rank: 125
score: 99.37073516845703
patch: break ; ; case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 125
score: 99.30674833409927
patch: default : sb . append ( $STRING$ ) ; sb . append ( c ) ;
rank: 126
score: 99.48103841145833
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder != null ) { if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) )
rank: 126
score: 99.46001727764423
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) . append ( $STRING$ ) ; }
rank: 126
score: 99.44268508184524
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( $STRING$ ) ) ; }
rank: 126
score: 99.43738323709239
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) . append ( $STRING$ ) . append ( $STRING$ ) ;
rank: 126
score: 99.40631781684027
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( n ) ; break ;
rank: 126
score: 99.39049923058712
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ;
rank: 126
score: 99.37132975260417
patch: case $STRING$ : if ( sb . append ( $STRING$ ) ) break ;
rank: 126
score: 99.37041829427083
patch: case Integer . $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 126
score: 99.30641174316406
patch: case $STRING$ : sb . append ( doublequote CaMeL Escape ) ; break ;
rank: 127
score: 99.4600030307112
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; return sb . to CaMeL String ( ) ;
rank: 127
score: 99.44180961277173
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ; return $STRING$ ;
rank: 127
score: 99.43714815027573
patch: case $STRING$ : String CaMeL Builder sb = new String CaMeL Builder ( s ) ;
rank: 127
score: 99.40593804253473
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( s ) ; break ;
rank: 127
score: 99.39032451923077
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; sb . append ( c ) ;
rank: 127
score: 99.36970789292279
patch: case $STRING$ : sb . append ( $STRING$ ? $STRING$ : $STRING$ ) ; break ;
rank: 127
score: 99.30493882123162
patch: case $STRING$ || output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ;
rank: 128
score: 99.4595703125
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; return sb . to CaMeL String ( ) ;
rank: 128
score: 99.44146173650569
patch: case DEFAULT : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; break ;
rank: 128
score: 99.43595377604167
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( s , sb , c ) ;
rank: 128
score: 99.40569709329044
patch: case $STRING$ : sb . append ( $STRING$ ) ; } else { break ; }
rank: 128
score: 99.30386173023896
patch: case $STRING$ : sb . append ( $STRING$ + backslash CaMeL Escape ) ; break ;
rank: 129
score: 99.47770610608552
patch: case $STRING$ : { sb . append ( s . char CaMeL At ( i ) ) ;
rank: 129
score: 99.45906856142241
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) . append ( $STRING$ ) . to CaMeL Lower CaMeL Case ( ) ;
rank: 129
score: 99.4336825284091
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c . to CaMeL String ( ) ) ;
rank: 129
score: 99.4051577919408
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( case $NUMBER$ ) ; break ;
rank: 129
score: 99.38988318810097
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( $STRING$ ) ;
rank: 129
score: 99.38089304956897
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( doublequote CaMeL Escape ) ;
rank: 129
score: 99.36977667557566
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( break $STRING$ ) ; break ;
rank: 130
score: 99.47453962053571
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( sb . char CaMeL At ( i ) ) ;
rank: 130
score: 99.45886761209239
patch: sb . append ( $STRING$ ) . append ( c ) . append ( $STRING$ ) . append ( $STRING$ ) ;
rank: 130
score: 99.44014485677083
patch: default : sb . append ( $STRING$ ) ; sb . append ( c ) ; }
rank: 130
score: 99.38941368689903
patch: if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append ( c ) ; break ;
rank: 130
score: 99.3690185546875
patch: case $STRING$ : final $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 130
score: 99.36835075827206
patch: break ; break ; case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 131
score: 99.45818219866071
patch: case $NUMBER$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( c ) ;
rank: 131
score: 99.43934983473558
patch: default : sb . append ( $STRING$ ) ; break ; }
rank: 131
score: 99.43259840745192
patch: case $STRING$ + $STRING$ : sb . append ( $STRING$ ) ;
rank: 131
score: 99.40330810546875
patch: case $STRING$ : sb . append ( $STRING$ ) ; out . append ( $STRING$ ) ; break ;
rank: 131
score: 99.38930150082237
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) )
rank: 131
score: 99.36742350260417
patch: break ; case $NUMBER$ : sb . append ( $STRING$ ) ; break ;
rank: 131
score: 99.30282253689236
patch: case $STRING$ : sb . append ( Character . char CaMeL At ( c ) ) ;
rank: 132
score: 99.47378394717262
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) . append ( c ) ;
rank: 132
score: 99.45808919270833
patch: case Character . $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ; break ;
rank: 132
score: 99.40285773026316
patch: case $STRING$ : sb . append ( sb . char CaMeL Value ( ) ) ; break ;
rank: 132
score: 99.38862136314656
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append ( $STRING$ ) ; break ;
rank: 132
score: 99.38058810763889
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( value ) ;
rank: 132
score: 99.36687155330883
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : {
rank: 132
score: 99.36601426866319
patch: case $STRING$ : break ; case $NUMBER$ : sb . append ( $STRING$ ) ; break ;
rank: 132
score: 99.3023910522461
patch: case $STRING$ : sb . append ( ( char ) backslash CaMeL Escape ) ;
rank: 133
score: 99.473662109375
patch: case $STRING$ : sb . append ( sb . char CaMeL At ( i ) ) ; sb . append ( c ) ;
rank: 133
score: 99.45791965060764
patch: case $NUMBER$ : sb . append ( $STRING$ ) . append ( c ) ; break ;
rank: 133
score: 99.43830309416118
patch: case $STRING$ : sb . append ( Character . ) . append ( $STRING$ ) ; break ;
rank: 133
score: 99.38055419921875
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( $STRING$ ) ; break ;
rank: 133
score: 99.36558622472427
patch: sb . append ( $STRING$ ) ; sb . append ( $STRING$ ) ; break ;
rank: 133
score: 99.3020248413086
patch: case $STRING$ : case $STRING$ : sb . append ( backslash CaMeL Escape ) ;
rank: 134
score: 99.4736328125
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( sb . char CaMeL At ( i ) ) ; break ;
rank: 134
score: 99.45735115840517
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( c ) . to CaMeL Upper CaMeL Case ( ) ;
rank: 134
score: 99.42936197916667
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder != null ) sb . append ( c ) ;
rank: 134
score: 99.38773970170455
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) && output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) {
rank: 134
score: 99.3802823153409
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ; break ; case $STRING$
rank: 134
score: 99.36536516462054
patch: case 1 : sb . append ( $STRING$ ) ; break ; $STRING$
rank: 134
score: 99.30186462402344
patch: case ) { case $STRING$ : sb . append ( backslash CaMeL Escape ) ;
rank: 135
score: 99.47269479851974
patch: case $STRING$ : sb . append ( sb . char CaMeL At ( i ) ) ; }
rank: 135
score: 99.43792724609375
patch: case $STRING$ : sb . append ( $STRING$ ; break ;
rank: 135
score: 99.40113589638158
patch: sb . append ( $STRING$ ) ; } } sb . append ( $STRING$ ) ; break ;
rank: 135
score: 99.36592864990234
patch: case 0 : sb . append ( $STRING$ ) ; break ; case $NUMBER$ :
rank: 135
score: 99.3628791360294
patch: case $STRING$ : sb . append ( $STRING$ ) ; return $STRING$ ; } break ;
rank: 135
score: 99.3016845703125
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; false ;
rank: 136
score: 99.47265625
patch: case $STRING$ : sb . append ( ( s . char CaMeL At ( i ) ) ) ;
rank: 136
score: 99.45676879882812
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( $STRING$ ) ) ;
rank: 136
score: 99.42883882068452
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( ( String ) backslash CaMeL Escape ) ;
rank: 136
score: 99.400634765625
patch: case $STRING$ : sb . append ( $STRING$ ) ; } return c ;
rank: 136
score: 99.38628472222223
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; break ;
rank: 136
score: 99.36562930836396
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; ; case $NUMBER$ :
rank: 136
score: 99.3620246438419
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; $STRING$ { break ;
rank: 136
score: 99.30128389246323
patch: $STRING$ : sb . append ( backslash CaMeL Escape ) ; break ; case $STRING$ :
rank: 137
score: 99.43761097301136
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ; ; }
rank: 137
score: 99.4283780184659
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( ( int ) doublequote CaMeL Escape ) ;
rank: 137
score: 99.40057983398438
patch: case $STRING$ : sb . append ( $STRING$ ) ; out . append ( c ) ; break ;
rank: 137
score: 99.38625863882211
patch: case $STRING$ : sb . append ( 1 ) ; break ;
rank: 137
score: 99.36162252987133
patch: case $NUMBER$ : break ; $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 137
score: 99.3004619891827
patch: case $NUMBER$ : sb . append ( backslash CaMeL Escape ) ;
rank: 138
score: 99.43704427083334
patch: case $STRING$ : sb . append ( $STRING$ ) ; $STRING$ ; break ;
rank: 138
score: 99.42743210565476
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( s . append ( $STRING$ ) ) ;
rank: 138
score: 99.39892578125
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; break ; else
rank: 138
score: 99.38614908854167
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( sb . to CaMeL String ( ) ) ; break ;
rank: 138
score: 99.36424424913194
patch: case 1 : sb . append ( $STRING$ ) ; sb . append ( $STRING$ ) ;
rank: 138
score: 99.361083984375
patch: case $STRING$ : sb . append ( $NUMBER$ ) . append ( $STRING$ ) ; break ;
rank: 138
score: 99.30036756727431
patch: String CaMeL Builder sb = new String CaMeL Builder ( s . length ( ) ) ;
rank: 139
score: 99.47056361607143
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; } sb . append ( $STRING$ ) ;
rank: 139
score: 99.4551414207176
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) . char CaMeL At ( i ) ) ;
rank: 139
score: 99.43679970189145
patch: case $STRING$ : break ; default : throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;
rank: 139
score: 99.42710248161765
patch: case $STRING$ : String CaMeL Builder sb = new String CaMeL Builder ( quote ) ;
rank: 139
score: 99.39818572998047
patch: sb . append ( $STRING$ ) ; } sb . append ( $STRING$ ) ;
rank: 139
score: 99.38599853515625
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) . append ( $STRING$ ) ; break ;
rank: 139
score: 99.36100769042969
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; break ; $STRING$ ; ;
rank: 139
score: 99.29972076416016
patch: case $STRING$ : sb . append ( backslash CaMeL Escape [ i ] ) ;
rank: 140
score: 99.47038922991071
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( sb . char CaMeL At ( i ) ) . append ( $STRING$ ) ;
rank: 140
score: 99.45383588005515
patch: case $STRING$ : sb . append ( $STRING$ ) ; } break ; case $STRING$ :
rank: 140
score: 99.4255138578869
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( char CaMeL At ( c ) ) ;
rank: 140
score: 99.36081167367789
patch: case EOF : sb . append ( $STRING$ ) ; break ;
rank: 140
score: 99.29963902064732
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder != null )
rank: 141
score: 99.43648035386029
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) ; }
rank: 141
score: 99.396923828125
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( line ) ; break ;
rank: 141
score: 99.38560419497283
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( singlequote CaMeL Escape ) ; break ;
rank: 141
score: 99.362548828125
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; } case $STRING$ ;
rank: 141
score: 99.36068522135416
patch: append ( $STRING$ + sb . append ( $STRING$ ) ) ; break ;
rank: 141
score: 99.2987060546875
patch: case $STRING$ ? $STRING$ : sb . append ( $STRING$ ) ;
rank: 142
score: 99.47000558035714
patch: case $STRING$ : sb . append ( c ) . append ( $STRING$ ) . append ( c ) ;
rank: 142
score: 99.453515625
patch: case Character . char CaMeL At ( i ) : sb . append ( $STRING$ ) ; break ;
rank: 142
score: 99.43643798828126
patch: case $STRING$ : sb . append ( String . value CaMeL Of ( c ) ) ; break ;
rank: 142
score: 99.42527173913044
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) ; sb . append ( $STRING$ ) ;
rank: 142
score: 99.39627075195312
patch: sb . append ( $STRING$ ) . append ( $STRING$ ) ; break ; }
rank: 142
score: 99.37604314630681
patch: case $STRING$ : sb . append ( backslash CaMeL Escape , $STRING$ ) ; sb . append ( $STRING$ ) ;
rank: 142
score: 99.36227213541666
patch: append ( $STRING$ ) ; sb . append ( $STRING$ ) ; break ;
rank: 142
score: 99.29857720269098
patch: return backslash CaMeL Escape ; case $STRING$ : sb . append ( backslash CaMeL Escape ) ;
rank: 143
score: 99.46979631696429
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; { sb . append ( $STRING$ ) ;
rank: 143
score: 99.4534912109375
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; break ; default :
rank: 143
score: 99.43643527560764
patch: case $STRING$ : sb . append ( c ) ; break ; case $STRING$ : break ;
rank: 143
score: 99.39595754523026
patch: break ; } } sb . append ( $STRING$ ) ; sb . append ( $STRING$ ) ;
rank: 143
score: 99.37600840692934
patch: case $STRING$ : sb . append ( quote ) ; break ; case $STRING$ : sb . append ( $STRING$ ) ;
rank: 143
score: 99.36201746323529
patch: $STRING$ : sb . append ( sb . append ( $STRING$ ) ) ; break ;
rank: 143
score: 99.35965728759766
patch: case $STRING$ : return $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 143
score: 99.29830932617188
patch: return $STRING$ ; case $STRING$ : sb . append ( backslash CaMeL Escape ) ;
rank: 144
score: 99.46925571986607
patch: if ( output CaMeL Charset CaMeL Encoder != null ) { if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) {
rank: 144
score: 99.453076171875
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) ; return sb . to CaMeL String ( ) ;
rank: 144
score: 99.43613503196023
patch: case 1 : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; break ;
rank: 144
score: 99.42486281622024
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( doublequote CaMeL Escape , $STRING$ ) ;
rank: 144
score: 99.39510091145833
patch: case $STRING$ : sb . put ( $STRING$ , sb . to CaMeL String ( ) ) ; break ;
rank: 144
score: 99.38527018229166
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; * /
rank: 144
score: 99.35951063368056
patch: case $STRING$ : try { case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 144
score: 99.29681396484375
patch: switch ( $STRING$ ) { case $STRING$ : sb . append ( $STRING$ ) ;
rank: 145
score: 99.46916397758152
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( output CaMeL Charset ) . append ( $STRING$ ) ;
rank: 145
score: 99.4520199424342
patch: case $STRING$ : case $STRING$ : sb . append ( $STRING$ ) . append ( c ) ;
rank: 145
score: 99.43547506893383
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; break ; default : break ;
rank: 145
score: 99.39503115699405
patch: case 1 : sb . append ( $STRING$ ) ; return sb . to CaMeL String ( ) ; }
rank: 145
score: 99.38486891526442
patch: case $STRING$ : String CaMeL Builder sb = new String CaMeL Builder ( s . char CaMeL At ( i ) ) ; break ;
rank: 145
score: 99.35993957519531
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case ) ;
rank: 145
score: 99.35929601332721
patch: case $STRING$ : { case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 145
score: 99.2961654663086
patch: case $STRING$ : char c = s . char CaMeL At ( i ) ;
rank: 146
score: 99.4689432779948
patch: case $STRING$ : sb . append ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) ; break ;
rank: 146
score: 99.451396484375
patch: case $STRING$ : case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ; break ;
rank: 146
score: 99.43522135416667
patch: case $STRING$ : sb . append ( Character . to CaMeL Hex CaMeL String ( c ) ; break ;
rank: 146
score: 99.42416042751736
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , $STRING$ ) ;
rank: 146
score: 99.39499240451389
patch: case $STRING$ : sb . append ( $STRING$ ) ; return sb . length ( ) ;
rank: 146
score: 99.35952579273896
patch: break ; case $STRING$ : sb . append ( $STRING$ ) ; break ; break ;
rank: 146
score: 99.35917154947917
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; } break ; $STRING$ ;
rank: 146
score: 99.2955322265625
patch: case $STRING$ : continue ; case $STRING$ : sb . append ( $STRING$ ) ;
rank: 147
score: 99.46868341619319
patch: case $STRING$ : output CaMeL Charset CaMeL Encoder . append ( s . char CaMeL At ( i ) ) ;
rank: 147
score: 99.450439453125
patch: case $STRING$ : { sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ; break ;
rank: 147
score: 99.42344599184783
patch: String CaMeL Builder sb = new String CaMeL Builder ( s . char CaMeL At ( i ) ) ; break ;
rank: 147
score: 99.394775390625
patch: } if ( sb . equals ( $STRING$ ) ) return sb . to CaMeL String ( ) ;
rank: 147
score: 99.38459123883929
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; * /
rank: 148
score: 99.450166015625
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ; break ; case $STRING$ :
rank: 148
score: 99.42317000679348
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( s . char CaMeL At ( i ) , c ) ;
rank: 148
score: 99.39442443847656
patch: case $STRING$ : break ; else sb . append ( $STRING$ ) ; break ;
rank: 148
score: 99.38444301060268
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; sb . append ( backslash CaMeL Escape ) ;
rank: 148
score: 99.374208984375
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( backslash CaMeL Escape , doublequote CaMeL Escape ) ;
rank: 148
score: 99.29454848345588
patch: case $STRING$ : c = ( s . char CaMeL At ( i ) ) ;
rank: 149
score: 99.46757450810185
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder != null || output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) )
rank: 149
score: 99.45015462239583
patch: sb . append ( $STRING$ ) . append ( c ) . append ( $STRING$ ) ;
rank: 149
score: 99.43453543526786
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; ;
rank: 149
score: 99.39418247767857
patch: case $STRING$ + sb . char CaMeL Value ( ) ; sb . append ( $STRING$ ) ; break ;
rank: 149
score: 99.38398041596284
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ;
rank: 149
score: 99.3591079711914
patch: case 1 : sb . append ( $STRING$ ) ; break ; case 1 ;
rank: 149
score: 99.35791015625
patch: case $STRING$ : this . sb . append ( $STRING$ ) ; break ;
rank: 149
score: 99.29395470252403
patch: case c : sb . append ( $STRING$ ) ; break ;
rank: 150
score: 99.46719255118535
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append ( backslash CaMeL Escape ) ;
rank: 150
score: 99.44978133491848
patch: case $STRING$ : case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( $STRING$ ) ) ;
rank: 150
score: 99.42232473273026
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( ( char ) c ) ;
rank: 150
score: 99.39408365885417
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( 0 ) ; break ;
rank: 150
score: 99.37318004261364
patch: case $STRING$ : sb . append ( $STRING$ + $STRING$ ) ; sb . append ( backslash CaMeL Escape ) ;
rank: 150
score: 99.35888671875
patch: case 0 : sb . append ( $STRING$ ) ; break ; case 1 :
rank: 150
score: 99.35719927619485
patch: case $STRING$ : { sb . append ( $STRING$ ) ; break ; } break ;
rank: 150
score: 99.29388427734375
patch: case quote : sb . append ( backslash CaMeL Escape ) ; break ; case $STRING$ :
rank: 151
score: 99.4667547817888
patch: case $STRING$ : sb . append ( $STRING$ ) ; output CaMeL Charset CaMeL Encoder . append ( sb . char CaMeL At ( i ) ) ;
rank: 151
score: 99.44975142045455
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) . trim ( ) ; break ;
rank: 151
score: 99.43388227982955
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ; break ; }
rank: 151
score: 99.42232259114583
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( s , c , c ) ;
rank: 151
score: 99.35855865478516
patch: case $STRING$ : sb . append ( $STRING$ ) ; } break ; $STRING$ ;
rank: 151
score: 99.35707310267857
patch: case $STRING$ : ; sb . append ( $STRING$ ) ; break ;
rank: 151
score: 99.2927001953125
patch: case $STRING$ : sb . append ( $STRING$ ) ; true ; break ;
rank: 152
score: 99.46670134171195
patch: case $STRING$ : sb . append ( sb . char CaMeL At ( i ) ) . append ( c ) ;
rank: 152
score: 99.44956903872283
patch: case $STRING$ : sb . append ( ( char ) Character . to CaMeL Lower CaMeL Case ( c ) ) ;
rank: 152
score: 99.39303428248355
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( line ) ; }
rank: 152
score: 99.37213745117188
patch: case $STRING$ : sb . append ( $STRING$ + c ) ; sb . append ( $STRING$ ) ;
rank: 152
score: 99.3559341430664
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; break ; ; break ;
rank: 152
score: 99.29268152573529
patch: line = s . char CaMeL At ( i ) ; switch ( c ) {
rank: 153
score: 99.43368928328805
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( $STRING$ ) ) ; break ; }
rank: 153
score: 99.42104270241477
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( ( String ) doublequote CaMeL Escape ) ;
rank: 153
score: 99.3926140280331
patch: case $STRING$ : case $STRING$ : sb . append ( $STRING$ ) ; } break ;
rank: 153
score: 99.37200317382812
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : System . out .
rank: 153
score: 99.35747884114583
patch: case $NUMBER$ + $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 153
score: 99.35520833333334
patch: case $STRING$ : sb . append ( $STRING$ + $NUMBER$ ) ; break ;
rank: 153
score: 99.29258219401042
patch: break ; case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ :
rank: 154
score: 99.466044921875
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; break ; case $STRING$ : sb . append ( c ) ;
rank: 154
score: 99.448212890625
patch: case $NUMBER$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) . append ( $STRING$ ) ;
rank: 154
score: 99.42017279730902
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( 1 ) ;
rank: 154
score: 99.39253743489583
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( line ) ; break ;
rank: 154
score: 99.3830899325284
patch: case $STRING$ : sb . append ( $STRING$ + sb . char CaMeL At ( i ) ) ; break ;
rank: 154
score: 99.37141927083333
patch: case $STRING$ : sb . append ( $STRING$ ) ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String ( ) ) ;
rank: 154
score: 99.35726589626736
patch: append ( $STRING$ ) ; sb . append ( sb . append ( $STRING$ ) ) ;
rank: 154
score: 99.29229058159723
patch: case $STRING$ : sb . append ( $STRING$ ) ; s . append ( $STRING$ ) ;
rank: 155
score: 99.44819779829545
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( c ) ; }
rank: 155
score: 99.43252902560764
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : continue ;
rank: 155
score: 99.41868954613095
patch: case $STRING$ : $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ;
rank: 155
score: 99.37117222377232
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( backslash CaMeL Escape ) ;
rank: 155
score: 99.35675811767578
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; break ; case 1 ;
rank: 155
score: 99.35433959960938
patch: case $STRING$ : return sb . append ( $STRING$ ) ; break ; $STRING$ ;
rank: 155
score: 99.29213460286458
patch: case $STRING$ : if ( Charset CaMeL Encoder . can CaMeL Encode ( c ) ) {
rank: 156
score: 99.46436451099537
patch: case $STRING$ : output CaMeL Charset CaMeL Encoder . append ( sb . char CaMeL At ( i ) ) . append ( $STRING$ ) ;
rank: 156
score: 99.44789341517857
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) . trim ( ) ; }
rank: 156
score: 99.43131880326705
patch: case EOL : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; break ;
rank: 156
score: 99.41846466064453
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c , c ) ;
rank: 156
score: 99.38285522460937
patch: case $STRING$ : sb . append ( Long . to CaMeL String ( c ) ) ; break ;
rank: 156
score: 99.37067205255681
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) : sb . append ( $STRING$ ) ; break ;
rank: 156
score: 99.35664198133681
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; sb . append ( break ) ;
rank: 156
score: 99.29163411458333
patch: case $STRING$ : output CaMeL Charset CaMeL Encoder . append ( $STRING$ ) ;
rank: 157
score: 99.44767252604167
patch: case DEFAULT : sb . append ( $STRING$ ) . append ( c ) . append ( $STRING$ ) ;
rank: 157
score: 99.43092651367188
patch: default : sb . append ( $STRING$ ) ; } return sb . to CaMeL String ( ) ;
rank: 157
score: 99.39002075195313
patch: sb . append ( $STRING$ ) . append ( sb . append ( $STRING$ ) ) ; break ;
rank: 157
score: 99.35658772786458
patch: case 0 : sb . append ( $STRING$ ) . append ( $STRING$ ) ; break ;
rank: 157
score: 99.35358344184027
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; break ; $STRING$ ; } break ;
rank: 157
score: 99.29010564630681
patch: case ) : sb . append ( $STRING$ ) ;
rank: 158
score: 99.46304175967262
patch: case $STRING$ : sb . append ( ( char ) sb . char CaMeL At ( i ) ) ;
rank: 158
score: 99.44731613685344
patch: case $STRING$ : sb . append ( Character . to CaMeL Char CaMeL Array ( c ) ) ; return sb . to CaMeL String ( ) ;
rank: 158
score: 99.41797936480978
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( s . char CaMeL At ( 0 ) ) ;
rank: 158
score: 99.38971625434027
patch: sb . append ( $STRING$ ) ; sb . append ( c ) ; break ; }
rank: 158
score: 99.37006170099431
patch: case $STRING$ : System . out . append ( $STRING$ ) ; sb . append ( $STRING$ ) ; break ;
rank: 158
score: 99.35620880126953
patch: case $STRING$ : sb . append ( $STRING$ ) ; return ( break ) ;
rank: 159
score: 99.4627734375
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( $STRING$ ) . append ( backslash CaMeL Escape ) ;
rank: 159
score: 99.44707697088069
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) . to CaMeL String ( ) ;
rank: 159
score: 99.41752624511719
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , sb ) ;
rank: 159
score: 99.38246848366477
patch: case $STRING$ : sb . append ( $STRING$ ) + s . char CaMeL At ( i ) ; break ;
rank: 159
score: 99.36974158653847
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( backslash CaMeL Escape . to CaMeL String ( ) ) ;
rank: 159
score: 99.35491943359375
patch: case 0 : sb . append ( $STRING$ ) ; break ; ;
rank: 159
score: 99.35139465332031
patch: case $STRING$ : append ( sb . append ( $STRING$ ) ) ; break ;
rank: 159
score: 99.28898111979167
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; * /
rank: 160
score: 99.46255493164062
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; sb . append ( quote ) ;
rank: 160
score: 99.42921031605114
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( line ) ) ; break ;
rank: 160
score: 99.4168701171875
patch: case $STRING$ : sb . append ( $STRING$ + sb . to CaMeL String ( ) ) ;
rank: 160
score: 99.38862047697368
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( break ) ; }
rank: 160
score: 99.38235606317934
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; * /
rank: 160
score: 99.35472276475694
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case 1 : break ;
rank: 160
score: 99.28895399305556
patch: case s : sb . append ( backslash CaMeL Escape ) ; break ; case $STRING$ :
rank: 161
score: 99.46204898231908
patch: case $STRING$ : sb . append ( $STRING$ ) ; { sb . append ( $STRING$ ) ;
rank: 161
score: 99.44682006835937
patch: case $NUMBER$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ;
rank: 161
score: 99.42913263494319
patch: case $STRING$ : sb . append ( Character . to CaMeL Char CaMeL Array ( c ) ) ; continue ;
rank: 161
score: 99.41669921875
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder , c ) ;
rank: 161
score: 99.38169794497283
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , c ) ; break ;
rank: 161
score: 99.36769153225806
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( $STRING$ ) ;
rank: 161
score: 99.35459899902344
patch: case $STRING$ : sb . append ( $STRING$ ) ; return ( $STRING$ ) ;
rank: 161
score: 99.35098470052084
patch: case $STRING$ : if ( sb . equals ( $STRING$ ) ) break ;
rank: 161
score: 99.28868756975446
patch: case $STRING$ : sb . append ( singlequote CaMeL Escape ) ;
rank: 162
score: 99.44645182291667
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) . append ( $STRING$ ) ;
rank: 162
score: 99.42898692255434
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ; } break ;
rank: 162
score: 99.41662016369048
patch: case $STRING$ : case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ;
rank: 162
score: 99.3873062133789
patch: case $STRING$ : break ; } sb . append ( $STRING$ ) ; break ;
rank: 162
score: 99.38134765625
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( output CaMeL Charset CaMeL Encoder ) ; break ;
rank: 162
score: 99.354443359375
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; 1 ;
rank: 162
score: 99.28841727120536
patch: return $STRING$ ; case $STRING$ : sb . append ( $STRING$ ) ;
rank: 163
score: 99.38628186677632
patch: case $STRING$ ? sb . append ( $STRING$ ) : sb . append ( $STRING$ ) ; }
rank: 163
score: 99.38100714432566
patch: case $STRING$ : sb . append ( $STRING$ ) ; return s . append ( $STRING$ ) ;
rank: 163
score: 99.35379791259766
patch: case 0 : sb . append ( $STRING$ ) ; break ; } break ;
rank: 163
score: 99.35029153262867
patch: case $STRING$ : if ( sb . length ( ) == 0 ) { break ;
rank: 163
score: 99.28826904296875
patch: case - 1 : sb . append ( $STRING$ ) ;
rank: 164
score: 99.46107482910156
patch: case $STRING$ : sb . append ( char CaMeL At ( i ) ) ;
rank: 164
score: 99.44587890625
patch: case $STRING$ : s . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) . append ( $STRING$ ) ;
rank: 164
score: 99.41587763247283
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( doublequote CaMeL Escape , backslash CaMeL Escape ) ;
rank: 164
score: 99.38626534598214
patch: case 0 : sb . append ( $STRING$ ) ; return sb . to CaMeL String ( ) ; }
rank: 164
score: 99.38005719866071
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ; return $STRING$ ;
rank: 164
score: 99.36720784505208
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder ) ;
rank: 164
score: 99.34956629136029
patch: case $STRING$ : if ( break : sb . append ( $STRING$ ) ; break ;
rank: 164
score: 99.28805721507354
patch: default : sb . append ( quote ) ; sb . append ( $STRING$ ) ;
rank: 165
score: 99.46103387129934
patch: case $STRING$ : sb . append ( c ) ; } sb . append ( $STRING$ ) ;
rank: 165
score: 99.44563802083333
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; sb . append ( $STRING$ ) ;
rank: 165
score: 99.42775560461956
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ) ; break ;
rank: 165
score: 99.4157958984375
patch: case $STRING$ : sb . append ( c ) + $STRING$ : sb . append ( $STRING$ ) ;
rank: 165
score: 99.37955078125
patch: if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append ( c ) ; }
rank: 165
score: 99.36678292410714
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder , doublequote CaMeL Escape ) ;
rank: 165
score: 99.35328674316406
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case s ;
rank: 165
score: 99.34942985983456
patch: case $STRING$ : sb . append ( $NUMBER$ ) ; break ; $STRING$ ; break ;
rank: 165
score: 99.2869514016544
patch: case $STRING$ : sb . append ( output CaMeL Charset CaMeL Encoder . $STRING$ ) ;
rank: 166
score: 99.44485238882211
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) . to CaMeL Upper CaMeL Case ( ) ; break ;
rank: 166
score: 99.4273322610294
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; default : ; }
rank: 166
score: 99.41451590401786
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , sb , c ) ;
rank: 166
score: 99.38599917763158
patch: break ; } sb . append ( $STRING$ ) ; } sb . append ( $STRING$ ) ;
rank: 166
score: 99.36659240722656
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , output CaMeL Charset CaMeL Encoder ) ;
rank: 166
score: 99.34926194411058
patch: case PREFIX : sb . append ( $STRING$ ) ; break ;
rank: 166
score: 99.28680826822917
patch: case $STRING$ : sb . append ( backslash CaMeL Escape , s ) ;
rank: 167
score: 99.45973714192708
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( singlequote CaMeL Escape ) ;
rank: 167
score: 99.444130859375
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) ; return sb . to CaMeL String ( ) ;
rank: 167
score: 99.4272793856534
patch: default : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ; break ; }
rank: 167
score: 99.4140392485119
patch: String CaMeL Builder sb = new String CaMeL Builder ( $STRING$ ) ; sb . append ( $STRING$ ) ;
rank: 167
score: 99.38589680989584
patch: case $STRING$ : sb . append ( $STRING$ ) ; } return $STRING$ ;
rank: 167
score: 99.36646379743304
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c ) ; break ;
rank: 167
score: 99.35207790798611
patch: case 1 : sb . append ( $STRING$ ) ; break ; case $STRING$ : break ;
rank: 167
score: 99.28531901041667
patch: case s : sb . append ( $STRING$ ) ; sb . append ( $STRING$ ) ;
rank: 168
score: 99.4435970908717
patch: case $STRING$ : return s . char CaMeL At ( i ) ; case $STRING$ : break ;
rank: 168
score: 99.4271991436298
patch: case $STRING$ : case $STRING$ : case $STRING$ : case $STRING$ :
rank: 168
score: 99.3858578330592
patch: case $STRING$ : sb . append ( $STRING$ ) ; out . append ( c ) ; }
rank: 168
score: 99.37884051983173
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) sb . append ( c ) ;
rank: 168
score: 99.35152994791666
patch: case $STRING$ : sb . append ( $STRING$ ) ; return $STRING$ ; }
rank: 168
score: 99.28521369485294
patch: case Charset CaMeL Encoder . $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 169
score: 99.45921167834052
patch: case $STRING$ : output CaMeL Charset CaMeL Encoder . append ( sb . char CaMeL At ( i ) ) ; sb . append ( $STRING$ ) ;
rank: 169
score: 99.44263756793478
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) . to CaMeL String ( ) ; }
rank: 169
score: 99.426806640625
patch: case $STRING$ : sb . append ( Integer . to CaMeL String ( $STRING$ ) ) ; break ;
rank: 169
score: 99.38506116365132
patch: else sb . append ( $STRING$ ) ; break ; } sb . append ( $STRING$ ) ;
rank: 169
score: 99.37872314453125
patch: case 1 : sb . append ( s . char CaMeL At ( i ) ) ; break ;
rank: 169
score: 99.36553364415323
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c ) ;
rank: 169
score: 99.34920501708984
patch: case $STRING$ : sb . append ( $STRING$ ) ; case $STRING$ : break ;
rank: 169
score: 99.34811197916666
patch: case $NUMBER$ : break ; sb . append ( $STRING$ ) ; break ;
rank: 170
score: 99.44215901692708
patch: case $STRING$ : break ; case $STRING$ : sb . append ( c ) ; break ;
rank: 170
score: 99.42667846679687
patch: case $STRING$ : sb . append ( Character . to CaMeL Hex CaMeL String ( c ) ) ;
rank: 170
score: 99.38505336216518
patch: sb . append ( $STRING$ ) ; break ; } break ; }
rank: 170
score: 99.37861851283482
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , doublequote CaMeL Escape , backslash CaMeL Escape ) ;
rank: 170
score: 99.34723977481617
patch: case 1 : sb . append ( $STRING$ ) ; break ; $STRING$ : break ;
rank: 170
score: 99.28447409237133
patch: case $STRING$ : sb . append ( $STRING$ . to CaMeL String ( ) ) ;
rank: 171
score: 99.4581298828125
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ; } }
rank: 171
score: 99.44164360894098
patch: case $STRING$ : sb . append ( Character . to CaMeL String ( c ) ) ;
rank: 171
score: 99.42661981997283
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( $STRING$ ) ) ; ; break ;
rank: 171
score: 99.41181640625
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i + 1 ) ) ;
rank: 171
score: 99.38483537946429
patch: sb . append ( $STRING$ ) ; sb . append ( sb . length ( ) ) ; break ;
rank: 171
score: 99.3784649188702
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; break ; case $STRING$ :
rank: 171
score: 99.36513671875
patch: case $STRING$ : System . out . append ( $STRING$ ) ; sb . append ( $STRING$ ) ;
rank: 171
score: 99.3483154296875
patch: case $STRING$ : sb . append ( $STRING$ ) ; { break ; }
rank: 171
score: 99.34615885416666
patch: case STRING : sb . append ( $STRING$ ) ; break ; break ;
rank: 171
score: 99.28388528262867
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; true ; break ;
rank: 172
score: 99.45757735402961
patch: case $STRING$ : sb . append ( c ) ; else sb . append ( c ) ;
rank: 172
score: 99.44066097861842
patch: case $STRING$ : case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) ;
rank: 172
score: 99.42615855823864
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( $STRING$ ) ) ; continue ;
rank: 172
score: 99.41172880284927
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c ) ;
rank: 172
score: 99.3842837685033
patch: case $STRING$ : sb . append ( $STRING$ ) ; } return sb . length ( ) ;
rank: 172
score: 99.34770372178819
patch: case $STRING$ : sb . append ( sb . break ( $STRING$ ) ) ; break ;
rank: 172
score: 99.28387092141544
patch: name = s . char CaMeL At ( i ) ; switch ( c ) {
rank: 173
score: 99.44033708243535
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) . char CaMeL At ( 0 ) ) ; break ;
rank: 173
score: 99.4258145419034
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; } }
rank: 173
score: 99.41101604959239
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , sb , c , doublequote CaMeL Escape ) ;
rank: 173
score: 99.38405890213816
patch: case $STRING$ : sb . append ( $STRING$ ) ; } return sb . start ( ) ;
rank: 173
score: 99.37810407366071
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( s , c ) ;
rank: 173
score: 99.36429537259616
patch: case $STRING$ : sb . append ( $STRING$ ) ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c , c ) ;
rank: 173
score: 99.3476333618164
patch: break ; case $STRING$ : sb . append ( $STRING$ ) ; break ; ;
rank: 173
score: 99.34595489501953
patch: case $STRING$ : if ( sb . append ( $STRING$ ) ) { break ;
rank: 173
score: 99.28355055588942
patch: case ( c ) : sb . append ( $STRING$ ) ;
rank: 174
score: 99.440185546875
patch: case $STRING$ : sb . append ( Character . to CaMeL Char CaMeL Array ( c ) ) ; break ; case $STRING$ :
rank: 174
score: 99.42561420641448
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( ) ; break ;
rank: 174
score: 99.37802124023438
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( $NUMBER$ ) ; break ;
rank: 174
score: 99.36429443359376
patch: case $STRING$ : sb . append ( s ) ; sb . append ( $STRING$ ) ; break ;
rank: 174
score: 99.345703125
patch: case 1 : break ; case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 174
score: 99.28252814797794
patch: c = s . char CaMeL At ( i ) ; switch ( c ) {
rank: 175
score: 99.45728600543478
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; } else { sb . append ( $STRING$ ) ;
rank: 175
score: 99.44017944335937
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) . trim ( ) ;
rank: 175
score: 99.4253162202381
patch: case $STRING$ : sb . append ( Character . to CaMeL Hex CaMeL String ( c ) ) ; }
rank: 175
score: 99.41001586914062
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , c , c ) ;
rank: 175
score: 99.38363486842105
patch: case $STRING$ : sb . append ( sb . length ( ) + $STRING$ ) ; break ;
rank: 175
score: 99.37626953125
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; sb . append ( $STRING$ ) ; break ;
rank: 175
score: 99.36386287913604
patch: case $STRING$ : if ( c == $STRING$ ) sb . append ( $STRING$ ) ;
rank: 175
score: 99.346826171875
patch: else { case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 175
score: 99.2825066061581
patch: $STRING$ : sb . append ( $STRING$ ) ; sb . append ( $STRING$ ) ;
rank: 176
score: 99.45669894748264
patch: case $STRING$ : sb . append ( sb . append ( backslash CaMeL Escape ) ) ;
rank: 176
score: 99.43962751116071
patch: case 1 : sb . append ( $STRING$ ) . append ( c ) . append ( $STRING$ ) ;
rank: 176
score: 99.36332646122685
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c ) ; }
rank: 176
score: 99.3454081217448
patch: case $STRING$ : return sb . append ( $STRING$ ) ;
rank: 176
score: 99.34448920355902
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( sb ) ; break ;
rank: 176
score: 99.28205023871527
patch: case quote : sb . append ( $STRING$ ) ; sb . append ( $STRING$ ) ;
rank: 177
score: 99.45653011924342
patch: case $STRING$ : sb . append ( $STRING$ ) ; { sb . append ( c ) ;
rank: 177
score: 99.43907674153645
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( ) ) . append ( $STRING$ ) ;
rank: 177
score: 99.42497114701705
patch: case Integer . MIN _ VALUE : sb . append ( $STRING$ ) ; break ; default : break ; }
rank: 177
score: 99.40980224609375
patch: case $STRING$ : String CaMeL Builder sb = new String CaMeL Builder ( s . char CaMeL At (
rank: 177
score: 99.38302451685855
patch: } sb . append ( $STRING$ ) ; } sb . append ( $STRING$ ) ; break ;
rank: 177
score: 99.3743832236842
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : return $STRING$ ;
rank: 177
score: 99.36290564903847
patch: case $STRING$ : sb . append ( $STRING$ ) ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , sb ) ;
rank: 177
score: 99.34488351004464
patch: case 1 : sb . append ( $STRING$ ) ; return $STRING$ ;
rank: 177
score: 99.28151041666666
patch: case : sb . append ( c ) ; break ; case $STRING$ :
rank: 178
score: 99.45608956473214
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; } sb . append ( c ) ;
rank: 178
score: 99.43869850852273
patch: case $STRING$ : if ( $STRING$ . equals ( Character . to CaMeL Lower CaMeL Case ( c ) ) )
rank: 178
score: 99.42440975413604
patch: case $STRING$ : sb . append ( $STRING$ ) ; $STRING$ + c ; break ;
rank: 178
score: 99.40932829483695
patch: String CaMeL Builder sb = new String CaMeL Builder ( s . char CaMeL At ( i ) , c ) ;
rank: 178
score: 99.34416368272569
patch: case 1 : sb . append ( sb . append ( $STRING$ ) ) ; break ;
rank: 178
score: 99.28131462545956
patch: case Charset CaMeL Encoder . $STRING$ : sb . append ( backslash CaMeL Escape ) ;
rank: 179
score: 99.45600043402777
patch: case $STRING$ : sb . append ( sb . append ( c ) ) ; break ;
rank: 179
score: 99.42438354492188
patch: default : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ; }
rank: 179
score: 99.4092684659091
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder , sb , c ) ;
rank: 179
score: 99.38237072172619
patch: append ( sb . to CaMeL String ( ) ) ; sb . append ( $STRING$ ) ; } }
rank: 179
score: 99.37353515625
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( backslash CaMeL Escape ) ) ;
rank: 179
score: 99.36218682650862
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( singlequote CaMeL Escape ) ;
rank: 179
score: 99.3433837890625
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; break ; else break ;
rank: 179
score: 99.34288736979167
patch: case $STRING$ : sb . append ( $NUMBER$ ) ; break ; $STRING$ ;
rank: 179
score: 99.28114149305556
patch: case $STRING$ : sb . char CaMeL At ( i ) ; break ; case $STRING$ :
rank: 180
score: 99.43819173177083
patch: case Character . $STRING$ : sb . append ( Character . to CaMeL Char CaMeL Array ( c ) ) ; break ;
rank: 180
score: 99.42376999627976
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) break ;
rank: 180
score: 99.40902855282738
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , singlequote CaMeL Escape ) ;
rank: 180
score: 99.38231259300595
patch: sb . append ( $STRING$ ) . append ( sb . to CaMeL String ( ) ) ; } }
rank: 180
score: 99.3733139038086
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String ( ) ) ;
rank: 180
score: 99.34252251519098
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; append ++ { break ;
rank: 181
score: 99.42344447544643
patch: case $STRING$ : sb . append ( c ) ; break ; }
rank: 181
score: 99.38209292763158
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( break ) ; } break ;
rank: 181
score: 99.3732277199074
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( s . char CaMeL At ( i ) ) ; break ;
rank: 181
score: 99.36202799479166
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( backslash CaMeL Escape ) ; break ;
rank: 181
score: 99.34241536458333
patch: $STRING$ : sb . append ( $STRING$ ) ; break ; } break ;
rank: 181
score: 99.34150526258681
patch: case $STRING$ : sb . append ( Character . append ( $STRING$ ) ) ; break ;
rank: 181
score: 99.28037923177084
patch: case $STRING$ : sb . append ( $STRING$ ) ; false ; break ;
rank: 182
score: 99.45313561480978
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( $STRING$ ) . append ( c ) ;
rank: 182
score: 99.43794177827381
patch: case $STRING$ : break ; case $STRING$ : return Character . to CaMeL Lower CaMeL Case ( c ) ;
rank: 182
score: 99.42339124177632
patch: case $STRING$ : sb . append ( $STRING$ ; sb . append ( c ) ; break ;
rank: 182
score: 99.40661090353261
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , $STRING$ , doublequote CaMeL Escape ) ;
rank: 182
score: 99.38192749023438
patch: } sb . append ( $STRING$ ) . append ( sb . to CaMeL String ( ) ) ;
rank: 182
score: 99.36201615767045
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( backslash CaMeL Escape , c ) ;
rank: 182
score: 99.34219563802084
patch: case $STRING$ : sb . append ( sb . $STRING$ ) ; break ;
rank: 182
score: 99.28011067708333
patch: switch ( $STRING$ ) { case $STRING$ : sb . append ( backslash CaMeL Escape ) ;
rank: 183
score: 99.45264689127605
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( sb . char CaMeL At ( i ) ) ; }
rank: 183
score: 99.43759042245371
patch: case Character . $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) . append ( $STRING$ ) ;
rank: 183
score: 99.42321196056548
patch: case $STRING$ : sb . append ( $STRING$ ) ; return sb . to CaMeL String ( ) ; ;
rank: 183
score: 99.38176526521382
patch: case $STRING$ : sb . append ( $STRING$ ) . to CaMeL String ( ) ; break ;
rank: 183
score: 99.36183860085227
patch: case $STRING$ : sb . append ( ( ( char ) c ) . to CaMeL String ( ) ) ;
rank: 183
score: 99.3421875
patch: $STRING$ : case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 183
score: 99.27947126116071
patch: case $STRING$ : sb . append ( ( char ) quote ) ;
rank: 184
score: 99.43754650297619
patch: case $STRING$ : s . append ( $STRING$ ) . append ( $STRING$ ) . append ( c ) ;
rank: 184
score: 99.40641276041667
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( s . char CaMeL At (
rank: 184
score: 99.38166360294117
patch: } sb . append ( $STRING$ ) ; } sb . append ( $STRING$ ) ;
rank: 184
score: 99.3721923828125
patch: case $STRING$ : sb . append ( $STRING$ ) ; * / sb . append ( $STRING$ ) ;
rank: 184
score: 99.3617919921875
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : sb . append CaMeL
rank: 184
score: 99.34127987132354
patch: case $STRING$ : break ; $STRING$ ; sb . append ( $STRING$ ) ; break ;
rank: 184
score: 99.3394775390625
patch: case $STRING$ : sb . append ( Character . create ( $STRING$ ) ) ; break ;
rank: 184
score: 99.2791278545673
patch: b . append ( $STRING$ ) ; break ; case $STRING$ :
rank: 185
score: 99.43739229090073
patch: case $STRING$ : case $STRING$ : return s . char CaMeL At ( i ) ;
rank: 185
score: 99.42275168678977
patch: case $STRING$ : { sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; }
rank: 185
score: 99.38143920898438
patch: case $STRING$ : sb . append ( $STRING$ ) ; return sb . char CaMeL Value ( ) ;
rank: 185
score: 99.34111328125
patch: case $STRING$ : System . sb . append ( $STRING$ ) ; break ;
rank: 185
score: 99.33922576904297
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ ?
rank: 185
score: 99.27875162760417
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case :
rank: 186
score: 99.45048522949219
patch: case $STRING$ : sb . append ( s . append ( c ) ) ;
rank: 186
score: 99.43734375
patch: case $STRING$ : case $STRING$ : sb . append ( Character . to CaMeL Char CaMeL Array ( c ) ) ; break ;
rank: 186
score: 99.40566534745066
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , c ) ; }
rank: 186
score: 99.37169147359914
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , doublequote CaMeL Escape , singlequote CaMeL Escape ) ;
rank: 186
score: 99.3616192157452
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; output CaMeL Charset CaMeL Encoder . append ( backslash CaMeL Escape ) ;
rank: 186
score: 99.340771484375
patch: case $STRING$ : if ( sb . append ( $STRING$ ) ; break ;
rank: 186
score: 99.33860270182292
patch: case $STRING$ ; sb . append ( sb . append ( $STRING$ ) ) ; break ;
rank: 186
score: 99.278662109375
patch: case $STRING$ : String CaMeL Builder . append ( backslash CaMeL Escape ) ;
rank: 187
score: 99.45046164772727
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder == null ) { sb . append ( $STRING$ ) ;
rank: 187
score: 99.43714599609375
patch: case $STRING$ : s . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ;
rank: 187
score: 99.4223400297619
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( ) ) ; break ;
rank: 187
score: 99.405517578125
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( ( int ) backslash CaMeL Escape ) ;
rank: 187
score: 99.37118966238839
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; sb . append ( $STRING$ ) ; break ;
rank: 187
score: 99.36146036783855
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( backslash CaMeL Escape , backslash CaMeL Escape ) ;
rank: 187
score: 99.34068388097427
patch: case $STRING$ : break ; break ; sb . append ( $STRING$ ) ; break ;
rank: 187
score: 99.33858913845486
patch: else if ( sb . equals ( $STRING$ ) ) sb . append ( $STRING$ ) ;
rank: 187
score: 99.2785285500919
patch: case $STRING$ : c = $STRING$ ; sb . append ( backslash CaMeL Escape ) ;
rank: 188
score: 99.4495265794837
patch: case $STRING$ : sb . append ( $STRING$ ) ; } sb . append ( output CaMeL Charset CaMeL Encoder ) ;
rank: 188
score: 99.42181951349431
patch: case Integer . MIN _ VALUE : sb . append ( $STRING$ ) . append ( c ) ; break ;
rank: 188
score: 99.40503991168478
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( s . char CaMeL At ( c ) ) ;
rank: 188
score: 99.34063042534723
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; $STRING$ ; { break ;
rank: 188
score: 99.33814912683823
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; ; case $NUMBER$ ;
rank: 188
score: 99.27833467371323
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ? $STRING$ : $STRING$ ;
rank: 189
score: 99.44927368164062
patch: case $STRING$ : sb . append ( output CaMeL Charset CaMeL Encoder . append ( c ) ) ;
rank: 189
score: 99.43662806919643
patch: case $STRING$ : break ; case $STRING$ : return Character . to CaMeL Upper CaMeL Case ( c ) ;
rank: 189
score: 99.4217593544408
patch: case $STRING$ : break ; default : throw new Unsupported CaMeL Operation CaMeL Exception ( $STRING$ ) ;
rank: 189
score: 99.40503607855902
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c , sb , c ) ;
rank: 189
score: 99.37067522321429
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c , c ) ; break ;
rank: 189
score: 99.3404769897461
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; break ; $STRING$ break ;
rank: 189
score: 99.33782958984375
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case Token . $STRING$ ;
rank: 189
score: 99.27669949001736
patch: case $STRING$ : continue ; case $STRING$ : sb . append ( backslash CaMeL Escape ) ;
rank: 190
score: 99.4490276834239
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; sb . append ( backslash CaMeL Escape ) ; }
rank: 190
score: 99.4365765115489
patch: case $NUMBER$ : sb . append ( $STRING$ ) . append ( c ) . append ( $STRING$ ) ; break ;
rank: 190
score: 99.37931060791016
patch: case $STRING$ : sb . append ( $STRING$ ) ; continue ; } break ;
rank: 190
score: 99.36105186060855
patch: case $STRING$ : sb . append ( s . length ( ) + $STRING$ ) ; break ;
rank: 190
score: 99.34047564338235
patch: break ; case $STRING$ : sb . append ( $STRING$ ) ; break ; $STRING$ ;
rank: 190
score: 99.337060546875
patch: case $NUMBER$ ? $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 190
score: 99.27642415364583
patch: case $STRING$ : c = $STRING$ ; sb . append ( $STRING$ ) ;
rank: 191
score: 99.44886125837054
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( s . char CaMeL At ( i ) ) . append ( $STRING$ ) ;
rank: 191
score: 99.41914506392045
patch: case $STRING$ : System . out . println ( $STRING$ ) ; sb . append ( c ) ; break ;
rank: 191
score: 99.40477230674342
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c , c ) ;
rank: 191
score: 99.37918526785714
patch: case $STRING$ : sb . append ( $STRING$ ) ; c = sb . to CaMeL String ( ) ;
rank: 191
score: 99.36083080150463
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( backslash CaMeL Escape ) ; sb . append ( $STRING$ ) ;
rank: 191
score: 99.33976745605469
patch: case $STRING$ : break ; sb . append ( $STRING$ ) ; break ; ;
rank: 191
score: 99.27640533447266
patch: case $STRING$ : sb . append ( charset ) ; break ; case $STRING$ :
rank: 192
score: 99.4482421875
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( output CaMeL Charset CaMeL Encoder . append ( sb . char CaMeL At ( i ) ) ) ;
rank: 192
score: 99.4359375
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( Character . to CaMeL Lower CaMeL Case ( $STRING$ ) ) ;
rank: 192
score: 99.41910453464673
patch: default : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; break ; } }
rank: 192
score: 99.37904575892857
patch: case $STRING$ : sb . append ( sb . to CaMeL String ( ) ) ; break ; break ;
rank: 192
score: 99.33940294053819
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; } break ; break ;
rank: 192
score: 99.33693440755208
patch: else sb . append ( $STRING$ ) ; sb . append ( $STRING$ ) ; break ;
rank: 192
score: 99.27477213541667
patch: case $NUMBER$ : sb . append ( backslash CaMeL Escape ) ; break ;
rank: 193
score: 99.43589089133523
patch: case $NUMBER$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( $STRING$ ) ) ; break ;
rank: 193
score: 99.4190673828125
patch: case $STRING$ : case $STRING$ : sb . append ( $STRING$ ) ; }
rank: 193
score: 99.40388793945313
patch: case $STRING$ + $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ;
rank: 193
score: 99.37894439697266
patch: case $STRING$ : case 0 : sb . append ( $STRING$ ) ; break ;
rank: 193
score: 99.369814453125
patch: if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append ( $STRING$ ) ; }
rank: 193
score: 99.36069742838542
patch: case $STRING$ : sb . append ( $STRING$ ) ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c ) ;
rank: 193
score: 99.33613137637867
patch: case $STRING$ : try { sb . append ( $STRING$ ) ; break ; break ;
rank: 193
score: 99.27391639122597
patch: break ; case $STRING$ : sb . append ( c ) ;
rank: 194
score: 99.448095703125
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( output CaMeL Charset CaMeL Encoder . append ( $STRING$ ) ) ;
rank: 194
score: 99.43555591724537
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ;
rank: 194
score: 99.40345830502717
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , c , singlequote CaMeL Escape ) ;
rank: 194
score: 99.37832496279762
patch: sb . append ( $STRING$ ) ; sb . append ( sb . trim ( ) ) ; break ;
rank: 194
score: 99.36977317116477
patch: case $STRING$ : sb . append ( $STRING$ ) ; * / sb . append ( backslash CaMeL Escape ) ;
rank: 194
score: 99.27320963541666
patch: case : sb . append ( quote ) ; break ; case $STRING$ :
rank: 195
score: 99.44754593460648
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; sb . append ( $STRING$ ) . append ( backslash CaMeL Escape ) ;
rank: 195
score: 99.43547257133152
patch: case $STRING$ : sb . append ( ( char ) Character . to CaMeL Upper CaMeL Case ( c ) ) ;
rank: 195
score: 99.41885375976562
patch: default : sb . append ( $STRING$ ) ; break ; } sb . append ( $STRING$ ) ;
rank: 195
score: 99.37813313802083
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; else return $STRING$ ; }
rank: 195
score: 99.36038523706897
patch: case $STRING$ : sb . append ( $STRING$ ) ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , doublequote CaMeL Escape ) ;
rank: 195
score: 99.33771829044117
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; $STRING$ + break ;
rank: 195
score: 99.3350830078125
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; default ;
rank: 195
score: 99.27261173023896
patch: case s . to CaMeL String ( ) : sb . append ( $STRING$ ) ;
rank: 196
score: 99.44717261904762
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) + $STRING$ ) ;
rank: 196
score: 99.4354248046875
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) . to CaMeL Char CaMeL Array ( ) ;
rank: 196
score: 99.40233154296875
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i - $NUMBER$ ) ) ;
rank: 196
score: 99.37810315583882
patch: sb . append ( $STRING$ ) . append ( sb . trim ( ) ) ; break ;
rank: 196
score: 99.36972045898438
patch: case $STRING$ : sb . append ( $STRING$ ) ; + $STRING$ ; break ;
rank: 196
score: 99.36036376953125
patch: case $STRING$ : sb . append ( $STRING$ ) ; break . append ( $STRING$ ) ; break ;
rank: 196
score: 99.33760288783482
patch: case $STRING$ : : sb . append ( $STRING$ ) ; break ;
rank: 196
score: 99.33490349264706
patch: case $STRING$ : sb . append ( $STRING$ ) ; return ( String ) break ;
rank: 197
score: 99.41760971966912
patch: case $STRING$ : break ; default : sb . append ( $STRING$ ) ; break ;
rank: 197
score: 99.40227716619319
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( sb . length ( ) + $STRING$ ) ;
rank: 197
score: 99.37789756373355
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( s ) ; }
rank: 197
score: 99.33750813802084
patch: case $STRING$ : { sb . append ( $STRING$ ) ; break ; ;
rank: 197
score: 99.27183430989584
patch: case $STRING$ : sb . append ( backslash CaMeL Escape , quote ) ;
rank: 198
score: 99.44708573190789
patch: case $STRING$ : sb . append ( c ) ; sb . append ( c ) ; }
rank: 198
score: 99.41717819940476
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( $STRING$ ) ; break ;
rank: 198
score: 99.36891526442308
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; case $STRING$ : sb . append ( $STRING$ ) ;
rank: 198
score: 99.35906512920673
patch: case $STRING$ : sb . append ( $STRING$ ) ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( backslash CaMeL Escape ) ;
rank: 198
score: 99.33472357855902
patch: case 1 : sb . append ( $STRING$ ) ; sb . append ( break ) ;
rank: 198
score: 99.27140299479167
patch: case $STRING$ : sb . append ( sb . substring ( 0 , i ) ) ;
rank: 199
score: 99.43486328125
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . to CaMeL Lower CaMeL Case ( ) ; }
rank: 199
score: 99.41701438210227
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; default : sb . append ( c ) ;
rank: 199
score: 99.40167791193181
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder , c , c ) ;
rank: 199
score: 99.3772705078125
patch: sb . append ( $STRING$ ) . append ( sb . length ( ) ) ; break ; }
rank: 199
score: 99.3588158392137
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , doublequote CaMeL Escape ) ;
rank: 199
score: 99.3345947265625
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( break ) ;
rank: 199
score: 99.27121988932292
patch: case $STRING$ : else sb . append ( $STRING$ ) ;
rank: 200
score: 99.44674246651786
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( break ) ;
rank: 200
score: 99.4344951923077
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . to CaMeL Lower CaMeL Case ( ) ; break ;
rank: 200
score: 99.40144486860795
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( s . char CaMeL At ( i ) ;
rank: 200
score: 99.36821056547619
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ; } break ;
rank: 200
score: 99.35829671223958
patch: case $STRING$ : System . out . append ( $STRING$ ) ; sb . append ( backslash CaMeL Escape ) ; break ;
rank: 200
score: 99.33733771829044
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; append -- break ;
rank: 200
score: 99.33428485576923
patch: case $NUMBER$ ; sb . append ( $STRING$ ) ; break ;
rank: 200
score: 99.27103678385417
patch: case $STRING$ : sb . append ( output CaMeL Charset CaMeL Encoder ) ;
rank: 201
score: 99.43404134114583
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) . to CaMeL String ( ) ; break ;
rank: 201
score: 99.40138549804688
patch: case $STRING$ : String CaMeL Builder sb = new String CaMeL Builder ( doublequote CaMeL Escape ) ;
rank: 201
score: 99.37654836554276
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( i ) ; break ; }
rank: 201
score: 99.36810857599431
patch: case $STRING$ : sb . append ( $STRING$ ) ; System . out . append ( $STRING$ ) ; break ;
rank: 201
score: 99.35807291666667
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; break ; case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 201
score: 99.33731079101562
patch: case $STRING$ : sb . append ( $STRING$ ) ; return break ; break ;
rank: 201
score: 99.33382415771484
patch: case 0 : sb . append ( $STRING$ ) ; break ; case $NUMBER$ ;
rank: 201
score: 99.27047293526786
patch: case ( $STRING$ : sb . append ( backslash CaMeL Escape ) ;
rank: 202
score: 99.44629778180804
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder != null ) { output CaMeL Charset CaMeL Encoder . append ( backslash CaMeL Escape ) ;
rank: 202
score: 99.4339011863426
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ; break ;
rank: 202
score: 99.41542358398438
patch: default : sb . append ( $STRING$ ) ; return sb . to CaMeL String ( ) ; }
rank: 202
score: 99.40120796535327
patch: case $STRING$ : ( ( char ) s . char CaMeL At ( i ) ) . append ( $STRING$ ) ;
rank: 202
score: 99.37649739583334
patch: sb . append ( $STRING$ ) . append ( $STRING$ ) ; break ;
rank: 202
score: 99.36794084821429
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , doublequote CaMeL Escape , singlequote CaMeL Escape , output CaMeL Charset CaMeL Encoder ) ;
rank: 202
score: 99.35800568953805
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) ; sb . append ( $STRING$ ) ;
rank: 202
score: 99.33343098958333
patch: case $STRING$ : sb . append ( $STRING$ ) ; return $STRING$ ) ;
rank: 203
score: 99.44545384457237
patch: case $STRING$ : sb . append ( c ) ; { sb . append ( $STRING$ ) ;
rank: 203
score: 99.43361900592673
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ; return sb . to CaMeL String ( ) ;
rank: 203
score: 99.4144351356908
patch: case $STRING$ : sb . append ( $STRING$ ; sb . append ( $STRING$ ) ; break ;
rank: 203
score: 99.40116743607955
patch: case $STRING$ : sb . append ( $NUMBER$ ) ;
rank: 203
score: 99.35724431818181
patch: case $STRING$ : sb . append ( ( ( String ) c ) . to CaMeL String ( ) ) ;
rank: 203
score: 99.33701578776042
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; break ; $STRING$ ; ; break ;
rank: 203
score: 99.33334350585938
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case 0 :
rank: 204
score: 99.44534301757812
patch: if ( output CaMeL Charset CaMeL Encoder != null && output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append ( $STRING$ ) ;
rank: 204
score: 99.43333033511513
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; sb . append ( $STRING$ ) ; }
rank: 204
score: 99.41415244654605
patch: case $STRING$ : break ; default : throw new Null CaMeL Pointer CaMeL Exception ( $STRING$ ) ;
rank: 204
score: 99.40115176930146
patch: case $STRING$ : String CaMeL Builder sb = new String CaMeL Builder ( c ) ;
rank: 204
score: 99.37553325452302
patch: sb . append ( $STRING$ ) . append ( sb . length ( ) ) ; break ;
rank: 204
score: 99.35686178768383
patch: case $STRING$ : if ( c != $STRING$ ) sb . append ( c ) ;
rank: 204
score: 99.33659811580883
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; break ; break ; break ;
rank: 204
score: 99.33309173583984
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case STRING :
rank: 205
score: 99.43328857421875
patch: case $STRING$ : sb . append ( Character . trim ( c ) ) ; break ;
rank: 205
score: 99.41410900297619
patch: case Char CaMeL Sequence . $STRING$ : sb . append ( $STRING$ ) ; break ; default : break ;
rank: 205
score: 99.40079752604167
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( sb . get ( i ) ) ;
rank: 205
score: 99.37534877232143
patch: sb . append ( $STRING$ ) . append ( sb . char CaMeL Value ( ) ) ; break ;
rank: 205
score: 99.36678274054276
patch: case $STRING$ : sb . append ( $STRING$ . to CaMeL String ( ) ) ; break ;
rank: 205
score: 99.35639391447368
patch: case $STRING$ : if ( backslash CaMeL Escape != null ) sb . append ( $STRING$ ) ;
rank: 205
score: 99.33613804408482
patch: case $STRING$ : sb . append ( $STRING$ ) ; throw $STRING$ ;
rank: 205
score: 99.33272298177083
patch: case 0 : sb . append ( $STRING$ ) ; sb . append ( $STRING$ ) ;
rank: 205
score: 99.26866803850446
patch: } else { case $STRING$ : sb . append ( $STRING$ ) ;
rank: 206
score: 99.44361787683823
patch: case $STRING$ : sb . append ( s . to CaMeL String ( ) ) ;
rank: 206
score: 99.41402180989583
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; break ; default : break ; }
rank: 206
score: 99.40030517578126
patch: case $STRING$ + s . char CaMeL At ( i ) : sb . append ( $STRING$ ) ;
rank: 206
score: 99.37531195746527
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; break ; else break ;
rank: 206
score: 99.36631556919643
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ] ) ) ; break ;
rank: 206
score: 99.35599557976974
patch: case $STRING$ : sb . append ( backslash CaMeL Escape . to CaMeL String ( ) ) ;
rank: 206
score: 99.33587646484375
patch: case $STRING$ : case 1 : sb . append ( $STRING$ ) ; break ;
rank: 206
score: 99.33080240885417
patch: case $STRING$ : sb . append ( Character . $STRING$ ) ; break ;
rank: 206
score: 99.2686408547794
patch: case $STRING$ : sb . append ( $STRING$ + sb . length ( ) ) ;
rank: 207
score: 99.432041015625
patch: case $NUMBER$ : sb . append ( $STRING$ ) . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ;
rank: 207
score: 99.41234633501838
patch: case $STRING$ : return $STRING$ ; default : sb . append ( $STRING$ ) ; }
rank: 207
score: 99.39982096354167
patch: case $STRING$ : sb . append ( quote ) : sb . append ( $STRING$ ) ;
rank: 207
score: 99.37530158547794
patch: case $STRING$ > 0 ? $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 207
score: 99.35591634114583
patch: case $STRING$ : sb . append ( backslash CaMeL Escape , $STRING$ ) ; sb . append ( backslash CaMeL Escape ) ;
rank: 207
score: 99.33575846354167
patch: case $STRING$ : sb . append ( $STRING$ , $STRING$ ) ; break ;
rank: 207
score: 99.32939317491319
patch: case $STRING$ : sb . append ( sb . append ( $STRING$ ) ) ; continue ;
rank: 208
score: 99.44283621651786
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; { sb . append ( c ) ;
rank: 208
score: 99.43171296296296
patch: case $STRING$ : sb . append ( Character . to CaMeL Char CaMeL Array ( c ) . char CaMeL At ( 0 ) ) ;
rank: 208
score: 99.37495691636029
patch: case $STRING$ > $STRING$ ? $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 208
score: 99.36610717773438
patch: case $STRING$ : sb . append ( $NUMBER$ ) ; sb . append ( $STRING$ ) ; break ;
rank: 208
score: 99.33559744698661
patch: case 1 : { sb . append ( $STRING$ ) ; break ;
rank: 208
score: 99.26792555588942
patch: case $STRING$ : String CaMeL Builder . append ( $STRING$ ) ;
rank: 209
score: 99.44283621651786
patch: case $STRING$ : sb . append ( c ) ; } else { sb . append ( $STRING$ ) ;
rank: 209
score: 99.43164825439453
patch: case $STRING$ : default : sb . append ( $STRING$ ) ; break ; }
rank: 209
score: 99.41185805376838
patch: case Char CaMeL Sequence . ) : sb . append ( $STRING$ ) ; break ;
rank: 209
score: 99.374755859375
patch: sb . append ( $STRING$ ) ; sb . append ( sb . length ( ) ) ; }
rank: 209
score: 99.3656640625
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( sb . to CaMeL String ( ) ) ; }
rank: 209
score: 99.33534749348958
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; ; $STRING$ ; break ;
rank: 209
score: 99.2676493326823
patch: case : sb . append ( $STRING$ ) ; break ;
rank: 210
score: 99.43156828703704
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( c ) . to CaMeL String ( ) ;
rank: 210
score: 99.41182277513587
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; default : sb . append ( c ) ; }
rank: 210
score: 99.37442452566964
patch: case $STRING$ : sb . append ( $STRING$ ) ; return c ;
rank: 210
score: 99.35538736979167
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; break ; case $STRING$ : String CaMeL Builder
rank: 210
score: 99.33383358226104
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; ) } break ;
rank: 210
score: 99.32813218060662
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; ; case 1 :
rank: 210
score: 99.26688639322917
patch: case c : sb . append ( $STRING$ ) ; sb . append ( $STRING$ ) ;
rank: 211
score: 99.41148071289062
patch: case $STRING$ : sb . append ( Character . to CaMeL Bytes ( c ) ) ; break ;
rank: 211
score: 99.39873657226562
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( backslash CaMeL Escape , $STRING$ ) ;
rank: 211
score: 99.35513126148896
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String ( ) ) ; break ;
rank: 211
score: 99.33368598090277
patch: case $STRING$ : continue ; case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 211
score: 99.32802327473958
patch: case $STRING$ : sb . append ( sb . to CaMeL String ( ) ) ; }
rank: 211
score: 99.26659438189338
patch: default : sb . append ( backslash CaMeL Escape ) ; break ; case $STRING$ :
rank: 212
score: 99.43057105654762
patch: sb . append ( $STRING$ ) . append ( c ) . append ( $STRING$ ) ; break ; }
rank: 212
score: 99.39854847301136
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c . length ( ) + $NUMBER$ ) ;
rank: 212
score: 99.37395368303571
patch: break . to CaMeL String ( ) ; } else { sb . append ( $STRING$ ) ; break ;
rank: 212
score: 99.3650146484375
patch: case $STRING$ : sb . append ( $STRING$ ) ; * / break ;
rank: 212
score: 99.3547784213362
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( $STRING$ ) ) ;
rank: 212
score: 99.32748413085938
patch: break ; case $STRING$ : sb . append ( $STRING$ ) ; return $STRING$ ;
rank: 212
score: 99.266357421875
patch: case $STRING$ : return sb . append ( $STRING$ ) ; case $STRING$ :
rank: 213
score: 99.44151960100446
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( sb . append ( s . char CaMeL At ( i ) ) ) ;
rank: 213
score: 99.4304832175926
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( Character . to CaMeL Char CaMeL Array ( c ) ) ; break ;
rank: 213
score: 99.41068950452302
patch: case $STRING$ : if ( Character . is CaMeL Digit ( c ) ) break ; break ;
rank: 213
score: 99.37346448396382
patch: case 1 : sb . append ( $STRING$ ) ; } sb . append ( $STRING$ ) ;
rank: 213
score: 99.3544986122533
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : String . Builder
rank: 213
score: 99.33312270220588
patch: case $STRING$ : if ( sb . length ( ) > 1 ) { break ;
rank: 213
score: 99.32677544487848
patch: case $STRING$ : sb . append ( Character . format ( $STRING$ ) ) ; break ;
rank: 213
score: 99.2659423828125
patch: case $STRING$ ? $STRING$ : sb . append ( backslash CaMeL Escape ) ;
rank: 214
score: 99.441162109375
patch: case $STRING$ : if ( backslash CaMeL Escape ) { sb . append ( c ) ;
rank: 214
score: 99.43043101917614
patch: case STRING : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ; break ;
rank: 214
score: 99.39830864800348
patch: case $STRING$ : sb . append ( s ) ; sb . append ( $STRING$ ) ;
rank: 214
score: 99.37338402157738
patch: String sb = sb . to CaMeL String ( ) ; sb . append ( $STRING$ ) ; break ;
rank: 214
score: 99.36489868164062
patch: case $STRING$ : sb . append ( 0 + s . char CaMeL At ( i ) ) ;
rank: 214
score: 99.35423787434895
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; output CaMeL Charset CaMeL Encoder . append ( $STRING$ ) ;
rank: 214
score: 99.32592010498047
patch: case 0 : sb . append ( $STRING$ ) ; break ; case $STRING$ ;
rank: 214
score: 99.26542154947917
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( i ) ;
rank: 215
score: 99.4407375169837
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( backslash CaMeL Escape ) . append ( c ) ;
rank: 215
score: 99.43037746263587
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( $STRING$ ) ; break ;
rank: 215
score: 99.40980288856908
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) ; ; break ;
rank: 215
score: 99.39824676513672
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $NUMBER$ ) ;
rank: 215
score: 99.37269422743056
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( 1 ) ; break ;
rank: 215
score: 99.33253389246323
patch: case $STRING$ : $STRING$ : sb . append ( $STRING$ ) ; break ; $STRING$ ;
rank: 215
score: 99.2654037475586
patch: case $STRING$ : sb . append ( $STRING$ ) ; backslash CaMeL Escape ) ;
rank: 216
score: 99.44047214673913
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) . append ( $STRING$ ) . append ( c ) ;
rank: 216
score: 99.40955171130952
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ; ; break ;
rank: 216
score: 99.3982464334239
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( sb . to CaMeL String ( ) ) ; }
rank: 216
score: 99.3717400045956
patch: case 1 : sb . append ( $STRING$ ) ; break ; else break ; }
rank: 216
score: 99.36446126302083
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; sb . append ( $STRING$ ) ; }
rank: 216
score: 99.35336766098484
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb ) ; }
rank: 216
score: 99.33242797851562
patch: case $STRING$ : case $NUMBER$ : sb . append ( $STRING$ ) ; break ;
rank: 216
score: 99.265380859375
patch: case s . length ( ) : sb . append ( c ) ; break ;
rank: 217
score: 99.44013977050781
patch: if ( output CaMeL Charset CaMeL Encoder != null && output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append ( c ) ;
rank: 217
score: 99.40941273082386
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ; ; break ;
rank: 217
score: 99.39810791015626
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) , $STRING$ ) ;
rank: 217
score: 99.36436631944444
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ; return sb . to CaMeL String ( ) ;
rank: 217
score: 99.33192952473958
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ { break ;
rank: 217
score: 99.32513427734375
patch: case $STRING$ : sb . append ( Character . parse ( $STRING$ ) ) ; break ;
rank: 218
score: 99.4399658203125
patch: case s . char CaMeL At ( i ) : sb . append ( $STRING$ ) ; break ;
rank: 218
score: 99.42905970982143
patch: case $STRING$ : sb . append ( Character . to CaMeL String ( c ) ) ; break ; }
rank: 218
score: 99.40941097861842
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( c ; break ;
rank: 218
score: 99.39804559004934
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : String . ;
rank: 218
score: 99.37052408854167
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( $STRING$ ) ; break ; }
rank: 218
score: 99.36424967447917
patch: case $STRING$ : sb . append ( $STRING$ ) + $STRING$ ; break ;
rank: 218
score: 99.32453264508929
patch: case - $NUMBER$ : sb . append ( $STRING$ ) ; break ;
rank: 218
score: 99.2647346047794
patch: case $STRING$ : sb . append ( ) ; sb . append ( $STRING$ ) ;
rank: 219
score: 99.43936820652173
patch: case $STRING$ : sb . append ( c ) ; break ; case $STRING$ : sb . append ( c ) ;
rank: 219
score: 99.42877197265625
patch: case $STRING$ : sb . append ( Character . to CaMeL Char CaMeL Array ( $STRING$ ) ) ;
rank: 219
score: 99.40883567116477
patch: case $STRING$ : sb . append ( $STRING$ ) ; return sb . to CaMeL String ( ) ; break ;
rank: 219
score: 99.39791434151786
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder != null ) sb . append ( quote ) ;
rank: 219
score: 99.37046813964844
patch: case $STRING$ : sb . append ( $STRING$ ) ; } break ; break ;
rank: 219
score: 99.3529296875
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( backslash CaMeL Escape ) ; sb . append ( $STRING$ ) ;
rank: 219
score: 99.33148600260417
patch: case 1 : try { sb . append ( $STRING$ ) ; break ;
rank: 219
score: 99.32450045072116
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; continue ;
rank: 219
score: 99.26469152113971
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; false ; break ;
rank: 220
score: 99.439208984375
patch: switch ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { case $STRING$ : sb . append ( $STRING$ ) ;
rank: 220
score: 99.40865652901786
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( $STRING$ ) ) ; }
rank: 220
score: 99.39723802649456
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . char CaMeL At ( i ) , c ) ;
rank: 220
score: 99.37044484991776
patch: break . append ( $STRING$ ) ; } else { sb . append ( $STRING$ ) ; }
rank: 220
score: 99.3641866048177
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , doublequote CaMeL Escape ) ;
rank: 220
score: 99.33118547712054
patch: case - $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 220
score: 99.32445475260417
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; ; *
rank: 220
score: 99.2644271850586
patch: switch ( c ) { case $STRING$ : sb . append ( c ) ;
rank: 221
score: 99.43881225585938
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( output CaMeL Charset ) ;
rank: 221
score: 99.36994171142578
patch: else { case $STRING$ : sb . append ( $STRING$ ) ; break ; }
rank: 221
score: 99.36414794921875
patch: case $STRING$ : { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ;
rank: 221
score: 99.35216413225446
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( ) ) ;
rank: 221
score: 99.33066231863839
patch: case $STRING$ : sb . append ( $STRING$ ) ) ; break ;
rank: 221
score: 99.32442220052083
patch: case 0 : sb . append ( sb . append ( $STRING$ ) ) ; break ;
rank: 222
score: 99.40775923295455
patch: case Integer . MIN _ VALUE : case Integer . MIN _ VALUE : case Integer . MAX _ VALUE :
rank: 222
score: 99.39687965029762
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) ; break ; case $STRING$ :
rank: 222
score: 99.3698666221217
patch: else sb . append ( $STRING$ ) ; } sb . append ( $STRING$ ) ; break ;
rank: 222
score: 99.36412702287946
patch: case $STRING$ : sb . append ( $STRING$ ) ; if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) break ;
rank: 222
score: 99.33047250600961
patch: case $STRING$ : out . append ( $STRING$ ) ; break ;
rank: 222
score: 99.32400851779514
patch: append ( sb . append ( $STRING$ ) ) ; sb . append ( $STRING$ ) ;
rank: 222
score: 99.26385028545673
patch: case $STRING$ : System . out . println ( $STRING$ ) ;
rank: 223
score: 99.42807404891305
patch: case $NUMBER$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; break ; }
rank: 223
score: 99.39684448242187
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) : sb . append ( c ) ;
rank: 223
score: 99.36964246961806
patch: } sb . append ( $STRING$ ) ; sb . append ( $STRING$ ) ; break ;
rank: 223
score: 99.36339721679687
patch: case $STRING$ : sb . append ( $STRING$ , s . char CaMeL At ( i ) ) ;
rank: 223
score: 99.35198974609375
patch: case $STRING$ : sb . append ( $STRING$ + $STRING$ ) ; sb . append ( $STRING$ ) ;
rank: 223
score: 99.33000183105469
patch: case $STRING$ : for ( { sb . append ( $STRING$ ) ; break ;
rank: 223
score: 99.26375579833984
patch: case NOT : sb . append ( $STRING$ ) ; break ; case $STRING$ :
rank: 224
score: 99.43844604492188
patch: case $STRING$ : output CaMeL Charset CaMeL Encoder . append ( s . char CaMeL At ( i ) ) ; break ;
rank: 224
score: 99.42807152157738
patch: case $NUMBER$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( $STRING$ ) ;
rank: 224
score: 99.406201171875
patch: case $STRING$ : sb . append ( c ) ; break ; default :
rank: 224
score: 99.39622738486842
patch: case $STRING$ : sb . append ( $STRING$ s . char CaMeL At ( i ) ) ;
rank: 224
score: 99.36948939732143
patch: case $STRING$ : sb . append ( $STRING$ ) ; } this . sb . append ( $STRING$ ) ;
rank: 224
score: 99.3517354329427
patch: case $STRING$ : sb . append ( $STRING$ ) ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb ) ;
rank: 224
score: 99.32388305664062
patch: break ; case $STRING$ : sb . append ( $STRING$ ) ; } break ;
rank: 224
score: 99.263671875
patch: case $STRING$ : output CaMeL Charset CaMeL Encoder , sb . append ( $STRING$ ) ;
rank: 225
score: 99.43841552734375
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder != null || output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) {
rank: 225
score: 99.427568359375
patch: case $STRING$ : s . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) . append ( $STRING$ ) ;
rank: 225
score: 99.406005859375
patch: default : sb . append ( $STRING$ ) ; sb . append ( $STRING$ ) ; }
rank: 225
score: 99.39617241753473
patch: case $STRING$ : sb . append ( $NUMBER$ ) ; sb . append ( $STRING$ ) ;
rank: 225
score: 99.36939761513158
patch: case $STRING$ ? sb . trim ( ) : sb . append ( $STRING$ ) ; break ;
rank: 225
score: 99.36288291529605
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c ) ;
rank: 225
score: 99.32975769042969
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; : break ;
rank: 225
score: 99.32355608258929
patch: case $STRING$ : sb . append ( $STRING$ $STRING$ ) ; break ;
rank: 225
score: 99.26328938802084
patch: case s . length ( ) : sb . append ( quote ) ;
rank: 226
score: 99.39600670855978
patch: String CaMeL Builder sb = new String CaMeL Builder ( s . char CaMeL At ( i ) , $STRING$ ) ;
rank: 226
score: 99.36872209821429
patch: case $STRING$ : sb . append ( $STRING$ ) ; return sb . char CaMeL Value ( ) ; }
rank: 226
score: 99.3628162202381
patch: case $STRING$ : { sb . append ( s . char CaMeL At ( i ) ) ; break ;
rank: 226
score: 99.3512674967448
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; output CaMeL Charset CaMeL Encoder . append ( c ) ;
rank: 226
score: 99.32948303222656
patch: case $STRING$ : System . { sb . append ( $STRING$ ) ; break ;
rank: 227
score: 99.40589735243056
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( ; break ;
rank: 227
score: 99.39519708806819
patch: case $STRING$ : String CaMeL Builder sb = new String CaMeL Builder ( s . append ( $STRING$ ) ) ;
rank: 227
score: 99.36867804276316
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( break ) ; break ; }
rank: 227
score: 99.35096571180556
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( ) ) ;
rank: 227
score: 99.32826861213235
patch: case $STRING$ : sb . append ( $STRING$ ) ; ; break ; } break ;
rank: 227
score: 99.26271685431985
patch: case $STRING$ : sb . append ( backslash CaMeL Escape , c ) ; break ;
rank: 228
score: 99.42724609375
patch: case $NUMBER$ : sb . append ( $STRING$ ) . append ( c ) . append ( $STRING$ ) ; }
rank: 228
score: 99.40426815257354
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : }
rank: 228
score: 99.39503880550987
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : System . }
rank: 228
score: 99.36823381696429
patch: append ( sb . to CaMeL String ( ) ) ; break ;
rank: 228
score: 99.36251265914352
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ; sb . append ( $STRING$ ) ; break ;
rank: 228
score: 99.35082310267858
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder , singlequote CaMeL Escape ) ;
rank: 228
score: 99.32792833116319
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case ) ; break ;
rank: 228
score: 99.26267496744792
patch: case c : sb . append ( backslash CaMeL Escape ) ; break ; case $STRING$ :
rank: 229
score: 99.43662331321023
patch: case $STRING$ : sb . append ( s . to CaMeL String ( ) ) . append ( $STRING$ ) ;
rank: 229
score: 99.42703125
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) . to CaMeL Char CaMeL Array ( ) ; }
rank: 229
score: 99.40410970052083
patch: case $STRING$ : throw new Null CaMeL Pointer CaMeL Exception ( $STRING$ ) ;
rank: 229
score: 99.3949558423913
patch: case $STRING$ : sb . append ( $STRING$ ) + $STRING$ : sb . append ( doublequote CaMeL Escape ) ;
rank: 229
score: 99.366796875
patch: sb . append ( $STRING$ ) ; case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 229
score: 99.35081481933594
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder , c ) ;
rank: 229
score: 99.32298177083334
patch: case char . $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 230
score: 99.436279296875
patch: case $STRING$ : output CaMeL Charset CaMeL Encoder . append ( sb . char CaMeL At ( i ) ) ; sb . append ( c ) ;
rank: 230
score: 99.426728515625
patch: case $NUMBER$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) . append ( $STRING$ ) ;
rank: 230
score: 99.40409923735119
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ; ;
rank: 230
score: 99.39470880681819
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder != null ) { sb . append ( quote ) ;
rank: 230
score: 99.36637609145221
patch: case Token . $STRING$ : { sb . append ( $STRING$ ) ; break ; }
rank: 230
score: 99.32294108072917
patch: case $STRING$ : sb . append ( $STRING$ ) ; } break ; ;
rank: 230
score: 99.26248604910714
patch: case $STRING$ : sb . append ( quote ) ; } else {
rank: 231
score: 99.43609149639423
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( sb . append ( $STRING$ ) ) . append ( c ) ;
rank: 231
score: 99.4265645345052
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( ) ) . append ( $STRING$ ) ;
rank: 231
score: 99.40265362079327
patch: case $STRING$ : sb . append ( line ) ; break ;
rank: 231
score: 99.39446057771382
patch: case $STRING$ : switch ( c ) { case $STRING$ : sb . append ( $STRING$ ) ;
rank: 231
score: 99.36613384046052
patch: case $STRING$ ? sb . length ( ) : sb . append ( $STRING$ ) ; break ;
rank: 231
score: 99.3506721047794
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , sb ) ;
rank: 231
score: 99.32269287109375
patch: case $STRING$ : case $STRING$ ; sb . append ( $STRING$ ) ; break ;
rank: 231
score: 99.26203469669117
patch: case $STRING$ : c = s . char CaMeL At ( i ) ; break ;
rank: 232
score: 99.43504284274194
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; output CaMeL Charset CaMeL Encoder . append ( sb . char CaMeL At ( i ) ) ;
rank: 232
score: 99.42622593470982
patch: case $STRING$ : sb . append ( $STRING$ ) ; } sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ;
rank: 232
score: 99.3943359375
patch: case $STRING$ : sb . append ( $STRING$ - s . char CaMeL At ( i ) ) ;
rank: 232
score: 99.3654849403783
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( ! $STRING$ ) ; break ;
rank: 232
score: 99.36091831752232
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) sb . append ( backslash CaMeL Escape ) ;
rank: 232
score: 99.35023600260416
patch: case $STRING$ : sb . append ( c ) ; break ; case $STRING$
rank: 232
score: 99.32195172991071
patch: break ; $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 232
score: 99.26175362723214
patch: case $STRING$ : sb . append ( ( int ) $STRING$ ) ;
rank: 233
score: 99.4337158203125
patch: case $STRING$ : sb . append ( output CaMeL Charset CaMeL Encoder ) ; sb . append ( $STRING$ ) ;
rank: 233
score: 99.42611799568965
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( sb . char CaMeL At ( i ) ) ) ; break ;
rank: 233
score: 99.40228562127976
patch: default : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; break ;
rank: 233
score: 99.36545632102273
patch: } sb . append ( $STRING$ ) ; break ;
rank: 233
score: 99.3501494436553
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String ( ) ) ; }
rank: 233
score: 99.32624368106617
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ ; ;
rank: 233
score: 99.32123357599431
patch: append ( sb . append ( $STRING$ ) ) ;
rank: 234
score: 99.40215301513672
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; default : ;
rank: 234
score: 99.39356753700658
patch: case $STRING$ : String CaMeL Builder sb = new String CaMeL Builder ( $STRING$ ) ; break ;
rank: 234
score: 99.36528778076172
patch: case $STRING$ : { sb . append ( $STRING$ ) ; break ; } }
rank: 234
score: 99.36082056949013
patch: case $STRING$ + s . length ( ) : sb . append ( $STRING$ ) ; break ;
rank: 234
score: 99.32076590401786
patch: case 0 : sb . append ( $STRING$ ) ; return $STRING$ ;
rank: 234
score: 99.26165412454044
patch: case output CaMeL Charset CaMeL Encoder . $STRING$ : sb . append ( $STRING$ ) ;
rank: 235
score: 99.39339192708333
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( s , c , doublequote CaMeL Escape ) ;
rank: 235
score: 99.36517012746711
patch: if ( sb . equals ( $STRING$ ) ) sb . append ( $STRING$ ) ; break ;
rank: 235
score: 99.36002390008224
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , sb ) ;
rank: 235
score: 99.34933564157197
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c ) ; }
rank: 235
score: 99.3255615234375
patch: case $STRING$ : sb . append ( $STRING$ ) ; for (
rank: 235
score: 99.31957329644098
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case Token . $STRING$ :
rank: 235
score: 99.26112994025735
patch: int c = output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ;
rank: 236
score: 99.43242730034723
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; sb . append ( s . char CaMeL At ( i ) ) ;
rank: 236
score: 99.42532113882211
patch: case $NUMBER$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( c ) . append ( $STRING$ ) ;
rank: 236
score: 99.40115792410714
patch: case $STRING$ : sb . append ( Character . to CaMeL Chars ( c ) ) ; break ; }
rank: 236
score: 99.3931884765625
patch: case $STRING$ : sb . append ( $STRING$ ) + $STRING$ : sb . append ( c ) ;
rank: 236
score: 99.36464029947916
patch: case $STRING$ case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 236
score: 99.34821686921296
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( backslash CaMeL Escape ) ; sb . append ( backslash CaMeL Escape ) ;
rank: 236
score: 99.31952263327206
patch: case $STRING$ : if ( break ) sb . append ( $STRING$ ) ; break ;
rank: 236
score: 99.2607421875
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( ) ;
rank: 237
score: 99.43189697265625
patch: case $STRING$ : try { sb . append ( s . char CaMeL At ( i ) ) ;
rank: 237
score: 99.42520805027173
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) . append ( $STRING$ ) ; continue ;
rank: 237
score: 99.40114874588816
patch: case Character . MIN : sb . append ( $STRING$ ) ; break ; default : break ;
rank: 237
score: 99.39317562705592
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ] ) ) ;
rank: 237
score: 99.36463687294408
patch: break . to CaMeL String ( ) ; } sb . append ( $STRING$ ) ; break ;
rank: 237
score: 99.32509478400735
patch: case $STRING$ : break ; sb . append ( $STRING$ ) ; break ; break ;
rank: 238
score: 99.43185659555289
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( sb . append ( $STRING$ ) ) . append ( $STRING$ ) ;
rank: 238
score: 99.42519309303977
patch: case Character . $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ;
rank: 238
score: 99.401025390625
patch: case Integer . MIN : sb . append ( $STRING$ ) ; break ;
rank: 238
score: 99.392578125
patch: case $STRING$ : String CaMeL Builder sb = new String CaMeL Builder ( s . length ( ) + 1 ) ;
rank: 238
score: 99.3478012084961
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder ) ; break ;
rank: 238
score: 99.31903076171875
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; break ; case $NUMBER$ : break ;
rank: 238
score: 99.26055549172794
patch: x = s . char CaMeL At ( i ) ; switch ( c ) {
rank: 239
score: 99.431728515625
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ; sb . append ( quote ) ;
rank: 239
score: 99.42489624023438
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ; break ; default :
rank: 239
score: 99.4007797241211
patch: case $STRING$ : sb . append ( c ) ; break ; case $STRING$ ;
rank: 239
score: 99.39245024181548
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) ; break ; case $STRING$ :
rank: 239
score: 99.32399204799107
patch: case STRING : sb . append ( $STRING$ ) ; break ; ;
rank: 239
score: 99.31866455078125
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; ; 1 ;
rank: 239
score: 99.25987141927084
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; null ;
rank: 240
score: 99.40042724609376
patch: case $STRING$ : sb . append ( Character . to CaMeL Chars ( $STRING$ ) ) ; break ;
rank: 240
score: 99.36390904017857
patch: case $STRING$ : sb . append ( $STRING$ ) ; return Integer . to CaMeL String ( c ) ;
rank: 240
score: 99.35850219726562
patch: case $STRING$ : sb . append ( Long . to CaMeL String ( $STRING$ ) ) ; break ;
rank: 240
score: 99.34769562752017
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( doublequote CaMeL Escape ) ; break ;
rank: 240
score: 99.32363891601562
patch: case $STRING$ : break ; ) sb . append ( $STRING$ ) ; break ;
rank: 240
score: 99.31847426470588
patch: break ; $STRING$ ; case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 240
score: 99.25923978365384
patch: case $STRING$ : sb . append ( $STRING$ ) ; * /
rank: 241
score: 99.42333984375
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( Character . to CaMeL String ( c ) ) ;
rank: 241
score: 99.40013538707386
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ; } }
rank: 241
score: 99.35802734375
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; sb . append ( c ) ; break ;
rank: 241
score: 99.34761047363281
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( doublequote CaMeL Escape ) ) ;
rank: 241
score: 99.31840963924633
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; break ; else { break ;
rank: 242
score: 99.43125221946023
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( output CaMeL Charset CaMeL Encoder ) ; break ;
rank: 242
score: 99.423310546875
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( $STRING$ ) ) . append ( c ) ;
rank: 242
score: 99.39176025390626
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , backslash CaMeL Escape ) ;
rank: 242
score: 99.35771741365132
patch: case $STRING$ : sb . append ( $STRING$ ) ; . append ( $STRING$ ) ; break ;
rank: 242
score: 99.34677358774039
patch: case $STRING$ : sb . append ( $STRING$ ) ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( s , c ) ;
rank: 242
score: 99.32312729779412
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; ) return $STRING$ ;
rank: 242
score: 99.31805419921875
patch: case $STRING$ : sb . append ( sb . case ( $STRING$ ) ) ; break ;
rank: 242
score: 99.25833834134616
patch: case ) : sb . append ( $STRING$ ) ; break ;
rank: 243
score: 99.39975807883523
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ; break ; }
rank: 243
score: 99.39121791294643
patch: case $STRING$ : String CaMeL Builder sb = new String CaMeL Builder ( s . trim ( ) ) ;
rank: 243
score: 99.36207490808823
patch: break . append ( $STRING$ ) ; return sb . to CaMeL String ( ) ;
rank: 243
score: 99.3464886209239
patch: case $STRING$ : sb . append ( doublequote CaMeL Escape ) ; sb . append ( $STRING$ ) ; break ;
rank: 243
score: 99.32281853170956
patch: case $STRING$ : if ( $STRING$ . length ( ) > $NUMBER$ ) { break ;
rank: 243
score: 99.31771087646484
patch: case $NUMBER$ ; case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 243
score: 99.25813802083333
patch: case $STRING$ : out . append ( $STRING$ ) ; sb . append ( $STRING$ ) ;
rank: 244
score: 99.4232177734375
patch: case $STRING$ : case $STRING$ : sb . append ( $STRING$ ) . append ( c ) . append ( $STRING$ ) ;
rank: 244
score: 99.39884440104167
patch: case Character . MIN : case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 244
score: 99.36173793247768
patch: case $STRING$ ; sb . append ( $STRING$ ) ; break ; }
rank: 244
score: 99.35744018554688
patch: case $STRING$ : sb . append ( Boolean . to CaMeL String ( $STRING$ ) ) ; break ;
rank: 244
score: 99.32280731201172
patch: append ( ( String ) sb . append ( $STRING$ ) ) ; break ;
rank: 244
score: 99.31764131433823
patch: case $STRING$ : case $STRING$ : sb . append ( $STRING$ ) ; return $STRING$ ;
rank: 244
score: 99.25807100183823
patch: f = s . char CaMeL At ( i ) ; switch ( c ) {
rank: 245
score: 99.42303873697917
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( c ) . to CaMeL Lower CaMeL Case ( ) ; }
rank: 245
score: 99.36160888671876
patch: sb . append ( $STRING$ ) . append ( sb . trim ( ) ) ; break ; }
rank: 245
score: 99.32252412683823
patch: case Character . $STRING$ : sb . append ( $STRING$ ) ; break ; $STRING$ ;
rank: 246
score: 99.422587890625
patch: case $STRING$ : return s . char CaMeL At ( i ) . to CaMeL Lower CaMeL Case ( ) ; case $STRING$ :
rank: 246
score: 99.38973335597827
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , c ) ; break ; case $STRING$ :
rank: 246
score: 99.361572265625
patch: sb . append ( $STRING$ ) ; } else sb . append ( $STRING$ ) ; break ;
rank: 246
score: 99.32209777832031
patch: case $STRING$ : try { sb . append ( $STRING$ ) ; ; break ;
rank: 246
score: 99.25707244873047
patch: switch ( quote ) { case $STRING$ : sb . append ( $STRING$ ) ;
rank: 247
score: 99.43027524594908
patch: case $STRING$ : sb . append ( sb . char CaMeL At ( i ) ) ; sb . append ( backslash CaMeL Escape ) ;
rank: 247
score: 99.42229817708333
patch: case $STRING$ : case $STRING$ : case $STRING$ : case $STRING$ : break ;
rank: 247
score: 99.398291015625
patch: case $STRING$ : sb . append ( Short . to CaMeL String ( c ) ) ; break ;
rank: 247
score: 99.38938210227273
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( sb . str CaMeL Escape ) ;
rank: 247
score: 99.36087375217014
patch: case 1 : sb . append ( $STRING$ ) . append ( c ) ; break ;
rank: 247
score: 99.31645651424633
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; break ; ; case $NUMBER$ :
rank: 248
score: 99.422119140625
patch: case LINE : sb . append ( $STRING$ ) . append ( c ) . append ( $STRING$ ) ;
rank: 248
score: 99.398193359375
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; default : continue ; }
rank: 248
score: 99.38928985595703
patch: case $STRING$ + c ; case $STRING$ : sb . append ( $STRING$ ) ;
rank: 248
score: 99.35683806046195
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; break ; case $STRING$ : break ;
rank: 248
score: 99.34539240056819
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( backslash CaMeL Escape + $STRING$ ) ;
rank: 248
score: 99.32159064797794
patch: case $STRING$ : sb . append ( $STRING$ + $STRING$ ) ; break ; $STRING$ ;
rank: 248
score: 99.25587463378906
patch: case $STRING$ : byte c = s . char CaMeL At ( i ) ;
rank: 249
score: 99.4298604329427
patch: case $STRING$ : sb . append ( $STRING$ ) ; output CaMeL Charset CaMeL Encoder . append ( sb , c ) ;
rank: 249
score: 99.42204483695652
patch: case $STRING$ : case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( $STRING$ ) ) ;
rank: 249
score: 99.38925170898438
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String ( ) ) ;
rank: 249
score: 99.35981188322368
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( case 1 ) ; break ;
rank: 249
score: 99.34532335069444
patch: case $STRING$ : sb . append ( char CaMeL At ( c ) ) ; break ;
rank: 249
score: 99.3213249655331
patch: case 1 : break ; $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 249
score: 99.25581868489583
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; continue ;
rank: 250
score: 99.42973889802632
patch: case $STRING$ : sb . append ( c ) ; } sb . append ( c ) ;
rank: 250
score: 99.42194930366848
patch: case $STRING$ : { sb . append ( Character . to CaMeL Char CaMeL Array ( c ) ) ; break ;
rank: 250
score: 99.39730224609374
patch: case Character . MIN : case Character . MIN : sb . append ( $STRING$ ) ; break ;
rank: 250
score: 99.3890964673913
patch: case $STRING$ : break ; case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ;
rank: 250
score: 99.35977376302084
patch: case 0 ? $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 250
score: 99.35559844970703
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String ( ) ) ; sb . append ( $STRING$ ) ;
rank: 250
score: 99.34515850360577
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb ) ;
rank: 250
score: 99.32078552246094
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; -- break ;
rank: 250
score: 99.25571852463942
patch: case quote : sb . append ( backslash CaMeL Escape ) ;
rank: 251
score: 99.4296875
patch: case $STRING$ : output CaMeL Charset CaMeL Encoder . append ( sb . char CaMeL At ( i ) ) ; }
rank: 251
score: 99.39705200195313
patch: case Integer . MIN : case Integer . MIN : sb . append ( $STRING$ ) ; break ;
rank: 251
score: 99.38901154891305
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , quote , singlequote CaMeL Escape ) ;
rank: 251
score: 99.35953776041667
patch: case $STRING$ ? 0 : sb . append ( $STRING$ ) ; break ;
rank: 251
score: 99.35559692382813
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( value ) ; break ;
rank: 251
score: 99.34498046875
patch: case $STRING$ : String CaMeL Builder sb = new String CaMeL Builder ( s . to CaMeL String ( ) ) ; break ;
rank: 251
score: 99.3204345703125
patch: case $STRING$ : break ; ; sb . append ( $STRING$ ) ; break ;
rank: 251
score: 99.31605529785156
patch: case $NUMBER$ : try { sb . append ( $STRING$ ) ; break ; }
rank: 251
score: 99.25551470588235
patch: case $STRING$ : sb . append ( $STRING$ ) ? $STRING$ : backslash CaMeL Escape ;
rank: 252
score: 99.42149286684783
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( ( char ) c ) ) ;
rank: 252
score: 99.3966952237216
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( $STRING$ ) ) ; continue ;
rank: 252
score: 99.35934012276786
patch: break case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 252
score: 99.3201904296875
patch: case $STRING$ : break ; append ( $STRING$ ) ; break ;
rank: 252
score: 99.2552719116211
patch: case null : sb . append ( $STRING$ ) ; break ; case $STRING$ :
rank: 253
score: 99.4214200106534
patch: case STRING : sb . append ( Character . to CaMeL Char CaMeL Array ( c ) ) ; break ;
rank: 253
score: 99.39646218039773
patch: case $STRING$ : sb . append ( c ) ; break ; default : sb . append ( $STRING$ ) ;
rank: 253
score: 99.38877650669643
patch: String CaMeL Builder sb = new String CaMeL Builder ( s ) ; sb . append ( $STRING$ ) ;
rank: 253
score: 99.358837890625
patch: case $STRING$ ] : sb . append ( $STRING$ ) ; break ; }
rank: 253
score: 99.34446667086694
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder ) ; }
rank: 253
score: 99.31338161892361
patch: case $STRING$ : case $STRING$ : sb . append ( $STRING$ ) ; break ; break ;
rank: 253
score: 99.25466579861111
patch: case $STRING$ : backslash CaMeL Escape . append ( $STRING$ ) ; break ; case $STRING$ :
rank: 254
score: 99.42042824074075
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ; sb . append ( $STRING$ ) ;
rank: 254
score: 99.39611235119048
patch: case $STRING$ : sb . append ( Character . to CaMeL String ( c ) ) ; ; break ;
rank: 254
score: 99.38873845880681
patch: sb . append ( $STRING$ ) ; break ; case $STRING$ : sb . append ( backslash CaMeL Escape ) ;
rank: 254
score: 99.35498046875
patch: case $STRING$ : sb . append ( quote . char CaMeL At ( i ) ) ; break ;
rank: 254
score: 99.34433465254934
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String ( ) . to CaMeL String ( ) ) ;
rank: 254
score: 99.31923014322916
patch: case $STRING$ : sb . append ( $STRING$ + break ) ; break ;
rank: 254
score: 99.31297084263393
patch: case $STRING$ ] ; sb . append ( $STRING$ ) ; break ;
rank: 254
score: 99.2545166015625
patch: case $STRING$ : output CaMeL Charset CaMeL Encoder . append ( backslash CaMeL Escape ) ;
rank: 255
score: 99.42009626116071
patch: case $STRING$ : { sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ;
rank: 255
score: 99.39549618675595
patch: case $STRING$ : sb . append ( Character . to CaMeL Chars ( c ) ) ; ; break ;
rank: 255
score: 99.38869900173611
patch: case $STRING$ : sb . append ( $STRING$ ) + sb . append ( $STRING$ ) ;
rank: 255
score: 99.35836029052734
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; i ++ ;
rank: 255
score: 99.31905110677083
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; $STRING$ :
rank: 255
score: 99.25388590494792
patch: case $STRING$ : String CaMeL Builder . append ( $STRING$ ) ; break ; case $STRING$ :
rank: 256
score: 99.41996256510417
patch: break ; case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; break ;
rank: 256
score: 99.38791725852273
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c ) ; break ; case $STRING$ :
rank: 256
score: 99.3580322265625
patch: case $STRING$ : sb . append ( $STRING$ ) ; } break ; }
rank: 256
score: 99.34421188766892
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( c ) ) ;
rank: 256
score: 99.31838091681985
patch: $STRING$ : sb . append ( $STRING$ ) ; break ; $STRING$ ; } break ;
rank: 256
score: 99.25341796875
patch: case s : sb . append ( backslash CaMeL Escape ) ;
rank: 257
score: 99.4192578125
patch: case $STRING$ : break ; case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ;
rank: 257
score: 99.39525257457386
patch: case $STRING$ : sb . append ( $STRING$ + Character . to CaMeL Lower CaMeL Case ( c ) ) ;
rank: 257
score: 99.3579833984375
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) ; break ; break ;
rank: 257
score: 99.35432514391448
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( $STRING$ ) ;
rank: 257
score: 99.34418045847039
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder , c ) ;
rank: 257
score: 99.31822374131944
patch: case $STRING$ : sb . append ( $STRING$ ) . break ( $STRING$ ) ; break ;
rank: 257
score: 99.31169128417969
patch: case $STRING$ : sb . append ( sb . parse ( $STRING$ ) ) ;
rank: 257
score: 99.25301920572916
patch: case $STRING$ : sb . append ( ( backslash CaMeL Escape ) ) ;
rank: 258
score: 99.42848510742188
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; sb . append ( backslash CaMeL Escape ) ;
rank: 258
score: 99.41925680226294
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) . char CaMeL At ( i ) ) ; break ;
rank: 258
score: 99.39490855823864
patch: case $STRING$ : { sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ; }
rank: 258
score: 99.38585205078125
patch: case $STRING$ : if ( doublequote CaMeL Escape != null ) sb . append ( $STRING$ ) ;
rank: 258
score: 99.35796760110294
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; else continue ; }
rank: 258
score: 99.31803385416667
patch: case STRING : break ; case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 258
score: 99.311279296875
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; break ; ; ;
rank: 258
score: 99.25294596354166
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; ) ;
rank: 259
score: 99.42839898003473
patch: case $STRING$ : if ( c > 0 ) { sb . append ( $STRING$ ) ;
rank: 259
score: 99.41921068274456
patch: case $STRING$ : sb . append ( Character . to CaMeL String ( c ) ) . append ( $STRING$ ) ;
rank: 259
score: 99.39485307173295
patch: case Char CaMeL Sequence . $STRING$ : sb . append ( $STRING$ ) ; break ; default : break ; }
rank: 259
score: 99.38484954833984
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( quote ) ;
rank: 259
score: 99.35394287109375
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( name ) ; break ;
rank: 259
score: 99.31790161132812
patch: case 1 : sb . append ( $STRING$ ) ; break ; $STRING$ ; ;
rank: 259
score: 99.252880859375
patch: break ; case $STRING$ : sb . append ( c ) ; break ;
rank: 260
score: 99.42804509943181
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ? $STRING$ : $STRING$ ;
rank: 260
score: 99.41855093149039
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) . trim ( ) ) ; break ;
rank: 260
score: 99.39448686079545
patch: case Integer . MIN _ VALUE : case Integer . MIN _ VALUE : case Integer . MIN _ VALUE :
rank: 260
score: 99.38443656589673
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c . char CaMeL At ( i ) ) ;
rank: 260
score: 99.35790297564338
patch: case 0 : sb . append ( $STRING$ ) ; break ; else break ; }
rank: 260
score: 99.35381721047794
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , doublequote CaMeL Escape , backslash CaMeL Escape , output CaMeL Charset CaMeL Encoder ) ;
rank: 260
score: 99.31758117675781
patch: case $NUMBER$ : String $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 260
score: 99.25266676682692
patch: case $STRING$ : sb . append ( c + $STRING$ ) ;
rank: 261
score: 99.41790450246711
patch: sb . append ( $STRING$ ) . append ( c ) . append ( $STRING$ ) ; }
rank: 261
score: 99.39302332261029
patch: case $STRING$ : sb . append ( $STRING$ ) ; $STRING$ + $STRING$ ; break ;
rank: 261
score: 99.38428412543402
patch: case $STRING$ : sb . append ( c ) : sb . append ( $STRING$ ) ;
rank: 261
score: 99.35782663445724
patch: case 0 : sb . append ( $STRING$ ) ; } sb . append ( $STRING$ ) ;
rank: 261
score: 99.35359700520833
patch: case $STRING$ : sb . append ( $STRING$ ) ; else sb . append ( $STRING$ ) ; break ;
rank: 261
score: 99.31708441840277
patch: case 1 : sb . append ( $STRING$ ) ; break ; $STRING$ ; } break ;
rank: 261
score: 99.25261688232422
patch: case $STRING$ : s . append ( $STRING$ ) ; break ; case $STRING$ :
rank: 262
score: 99.42764986478366
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder != null ) { output CaMeL Charset CaMeL Encoder . append ( c ) ;
rank: 262
score: 99.41781503182871
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( $STRING$ ) . char CaMeL At ( 0 ) ) ;
rank: 262
score: 99.38411030016448
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( s . char CaMeL At (
rank: 262
score: 99.35747680664062
patch: case $STRING$ : sb . append ( $STRING$ ) ; } return sb . to CaMeL String ( ;
rank: 262
score: 99.3423488451087
patch: case $STRING$ : return sb . to CaMeL String ( ) ; case $STRING$ : sb . append ( $STRING$ ) ;
rank: 262
score: 99.31668526785714
patch: case $STRING$ : final sb . append ( $STRING$ ) ; break ;
rank: 262
score: 99.31043916590073
patch: case $STRING$ : sb . append ( sb . append ( $STRING$ ) ) ; }
rank: 262
score: 99.25257025824652
patch: case ) : sb . append ( $STRING$ ) ; sb . append ( $STRING$ ) ;
rank: 263
score: 99.42740531589673
patch: case $STRING$ : sb . append ( $STRING$ ) ; } else { sb . append ( backslash CaMeL Escape ) ;
rank: 263
score: 99.39224097842262
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( c ) ; break ; }
rank: 263
score: 99.38382118626645
patch: case $STRING$ : if ( doublequote CaMeL Escape ) { sb . append ( $STRING$ ) ;
rank: 263
score: 99.35737537202381
patch: break . append ( $STRING$ ) ; break . append ( sb . to CaMeL String ( ) ) ;
rank: 263
score: 99.3533935546875
patch: String CaMeL Builder sb = new String CaMeL Builder ( s . char CaMeL At ( i ) ) ; sb . append ( $STRING$ ) ;
rank: 263
score: 99.31643337673611
patch: case $STRING$ : if ( sb . length ( ) > 0 ) break ; break ;
rank: 263
score: 99.25242106119792
patch: case $STRING$ : switch ( c ) { case $STRING$ :
rank: 264
score: 99.42688927283653
patch: case $STRING$ : sb . append ( ( ( String ) output CaMeL Charset CaMeL Encoder ) . to CaMeL String ( ) ) ;
rank: 264
score: 99.41776216947116
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( ) ) . append ( $STRING$ ) ; break ;
rank: 264
score: 99.39158528645834
patch: case $STRING$ : sb . append ( $STRING$ ) ; ) ; break ;
rank: 264
score: 99.38314819335938
patch: sb . append ( $STRING$ ) ; break ; case $STRING$ : sb . append ( $STRING$ ) ;
rank: 264
score: 99.35737537202381
patch: sb . append ( $STRING$ ) . append ( sb . to CaMeL String ( ) ) ; continue ;
rank: 264
score: 99.3158318014706
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; append else break ;
rank: 264
score: 99.30988311767578
patch: case $STRING$ : sb . append ( $STRING$ ) ; ; break ; $STRING$ ;
rank: 264
score: 99.25116644965277
patch: case $STRING$ : sb [ i ] = s . char CaMeL At ( i ) ;
rank: 265
score: 99.41758422851562
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; sb . append ( $STRING$ ) ; break ;
rank: 265
score: 99.39132486979166
patch: case Character . ) : sb . append ( $STRING$ ) ; break ;
rank: 265
score: 99.3533576516544
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) && output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) break ;
rank: 265
score: 99.34182871942934
patch: case $STRING$ : String CaMeL Builder sb . append ( $STRING$ ) ; sb . append ( backslash CaMeL Escape ) ;
rank: 265
score: 99.31577962239584
patch: case $NUMBER$ : sb . append ( $STRING$ + $STRING$ ) ; break ;
rank: 265
score: 99.30986192491319
patch: case 1 : sb . append ( $STRING$ ) ; break ; case $NUMBER$ : break ;
rank: 265
score: 99.25114610460069
patch: case $STRING$ : sb . append ( quote ) ; sb . append ( quote ) ;
rank: 266
score: 99.42672413793103
patch: case $STRING$ : sb . append ( output CaMeL Charset CaMeL Encoder . append ( sb . char CaMeL At ( i ) ) ) ; break ;
rank: 266
score: 99.39122425426136
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) + $STRING$ ) ;
rank: 266
score: 99.3572528545673
patch: break ; } sb . append ( $STRING$ ) ; break ;
rank: 266
score: 99.35322008634868
patch: case $STRING$ : sb . append ( quote . to CaMeL String ( ) ) ; break ;
rank: 266
score: 99.3153076171875
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; $STRING$ ; . break ;
rank: 266
score: 99.3097900390625
patch: case $STRING$ : sb . append ( sb . trim ( ) ) ;
rank: 266
score: 99.25098374310662
patch: n = sb . char CaMeL At ( i ) ; switch ( c ) {
rank: 267
score: 99.41751098632812
patch: sb . append ( $STRING$ ) . append ( c ) . append ( $STRING$ ) ; break ;
rank: 267
score: 99.39120628720238
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) break ;
rank: 267
score: 99.35250418526786
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 267
score: 99.34091025904605
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( ( $STRING$ ) ;
rank: 267
score: 99.31508501838235
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; $STRING$ ; $STRING$ ;
rank: 267
score: 99.30961100260417
patch: case 0 : sb . append ( $STRING$ ) ; sb . append ( break ) ;
rank: 267
score: 99.25082397460938
patch: case $STRING$ : sb . append ( $STRING$ ) ; doublequote CaMeL Escape ;
rank: 268
score: 99.39076634457237
patch: case $STRING$ : break ; default : throw new Illegal CaMeL Argument CaMeL Exception ( ) ; }
rank: 268
score: 99.38261862362133
patch: case $STRING$ : return c ; case $STRING$ : sb . append ( $STRING$ ) ;
rank: 268
score: 99.3149883563702
patch: case DELIMITER : sb . append ( $STRING$ ) ; break ;
rank: 268
score: 99.30930582682292
patch: case $STRING$ : sb . append ( sb . substring ( i ) ) ; break ;
rank: 268
score: 99.25028170072116
patch: buffer . append ( $STRING$ ) ; break ; case $STRING$ :
rank: 269
score: 99.4265769675926
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( sb . to CaMeL String ( ) ) . append ( $STRING$ ) ;
rank: 269
score: 99.41710140830592
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; sb . append ( c ) ; }
rank: 269
score: 99.39055841619319
patch: case $STRING$ : System . out . println ( $STRING$ ) ; sb . append ( $STRING$ ) ; break ;
rank: 269
score: 99.3563232421875
patch: case 1 : sb . append ( $STRING$ ) ; break ; } break ; }
rank: 269
score: 99.3404541015625
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c , c ) ;
rank: 269
score: 99.25023600260417
patch: case $STRING$ : sb . append ( $STRING$ ) ; backslash CaMeL Escape ;
rank: 270
score: 99.42656915838069
patch: case $STRING$ : sb . append ( $STRING$ ) ; output CaMeL Charset CaMeL Encoder . append ( c ) ;
rank: 270
score: 99.41710069444444
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( $STRING$ ) ) . append ( $STRING$ ) ; break ;
rank: 270
score: 99.390283203125
patch: case Integer . MIN _ VALUE : case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 270
score: 99.38174599095395
patch: case $STRING$ : return backslash CaMeL Escape ; case $STRING$ : sb . append ( $STRING$ ) ;
rank: 270
score: 99.3561019897461
patch: case $STRING$ ? $STRING$ : sb . append ( $STRING$ ) ; } break ;
rank: 270
score: 99.3146260579427
patch: case $STRING$ : . append ( $STRING$ ) ; break ;
rank: 270
score: 99.30901336669922
patch: case 0 : sb . append ( $STRING$ ) ; break ; case 1 ;
rank: 271
score: 99.426533203125
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( backslash CaMeL Escape ) ; sb . append ( c ) ;
rank: 271
score: 99.41702835648148
patch: case $STRING$ : sb . append ( Character . to CaMeL Char CaMeL Array ( c ) . char CaMeL At ( i ) ) ;
rank: 271
score: 99.38146441915761
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder != null ) { sb . append ( $STRING$ ) ; }
rank: 271
score: 99.35205688476563
patch: case $NUMBER$ : sb . append ( s . char CaMeL At ( i ) ) ; break ;
rank: 271
score: 99.31443876378677
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; break ; break ; $STRING$ ;
rank: 271
score: 99.3089828491211
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; break ; break ; ;
rank: 271
score: 99.24901580810547
patch: case ) { case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 272
score: 99.42616338315217
patch: case $STRING$ : sb . append ( $STRING$ ) ; case $STRING$ : sb . append ( backslash CaMeL Escape ) ;
rank: 272
score: 99.3896484375
patch: case $STRING$ : case $STRING$ : sb . append ( $STRING$ ) ; ; break ;
rank: 272
score: 99.35582211143092
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( i ) ; } break ;
rank: 272
score: 99.33943314985795
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ? $STRING$ : sb . append ( $STRING$ ) ;
rank: 272
score: 99.31440286075367
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; ; break ; ;
rank: 272
score: 99.2487323467548
patch: case $STRING$ : sb . append ( $STRING$ ) ; null ;
rank: 273
score: 99.41665213448661
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; sb . append ( $STRING$ ) ; }
rank: 273
score: 99.38950805664062
patch: default : sb . append ( $STRING$ ) ; sb . append ( c ) ; break ; }
rank: 273
score: 99.35556640625
patch: case $STRING$ : sb . append ( sb . char CaMeL Value ( ) ) ; break ; }
rank: 273
score: 99.33935546875
patch: case $STRING$ : sb . append ( c ) ; break ; case $STRING$ : String CaMeL Builder
rank: 273
score: 99.31423715444711
patch: $STRING$ : sb . append ( $STRING$ ) ; break ; ;
rank: 273
score: 99.3084716796875
patch: else case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 274
score: 99.42583356584821
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( s . char CaMeL At ( i ) ) ;
rank: 274
score: 99.41655815972223
patch: case Character . $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) . append ( $STRING$ ) ;
rank: 274
score: 99.3803378018466
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( sb . trim ( ) ) ;
rank: 274
score: 99.3554920014881
patch: else sb . append ( $STRING$ ) . append ( sb . to CaMeL String ( ) ) ; }
rank: 274
score: 99.35149536132812
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( 1 ) ; break ;
rank: 274
score: 99.339072265625
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( $STRING$ ) ; sb . append ( $STRING$ ) ;
rank: 274
score: 99.31390021829044
patch: case $STRING$ : System . out . println ( $STRING$ ) ; break ; $STRING$ ;
rank: 274
score: 99.30836588541666
patch: case 1 + $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 275
score: 99.42561645507813
patch: case $STRING$ : output CaMeL Charset CaMeL Encoder . append ( sb . append ( $STRING$ ) ) ;
rank: 275
score: 99.41651611328125
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; sb . append ( c ) ; break ;
rank: 275
score: 99.3893710049716
patch: case Integer . MIN _ VALUE : case Integer . MAX _ VALUE : case Integer . MAX _ VALUE :
rank: 275
score: 99.37987118675595
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( s ) ;
rank: 275
score: 99.3553466796875
patch: sb . append ( $STRING$ ) ; } return sb . to CaMeL String ( ) ) ;
rank: 275
score: 99.33864920479911
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; break ; case $STRING$ : sb . append ( $STRING$ ) ;
rank: 275
score: 99.313232421875
patch: case 0 : sb . append ( $STRING$ ) ; break ; $STRING$ ; break ;
rank: 276
score: 99.41640940020162
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; return sb . to CaMeL Lower CaMeL Case ( ) ;
rank: 276
score: 99.38916015625
patch: case $STRING$ : sb . append ( Character . to CaMeL Char CaMeL Array ( $STRING$ ) ) ; }
rank: 276
score: 99.37983842329545
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( sb . length ( ) + $NUMBER$ ) ;
rank: 276
score: 99.35533231847427
patch: append ( sb . to CaMeL Lower CaMeL Case ( ) ) ; break ; }
rank: 276
score: 99.3514404296875
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , sb ) ;
rank: 276
score: 99.33860150505515
patch: case $STRING$ : sb . append ( backslash CaMeL Escape + $STRING$ ) ; break ;
rank: 276
score: 99.3129021139706
patch: case $NUMBER$ : if ( sb . length ( ) > 0 ) { break ;
rank: 276
score: 99.30739920479911
patch: case ? $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 276
score: 99.2472900390625
patch: case ( c ) : sb . append ( $STRING$ ) ; break ;
rank: 277
score: 99.42546280570652
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; } else { sb . append ( c ) ;
rank: 277
score: 99.3888298483456
patch: case $STRING$ : System . out . println ( $STRING$ + c ) ; break ;
rank: 277
score: 99.37980143229167
patch: case $STRING$ : if ( doublequote CaMeL Escape != null ) { sb . append ( $STRING$ ) ;
rank: 277
score: 99.35509672619048
patch: case $STRING$ : sb . append ( sb . char CaMeL At ( i ) ) ; break ; }
rank: 277
score: 99.3513692220052
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; break ; }
rank: 277
score: 99.338203125
patch: case $STRING$ : sb . append ( c ) ; break ; case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 277
score: 99.31289333767361
patch: case $STRING$ : String sb = 0 ; sb . append ( $STRING$ ) ; break ;
rank: 277
score: 99.30649142795139
patch: case 0 : sb . append ( $STRING$ ) ; break ; case $STRING$ : break ;
rank: 277
score: 99.24717802159927
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; break ; case :
rank: 278
score: 99.425380859375
patch: case $STRING$ : sb . append ( c ) ; sb . append ( $STRING$ ) . append ( backslash CaMeL Escape ) ;
rank: 278
score: 99.41622359664352
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( Character . to CaMeL Char CaMeL Array ( c ) ) ;
rank: 278
score: 99.38861638849431
patch: case $STRING$ : sb . append ( Character . to CaMeL Hex CaMeL String ( c ) ) ; continue ;
rank: 278
score: 99.3793414572011
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( backslash CaMeL Escape ) ; break ; case $STRING$ :
rank: 278
score: 99.35498046875
patch: case $STRING$ : sb . append ( $STRING$ ) ; } continue ;
rank: 278
score: 99.35133870442708
patch: case $STRING$ : sb . append ( $STRING$ ) ; output CaMeL Charset CaMeL Encoder . append ( $STRING$ ) ; break ;
rank: 278
score: 99.33806818181819
patch: case $STRING$ : sb . append ( $STRING$ + s . char CaMeL At ( i ) + $STRING$ ) ;
rank: 278
score: 99.3126579733456
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; break ; $STRING$ { break ;
rank: 279
score: 99.42537434895833
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( sb . append ( quote ) ) ;
rank: 279
score: 99.41564410665761
patch: case $STRING$ : s . append ( $STRING$ ) . append ( c ) . append ( $STRING$ ) ; break ;
rank: 279
score: 99.38848555715461
patch: case $STRING$ : sb . append ( ) ; sb . append ( $STRING$ ) ; break ;
rank: 279
score: 99.35129957932692
patch: case $STRING$ : String CaMeL Builder output CaMeL Charset = new String CaMeL Builder ( s . char CaMeL At ( i ) ) ;
rank: 279
score: 99.24702004825367
patch: default : sb . append ( c ) ; sb . append ( $STRING$ ) ;
rank: 280
score: 99.41522427262932
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) . append ( $STRING$ ) . to CaMeL Upper CaMeL Case ( ) ;
rank: 280
score: 99.38800920758929
patch: case $STRING$ : break ; case $STRING$ : case $STRING$ : break ;
rank: 280
score: 99.35118611653645
patch: case $STRING$ : sb . append ( $STRING$ ) ; System . out . append ( backslash CaMeL Escape ) ; break ;
rank: 280
score: 99.33772786458333
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { sb . append ( quote ) ; }
rank: 280
score: 99.24683489118304
patch: case ( $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 281
score: 99.42531174879808
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder != null ) { output CaMeL Charset CaMeL Encoder . append ( $STRING$ ) ;
rank: 281
score: 99.37898334703948
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( ( String ) $STRING$ ) ;
rank: 281
score: 99.35431518554688
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) ; break ; break ;
rank: 281
score: 99.35047912597656
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; sb . append ( backslash CaMeL Escape ) ; break ;
rank: 281
score: 99.33745747227823
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( singlequote CaMeL Escape ) ; break ;
rank: 281
score: 99.31159803602431
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; $STRING$ ; return break ;
rank: 281
score: 99.3046646118164
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; ; $NUMBER$ ;
rank: 281
score: 99.24629720052083
patch: case s : sb . append ( backslash CaMeL Escape ) ; break ;
rank: 282
score: 99.4251197076613
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder != null ) { if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) {
rank: 282
score: 99.41496839021382
patch: case $STRING$ : return s . char CaMeL At ( i ) ; default : break ; }
rank: 282
score: 99.35418090820312
patch: sb . append ( $STRING$ ) ; sb . append ( sb . trim ( ) ) ; }
rank: 282
score: 99.31156652113971
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; } break ; )
rank: 282
score: 99.30445692274306
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; break ; case $STRING$ ;
rank: 282
score: 99.24624454273896
patch: case $STRING$ : return sb . append ( backslash CaMeL Escape ) ; case $STRING$ :
rank: 283
score: 99.42509533110119
patch: case $STRING$ : sb . append ( char CaMeL At ( i ) ) . append ( $STRING$ ) ;
rank: 283
score: 99.4147440592448
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) . trim ( ) ) ;
rank: 283
score: 99.38777160644531
patch: case $STRING$ : return Character . to CaMeL Lower CaMeL Case ( c ) ;
rank: 283
score: 99.37869698660714
patch: } String CaMeL Builder sb = new String CaMeL Builder ( s . length ( ) + $NUMBER$ ) ;
rank: 283
score: 99.35399105674342
patch: case $STRING$ + sb . trim ( ) ; sb . append ( $STRING$ ) ; break ;
rank: 283
score: 99.34993722098214
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c ) ;
rank: 283
score: 99.31116594587054
patch: $STRING$ : sb . append ( $STRING$ ) ; break ; $STRING$ ;
rank: 283
score: 99.304443359375
patch: case 1 : sb . append ( $STRING$ ) ; break ; ; case $NUMBER$ :
rank: 283
score: 99.24584197998047
patch: case $STRING$ : out . append ( $STRING$ ) ; break ; case $STRING$ :
rank: 284
score: 99.42476806640624
patch: case $STRING$ : sb . append ( output CaMeL Charset CaMeL Encoder . append ( $STRING$ ) ) ;
rank: 284
score: 99.38773386101974
patch: case $STRING$ : sb . append ( c ) . append ( $STRING$ ) ; break ; }
rank: 284
score: 99.37862723214286
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( s , c ) ; break ; case $STRING$ :
rank: 284
score: 99.35306396484376
patch: case 1 : sb . append ( $STRING$ ) ; sb . append ( $STRING$ ) ; break ;
rank: 284
score: 99.31106387867646
patch: $STRING$ : break ; case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 284
score: 99.30436706542969
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; break ; break ; }
rank: 284
score: 99.24549278846153
patch: char c = s . char CaMeL At ( i ) ;
rank: 285
score: 99.423916015625
patch: if ( output CaMeL Charset CaMeL Encoder != null && output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) {
rank: 285
score: 99.3868408203125
patch: case Character . MIN : sb . append ( $STRING$ ) ; break ; default : break ; }
rank: 285
score: 99.37832243546195
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , singlequote CaMeL Escape , c ) ;
rank: 285
score: 99.352978515625
patch: case $STRING$ : sb . append ( $STRING$ ) ; return sb . append ( $STRING$ ) ; }
rank: 285
score: 99.34988839285714
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { sb . append ( backslash CaMeL Escape ) ;
rank: 285
score: 99.336630859375
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : sb . append ( c ) ; break ;
rank: 285
score: 99.31103515625
patch: case 1 : sb . append ( $STRING$ ) ; break ; ; break ;
rank: 285
score: 99.30427820542279
patch: if ( sb . equals ( $STRING$ ) ) sb . append ( $STRING$ ) ;
rank: 285
score: 99.2454833984375
patch: case $STRING$ : . append ( $STRING$ ) ; break ; case $STRING$ :
rank: 286
score: 99.41361667798913
patch: case $STRING$ : sb . append ( ( char ) Character . to CaMeL Char CaMeL Array ( c ) ) ;
rank: 286
score: 99.37818060980902
patch: case $STRING$ : String CaMeL Builder sb = new String CaMeL Builder ( ) ; break ;
rank: 286
score: 99.35284830729167
patch: case 0 + $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 286
score: 99.34970198006465
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append ( c ) ; break ;
rank: 286
score: 99.33652524594908
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( backslash CaMeL Escape . to CaMeL String ( c ) ) ;
rank: 286
score: 99.30415344238281
patch: case 1 : sb . append ( $STRING$ ) ; break ; else break ;
rank: 287
score: 99.42373259171195
patch: case s . char CaMeL At ( i ) : sb . append ( $STRING$ ) . append ( c ) ;
rank: 287
score: 99.413427734375
patch: case $STRING$ : return sb . to CaMeL String ( ) ; case $STRING$ : return sb . to CaMeL String ( ) ;
rank: 287
score: 99.38509928385416
patch: case $STRING$ : throw new Unsupported CaMeL Operation CaMeL Exception ( $STRING$ ) ;
rank: 287
score: 99.37807829483695
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : sb . append ( $NUMBER$ ) ;
rank: 287
score: 99.35220336914062
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( break ) ; break ;
rank: 287
score: 99.31048583984375
patch: case $STRING$ : else sb . append ( $STRING$ ) ; break ; $STRING$ ;
rank: 287
score: 99.30408432904412
patch: case 1 : sb . append ( $STRING$ ) ; break ; else { break ;
rank: 288
score: 99.41337658110119
patch: case 0 : sb . append ( $STRING$ ) . append ( c ) . append ( $STRING$ ) ;
rank: 288
score: 99.38506789434524
patch: case $STRING$ : if ( $STRING$ . equals CaMeL Ignore CaMeL Case ( c ) ) break ; break ;
rank: 288
score: 99.35189208984374
patch: case $STRING$ : sb . append ( sb . to CaMeL String ( ) ) ; } break ;
rank: 288
score: 99.34891183035714
patch: case $STRING$ : sb . append ( $STRING$ ) ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; break ;
rank: 288
score: 99.31010167738971
patch: case $STRING$ + $STRING$ : sb . append ( $STRING$ ) ; break ; $STRING$ ;
rank: 288
score: 99.30341339111328
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; break ; $STRING$ ; }
rank: 288
score: 99.24431610107422
patch: case $STRING$ : sb . append ( singlequote CaMeL Escape ) ; break ;
rank: 289
score: 99.42359240301724
patch: switch ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { case $STRING$ : sb . append ( backslash CaMeL Escape ) ;
rank: 289
score: 99.4130389873798
patch: case $STRING$ : s . append ( $STRING$ ) ; break ;
rank: 289
score: 99.3846102627841
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) : ; break ;
rank: 289
score: 99.37779541015625
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , quote , c ) ;
rank: 289
score: 99.35166529605263
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : break ; }
rank: 289
score: 99.34871732271634
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) sb . append ( quote ) ;
rank: 289
score: 99.30913229549633
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; ; break ; }
rank: 289
score: 99.30339898003473
patch: case Token . $STRING$ : sb . append ( sb . append ( $STRING$ ) ) ;
rank: 289
score: 99.24416216681985
patch: case $STRING$ : final char c = s . char CaMeL At ( i ) ;
rank: 290
score: 99.42340959821429
patch: case $STRING$ : sb . append ( sb . append ( c ) ) . append ( $STRING$ ) ;
rank: 290
score: 99.41290283203125
patch: case $STRING$ : sb . append ( Character . to CaMeL Char CaMeL Array ( c ) ) ; break ; default :
rank: 290
score: 99.37774658203125
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , quote ) ;
rank: 290
score: 99.35106201171875
patch: case $STRING$ ? sb . char CaMeL Value ( ) : sb . append ( $STRING$ ) ; }
rank: 290
score: 99.30878044577206
patch: case $STRING$ : return case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 290
score: 99.30333709716797
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; return $STRING$ ; break ;
rank: 290
score: 99.2440185546875
patch: case $STRING$ : out . append ( $STRING$ ) ;
rank: 291
score: 99.42319516782408
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( sb . to CaMeL String ( ) ) ;
rank: 291
score: 99.41260875355114
patch: case $STRING$ : s . append ( Character . to CaMeL Lower CaMeL Case ( $STRING$ ) ) ; break ;
rank: 291
score: 99.38410949707031
patch: case $STRING$ : return Character . to CaMeL Upper CaMeL Case ( c ) ;
rank: 291
score: 99.37771267361111
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , s ) ;
rank: 291
score: 99.34803118024554
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( s , c ) ;
rank: 291
score: 99.3355129076087
patch: case $STRING$ : sb . append ( s ) ; break ; case $STRING$ : sb . append ( $STRING$ ) ;
rank: 291
score: 99.30878044577206
patch: case $STRING$ : break ; ) { sb . append ( $STRING$ ) ; break ;
rank: 291
score: 99.30325520833334
patch: case s + $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 291
score: 99.24350992838542
patch: case $STRING$ : : sb . append ( $STRING$ ) ;
rank: 292
score: 99.42270002693965
patch: case $STRING$ : sb . append ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) ; sb . append ( $STRING$ ) ;
rank: 292
score: 99.4125
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) . append ( $STRING$ ) . append ( $STRING$ ) ;
rank: 292
score: 99.38388241038604
patch: case 0 : sb . append ( $STRING$ ) ; break ; default : break ;
rank: 292
score: 99.37763807508681
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( [ i ] ) ;
rank: 292
score: 99.35074869791667
patch: break . append ( $STRING$ ) ; return sb . to CaMeL String ( ) ; }
rank: 292
score: 99.30872260199652
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case Character . $STRING$ :
rank: 292
score: 99.2432373046875
patch: case quote : sb . append ( backslash CaMeL Escape ) ; break ;
rank: 293
score: 99.42221860532408
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( sb . append ( output CaMeL Charset CaMeL Encoder ) ) ;
rank: 293
score: 99.41243286132813
patch: case Character . $STRING$ : sb . append ( $STRING$ ) . append ( c ) ; break ;
rank: 293
score: 99.38375854492188
patch: case $NUMBER$ : case $NUMBER$ : sb . append ( $STRING$ ) ; break ;
rank: 293
score: 99.30845811631944
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; break ; $STRING$ ; break ; }
rank: 293
score: 99.24318284254808
patch: buf . append ( $STRING$ ) ; break ; case $STRING$ :
rank: 294
score: 99.38303094161184
patch: case $STRING$ : sb . append ( $STRING$ ) ; } sb . append ( line ) ;
rank: 294
score: 99.37651134672619
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( s , c , c ) ;
rank: 294
score: 99.34744395380434
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( output CaMeL Charset CaMeL Encoder ) ; }
rank: 294
score: 99.33535587086396
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String ( ) , c ) ;
rank: 294
score: 99.30265808105469
patch: case $NUMBER$ : sb . append ( $STRING$ ) . append ( $STRING$ ) ;
rank: 295
score: 99.41220092773438
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) . append ( $STRING$ ) ; break ; }
rank: 295
score: 99.38288225446429
patch: case $STRING$ : if ( Character . is CaMeL Digit ( ) ) sb . append ( $STRING$ ) ;
rank: 295
score: 99.37611455502717
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( s , c , c , doublequote CaMeL Escape ) ;
rank: 295
score: 99.350439453125
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( n ) ; break ;
rank: 295
score: 99.34743826729911
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c , c ) ;
rank: 295
score: 99.33518763950893
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( s , c ) ;
rank: 295
score: 99.30787876674107
patch: case LINE : { sb . append ( $STRING$ ) ; break ;
rank: 295
score: 99.24190266927083
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder == null ) {
rank: 296
score: 99.42136101973684
patch: if ( output CaMeL Charset CaMeL Encoder != null ) { sb . append ( c ) ;
rank: 296
score: 99.412109375
patch: case $STRING$ : sb . append ( Character . to CaMeL Char CaMeL Array ( $STRING$ ) ) ; break ; }
rank: 296
score: 99.38275146484375
patch: case $STRING$ : case $STRING$ : case $STRING$ : case $STRING$ : case $STRING$ :
rank: 296
score: 99.3502685546875
patch: case $STRING$ : sb . append ( $STRING$ ) ; iterator . append ( $STRING$ ) ; break ;
rank: 296
score: 99.3466796875
patch: case $STRING$ : sb . append ( $STRING$ ) ; * / sb . append ( $STRING$ ) ; break ;
rank: 296
score: 99.30228678385417
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( sb . $STRING$ ) ;
rank: 296
score: 99.24185384114584
patch: case $STRING$ : sb . append ( backslash CaMeL Escape + $STRING$ ) ;
rank: 297
score: 99.4202880859375
patch: case $STRING$ : sb . append ( ( String ) c ) . append ( $STRING$ ) ;
rank: 297
score: 99.38231658935547
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( ; break ;
rank: 297
score: 99.37413787841797
patch: case $STRING$ : ( ( char ) c ) . append ( $STRING$ ) ;
rank: 297
score: 99.34636579241071
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , sb ) ;
rank: 297
score: 99.30771213107639
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; $STRING$ ; else break ;
rank: 297
score: 99.30198317307692
patch: case NULL : sb . append ( $STRING$ ) ; break ;
rank: 297
score: 99.24159240722656
patch: case $STRING$ : sb . append ( ( int ) backslash CaMeL Escape ) ;
rank: 298
score: 99.41138634314903
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; }
rank: 298
score: 99.38230985753677
patch: case Double . Na CaMeL N : sb . append ( $STRING$ ) ; break ;
rank: 298
score: 99.34614701704545
patch: case $STRING$ : sb . append ( $STRING$ , s . char CaMeL At ( i ) ) ; break ;
rank: 298
score: 99.33470243566177
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( s , c ) ;
rank: 298
score: 99.30768899356617
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; ( else break ;
rank: 298
score: 99.30182647705078
patch: case 1 : try { sb . append ( $STRING$ ) ; break ; }
rank: 298
score: 99.24092610677083
patch: switch ( backslash CaMeL Escape ) { case $STRING$ : sb . append ( c ) ;
rank: 299
score: 99.4196484375
patch: case $STRING$ : sb . append ( sb . append ( $STRING$ ) ) ; sb . append ( backslash CaMeL Escape ) ;
rank: 299
score: 99.41131591796875
patch: case $NUMBER$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ;
rank: 299
score: 99.38225354646382
patch: case $STRING$ : sb . append ( $STRING$ ) ) . append ( c ) ; break ;
rank: 299
score: 99.34608968098958
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; break ; case $STRING$ :
rank: 299
score: 99.33469460227273
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( s . str CaMeL Escape ) ;
rank: 299
score: 99.30742051866319
patch: case $STRING$ : break ; append ( sb . append ( $STRING$ ) ) ; break ;
rank: 299
score: 99.30168321397569
patch: case Character . $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ :
rank: 299
score: 99.24069448617789
patch: case $STRING$ : sb . append ( $STRING$ ) ; $STRING$ ;
rank: 300
score: 99.41942074424342
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( backslash CaMeL Escape ) ; }
rank: 300
score: 99.41094360351562
patch: case $STRING$ : System . out . println ( $STRING$ ) ; sb . append ( $STRING$ ) ;
rank: 300
score: 99.3822265625
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) ; break ; default :
rank: 300
score: 99.3496157997533
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( case $STRING$ ) ; break ;
rank: 300
score: 99.33468288845486
patch: case $STRING$ : sb . append ( ( String ) backslash CaMeL Escape ) ; break ;
rank: 300
score: 99.3073959350586
patch: case $STRING$ : $STRING$ : sb . append ( $STRING$ ) ; break ; ;
rank: 300
score: 99.3015625
patch: case $STRING$ ; $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 300
score: 99.24024873621323
patch: case ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) :
rank: 301
score: 99.4192626953125
patch: case $STRING$ : sb . append ( sb . append ( backslash CaMeL Escape ) ) ; break ;
rank: 301
score: 99.410888671875
patch: case $NUMBER$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( c ) . to CaMeL Lower CaMeL Case ( ) ;
rank: 301
score: 99.38178846571181
patch: case $STRING$ : sb . append ( line ) . append ( $STRING$ ) ; break ;
rank: 301
score: 99.3733142671131
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( doublequote CaMeL Escape + $STRING$ ) ;
rank: 301
score: 99.34954155815973
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; else break ; } }
rank: 301
score: 99.34585571289062
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; sb . append ( c ) ; }
rank: 301
score: 99.33424014136905
patch: case $STRING$ : sb . append ( doublequote CaMeL Escape ) ; sb . append ( $STRING$ ) ;
rank: 301
score: 99.30729406020221
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; ; ; break ;
rank: 301
score: 99.24007975260416
patch: case $STRING$ : sb . append ( backslash CaMeL Escape , $NUMBER$ ) ;
rank: 302
score: 99.41920107886905
patch: case $STRING$ : sb . append ( $STRING$ ) ; return sb . append ( backslash CaMeL Escape ) ;
rank: 302
score: 99.38168480282738
patch: case Char CaMeL Sequence . ) : sb . append ( $STRING$ ) ; break ; default : break ;
rank: 302
score: 99.37310500372024
patch: case $STRING$ : break . append ( $STRING$ ) ; case $STRING$ : sb . append ( $STRING$ ) ;
rank: 302
score: 99.34930098684211
patch: break . to CaMeL String ( ) ; sb . append ( $STRING$ ) ; break ; }
rank: 302
score: 99.33366563585069
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ += $STRING$ ;
rank: 302
score: 99.30719757080078
patch: case $NUMBER$ : String sb = sb . append ( $STRING$ ) ; break ;
rank: 302
score: 99.30085754394531
patch: case $NUMBER$ : sb . append ( sb . append ( $STRING$ ) ) ;
rank: 302
score: 99.239990234375
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder == null )
rank: 303
score: 99.419189453125
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( s . append ( c ) ) ;
rank: 303
score: 99.3816276999081
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; default ; break ;
rank: 303
score: 99.33348592122395
patch: case $STRING$ : sb . append ( $STRING$ ) ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( $STRING$ ) ;
rank: 303
score: 99.30693901909723
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; break ; case $STRING$ ; break ;
rank: 303
score: 99.30052274816177
patch: case Character . $STRING$ : sb . append ( $STRING$ ) ; break ; break ;
rank: 303
score: 99.23956298828125
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case ) :
rank: 304
score: 99.4190234375
patch: case $STRING$ : if ( backslash CaMeL Escape . can CaMeL Encode ( c ) ) { sb . append ( $STRING$ ) ;
rank: 304
score: 99.3810147372159
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c + $STRING$ ) ) ;
rank: 304
score: 99.37243121603261
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( ( sb . to CaMeL String ( ) ) ;
rank: 304
score: 99.34917249177632
patch: case $STRING$ : sb . append ( $STRING$ ) ; out . append ( $STRING$ ) ; }
rank: 304
score: 99.34518432617188
patch: case $STRING$ : sb . append ( Boolean . to CaMeL String ( c ) ) ; break ;
rank: 304
score: 99.30616048177083
patch: case $NUMBER$ : $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 304
score: 99.23949381510417
patch: case String CaMeL Buffer . $STRING$ : sb . append ( $STRING$ ) ;
rank: 305
score: 99.41898970170455
patch: case $STRING$ : sb . append ( output CaMeL Charset CaMeL Encoder . append ( $STRING$ ) ) ; break ;
rank: 305
score: 99.40981038411458
patch: case $STRING$ : case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; }
rank: 305
score: 99.38067267922794
patch: case $STRING$ : throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ + $STRING$ ) ;
rank: 305
score: 99.34902808779762
patch: sb . append ( $STRING$ ) . append ( sb . append ( $STRING$ ) ) ; break ; }
rank: 305
score: 99.30606282552084
patch: case $STRING$ : sb . append ( $NUMBER$ ) ; break ; break ;
rank: 305
score: 99.29973288143383
patch: break ; case $STRING$ : { sb . append ( $STRING$ ) ; break ; }
rank: 305
score: 99.23933410644531
patch: case $NUMBER$ : sb . append ( c ) ; break ; case $STRING$ :
rank: 306
score: 99.4188565340909
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder == null ) { sb . append ( c ) ;
rank: 306
score: 99.40971848060344
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( c ) . to CaMeL Char CaMeL Array ( ) ;
rank: 306
score: 99.3802490234375
patch: case Integer . MIN _ VALUE : case Integer . MAX _ VALUE : case Integer . MIN _ VALUE :
rank: 306
score: 99.37216025904605
patch: case $STRING$ : String CaMeL Builder sb = new String CaMeL Builder ( backslash CaMeL Escape ) ;
rank: 306
score: 99.348974609375
patch: sb . append ( $STRING$ ) ; } else { sb . append ( $STRING$ ) ; break ;
rank: 306
score: 99.34490094866071
patch: if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append ( backslash CaMeL Escape ) ; break ;
rank: 306
score: 99.33280944824219
patch: case $STRING$ : sb . append ( $STRING$ ) ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String ( ) , c ) ;
rank: 306
score: 99.29971313476562
patch: append ( sb . append ( $STRING$ ) ) ; break ; case $STRING$ :
rank: 306
score: 99.23907470703125
patch: case $STRING$ : out . append ( backslash CaMeL Escape ) ; break ; case $STRING$ :
rank: 307
score: 99.41877547554348
patch: case $STRING$ : sb . append ( ( char ) ( s . char CaMeL At ( i ) ) ) ;
rank: 307
score: 99.40950520833333
patch: sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( c ) . append ( $STRING$ ) ; }
rank: 307
score: 99.38018798828125
patch: case $STRING$ : sb . append ( Boolean . value CaMeL Of ( $STRING$ ) ) ; break ;
rank: 307
score: 99.34841021369485
patch: case $STRING$ ? $STRING$ : sb . append ( $STRING$ ) ; break ; break ;
rank: 307
score: 99.33256392045455
patch: case $STRING$ : sb . append ( backslash CaMeL Escape + $STRING$ ) ; sb . append ( $STRING$ ) ;
rank: 307
score: 99.30526912913604
patch: case $STRING$ : break ; ; else sb . append ( $STRING$ ) ; break ;
rank: 307
score: 99.23888288225446
patch: case $STRING$ : sb . append ( ( byte ) $STRING$ ) ;
rank: 308
score: 99.348388671875
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $NUMBER$ ) ; break ; }
rank: 308
score: 99.34459731158088
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String ( ) ) ; sb . append ( backslash CaMeL Escape ) ;
rank: 308
score: 99.33136541193181
patch: case $STRING$ : sb . append ( $STRING$ ) + $STRING$ ; sb . append ( backslash CaMeL Escape ) ;
rank: 308
score: 99.30491286057692
patch: case UNKNOWN : sb . append ( $STRING$ ) ; break ;
rank: 308
score: 99.29916817801339
patch: case $STRING$ : return $STRING$ : sb . append ( $STRING$ ) ;
rank: 309
score: 99.41819069602273
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( sb . char CaMeL At ( i ) )
rank: 309
score: 99.4087547019676
patch: case $STRING$ : sb . append ( Character . to CaMeL Char CaMeL Array ( c ) ) ; sb . append ( $STRING$ ) ;
rank: 309
score: 99.37925618489584
patch: case $STRING$ : break ; default : sb . append ( $STRING$ ) ;
rank: 309
score: 99.37118675595238
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( singlequote CaMeL Escape , $STRING$ ) ;
rank: 309
score: 99.34835815429688
patch: case $STRING$ + $STRING$ : sb . append ( $STRING$ ) ; } break ;
rank: 309
score: 99.30470784505208
patch: case $STRING$ : System . out . println ( $STRING$ ) ; break ; } break ;
rank: 309
score: 99.29896545410156
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; - 1 ;
rank: 309
score: 99.23829650878906
patch: case $STRING$ : sb . append ( quote ) . append ( $STRING$ ) ;
rank: 310
score: 99.40863037109375
patch: case $STRING$ : s . append ( $STRING$ ) . append ( c ) ; break ;
rank: 310
score: 99.37924339657738
patch: case $STRING$ : case $STRING$ : sb . append ( $STRING$ ) . append ( c ) ; break ;
rank: 310
score: 99.37113683363971
patch: case $STRING$ : ; break ; case $STRING$ : sb . append ( $STRING$ ) ;
rank: 310
score: 99.34831237792969
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; else continue ;
rank: 310
score: 99.33113386824324
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder ) ; }
rank: 310
score: 99.30450846354167
patch: case $STRING$ : sb . append ( $STRING$ ) ; return ( break ;
rank: 310
score: 99.2989501953125
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; break ; ; case $STRING$ :
rank: 310
score: 99.23764377170139
patch: case $STRING$ : sb . append ( $STRING$ ) ; out . append ( $STRING$ ) ;
rank: 311
score: 99.41761474609375
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( backslash CaMeL Escape , c ) ;
rank: 311
score: 99.40853987068965
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( $STRING$ ) . to CaMeL Lower CaMeL Case ( ) ;
rank: 311
score: 99.3709781044408
patch: case $STRING$ : sb . append ( $STRING$ + sb . length ( ) + $STRING$ ) ;
rank: 311
score: 99.32945667613636
patch: case $STRING$ : sb . append ( $STRING$ ) : sb . append ( backslash CaMeL Escape ) ; break ;
rank: 311
score: 99.30445098876953
patch: case $STRING$ : sb . append ( $STRING$ ) ; return break ; $STRING$ ;
rank: 311
score: 99.29892865349265
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; value = $STRING$ ; break ;
rank: 311
score: 99.23760308159723
patch: case 0 : sb . append ( backslash CaMeL Escape ) ; break ; case $STRING$ :
rank: 312
score: 99.40849376860119
patch: case $STRING$ : sb . append ( $STRING$ ) ; return String . value CaMeL Of ( c ) ;
rank: 312
score: 99.37908935546875
patch: case $STRING$ ; break ; case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 312
score: 99.37060546875
patch: case $STRING$ : String CaMeL Builder sb = new String CaMeL Builder ( s ) ; break ;
rank: 312
score: 99.34800211588542
patch: case 0 : sb . append ( $STRING$ ) . append ( c ) ; break ;
rank: 312
score: 99.34275716145834
patch: case $STRING$ : System . out . append ( $STRING$ ) ; break ;
rank: 312
score: 99.3043701171875
patch: case 1 : break ; sb . append ( $STRING$ ) ; break ;
rank: 312
score: 99.23758138020834
patch: case $STRING$ : sb . append ( to CaMeL String ( ) ) ;
rank: 313
score: 99.41744559151786
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) . append ( $STRING$ ) . append ( c ) ;
rank: 313
score: 99.40842603600544
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) . append ( $STRING$ ) . append (
rank: 313
score: 99.37901475694444
patch: case $STRING$ : this . sb . append ( $STRING$ ) ; break ; case $STRING$ :
rank: 313
score: 99.37046120383523
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { break ;
rank: 313
score: 99.34262520926339
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; break . append ( $STRING$ ) ;
rank: 313
score: 99.32887961647727
patch: case $STRING$ : sb . append ( $STRING$ + c ) ; sb . append ( backslash CaMeL Escape ) ;
rank: 313
score: 99.30403645833333
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; $STRING$ ; case $STRING$ :
rank: 313
score: 99.2375018780048
patch: case $STRING$ : $STRING$ : sb . append ( $STRING$ ) ;
rank: 314
score: 99.417138671875
patch: case $STRING$ : sb . append ( ( String ) sb . to CaMeL String ( ) ) ;
rank: 314
score: 99.37868365119485
patch: case $STRING$ : sb . append ( new Character ( c ) ) ; break ;
rank: 314
score: 99.37032741970486
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } }
rank: 314
score: 99.34774619654605
patch: case $STRING$ : sb . append ( $STRING$ ) ; return sb . trim ( ) ; }
rank: 314
score: 99.32864583333334
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; / *
rank: 314
score: 99.30390082465277
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; ) { break ; }
rank: 314
score: 99.29852294921875
patch: case $STRING$ : sb . append ( ) ; break ;
rank: 314
score: 99.2371597290039
patch: } else { case $STRING$ : sb . append ( backslash CaMeL Escape ) ;
rank: 315
score: 99.40809390419408
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; } sb . append ( $STRING$ ) ;
rank: 315
score: 99.37834028764205
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; } ;
rank: 315
score: 99.37022181919643
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , $STRING$ ) ;
rank: 315
score: 99.34759521484375
patch: else sb . append ( $STRING$ ) ; } } sb . append ( $STRING$ ) ;
rank: 315
score: 99.34245161576705
patch: case $STRING$ : { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; break ;
rank: 315
score: 99.30302159926471
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; ( ++ break ;
rank: 315
score: 99.29780578613281
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; return $NUMBER$ ;
rank: 315
score: 99.23707490808823
patch: case $STRING$ : sb . append ( backslash CaMeL Escape && backslash CaMeL Escape ) ;
rank: 316
score: 99.4077899639423
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( ) ) . append ( $STRING$ ) ; break ;
rank: 316
score: 99.37827555338542
patch: case $STRING$ : sb . append ( s ) . append ( $STRING$ ) ; break ;
rank: 316
score: 99.36991119384766
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( 1 ) ;
rank: 316
score: 99.328349609375
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; sb . append ( $STRING$ ) . append ( $STRING$ ) ;
rank: 316
score: 99.30299287683823
patch: case $STRING$ : if ( sb . length ( ) >= 0 ) { break ;
rank: 316
score: 99.29700578962054
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; *
rank: 316
score: 99.23664008246527
patch: case ) : sb . append ( backslash CaMeL Escape ) ; break ; case $STRING$ :
rank: 317
score: 99.4166768391927
patch: case $STRING$ : sb . append ( s . to CaMeL String ( ) ) ; sb . append ( $STRING$ ) ;
rank: 317
score: 99.40699114118304
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) . char CaMeL At ( 0 ) ) ; }
rank: 317
score: 99.36982996323529
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : sb
rank: 317
score: 99.34150222252156
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , doublequote CaMeL Escape , doublequote CaMeL Escape ) ;
rank: 317
score: 99.3029426125919
patch: case $STRING$ : sb . append ( $STRING$ ) ; return break ; } break ;
rank: 317
score: 99.2363037109375
patch: case $STRING$ : backslash CaMeL Escape . append ( backslash CaMeL Escape ) ;
rank: 318
score: 99.40662151834239
patch: case $STRING$ : s . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; break ; }
rank: 318
score: 99.3780517578125
patch: case $STRING$ : continue ; default : sb . append ( $STRING$ ) ; }
rank: 318
score: 99.3697509765625
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ + sb . ;
rank: 318
score: 99.30258517795139
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; $STRING$ : break ; }
rank: 318
score: 99.2967059795673
patch: case NAME : sb . append ( $STRING$ ) ; break ;
rank: 318
score: 99.23502843520221
patch: case $STRING$ : if ( backslash CaMeL Escape ) sb . append ( c ) ;
rank: 319
score: 99.4158351732337
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; case $STRING$ : sb . append ( $STRING$ ) ;
rank: 319
score: 99.40657261439732
patch: case $STRING$ : sb . append ( $STRING$ ) ; } sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ;
rank: 319
score: 99.37774658203125
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) ; continue ;
rank: 319
score: 99.36971435546874
patch: String CaMeL Builder sb = new String CaMeL Builder ( s . length ( ) + 1 ) ;
rank: 319
score: 99.34614114200367
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; else return break ;
rank: 319
score: 99.34067234848484
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , doublequote CaMeL Escape , singlequote CaMeL Escape , backslash CaMeL Escape ) ;
rank: 319
score: 99.30214556525735
patch: case $STRING$ : sb . append ( 0 ) ; break ; $STRING$ ; break ;
rank: 319
score: 99.23448944091797
patch: case $STRING$ : sb . append ( ( char ) ( c ) ) ;
rank: 320
score: 99.4153252963362
patch: case $STRING$ : sb . append ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) ; sb . append ( c ) ;
rank: 320
score: 99.40621337890624
patch: case $STRING$ : return $STRING$ ; case $STRING$ : return s . char CaMeL At ( i ) ;
rank: 320
score: 99.36918559827302
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( ( int ) $STRING$ ) ;
rank: 320
score: 99.34595444623162
patch: case $STRING$ + $STRING$ : sb . append ( $STRING$ ) ; break ; break ;
rank: 320
score: 99.34055397727273
patch: case $STRING$ : sb . append ( 0 + s . char CaMeL At ( i ) ) ; break ;
rank: 320
score: 99.32756095096983
patch: case $STRING$ : String CaMeL Builder sb = new String CaMeL Builder ( s . to CaMeL String ( ) . to CaMeL String ( ) ) ;
rank: 320
score: 99.3018798828125
patch: case $STRING$ : String c = sb . append ( $STRING$ ) ; break ;
rank: 320
score: 99.23423138786765
patch: case $STRING$ ? $STRING$ : sb . append ( backslash CaMeL Escape ) ; break ;
rank: 321
score: 99.41529541015625
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) + $STRING$ ;
rank: 321
score: 99.40592447916667
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; } return sb . to CaMeL String ( ) ;
rank: 321
score: 99.37744140625
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) . append ( ; break ;
rank: 321
score: 99.36888776506696
patch: case $STRING$ ; case $STRING$ : sb . append ( $STRING$ ) ;
rank: 321
score: 99.34023215553977
patch: case $STRING$ : sb . append ( $STRING$ ) ; System . out . append ( c ) ; break ;
rank: 321
score: 99.30154418945312
patch: case $STRING$ : if ( sb . length ( ) > $NUMBER$ ) break ;
rank: 321
score: 99.29567583869485
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case case $STRING$ :
rank: 321
score: 99.23418782552083
patch: case $STRING$ : sb . append ( $STRING$ ) ; null ; break ;
rank: 322
score: 99.41508265904018
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( sb . append ( sb . char CaMeL At ( i ) ) ) ;
rank: 322
score: 99.40587768554687
patch: case $STRING$ : s . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ;
rank: 322
score: 99.37742855674342
patch: case $STRING$ : if ( Character . is CaMeL Digit ( c ) ) continue ; break ;
rank: 322
score: 99.36869049072266
patch: case $STRING$ : break ; case $STRING$ : sb . append ( quote ) ;
rank: 322
score: 99.3443244485294
patch: case $STRING$ : break ; else sb . append ( $STRING$ ) ; break ; }
rank: 322
score: 99.3267463235294
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( backslash CaMeL Escape ) ;
rank: 322
score: 99.2956073467548
patch: case 1 : sb . append ( $STRING$ ) ; continue ;
rank: 322
score: 99.23410213694854
patch: case $STRING$ : else sb . append ( $STRING$ ) ; break ; case $STRING$ :
rank: 323
score: 99.40556483114919
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ; return sb . to CaMeL Lower CaMeL Case ( ) ;
rank: 323
score: 99.3772216796875
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( $STRING$ ) ; continue ;
rank: 323
score: 99.36839535361842
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( ( char ) quote ) ;
rank: 323
score: 99.34430338541667
patch: append ( sb . to CaMeL String ( ) ) ; break ; }
rank: 323
score: 99.326416015625
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; String sb . append ( backslash CaMeL Escape ) ;
rank: 324
score: 99.41484543372844
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; }
rank: 324
score: 99.4055240028783
patch: case $STRING$ : case $STRING$ : sb . append ( c ) . append ( $STRING$ ) ;
rank: 324
score: 99.37715871710526
patch: case Token . $STRING$ : sb . append ( $STRING$ ) ; break ; default : break ;
rank: 324
score: 99.36793053668478
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , doublequote CaMeL Escape , sb ) ;
rank: 324
score: 99.3439708891369
patch: case $STRING$ : sb . append ( sb . to CaMeL String ( ) ) ; break ; } }
rank: 324
score: 99.339853515625
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb ,
rank: 324
score: 99.30126953125
patch: break ; sb . append ( $STRING$ ) ; break ;
rank: 324
score: 99.29440104166666
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; else {
rank: 324
score: 99.23250325520833
patch: case $STRING$ : sb , $STRING$ : sb . append ( $STRING$ ) ;
rank: 325
score: 99.41452955163044
patch: case $STRING$ : sb . append ( sb . char CaMeL At ( i ) ) . append ( quote ) ;
rank: 325
score: 99.40483165922619
patch: case $STRING$ : s . append ( $STRING$ ) . append ( $STRING$ ) . append ( $STRING$ ) ;
rank: 325
score: 99.37693277994792
patch: case $STRING$ : case $STRING$ : throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;
rank: 325
score: 99.3674847146739
patch: case $STRING$ : String CaMeL Builder sb = new String CaMeL Builder ( ) ; sb . append ( c ) ;
rank: 325
score: 99.34382898667279
patch: sb . append ( $STRING$ ) ; sb . append ( c ) ; break ;
rank: 325
score: 99.33973214285714
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb ) ;
rank: 325
score: 99.326220703125
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; break ;
rank: 325
score: 99.30119323730469
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ {
rank: 325
score: 99.29438332950367
patch: case Token . $STRING$ : sb . append ( $STRING$ ) ; break ; break ;
rank: 325
score: 99.23229262408088
patch: case s . length ( ) : sb . append ( quote ) ; break ;
rank: 326
score: 99.41435102982955
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( s . to CaMeL String ( ) ) ;
rank: 326
score: 99.40427760074013
patch: case $STRING$ : if ( Character . is CaMeL Digit ( c ) ) { break ; }
rank: 326
score: 99.37677001953125
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : * /
rank: 326
score: 99.36715565557066
patch: case $STRING$ : break . append ( $STRING$ ) ; case $STRING$ : sb . append ( backslash CaMeL Escape ) ;
rank: 326
score: 99.34372845818015
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; count ++ ; }
rank: 326
score: 99.30115424262152
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; break ; $STRING$ ; break ; ;
rank: 326
score: 99.29419708251953
patch: case $STRING$ : sb . append ( $STRING$ ) ; return sb . $STRING$ ;
rank: 326
score: 99.2320889559659
patch: case $STRING$ : sb . append ( charset ) ;
rank: 327
score: 99.41434936523437
patch: case $STRING$ : s . append ( $STRING$ ) ; sb . append ( backslash CaMeL Escape ) ;
rank: 327
score: 99.404208984375
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( Character . to CaMeL Upper CaMeL Case ( $STRING$ ) ) ;
rank: 327
score: 99.37668744255515
patch: case $STRING$ : if ( $STRING$ . equals ( c ) ) break ; break ;
rank: 327
score: 99.36708135190217
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , output CaMeL Charset CaMeL Encoder ) ; }
rank: 327
score: 99.34336853027344
patch: case $STRING$ : sb . append ( $STRING$ ) ; } else { break ;
rank: 327
score: 99.33915201822917
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } break ;
rank: 327
score: 99.32588918585526
patch: case $STRING$ : String CaMeL Builder case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 327
score: 99.30111258370536
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; return break ;
rank: 327
score: 99.2317253561581
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; break ? $STRING$ :
rank: 328
score: 99.41427612304688
patch: case ( s . char CaMeL At ( i ) ) : sb . append ( $STRING$ ) ;
rank: 328
score: 99.40400623139881
patch: case $NUMBER$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; }
rank: 328
score: 99.37655479029605
patch: case - 1 : sb . append ( $STRING$ ) . append ( c ) ; break ;
rank: 328
score: 99.3670654296875
patch: case $STRING$ : sb . append ( $NUMBER$ ) ; break ; case $STRING$ :
rank: 328
score: 99.34330531529018
patch: case $STRING$ + sb . append ( $STRING$ ) ; break ; }
rank: 328
score: 99.33884910300925
patch: if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append ( $STRING$ ) ; break ; }
rank: 328
score: 99.32570578835227
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( $STRING$ ) ; break ; case $STRING$
rank: 328
score: 99.300537109375
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; break ; ; } break ;
rank: 328
score: 99.293212890625
patch: case $STRING$ ? case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 329
score: 99.41383870442708
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( output CaMeL Charset CaMeL Encoder . $STRING$ ) ;
rank: 329
score: 99.40395720108695
patch: case $STRING$ : if ( Character . is CaMeL Digit ( c ) ) { sb . append ( $STRING$ ) ;
rank: 329
score: 99.37642629523026
patch: case $STRING$ : sb . append ( c ) ; break ; default : break ; } }
rank: 329
score: 99.34317016601562
patch: case Token . $STRING$ : sb . append ( $STRING$ ) ; break ; }
rank: 329
score: 99.33861287434895
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder != null ) { sb . append ( $STRING$ ) ; break ;
rank: 329
score: 99.32569795496323
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder , backslash CaMeL Escape ) ;
rank: 329
score: 99.30047248391544
patch: case $STRING$ : if ( $STRING$ . length ( ) == 0 ) { break ;
rank: 329
score: 99.29295247395834
patch: case 1 ? $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 329
score: 99.23153866038604
patch: case ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) ;
rank: 330
score: 99.41377476283482
patch: case $STRING$ : sb . append ( output CaMeL Charset CaMeL Encoder . append ( sb . char CaMeL At ( i ) ) ) ; }
rank: 330
score: 99.403876953125
patch: case Character . $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; break ; }
rank: 330
score: 99.37642415364583
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; default : return $STRING$ ;
rank: 330
score: 99.3428955078125
patch: sb . append ( $STRING$ ) . append ( $STRING$ ) ; break ; } break ;
rank: 330
score: 99.33860181725544
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , sb ) ; break ;
rank: 330
score: 99.2928825827206
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ ; }
rank: 330
score: 99.23070610894098
patch: case backslash CaMeL Escape : sb . append ( $STRING$ ) ; break ; case $STRING$ :
rank: 331
score: 99.41364489103618
patch: case $STRING$ : { sb . append ( $STRING$ ) ; sb . append ( c ) ;
rank: 331
score: 99.37631064967105
patch: sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; break ;
rank: 331
score: 99.3665771484375
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( s , c ) ; }
rank: 331
score: 99.3385521673387
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb ) ;
rank: 331
score: 99.32526506696429
patch: case $STRING$ : sb . append ( s . . char CaMeL At ( i ) ) ; break ;
rank: 331
score: 99.29999542236328
patch: case STRING : sb . append ( $STRING$ ) ; break ; } break ;
rank: 331
score: 99.292724609375
patch: case $STRING$ : sb . append ( ) . append ( $STRING$ ) ; break ;
rank: 331
score: 99.2302490234375
patch: case $STRING$ : System . out . println ( $STRING$ + c ) ;
rank: 332
score: 99.41361038773148
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( $STRING$ ) . append ( output CaMeL Charset CaMeL Encoder ) ;
rank: 332
score: 99.40363103693181
patch: case $STRING$ : if ( $STRING$ . equals ( Character . to CaMeL Upper CaMeL Case ( c ) ) )
rank: 332
score: 99.36652967664931
patch: case $STRING$ : sb . append ( 1 ) ; sb . append ( $STRING$ ) ;
rank: 332
score: 99.34275309244792
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( case ) ; break ;
rank: 332
score: 99.33798452524039
patch: case TRUE : sb . append ( $STRING$ ) ; break ;
rank: 332
score: 99.29960801866319
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; $STRING$ : break ; ;
rank: 332
score: 99.2922119140625
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; break ; ) ;
rank: 332
score: 99.2299560546875
patch: case $STRING$ : sb . append ( ) ; break ; case $STRING$ :
rank: 333
score: 99.41281127929688
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) . append ( $STRING$ ) ; }
rank: 333
score: 99.37609281994048
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( $STRING$ ) ; break ;
rank: 333
score: 99.36607666015625
patch: switch ( output CaMeL Charset CaMeL Encoder ) { case $STRING$ : sb . append ( $STRING$ ) ;
rank: 333
score: 99.3424933938419
patch: sb . append ( $STRING$ ) ; } sb . append ( $STRING$ ) ; }
rank: 333
score: 99.22948279747597
patch: break ; case $STRING$ : sb . append ( quote ) ;
rank: 334
score: 99.412685546875
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; sb . append ( $STRING$ ) . append ( c ) ;
rank: 334
score: 99.40248046875
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( ) ) . append ( $STRING$ ) ; }
rank: 334
score: 99.37569580078124
patch: case Character . MIN : sb . append ( $STRING$ ) . append ( c ) ; break ;
rank: 334
score: 99.33766741071429
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , doublequote CaMeL Escape , doublequote CaMeL Escape , output CaMeL Charset CaMeL Encoder ) ;
rank: 334
score: 99.3246182528409
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; sb . append ( quote ) ; break ;
rank: 334
score: 99.2994384765625
patch: append ( $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 334
score: 99.2914794921875
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; true ;
rank: 334
score: 99.22901108685662
patch: case $STRING$ : sb . append ( $STRING$ ) ; output CaMeL Charset CaMeL Encoder ,
rank: 335
score: 99.41265314275569
patch: case $STRING$ : output CaMeL Charset CaMeL Encoder . append ( $STRING$ ) ; sb . append ( $STRING$ ) ;
rank: 335
score: 99.40217729048295
patch: case $STRING$ : if ( $STRING$ . starts CaMeL With ( c ) ) sb . append ( $STRING$ ) ;
rank: 335
score: 99.37555803571429
patch: default : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ; break ;
rank: 335
score: 99.36601706112133
patch: case $STRING$ : { break ; case $STRING$ : sb . append ( $STRING$ ) ;
rank: 335
score: 99.34224018297698
patch: case $STRING$ + sb . length ( ) ; sb . append ( $STRING$ ) ; break ;
rank: 335
score: 99.33756510416667
patch: case $STRING$ : sb . append ( $STRING$ ) ; if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) {
rank: 335
score: 99.32421875
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c , c ) ;
rank: 335
score: 99.29936000279018
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; ; break ;
rank: 335
score: 99.22864487591912
patch: case $STRING$ : . append ( backslash CaMeL Escape ) ; break ; case $STRING$ :
rank: 336
score: 99.3754021139706
patch: case $STRING$ : break ; default : sb . append ( $STRING$ ) ; } }
rank: 336
score: 99.3659435453869
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( sb ) ;
rank: 336
score: 99.342041015625
patch: sb . append ( $STRING$ ) ; sb . append ( sb . length ( ) ) ;
rank: 336
score: 99.32415008544922
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( $STRING$ ) ;
rank: 336
score: 99.2908073874081
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; ; case 1 ;
rank: 337
score: 99.40169583834134
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) . to CaMeL Char CaMeL Array ( ) ; break ;
rank: 337
score: 99.3419189453125
patch: case $STRING$ : sb . append ( sb . substring ( 0 , i ) ) ; break ;
rank: 337
score: 99.33725992838542
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c ) ; break ; case $STRING$ :
rank: 337
score: 99.32384723165761
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( $STRING$ ) . append ( $STRING$ ) ;
rank: 337
score: 99.29920869715073
patch: case $STRING$ : if ( break ; sb . append ( $STRING$ ) ; break ;
rank: 337
score: 99.29054612379808
patch: case $STRING$ : try { sb . append ( $STRING$ ) ;
rank: 337
score: 99.22817654079861
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( ( ) ;
rank: 338
score: 99.412109375
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) ; sb . append ( c ) ;
rank: 338
score: 99.4015604654948
patch: case Character . $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( $STRING$ ) ) ; break ;
rank: 338
score: 99.37451171875
patch: case $STRING$ : System . out . println ( $STRING$ ) ; sb . append ( c ) ; }
rank: 338
score: 99.34180908203125
patch: case 0 : sb . append ( $STRING$ ) ; sb . append ( $STRING$ ) ; break ;
rank: 338
score: 99.33725411551339
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; case $STRING$ : sb . append ( backslash CaMeL Escape ) ;
rank: 338
score: 99.32352000269397
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( doublequote CaMeL Escape ) ;
rank: 338
score: 99.29915364583333
patch: case $NUMBER$ : System . out . println ( $STRING$ ) ; break ;
rank: 338
score: 99.29053548177083
patch: $STRING$ : sb . append ( sb . append ( $STRING$ ) ) ;
rank: 338
score: 99.22816569010416
patch: case $STRING$ : sb . append ( $STRING$ , backslash CaMeL Escape ) ;
rank: 339
score: 99.40147181919643
patch: case $STRING$ : if ( $STRING$ . equals CaMeL Ignore CaMeL Case ( c ) ) { break ; }
rank: 339
score: 99.37413441051136
patch: case Character . MIN : sb . append ( $STRING$ ) ; sb . append ( c ) ; break ;
rank: 339
score: 99.36551036005434
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , doublequote CaMeL Escape , break ) ;
rank: 339
score: 99.34176025390624
patch: sb . append ( $STRING$ ) ; return sb . to CaMeL String ( ) ; } break ;
rank: 339
score: 99.33719635009766
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String ( ) ) ; sb . append ( c ) ;
rank: 339
score: 99.32300544507575
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( backslash CaMeL Escape , doublequote CaMeL Escape ) ;
rank: 339
score: 99.29896375868056
patch: case 1 : sb . append ( $STRING$ ) ; break ; $STRING$ ; ; break ;
rank: 339
score: 99.22789809283088
patch: case ( $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ :
rank: 340
score: 99.41201346261161
patch: case $STRING$ : if ( ! output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append ( $STRING$ ) ;
rank: 340
score: 99.4014423076923
patch: case $STRING$ : sb . append ( $STRING$ ) ; return sb . to CaMeL Lower CaMeL Case ( ) . trim ( ) ;
rank: 340
score: 99.37404174804688
patch: case $STRING$ : sb . append ( $STRING$ ) ; ; } sb . append ( $STRING$ ) ;
rank: 340
score: 99.3641128540039
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( line ) ;
rank: 340
score: 99.34101947985198
patch: case $STRING$ : sb . append ( sb . length ( ) - 1 ) ; break ;
rank: 340
score: 99.33688354492188
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( $STRING$ ) ; break ; case $STRING$ :
rank: 340
score: 99.29881376378677
patch: case $STRING$ : if ( sb . length ( ) < 0 ) { break ;
rank: 340
score: 99.29029846191406
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case 0 ;
rank: 340
score: 99.227880859375
patch: case $STRING$ : if ( $STRING$ ) sb . append ( $STRING$ ) ;
rank: 341
score: 99.41187201605902
patch: case $NUMBER$ : sb . append ( s . char CaMeL At ( i ) ) ;
rank: 341
score: 99.40133666992188
patch: case $STRING$ : if ( Character . is CaMeL Lower CaMeL Case ( c ) ) sb . append ( $STRING$ ) ;
rank: 341
score: 99.37352159288194
patch: case $STRING$ : sb . append ( Character . to CaMeL Chars ( c ) ) ;
rank: 341
score: 99.34101698133681
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( start ) ; break ;
rank: 341
score: 99.32261827256944
patch: case $STRING$ : sb . append ( $STRING$ ) ; break . append ( c ) ;
rank: 341
score: 99.29875631893383
patch: case $STRING$ : String = $STRING$ ; sb . append ( $STRING$ ) ; break ;
rank: 341
score: 99.22779947916666
patch: case $STRING$ : sb . append ( $STRING$ | backslash CaMeL Escape ) ;
rank: 342
score: 99.41182002314815
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append ( quote ) ;
rank: 342
score: 99.40119140625
patch: case Character . $STRING$ : sb . append ( $STRING$ ) . append ( c ) . append ( $STRING$ ) ; break ;
rank: 342
score: 99.37335205078125
patch: case $STRING$ : break ; default : sb . append ( $STRING$ ) ; } break ;
rank: 342
score: 99.36373901367188
patch: if ( output CaMeL Charset CaMeL Encoder != null ) { sb . append ( $STRING$ ) ; }
rank: 342
score: 99.34098735608552
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $NUMBER$ ) ; } break ;
rank: 342
score: 99.29854910714286
patch: case $NUMBER$ : return sb . append ( $STRING$ ) ; break ;
rank: 342
score: 99.22776884191177
patch: return $STRING$ ) ; case $STRING$ : sb . append ( backslash CaMeL Escape ) ;
rank: 343
score: 99.40111328125
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( $STRING$ ) ) ; break ; case $STRING$ :
rank: 343
score: 99.3633700284091
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , doublequote CaMeL Escape ) ; }
rank: 343
score: 99.34087057674633
patch: else sb . append ( $STRING$ ) ; } sb . append ( $STRING$ ) ;
rank: 343
score: 99.32130714699075
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; sb . append ( $STRING$ ) ; sb . append ( $STRING$ ) ;
rank: 343
score: 99.29841164981617
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; break ; $STRING$ } break ;
rank: 343
score: 99.22764756944444
patch: case $STRING$ : sb . append ( charset ) ; sb . append ( $STRING$ ) ;
rank: 344
score: 99.41175672743056
patch: case $STRING$ : output CaMeL Charset CaMeL Encoder . append ( sb . char CaMeL At ( i ) ) . append ( c ) ;
rank: 344
score: 99.40106879340277
patch: case $STRING$ : sb . append ( Character . to CaMeL Char CaMeL Array ( c ) ) . append ( $STRING$ ) ; break ;
rank: 344
score: 99.36314561631944
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( line ) ;
rank: 344
score: 99.33664772727273
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; break ; }
rank: 344
score: 99.3210212953629
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb ,
rank: 344
score: 99.2977523803711
patch: case $STRING$ : sb . append ( $STRING$ ) ; ; break ; break ;
rank: 344
score: 99.2896728515625
patch: case default : sb . append ( $STRING$ ) ; break ;
rank: 344
score: 99.22753188189338
patch: return doublequote CaMeL Escape ; case $STRING$ : sb . append ( $STRING$ ) ;
rank: 345
score: 99.40103853665866
patch: case $STRING$ : s . append ( $STRING$ ) . append ( $STRING$ ) . append ( c ) . append ( $STRING$ ) ;
rank: 345
score: 99.37254423253677
patch: case Char CaMeL Sequence . STRING : sb . append ( $STRING$ ) ; break ;
rank: 345
score: 99.36311170789931
patch: case $STRING$ : sb . append ( s . char CaMeL At ( c ) ) ;
rank: 345
score: 99.34041341145833
patch: case $STRING$ : sb . append ( $STRING$ ) ; } break ; else
rank: 345
score: 99.33585902622768
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append ( c ) ; }
rank: 345
score: 99.28898620605469
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; $STRING$ ) ;
rank: 345
score: 99.22743326822916
patch: return $STRING$ ) ; case $STRING$ : sb . append ( $STRING$ ) ;
rank: 346
score: 99.4107998934659
patch: case $STRING$ : sb . append ( output CaMeL Charset CaMeL Encoder . append ( c ) ) ; break ;
rank: 346
score: 99.40097191220238
patch: case $NUMBER$ : s . append ( $STRING$ ) . append ( c ) . append ( $STRING$ ) ;
rank: 346
score: 99.37226867675781
patch: case $STRING$ : case $STRING$ : sb . append ( $STRING$ ) ; continue ;
rank: 346
score: 99.34034639246323
patch: case $STRING$ : sb . append ( $STRING$ ) ; } case $STRING$ : break ;
rank: 346
score: 99.29774305555556
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; append ++ ; break ;
rank: 346
score: 99.28894805908203
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; break ; return $STRING$ ;
rank: 346
score: 99.22719900948661
patch: case $STRING$ : sb . append ( ( char ) $NUMBER$ ) ;
rank: 347
score: 99.41073495370371
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( output CaMeL Charset CaMeL Encoder . append ( c ) ) ;
rank: 347
score: 99.40076171875
patch: case $STRING$ : case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( $STRING$ ) ) ; break ;
rank: 347
score: 99.37209250710227
patch: case $STRING$ : sb . append ( $STRING$ + Character . to CaMeL Upper CaMeL Case ( c ) ) ;
rank: 347
score: 99.34016248914931
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( index ) ; break ;
rank: 347
score: 99.33530610183189
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { sb . append ( backslash CaMeL Escape ) ; }
rank: 347
score: 99.28886413574219
patch: case $STRING$ : sb . append ( $STRING$ ) ; return $STRING$ ; $STRING$ ;
rank: 347
score: 99.22690158420139
patch: switch ( quote ) { case $STRING$ : sb . append ( backslash CaMeL Escape ) ;
rank: 348
score: 99.41041847511575
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( sb . append ( c ) . to CaMeL String ( ) ) ;
rank: 348
score: 99.4006680575284
patch: case $NUMBER$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( $STRING$ ) ) ; break ;
rank: 348
score: 99.34011358963816
patch: case 1 : sb . append ( $STRING$ ) . append ( $STRING$ ) ; break ; }
rank: 348
score: 99.3350318170363
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append ( backslash CaMeL Escape ) ; break ;
rank: 348
score: 99.31849407327586
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; }
rank: 348
score: 99.29750061035156
patch: case 1 : sb . append ( $STRING$ ) ; break ; $STRING$ break ;
rank: 348
score: 99.2266094501202
patch: case $STRING$ : backslash CaMeL Escape . append ( $STRING$ ) ;
rank: 349
score: 99.4099542025862
patch: case $STRING$ : output CaMeL Charset CaMeL Encoder . append ( s . char CaMeL At ( i ) ) ; sb . append ( $STRING$ ) ;
rank: 349
score: 99.40046037946429
patch: case $STRING$ : case $STRING$ : sb . append ( Character . to CaMeL String ( c ) ) ;
rank: 349
score: 99.37193388097427
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; default : ) ;
rank: 349
score: 99.3626019021739
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , doublequote CaMeL Escape , s ) ;
rank: 349
score: 99.34003649259868
patch: case $STRING$ : sb . append ( $STRING$ ) ; return sb . length ( ) ; }
rank: 349
score: 99.33496811810662
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , doublequote CaMeL Escape , singlequote CaMeL Escape , singlequote CaMeL Escape ) ;
rank: 349
score: 99.29742431640625
patch: case $STRING$ : { sb . append ( $STRING$ ) ; break ; break ;
rank: 350
score: 99.40031294389205
patch: break ; case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ;
rank: 350
score: 99.37190515854779
patch: case $STRING$ : sb . append ( c ) . append ( $STRING$ ) ; }
rank: 350
score: 99.36258737664474
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , sb , c ) ; }
rank: 350
score: 99.34003044577206
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( break ) ; }
rank: 350
score: 99.3348617553711
patch: case $STRING$ : sb . append ( $STRING$ ) ; + c ; break ;
rank: 350
score: 99.31760817307692
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( s . to CaMeL String ( ) ) ; break ;
rank: 350
score: 99.29722493489584
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; $STRING$ /
rank: 350
score: 99.22627258300781
patch: switch ( c ) { case $STRING$ : sb . append ( quote ) ;
rank: 351
score: 99.40957802220395
patch: case $STRING$ : sb . append ( quote ) ; sb . append ( $STRING$ ) ; }
rank: 351
score: 99.39990234375
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( $STRING$ ) . char CaMeL At ( i ) ) ;
rank: 351
score: 99.37188165838069
patch: case $STRING$ : sb . append ( $STRING$ ) ; } else { sb . append ( $STRING$ ) ; }
rank: 351
score: 99.33990478515625
patch: if ( sb . equals ( $STRING$ ) ) sb . append ( $STRING$ ) ; break ; }
rank: 351
score: 99.2872673483456
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $NUMBER$ : {
rank: 351
score: 99.22549777560764
patch: return ( backslash CaMeL Escape ) ; case $STRING$ : sb . append ( $STRING$ ) ;
rank: 352
score: 99.40956517269737
patch: case $STRING$ : { sb . append ( $STRING$ ) ; sb . append ( $STRING$ ) ;
rank: 352
score: 99.37186976841518
patch: case $STRING$ : break ; case $STRING$ : break ; case $STRING$ :
rank: 352
score: 99.36223810369319
patch: case $STRING$ : String CaMeL Builder sb = new String CaMeL Builder ( s . char CaMeL At ( i )
rank: 352
score: 99.33466653262867
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String ( ) ) ; sb . append ( $STRING$ ) ; break ;
rank: 352
score: 99.29700385199652
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; ; break ; break ;
rank: 352
score: 99.22529820033482
patch: case $STRING$ : if ( $STRING$ . equals ( c ) ) {
rank: 353
score: 99.40938895089286
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) . append ( $STRING$ ) . append ( $STRING$ ) ;
rank: 353
score: 99.39946899414062
patch: case $STRING$ : return Character . to CaMeL Upper CaMeL Case ( c ) . trim ( ) ;
rank: 353
score: 99.37176834909539
patch: case $STRING$ : sb . append ( $STRING$ ) sb . append ( c ) ; break ;
rank: 353
score: 99.3621337890625
patch: case $STRING$ : sb . append ( $STRING$ ) : sb . append ( c ) ; break ;
rank: 353
score: 99.3396060341283
patch: sb . append ( $STRING$ ) ; break ; else sb . append ( c ) ; }
rank: 353
score: 99.31703252377717
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : sb . append ( s ) ;
rank: 353
score: 99.29693603515625
patch: case $STRING$ : return sb . append ( $STRING$ ) ; break ; break ;
rank: 353
score: 99.22492218017578
patch: switch ( charset ) { case $STRING$ : sb . append ( $STRING$ ) ;
rank: 354
score: 99.37159016927083
patch: case $STRING$ : * / sb . append ( $STRING$ ) ; break ;
rank: 354
score: 99.362060546875
patch: case $STRING$ : if ( c == $STRING$ ) { sb . append ( $STRING$ ) ;
rank: 354
score: 99.33953179253473
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( value ) ; break ;
rank: 354
score: 99.33417302911931
patch: case $STRING$ : sb . append ( new String ( s . char CaMeL At ( i ) ) ) ;
rank: 354
score: 99.31685207201087
patch: case $STRING$ : sb . append ( ( String ) s . char CaMeL At ( i ) ) ; break ;
rank: 354
score: 99.29660373263889
patch: case $STRING$ : String c = $STRING$ ; sb . append ( $STRING$ ) ; break ;
rank: 354
score: 99.28672162224265
patch: case Character . $STRING$ : { sb . append ( $STRING$ ) ; break ; }
rank: 354
score: 99.22470431857639
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( ( String )
rank: 355
score: 99.37124454273896
patch: case $STRING$ : sb . append ( $STRING$ ) ; continue ; default : break ;
rank: 355
score: 99.36196560329861
patch: case $STRING$ : sb . append ( Integer . to CaMeL String ( c ) ) ;
rank: 355
score: 99.33927612304687
patch: case $STRING$ : sb . append ( $STRING$ ) ; s . append ( $STRING$ ) ; break ;
rank: 355
score: 99.33380998883929
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) sb . append ( $STRING$ ) ; break ;
rank: 355
score: 99.29625746783088
patch: case $STRING$ : $STRING$ : sb . append ( $STRING$ ) ; break ; break ;
rank: 355
score: 99.28648466222427
patch: case Token . $STRING$ : sb . append ( $STRING$ ) ; break ; $STRING$ ;
rank: 355
score: 99.22398963341347
patch: text . append ( $STRING$ ) ; break ; case $STRING$ :
rank: 356
score: 99.40894616168478
patch: case $STRING$ : sb . append ( sb . append ( $STRING$ ) ) ; sb . append ( c ) ;
rank: 356
score: 99.37098999023438
patch: case Integer . parse CaMeL Int ( $STRING$ ) : sb . append ( $STRING$ ) ; break ;
rank: 356
score: 99.36172688802084
patch: case $STRING$ + $STRING$ : sb . append ( backslash CaMeL Escape ) ;
rank: 356
score: 99.33920288085938
patch: sb . append ( $STRING$ ) ; sb . append ( c ) ; }
rank: 356
score: 99.31526184082031
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( singlequote CaMeL Escape ) ) ;
rank: 356
score: 99.29602768841912
patch: case $NUMBER$ : if ( sb . append ( $STRING$ ) ) break ; break ;
rank: 356
score: 99.28641183035714
patch: case $STRING$ : $STRING$ sb . append ( $STRING$ ) ; break ;
rank: 356
score: 99.22395324707031
patch: case $STRING$ : sb . append ( ( int ) ( c ) ) ;
rank: 357
score: 99.40886320891204
patch: switch ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { case $STRING$ : sb . append ( c ) ;
rank: 357
score: 99.3977687669837
patch: case Character . $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( c ) ;
rank: 357
score: 99.37067522321429
patch: default : sb . append ( $STRING$ ) ; break ; } }
rank: 357
score: 99.3616943359375
patch: case $STRING$ : sb . append ( $STRING$ ) ; true ; sb . append ( backslash CaMeL Escape ) ;
rank: 357
score: 99.33917236328125
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) ; continue ;
rank: 357
score: 99.3336181640625
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; sb . append ( backslash CaMeL Escape ) ; break ;
rank: 357
score: 99.31458782327586
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation (
rank: 357
score: 99.29598999023438
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; $STRING$ ; $STRING$
rank: 357
score: 99.28598022460938
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; += $STRING$ ;
rank: 357
score: 99.2239013671875
patch: case $STRING$ : sb . char CaMeL At ( i ) ; break ;
rank: 358
score: 99.397744140625
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( $STRING$ ) ) . append ( c ) ;
rank: 358
score: 99.3609952059659
patch: case $STRING$ : sb . append ( c ) + $STRING$ : sb . append ( backslash CaMeL Escape ) ;
rank: 358
score: 99.31421802662037
patch: String CaMeL Builder sb = new String CaMeL Builder ( s . to CaMeL String ( ) ) ; sb . append ( $STRING$ ) ;
rank: 358
score: 99.29588317871094
patch: case $STRING$ : break ; : sb . append ( $STRING$ ) ; break ;
rank: 358
score: 99.28592936197917
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; return $STRING$ ; ;
rank: 358
score: 99.22380235460069
patch: case $STRING$ : sb . append ( ( ( String ) backslash CaMeL Escape ) ) ;
rank: 359
score: 99.40848795572917
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( s . char CaMeL At ( i ) ) ; }
rank: 359
score: 99.39767982219827
patch: case $STRING$ : sb . append ( Character . to CaMeL Char CaMeL Array ( c ) . char CaMeL At ( 0 ) ) ; break ;
rank: 359
score: 99.3703280362216
patch: case $STRING$ : if ( $STRING$ . equals ( c ) ) { sb . append ( $STRING$ ) ; }
rank: 359
score: 99.36097783627717
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; sb . append ( quote ) ;
rank: 359
score: 99.33871120876736
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( end ) ; break ;
rank: 359
score: 99.33333587646484
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation (
rank: 359
score: 99.31363028067129
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( $STRING$ ) ; }
rank: 359
score: 99.29585535386029
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; else break ; ;
rank: 359
score: 99.2858642578125
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; } ;
rank: 359
score: 99.22372872488839
patch: case $STRING$ : sb . append ( ( String ) break ) ;
rank: 360
score: 99.4084375
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; } else { sb . append ( backslash CaMeL Escape ) ;
rank: 360
score: 99.3975127249053
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) . to CaMeL Lower CaMeL Case ( ) ;
rank: 360
score: 99.36090446920956
patch: case $STRING$ : sb . append ( ( char ) doublequote CaMeL Escape ) ;
rank: 360
score: 99.33856522409539
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( line ) ; break ; }
rank: 360
score: 99.33294356496711
patch: case $STRING$ : . append ( s . char CaMeL At ( i ) ) ; break ;
rank: 360
score: 99.31304253472223
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( output CaMeL Charset CaMeL Encoder . append ( $STRING$ ) ) ;
rank: 360
score: 99.285400390625
patch: case $STRING$ : sb . append ( sb . break ( $STRING$ ) ) ;
rank: 360
score: 99.22357177734375
patch: case $STRING$ || ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) )
rank: 361
score: 99.40780526620371
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( output CaMeL Charset CaMeL Encoder . $STRING$ ) ;
rank: 361
score: 99.39734497070313
patch: case $NUMBER$ : sb . append ( Character . to CaMeL Char CaMeL Array ( c ) ) ;
rank: 361
score: 99.3698501586914
patch: case $STRING$ : case $STRING$ : sb . append ( line ) ; break ;
rank: 361
score: 99.36039903428819
patch: case $STRING$ : sb . append ( $STRING$ ) + s . append ( $STRING$ ) ;
rank: 361
score: 99.31280517578125
patch: case $STRING$ : sb . append ( ( String ) $STRING$ ) ; break ;
rank: 361
score: 99.29481090198864
patch: case $STRING$ : break ; case $STRING$ : break ;
rank: 361
score: 99.28512137276786
patch: * case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 361
score: 99.22354465060764
patch: case $STRING$ : sb . append ( $STRING$ ) ? sb . append ( $STRING$ ) :
rank: 362
score: 99.40753173828125
patch: case quote : sb . append ( $STRING$ ) ; sb . append ( backslash CaMeL Escape ) ;
rank: 362
score: 99.39719556725544
patch: case $STRING$ : { sb . append ( Character . to CaMeL Lower CaMeL Case ( $STRING$ ) ) ; break ;
rank: 362
score: 99.36981756036931
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; } } sb . append ( $STRING$ ) ;
rank: 362
score: 99.36030129825367
patch: case $STRING$ : { sb . append ( $STRING$ ) ; break ; case $STRING$ :
rank: 362
score: 99.33785574776786
patch: break . append ( $STRING$ ) . append ( sb . to CaMeL String ( ) ) ; break ;
rank: 362
score: 99.29441833496094
patch: case $STRING$ : String ) { sb . append ( $STRING$ ) ; break ;
rank: 362
score: 99.28475952148438
patch: case 1 : sb . append ( $STRING$ ) ; break ; $STRING$ ; }
rank: 362
score: 99.22346496582031
patch: case $NUMBER$ : sb . append ( quote ) ; break ; case $STRING$ :
rank: 363
score: 99.40728169102823
patch: case $STRING$ : output CaMeL Charset CaMeL Encoder . append ( sb . char CaMeL At ( i ) ) ; sb . append ( backslash CaMeL Escape ) ;
rank: 363
score: 99.36973661534927
patch: case $STRING$ : sb . append ( s ) ; break ; default : break ;
rank: 363
score: 99.36009385850694
patch: case $STRING$ : sb . append ( $STRING$ ) : sb . append ( s ) ;
rank: 363
score: 99.31253299197635
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( $STRING$ ) ) ;
rank: 363
score: 99.29429626464844
patch: case $STRING$ : String ( sb . append ( $STRING$ ) ) ; break ;
rank: 363
score: 99.28448127297794
patch: case $STRING$ : sb . append ( $STRING$ ) ; } break ; case $STRING$ ;
rank: 363
score: 99.22338053385417
patch: case $STRING$ : c = backslash CaMeL Escape ; break ; case $STRING$ :
rank: 364
score: 99.4072598544034
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; return sb . to CaMeL String ( ) ;
rank: 364
score: 99.39660223599138
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( $STRING$ ) ) ; return sb . to CaMeL String ( ) ;
rank: 364
score: 99.36931694878473
patch: case $STRING$ : System . out . println ( $STRING$ ) ; break ; case $STRING$ :
rank: 364
score: 99.35949176290761
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , doublequote CaMeL Escape ) ; break ;
rank: 364
score: 99.33740234375
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) ; break ; else
rank: 364
score: 99.31204427083334
patch: case $STRING$ : sb . append ( quote ) ; break ; case $STRING$
rank: 364
score: 99.29373508029514
patch: case $STRING$ : break ; case 0 : sb . append ( $STRING$ ) ; break ;
rank: 364
score: 99.28435202205883
patch: case $NUMBER$ : case $STRING$ : sb . append ( $STRING$ ) ; break ; }
rank: 364
score: 99.22334120008681
patch: case $STRING$ : String . append ( $STRING$ ) ; sb . append ( $STRING$ ) ;
rank: 365
score: 99.40714888139205
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) . append ( ) ;
rank: 365
score: 99.35916940789474
patch: case $STRING$ : String CaMeL Builder sb = new String CaMeL Builder ( quote ) ; break ;
rank: 365
score: 99.33673416940789
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( n ) ; break ; }
rank: 365
score: 99.31193403764205
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i + $NUMBER$ ) ) ; break ;
rank: 365
score: 99.29352484809027
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; $STRING$ ; -- break ;
rank: 365
score: 99.28359985351562
patch: case 0 : sb . append ( $STRING$ ) ; break ; else break ;
rank: 365
score: 99.22318522135417
patch: case $STRING$ : break ; case $STRING$ :
rank: 366
score: 99.40700857979911
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( sb . char CaMeL At ( i ) ) . append ( c ) ;
rank: 366
score: 99.3688077059659
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ; ; break ;
rank: 366
score: 99.35909901494566
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( s , c , doublequote CaMeL Escape , c ) ;
rank: 366
score: 99.3365966796875
patch: case $STRING$ > $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 366
score: 99.31182270665323
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c , doublequote CaMeL Escape ) ;
rank: 366
score: 99.28359985351562
patch: case $NUMBER$ : try { sb . append ( $STRING$ ) ; break ; ;
rank: 367
score: 99.40654907226562
patch: case $STRING$ : sb = new String CaMeL Builder ( s . length ( ) + $NUMBER$ ) ;
rank: 367
score: 99.35843912760417
patch: case $STRING$ : if ( c != $STRING$ ) { sb . append ( $STRING$ ) ;
rank: 367
score: 99.3321021295363
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ;
rank: 367
score: 99.31155215992646
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String ( ) , c ) ;
rank: 367
score: 99.29341394761029
patch: case $STRING$ : if ( sb . append ( $STRING$ ) ; break ; break ;
rank: 367
score: 99.28355407714844
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; } if (
rank: 368
score: 99.406494140625
patch: case $STRING$ : sb . append ( quote ) ; else sb . append ( $STRING$ ) ;
rank: 368
score: 99.39611098345588
patch: case $STRING$ : case $STRING$ : case $STRING$ : sb . append ( c ) ;
rank: 368
score: 99.36834357766544
patch: case Integer . MAX _ VALUE : sb . append ( $STRING$ ) ; break ;
rank: 368
score: 99.35786769701087
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) ; sb . append ( c ) ;
rank: 368
score: 99.33179873511905
patch: case $STRING$ : sb . append ( $STRING$ + s . char CaMeL At ( i ) ) ; }
rank: 368
score: 99.29322052001953
patch: case $STRING$ : if ( $STRING$ . length ( ) > 0 ) break ;
rank: 368
score: 99.2833251953125
patch: case $STRING$ : try sb . append ( $STRING$ ) ; break ;
rank: 368
score: 99.2225341796875
patch: case $STRING$ : c = s . char CaMeL At ( i ) ; }
rank: 369
score: 99.40645926339286
patch: case $STRING$ : sb . append ( $STRING$ ) ; if ( output CaMeL Charset CaMeL Encoder != null )
rank: 369
score: 99.39610706676136
patch: case $STRING$ : s . append ( $STRING$ ) . append ( c ) . append ( $STRING$ ) ; }
rank: 369
score: 99.36830139160156
patch: case $STRING$ : break ; case $STRING$ : break ; case $STRING$ : break ;
rank: 369
score: 99.35779418945313
patch: } if ( output CaMeL Charset CaMeL Encoder != null ) { sb . append ( $STRING$ ) ;
rank: 369
score: 99.3113680752841
patch: case $STRING$ : sb . append ( ( ( String ) output CaMeL Charset CaMeL Encoder . to CaMeL String ( c ) ) . to CaMeL String ( ) ) ;
rank: 369
score: 99.29314422607422
patch: case $STRING$ : if ( sb . length ( ) == 0 ) break ;
rank: 369
score: 99.22208404541016
patch: case TRUE : sb . append ( $STRING$ ) ; break ; case $STRING$ :
rank: 370
score: 99.406337890625
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; case $STRING$ : sb . append ( backslash CaMeL Escape ) ;
rank: 370
score: 99.33609811883224
patch: sb . append ( $STRING$ ) ; break ; } else sb . append ( $STRING$ ) ;
rank: 370
score: 99.29303656684027
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; ; break ; $STRING$ ;
rank: 370
score: 99.28321838378906
patch: case $STRING$ : case $STRING$ + sb . append ( $STRING$ ) ; break ;
rank: 370
score: 99.2220687866211
patch: case ( $STRING$ : sb . append ( backslash CaMeL Escape ) ; break ;
rank: 371
score: 99.33582979090073
patch: case $STRING$ : return $STRING$ ; } sb . append ( $STRING$ ) ; break ;
rank: 371
score: 99.33100043402777
patch: case $STRING$ : sb . append ( c ) ; break ; case $STRING$ : System .
rank: 371
score: 99.28276062011719
patch: case $STRING$ : return $STRING$ ; sb . append ( $STRING$ ) ; break ;
rank: 372
score: 99.40615609975961
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ; else sb . append ( $STRING$ ) ;
rank: 372
score: 99.39527271412037
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( $STRING$ ) ) . append ( $STRING$ ) ; break ;
rank: 372
score: 99.36778041294643
patch: case $STRING$ : sb . append ( c ) ; return sb . to CaMeL String ( ) ; }
rank: 372
score: 99.35726768092105
patch: case $STRING$ : sb . append ( s . . char CaMeL At ( i ) ) ;
rank: 372
score: 99.33578491210938
patch: case $STRING$ : sb . append ( $STRING$ ) ; iterator . append ( c ) ; break ;
rank: 372
score: 99.28193359375
patch: case $STRING$ : sb . append ( $STRING$ ) ; continue ; break ;
rank: 372
score: 99.22177956321023
patch: case $STRING$ : s . append ( $STRING$ ) ;
rank: 373
score: 99.40605236235119
patch: case $STRING$ : sb . append ( $STRING$ ) ; } else { sb . append ( $STRING$ ) ;
rank: 373
score: 99.39525390625
patch: case $STRING$ : sb . append ( Character . to CaMeL Char CaMeL Array ( $STRING$ ) ) . append ( $STRING$ ) ;
rank: 373
score: 99.36763080797698
patch: case $STRING$ : break ; default : throw new Null CaMeL Pointer CaMeL Exception ( ) ; }
rank: 373
score: 99.3105977376302
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( s . str CaMeL Escape ) ; break ;
rank: 374
score: 99.40605024857955
patch: case $STRING$ : sb . append ( ( s . char CaMeL At ( i ) + $NUMBER$ ) ) ;
rank: 374
score: 99.39473470052083
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) . append ( $STRING$ ) . append ( $STRING$ ) ;
rank: 374
score: 99.36745733963816
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; default : sb . ; }
rank: 374
score: 99.33080182756696
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append ( $STRING$ ) ; }
rank: 374
score: 99.29170057508681
patch: case $STRING$ : if ( break 0 : sb . append ( $STRING$ ) ; break ;
rank: 374
score: 99.28178405761719
patch: case 1 : sb . append ( $STRING$ ) ; break ; case ) ;
rank: 374
score: 99.22144426618304
patch: case $STRING$ : sb . append ( ( String ) c ) ;
rank: 375
score: 99.40599229600694
patch: case $STRING$ : sb . append ( s . append ( backslash CaMeL Escape ) ) ;
rank: 375
score: 99.39450073242188
patch: case $STRING$ : sb . append ( $STRING$ ) ; return sb . to CaMeL String ( ) . trim ( ) ;
rank: 375
score: 99.36702473958333
patch: case $STRING$ : sb . append ( Integer . to CaMeL String ( c ) ) ; ; break ;
rank: 375
score: 99.35621226917614
patch: case $STRING$ : sb . append ( $STRING$ ) ; false ; sb . append ( backslash CaMeL Escape ) ;
rank: 375
score: 99.33556518554687
patch: case $STRING$ : sb . append ( $STRING$ ) ; chars . append ( $STRING$ ) ; break ;
rank: 375
score: 99.30995244565217
patch: case $STRING$ : sb . append ( ( char ) s . char CaMeL At ( i ) ) ; break ;
rank: 375
score: 99.29165649414062
patch: case $STRING$ : $STRING$ : { sb . append ( $STRING$ ) ; break ;
rank: 375
score: 99.22134164663461
patch: case $STRING$ : sb . append ( $STRING$ ) ; ) ;
rank: 376
score: 99.40589735243056
patch: case $STRING$ : sb . append ( ( char ) ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) ) ;
rank: 376
score: 99.39448073814656
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) . char CaMeL At ( i ) ) ; break ;
rank: 376
score: 99.36698833264802
patch: case Integer . MIN : sb . append ( $STRING$ ) ; break ; default : break ;
rank: 376
score: 99.30990600585938
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder , sb ) ;
rank: 376
score: 99.29086642795139
patch: case $STRING$ : break ; case $STRING$ : sb . append ( $NUMBER$ ) ; break ;
rank: 376
score: 99.28176879882812
patch: } break ; case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 376
score: 99.22132873535156
patch: case $STRING$ : sb . append ( ( ( char ) c ) ) ;
rank: 377
score: 99.40583881578948
patch: case $STRING$ : sb . append ( c ) ; { sb . append ( c ) ;
rank: 377
score: 99.3664615028783
patch: default : sb . append ( $STRING$ ) ; } } sb . append ( $STRING$ ) ;
rank: 377
score: 99.3560562133789
patch: case $STRING$ : sb . append ( $STRING$ ) : break ; case $STRING$ :
rank: 377
score: 99.330595703125
patch: case $STRING$ : String CaMeL Builder sb = new String CaMeL Builder ( s . char CaMeL At ( i ) ) ; }
rank: 377
score: 99.29086483226104
patch: case $STRING$ : return sb . append ( $STRING$ ) ; break ; case $STRING$ :
rank: 377
score: 99.22123887803819
patch: case $STRING$ : s . append ( $STRING$ ) ; sb . append ( $STRING$ ) ;
rank: 378
score: 99.3942401592548
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( $STRING$ ) ) . append ( $STRING$ ) ; }
rank: 378
score: 99.36605495876736
patch: default : sb . append ( $STRING$ ) ; } sb . append ( $STRING$ ) ;
rank: 378
score: 99.35605256453805
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( doublequote CaMeL Escape , $STRING$ ) ;
rank: 378
score: 99.3095703125
patch: case $STRING$ : sb . append ( $STRING$ ) ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c ) ; }
rank: 378
score: 99.29073333740234
patch: case $STRING$ : try { { sb . append ( $STRING$ ) ; break ;
rank: 378
score: 99.22119140625
patch: case ERROR : sb . append ( $STRING$ ) ; break ; case $STRING$ :
rank: 379
score: 99.40576171875
patch: case $STRING$ : sb . append ( sb . append ( s . char CaMeL At ( i ) ) ) ; break ;
rank: 379
score: 99.39421735491071
patch: case $STRING$ : System . out . println ( $STRING$ ) ; sb . append ( $STRING$ ) ; }
rank: 379
score: 99.3660529641544
patch: case $STRING$ : sb . append ( $STRING$ ; break ; default : break ; }
rank: 379
score: 99.33498806423611
patch: case Token . $STRING$ : case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 379
score: 99.33050944010417
patch: case $STRING$ : String CaMeL Builder sb = new String CaMeL Builder ( s . char CaMeL At ( i ) . to CaMeL String ( ) ) ;
rank: 379
score: 99.309541015625
patch: case $STRING$ : sb . append ( quote ) ; break ; case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 379
score: 99.28107158954327
patch: case 1 ; sb . append ( $STRING$ ) ; break ;
rank: 379
score: 99.22118030894886
patch: case NOT : sb . append ( $STRING$ ) ;
rank: 380
score: 99.40575561523437
patch: case $STRING$ : output CaMeL Charset CaMeL Encoder . append ( sb . append ( c ) ) ;
rank: 380
score: 99.39417521158855
patch: case $STRING$ : { sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; break ; }
rank: 380
score: 99.36597397748162
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( ) ; break ;
rank: 380
score: 99.33498247931985
patch: case 0 : sb . append ( $STRING$ ) ; break ; } break ; }
rank: 380
score: 99.30940515854779
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( backslash CaMeL Escape . to CaMeL String ( ) ) ;
rank: 380
score: 99.22116088867188
patch: n = s . char CaMeL At ( i ) ; switch ( c )
rank: 381
score: 99.40565557065217
patch: case $STRING$ : sb . append ( ( ( char ) s . char CaMeL At ( i ) ) ) ;
rank: 381
score: 99.39405459449405
patch: case $STRING$ : { sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ;
rank: 381
score: 99.36557345920139
patch: case 0 : sb . append ( $STRING$ ) ; break ; default : break ; }
rank: 381
score: 99.35546264648437
patch: case $STRING$ : sb . append ( quote ) + $STRING$ : sb . append ( $STRING$ ) ;
rank: 381
score: 99.33460083007813
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( c ) ; } }
rank: 381
score: 99.30939850983796
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( backslash CaMeL Escape ) ; sb . append ( c ) ;
rank: 381
score: 99.29027602251838
patch: case $STRING$ : if ( $STRING$ . length ( ) > 1 ) { break ;
rank: 381
score: 99.22109750600961
patch: int c = s . char CaMeL At ( i ) ;
rank: 382
score: 99.40522904829545
patch: case $STRING$ : sb . append ( ( s . char CaMeL At ( i ) ) + $STRING$ ) ;
rank: 382
score: 99.36554918791118
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) ; ; break ;
rank: 382
score: 99.3343441611842
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; else sb . break ; }
rank: 382
score: 99.30908203125
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( backslash CaMeL Escape . to CaMeL String ( $STRING$ ) ) ;
rank: 382
score: 99.22083875868056
patch: case $STRING$ : sb . append ( ( int ) ( backslash CaMeL Escape ) ) ;
rank: 383
score: 99.404951171875
patch: case $STRING$ : sb . append ( quote ) ; sb . append ( $STRING$ ) . append ( backslash CaMeL Escape ) ;
rank: 383
score: 99.39397321428571
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ; sb . append ( $STRING$ ) ; }
rank: 383
score: 99.33405412946429
patch: case 1 : sb . append ( $STRING$ ) ; } break ;
rank: 383
score: 99.29003188189338
patch: $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : break ;
rank: 383
score: 99.28009502704327
patch: case $STRING$ ] sb . append ( $STRING$ ) ; break ;
rank: 383
score: 99.22062174479167
patch: case $STRING$ : sb . append ( $STRING$ ) || sb . append ( $STRING$ ) ;
rank: 384
score: 99.40474018297698
patch: case $STRING$ : else sb . append ( s . char CaMeL At ( i ) ) ;
rank: 384
score: 99.39396421370968
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( c ) . to CaMeL Lower CaMeL Case ( ) ; break ;
rank: 384
score: 99.36526150173611
patch: case Character . $STRING$ : case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 384
score: 99.35528885690789
patch: case $STRING$ : String CaMeL Builder sb = new String CaMeL Builder ( s , c ) ;
rank: 384
score: 99.33349609375
patch: case $STRING$ : sb . append ( $STRING$ ) . char CaMeL Value ( ) ; break ;
rank: 384
score: 99.3295147235577
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( s . char CaMeL At ( i ) ) ; }
rank: 384
score: 99.3089266690341
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( output CaMeL Charset CaMeL Encoder ) ) ;
rank: 384
score: 99.28981646369485
patch: case $STRING$ : return sb . append ( $STRING$ ) ; break ; } break ;
rank: 384
score: 99.27977701822917
patch: case 1 : sb . append ( $STRING$ ) ; break ; $NUMBER$ ;
rank: 385
score: 99.40458540482955
patch: case $STRING$ : output CaMeL Charset CaMeL Encoder . append ( sb . append ( $STRING$ ) ) ; break ;
rank: 385
score: 99.3939453125
patch: case $STRING$ : if ( Character . is CaMeL Upper CaMeL Case ( c ) ) { sb . append ( $STRING$ ) ;
rank: 385
score: 99.36517888849431
patch: case $STRING$ : sb . append ( Character . to CaMeL Char CaMeL Array ( c ) ) ; ; }
rank: 385
score: 99.3551254272461
patch: case $STRING$ : sb . append ( $STRING$ + doublequote CaMeL Escape ) ;
rank: 385
score: 99.32947495404412
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; * / break ;
rank: 385
score: 99.30884552001953
patch: case $STRING$ : sb . append ( ( ( String ) output CaMeL Charset CaMeL Encoder . to CaMeL String ( ) ) . to CaMeL String ( ) ) ;
rank: 385
score: 99.28973747702206
patch: case 1 : sb . append ( $STRING$ ) ; break ; break ; break ;
rank: 385
score: 99.27969563802084
patch: case $STRING$ ; sb . append ( $STRING$ ) ; break ; break ;
rank: 385
score: 99.21996392144098
patch: case NOT : sb . append ( backslash CaMeL Escape ) ; break ; case $STRING$ :
rank: 386
score: 99.3938220796131
patch: case STRING : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( c ) ;
rank: 386
score: 99.36513671875
patch: case $STRING$ : if ( $STRING$ . equals ( $STRING$ ) ) sb . append ( $STRING$ ) ;
rank: 386
score: 99.33326480263158
patch: while ( sb . equals ( $STRING$ ) ) sb . append ( $STRING$ ) ; break ;
rank: 386
score: 99.32925309806035
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) && output CaMeL Charset CaMeL Encoder . can CaMeL Encode (
rank: 386
score: 99.2895736694336
patch: case $STRING$ : return ( sb . append ( $STRING$ ) ) ; break ;
rank: 386
score: 99.2791976928711
patch: case 1 : sb . append ( $STRING$ ) . append ( $STRING$ ) ;
rank: 386
score: 99.21978759765625
patch: case $STRING$ : sb . append ( ( char ) ( backslash CaMeL Escape ) ) ;
rank: 387
score: 99.40412703804348
patch: case $STRING$ : sb . append ( sb . append ( $STRING$ ) ) ; sb . append ( $STRING$ ) ;
rank: 387
score: 99.393798828125
patch: case $STRING$ : return s . char CaMeL At ( i ) ; case $STRING$ : return s . char CaMeL At ( i ) ;
rank: 387
score: 99.36512586805556
patch: case $STRING$ : case $STRING$ : sb . append ( $STRING$ ) ; break ; default :
rank: 387
score: 99.35492706298828
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( sb ) ;
rank: 387
score: 99.3331787109375
patch: else sb . append ( $STRING$ ) ; break ; } break ; }
rank: 387
score: 99.30859375
patch: case $STRING$ : sb . append ( $STRING$ ) ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( backslash CaMeL Escape ) ; break ;
rank: 387
score: 99.28919893152573
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; ; return $STRING$ ;
rank: 387
score: 99.21955422794117
patch: case - 1 : sb . append ( $STRING$ ) ; break ; case $STRING$ :
rank: 388
score: 99.393115234375
patch: case $STRING$ : break ; case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ;
rank: 388
score: 99.3650790127841
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; return ;
rank: 388
score: 99.35485309103261
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : sb . append ( 1 ) ;
rank: 388
score: 99.32920143821023
patch: case $STRING$ : sb . append ( $STRING$ ) ; System . sb . append ( $STRING$ ) ; break ;
rank: 388
score: 99.30849783761161
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , $STRING$ ) ;
rank: 388
score: 99.278466796875
patch: case $NUMBER$ case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 388
score: 99.21953938802083
patch: break ; case $STRING$ : sb . append ( quote ) ; break ;
rank: 389
score: 99.40364837646484
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) ;
rank: 389
score: 99.39305530894886
patch: case DEFAULT : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ; break ;
rank: 389
score: 99.36497667100694
patch: case $STRING$ : continue ; default : sb . append ( $STRING$ ) ; break ; }
rank: 389
score: 99.33240424262152
patch: break . append ( $STRING$ ) ; } sb . append ( $STRING$ ) ; break ;
rank: 389
score: 99.329140625
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; break ; * /
rank: 389
score: 99.30839399857955
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; sb . append ( $STRING$ ) ; continue ;
rank: 389
score: 99.2890625
patch: case $STRING$ : System . ; sb . append ( $STRING$ ) ; break ; $STRING$ ;
rank: 389
score: 99.21923065185547
patch: case STRING : sb . append ( $STRING$ ) ; break ; case $STRING$ :
rank: 390
score: 99.39303588867188
patch: break ; case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ; break ;
rank: 390
score: 99.3646484375
patch: case $STRING$ : sb . append ( Character . to CaMeL Hex CaMeL String ( $STRING$ ) ) ;
rank: 390
score: 99.35465140964673
patch: case $STRING$ : sb . append ( $STRING$ ) ; break . case $STRING$ : sb . append ( $STRING$ ) ;
rank: 390
score: 99.33167860243056
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( true ) ; break ;
rank: 390
score: 99.30837890625
patch: case $STRING$ : sb . append ( $STRING$ ) ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb ) ; }
rank: 390
score: 99.28888702392578
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; return break ;
rank: 390
score: 99.21829044117646
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; null ; break ;
rank: 391
score: 99.40301513671875
patch: case $STRING$ : sb . append ( c . char CaMeL At ( i ) ) ;
rank: 391
score: 99.3642642372533
patch: case $STRING$ : sb . append ( $STRING$ ) ; } sb . append ( s ) ;
rank: 391
score: 99.35459206321023
patch: case $STRING$ : sb . append ( $STRING$ ) :
rank: 391
score: 99.30829535590277
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb ) ; }
rank: 391
score: 99.27777458639706
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; s = $STRING$ ;
rank: 391
score: 99.21827110877403
patch: byte c = s . char CaMeL At ( i ) ;
rank: 392
score: 99.40268776633523
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( backslash CaMeL Escape ) ; } }
rank: 392
score: 99.3928973858173
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) . trim ( ) ) ; break ;
rank: 392
score: 99.36420232599431
patch: case Char CaMeL Sequence . ) : sb . append ( $STRING$ ) ; break ; default : break ; }
rank: 392
score: 99.35428659539474
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( ( String ) c ) ;
rank: 392
score: 99.28843180338542
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; break ; break ; } break ;
rank: 392
score: 99.27774047851562
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; break ; case ) ;
rank: 392
score: 99.21759711371527
patch: case $STRING$ : sb . append ( backslash CaMeL Escape , ( char ) quote ) ;
rank: 393
score: 99.40237862723214
patch: case $STRING$ : sb . append ( quote ) . append ( $STRING$ ) . append ( c ) ;
rank: 393
score: 99.39285714285714
patch: case $STRING$ : sb . append ( Character . to CaMeL Char CaMeL Array ( ) ) ; break ;
rank: 393
score: 99.36408081054688
patch: default : sb . append ( $STRING$ ) ; sb . append ( $STRING$ ) ; break ; }
rank: 393
score: 99.35422585227273
patch: case $STRING$ + $STRING$ : sb . append ( $STRING$ ) ; sb . append ( backslash CaMeL Escape ) ;
rank: 393
score: 99.33125574448529
patch: case $STRING$ : sb . append ( $STRING$ ) ; end ( ) ; break ;
rank: 393
score: 99.32806687127976
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , sb ) ; break ;
rank: 393
score: 99.3076107627467
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String ( ) ) ;
rank: 393
score: 99.28814697265625
patch: case $STRING$ : System . out . println ( $STRING$ ) ; break ; ;
rank: 393
score: 99.27767740885416
patch: case 0 : try { sb . append ( $STRING$ ) ; break ;
rank: 394
score: 99.40199279785156
patch: case $STRING$ : sb . append ( sb . append ( quote ) ) ;
rank: 394
score: 99.3541259765625
patch: case $STRING$ + $STRING$ : break ; case $STRING$ : sb . append ( $STRING$ ) ;
rank: 394
score: 99.33091735839844
patch: append ( sb . to CaMeL Lower CaMeL Case ( ) ) ; break ;
rank: 394
score: 99.2880108173077
patch: case $STRING$ : sb . append ( sb ) ; break ;
rank: 394
score: 99.21737331814236
patch: case $STRING$ : sb . append ( s . substring ( 0 , i ) ) ;
rank: 395
score: 99.40193684895833
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ; break ; ,
rank: 395
score: 99.392744140625
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( ) ) . append ( $STRING$ ) ; }
rank: 395
score: 99.36384721235795
patch: case Integer . MIN _ VALUE : case Integer . MIN _ VALUE : sb . append ( $STRING$ ) ;
rank: 395
score: 99.35335047104779
patch: case $STRING$ + c . length ( ) : sb . append ( $STRING$ ) ;
rank: 395
score: 99.33083089192708
patch: break . to CaMeL String ( ) ; } } sb . append ( $STRING$ ) ;
rank: 395
score: 99.3074618252841
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( $STRING$ ) ; }
rank: 395
score: 99.28761201746323
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( sb ; break ;
rank: 395
score: 99.276611328125
patch: case case $STRING$ : sb . append ( $STRING$ ) ; break ; break ;
rank: 395
score: 99.21729871961806
patch: case 1 : sb . append ( backslash CaMeL Escape ) ; break ; case $STRING$ :
rank: 396
score: 99.401904296875
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; break ; case $STRING$ : sb . append ( quote ) ;
rank: 396
score: 99.39255981445312
patch: case $STRING$ : s . append ( Character . to CaMeL Char CaMeL Array ( c ) ) ;
rank: 396
score: 99.36382092927632
patch: default : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ;
rank: 396
score: 99.35329367897727
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else {
rank: 396
score: 99.33056640625
patch: sb . append ( $STRING$ ) . append ( sb . length ( ) ) ; }
rank: 396
score: 99.32699092741936
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c ) ;
rank: 396
score: 99.28719753689236
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $NUMBER$ ; break ;
rank: 396
score: 99.27638462611607
patch: case $STRING$ + sb . to CaMeL String ( ) ; break ;
rank: 396
score: 99.21718462775735
patch: case $STRING$ : sb . append ( $STRING$ ) ; c = backslash CaMeL Escape ;
rank: 397
score: 99.35306125217014
patch: case $STRING$ : sb . append ( $STRING$ + sb . append ( $STRING$ ) ) ;
rank: 397
score: 99.33000102796052
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( s ) ; break ; }
rank: 397
score: 99.32694185697116
patch: if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append ( quote ) ; break ;
rank: 397
score: 99.3072410789696
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ;
rank: 397
score: 99.27622357536765
patch: case 0 : sb . append ( $STRING$ ) ; break ; ; case $NUMBER$ :
rank: 397
score: 99.21691080729167
patch: case $STRING$ : $STRING$ : sb . append ( backslash CaMeL Escape ) ;
rank: 398
score: 99.4016644021739
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; if ( output CaMeL Charset CaMeL Encoder != null )
rank: 398
score: 99.39222476356908
patch: case $STRING$ : if ( Character . is CaMeL Whitespace ( c ) ) { break ; }
rank: 398
score: 99.36353648792614
patch: case Token . $STRING$ : sb . append ( $STRING$ ) ; sb . append ( c ) ; break ;
rank: 398
score: 99.35301672894022
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( ( char ) backslash CaMeL Escape ) ;
rank: 398
score: 99.329638671875
patch: else sb . append ( $STRING$ ) ; break ; } } sb . append ( $STRING$ ) ;
rank: 398
score: 99.32674153645833
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : String double@@
rank: 398
score: 99.3068096454327
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String ( ) ) ; }
rank: 398
score: 99.2869121844952
patch: case $NUMBER$ : sb . append ( $NUMBER$ ) ; break ;
rank: 398
score: 99.27611541748047
patch: case 1 : sb . append ( $STRING$ ) ; return $STRING$ ; break ;
rank: 398
score: 99.21676199776786
patch: case $STRING$ : sb . append ( $STRING$ [ i ] ) ;
rank: 399
score: 99.401630859375
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; break ; case $STRING$
rank: 399
score: 99.36339721679687
patch: case Token . $STRING$ : sb . append ( $STRING$ ) ; break ; default : break ; }
rank: 399
score: 99.35268332741477
patch: case $STRING$ : sb . append ( $STRING$ ) ; false : sb . append ( backslash CaMeL Escape ) ;
rank: 399
score: 99.32949347245066
patch: case $STRING$ : sb . append ( sb . to CaMeL String ( ) ) ; continue ;
rank: 399
score: 99.30672481142241
patch: case $STRING$ : sb . append ( $STRING$ ) ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c , doublequote CaMeL Escape ) ;
rank: 399
score: 99.27492388556985
patch: case $STRING$ : sb . append ( sb . char CaMeL Value ( ) ) ;
rank: 400
score: 99.40152090567129
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( sb . char CaMeL At ( i ) ) . append ( ) ;
rank: 400
score: 99.39159138997395
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; break ; break ;
rank: 400
score: 99.35264078776042
patch: case $STRING$ : sb . append ( $STRING$ ) ; System . append ( $STRING$ ) ;
rank: 400
score: 99.32906494140624
patch: case $STRING$ + sb . append ( $STRING$ ) ; sb . append ( $STRING$ ) ; break ;
rank: 400
score: 99.30562046595982
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { sb . append ( $STRING$ ) ; break ;
rank: 400
score: 99.28630514705883
patch: case $STRING$ : System . out . println ( $STRING$ + break ) ; break ;
rank: 400
score: 99.2746810913086
patch: case Character . $STRING$ : { sb . append ( $STRING$ ) ; break ;
rank: 400
score: 99.21634250217014
patch: switch ( backslash CaMeL Escape ) { case $STRING$ : sb . append ( quote ) ;
rank: 401
score: 99.40117797851562
patch: case $STRING$ : sb . append ( output CaMeL Charset ) ; sb . append ( $STRING$ ) ;
rank: 401
score: 99.39156668526786
patch: case $STRING$ : if ( Character . is CaMeL Upper CaMeL Case ( c ) ) { break ; }
rank: 401
score: 99.36296735491071
patch: case Char CaMeL Sequence . STRING : sb . append ( $STRING$ ) ; break ; default : break ;
rank: 401
score: 99.32869037828948
patch: case $STRING$ : sb . append ( $STRING$ ) ; iterator . close ( ) ; break ;
rank: 401
score: 99.326201171875
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) . append ( quote ) ; break ;
rank: 401
score: 99.30548858642578
patch: case $STRING$ : sb . append ( ( String ) c ) ; break ;
rank: 401
score: 99.28591739430146
patch: case $STRING$ : sb . append ( $STRING$ ) ; { break ; } break ;
rank: 401
score: 99.21629423253677
patch: case String CaMeL Buffer . $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 402
score: 99.40113467261905
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; return sb . append ( $STRING$ ) ;
rank: 402
score: 99.39141167534723
patch: case $STRING$ : sb . append ( Character . abs ( c ) ) ; break ;
rank: 402
score: 99.32859892003677
patch: sb . append ( $STRING$ ) ; } else sb . append ( $STRING$ ) ;
rank: 402
score: 99.32619310461956
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation (
rank: 402
score: 99.3053337545956
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , s ) ;
rank: 402
score: 99.28563735064338
patch: case $STRING$ : System . out . println ( $STRING$ + $STRING$ ) ; break ;
rank: 402
score: 99.21622721354167
patch: case $STRING$ : if ( s . char CaMeL At ( i ) == $STRING$ ) {
rank: 403
score: 99.4010593580163
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; break ; case $STRING$
rank: 403
score: 99.3623046875
patch: case $STRING$ : break ; default : sb . append ( $STRING$ ) ; break ; } }
rank: 403
score: 99.32815712376645
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( n ) ; }
rank: 403
score: 99.32603870738636
patch: case $STRING$ : break ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; }
rank: 403
score: 99.21620178222656
patch: case $STRING$ : return sb . to CaMeL String ( ) ; case $STRING$ :
rank: 404
score: 99.40100678943452
patch: case $STRING$ : sb . append ( c ) ; sb . append ( backslash CaMeL Escape ) ; }
rank: 404
score: 99.36227077907986
patch: case $STRING$ : throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ + c ) ; }
rank: 404
score: 99.35090467664931
patch: case $STRING$ : System . break ; case $STRING$ : sb . append ( $STRING$ ) ;
rank: 404
score: 99.32813439002403
patch: case $STRING$ : sb . append ( $STRING$ ) ; } else
rank: 404
score: 99.28443908691406
patch: case $STRING$ : { sb . append ( $STRING$ ) ; break ; $STRING$ ;
rank: 404
score: 99.27360534667969
patch: case $STRING$ : sb . append ( $STRING$ ) ; return $STRING$ + break ;
rank: 404
score: 99.21591186523438
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; case $STRING$ :
rank: 405
score: 99.40081155711206
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; sb . append ( $STRING$ ) . append ( output CaMeL Charset CaMeL Encoder ) ;
rank: 405
score: 99.39111328125
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) . char CaMeL At ( i ) ) ; }
rank: 405
score: 99.35082329644098
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( name ) ;
rank: 405
score: 99.3258640455163
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; / *
rank: 405
score: 99.21571858723958
patch: return backslash CaMeL Escape ; case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 406
score: 99.40078125
patch: case $STRING$ : sb . append ( sb . char CaMeL At ( i ) ) . append ( $STRING$ ) ; break ;
rank: 406
score: 99.35007546164773
patch: case $STRING$ : sb . append ( 1 ) ;
rank: 406
score: 99.32784873560855
patch: case $STRING$ + sb . substring ( $STRING$ . length ( ) - 1 ) ; break ;
rank: 406
score: 99.32535226004464
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) )
rank: 406
score: 99.30302429199219
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( s ) ;
rank: 406
score: 99.2838134765625
patch: case $STRING$ : sb . append ( $STRING$ + 0 ) ; break ;
rank: 406
score: 99.27342936197917
patch: case $NUMBER$ : { sb . append ( $STRING$ ) ; break ; }
rank: 407
score: 99.40076214334239
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( c ) . append ( $STRING$ ) ;
rank: 407
score: 99.39093424479167
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) . append ( $STRING$ ) . to CaMeL Lower CaMeL Case ( ) ; }
rank: 407
score: 99.36202566964286
patch: default : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; } }
rank: 407
score: 99.32722778320313
patch: case $STRING$ : sb . append ( $STRING$ ) . to CaMeL String ( ) ; break ; }
rank: 407
score: 99.30294363839286
patch: case $STRING$ : sb . append ( $STRING$ ) ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( backslash CaMeL Escape , c ) ;
rank: 407
score: 99.2836181640625
patch: case $STRING$ : sb . append ( 0 ) ; break ; $STRING$ ;
rank: 407
score: 99.2731689453125
patch: case $STRING$ ; sb . append ( $STRING$ ) ; break ; $STRING$ ;
rank: 407
score: 99.21494140625
patch: $STRING$ . append ( backslash CaMeL Escape ) ; break ; case $STRING$ :
rank: 408
score: 99.40050252278645
patch: case $STRING$ : if ( this . output CaMeL Charset CaMeL Encoder != null ) { sb . append ( $STRING$ ) ;
rank: 408
score: 99.3908447265625
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( Character . to CaMeL Char CaMeL Array ( c ) ) . append ( $STRING$ ) ;
rank: 408
score: 99.36179070723684
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; default : break ; ; }
rank: 408
score: 99.32719152113971
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; ++ i ; }
rank: 408
score: 99.30271693638393
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , $STRING$ ) ;
rank: 408
score: 99.27312469482422
patch: case 1 : sb . append ( sb . append ( $STRING$ ) ) ;
rank: 408
score: 99.21471228966347
patch: case $STRING$ : sb . append ( $STRING$ , $STRING$ ) ;
rank: 409
score: 99.40021623883929
patch: case $STRING$ : if ( ! output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append ( c ) ;
rank: 409
score: 99.39055524553571
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; }
rank: 409
score: 99.36168619791667
patch: case $STRING$ : sb . append ( c ) ; break ; break ;
rank: 409
score: 99.34978485107422
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , $STRING$ ) ;
rank: 409
score: 99.32696174172794
patch: append ( sb . to CaMeL String ( ) , $STRING$ ) ; break ; }
rank: 409
score: 99.30271629050925
patch: String CaMeL Builder sb = new String CaMeL Builder ( s . length ( ) + $NUMBER$ ) ; sb . append ( $STRING$ ) ;
rank: 409
score: 99.28303527832031
patch: append ( $STRING$ ) ; break ;
rank: 409
score: 99.27303059895833
patch: case $STRING$ : sb . append ( $STRING$ ) ; { break ; ;
rank: 409
score: 99.21446397569444
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( char ) ;
rank: 410
score: 99.40018920898437
patch: case $STRING$ : try { sb . append ( sb . char CaMeL At ( i ) ) ;
rank: 410
score: 99.39028098366477
patch: case LINE : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; break ;
rank: 410
score: 99.3616714477539
patch: default : sb . append ( $STRING$ ) ; break ; } } break ;
rank: 410
score: 99.34973725818452
patch: case $STRING$ : sb . append ( $STRING$ ) ; case $STRING$ : sb . append ( $STRING$ ) ;
rank: 410
score: 99.32664271763393
patch: } else { sb . append ( $STRING$ ) ; break ; }
rank: 410
score: 99.32478841145833
patch: case 1 : String CaMeL Builder sb = new String CaMeL Builder ( s . char CaMeL At ( i ) ) ;
rank: 410
score: 99.28299967447917
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb ; break ;
rank: 410
score: 99.27283477783203
patch: case Token . $STRING$ : { sb . append ( $STRING$ ) ; break ;
rank: 410
score: 99.21443314985795
patch: case $NUMBER$ : sb . append ( c ) ;
rank: 411
score: 99.4
patch: case $STRING$ : if ( backslash CaMeL Escape . can CaMeL Encode ( c ) ) { sb . append ( c ) ;
rank: 411
score: 99.39018419053819
patch: case $STRING$ : break ; default : return sb . to CaMeL String ( ) ; }
rank: 411
score: 99.36161295572917
patch: case $STRING$ : sb . append ( ; sb . append ( $STRING$ ) ; break ;
rank: 411
score: 99.32635498046875
patch: sb . append ( $STRING$ ) ; }
rank: 411
score: 99.30246988932292
patch: case $STRING$ : sb . append ( backslash CaMeL Escape , $STRING$ ) ; sb . append ( $STRING$ ) ; break ;
rank: 411
score: 99.27278900146484
patch: case $STRING$ : { sb . append ( $STRING$ ) ; break ; ; }
rank: 411
score: 99.2143913717831
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; backslash CaMeL Escape ;
rank: 412
score: 99.399951171875
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) ; sb . append ( backslash CaMeL Escape ) ;
rank: 412
score: 99.32588500976563
patch: break . append ( $STRING$ ) . append ( sb . to CaMeL String ( ) ) ; }
rank: 412
score: 99.32410606971153
patch: case $STRING$ : sb . append ( $STRING$ ) ; } sb . append ( s . char CaMeL At ( i ) ) ;
rank: 412
score: 99.28240966796875
patch: case $NUMBER$ : String sb = $STRING$ ; sb . append ( $STRING$ ) ; break ;
rank: 412
score: 99.21416877297794
patch: line = sb . char CaMeL At ( i ) ; switch ( c ) {
rank: 413
score: 99.38970703125
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( c ) . trim ( ) ;
rank: 413
score: 99.34907863451087
patch: case $STRING$ : String CaMeL Builder sb = new String CaMeL Builder ( ) ; sb . append ( quote ) ;
rank: 413
score: 99.32584635416667
patch: sb . append ( $STRING$ ) ; } else sb . append ( $STRING$ ) ; }
rank: 413
score: 99.323974609375
patch: case $STRING$ : sb . append ( $STRING$ ) ; System . out . append ( backslash CaMeL Escape ) ;
rank: 413
score: 99.30218670819256
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder ) ; sb . append ( c ) ;
rank: 413
score: 99.27127075195312
patch: case $STRING$ : sb . append ( $STRING$ ) ; case $STRING$ ; break ;
rank: 413
score: 99.21372633713942
patch: case c : sb . append ( backslash CaMeL Escape ) ;
rank: 414
score: 99.38951822916667
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ;
rank: 414
score: 99.36103959517045
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) ; break ; default : break ;
rank: 414
score: 99.32566528320312
patch: sb . append ( $STRING$ ) ; case 1 : sb . append ( $STRING$ ) ; break ;
rank: 414
score: 99.32327974759616
patch: case FALSE : sb . append ( $STRING$ ) ; break ;
rank: 414
score: 99.28134591238839
patch: case $STRING$ : break ; . append ( $STRING$ ) ; break ;
rank: 414
score: 99.27103424072266
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; - $NUMBER$ ;
rank: 414
score: 99.21360270182292
patch: case $STRING$ : $STRING$ . append ( backslash CaMeL Escape ) ; break ; case $STRING$ :
rank: 415
score: 99.38939490685097
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( $STRING$ ) . append ( c ) ;
rank: 415
score: 99.3609260110294
patch: case $STRING$ : case $STRING$ : sb . append ( c ) ; break ; }
rank: 415
score: 99.3488132642663
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( s . append ( $STRING$ ) ) ;
rank: 415
score: 99.32558079769737
patch: case $STRING$ : break ; case $STRING$ : sb . append ( $STRING$ ) ; break ; }
rank: 415
score: 99.32245058001894
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : this . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ;
rank: 415
score: 99.28126356336806
patch: case $STRING$ : case $STRING$ : sb . append ( $STRING$ ) ; break ; $STRING$ ;
rank: 415
score: 99.2706787109375
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; 0 ;
rank: 415
score: 99.21358816964286
patch: case $STRING$ : sb . append ( ( byte ) c ) ;
rank: 416
score: 99.39908640008224
patch: case $STRING$ : sb . append ( backslash CaMeL Escape . length ( ) + $STRING$ ) ;
rank: 416
score: 99.38936157226563
patch: case STRING : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ;
rank: 416
score: 99.3606201171875
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; continue ;
rank: 416
score: 99.32516961348684
patch: case $STRING$ : sb . append ( $STRING$ ) ; } sb . append ( sb ) ;
rank: 416
score: 99.28125
patch: case ERROR : sb . append ( $STRING$ ) ; break ;
rank: 416
score: 99.27059733072916
patch: case $STRING$ : sb . append ( $STRING$ ) ; ; break ; ;
rank: 417
score: 99.39900346235795
patch: case $STRING$ : sb . append ( sb . char CaMeL At ( i ) ) ; break ; case $STRING$
rank: 417
score: 99.38865356445312
patch: case $STRING$ : sb . append ( $STRING$ ) ; System . out . println ( c ) ;
rank: 417
score: 99.36049517463235
patch: case $STRING$ : case $STRING$ ) : sb . append ( $STRING$ ) ; break ;
rank: 417
score: 99.34756071671195
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder != null && output CaMeL Charset CaMeL Encoder != null ) {
rank: 417
score: 99.32501627604167
patch: case 0 + 0 : sb . append ( $STRING$ ) ; break ;
rank: 417
score: 99.3015654592803
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder , c ) ; }
rank: 417
score: 99.28110758463542
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; break ; case $STRING$ :
rank: 417
score: 99.21356608072917
patch: b . append ( backslash CaMeL Escape ) ; break ; case $STRING$ :
rank: 418
score: 99.39897017045455
patch: case $STRING$ : sb . append ( $STRING$ ) ; output CaMeL Charset CaMeL Encoder . append ( $STRING$ ) ;
rank: 418
score: 99.38850911458333
patch: case $NUMBER$ : sb . append ( $STRING$ ) . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) . append ( $STRING$ ) ;
rank: 418
score: 99.3602294921875
patch: default : sb . append ( $STRING$ ) . append ( c ) ; break ; }
rank: 418
score: 99.32490370008681
patch: sb . append ( $STRING$ ) . append ( sb . trim ( ) ) ; }
rank: 418
score: 99.32225658275463
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( sb . char CaMeL At ( i ) ) ; break ;
rank: 418
score: 99.301513671875
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb ) ; break ;
rank: 418
score: 99.28070746527777
patch: case $NUMBER$ : break ; case 1 : sb . append ( $STRING$ ) ; break ;
rank: 418
score: 99.26976429332386
patch: case $STRING$ ; sb . append ( $STRING$ ) ;
rank: 418
score: 99.2135479266827
patch: case $STRING$ : sb . append ( charset ) ; break ;
rank: 419
score: 99.38838123139881
patch: case $STRING$ : sb . append ( $STRING$ ) ; System . out . println ( c ) ; }
rank: 419
score: 99.36005401611328
patch: case $STRING$ : case $STRING$ : sb . append ( s ) ; break ;
rank: 419
score: 99.32476485402961
patch: sb . append ( $STRING$ ) ; } sb . append ( $STRING$ ) ; break ; }
rank: 419
score: 99.32181222098214
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : sb . append ( (
rank: 419
score: 99.30112641433189
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; sb . append ( backslash CaMeL Escape ) ; sb . append ( $STRING$ ) ;
rank: 419
score: 99.28058624267578
patch: case Character . $STRING$ : sb . append ( $STRING$ ) ; break ; ;
rank: 419
score: 99.21345520019531
patch: case $STRING$ : $STRING$ . append ( $STRING$ ) ; break ; case $STRING$ :
rank: 420
score: 99.36002197265626
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( c ) ; continue ;
rank: 420
score: 99.34728285845588
patch: case $STRING$ : sb . to CaMeL String ( ) . append ( $STRING$ ) ;
rank: 420
score: 99.32159978693181
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { break ; }
rank: 420
score: 99.30060424804688
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( doublequote CaMeL Escape ) ) ;
rank: 420
score: 99.27999441964286
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; char
rank: 420
score: 99.2692401592548
patch: case EMPTY : sb . append ( $STRING$ ) ; break ;
rank: 420
score: 99.21343994140625
patch: case $STRING$ : sb . append ( $STRING$ ) [ i ] ;
rank: 421
score: 99.39863024259868
patch: case $STRING$ : { sb . append ( $STRING$ ) . append ( backslash CaMeL Escape ) ;
rank: 421
score: 99.38812255859375
patch: case Character . $STRING$ : sb . append ( $STRING$ ) . append ( c ) . append ( $STRING$ ) ; }
rank: 421
score: 99.35954846833882
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) . ; break ;
rank: 421
score: 99.34690856933594
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( value ) ;
rank: 421
score: 99.32423909505208
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) ; } }
rank: 421
score: 99.30015462239584
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . str CaMeL Escape ) ;
rank: 421
score: 99.27996419270833
patch: case $STRING$ : String ) sb . append ( $STRING$ ) ; break ;
rank: 421
score: 99.2689437866211
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; } continue ;
rank: 421
score: 99.21341959635417
patch: case ) { case $STRING$ : sb . append ( backslash CaMeL Escape ) ; break ;
rank: 422
score: 99.387939453125
patch: case $STRING$ : sb . append ( Character . to CaMeL Char CaMeL Array ( c ) ) . append ( $STRING$ ) ; }
rank: 422
score: 99.35950816761364
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) break ; }
rank: 422
score: 99.32366943359375
patch: sb . append ( $STRING$ ) . append ( sb . char CaMeL Value ( ) ) ; }
rank: 422
score: 99.29995492788461
patch: case $STRING$ : sb . append ( $STRING$ ) ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( $STRING$ ) ; break ;
rank: 422
score: 99.27995954241071
patch: case $STRING$ : sb . append ( $STRING$ ) ; return $NUMBER$ ;
rank: 422
score: 99.26851109095982
patch: / case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 422
score: 99.21329752604167
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; break ; case ) :
rank: 423
score: 99.39832763671875
patch: case $STRING$ : sb . append ( sb . char CaMeL At ( i ) ) ; } }
rank: 423
score: 99.38782319568452
patch: case NULL : sb . append ( $STRING$ ) . append ( c ) . append ( $STRING$ ) ;
rank: 423
score: 99.34590657552083
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , s , c ) ;
rank: 423
score: 99.32321346507354
patch: case $STRING$ ] : sb . append ( $STRING$ ) ; break ; } break ;
rank: 423
score: 99.3208759014423
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String ( ) ) ; }
rank: 423
score: 99.29932338169642
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ;
rank: 423
score: 99.27987670898438
patch: case $STRING$ : String ; { sb . append ( $STRING$ ) ; break ;
rank: 423
score: 99.2670654296875
patch: case 1 : sb . append ( $STRING$ ) ; break ; ) ;
rank: 423
score: 99.213134765625
patch: $STRING$ . append ( $STRING$ ) ; break ; case $STRING$ :
rank: 424
score: 99.38719985064338
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( $STRING$ ) ) . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ;
rank: 424
score: 99.3585205078125
patch: default : sb . append ( $STRING$ ) ; sb . append ( c ) ; break ;
rank: 424
score: 99.34559697690217
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String ( ) , c ) ; }
rank: 424
score: 99.3230842141544
patch: case $STRING$ ; case $STRING$ : sb . append ( $STRING$ ) ; break ; }
rank: 424
score: 99.3208240327381
patch: case $STRING$ : sb . append ( $STRING$ ) ; finally { sb . append ( $STRING$ ) ; }
rank: 424
score: 99.299296875
patch: case $STRING$ : return sb . to CaMeL String ( ) ; case $STRING$ : sb . append ( backslash CaMeL Escape ) ;
rank: 424
score: 99.26705932617188
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; break ; ; $STRING$ ;
rank: 424
score: 99.21286010742188
patch: case - $NUMBER$ : sb . append ( $STRING$ ) ;
rank: 425
score: 99.39815090013587
patch: case $STRING$ : sb . append ( char CaMeL At ( i ) ) ; sb . append ( $STRING$ ) ;
rank: 425
score: 99.3871561686198
patch: case $STRING$ : if ( $STRING$ . equals CaMeL Ignore CaMeL Case ( $STRING$ ) ) sb . append ( $STRING$ ) ;
rank: 425
score: 99.35840953480114
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( $STRING$ ) ) ; ; }
rank: 425
score: 99.32272518382354
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; else } break ;
rank: 425
score: 99.32070583767361
patch: case $STRING$ : ( ( char ) c ) . append ( $STRING$ ) ; break ;
rank: 425
score: 99.29917555588942
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( s ) ;
rank: 425
score: 99.27776336669922
patch: case $STRING$ : final $STRING$ ; sb . append ( $STRING$ ) ; break ;
rank: 425
score: 99.26705169677734
patch: case $STRING$ ; sb . append ( $STRING$ ) ; break ; case $STRING$ :
rank: 425
score: 99.2126823874081
patch: type = s . char CaMeL At ( i ) ; switch ( c ) {
rank: 426
score: 99.387099609375
patch: case $STRING$ : if ( $STRING$ . equals CaMeL Ignore CaMeL Case ( c ) ) { sb . append ( $STRING$ ) ;
rank: 426
score: 99.35792300575658
patch: case $STRING$ : sb . append ( Character . to CaMeL Chars ( c ) ) ; }
rank: 426
score: 99.29872233072916
patch: case $STRING$ : sb . append ( $STRING$ ) + c ; break ;
rank: 426
score: 99.27740478515625
patch: case $STRING$ : } sb . append ( $STRING$ ) ; break ; $STRING$ ;
rank: 426
score: 99.267041015625
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; break ; $NUMBER$ ;
rank: 426
score: 99.21241048177083
patch: case c : sb . append ( backslash CaMeL Escape ) ; break ;
rank: 427
score: 99.39811437270221
patch: case $STRING$ : if ( c > 0 ) sb . append ( $STRING$ ) ;
rank: 427
score: 99.38707233297414
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( sb . to CaMeL Lower CaMeL Case ( ) ) ;
rank: 427
score: 99.35788796164773
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) + $STRING$ ;
rank: 427
score: 99.34463840060764
patch: case $STRING$ : ( ( char ) backslash CaMeL Escape ) . append ( $STRING$ ) ;
rank: 427
score: 99.3212028952206
patch: case $STRING$ : case 0 : sb . append ( $STRING$ ) ; break ; }
rank: 427
score: 99.21214192708334
patch: case $STRING$ : sb . append ( $STRING$ ? $STRING$ : $STRING$ ) ;
rank: 428
score: 99.39765857514881
patch: case $STRING$ : sb . append ( ( char ) ( s . char CaMeL At ( i ) ;
rank: 428
score: 99.38681175595238
patch: case $STRING$ : if ( $STRING$ . equals ( c ) ) { sb . append ( $STRING$ ) ;
rank: 428
score: 99.32109917534723
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( count ) ; break ;
rank: 428
score: 99.32052612304688
patch: case $STRING$ : sb . append ( $STRING$ ) ; * / sb . append ( backslash CaMeL Escape ) ; break ;
rank: 428
score: 99.298515625
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( $STRING$ ) ; sb . append ( c ) ;
rank: 428
score: 99.26520538330078
patch: case 1 : try { sb . append ( $STRING$ ) ; break ; ;
rank: 428
score: 99.2119140625
patch: case $STRING$ : System . out . println ( backslash CaMeL Escape ) ;
rank: 429
score: 99.39759893002717
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( sb . append ( quote ) ) ;
rank: 429
score: 99.3866943359375
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( c ) . to CaMeL Upper CaMeL Case ( ) ; }
rank: 429
score: 99.35727826286765
patch: case $STRING$ : sb . append ( $STRING$ ) ; c = $STRING$ ; break ;
rank: 429
score: 99.32108561197917
patch: case $STRING$ : sb . append ( $STRING$ ) ; } } break ;
rank: 429
score: 99.32033819901316
patch: case $STRING$ : sb . append ( $STRING$ ) ; + s . append ( $STRING$ ) ;
rank: 429
score: 99.29830799932066
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; } sb . append ( backslash CaMeL Escape ) ;
rank: 429
score: 99.26510184151786
patch: break ; case $STRING$ : sb . append ( $STRING$ ) ; }
rank: 429
score: 99.21188151041666
patch: case $STRING$ : sb . append ( get CaMeL Name ( ) ) ;
rank: 430
score: 99.38666823814656
patch: case $STRING$ : s . append ( $STRING$ ) . append ( $STRING$ ) . append ( c ) . to CaMeL Lower CaMeL Case ( ) ;
rank: 430
score: 99.32106646369485
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; } return c ;
rank: 430
score: 99.32013346354167
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String ( ) ) ; break ; case $STRING$ :
rank: 430
score: 99.29795394405242
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( s , doublequote CaMeL Escape ) ;
rank: 430
score: 99.27638753255208
patch: case $STRING$ : break ; $STRING$ : sb . append ( $STRING$ ) ; break ; ;
rank: 430
score: 99.26492513020834
patch: case Boolean . TRUE : sb . append ( $STRING$ ) ; break ;
rank: 430
score: 99.21148322610294
patch: case $STRING$ : String CaMeL Builder sb = new String CaMeL Builder ( $NUMBER$ ) ;
rank: 431
score: 99.38658650716145
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) . trim ( ) ) ;
rank: 431
score: 99.3571841591283
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) )
rank: 431
score: 99.34369574652777
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , sb ) ;
rank: 431
score: 99.32066127232143
patch: sb . append ( $STRING$ ) ; } else { break ; }
rank: 431
score: 99.31983483355978
patch: case $STRING$ : sb . append ( $STRING$ ) ; } sb . append ( backslash CaMeL Escape ) ; break ;
rank: 431
score: 99.29794311523438
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( backslash CaMeL Escape , $STRING$ ) ; break ;
rank: 431
score: 99.26483154296875
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case STRING ;
rank: 431
score: 99.21126011439732
patch: case $STRING$ : switch ( backslash CaMeL Escape ) { case $STRING$ :
rank: 432
score: 99.39649498980978
patch: case $STRING$ : sb . append ( sb . append ( $STRING$ ) ) . append ( $STRING$ ) ; break ;
rank: 432
score: 99.38658383018092
patch: case $STRING$ : { sb . append ( $STRING$ ) . append ( c ) ; break ;
rank: 432
score: 99.35712280273438
patch: case $STRING$ : case $STRING$ : case $STRING$ :
rank: 432
score: 99.32047271728516
patch: sb . append ( $STRING$ ) . append ( c ) ; break ; }
rank: 432
score: 99.31964580829327
patch: if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append ( backslash CaMeL Escape ) ;
rank: 432
score: 99.29783033288044
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; else sb . append ( backslash CaMeL Escape ) ;
rank: 432
score: 99.27601453993056
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; break ; break ; }
rank: 432
score: 99.26469203404018
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; { break ;
rank: 433
score: 99.39645070043103
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) ; break ;
rank: 433
score: 99.38595145089286
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) . char CaMeL At ( 0 ) ) ; }
rank: 433
score: 99.35707720588235
patch: case $STRING$ : if ( Character . is CaMeL Digit ( c ) ) break ;
rank: 433
score: 99.34291585286458
patch: if ( output CaMeL Charset CaMeL Encoder != null ) sb . append ( $STRING$ ) ;
rank: 433
score: 99.32045084635416
patch: case $STRING$ : sb . append ( $STRING$ ) ; } * * /
rank: 433
score: 99.3194921875
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; * / break ;
rank: 433
score: 99.27572195870536
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; String
rank: 433
score: 99.26456705729167
patch: case $STRING$ : sb . append ( $STRING$ ) ; this . break ;
rank: 434
score: 99.39600670855978
patch: case $STRING$ : sb . append ( ( ( char ) c ) . char CaMeL At ( i ) ) ;
rank: 434
score: 99.38564601089016
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) . to CaMeL Lower CaMeL Case ( ) ;
rank: 434
score: 99.35707310267857
patch: case Integer . MAX _ VALUE : sb . append ( $STRING$ ) ; break ; default : break ;
rank: 434
score: 99.3428955078125
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( s . length ( ) + $STRING$ ) ;
rank: 434
score: 99.31934204101563
patch: sb . append ( $STRING$ ) ; break ; else sb . append ( $STRING$ ) ; break ;
rank: 434
score: 99.31931715745192
patch: case $STRING$ : String CaMeL Builder new CaMeL String = new String CaMeL Builder ( s . char CaMeL At ( i ) ) ;
rank: 434
score: 99.26445007324219
patch: case $STRING$ : else { sb . append ( $STRING$ ) ; break ; }
rank: 434
score: 99.21014045266544
patch: case $STRING$ : : sb . append ( $STRING$ ) ; break ; case $STRING$ :
rank: 435
score: 99.39591899671052
patch: case $STRING$ : sb . append ( c ) ; } sb . append ( quote ) ;
rank: 435
score: 99.35639880952381
patch: case $STRING$ : sb . append ( Character . to CaMeL Hex CaMeL String ( $STRING$ ) ) ; }
rank: 435
score: 99.34261067708333
patch: case $STRING$ : if ( singlequote CaMeL Escape != null ) { sb . append ( $STRING$ ) ;
rank: 435
score: 99.31921997070313
patch: case $STRING$ : sb . append ( $STRING$ ) ; } else sb . append ( $STRING$ ) ;
rank: 435
score: 99.31903483072917
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; break ; case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 435
score: 99.27535671657986
patch: case $STRING$ : if ( false ) { sb . append ( $STRING$ ) ; break ;
rank: 435
score: 99.26438802083334
patch: case 1 : sb . append ( $STRING$ ) ; break ; ; ;
rank: 435
score: 99.21013726128473
patch: case NOT : sb . append ( $STRING$ ) ; sb . append ( $STRING$ ) ;
rank: 436
score: 99.38523706896552
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( Character . to CaMeL Lower CaMeL Case ( ) ) . append ( $STRING$ ) ;
rank: 436
score: 99.35575143914474
patch: case Character . $STRING$ : sb . append ( $STRING$ ) ; break ; default : break ;
rank: 436
score: 99.31905110677083
patch: case $STRING$ : return $STRING$ : sb . append ( $STRING$ ) ; }
rank: 436
score: 99.31889204545455
patch: case $STRING$ : sb . append ( TRUE + s . char CaMeL At ( i ) ) ; break ;
rank: 436
score: 99.2964336688702
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { sb . append ( quote ) ;
rank: 436
score: 99.27534315321181
patch: case $STRING$ : String sb = $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 436
score: 99.26422882080078
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; ) ; ;
rank: 436
score: 99.20950656467014
patch: case $STRING$ : sb . append ( $STRING$ ) ; err . append ( $STRING$ ) ;
rank: 437
score: 99.35543212890624
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ; continue ;
rank: 437
score: 99.3414535522461
patch: case $STRING$ : sb . append ( 1 ) ; break ; case $STRING$ :
rank: 437
score: 99.31866455078125
patch: case $STRING$ + sb . length ( ) : sb . append ( $STRING$ ) ; }
rank: 437
score: 99.29607684795673
patch: case $STRING$ : sb . append ( $STRING$ ) ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c ) ; break ;
rank: 437
score: 99.26407877604167
patch: case 1 : sb . append ( $STRING$ ) ; break ; 1 ;
rank: 438
score: 99.39519585503473
patch: case s . char CaMeL At ( i ) : sb . append ( c ) ;
rank: 438
score: 99.38507758246527
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; sb . append ( c ) ;
rank: 438
score: 99.35539106889205
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) + $STRING$ ) ;
rank: 438
score: 99.31840209960937
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( end ) ; break ;
rank: 438
score: 99.29601702008928
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( doublequote CaMeL Escape . to CaMeL String ( ) ) ;
rank: 438
score: 99.27490234375
patch: $STRING$ : sb . append ( $STRING$ ) ; break ; }
rank: 438
score: 99.26305280412946
patch: case case $NUMBER$ : sb . append ( $STRING$ ) ; break ;
rank: 438
score: 99.20929314108456
patch: t = s . char CaMeL At ( i ) ; switch ( c ) {
rank: 439
score: 99.39510444972827
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } }
rank: 439
score: 99.3552978515625
patch: case $STRING$ : break ; default : throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; }
rank: 439
score: 99.34042019314236
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( 0 ) ;
rank: 439
score: 99.31826346261161
patch: case 0 : sb . append ( $STRING$ ) ; } break ;
rank: 439
score: 99.26300455729167
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; break ; ; }
rank: 440
score: 99.39467486213235
patch: case $STRING$ : output CaMeL Charset CaMeL Encoder . append ( sb , c ) ;
rank: 440
score: 99.38496907552083
patch: case Character . ) { case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 440
score: 99.35509672619048
patch: case Double . Na CaMeL N : sb . append ( $STRING$ ) ; break ; default : break ;
rank: 440
score: 99.34037272135417
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ + $STRING$ :
rank: 440
score: 99.31814575195312
patch: case $STRING$ ; sb . append ( $STRING$ ) ; break ; } break ;
rank: 440
score: 99.29600869455645
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( $STRING$ , doublequote CaMeL Escape ) ;
rank: 440
score: 99.27467346191406
patch: case $STRING$ : else sb . append ( $STRING$ ) ; break ; break ;
rank: 440
score: 99.2088623046875
patch: case $STRING$ : $STRING$ : sb . append ( backslash CaMeL Escape ) ; break ;
rank: 441
score: 99.3945821126302
patch: case $STRING$ : sb . append ( sb . append ( s . char CaMeL At ( i ) ) ) ; }
rank: 441
score: 99.38485952524039
patch: case $STRING$ : sb . append ( Character . to CaMeL Char CaMeL Array ( c ) . trim ( ) ) ; break ;
rank: 441
score: 99.35509535845588
patch: case $STRING$ : throw new Null CaMeL Pointer CaMeL Exception ( $STRING$ + c ) ;
rank: 441
score: 99.34019775390625
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : System . break ;
rank: 441
score: 99.31735755657327
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } sb . append ( c ) ;
rank: 441
score: 99.29590541294642
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( doublequote CaMeL Escape ) ;
rank: 441
score: 99.27466692243304
patch: case $NUMBER$ : else sb . append ( $STRING$ ) ; break ;
rank: 441
score: 99.26232147216797
patch: case 1 : sb . append ( $STRING$ ) ; break ; break ; ;
rank: 441
score: 99.20859662224265
patch: case $STRING$ : sb . append ( $STRING$ ) ; return backslash CaMeL Escape ) ;
rank: 442
score: 99.39454409950658
patch: case $STRING$ : sb . append ( quote ) ; sb . append ( c ) ; }
rank: 442
score: 99.38472900390624
patch: case $NUMBER$ : sb . append ( Character . to CaMeL String ( c ) ) ; break ;
rank: 442
score: 99.35506184895833
patch: case $STRING$ : sb . append ( $STRING$ ) ; } sb . append ( c ) ; break ;
rank: 442
score: 99.33993530273438
patch: case $STRING$ : output CaMeL Charset CaMeL Encoder . append ( $STRING$ ) ; break ; case $STRING$ :
rank: 442
score: 99.31768798828125
patch: case $STRING$ ? $STRING$ : sb . append ( $STRING$ ) ; }
rank: 442
score: 99.3170166015625
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ; break ; * /
rank: 442
score: 99.29580891927084
patch: case $STRING$ : sb . append ( ( $STRING$ ) ) ; break ;
rank: 442
score: 99.27443440755208
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; $STRING$ { break ; }
rank: 443
score: 99.33992513020833
patch: case $STRING$ : System . append ( s . char CaMeL At ( i ) ) ;
rank: 443
score: 99.31700846354167
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( sb . to CaMeL String ( ) . to CaMeL String ( ) ) ;
rank: 443
score: 99.29535319010417
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( }
rank: 443
score: 99.27400207519531
patch: case $NUMBER$ : System . ; sb . append ( $STRING$ ) ; break ;
rank: 443
score: 99.26212252103366
patch: case 0 : sb . append ( $STRING$ ) ; continue ;
rank: 443
score: 99.20829942491319
patch: case $STRING$ : s . append ( backslash CaMeL Escape ) ; break ; case $STRING$ :
rank: 444
score: 99.39442661830357
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( i ) ;
rank: 444
score: 99.35478071732955
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) : $STRING$ ) ;
rank: 444
score: 99.33967729048295
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : sb . append ( ) ;
rank: 444
score: 99.29512845552884
patch: case $STRING$ : sb . append ( $STRING$ ) ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , $STRING$ ) ;
rank: 444
score: 99.26200866699219
patch: case $STRING$ ; sb . append ( sb . append ( $STRING$ ) ) ;
rank: 444
score: 99.20822482638889
patch: case $STRING$ : sb . append ( sb . substring ( 1 , i ) ) ;
rank: 445
score: 99.39441596137152
patch: case $STRING$ : sb . append ( s . append ( c ) ) ; break ;
rank: 445
score: 99.38408067491319
patch: case $STRING$ : s . append ( $STRING$ ) . append ( $STRING$ ) ; break ;
rank: 445
score: 99.35446648848684
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; } } return sb . ;
rank: 445
score: 99.33955310639881
patch: case $STRING$ : String CaMeL Builder sb = new String CaMeL Builder ( s . append ( $STRING$ ) ;
rank: 445
score: 99.31728108723958
patch: sb . append ( $STRING$ + sb . to CaMeL String ( ) ) ; break ;
rank: 445
score: 99.26127115885417
patch: case String . $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 445
score: 99.208203125
patch: case ( backslash CaMeL Escape ) : sb . append ( $STRING$ ) ;
rank: 446
score: 99.39431762695312
patch: case $STRING$ : sb . append ( s . to CaMeL String ( ) ) ; sb . append ( c ) ;
rank: 446
score: 99.38406372070312
patch: case $STRING$ : case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ; }
rank: 446
score: 99.35445462740384
patch: case EOL : sb . append ( $STRING$ ) ; break ;
rank: 446
score: 99.33909696691177
patch: } switch ( c ) { case $STRING$ : sb . append ( $STRING$ ) ;
rank: 446
score: 99.2611328125
patch: case Compiler . $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 446
score: 99.20809936523438
patch: case $STRING$ : else sb . append ( backslash CaMeL Escape ) ; break ;
rank: 447
score: 99.35442243303571
patch: case $STRING$ : sb . append ( Integer . to CaMeL String ( c ) ) ; break ; }
rank: 447
score: 99.2946246603261
patch: case quote : sb . append ( $STRING$ ) ; break ; case $STRING$ : sb . append ( $STRING$ ) ;
rank: 447
score: 99.26112583705357
patch: case $NUMBER$ : case $STRING$ : sb . append ( $STRING$ ) ;
rank: 448
score: 99.39352256373355
patch: case $STRING$ : { sb . append ( sb . char CaMeL At ( i ) ) ;
rank: 448
score: 99.383701171875
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) . append ( ) . append ( $STRING$ ) ;
rank: 448
score: 99.35441450639205
patch: case $STRING$ : sb . append ( $STRING$ ) ; } return sb . to CaMeL String ( ) ; ;
rank: 448
score: 99.33902138157895
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; break ; }
rank: 448
score: 99.31710205078124
patch: case $STRING$ : sb . append ( $STRING$ ) ; out . append ( line ) ; break ;
rank: 448
score: 99.31609476023706
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( backslash CaMeL Escape . to CaMeL String ( backslash CaMeL Escape ) ) ;
rank: 448
score: 99.27276611328125
patch: case STRING : sb . append ( $STRING$ ) ; break ; $STRING$
rank: 448
score: 99.26102447509766
patch: case 0 : try { sb . append ( $STRING$ ) ; break ; }
rank: 448
score: 99.20733642578125
patch: return $STRING$ ; case $STRING$ : sb . append ( backslash CaMeL Escape ) ; break ;
rank: 449
score: 99.3542724609375
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) ; break ; } }
rank: 449
score: 99.29398018973214
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . str CaMeL Escape , doublequote CaMeL Escape ) ;
rank: 449
score: 99.26089477539062
patch: case 0 ; case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 449
score: 99.20714460100446
patch: return quote ; case $STRING$ : sb . append ( $STRING$ ) ;
rank: 450
score: 99.39334810697116
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( sb . append ( c ) ) . append ( $STRING$ ) ;
rank: 450
score: 99.38348388671875
patch: case $STRING$ : return s . char CaMeL At ( i ) ; case $STRING$ : return $STRING$ ;
rank: 450
score: 99.35418379934211
patch: case $STRING$ : if ( $STRING$ . equals CaMeL Ignore CaMeL Case ( c ) ) break ;
rank: 450
score: 99.3162482766544
patch: case $STRING$ : case $STRING$ : sb . append ( $STRING$ ) ; break ; else
rank: 450
score: 99.3158710186298
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( false ) ;
rank: 450
score: 99.27250162760417
patch: case 1 : sb . append ( $STRING$ ) ; break ; $STRING$ ; break ; }
rank: 450
score: 99.26039123535156
patch: case $STRING$ ; sb . append ( $STRING$ ) ; break ; case $STRING$ ;
rank: 450
score: 99.20701768663194
patch: String CaMeL Builder sb = new String CaMeL Builder ( sb . length ( ) ) ;
rank: 451
score: 99.38346354166667
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) . append ( $STRING$ ) . append ( c ) ;
rank: 451
score: 99.3538330078125
patch: case Integer . MIN : sb . append ( $STRING$ ) ; break ; default : break ; }
rank: 451
score: 99.31599695542279
patch: case $STRING$ : sb . append ( $STRING$ ) ; } break ; break ; }
rank: 451
score: 99.29374425551471
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , $STRING$ ) ;
rank: 451
score: 99.27205113002232
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; int
rank: 451
score: 99.2602069561298
patch: case 0 ; sb . append ( $STRING$ ) ; break ;
rank: 451
score: 99.20672200520833
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; } }
rank: 452
score: 99.39298148777173
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : sb . append ( quote ) ;
rank: 452
score: 99.38314615885416
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( Character . to CaMeL Lower CaMeL Case ( $STRING$ ) ) . append ( $STRING$ ) ;
rank: 452
score: 99.3377685546875
patch: case $STRING$ : String CaMeL Builder sb = new String CaMeL Builder ( c ) ; break ;
rank: 452
score: 99.31568196614583
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; } else
rank: 452
score: 99.29365757533482
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset ) ;
rank: 452
score: 99.27187771267361
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; break ; $STRING$ ; ;
rank: 452
score: 99.26006673177083
patch: case $STRING$ : else sb . append ( $STRING$ ) ; break ; }
rank: 452
score: 99.206640625
patch: case String CaMeL Builder . $STRING$ : sb . append ( c ) ;
rank: 453
score: 99.3926311990489
patch: case $STRING$ : sb . append ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) ; }
rank: 453
score: 99.38309280960648
patch: case $NUMBER$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) . append ( $STRING$ ) ; break ;
rank: 453
score: 99.33751331676136
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( ) ; sb . append ( $STRING$ ) ;
rank: 453
score: 99.31560202205883
patch: } case $STRING$ : case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 453
score: 99.3151143391927
patch: case $STRING$ : String CaMeL Builder s = new String CaMeL Builder ( s . char CaMeL At ( i ) ) ;
rank: 453
score: 99.29359172952586
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( s ) ) ;
rank: 453
score: 99.27176666259766
patch: case STRING : case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 453
score: 99.2596923828125
patch: case 1 : sb . append ( $STRING$ ) ; return $STRING$ ; ;
rank: 453
score: 99.2061298076923
patch: result . append ( $STRING$ ) ; break ; case $STRING$ :
rank: 454
score: 99.35298295454545
patch: case Character . MIN : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ;
rank: 454
score: 99.33720259232955
patch: case $STRING$ : String CaMeL Builder sb = new String CaMeL Builder ( doublequote CaMeL Escape ) ; break ;
rank: 454
score: 99.31531372070313
patch: case $STRING$ + sb . char CaMeL Value ( ) ; sb . append ( $STRING$ ) ; }
rank: 454
score: 99.31461588541667
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , doublequote CaMeL Escape , doublequote CaMeL Escape , backslash CaMeL Escape ) ;
rank: 454
score: 99.29322684151786
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( backslash CaMeL Escape ) ; }
rank: 454
score: 99.27175564236111
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; break ; $STRING$ ; return $STRING$ ;
rank: 454
score: 99.2590801532452
patch: case s ; sb . append ( $STRING$ ) ; break ;
rank: 454
score: 99.20612649356617
patch: case $STRING$ : sb . append ( $STRING$ ) ; backslash CaMeL Escape ; break ;
rank: 455
score: 99.39240234375
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( backslash CaMeL Escape ) ; break ;
rank: 455
score: 99.35281192555146
patch: case DEFAULT : sb . append ( $STRING$ ) ; break ; default : break ;
rank: 455
score: 99.31509738498264
patch: case Token . $STRING$ : { sb . append ( $STRING$ ) ; break ; } }
rank: 455
score: 99.27174207899306
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; ( break ; break ;
rank: 455
score: 99.2584716796875
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; false ;
rank: 455
score: 99.20562744140625
patch: case $STRING$ : else sb . append ( backslash CaMeL Escape ) ;
rank: 456
score: 99.39222783627717
patch: case $STRING$ : sb . append ( sb . append ( c ) ) ; sb . append ( $STRING$ ) ;
rank: 456
score: 99.38296072823661
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; } sb . append ( $STRING$ ) ;
rank: 456
score: 99.35264369419643
patch: default : sb . append ( $STRING$ ) ; break ; } } sb . append ( $STRING$ ) ;
rank: 456
score: 99.33619520399306
patch: case $STRING$ : sb . append ( $STRING$ + c ) . append ( $STRING$ ) ;
rank: 456
score: 99.3142422762784
patch: case $STRING$ : sb . append ( $STRING$ ) ; break . append ( backslash CaMeL Escape ) ; break ;
rank: 456
score: 99.27156829833984
patch: case $STRING$ : if ( ) sb . append ( $STRING$ ) ; break ;
rank: 456
score: 99.25795200892857
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; break ; else
rank: 456
score: 99.20547921316964
patch: case $STRING$ : sb . append ( ( int ) c ) ;
rank: 457
score: 99.39219835069444
patch: case s . char CaMeL At ( i ) ; sb . append ( $STRING$ ) ;
rank: 457
score: 99.3829345703125
patch: case $STRING$ : break ; case $STRING$ : System . out . println ( $STRING$ ) ;
rank: 457
score: 99.35255262586806
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; default : break ; ;
rank: 457
score: 99.33598497178819
patch: case $STRING$ : sb . append ( $STRING$ ) : sb . append ( $NUMBER$ ) ;
rank: 457
score: 99.31502956814236
patch: case $STRING$ : sb . append ( sb . length ( ) ) ; break ; }
rank: 457
score: 99.31379530164931
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; sb . append ( backslash CaMeL Escape . to CaMeL String ( ) ) ;
rank: 457
score: 99.2924072265625
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String ( ) , c ) ;
rank: 457
score: 99.27140299479167
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; ; $STRING$
rank: 457
score: 99.25738055889423
patch: append ( $STRING$ ) ; break ; case $STRING$ : break ;
rank: 457
score: 99.20545196533203
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case NOT :
rank: 458
score: 99.39218374399039
patch: case $STRING$ : if ( singlequote CaMeL Escape . can CaMeL Encode ( c ) ) { sb . append ( $STRING$ ) ;
rank: 458
score: 99.38276728877315
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( $STRING$ ) ) ; sb . append ( $STRING$ ) ;
rank: 458
score: 99.35223067434211
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : ; break ;
rank: 458
score: 99.33507622612848
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset , c ) ;
rank: 458
score: 99.31496018629808
patch: case $STRING$ : sb . append ( $STRING$ ) : break ;
rank: 458
score: 99.25710623604911
patch: case $STRING$ : sb . append ( $STRING$ ) ; return null ;
rank: 458
score: 99.20494791666667
patch: case $STRING$ : sb . append ( ( i + 1 ) ) ;
rank: 459
score: 99.39185631793478
patch: case $STRING$ : if ( sb . can CaMeL Encode ( c ) ) { sb . append ( $STRING$ ) ;
rank: 459
score: 99.3349968405331
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ;
rank: 459
score: 99.31333821614584
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; System . out . append ( $STRING$ ) ;
rank: 459
score: 99.29214969758064
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String ( ) ;
rank: 459
score: 99.27018737792969
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; break ; ( break ;
rank: 459
score: 99.2045428936298
patch: case NOT : sb . append ( $STRING$ ) ; break ;
rank: 460
score: 99.39134803185097
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( sb . append ( singlequote CaMeL Escape ) ) ;
rank: 460
score: 99.38259451729911
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( c ) . append ( $STRING$ ) ; break ;
rank: 460
score: 99.31411404079861
patch: break . to CaMeL String ( ) ; sb . append ( $STRING$ ) ; break ;
rank: 460
score: 99.31324637276786
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ; break ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ;
rank: 460
score: 99.29213053385416
patch: case $STRING$ break ; case $STRING$ : sb . append ( $STRING$ ) ;
rank: 460
score: 99.27015904017857
patch: case $STRING$ : sb . append ( $NUMBER$ ) ; break ; ;
rank: 460
score: 99.25699055989584
patch: case STRING : { sb . append ( $STRING$ ) ; break ; }
rank: 461
score: 99.39105694110577
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ; sb . append ( $STRING$ ) ; }
rank: 461
score: 99.38230267693015
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ;
rank: 461
score: 99.31301879882812
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) && output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( $STRING$ ) )
rank: 461
score: 99.29191320082721
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . str CaMeL Escape ) ;
rank: 461
score: 99.269970703125
patch: case $STRING$ : $STRING$ ; sb . append ( $STRING$ ) ; break ;
rank: 461
score: 99.20416937934027
patch: switch ( c ) { case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 462
score: 99.3909403483073
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; } else { sb . append ( $STRING$ ) ; }
rank: 462
score: 99.38225354646382
patch: case $STRING$ : sb . append ( Character . to CaMeL String ( c ) ) ; }
rank: 462
score: 99.3515984030331
patch: case $STRING$ : return $STRING$ ; default : sb . append ( c ) ; }
rank: 462
score: 99.31394330193015
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; else return 0 ;
rank: 462
score: 99.29176897321429
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , sb ) ; }
rank: 462
score: 99.256787109375
patch: case $STRING$ : sb . append ( $STRING$ ) ; try { break ;
rank: 462
score: 99.20392608642578
patch: case s : sb . append ( quote ) ; break ; case $STRING$ :
rank: 463
score: 99.3908160665761
patch: case s . char CaMeL At ( i ) : sb . append ( $STRING$ ) . append ( $STRING$ ) ;
rank: 463
score: 99.38184204101563
patch: case $STRING$ : System . out . println ( $STRING$ ) ; sb . append ( c ) ;
rank: 463
score: 99.33349609375
patch: case $STRING$ : sb . append ( $STRING$ ) + doublequote CaMeL Escape ;
rank: 463
score: 99.3135009765625
patch: case $STRING$ : sb . put ( $STRING$ , $STRING$ ) ; break ;
rank: 463
score: 99.31234846443965
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder != null && output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) break ;
rank: 463
score: 99.291650390625
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation (
rank: 463
score: 99.26931762695312
patch: case 1 : String sb = sb . append ( $STRING$ ) ; break ;
rank: 463
score: 99.25642903645833
patch: default : sb . append ( $STRING$ ) ; break ;
rank: 463
score: 99.20352172851562
patch: case $STRING$ : String c = s . char CaMeL At ( i ) ;
rank: 464
score: 99.38179072627315
patch: case Char CaMeL Sequence . $STRING$ : sb . append ( $STRING$ ) . append ( c ) . append ( $STRING$ ) ; break ;
rank: 464
score: 99.35136486235119
patch: case $STRING$ : case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) ; break ;
rank: 464
score: 99.33330620659723
patch: case $STRING$ : sb . append ( s . char CaMeL At ( 0 ) ) ;
rank: 464
score: 99.31348266601563
patch: case $STRING$ : sb . append ( $STRING$ ) ; out . append ( s ) ; break ;
rank: 464
score: 99.31196812220982
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; sb . append ( c ) ; break ;
rank: 464
score: 99.2690673828125
patch: case $STRING$ : sb . append ( $STRING$ , $NUMBER$ ) ; break ;
rank: 464
score: 99.20346304086539
patch: case backslash CaMeL Escape : sb . append ( $STRING$ ) ;
rank: 465
score: 99.3816338900862
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; break ;
rank: 465
score: 99.35134405838816
patch: case $STRING$ : sb . append ( $STRING$ ) ; . append ( c ) ; break ;
rank: 465
score: 99.33309936523438
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( name ) ;
rank: 465
score: 99.31346130371094
patch: sb . append ( $STRING$ ) ; sb . append ( $STRING$ ) ; }
rank: 465
score: 99.31182454427083
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; System . out . append ( c ) ;
rank: 465
score: 99.2688720703125
patch: case 1 : sb . append ( $STRING$ + $STRING$ ) ; break ;
rank: 465
score: 99.2559814453125
patch: case $STRING$ : sb . append ( $STRING$ ) ; case $STRING$ :
rank: 465
score: 99.20336042131696
patch: case : sb . append ( backslash CaMeL Escape ) ; break ;
rank: 466
score: 99.38138671875
patch: case $NUMBER$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; break ; case $NUMBER$ :
rank: 466
score: 99.33282829733456
patch: case $STRING$ + sb . length ( ) : sb . append ( $STRING$ ) ;
rank: 466
score: 99.3134406594669
patch: case $STRING$ : sb . append ( $STRING$ ) ; continue ; } break ; }
rank: 466
score: 99.3112857216283
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; break ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ;
rank: 466
score: 99.29134114583333
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : sb . append ( c ) ; }
rank: 466
score: 99.268798828125
patch: switch ( $STRING$ ) { case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 466
score: 99.25577799479167
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; ; ?
rank: 466
score: 99.20334879557292
patch: case $STRING$ : sb . append ( quote ) ; }
rank: 467
score: 99.3901134672619
patch: case $STRING$ : sb . append ( $STRING$ ) ; } else { sb . append ( c ) ;
rank: 467
score: 99.38127790178571
patch: case $STRING$ : sb . append ( Character . char CaMeL At ( c ) ) ; break ; }
rank: 467
score: 99.35080788352273
patch: case $STRING$ : sb . append ( $STRING$ ) ; System . out . println ( $STRING$ ) ; break ;
rank: 467
score: 99.33244493272569
patch: case $STRING$ : sb . append ( $STRING$ ) ; System . append ( c ) ;
rank: 467
score: 99.2684326171875
patch: case $STRING$ : sb . append ( $NUMBER$ ) ; break ; } break ;
rank: 467
score: 99.2551025390625
patch: case $STRING$ : sb . append ( $STRING$ ) ; ; return $STRING$ ;
rank: 467
score: 99.20290958180146
patch: case $STRING$ : String CaMeL Builder . append ( backslash CaMeL Escape ) ; break ;
rank: 468
score: 99.39005903764205
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( sb . append ( c ) ) ; }
rank: 468
score: 99.3812588778409
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) . append ( $STRING$ ) . to CaMeL Lower CaMeL Case ( ) ;
rank: 468
score: 99.35080788352273
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ; } ;
rank: 468
score: 99.33167613636364
patch: case $STRING$ : sb . append ( ) ; break ; case $STRING$ : sb . append ( $STRING$ ) ;
rank: 468
score: 99.31284877232143
patch: break ; else sb . append ( $STRING$ ) ; break ; }
rank: 468
score: 99.31109260110294
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) )
rank: 468
score: 99.29099684495192
patch: case $STRING$ : sb . append ( $STRING$ ) ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , s ) ;
rank: 468
score: 99.26788736979167
patch: case $STRING$ : sb . append ( $STRING$ ) ; while ( break ;
rank: 468
score: 99.20271301269531
patch: case s : sb . append ( c ) ; break ; case $STRING$ :
rank: 469
score: 99.38953575721153
patch: case $STRING$ : sb . append ( ( String ) s . char CaMeL At ( i ) ) . append ( $STRING$ ) ;
rank: 469
score: 99.38113501764113
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) . append ( $STRING$ ) ; }
rank: 469
score: 99.31265079273896
patch: } } sb . append ( $STRING$ ) ; sb . append ( $STRING$ ) ;
rank: 469
score: 99.31053845635776
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; else sb . append ( $STRING$ ) ;
rank: 469
score: 99.29078776041666
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( backslash CaMeL Escape , c ) ;
rank: 469
score: 99.26786295572917
patch: case $STRING$ : sb ; sb . append ( $STRING$ ) ; break ;
rank: 469
score: 99.2548828125
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; } break ;
rank: 469
score: 99.20254177517361
patch: case $STRING$ : sb . append ( ( ( char ) backslash CaMeL Escape ) ) ;
rank: 470
score: 99.38047438401442
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ; }
rank: 470
score: 99.33036973741319
patch: case $STRING$ : sb = ( String ) s . char CaMeL At ( i ) ;
rank: 470
score: 99.31051815257354
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , doublequote CaMeL Escape , doublequote CaMeL Escape , singlequote CaMeL Escape ) ;
rank: 470
score: 99.29075113932292
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , c ) ;
rank: 470
score: 99.20248849051339
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; ;
rank: 471
score: 99.3881202980324
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( sb . to CaMeL String ( ) ) . append ( c ) ;
rank: 471
score: 99.35043514476104
patch: case $STRING$ : if ( $STRING$ . equals ( c ) ) continue ; break ;
rank: 471
score: 99.32982288707386
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( sb . append ( $STRING$ ) ;
rank: 471
score: 99.31046549479167
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; sb . append ( c ) ; break ;
rank: 471
score: 99.29042053222656
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder , s ) ;
rank: 471
score: 99.2677001953125
patch: case $STRING$ : add ( sb . append ( $STRING$ ) ) ; break ;
rank: 471
score: 99.25362141927083
patch: case $STRING$ : } sb . append ( $STRING$ ) ;
rank: 471
score: 99.20225524902344
patch: case quote : sb . append ( c ) ; break ; case $STRING$ :
rank: 472
score: 99.38784950657895
patch: case $STRING$ : if ( singlequote CaMeL Escape ) { sb . append ( $STRING$ ) ;
rank: 472
score: 99.38015311104911
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( sb . char CaMeL At ( i ) ) ) ; }
rank: 472
score: 99.35012817382812
patch: case $STRING$ : return Character . to CaMeL Char CaMeL Array ( c ) ;
rank: 472
score: 99.32979090073529
patch: } append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ;
rank: 472
score: 99.3118896484375
patch: case 0 : case 0 : sb . append ( $STRING$ ) ; break ;
rank: 472
score: 99.29032679966518
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , sb ) ;
rank: 472
score: 99.25357259114584
patch: case 0 : sb . append ( $STRING$ ) ; break ; ; ;
rank: 472
score: 99.20217556423611
patch: case null : sb . append ( $STRING$ ) ; sb . append ( $STRING$ ) ;
rank: 473
score: 99.3876953125
patch: case $STRING$ : if ( this . output CaMeL Charset CaMeL Encoder != null ) { sb . append ( c ) ;
rank: 473
score: 99.379853515625
patch: case $STRING$ : sb . append ( ( char ) Character . to CaMeL Lower CaMeL Case ( c ) ) ; break ;
rank: 473
score: 99.35011985085227
patch: case $STRING$ : sb . append ( Character . to CaMeL Char CaMeL Array ( c ) ; break ; }
rank: 473
score: 99.32968319163604
patch: case $STRING$ + s . length ( ) : sb . append ( $STRING$ ) ;
rank: 473
score: 99.31178588867188
patch: case $STRING$ ? sb . append ( $STRING$ ) ; sb . append ( $STRING$ ) ; break ;
rank: 473
score: 99.31005859375
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c ) ; break ; case $STRING$ : sb . append ( $STRING$ ) ;
rank: 473
score: 99.2901278409091
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c ) ;
rank: 473
score: 99.26690673828125
patch: sb . append ( $STRING$ ) ; break ; $STRING$ ;
rank: 473
score: 99.25316569010417
patch: case $STRING$ : sb . append ( $STRING$ ) ; value = $STRING$ ;
rank: 473
score: 99.20207868303571
patch: case $STRING$ : sb . append ( ( String ) $STRING$ ) ;
rank: 474
score: 99.38768513997395
patch: case $STRING$ : { sb . append ( $STRING$ ) ;
rank: 474
score: 99.3498046875
patch: case 0 : sb . append ( $STRING$ ) ; sb . append ( c ) ; break ;
rank: 474
score: 99.32928936298077
patch: case $STRING$ : sb . append ( $STRING$ ) + c ;
rank: 474
score: 99.309755859375
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ; break . append ( $STRING$ ) ;
rank: 474
score: 99.29012044270833
patch: if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append ( quote ) ;
rank: 474
score: 99.25299479166667
patch: case 1 : { sb . append ( $STRING$ ) ; break ; }
rank: 474
score: 99.20204514723558
patch: case $STRING$ : sb . append ( ( $STRING$ ) ) ;
rank: 475
score: 99.38751220703125
patch: case $STRING$ : if ( c > 0 ) { sb . append ( c ) ;
rank: 475
score: 99.37945915670956
patch: case $STRING$ : break ; default : throw new Runtime CaMeL Exception ( $STRING$ ) ;
rank: 475
score: 99.32914011101974
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( s . char CaMeL
rank: 475
score: 99.30966481854838
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb ) ;
rank: 475
score: 99.2901102701823
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : sb . append ( $STRING$ ) ; }
rank: 475
score: 99.26558140345982
patch: $STRING$ : sb . append ( $STRING$ ) ; break ; break ;
rank: 475
score: 99.25262044270833
patch: case $STRING$ : sb . append ( $STRING$ ) ; return break ; ;
rank: 475
score: 99.20203399658203
patch: return quote ; case $STRING$ : sb . append ( backslash CaMeL Escape ) ;
rank: 476
score: 99.38694411057692
patch: case $STRING$ : sb . append ( $STRING$ ) ; } sb . append ( sb . char CaMeL At ( i ) ) ;
rank: 476
score: 99.37925502232143
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) . append ( $NUMBER$ ) ;
rank: 476
score: 99.34940795898437
patch: case $STRING$ : break ; default : throw new Null CaMeL Pointer CaMeL Exception ( $STRING$ ) ; }
rank: 476
score: 99.32904730902777
patch: case $STRING$ : sb . append ( 0 ) ; sb . append ( $STRING$ ) ;
rank: 476
score: 99.31125057444854
patch: break ; } case $STRING$ : sb . append ( $STRING$ ) ; break ; }
rank: 476
score: 99.2651123046875
patch: case $STRING$ : else sb . append ( $STRING$ ) ; break ; ;
rank: 476
score: 99.25233677455357
patch: case $NUMBER$ : } sb . append ( $STRING$ ) ; break ;
rank: 476
score: 99.20153045654297
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( charset ) ;
rank: 477
score: 99.38682489809783
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( s . append ( c ) ) ;
rank: 477
score: 99.37918294270834
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( $STRING$ ) ) . append ( c ) . append ( $STRING$ ) ;
rank: 477
score: 99.3493716591283
patch: case $STRING$ : if ( $STRING$ . equals ( ) ) sb . append ( $STRING$ ) ;
rank: 477
score: 99.31085564108456
patch: else { case $STRING$ : sb . append ( $STRING$ ) ; break ; } }
rank: 477
score: 99.26475016276042
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; $STRING$ ) ; break ;
rank: 477
score: 99.25191824776786
patch: case $STRING$ : sb . append ( $STRING$ ) ; continue ; ;
rank: 477
score: 99.20135498046875
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; break ; case $STRING$ ?
rank: 478
score: 99.38680691189236
patch: case $STRING$ { sb . append ( s . char CaMeL At ( i ) ) ;
rank: 478
score: 99.37899043642241
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( $STRING$ ) . char CaMeL At ( 0 ) ) ; break ;
rank: 478
score: 99.34932668585526
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; default : throw new ; }
rank: 478
score: 99.32859892003677
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : ;
rank: 478
score: 99.31043090820313
patch: case $STRING$ : sb . append ( sb . to CaMeL String ( ) ) ; break ; else
rank: 478
score: 99.3088887532552
patch: case $STRING$ : String CaMeL Builder c = new String CaMeL Builder ( s . char CaMeL At ( i ) ) ;
rank: 478
score: 99.28969874526516
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( $STRING$ ) ; break ;
rank: 478
score: 99.26468599759616
patch: case NUMBER : sb . append ( $STRING$ ) ; break ;
rank: 478
score: 99.25147298177083
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; break ; 1 ;
rank: 478
score: 99.20134819878473
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( true ) ;
rank: 479
score: 99.38675242456897
patch: case $STRING$ : output CaMeL Charset CaMeL Encoder . append ( s . char CaMeL At ( i ) ) ; sb . append ( c ) ;
rank: 479
score: 99.37898763020833
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( Character . to CaMeL Lower CaMeL Case ( $STRING$ ) ) ;
rank: 479
score: 99.31019287109375
patch: case $STRING$ + sb . length ( ) : sb . append ( $STRING$ ) ; break ; }
rank: 479
score: 99.28964975717905
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( backslash CaMeL Escape ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ;
rank: 479
score: 99.26437377929688
patch: case $STRING$ : try / ; sb . append ( $STRING$ ) ; break ;
rank: 479
score: 99.2013427734375
patch: case $STRING$ : backslash CaMeL Escape ; sb . append ( $STRING$ ) ;
rank: 480
score: 99.38642939814815
patch: case $STRING$ : sb . append ( ( ( char ) output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) ) ;
rank: 480
score: 99.3789483432112
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; sb . append ( $STRING$ ) ; break ;
rank: 480
score: 99.3492790670956
patch: case $STRING$ : sb . append ( line ) ; break ; default : break ;
rank: 480
score: 99.32835751488095
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ; case $STRING$ :
rank: 480
score: 99.31002987132354
patch: case $STRING$ : sb . append ( $STRING$ ) . trim ( ) ; break ;
rank: 480
score: 99.30836070667614
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; * / sb . append ( $STRING$ ) ;
rank: 480
score: 99.28955704126602
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder , Charset CaMeL Encoder output CaMeL Charset CaMeL Encoder ) ;
rank: 480
score: 99.26421440972223
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; else break ; break ;
rank: 480
score: 99.25103352864583
patch: case Character . $STRING$ ; sb . append ( $STRING$ ) ; break ;
rank: 480
score: 99.20117950439453
patch: case $STRING$ : if ( $STRING$ . equals ( backslash CaMeL Escape ) ) {
rank: 481
score: 99.38628595525569
patch: case $STRING$ : sb . append ( ( s . char CaMeL At ( i ) + $STRING$ ) ) ;
rank: 481
score: 99.37884114583333
patch: case $STRING$ : case $STRING$ : case $STRING$ : break ; case $STRING$ :
rank: 481
score: 99.34923031455592
patch: case Character . ) : sb . append ( $STRING$ ) ; break ; default : break ;
rank: 481
score: 99.30976867675781
patch: case 1 : sb . append ( $STRING$ ) ; break ; break ; }
rank: 481
score: 99.30826297883064
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } sb . append ( backslash CaMeL Escape ) ;
rank: 481
score: 99.28953552246094
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( ) ; }
rank: 481
score: 99.26380208333333
patch: case 1 : $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 481
score: 99.20082092285156
patch: case ( c ) { case $STRING$ : sb . append ( $STRING$ ) ;
rank: 482
score: 99.30962262834821
patch: case $STRING$ + $STRING$ : sb . append ( $STRING$ ) ; }
rank: 482
score: 99.28860381155303
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; break ; case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c ) ;
rank: 482
score: 99.26332600911458
patch: case $NUMBER$ : break ; case $NUMBER$ : sb . append ( $STRING$ ) ; break ;
rank: 482
score: 99.20066833496094
patch: case $STRING$ : sb . append ( ( Character ) backslash CaMeL Escape ) ;
rank: 483
score: 99.38611260775862
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( output CaMeL Charset CaMeL Encoder . append ( backslash CaMeL Escape ) ) ;
rank: 483
score: 99.37863159179688
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; return sb . to CaMeL Lower CaMeL Case ( c ) ;
rank: 483
score: 99.34877707741477
patch: case Double . Na CaMeL N : sb . append ( $STRING$ ) ; break ; default : break ; }
rank: 483
score: 99.326904296875
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) + $STRING$ : sb . append ( c ) ;
rank: 483
score: 99.30949263139205
patch: sb . append ( $STRING$ ) ; } break ;
rank: 483
score: 99.30790201822917
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { break ;
rank: 483
score: 99.28846571180556
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { sb . append ( s ) ; }
rank: 483
score: 99.26288519965277
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case ) : break ;
rank: 483
score: 99.24927571614583
patch: break ; case 0 : sb . append ( $STRING$ ) ; break ;
rank: 483
score: 99.20060729980469
patch: case $STRING$ : sb . append ( s ) . append ( $STRING$ ) ;
rank: 484
score: 99.38585316051136
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; else sb . append ( $STRING$ ) ; }
rank: 484
score: 99.37848455255681
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; sb . append ( Character . to CaMeL Lower CaMeL Case ( ;
rank: 484
score: 99.34841739430146
patch: case $STRING$ : sb . append ( ) ; break ; default : break ; }
rank: 484
score: 99.32674153645833
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( sb ) ;
rank: 484
score: 99.30946978400735
patch: case $STRING$ : case 1 : sb . append ( $STRING$ ) ; break ; }
rank: 484
score: 99.28823747306035
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( backslash
rank: 484
score: 99.26198323567708
patch: case 1 : sb . append ( $STRING$ ) ; break ; $STRING$ ; break ; ;
rank: 484
score: 99.24768880208333
patch: case Definition . $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 485
score: 99.38583809988839
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( sb . append ( backslash CaMeL Escape ) ) . append ( $STRING$ ) ;
rank: 485
score: 99.3782207782452
patch: case $NUMBER$ : sb . append ( $STRING$ ) . append ( c ) . append ( $STRING$ ) . append ( $STRING$ ) ;
rank: 485
score: 99.34787326388889
patch: case $STRING$ : sb . append ( s ) ; break ; default : break ; }
rank: 485
score: 99.32672119140625
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c , $STRING$ ) ;
rank: 485
score: 99.3093017578125
patch: break case $STRING$ : sb . append ( $STRING$ ) ; break ; }
rank: 485
score: 99.28821910511364
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( backslash CaMeL Escape , singlequote CaMeL Escape ) ;
rank: 485
score: 99.2610332782452
patch: case RIGHT : sb . append ( $STRING$ ) ; break ;
rank: 486
score: 99.38551682692308
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ; else sb . append ( c ) ;
rank: 486
score: 99.37798200334821
patch: case $STRING$ : sb . append ( Character . to CaMeL Char CaMeL Array ( c ) ) ; sb . append ( $STRING$ ) ; }
rank: 486
score: 99.34747869318181
patch: case Integer . MIN _ VALUE : case Integer . MAX _ VALUE : sb . append ( $STRING$ ) ;
rank: 486
score: 99.32614968039773
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( ( char ) s . char CaMeL At (
rank: 486
score: 99.30721706814236
patch: case $STRING$ ; case $STRING$ : sb . append ( backslash CaMeL Escape ) ; break ;
rank: 486
score: 99.2881568170363
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( ( String ) backslash CaMeL Escape ) ;
rank: 486
score: 99.24690464564732
patch: case ? $NUMBER$ : sb . append ( $STRING$ ) ; break ;
rank: 486
score: 99.20045381433823
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : else
rank: 487
score: 99.38531963641827
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder != null ) { sb . append ( output CaMeL Charset CaMeL Encoder ) ;
rank: 487
score: 99.37795681423611
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( Character . to CaMeL Lower CaMeL Case ( $STRING$ ) ) ; break ;
rank: 487
score: 99.34744601779514
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; default : ) ; }
rank: 487
score: 99.32600483141448
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; case $STRING$ :
rank: 487
score: 99.3084716796875
patch: case Character . EMPTY : sb . append ( $STRING$ ) ; break ;
rank: 487
score: 99.28814019097223
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : sb . append ( backslash CaMeL Escape ) ; break ;
rank: 487
score: 99.26033528645833
patch: case $STRING$ : sb . append ( $NUMBER$ ) ; break ; case $STRING$ : break ;
rank: 487
score: 99.24639892578125
patch: case $STRING$ ; else sb . append ( $STRING$ ) ; break ;
rank: 487
score: 99.2000244140625
patch: b . append ( $STRING$ ) ; sb . append ( $STRING$ ) ;
rank: 488
score: 99.3851906105324
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( output CaMeL Charset CaMeL Encoder ) . append ( $STRING$ ) ; break ;
rank: 488
score: 99.32534450954861
patch: case $STRING$ : String CaMeL Builder sb = new String CaMeL Builder ( , $STRING$ ) ;
rank: 488
score: 99.3079833984375
patch: case $STRING$ : { sb . append ( $STRING$ ) ; break ; } break ; }
rank: 488
score: 99.30614556206598
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) )
rank: 488
score: 99.28801359953704
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) ; sb . append ( backslash CaMeL Escape ) ; break ;
rank: 488
score: 99.26005045572917
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; } break ; ) ;
rank: 489
score: 99.38503793569711
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( sb . append ( doublequote CaMeL Escape ) ) ;
rank: 489
score: 99.37669959435097
patch: case STRING : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( c ) . append ( $STRING$ ) ;
rank: 489
score: 99.34722345525569
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c , $STRING$ ) ) ;
rank: 489
score: 99.30599609375
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode (
rank: 489
score: 99.28777581292229
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) ;
rank: 489
score: 99.26002332899306
patch: case $STRING$ : if ( sb . length ( ) > 0 ) { break ; }
rank: 489
score: 99.246044921875
patch: case 0 : sb . append ( $STRING$ ) ; break ; ) ;
rank: 489
score: 99.19950045072116
patch: case $STRING$ : out . append ( backslash CaMeL Escape ) ;
rank: 490
score: 99.38498159555289
patch: case $STRING$ : if ( singlequote CaMeL Escape . can CaMeL Encode ( c ) ) { sb . append ( c ) ;
rank: 490
score: 99.37662760416667
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ;
rank: 490
score: 99.34644664417614
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; ; ;
rank: 490
score: 99.324951171875
patch: case $STRING$ : sb . char CaMeL At ( i ) . append ( $STRING$ ) ;
rank: 490
score: 99.30710736443015
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; } else break ;
rank: 490
score: 99.25894869290866
patch: case null : sb . append ( $STRING$ ) ; break ;
rank: 490
score: 99.24600423177084
patch: case $STRING$ : sb . append ( $STRING$ ) ; ; { break ;
rank: 491
score: 99.3849385579427
patch: if ( output CaMeL Charset CaMeL Encoder != null && output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) )
rank: 491
score: 99.32475011488971
patch: case $STRING$ : sb . append ( ( int ) doublequote CaMeL Escape ) ;
rank: 491
score: 99.30696105957031
patch: } else { case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 491
score: 99.30576023910984
patch: case $STRING$ : sb . append ( c ) ; break ; case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ;
rank: 491
score: 99.2867202758789
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( true ) ;
rank: 491
score: 99.25892740885416
patch: case $STRING$ : String : sb . append ( $STRING$ ) ; break ;
rank: 491
score: 99.24182942708333
patch: case LINE : sb . append ( $STRING$ ) ; break ; break ;
rank: 491
score: 99.19906180245536
patch: case ) { case $STRING$ : sb . append ( c ) ;
rank: 492
score: 99.384765625
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( sb . append ( s . char CaMeL At ( i ) ) ) ;
rank: 492
score: 99.37602996826172
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) . append ( $STRING$ ) ; break ;
rank: 492
score: 99.345703125
patch: case Char CaMeL Sequence . STRING : sb . append ( $STRING$ ) ; break ; default : break ; }
rank: 492
score: 99.32461208767361
patch: case $STRING$ : System . append ( $STRING$ ) ; sb . append ( $STRING$ ) ;
rank: 492
score: 99.30588785807292
patch: } if ( sb . equals ( $STRING$ ) ) sb . append ( $STRING$ ) ;
rank: 492
score: 99.30571919102823
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( $STRING$ ) ; break ; case $STRING$ : sb . append ( $STRING$ ) ;
rank: 492
score: 99.28663917824075
patch: case $STRING$ : String CaMeL Builder sb = new String CaMeL Builder ( s . char CaMeL At ( i ) . char CaMeL At (
rank: 492
score: 99.25821940104167
patch: case $STRING$ : sb . append ( sb . trim ( ) ) ; break ; }
rank: 492
score: 99.2417724609375
patch: break ; case $STRING$ ? sb . append ( $STRING$ ) ; break ;
rank: 492
score: 99.19899338942308
patch: case $STRING$ : System . err . println ( $STRING$ ) ;
rank: 493
score: 99.38474684495192
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ; { sb . append ( $STRING$ ) ;
rank: 493
score: 99.37600708007812
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( c )
rank: 493
score: 99.34565734863281
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; default : }
rank: 493
score: 99.32440740411931
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( sb . length ( ) + 1 ) ;
rank: 493
score: 99.30583639705883
patch: break ; } else { sb . append ( $STRING$ ) ; break ; } }
rank: 493
score: 99.30522099247685
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String ( ) ) ; * /
rank: 493
score: 99.28655223357372
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder , c ) ; }
rank: 493
score: 99.198583984375
patch: case $STRING$ : sb . append ( backslash CaMeL Escape , break ) ;
rank: 494
score: 99.38471330915179
patch: case $STRING$ : sb . append ( ( ( String ) sb . to CaMeL String ( ) ) . to CaMeL String ( ) ) ;
rank: 494
score: 99.37590422453704
patch: case $NUMBER$ : sb . append ( $STRING$ ) . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; break ;
rank: 494
score: 99.34548770680146
patch: case 1 : sb . append ( $STRING$ ) ; break ; default : break ;
rank: 494
score: 99.32427687872024
patch: case $STRING$ : sb . append ( $STRING$ s . char CaMeL At ( i ) ) ; break ;
rank: 494
score: 99.30551326976104
patch: break . append ( $STRING$ ) ; } } sb . append ( $STRING$ ) ;
rank: 494
score: 99.30514427923387
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) && output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c )
rank: 494
score: 99.25777180989583
patch: case 1 : sb . append ( $STRING$ ) ; break ; case $STRING$ ; break ;
rank: 494
score: 99.24147385817308
patch: case T : sb . append ( $STRING$ ) ; break ;
rank: 494
score: 99.19849350873162
patch: case ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) {
rank: 495
score: 99.38471137152777
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( s . char CaMeL At ( i ) ) . append ( ) ;
rank: 495
score: 99.32378859747024
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( ( char ) $STRING$ ) ;
rank: 495
score: 99.30516860064338
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; i -- ; }
rank: 495
score: 99.2863410500919
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( doublequote CaMeL Escape , doublequote CaMeL Escape ) ;
rank: 495
score: 99.2576416015625
patch: case STRING : try { sb . append ( $STRING$ ) ; break ;
rank: 495
score: 99.2413818359375
patch: case DEFAULT : { sb . append ( $STRING$ ) ; break ; }
rank: 496
score: 99.38453892299107
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) ; }
rank: 496
score: 99.37558930495689
patch: case $NUMBER$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( c ) . to CaMeL Upper CaMeL Case ( ) ;
rank: 496
score: 99.32293701171875
patch: case $STRING$ : if ( doublequote CaMeL Escape ) sb . append ( $STRING$ ) ;
rank: 496
score: 99.3051398782169
patch: case $STRING$ ; sb . append ( $STRING$ ) ; break ; else break ; }
rank: 496
score: 99.30480085100446
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String ( ) ) ; break ; }
rank: 496
score: 99.2411639873798
patch: case $STRING$ ) sb . append ( $STRING$ ) ; break ;
rank: 496
score: 99.19812729779412
patch: case $STRING$ : backslash CaMeL Escape . append ( backslash CaMeL Escape ) ; break ;
rank: 497
score: 99.3755111694336
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; return sb . to CaMeL Upper CaMeL Case ( c ) ;
rank: 497
score: 99.34532335069444
patch: case $STRING$ : sb . append ( $STRING$ ) ; } break ; default : break ;
rank: 497
score: 99.30470904181985
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; else return c ;
rank: 497
score: 99.2861328125
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ;
rank: 497
score: 99.25626627604167
patch: case 1 : System . out . println ( $STRING$ ) ; break ;
rank: 497
score: 99.24085411658653
patch: case XML : sb . append ( $STRING$ ) ; break ;
rank: 497
score: 99.19737830528847
patch: case $STRING$ : sb . append ( $STRING$ + s ) ;
rank: 498
score: 99.34513716264205
patch: default : sb . append ( $STRING$ ) ; }
rank: 498
score: 99.32269965277777
patch: case $STRING$ : String CaMeL Builder sb = new String CaMeL Builder ( s . char CaMeL
rank: 498
score: 99.30427352241848
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder != null ) sb . append ( $STRING$ ) ; break ;
rank: 498
score: 99.25573052300348
patch: case $STRING$ : break ; sb . append ( $STRING$ ) ; break ; } break ;
rank: 498
score: 99.2408447265625
patch: break ; case $STRING$ : sb . append ( $STRING$ ) ; continue ;
rank: 498
score: 99.19647979736328
patch: line = s . char CaMeL At ( i ) ; switch ( c )
rank: 499
score: 99.3752677671371
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( $STRING$ ) ) ; return sb . to CaMeL Lower CaMeL Case ( ) ;
rank: 499
score: 99.34512183779762
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; default : sb . append ( ; }
rank: 499
score: 99.32238188244048
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , c ) ; } else {
rank: 499
score: 99.3045654296875
patch: case $STRING$ : this . sb . append ( $STRING$ ) ; break ; }
rank: 499
score: 99.30388671875
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) . append ( c ) ; break ;
rank: 499
score: 99.28598257211539
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( s ) ;
rank: 499
score: 99.25568983289931
patch: case $STRING$ : if ( $STRING$ . length ( ) > 0 ) break ; break ;
rank: 499
score: 99.24058430989584
patch: case ( $STRING$ ) : sb . append ( $STRING$ ) ; break ;
rank: 499
score: 99.1964111328125
patch: return c ; case $STRING$ : sb . append ( $STRING$ ) ;
rank: 500
score: 99.37506734913794
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) . to CaMeL Lower CaMeL Case ( ) . append ( $STRING$ ) ;
rank: 500
score: 99.34510149274554
patch: case $STRING$ : return $STRING$ ;
rank: 500
score: 99.30419921875
patch: sb . append ( $STRING$ ) . append ( sb . length ( ) ) ;
rank: 500
score: 99.285830078125
patch: String CaMeL Builder sb = new String CaMeL Builder ( s . length ( ) ) ; sb . append ( $STRING$ ) ;
rank: 500
score: 99.2402813251202
patch: case $STRING$ : logger . append ( $STRING$ ) ; break ;
rank: 500
score: 99.19606018066406
patch: case $STRING$ : sb . append ( backslash CaMeL Escape , $STRING$ ) ; }
rank: 501
score: 99.38374385127315
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; break ; case $STRING$ : sb . append ( backslash CaMeL Escape ) ;
rank: 501
score: 99.37506424753289
patch: case $STRING$ : s . append ( $STRING$ ) ; sb . append ( $STRING$ ) ; }
rank: 501
score: 99.32218424479167
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c + $STRING$ ) ;
rank: 501
score: 99.30363195082721
patch: sb . append ( $STRING$ ) . append ( sb . trim ( ) ) ;
rank: 501
score: 99.30356852213542
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; * / sb . append ( backslash CaMeL Escape ) ;
rank: 501
score: 99.28528941761364
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; break ; case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( $STRING$ ) ;
rank: 501
score: 99.24012169471153
patch: case Character . $STRING$ : sb . append ( $STRING$ ) ;
rank: 501
score: 99.195068359375
patch: case $STRING$ : sb . append ( sb . length ( ) ) ;
rank: 502
score: 99.38371475883152
patch: case $STRING$ : break ; case $STRING$ : sb . append ( sb . char CaMeL At ( i ) ) ;
rank: 502
score: 99.37468804253473
patch: case $STRING$ : return $STRING$ + Character . to CaMeL Lower CaMeL Case ( c ) ;
rank: 502
score: 99.34406594669117
patch: case $STRING$ : sb . append ( ( char ) c ) ; break ; }
rank: 502
score: 99.30351039341518
patch: case $STRING$ : sb . append ( $STRING$ ) ; break break ;
rank: 502
score: 99.30327497209821
patch: case $STRING$ : sb . append ( c ) ; break ; case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation (
rank: 502
score: 99.28512985641892
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : output CaMeL Charset CaMeL Encoder . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ;
rank: 502
score: 99.2549579326923
patch: case SIZE : sb . append ( $STRING$ ) ; break ;
rank: 502
score: 99.19471740722656
patch: case $STRING$ : sb . append ( backslash CaMeL Escape , c ) ; }
rank: 503
score: 99.30287388392857
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . c ) ;
rank: 503
score: 99.28491998487904
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( ) ;
rank: 503
score: 99.25479561941964
patch: case 1 : sb . append ( $STRING$ ) ; ; break ;
rank: 503
score: 99.23956298828125
patch: case case 1 : sb . append ( $STRING$ ) ; break ;
rank: 503
score: 99.19468778722427
patch: case $STRING$ : if ( s . char CaMeL At ( i ) == $STRING$ )
rank: 504
score: 99.37442753232759
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) . append ( $STRING$ ) . to CaMeL Char CaMeL Array ( ) ;
rank: 504
score: 99.34363374255952
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; } sb . append ( c ) ;
rank: 504
score: 99.32185363769531
patch: case $STRING$ : ( ( char ) $STRING$ ) . append ( $STRING$ ) ;
rank: 504
score: 99.30240071614584
patch: case 1 + 0 : sb . append ( $STRING$ ) ; break ;
rank: 504
score: 99.28470982142858
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( s , c ) ; }
rank: 504
score: 99.2547607421875
patch: case $STRING$ : if ( break ) { sb . append ( $STRING$ ) ; break ;
rank: 504
score: 99.23943684895833
patch: case DEFAULT : sb . append ( $STRING$ ) ; break ; break ;
rank: 504
score: 99.19406563895089
patch: case $STRING$ : sb . append ( $STRING$ ) ; } * /
rank: 505
score: 99.38329139122597
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( sb . append ( c ) ) ;
rank: 505
score: 99.37431784237133
patch: case $STRING$ : break ; case $STRING$ : sb . append ( c ) ; }
rank: 505
score: 99.34342687270221
patch: case $STRING$ : sb . append ( c ) ; break ; default : continue ;
rank: 505
score: 99.32133653428819
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else
rank: 505
score: 99.30259765625
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; + $STRING$ ) ;
rank: 505
score: 99.28445638020834
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; / /
rank: 505
score: 99.25403703962054
patch: case 1 : sb . append ( $STRING$ ) ; return break ;
rank: 505
score: 99.23907940204327
patch: case i : sb . append ( $STRING$ ) ; break ;
rank: 506
score: 99.38321627103366
patch: case $STRING$ : sb . append ( $STRING$ ) ; else sb . append ( sb . char CaMeL At ( i ) ) ;
rank: 506
score: 99.3742431640625
patch: case $STRING$ : s . append ( $STRING$ ) ; sb . append ( c ) ; break ;
rank: 506
score: 99.34306335449219
patch: case 0 : case 1 : sb . append ( $STRING$ ) ; break ;
rank: 506
score: 99.3025614420573
patch: case $STRING$ : String CaMeL Builder sb = new String CaMeL Builder ( s . index CaMeL Of ( $STRING$ ) ) ;
rank: 506
score: 99.28433340567129
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( output CaMeL Charset CaMeL Encoder . get ( c ) ) ;
rank: 506
score: 99.25394694010417
patch: case 1 : break ; case 1 : sb . append ( $STRING$ ) ; break ;
rank: 506
score: 99.23854166666666
patch: case $STRING$ + break : sb . append ( $STRING$ ) ; break ;
rank: 506
score: 99.19358607700893
patch: case - 1 : sb . append ( backslash CaMeL Escape ) ;
rank: 507
score: 99.38294813368056
patch: case s . char CaMeL At ( i ) : sb . append ( $STRING$ ) ; sb . append ( backslash CaMeL Escape ) ;
rank: 507
score: 99.37414129849138
patch: case Character . $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) . append ( $STRING$ ) ; break ;
rank: 507
score: 99.34231131417411
patch: case $STRING$ ) : sb . append ( $STRING$ ) ; break ;
rank: 507
score: 99.32050916883681
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( output CaMeL Charset ) ;
rank: 507
score: 99.3021991436298
patch: case $STRING$ : sb . append ( name ) ; break ;
rank: 507
score: 99.30201009114583
patch: sb . append ( $STRING$ ) . append ( c ) ; break ;
rank: 507
score: 99.28377532958984
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( false ) ;
rank: 507
score: 99.25375027126736
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case Character . $STRING$ ;
rank: 507
score: 99.19319661458333
patch: i ++ ) { case $STRING$ : sb . append ( $STRING$ ) ;
rank: 508
score: 99.34162055121527
patch: case $STRING$ : sb . append ( $STRING$ ) ; continue ; default : break ; }
rank: 508
score: 99.30182647705078
patch: case $STRING$ ? $STRING$ ] : sb . append ( $STRING$ ) ; break ;
rank: 508
score: 99.30174842247597
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation (
rank: 508
score: 99.28359522964016
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( backslash CaMeL Escape ) ;
rank: 508
score: 99.25364854600694
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; break ; break ; ;
rank: 508
score: 99.23825509207589
patch: case $STRING$ ; sb . append ( $STRING$ ) ; break ; ;
rank: 509
score: 99.38233483355978
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( sb . append ( $STRING$ ) ) ; break ;
rank: 509
score: 99.37334614415323
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; return sb . to CaMeL Upper CaMeL Case ( ) ;
rank: 509
score: 99.34125046502976
patch: default : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ; } }
rank: 509
score: 99.30167061941964
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : this . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation (
rank: 509
score: 99.28359243032095
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder , doublequote CaMeL Escape ) ; break ;
rank: 509
score: 99.25349934895833
patch: case STRING : sb . append ( $STRING$ ) ; break ; $STRING$ ; } break ;
rank: 509
score: 99.237646484375
patch: case $STRING$ ; try { sb . append ( $STRING$ ) ; break ;
rank: 509
score: 99.19277056525735
patch: case $STRING$ : sb . append ( $STRING$ , backslash CaMeL Escape ) ; break ;
rank: 510
score: 99.37329779730902
patch: case $STRING$ : break ; case $STRING$ : return sb . to CaMeL String ( ) ;
rank: 510
score: 99.34120178222656
patch: case $STRING$ : sb . append ( $STRING$ ) ; i ++ ; break ;
rank: 510
score: 99.3203125
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , s ) ;
rank: 510
score: 99.30156915838069
patch: if ( output CaMeL Charset CaMeL Encoder != null ) { sb . append ( $STRING$ ) ; break ; }
rank: 510
score: 99.28298715444711
patch: case $STRING$ : sb . append ( $STRING$ ) ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c , sb ) ;
rank: 510
score: 99.25336100260417
patch: case $STRING$ : sb . append ( 0 ) ; break ; break ;
rank: 511
score: 99.3818359375
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( s . char CaMeL At ( i ) ) . append ( c ) ;
rank: 511
score: 99.34117974175348
patch: case Character . ) : case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 511
score: 99.30150649126838
patch: append ( sb . to CaMeL Char CaMeL Array ( ) ) ; break ; }
rank: 511
score: 99.28290116159539
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder , sb . to CaMeL String ( ) ) ;
rank: 511
score: 99.25332302517361
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; break ; case 1 : break ;
rank: 511
score: 99.23678385416666
patch: $STRING$ ; case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 511
score: 99.19197845458984
patch: name = s . char CaMeL At ( i ) ; switch ( c )
rank: 512
score: 99.3817828634511
patch: case $STRING$ : sb . append ( c ) ; sb . append ( $STRING$ ) . append ( c ) ;
rank: 512
score: 99.37314789870689
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( $STRING$ ) . to CaMeL Upper CaMeL Case ( ) ;
rank: 512
score: 99.34113905164931
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; } } return $STRING$ ;
rank: 512
score: 99.3193359375
patch: case $STRING$ : if ( ! output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) {
rank: 512
score: 99.30141314338235
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( break ; break ;
rank: 512
score: 99.30140904017857
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) )
rank: 512
score: 99.2827392578125
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , backslash CaMeL Escape ) ;
rank: 512
score: 99.19161283052884
patch: case 0 : sb . append ( backslash CaMeL Escape ) ;
rank: 513
score: 99.3816796875
patch: case $STRING$ : sb . append ( sb . char CaMeL At ( i ) ) ; sb . append ( quote ) ;
rank: 513
score: 99.37297712053571
patch: case Character . $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( c ) . append ( $STRING$ ) ;
rank: 513
score: 99.3408203125
patch: case Token CaMeL Stream . ) : sb . append ( $STRING$ ) ; break ;
rank: 513
score: 99.30133415670956
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; else return $NUMBER$ ;
rank: 513
score: 99.28268432617188
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( backslash CaMeL Escape ) ; break ; case $STRING$
rank: 513
score: 99.25286187065973
patch: case $STRING$ : String $STRING$ = $STRING$ ; sb . append ( $STRING$ ) ; break ;
rank: 513
score: 99.19150612571023
patch: case null : sb . append ( $STRING$ ) ;
rank: 514
score: 99.3816669170673
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ; sb . append ( c ) ; }
rank: 514
score: 99.34071568080357
patch: case $STRING$ : sb . append ( Character . ) ; break ;
rank: 514
score: 99.31768035888672
patch: case $STRING$ : sb . case $STRING$ : sb . append ( $STRING$ ) ;
rank: 514
score: 99.30094401041667
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String ( ) ) ; sb . append ( backslash CaMeL Escape ) ; break ;
rank: 514
score: 99.30081176757812
patch: sb . append ( $STRING$ ) ; return sb . append ( $STRING$ ) ;
rank: 514
score: 99.28258463541667
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( c ) ) ; }
rank: 514
score: 99.25251600477431
patch: case $STRING$ : if ( sb . length ( ) > $NUMBER$ ) break ; break ;
rank: 514
score: 99.23629056490384
patch: case $STRING$ : sb . append ( $STRING$ ) ; if (
rank: 514
score: 99.19134990985577
patch: case $STRING$ : c = $STRING$ ; break ; case $STRING$ :
rank: 515
score: 99.38164924172794
patch: case $STRING$ : { sb . append ( $STRING$ ) . append ( c ) ;
rank: 515
score: 99.37229567307692
patch: case $NUMBER$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) . append ( $STRING$ ) ; }
rank: 515
score: 99.30067661830357
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( $STRING$ ) ;
rank: 515
score: 99.30036272321429
patch: case 0 ] : sb . append ( $STRING$ ) ; break ;
rank: 515
score: 99.28250558035714
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , s ) ;
rank: 515
score: 99.25233968098958
patch: case 1 : sb . append ( $STRING$ ) ; break ; break ; } break ;
rank: 515
score: 99.2362548828125
patch: break ; case STRING : sb . append ( $STRING$ ) ; break ;
rank: 515
score: 99.19101186899039
patch: case ( quote ) : sb . append ( $STRING$ ) ;
rank: 516
score: 99.38138703377017
patch: case $STRING$ : sb . append ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) ; sb . append ( backslash CaMeL Escape ) ;
rank: 516
score: 99.37228732638889
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( c ) . append ( $STRING$ ) ; }
rank: 516
score: 99.34049479166667
patch: case $STRING$ : sb . append ( c ) ; break ; } }
rank: 516
score: 99.31716086647727
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder != $STRING$ ) { sb . append ( $STRING$ ) ;
rank: 516
score: 99.30057956861413
patch: case $STRING$ : sb = new String CaMeL Builder ( s . char CaMeL At ( i ) ) ; break ;
rank: 516
score: 99.30004069010417
patch: case $STRING$ : sb . append ( $STRING$ ) ; } / * /
rank: 516
score: 99.23622483473558
patch: case $STRING$ ? sb . append ( $STRING$ ) : break ;
rank: 516
score: 99.19049835205078
patch: case $STRING$ : sb . append ( ( ( char ) $STRING$ ) ) ;
rank: 517
score: 99.38134087456598
patch: case quote : sb . append ( s . char CaMeL At ( i ) ) ;
rank: 517
score: 99.37226924189815
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) . break ;
rank: 517
score: 99.34040383731617
patch: default : sb . append ( $STRING$ ) ; break ; } } return $STRING$ ;
rank: 517
score: 99.30050838694854
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) && output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( backslash CaMeL Escape ) )
rank: 517
score: 99.29997702205883
patch: case $STRING$ + $STRING$ : sb . append ( $STRING$ ) ; break ; } }
rank: 517
score: 99.28247748480902
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( doublequote CaMeL Escape ) ; }
rank: 517
score: 99.23597063337054
patch: case 1 : sb . append ( $STRING$ ) ; { break ;
rank: 517
score: 99.1903076171875
patch: text . append ( $STRING$ ) ; sb . append ( $STRING$ ) ;
rank: 518
score: 99.38072445518092
patch: case $STRING$ : sb . append ( quote ) ; } sb . append ( $STRING$ ) ;
rank: 518
score: 99.3721923828125
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( Character . to CaMeL Char CaMeL Array ( c ) ) ; }
rank: 518
score: 99.34024251302084
patch: case Format . $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 518
score: 99.31704230057566
patch: if ( output CaMeL Charset CaMeL Encoder != null ) { sb . append ( quote ) ;
rank: 518
score: 99.30037689208984
patch: case $STRING$ : sb . append ( $STRING$ ) ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c . to CaMeL String ( ) ) ;
rank: 518
score: 99.28217022235577
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) ; sb . append ( doublequote CaMeL Escape ) ;
rank: 518
score: 99.235888671875
patch: append ( sb . append ( $STRING$ ) ) ; break ; $STRING$ ;
rank: 518
score: 99.1901611328125
patch: case $STRING$ || backslash CaMeL Escape : sb . append ( $STRING$ ) ;
rank: 519
score: 99.37192946213942
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( $STRING$ ) ) . append ( $STRING$ ) ; }
rank: 519
score: 99.28179931640625
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder , sb ) ;
rank: 519
score: 99.24942355685764
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; break ; ; break ;
rank: 519
score: 99.235498046875
patch: case Character . STRING : sb . append ( $STRING$ ) ; break ;
rank: 519
score: 99.18983459472656
patch: case EMPTY : sb . append ( $STRING$ ) ; break ; case $STRING$ :
rank: 520
score: 99.38067157451923
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( sb . char CaMeL At ( i ) ) ; }
rank: 520
score: 99.3718894675926
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; break ; default : break ; }
rank: 520
score: 99.33952062270221
patch: case $STRING$ : sb . append ( $STRING$ ; break ; case $STRING$ : break ;
rank: 520
score: 99.31634200246711
patch: case $STRING$ : sb . append ( $STRING$ + s . char CaMeL At ( i ) ;
rank: 520
score: 99.2994025735294
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( i ) ; }
rank: 520
score: 99.24922688802083
patch: case $STRING$ : break ; case ) : sb . append ( $STRING$ ) ; break ;
rank: 520
score: 99.189697265625
patch: case $STRING$ : sb [ i ] = backslash CaMeL Escape ;
rank: 521
score: 99.38029399671052
patch: case $STRING$ : sb . append ( ( String ) sb . append ( $STRING$ ) ) ;
rank: 521
score: 99.37183404737904
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) . append ( Character . to CaMeL Lower CaMeL Case ( ;
rank: 521
score: 99.316162109375
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( i ) ;
rank: 521
score: 99.30003943810097
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { sb . append ( s ) ;
rank: 521
score: 99.28115053530092
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( backslash CaMeL Escape , doublequote CaMeL Escape ) ; break ;
rank: 521
score: 99.24911159939236
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; else break ; $STRING$ ;
rank: 521
score: 99.23480631510417
patch: case Token . $STRING$ ; sb . append ( $STRING$ ) ; break ;
rank: 521
score: 99.18965911865234
patch: case FALSE : sb . append ( $STRING$ ) ; break ; case $STRING$ :
rank: 522
score: 99.37164503528226
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; return sb . to CaMeL Char CaMeL Array ( ) ;
rank: 522
score: 99.33889590992646
patch: case Char CaMeL Sequence . EMPTY : sb . append ( $STRING$ ) ; break ;
rank: 522
score: 99.31585015190973
patch: case $STRING$ + $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) ;
rank: 522
score: 99.28110036542338
patch: case $STRING$ : sb . append ( c ) ; break ; case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c ) ;
rank: 522
score: 99.2487548828125
patch: case $STRING$ : try : sb . append ( $STRING$ ) ; break ;
rank: 522
score: 99.23470052083333
patch: case 0 : sb . append ( $STRING$ ) ; return $STRING$ ; ;
rank: 522
score: 99.1894061748798
patch: case $STRING$ , $STRING$ : sb . append ( $STRING$ ) ;
rank: 523
score: 99.379638671875
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( output CaMeL Charset CaMeL Encoder . append ( sb , c ) ) ;
rank: 523
score: 99.33882649739583
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; default : throw ; }
rank: 523
score: 99.31498209635417
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( ) ;
rank: 523
score: 99.29970703125
patch: String CaMeL Builder sb = new String CaMeL Builder ( s . char CaMeL At ( i ) ) ; sb . append ( $STRING$ ) ; break ;
rank: 523
score: 99.28099106297348
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( doublequote CaMeL Escape ) ; singlequote CaMeL Escape
rank: 523
score: 99.24838053385416
patch: case $STRING$ : sb . append ( 0 + $STRING$ ) ; break ;
rank: 523
score: 99.18888092041016
patch: return str CaMeL Escape ; case $STRING$ : sb . append ( $STRING$ ) ;
rank: 524
score: 99.37120225694444
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; sb . append ( c ) ;
rank: 524
score: 99.3386981670673
patch: case $STRING$ : return sb . to CaMeL String ( ) ;
rank: 524
score: 99.31462860107422
patch: case $STRING$ : / * case $STRING$ : sb . append ( $STRING$ ) ;
rank: 524
score: 99.2994717684659
patch: sb . append ( $STRING$ ) ; break ; case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 524
score: 99.28086224724265
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , null ) ;
rank: 524
score: 99.24803059895834
patch: case STRING : break ; sb . append ( $STRING$ ) ; break ;
rank: 524
score: 99.1884521484375
patch: buf . append ( $STRING$ ) ; sb . append ( $STRING$ ) ;
rank: 525
score: 99.37953920717592
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( s . to CaMeL String ( ) ) . append ( $STRING$ ) ;
rank: 525
score: 99.37118417245371
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) . append ( $STRING$ ) ; continue ;
rank: 525
score: 99.33866613051471
patch: case Short . MIN _ VALUE : sb . append ( $STRING$ ) ; break ;
rank: 525
score: 99.28065814393939
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( s ) ; }
rank: 525
score: 99.24791541466347
patch: case $STRING$ : sb . append ( false ) ; break ;
rank: 525
score: 99.23426920572916
patch: case $STRING$ : sb . append ( $STRING$ - $STRING$ ) ; break ;
rank: 525
score: 99.18787493024554
patch: case $STRING$ : sb . append ( backslash CaMeL Escape , ) ;
rank: 526
score: 99.37896728515625
patch: case $STRING$ : sb . append ( backslash CaMeL Escape , s . char CaMeL At ( i ) ) ; break ;
rank: 526
score: 99.29933518629808
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; case $STRING$ : break ;
rank: 526
score: 99.28061018318965
patch: case $STRING$ : sb . append ( ( ( String ) s . char CaMeL At ( i ) ) . to CaMeL String ( ) ) ;
rank: 526
score: 99.24784633091518
patch: case 1 : return sb . append ( $STRING$ ) ; break ;
rank: 526
score: 99.23314615885417
patch: break ; ; $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 526
score: 99.18748256138393
patch: case $STRING$ : : sb . append ( backslash CaMeL Escape ) ;
rank: 527
score: 99.37062701056985
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( $STRING$ ) ) . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ;
rank: 527
score: 99.33787318638393
patch: case $STRING$ : case $STRING$ : break ; case $STRING$ : break ;
rank: 527
score: 99.31275132123162
patch: case $STRING$ ++ sb . length ( ) : sb . append ( $STRING$ ) ;
rank: 527
score: 99.28009905133929
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( backslash CaMeL Escape . to CaMeL String ( ) ) ; break ;
rank: 527
score: 99.24775390625
patch: case $STRING$ : else { sb . append ( $STRING$ ) ; break ;
rank: 527
score: 99.23296247209821
patch: ; case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 527
score: 99.18680826822917
patch: case String CaMeL Builder . quote : sb . append ( $STRING$ ) ;
rank: 528
score: 99.378564453125
patch: case $STRING$ : sb . append ( s . append ( $STRING$ ) ) ; sb . append ( backslash CaMeL Escape ) ;
rank: 528
score: 99.37041364397321
patch: case $STRING$ : sb . append ( $STRING$ ) ; } sb . append ( Character . to CaMeL Char CaMeL Array ( c ) ) ;
rank: 528
score: 99.29885864257812
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , doublequote CaMeL Escape , backslash CaMeL Escape , backslash CaMeL Escape ) ;
rank: 528
score: 99.23295084635417
patch: case Strings . $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 528
score: 99.18640899658203
patch: case DEFAULT : sb . append ( $STRING$ ) ; break ; case $STRING$ :
rank: 529
score: 99.3784375
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( s . append ( backslash CaMeL Escape ) ) ;
rank: 529
score: 99.37037941261575
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( $STRING$ ) ) . append ( c ) ; break ;
rank: 529
score: 99.33754595588235
patch: case $STRING$ : if ( Character . is CaMeL Digit ( c ) ) continue ;
rank: 529
score: 99.31191677517361
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( quote ) ; break ;
rank: 529
score: 99.29857556573276
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ; sb . append ( backslash CaMeL Escape ) ; break ;
rank: 529
score: 99.29742431640625
patch: case 1 : case 0 : sb . append ( $STRING$ ) ; break ;
rank: 529
score: 99.27963491586539
patch: case $STRING$ : sb . append ( $STRING$ ) ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb ) ; break ;
rank: 529
score: 99.24687848772321
patch: case $STRING$ : char sb . append ( $STRING$ ) ; break ;
rank: 529
score: 99.23273111979167
patch: case $STRING$ : sb . append ( $STRING$ ) ; if ( break ;
rank: 529
score: 99.18639322916667
patch: case 0 : sb . append ( backslash CaMeL Escape ) ; break ;
rank: 530
score: 99.37838179976852
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder != null ) { if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode (
rank: 530
score: 99.3702392578125
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( $STRING$ ) ) . append ( $STRING$ ) . append ( c ) ;
rank: 530
score: 99.31090630425348
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ + c ;
rank: 530
score: 99.29847476356908
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; break ; case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ;
rank: 530
score: 99.29689654181985
patch: break . to CaMeL String ( ) ; } sb . append ( $STRING$ ) ;
rank: 530
score: 99.27950032552083
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; break ; case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c ) ;
rank: 530
score: 99.24659016927083
patch: case STRING + $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 531
score: 99.37821451822917
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( sb . append ( sb . char CaMeL At ( i ) ) ) ;
rank: 531
score: 99.37017144097223
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) . append ( $STRING$ ) . to CaMeL String ( ) ;
rank: 531
score: 99.3358154296875
patch: case NULL : sb . append ( $STRING$ ) ; break ; default : break ;
rank: 531
score: 99.29823882004311
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } sb . append ( $STRING$ ) ;
rank: 531
score: 99.2965316772461
patch: sb . append ( $STRING$ ) . append ( $STRING$ ) ; } break ;
rank: 531
score: 99.27947503167229
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . get CaMeL String ( c ) ) ;
rank: 531
score: 99.24649752103366
patch: case ALL : sb . append ( $STRING$ ) ; break ;
rank: 531
score: 99.18606332632211
patch: case $STRING$ : sb . append ( $STRING$ | $STRING$ ) ;
rank: 532
score: 99.33572208180146
patch: case EOL : sb . append ( $STRING$ ) ; break ; default : break ;
rank: 532
score: 99.31025965073529
patch: case $STRING$ : sb . append ( s . length ( ) + $STRING$ ) ;
rank: 532
score: 99.279208984375
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) ; sb . append ( $STRING$ ) ; break ;
rank: 532
score: 99.23213704427083
patch: $STRING$ * case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 532
score: 99.18596942608173
patch: case $STRING$ : sb . append ( $STRING$ ) + $STRING$ ;
rank: 533
score: 99.37791015625
patch: case $STRING$ : sb . append ( c ) . append ( $STRING$ ) ; sb . append ( backslash CaMeL Escape ) ;
rank: 533
score: 99.30999755859375
patch: case $STRING$ ++ i ; case $STRING$ : sb . append ( $STRING$ ) ;
rank: 533
score: 99.29732259114583
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; break ; case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ;
rank: 533
score: 99.29515883501838
patch: } else { case $STRING$ : sb . append ( $STRING$ ) ; break ; }
rank: 533
score: 99.27919514973958
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; sb . append ( $STRING$ ) ; break ; case $STRING$
rank: 533
score: 99.246044921875
patch: case LINE : sb . append ( $STRING$ ) ; break ; $STRING$ ;
rank: 533
score: 99.23128836495536
patch: case DEFAULT : { sb . append ( $STRING$ ) ; break ;
rank: 533
score: 99.18592418323864
patch: case $NUMBER$ : sb . append ( quote ) ;
rank: 534
score: 99.37786506204044
patch: case $STRING$ : sb . append ( sb . append ( c ) ) ; }
rank: 534
score: 99.36948423032408
patch: case $STRING$ : s . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) . append ( $STRING$ ) ; break ;
rank: 534
score: 99.30913628472223
patch: case STRING : sb . append ( $STRING$ ) ; sb . append ( $STRING$ ) ;
rank: 534
score: 99.29509420955883
patch: sb . append ( $STRING$ + sb . length ( ) ) ; break ; }
rank: 534
score: 99.24573863636364
patch: case $STRING$ : append ( $STRING$ ) ; break ;
rank: 534
score: 99.23098318917411
patch: case 1 : sb . append ( $STRING$ ) ; break ; else
rank: 534
score: 99.18567708333333
patch: case $STRING$ : c = sb . char CaMeL At ( i ) ;
rank: 535
score: 99.3776346842448
patch: case $STRING$ : output CaMeL Charset CaMeL Encoder . append ( sb . char CaMeL At ( i ) ) ; } }
rank: 535
score: 99.36940160290948
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( Character . to CaMeL Upper CaMeL Case ( ) ) . append ( $STRING$ ) ;
rank: 535
score: 99.33502604166667
patch: case $STRING$ : break ; case $STRING$ : case $STRING$ : case $STRING$ :
rank: 535
score: 99.30904134114583
patch: case $STRING$ + $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ :
rank: 535
score: 99.297119140625
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; sb . append ( backslash CaMeL Escape . to CaMeL String ( ) ) ;
rank: 535
score: 99.29482852711396
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; ++ break ; }
rank: 535
score: 99.27898848684211
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( ) , c ) ;
rank: 535
score: 99.24543108258929
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; (
rank: 535
score: 99.18562455610795
patch: case ERROR : sb . append ( $STRING$ ) ;
rank: 536
score: 99.37711063508064
patch: if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append ( $STRING$ ) . append ( backslash CaMeL Escape ) ;
rank: 536
score: 99.36908922697368
patch: case $STRING$ : return s . to CaMeL Lower CaMeL Case ( ) . trim ( ) ;
rank: 536
score: 99.308837890625
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , ) ;
rank: 536
score: 99.29464901194854
patch: case 1 : sb . append ( $STRING$ ) ; break ; i ++ ; }
rank: 536
score: 99.27892736486487
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( s ) ) ;
rank: 536
score: 99.2452880859375
patch: case $STRING$ : sb . append ( $STRING$ ) ; ; break ; }
rank: 536
score: 99.22984212239584
patch: default : sb . append ( $STRING$ ) ; break ; } break ;
rank: 536
score: 99.18547821044922
patch: case quote : sb . append ( quote ) ; break ; case $STRING$ :
rank: 537
score: 99.37702047413794
patch: case $STRING$ : sb . append ( s . to CaMeL String ( ) ) . append ( $STRING$ ) . append ( backslash CaMeL Escape ) ;
rank: 537
score: 99.36818976151316
patch: case $STRING$ : return s . char CaMeL At ( i ) ; break ; case $STRING$ :
rank: 537
score: 99.33401489257812
patch: case $STRING$ : sb . append ( s [ i ] ) ; break ;
rank: 537
score: 99.30843777126736
patch: if ( doublequote CaMeL Escape != null ) { sb . append ( $STRING$ ) ;
rank: 537
score: 99.29680841619319
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , doublequote CaMeL Escape , backslash CaMeL Escape , singlequote CaMeL Escape ) ;
rank: 537
score: 99.29432024274554
patch: break ; } else { sb . append ( $STRING$ ) ; }
rank: 537
score: 99.27889791349085
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( output CaMeL Charset CaMeL Encoder ) ) ;
rank: 537
score: 99.24469401041667
patch: case $STRING$ : String ; sb . append ( $STRING$ ) ; break ;
rank: 537
score: 99.1853496844952
patch: case ( i ) : sb . append ( $STRING$ ) ;
rank: 538
score: 99.37691243489583
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( $STRING$ ) . append ( sb . char CaMeL At ( i ) ) ;
rank: 538
score: 99.36812097886029
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ;
rank: 538
score: 99.29596416766827
patch: case $STRING$ : String CaMeL Builder sb = new String CaMeL Builder ( s . char CaMeL At ( i ) ) ; / *
rank: 538
score: 99.29392903645834
patch: case 1 : sb . append ( $STRING$ ) ; break ; } }
rank: 538
score: 99.27853573069854
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( Charset CaMeL Encoder ) ;
rank: 538
score: 99.24461012620192
patch: case COMMA : sb . append ( $STRING$ ) ; break ;
rank: 538
score: 99.22891939603366
patch: case LABEL : sb . append ( $STRING$ ) ; break ;
rank: 539
score: 99.37644606370192
patch: case $STRING$ : sb . append ( sb . append ( $STRING$ ) ) . append ( $STRING$ ) . append ( c ) ;
rank: 539
score: 99.36795479910714
patch: case $STRING$ : case $STRING$ : sb . append ( c ) ;
rank: 539
score: 99.30606079101562
patch: case $STRING$ : break ; case $STRING$ : sb . append ( $NUMBER$ ) ;
rank: 539
score: 99.2784756747159
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( singlequote CaMeL Escape ) ; singlequote CaMeL Escape
rank: 539
score: 99.244384765625
patch: case $STRING$ : default : sb . append ( $STRING$ ) ; break ;
rank: 539
score: 99.22890218098958
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; }
rank: 539
score: 99.1843490600586
patch: case s : sb . append ( $STRING$ ) ; break ; case s :
rank: 540
score: 99.37626953125
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( ( s . char CaMeL At ( i ) ) ) ;
rank: 540
score: 99.36784144810268
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( Character . to CaMeL String ( c ) ) . append ( $STRING$ ) ;
rank: 540
score: 99.33338838465073
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; default : throw ;
rank: 540
score: 99.305908203125
patch: case $STRING$ : sb . append ( quote . to CaMeL String ( ) ) ;
rank: 540
score: 99.29580252511161
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation (
rank: 540
score: 99.2781120749081
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( charset , c ) ;
rank: 540
score: 99.228515625
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; return $STRING$ ; }
rank: 540
score: 99.1843017578125
patch: buffer . append ( $STRING$ ) ; sb . append ( $STRING$ ) ;
rank: 541
score: 99.37555609809027
patch: case $STRING$ : s . append ( s . char CaMeL At ( i ) ) ;
rank: 541
score: 99.3677978515625
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ; }
rank: 541
score: 99.33321126302083
patch: case $STRING$ : case $STRING$ : sb . append ( $STRING$ ) ; break ; } }
rank: 541
score: 99.293701171875
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; else return null ;
rank: 541
score: 99.2780052923387
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( c ) ) ; break ;
rank: 541
score: 99.24302571614584
patch: case $STRING$ : { sb . append ( $STRING$ ) ; ; break ;
rank: 541
score: 99.22762044270833
patch: case 1 case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 541
score: 99.18408203125
patch: case $STRING$ : sb . append ( c + $STRING$ ) ; break ;
rank: 542
score: 99.37472768930289
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ; } sb . append ( $STRING$ ) ;
rank: 542
score: 99.36714812247983
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ; return sb . to CaMeL Upper CaMeL Case ( ) ;
rank: 542
score: 99.33304850260417
patch: case $STRING$ ; break ; default : sb . append ( $STRING$ ) ; break ; }
rank: 542
score: 99.2946026141827
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; case $STRING$ : sb . append ( c ) ;
rank: 542
score: 99.2935431985294
patch: case $STRING$ : sb . append ( $STRING$ ) ; case $STRING$ : break ; }
rank: 542
score: 99.27766022858796
patch: case $STRING$ : sb . append ( $STRING$ ) ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c , c ) ; }
rank: 542
score: 99.24237932477679
patch: case $STRING$ : sb . append ( $STRING$ ) ; throw $NUMBER$ ;
rank: 542
score: 99.18394368489584
patch: case $STRING$ : sb . append ( ( ( char ) $STRING$ ) ;
rank: 543
score: 99.37472330729166
patch: if ( output CaMeL Charset CaMeL Encoder != null ) { if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { break ;
rank: 543
score: 99.36712831439394
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) . append ( $STRING$ ) . to CaMeL Lower CaMeL Case ( ) ;
rank: 543
score: 99.33281114366319
patch: case DEFAULT : sb . append ( $STRING$ ) ; break ; default : break ; }
rank: 543
score: 99.30515358664773
patch: case STRING : sb . append ( $STRING$ ) ;
rank: 543
score: 99.29456380208333
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; break ; case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation (
rank: 543
score: 99.27724783761161
patch: case $STRING$ : sb . append ( $STRING$ ) ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , c ) ;
rank: 543
score: 99.2408203125
patch: case $STRING$ : return sb . append ( $STRING$ ) ; } break ;
rank: 543
score: 99.2272061434659
patch: append ( $STRING$ ) ; break ; case $STRING$ :
rank: 543
score: 99.18361002604166
patch: case $STRING$ : sb . append ( $STRING$ + ( i ) ) ;
rank: 544
score: 99.37450267650463
patch: case $STRING$ : sb . append ( $STRING$ ) ; output CaMeL Charset CaMeL Encoder . append ( sb . append ( $STRING$ ) ) ;
rank: 544
score: 99.36685917295259
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) . append ( $STRING$ . to CaMeL Lower CaMeL Case ( ) ) ;
rank: 544
score: 99.3050178079044
patch: case $STRING$ : String CaMeL Builder case $STRING$ : sb . append ( $STRING$ ) ;
rank: 544
score: 99.29447174072266
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode (
rank: 544
score: 99.29275716145834
patch: break ; } else { sb . append ( $STRING$ ) ; break ;
rank: 544
score: 99.23982747395833
patch: case $STRING$ : continue ; sb . append ( $STRING$ ) ; break ;
rank: 544
score: 99.18360188802083
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; } else
rank: 545
score: 99.374296875
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; sb . append ( sb . append ( $STRING$ ) ) ;
rank: 545
score: 99.36664028825432
patch: case STRING : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( c ) . to CaMeL Lower CaMeL Case ( ) ;
rank: 545
score: 99.33195665147569
patch: case 1 : sb . append ( $STRING$ ) ; break ; default : break ; }
rank: 545
score: 99.30459415211396
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( $STRING$ ) ;
rank: 545
score: 99.2942315463362
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; else sb . append ( c ) ;
rank: 545
score: 99.29264068603516
patch: case 0 : sb . append ( $STRING$ ) ; break ; break ; }
rank: 545
score: 99.276953125
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( backslash CaMeL Escape , c ) ;
rank: 545
score: 99.2396484375
patch: case $STRING$ : sb . append ( 1 ) ; break ; $STRING$ ;
rank: 545
score: 99.18328857421875
patch: case $STRING$ : : sb . append ( backslash CaMeL Escape ) ; break ;
rank: 546
score: 99.3739601417824
patch: if ( output CaMeL Charset CaMeL Encoder != null && output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { break ;
rank: 546
score: 99.36652289496527
patch: case STRING : sb . append ( $STRING$ ) . append ( c ) ; break ;
rank: 546
score: 99.29356553819444
patch: if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append ( c ) ; break ; }
rank: 546
score: 99.29241536458333
patch: case $STRING$ > 0 : sb . append ( $STRING$ ) ; break ;
rank: 546
score: 99.27642578125
patch: case $STRING$ : return sb . to CaMeL String ( ) ; case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 546
score: 99.22452218191964
patch: case 1 : else sb . append ( $STRING$ ) ; break ;
rank: 546
score: 99.18309783935547
patch: case $STRING$ : sb . append ( ( byte ) ( c ) ) ;
rank: 547
score: 99.37391493055556
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) + $STRING$ ;
rank: 547
score: 99.36614358836206
patch: case $NUMBER$ : sb . append ( $STRING$ ) . append ( c ) . append ( $STRING$ ) . to CaMeL Lower CaMeL Case ( ) ;
rank: 547
score: 99.33017985026042
patch: case $STRING$ : break ; default : break ; } sb . append ( $STRING$ ) ;
rank: 547
score: 99.3026482077206
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( s . char CaMeL
rank: 547
score: 99.2935546875
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; case $STRING$ : sb . append ( backslash CaMeL Escape ) ; break ;
rank: 547
score: 99.29231770833333
patch: case $STRING$ + $STRING$ ; sb . append ( $STRING$ ) ; break ;
rank: 547
score: 99.23929850260417
patch: case $STRING$ : break ; append . append ( $STRING$ ) ; break ;
rank: 547
score: 99.22444370814732
patch: append ( sb . append ( $STRING$ ) ) ; } break ;
rank: 548
score: 99.37362234933036
patch: case $STRING$ : sb . append ( c ) . append ( $STRING$ ) . append ( sb . char CaMeL At ( i ) ) ;
rank: 548
score: 99.36613516971983
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( sb . to CaMeL Char CaMeL Array ( ) ) ;
rank: 548
score: 99.32978651258681
patch: case $STRING$ : sb . append ( String . value CaMeL Of ( $STRING$ ) ) ;
rank: 548
score: 99.29315370501894
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode (
rank: 548
score: 99.29201096754808
patch: case $STRING$ : sb . append ( $STRING$ ) . break ;
rank: 548
score: 99.27583582261029
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( doublequote CaMeL Escape , singlequote CaMeL Escape ) ;
rank: 548
score: 99.2239990234375
patch: append ( sb . append ( $STRING$ ) ) ; return $STRING$ ;
rank: 548
score: 99.18296461838942
patch: case $STRING$ : sb . append ( ( c ) ) ;
rank: 549
score: 99.3733203125
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder != null ) { sb . append ( backslash CaMeL Escape ) ; }
rank: 549
score: 99.32977294921875
patch: case $STRING$ : throw new Illegal CaMeL Argument CaMeL Exception ( ) ;
rank: 549
score: 99.30230712890625
patch: case $STRING$ : String c = $STRING$ ; sb . append ( $STRING$ ) ;
rank: 549
score: 99.27555847167969
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( new String CaMeL
rank: 549
score: 99.23831380208334
patch: case Character . LINE : sb . append ( $STRING$ ) ; break ;
rank: 549
score: 99.22367640904018
patch: i = $STRING$ ; sb . append ( $STRING$ ) ; break ;
rank: 549
score: 99.18274797712054
patch: case $STRING$ : sb . append ( ( char ) 1 ) ;
rank: 550
score: 99.36564418247768
patch: case $STRING$ : sb . append ( $STRING$ ) ; } sb . append ( Character . to CaMeL Lower CaMeL Case ( $STRING$ ) ) ;
rank: 550
score: 99.3295147235577
patch: case $STRING$ : sb . append ( $STRING$ ) ; ; }
rank: 550
score: 99.30193328857422
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( n ) ;
rank: 550
score: 99.29271065848214
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( sb . to CaMeL String ( ) ) ) ;
rank: 550
score: 99.29198346819196
patch: sb . append ( $STRING$ ) ; break ; else break ; }
rank: 550
score: 99.2235576923077
patch: case Token . $STRING$ : sb . append ( $STRING$ ) ;
rank: 550
score: 99.18270874023438
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; break ; }
rank: 551
score: 99.372099609375
patch: case $STRING$ : if ( Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append ( $STRING$ ) ;
rank: 551
score: 99.2925796508789
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation (
rank: 551
score: 99.29182434082031
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; ++ break ;
rank: 551
score: 99.27544642857143
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c , c ) ; }
rank: 551
score: 99.23745492788461
patch: case OR : sb . append ( $STRING$ ) ; break ;
rank: 551
score: 99.22329477163461
patch: case $STRING$ : sb . append ( $STRING$ ) ; return (
rank: 552
score: 99.36528162802419
patch: case $STRING$ : return Character . to CaMeL Upper CaMeL Case ( c ) ; case $STRING$ : return Character . to CaMeL Lower CaMeL Case ( c ) ;
rank: 552
score: 99.30143737792969
patch: case $STRING$ : sb . append ( 0 ) ; break ; case $STRING$ :
rank: 552
score: 99.29248860677083
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) && output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( (
rank: 552
score: 99.29158782958984
patch: case $STRING$ ] case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 552
score: 99.27537318638393
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset ) ;
rank: 552
score: 99.22313581194196
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ) ;
rank: 552
score: 99.18263346354166
patch: return quote ) ; case $STRING$ : sb . append ( $STRING$ ) ;
rank: 553
score: 99.32626681857639
patch: case $STRING$ : if ( Character . is CaMeL Digit ( c ) ) { break ;
rank: 553
score: 99.30066680908203
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( s , sb ) ;
rank: 553
score: 99.27515520368304
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , s ) ;
rank: 553
score: 99.23662860576923
patch: case NONE : sb . append ( $STRING$ ) ; break ;
rank: 553
score: 99.22169712611607
patch: case ~ $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 553
score: 99.18250383649554
patch: case : c = s . char CaMeL At ( i ) ;
rank: 554
score: 99.36508517795139
patch: case Character . char CaMeL At ( i ) : sb . append ( $STRING$ ) ;
rank: 554
score: 99.32612440321181
patch: case Integer . MIN : case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 554
score: 99.29963684082031
patch: case $STRING$ : sb . append ( $STRING$ ) + break ; case $STRING$ :
rank: 554
score: 99.29154205322266
patch: case $STRING$ + sb . append ( $STRING$ ) ; break ; } break ;
rank: 554
score: 99.236572265625
patch: case STRING : { sb . append ( $STRING$ ) ; break ; ;
rank: 554
score: 99.18198939732143
patch: case $STRING$ : sb . append ( ( byte ) $NUMBER$ ) ;
rank: 555
score: 99.36505998883929
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) . char CaMeL At ( i ) ) ; }
rank: 555
score: 99.32561577690973
patch: case $STRING$ : sb . append ( line ) ; break ; default : break ; }
rank: 555
score: 99.29923248291016
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( type ) ;
rank: 555
score: 99.29187405493951
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , doublequote CaMeL Escape , singlequote CaMeL Escape ) ; break ;
rank: 555
score: 99.29147338867188
patch: case Character . $STRING$ : sb . append ( $STRING$ ) ; break ; }
rank: 555
score: 99.27479905348558
patch: case $STRING$ : sb . append ( backslash CaMeL Escape , $STRING$ ) ; sb . append ( backslash CaMeL Escape ) ; break ;
rank: 555
score: 99.236474609375
patch: case $STRING$ : try ; sb . append ( $STRING$ ) ; break ;
rank: 555
score: 99.22091238839286
patch: case 1 : } sb . append ( $STRING$ ) ; break ;
rank: 555
score: 99.18170166015625
patch: case c : sb . append ( c ) ; break ; case $STRING$ :
rank: 556
score: 99.36504536290323
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( $STRING$ ) ) . append ( Character . to CaMeL Lower CaMeL Case ( ;
rank: 556
score: 99.29176613136575
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( $STRING$ ) ) { sb . append ( $STRING$ ) ;
rank: 556
score: 99.29095928485577
patch: sb . append ( $STRING$ ) ; break ; break ; }
rank: 556
score: 99.27447509765625
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( $STRING$ + c ) ;
rank: 556
score: 99.23636881510417
patch: case $NUMBER$ : if ( sb . append ( $STRING$ ) ) break ;
rank: 556
score: 99.18166281960227
patch: case $STRING$ : sb [ i ] = $STRING$ ;
rank: 557
score: 99.3702392578125
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ * /
rank: 557
score: 99.36501736111111
patch: case $STRING$ : break ; case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; break ;
rank: 557
score: 99.32450358072917
patch: case $STRING$ : break ; default : sb . append ( c ) ; break ; }
rank: 557
score: 99.29166412353516
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; System . out . append ( $STRING$ ) ; break ;
rank: 557
score: 99.23630593039773
patch: sb . append ( $STRING$ ) ; break ; ;
rank: 557
score: 99.21826171875
patch: case STRING : sb . append ( $STRING$ ) ; break ; }
rank: 557
score: 99.18161446707589
patch: return s ; case $STRING$ : sb . append ( $STRING$ ) ;
rank: 558
score: 99.36489572832662
patch: case $STRING$ : sb . append ( Character . to CaMeL Char CaMeL Array ( c ) ) ; return sb . to CaMeL Lower CaMeL Case ( ) ;
rank: 558
score: 99.32419840494792
patch: case $STRING$ : if ( Character . is CaMeL Digit ( c ) ) { continue ;
rank: 558
score: 99.29151785714286
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; break ; case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ;
rank: 558
score: 99.2900390625
patch: case $STRING$ > 0 ? sb . append ( $STRING$ ) ; break ;
rank: 558
score: 99.274111328125
patch: case $STRING$ : System . out . append ( $STRING$ ) ; break ; case $STRING$ : sb . append ( $STRING$ ) ;
rank: 558
score: 99.23487141927083
patch: sb . append ( $STRING$ ) ; break ; $STRING$ ; } break ;
rank: 558
score: 99.21781703404018
patch: else sb . append ( $STRING$ ) ; break ; } break ;
rank: 558
score: 99.18135579427083
patch: case : break ; case $STRING$ : sb . append ( $STRING$ ) ;
rank: 559
score: 99.3698046875
patch: case $STRING$ : output CaMeL Charset CaMeL Encoder . append ( sb . char CaMeL At ( i ) ) ; break ; }
rank: 559
score: 99.36485635080645
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) . append ( $STRING$ ) . to CaMeL Lower CaMeL Case ( ) ; break ;
rank: 559
score: 99.32389831542969
patch: case $STRING$ : break ; default : sb . append ( c ) ; }
rank: 559
score: 99.2892074584961
patch: case $STRING$ : sb . append ( $STRING$ ) ; count ++ ; break ;
rank: 559
score: 99.27403041294643
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ; sb . append ( doublequote CaMeL Escape ) ;
rank: 559
score: 99.23450646033653
patch: case $STRING$ : break ; case $STRING$ : break ; break ;
rank: 559
score: 99.18131256103516
patch: c = s . char CaMeL At ( i ) ; switch ( c )
rank: 560
score: 99.36922200520833
patch: case $STRING$ : sb . append ( s . to CaMeL String ( ) ) . append ( $STRING$ ) . append ( c ) ;
rank: 560
score: 99.36446126302083
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ;
rank: 560
score: 99.29086303710938
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; System . out . append ( backslash CaMeL Escape ) ;
rank: 560
score: 99.27392578125
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . str CaMeL Escape , doublequote CaMeL Escape ) ;
rank: 560
score: 99.23404634915866
patch: case 1 : sb . append ( $NUMBER$ ) ; break ;
rank: 560
score: 99.21774727957589
patch: case $STRING$ : sb . append ( $STRING$ ) ; return 1 ;
rank: 560
score: 99.18098449707031
patch: case $STRING$ : sb . append ( null ) ; break ; case $STRING$ :
rank: 561
score: 99.36913045247395
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( backslash CaMeL Escape ) ; }
rank: 561
score: 99.36432756696429
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( c ) . to CaMeL String ( ) ; }
rank: 561
score: 99.32298932756696
patch: case $STRING$ : sb . append ( c ) ; ; break ;
rank: 561
score: 99.28905436197917
patch: case $STRING$ + sb . append ( $STRING$ ) ; break ; break ;
rank: 561
score: 99.27376883370536
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , quote ) ;
rank: 561
score: 99.21772112165179
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; ?
rank: 561
score: 99.18069223257211
patch: case $STRING$ : sb . append ( c ) ; } else
rank: 562
score: 99.36904672475961
patch: case $STRING$ : sb . append ( ( String ) sb . char CaMeL At ( i ) ) . append ( $STRING$ ) ;
rank: 562
score: 99.36424967447917
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( $STRING$ ) ) . append ( $STRING$ ) . append ( $STRING$ ) ;
rank: 562
score: 99.3225341796875
patch: case $STRING$ : case $STRING$ : break ; case $STRING$ : case $STRING$ :
rank: 562
score: 99.2872314453125
patch: case 0 + $STRING$ : sb . append ( $STRING$ ) ; break ; }
rank: 562
score: 99.27369005926724
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( backslash CaMeL Escape ) ; sb . append ( $STRING$ ) ; break ;
rank: 562
score: 99.23362630208334
patch: case $STRING$ : return sb . append ( $STRING$ ) ; return $STRING$ ;
rank: 562
score: 99.21724759615384
patch: case byte : sb . append ( $STRING$ ) ; break ;
rank: 562
score: 99.18025970458984
patch: case static : sb . append ( $STRING$ ) ; break ; case $STRING$ :
rank: 563
score: 99.36892700195312
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( output CaMeL Charset CaMeL Encoder != null ) ;
rank: 563
score: 99.36411830357143
patch: case Character . $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) . append ( $STRING$ ) ; }
rank: 563
score: 99.29042496219758
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { sb . append ( $STRING$ ) ;
rank: 563
score: 99.28721110026042
patch: sb . append ( $STRING$ ) ; break ; } }
rank: 563
score: 99.27361886160715
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c ) ;
rank: 563
score: 99.21713256835938
patch: $STRING$ ; sb . append ( $STRING$ ) ; break ;
rank: 563
score: 99.1796875
patch: switch ( output CaMeL Charset CaMeL Encoder != null ) { case $STRING$ :
rank: 564
score: 99.36885127314815
patch: case $STRING$ : sb . append ( c ) ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; }
rank: 564
score: 99.36398216985887
patch: case $STRING$ : return Character . to CaMeL Lower CaMeL Case ( c ) ; case $STRING$ : return Character . to CaMeL Lower CaMeL Case ( c ) ;
rank: 564
score: 99.32229953342014
patch: case $STRING$ : sb . append ( $STRING$ ) ; ; break ; default : break ;
rank: 564
score: 99.29361979166667
patch: case $STRING$ : output CaMeL Charset CaMeL Encoder . append ( c ) ;
rank: 564
score: 99.28988444010416
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb ,
rank: 564
score: 99.28700608473558
patch: else { sb . append ( $STRING$ ) ; break ; }
rank: 564
score: 99.27350050403226
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( doublequote CaMeL Escape , c ) ;
rank: 564
score: 99.23292643229166
patch: case $STRING$ : return sb . append ( $STRING$ ) ; break ; ;
rank: 564
score: 99.21505301339286
patch: case 1 : case $STRING$ : sb . append ( $STRING$ ) ;
rank: 565
score: 99.36852010091145
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) . append ( c ) ; }
rank: 565
score: 99.36397298177083
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) . append ( $STRING$ ) . append ( c ) ;
rank: 565
score: 99.32120768229167
patch: case - 1 : sb . append ( $STRING$ ) ; break ; default : break ;
rank: 565
score: 99.28694370814732
patch: sb . append ( $STRING$ ) ; break ; } } break ;
rank: 565
score: 99.27341941550925
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( backslash CaMeL Escape ) ; sb . append ( $STRING$ ) ; break ;
rank: 565
score: 99.23276192801339
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; .
rank: 566
score: 99.3681171123798
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ; { sb . append ( c ) ;
rank: 566
score: 99.36386899594908
patch: case $NUMBER$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) . append ( $STRING$ ) ; break ;
rank: 566
score: 99.28957895132211
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( true ) ;
rank: 566
score: 99.27337091619319
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c ) ; break ;
rank: 566
score: 99.2130596454327
patch: finally { sb . append ( $STRING$ ) ; break ; }
rank: 566
score: 99.17940579927884
patch: case $STRING$ : System . out . println ( c ) ;
rank: 567
score: 99.28945025275735
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb ,
rank: 567
score: 99.28941999162946
patch: case $STRING$ : new $STRING$ : sb . append ( $STRING$ ) ;
rank: 567
score: 99.28683907645089
patch: break ; } } sb . append ( $STRING$ ) ; break ;
rank: 567
score: 99.2731415719697
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( $STRING$ ) ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ;
rank: 567
score: 99.23162434895833
patch: case $NUMBER$ : { sb . append ( $STRING$ ) ; break ; ;
rank: 567
score: 99.21302141462054
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; /
rank: 567
score: 99.17909240722656
patch: case c : sb . append ( quote ) ; break ; case $STRING$ :
rank: 568
score: 99.367919921875
patch: case $STRING$ : s . append ( $STRING$ ) ; sb . append ( c ) ;
rank: 568
score: 99.36321551983173
patch: case Char CaMeL Sequence . $STRING$ : sb . append ( $STRING$ ) . append ( c ) . append ( $STRING$ ) ; }
rank: 568
score: 99.31934407552083
patch: case $STRING$ : break ; case $STRING$ : break ; default : break ;
rank: 568
score: 99.28929876512096
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( $STRING$ ) ;
rank: 568
score: 99.2891616821289
patch: case $STRING$ : break ; case $STRING$ : sb . append ( s ) ;
rank: 568
score: 99.28650665283203
patch: case $STRING$ : sb . append ( $STRING$ ) ; } * * * /
rank: 568
score: 99.23098958333334
patch: case $NUMBER$ : sb . append ( $STRING$ + $NUMBER$ ) ; break ;
rank: 568
score: 99.21153913225446
patch: append ( sb . append ( $STRING$ ) ) ; break ; ;
rank: 568
score: 99.17899576822917
patch: case $STRING$ : out . append ( backslash CaMeL Escape ) ; break ;
rank: 569
score: 99.36292221966912
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( $STRING$ ) ) . append ( Character . to CaMeL Lower CaMeL Case ( $STRING$ ) ) ;
rank: 569
score: 99.31914813701923
patch: case $STRING$ : return $STRING$ ; case $STRING$ : return $STRING$ ;
rank: 569
score: 99.28911590576172
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c , sb ) ;
rank: 569
score: 99.2891045932112
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; sb . append ( $STRING$ ) ; }
rank: 569
score: 99.2727110327744
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String ( ) , c ) ; }
rank: 569
score: 99.23094075520834
patch: case STRING : $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 569
score: 99.2109883626302
patch: append ( sb . append ( $STRING$ ) ) ; }
rank: 569
score: 99.17880483774039
patch: case $STRING$ : sb . append ( c ) ; } }
rank: 570
score: 99.3677978515625
patch: case $STRING$ : sb . append ( $STRING$ ) ; else sb . append ( s . char CaMeL At ( i ) ) ;
rank: 570
score: 99.31776936848958
patch: case EOL : sb . append ( $STRING$ ) ; break ; default : break ; }
rank: 570
score: 99.28446960449219
patch: append ( sb . to CaMeL Char CaMeL Array ( ) ) ; break ;
rank: 570
score: 99.27257119455645
patch: case $STRING$ : sb . append ( c ) ; break ; case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( $STRING$ ) ;
rank: 570
score: 99.23026820591518
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; break ; )
rank: 570
score: 99.17872619628906
patch: case LABEL : sb . append ( $STRING$ ) ; break ; case $STRING$ :
rank: 571
score: 99.36749626608456
patch: case $STRING$ : sb . append ( output CaMeL Charset CaMeL Encoder ) ; break ;
rank: 571
score: 99.36211567540323
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( c ) . to CaMeL Upper CaMeL Case ( ) ; break ;
rank: 571
score: 99.31753200954861
patch: case DEFAULT : sb . append ( $STRING$ ) . append ( c ) ; break ;
rank: 571
score: 99.28848031850961
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( $STRING$ ) ; break ; case $STRING$ : break ;
rank: 571
score: 99.28403883713942
patch: case $STRING$ : sb . put ( $STRING$ ) ; break ;
rank: 571
score: 99.21022251674107
patch: char case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 571
score: 99.17862374441964
patch: case $STRING$ : String sb . append ( backslash CaMeL Escape ) ;
rank: 572
score: 99.36731409143519
patch: case $STRING$ : sb . append ( $STRING$ ) ; output CaMeL Charset CaMeL Encoder . append ( sb . append ( c ) ) ;
rank: 572
score: 99.31749810112848
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; default ; break ; }
rank: 572
score: 99.28819444444444
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( s . char CaMeL At ( i ) ) ) ;
rank: 572
score: 99.28392028808594
patch: case $STRING$ + sb . append ( $STRING$ ) ; break ; else break ;
rank: 572
score: 99.27252012310606
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , doublequote CaMeL Escape ) ; break ;
rank: 572
score: 99.22958608774039
patch: case TYPE : sb . append ( $STRING$ ) ; break ;
rank: 572
score: 99.1778564453125
patch: case ( s . char CaMeL At ( i ) ) { case $STRING$ :
rank: 573
score: 99.36671496975806
patch: case $STRING$ : output CaMeL Charset CaMeL Encoder . append ( s . char CaMeL At ( i ) ) ; sb . append ( backslash CaMeL Escape ) ;
rank: 573
score: 99.36094156901042
patch: case $STRING$ : case $STRING$ : case $STRING$ : sb . append ( $STRING$ ) ; }
rank: 573
score: 99.31745910644531
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; default ; }
rank: 573
score: 99.28807779947917
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; break ;
rank: 573
score: 99.28270721435547
patch: sb . append ( $STRING$ ) ; break ; } else { break ; }
rank: 573
score: 99.27251120174633
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( singlequote CaMeL Escape , singlequote CaMeL Escape ) ;
rank: 573
score: 99.2286865234375
patch: case $STRING$ : sb . append ( $STRING$ + 1 ) ; break ;
rank: 573
score: 99.20957728794643
patch: case 0 : sb . append ( $STRING$ ) ; { break ;
rank: 573
score: 99.17771809895834
patch: case backslash CaMeL Escape : sb . append ( $STRING$ ) ; break ;
rank: 574
score: 99.36631040219908
patch: case $STRING$ : sb . append ( c ) ; sb . append ( $STRING$ ) . append ( output CaMeL Charset CaMeL Encoder ) ;
rank: 574
score: 99.28793797348484
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; break ; case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation (
rank: 574
score: 99.28379128196023
patch: case $STRING$ : sb . append ( 0 ) ;
rank: 574
score: 99.27250614872685
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c ) ; }
rank: 574
score: 99.2279052734375
patch: case $STRING$ : sb . append ( $STRING$ ) ; else break ;
rank: 574
score: 99.17766927083333
patch: case $STRING$ : String CaMeL Builder . append ( $STRING$ ) ; break ;
rank: 575
score: 99.36061006433823
patch: case $STRING$ : if ( $STRING$ . equals ( c ) ) { break ; }
rank: 575
score: 99.31647135416667
patch: case LINE _ SEPARATOR : sb . append ( $STRING$ ) ; break ;
rank: 575
score: 99.282470703125
patch: case $STRING$ - 0 : sb . append ( $STRING$ ) ; break ;
rank: 575
score: 99.27246791294642
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( backslash CaMeL Escape ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c ) ;
rank: 575
score: 99.20914132254464
patch: case $STRING$ ; sb . append ( $STRING$ ) ; return $STRING$ ;
rank: 575
score: 99.17756652832031
patch: case - 1 : sb . append ( backslash CaMeL Escape ) ; break ;
rank: 576
score: 99.36055755615234
patch: case $NUMBER$ : sb . append ( $STRING$ ) . append ( c ) ;
rank: 576
score: 99.31571138822116
patch: case $STRING$ : case $STRING$ : case $STRING$ : return $STRING$ ;
rank: 576
score: 99.28263092041016
patch: case $STRING$ : ( ( char ) s ) . append ( $STRING$ ) ;
rank: 576
score: 99.20853365384616
patch: char $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 576
score: 99.17668151855469
patch: return $STRING$ ; case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 577
score: 99.3653564453125
patch: case $STRING$ : sb . append ( ( ( char ) output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) ;
rank: 577
score: 99.36045394405242
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) . append ( $STRING$ ) ; }
rank: 577
score: 99.31512451171875
patch: case $STRING$ : sb . append ( chars [ i ] ) ; break ;
rank: 577
score: 99.28204815204327
patch: append ( sb . to CaMeL String ( ) ) ; }
rank: 577
score: 99.27228655133929
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( ) . to CaMeL String ( ) ) ;
rank: 577
score: 99.22710309709821
patch: case $STRING$ : sb . append ( $STRING$ ) ; return ) ;
rank: 577
score: 99.20775349934895
patch: case case $STRING$ : sb . append ( $STRING$ ) ;
rank: 577
score: 99.17658996582031
patch: case $STRING$ : sb . append ( ( char ) ( $STRING$ ) ) ;
rank: 578
score: 99.36525315504808
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ; } sb . append ( c ) ;
rank: 578
score: 99.36015101841518
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) . to CaMeL Lower CaMeL Case ( ) . trim ( ) ;
rank: 578
score: 99.31443684895834
patch: case $STRING$ : case $STRING$ : sb . append ( $STRING$ ; break ;
rank: 578
score: 99.28733723958334
patch: String CaMeL Builder sb = new String CaMeL Builder ( s . char CaMeL At ( i ) ) ; return sb . to CaMeL String ( ) ;
rank: 578
score: 99.28021240234375
patch: case $STRING$ : sb . append ( char CaMeL At ( c ) ) ;
rank: 578
score: 99.22671274038461
patch: case $STRING$ : sb . append ( null ) ; break ;
rank: 578
score: 99.176513671875
patch: case $STRING$ : sb . append ( $STRING$ ) || backslash CaMeL Escape ;
rank: 579
score: 99.3600186434659
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ; sb . append ( Character . to CaMeL Lower CaMeL Case ( ;
rank: 579
score: 99.31436157226562
patch: case $STRING$ : sb . append ( $STRING$ ; break ; default : break ;
rank: 579
score: 99.27979278564453
patch: if ( c ) { case $STRING$ : sb . append ( $STRING$ ) ;
rank: 579
score: 99.27161516462054
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( s ) ; break ;
rank: 579
score: 99.22654622395834
patch: case $STRING$ : break ; case $STRING$ : break ; $STRING$ ; break ;
rank: 579
score: 99.20592322716347
patch: else sb . append ( $STRING$ ) ; break ; break ;
rank: 579
score: 99.1756103515625
patch: buffer . append ( backslash CaMeL Escape ) ; break ; case $STRING$ :
rank: 580
score: 99.36520070043103
patch: case $STRING$ : sb . append ( ( ( String ) sb . char CaMeL At ( i ) ) . to CaMeL String ( ) ) ;
rank: 580
score: 99.27954864501953
patch: case $STRING$ : String CaMeL Builder sb = new String CaMeL Builder ( s .
rank: 580
score: 99.27145138302365
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder ) ; sb . append ( $STRING$ ) ;
rank: 580
score: 99.175537109375
patch: case ) : sb . append ( backslash CaMeL Escape ) ;
rank: 581
score: 99.36497279575893
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( sb . append ( backslash CaMeL Escape ) ) ;
rank: 581
score: 99.28711809430804
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String ( ) , c ) ; }
rank: 581
score: 99.2714484719669
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset ) ;
rank: 581
score: 99.2257080078125
patch: case $STRING$ : break ; append ( $STRING$ ) ; break ; $STRING$ ;
rank: 581
score: 99.20548189603366
patch: case MAX : sb . append ( $STRING$ ) ; break ;
rank: 581
score: 99.1755126953125
patch: str CaMeL Escape . append ( $STRING$ ) ; break ; case $STRING$ :
rank: 582
score: 99.35895406788794
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( ) ) . append ( $STRING$ ) . append ( c ) ;
rank: 582
score: 99.28711725050404
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; else sb . append ( backslash CaMeL Escape ) ;
rank: 582
score: 99.28032684326172
patch: case $STRING$ : sb . append ( $STRING$ ) ; } return sb . ;
rank: 582
score: 99.2789306640625
patch: case $STRING$ ; case $STRING$ : sb . append ( backslash CaMeL Escape ) ;
rank: 582
score: 99.27110944475446
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( $STRING$ , c ) ;
rank: 582
score: 99.22542317708333
patch: sb . append ( $STRING$ ) ; break ; case $STRING$ : break ;
rank: 582
score: 99.20530482700893
patch: break ; ; case $STRING$ : sb . append ( $STRING$ ) ;
rank: 582
score: 99.1754150390625
patch: case . length ( ) : sb . append ( $STRING$ ) ;
rank: 583
score: 99.364755859375
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( sb . append ( backslash CaMeL Escape ) ) ; break ;
rank: 583
score: 99.35882778825432
patch: case $STRING$ : sb . append ( Character . to CaMeL Char CaMeL Array ( c ) . char CaMeL At ( i ) ) ; break ;
rank: 583
score: 99.31260681152344
patch: case $STRING$ ; break ; default : sb . append ( $STRING$ ) ; }
rank: 583
score: 99.27995082310268
patch: case $STRING$ : sb . append ( $STRING$ ) : break ; }
rank: 583
score: 99.27058628627232
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; break ; case $STRING$ : sb . append ( c ) ;
rank: 583
score: 99.224951171875
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case )
rank: 583
score: 99.20470319475446
patch: i = 0 ; sb . append ( $STRING$ ) ; break ;
rank: 583
score: 99.17539284446023
patch: case s : sb . append ( c ) ;
rank: 584
score: 99.3587646484375
patch: case $STRING$ : if ( Character . is CaMeL Upper CaMeL Case ( c ) )
rank: 584
score: 99.3108139038086
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; } * /
rank: 584
score: 99.28668409778226
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode (
rank: 584
score: 99.27719552176339
patch: case $STRING$ : sb . append ( s . char CaMeL At (
rank: 584
score: 99.27053397042411
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( $STRING$ + $STRING$ ) ;
rank: 584
score: 99.22439340444711
patch: final $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 584
score: 99.20459856305804
patch: case $STRING$ : sb . append ( $STRING$ $NUMBER$ ) ; break ;
rank: 584
score: 99.174853515625
patch: case ) : sb . append ( backslash CaMeL Escape ) ; break ;
rank: 585
score: 99.35853678385416
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( Character . to CaMeL Upper CaMeL Case ( $STRING$ ) ) . append ( $STRING$ ) ;
rank: 585
score: 99.31056315104166
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case ;
rank: 585
score: 99.28658353365384
patch: case IN : sb . append ( $STRING$ ) ; break ;
rank: 585
score: 99.27045036764706
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( this , c ) ;
rank: 585
score: 99.22409493582589
patch: case $STRING$ : sb . append ( $STRING$ ) ; throw break ;
rank: 585
score: 99.20456368582589
patch: case $STRING$ : sb . append ( $STRING$ ) ; return s ;
rank: 585
score: 99.1747295673077
patch: case $NUMBER$ : sb . append ( c ) ; break ;
rank: 586
score: 99.35849946120689
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ; break ;
rank: 586
score: 99.28633996212122
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c ) ; break ; case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 586
score: 99.27958984375
patch: case $STRING$ : sb . append ( $STRING$ ) ) ; break ; }
rank: 586
score: 99.27043071546052
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder , sb ) ;
rank: 586
score: 99.20413643973214
patch: char case $NUMBER$ : sb . append ( $STRING$ ) ; break ;
rank: 586
score: 99.17462627704327
patch: case $STRING$ : backslash CaMeL Escape ; break ; case $STRING$ :
rank: 587
score: 99.36347512637867
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) )
rank: 587
score: 99.35847024356617
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; sb . append ( Character . to CaMeL Lower CaMeL Case ( ; }
rank: 587
score: 99.3086669921875
patch: case $STRING$ : case $STRING$ : break ; case $STRING$ : return $STRING$ ;
rank: 587
score: 99.2792256673177
patch: break ; } } sb . append ( $STRING$ ) ;
rank: 587
score: 99.27638753255208
patch: case ? $STRING$ : sb . append ( $STRING$ ) ;
rank: 587
score: 99.27033253205128
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( backslash CaMeL Escape ) ) ;
rank: 587
score: 99.20371657151442
patch: append ( $STRING$ ) ; sb . append ( $STRING$ ) ;
rank: 587
score: 99.174462890625
patch: case $STRING$ : sb . append ( s . length ( ) ) ;
rank: 588
score: 99.36336263020833
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( output CaMeL Charset CaMeL Encoder ) . append ( $STRING$ ) ;
rank: 588
score: 99.3583984375
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ; } sb . append ( $STRING$ ) ;
rank: 588
score: 99.28565240675404
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; case $STRING$ : sb . append ( $STRING$ ) ;
rank: 588
score: 99.27916717529297
patch: } if ( sb . length ( ) > 0 ) { break ; }
rank: 588
score: 99.27016872829861
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . get CaMeL Charset ( ) ) ;
rank: 588
score: 99.22166090745192
patch: return $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 588
score: 99.20343487079327
patch: case VAR : sb . append ( $STRING$ ) ; break ;
rank: 588
score: 99.1742831143466
patch: switch ( backslash CaMeL Escape ) { case $STRING$ :
rank: 589
score: 99.36330942007211
patch: case $STRING$ : output CaMeL Charset CaMeL Encoder . append ( sb . char CaMeL At ( i ) ) ; break ; case $STRING$
rank: 589
score: 99.35836971507354
patch: case $STRING$ : return $STRING$ ; case $STRING$ : sb . append ( c ) ;
rank: 589
score: 99.28555297851562
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { sb . append ( $STRING$ ) ; }
rank: 589
score: 99.27888488769531
patch: case $STRING$ : sb . append ( $STRING$ ) ; } else return $STRING$ ;
rank: 589
score: 99.26995067107372
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( c ) , c ) ;
rank: 589
score: 99.20343017578125
patch: case $STRING$ : * sb . append ( $STRING$ ) ; break ;
rank: 589
score: 99.17357584635417
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; else {
rank: 590
score: 99.36292521158855
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( sb . append ( c ) ) ; }
rank: 590
score: 99.30704752604167
patch: case $STRING$ : sb . append ( c ; break ;
rank: 590
score: 99.28500471443965
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append ( quote ) ; break ;
rank: 590
score: 99.27843475341797
patch: case 1 : case 1 : sb . append ( $STRING$ ) ; break ;
rank: 590
score: 99.27447102864583
patch: case $STRING$ : sb . append ( ) . append ( $STRING$ ) ;
rank: 590
score: 99.26986989667338
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( ( char ) backslash CaMeL Escape ) ;
rank: 590
score: 99.22017996651786
patch: case $STRING$ : return ( sb . append ( $STRING$ ) ) ;
rank: 591
score: 99.36279296875
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( output CaMeL Charset CaMeL Encoder . append ( $STRING$ ) ) . append ( c ) ;
rank: 591
score: 99.35831124441964
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) . append ( $STRING$ ) ; break ; }
rank: 591
score: 99.3056411743164
patch: case $STRING$ : throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; }
rank: 591
score: 99.28486328125
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; String double@@
rank: 591
score: 99.27433013916016
patch: case $STRING$ : break ; case $STRING$ : sb . append ( 1 ) ;
rank: 591
score: 99.26933329814189
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder , output CaMeL Charset CaMeL Encoder ) ; }
rank: 591
score: 99.1723299893466
patch: case TRUE : sb . append ( $STRING$ ) ;
rank: 592
score: 99.36254119873047
patch: case $STRING$ : if ( this . output CaMeL Charset CaMeL Encoder != null ) { if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) )
rank: 592
score: 99.3582763671875
patch: case $STRING$ : if ( Character . is CaMeL Digit ( c ) )
rank: 592
score: 99.30413411458333
patch: case $STRING$ : return sb . to CaMeL Lower CaMeL Case ( ) ;
rank: 592
score: 99.27810668945312
patch: break . append ( $STRING$ ) ; } sb . append ( $STRING$ ) ;
rank: 592
score: 99.27421569824219
patch: case $STRING$ : System . append ( $STRING$ ) . append ( c ) ;
rank: 592
score: 99.2692930640244
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder ) ; output CaMeL Charset CaMeL Encoder . append ( c ) ;
rank: 592
score: 99.21737234933036
patch: case $STRING$ : ) sb . append ( $STRING$ ) ; break ;
rank: 592
score: 99.20207868303571
patch: append ( $STRING$ ) ; break ; case $STRING$ : return $STRING$ ;
rank: 593
score: 99.36232994342673
patch: if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append ( $STRING$ ) . append ( c ) ;
rank: 593
score: 99.35807969835069
patch: sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( c ) ;
rank: 593
score: 99.302978515625
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; default : )
rank: 593
score: 99.26911477481617
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c , sb ) ;
rank: 593
score: 99.21711948939732
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; append
rank: 594
score: 99.3622538248698
patch: case $STRING$ : sb . append ( s . to CaMeL String ( ) ) . append ( $STRING$ ) ; break ;
rank: 594
score: 99.2845230102539
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) && output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( this ) )
rank: 594
score: 99.277587890625
patch: case $STRING$ : sb . append ( $STRING$ ) ; } / * * /
rank: 594
score: 99.26902770996094
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( charset ) ;
rank: 594
score: 99.21692766462054
patch: case TYPE $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 594
score: 99.20132010323661
patch: case $STRING$ : sb . append ( $STRING$ ) ; return 0 ;
rank: 594
score: 99.1698467548077
patch: b . append ( quote ) ; break ; case $STRING$ :
rank: 595
score: 99.36206958912037
patch: case $STRING$ : sb . append ( output CaMeL Charset CaMeL Encoder ) ; break ; case $STRING$ : sb . append ( $STRING$ ) ;
rank: 595
score: 99.35769992404514
patch: case $STRING$ : return $STRING$ + Character . to CaMeL Upper CaMeL Case ( c ) ;
rank: 595
score: 99.28379991319444
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; sb . append ( c ) ; }
rank: 595
score: 99.27754211425781
patch: case $STRING$ : sb . append ( $STRING$ ) ; } return $STRING$ ) ;
rank: 595
score: 99.27189636230469
patch: case $STRING$ : char c = $STRING$ ; sb . append ( $STRING$ ) ;
rank: 595
score: 99.26833580280173
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( backslash CaMeL Escape ) ; sb . append ( backslash CaMeL Escape ) ; break ;
rank: 595
score: 99.21637834821429
patch: case $STRING$ : String sb = sb . append ( $STRING$ ) ;
rank: 595
score: 99.16957310267857
patch: case $STRING$ : sb . append ( c ) ; } * /
rank: 596
score: 99.36202687230603
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder != null && output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( backslash CaMeL Escape ) )
rank: 596
score: 99.35664876302083
patch: case $STRING$ : return s . char CaMeL At ( i ) . trim ( ) ;
rank: 596
score: 99.30186360677084
patch: case $STRING$ : if ( $STRING$ . equals ( c ) ) break ;
rank: 596
score: 99.28373637952302
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; }
rank: 596
score: 99.277294921875
patch: case 0 : sb . append ( $STRING$ ) ; break ; } }
rank: 596
score: 99.26816969651442
patch: case $STRING$ : sb . append ( ( ( String ) backslash CaMeL Escape ) . to CaMeL String ( ) ) ; break ;
rank: 596
score: 99.20121934678819
patch: else sb . append ( $STRING$ ) ;
rank: 596
score: 99.1690340909091
patch: case $STRING$ : $STRING$ . append ( $STRING$ ) ;
rank: 597
score: 99.36151713709677
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( backslash CaMeL Escape ) ) ;
rank: 597
score: 99.35651041666667
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( $STRING$ ) ) . append ( c ) . append ( $STRING$ ) ;
rank: 597
score: 99.30148111979166
patch: case Token . $STRING$ : sb . append ( c ) ; break ;
rank: 597
score: 99.28365384615384
patch: case $STRING$ : sb . append ( $STRING$ ) ; System .
rank: 597
score: 99.20089285714286
patch: case 0 : sb . append ( $STRING$ ) ; break ; else
rank: 598
score: 99.3610107421875
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( output CaMeL Charset CaMeL Encoder . append ( $STRING$ ) ) . append ( $STRING$ ) ;
rank: 598
score: 99.35650831653226
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) . append ( Character . to CaMeL Lower CaMeL Case ( ;
rank: 598
score: 99.30137634277344
patch: case $STRING$ : case $STRING$ : case $STRING$ : case $STRING$ : return $STRING$ ;
rank: 598
score: 99.27705078125
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; else }
rank: 598
score: 99.27050018310547
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( s , $STRING$ ) ;
rank: 598
score: 99.268115234375
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( singlequote CaMeL Escape ) ) ;
rank: 598
score: 99.2128155048077
patch: case $NUMBER$ : sb . append ( 0 ) ; break ;
rank: 598
score: 99.16719876802884
patch: case $STRING$ : sb . append ( c , $STRING$ ) ;
rank: 599
score: 99.36093374399039
patch: case $STRING$ : sb . append ( sb . char CaMeL At ( i ) ) ; else sb . append ( $STRING$ ) ;
rank: 599
score: 99.35646214978448
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ; sb . append ( $STRING$ ) ; break ;
rank: 599
score: 99.30111490885416
patch: case $STRING$ : return $STRING$ ; } sb . append ( $STRING$ ) ;
rank: 599
score: 99.28342087204392
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( backslash CaMeL Escape ) ;
rank: 599
score: 99.2693115234375
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c ) ; }
rank: 599
score: 99.26807512555804
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( $STRING$ , $STRING$ ) ;
rank: 599
score: 99.21262613932292
patch: sb . append ( $STRING$ ) ; break ; break ;
rank: 599
score: 99.20054408482143
patch: case ? 1 : sb . append ( $STRING$ ) ; break ;
rank: 599
score: 99.16697340745192
patch: case ( $STRING$ ) : sb . append ( $STRING$ ) ;
rank: 600
score: 99.35628509521484
patch: case STRING : sb . append ( $STRING$ ) ; break ; case STRING :
rank: 600
score: 99.27682495117188
patch: else { sb . append ( $STRING$ ) ; break ; } break ; }
rank: 600
score: 99.26798741957721
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c . to CaMeL String ( ) ) ;
rank: 600
score: 99.26783752441406
patch: case $STRING$ : sb . append ( $STRING$ , doublequote CaMeL Escape ) ;
rank: 601
score: 99.35608782087054
patch: case $STRING$ : return s . substring ( 0 , i ) ;
rank: 601
score: 99.29969024658203
patch: default : sb . append ( $STRING$ ) . append ( c ) ; }
rank: 601
score: 99.28315261314656
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . , c ) ;
rank: 601
score: 99.27605438232422
patch: case $STRING$ : case $STRING$ : sb . append ( $STRING$ ) ; } }
rank: 601
score: 99.26794782366072
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String ( ) . char CaMeL At (
rank: 601
score: 99.26713423295455
patch: case $STRING$ : System . append ( $STRING$ ) ;
rank: 601
score: 99.19874924879808
patch: break ; else sb . append ( $STRING$ ) ; break ;
rank: 602
score: 99.35600280761719
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) . append ( $STRING$ ) ; break ;
rank: 602
score: 99.29951985677083
patch: case $STRING$ : case $STRING$ : case $STRING$ : break ;
rank: 602
score: 99.28303156672297
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String ( ) ) ;
rank: 602
score: 99.26775360107422
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . get CaMeL String ( ) ) ;
rank: 602
score: 99.20958533653847
patch: case STATEMENT : sb . append ( $STRING$ ) ; break ;
rank: 602
score: 99.19844563802083
patch: case $STRING$ : sb . append ( $STRING$ ) ; {
rank: 603
score: 99.36021071213942
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) . append ( $STRING$ ) . append ( c ) ;
rank: 603
score: 99.29814147949219
patch: case $STRING$ : sb . append ( ) ; break ; default : break ;
rank: 603
score: 99.28259955512152
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) && output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( output CaMeL Charset CaMeL Encoder ) )
rank: 603
score: 99.27476399739584
patch: break ; } case $STRING$ : sb . append ( $STRING$ ) ; }
rank: 603
score: 99.26768493652344
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . str CaMeL Escape ) ; break ;
rank: 603
score: 99.20931570870536
patch: case $STRING$ : sb . append ( $STRING$ ) ; -- break ;
rank: 603
score: 99.197998046875
patch: case $STRING$ : sb . append ( $STRING$ ) { break ;
rank: 603
score: 99.1656494140625
patch: case 1 : sb . append ( backslash CaMeL Escape ) ;
rank: 604
score: 99.35990636488971
patch: case $STRING$ : { sb . append ( $STRING$ ) . append ( $STRING$ ) ;
rank: 604
score: 99.35569763183594
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) . char CaMeL At ( 0 ) ) . append ( $STRING$ ) ;
rank: 604
score: 99.29736328125
patch: case $STRING$ : throw new Unsupported CaMeL Operation CaMeL Exception ( ) ;
rank: 604
score: 99.28259647253788
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( $STRING$ ) ; break ; case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 604
score: 99.27469889322917
patch: case $STRING$ : sb . append ( $STRING$ ) ; throw null ; }
rank: 604
score: 99.26751077586206
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( backslash CaMeL Escape ) ; }
rank: 604
score: 99.2642352764423
patch: case $STRING$ : sb . append ( quote , $STRING$ ) ;
rank: 604
score: 99.20765904017857
patch: case $STRING$ : sb . append ( 0 ) ; break ; ;
rank: 604
score: 99.19772573617789
patch: break ; case 1 : sb . append ( $STRING$ ) ;
rank: 604
score: 99.16452026367188
patch: case $STRING$ : String sb . append ( $STRING$ ) ;
rank: 605
score: 99.35981580946181
patch: case quote : sb . append ( $STRING$ ) ; sb . append ( c ) ;
rank: 605
score: 99.29720306396484
patch: case 1 : case $NUMBER$ : sb . append ( $STRING$ ) ; break ;
rank: 605
score: 99.26745184536638
patch: case $STRING$ : String CaMeL Builder sb = new String CaMeL Builder ( sb . to CaMeL String ( ) . to CaMeL String ( ) ) ;
rank: 605
score: 99.26398577008929
patch: case $STRING$ : String CaMeL Builder sb . append ( $STRING$ ) ;
rank: 605
score: 99.20643028846153
patch: case static : sb . append ( $STRING$ ) ; break ;
rank: 605
score: 99.16396077473958
patch: switch ( c ) { case $STRING$ :
rank: 606
score: 99.3596484375
patch: case $STRING$ : sb . append ( sb . append ( backslash CaMeL Escape ) ) ; sb . append ( $STRING$ ) ;
rank: 606
score: 99.35481209590517
patch: case Character . $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) . append ( $STRING$ ) ; break ;
rank: 606
score: 99.29714965820312
patch: case $STRING$ : break ; case $STRING$ : case $STRING$ :
rank: 606
score: 99.27459309895833
patch: } case $STRING$ : sb . append ( $STRING$ ) ; break ; }
rank: 606
score: 99.1962890625
patch: case 0 : } sb . append ( $STRING$ ) ; break ;
rank: 607
score: 99.35948350694444
patch: case $STRING$ : String CaMeL Builder . append ( sb . char CaMeL At ( i ) ) ; sb . append ( $STRING$ ) ;
rank: 607
score: 99.29649251302084
patch: case Short . MIN : sb . append ( $STRING$ ) ; break ;
rank: 607
score: 99.27424621582031
patch: case $STRING$ case $STRING$ : sb . append ( $STRING$ ) ; break ; }
rank: 607
score: 99.26322719029018
patch: case $STRING$ : break $STRING$ : sb . append ( $STRING$ ) ;
rank: 607
score: 99.1962381998698
patch: case 1 : sb . append ( $STRING$ ) ; }
rank: 607
score: 99.16134878305289
patch: case $STRING$ : sb . append ( $STRING$ + i ) ;
rank: 608
score: 99.35407125538794
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( ) ) . append ( $STRING$ ) . append ( $STRING$ ) ;
rank: 608
score: 99.29629516601562
patch: case $STRING$ : case $STRING$ : return sb . to CaMeL String ( ) ;
rank: 608
score: 99.28196364182692
patch: case NO : sb . append ( $STRING$ ) ; break ;
rank: 608
score: 99.27359008789062
patch: case $STRING$ : sb . append ( $STRING$ ) ; continue ; else break ;
rank: 608
score: 99.2624981219952
patch: case $STRING$ + s . char CaMeL At ( i ) ;
rank: 608
score: 99.20425851004464
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; boolean
rank: 608
score: 99.19472092848558
patch: break ; case $NUMBER$ : sb . append ( $STRING$ ) ;
rank: 608
score: 99.16057794744319
patch: case $STRING$ : String . append ( $STRING$ ) ;
rank: 609
score: 99.35890355603448
patch: case $STRING$ : output CaMeL Charset CaMeL Encoder . append ( sb . char CaMeL At ( i ) ) ; sb . append ( quote ) ;
rank: 609
score: 99.35374540441177
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) . to CaMeL Lower CaMeL Case ( ) ; }
rank: 609
score: 99.29625701904297
patch: case $STRING$ : case $STRING$ : sb . append ( $NUMBER$ ) ; break ;
rank: 609
score: 99.27354431152344
patch: case $STRING$ ] ? $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 609
score: 99.26694808467742
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( output CaMeL Charset CaMeL Encoder . to CaMeL Hex CaMeL String ( c ) ) ;
rank: 609
score: 99.260888671875
patch: case $STRING$ : throw new $STRING$ : sb . append ( $STRING$ ) ;
rank: 609
score: 99.20412034254808
patch: case $STRING$ : sb . append ( EOL ) ; break ;
rank: 610
score: 99.35354434742646
patch: case $STRING$ : if ( $STRING$ . equals CaMeL Ignore CaMeL Case ( c ) )
rank: 610
score: 99.29598999023438
patch: case $STRING$ : sb . append ( $STRING$ ) ; $STRING$ ; break ; }
rank: 610
score: 99.28177315848214
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) && output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { break ;
rank: 610
score: 99.27349090576172
patch: case $STRING$ ] : sb . append ( $STRING$ ) ; break ; break ;
rank: 610
score: 99.26694020917338
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( s ) ;
rank: 610
score: 99.16022283380681
patch: case quote : sb . append ( c ) ;
rank: 611
score: 99.35876953125
patch: case $NUMBER$ : sb . append ( s . char CaMeL At ( i ) ) ; sb . append ( $STRING$ ) ;
rank: 611
score: 99.35289655412946
patch: case $STRING$ : return s . char CaMeL At ( i ) ; case $STRING$ : return s . to CaMeL Lower CaMeL Case ( ) ;
rank: 611
score: 99.29595947265625
patch: case $STRING$ : break ; case $STRING$ : break ; default : break ; }
rank: 611
score: 99.28158365885416
patch: case $STRING$ : sb . append ( str CaMeL Escape ) ; break ;
rank: 611
score: 99.27256673177084
patch: case $STRING$ : sb . append ( $STRING$ ) ; } else break ;
rank: 611
score: 99.26681930954392
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder , singlequote CaMeL Escape ) ; break ;
rank: 611
score: 99.25991586538461
patch: case $STRING$ : sb . append ( $STRING$ ) + $STRING$ :
rank: 611
score: 99.20390101841518
patch: case $STRING$ : String sb . append ( $STRING$ ) ; break ;
rank: 611
score: 99.16000366210938
patch: case $STRING$ : sb . append ( $STRING$ ] ) ;
rank: 612
score: 99.35769217354911
patch: case $STRING$ : sb . append ( sb . char CaMeL At ( i ) ) . append ( $STRING$ ) . append ( c ) ;
rank: 612
score: 99.2957763671875
patch: case $STRING$ : return $STRING$ ; default : sb . append ( $STRING$ ) ;
rank: 612
score: 99.28152781519397
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; sb . append ( c ) ; }
rank: 612
score: 99.26674623842592
patch: case $STRING$ : sb . append ( $STRING$ ) ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( s , c ) ; }
rank: 612
score: 99.2037353515625
patch: $STRING$ : : sb . append ( $STRING$ ) ; break ;
rank: 612
score: 99.19362095424107
patch: case $NUMBER$ : sb . append ( $STRING$ $STRING$ ) ; break ;
rank: 612
score: 99.1599872295673
patch: case NOT : sb . append ( backslash CaMeL Escape ) ;
rank: 613
score: 99.357666015625
patch: if ( output CaMeL Charset CaMeL Encoder != null && output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append ( quote ) ;
rank: 613
score: 99.29544067382812
patch: case $STRING$ : sb . append ( c ) ; break ; } break ;
rank: 613
score: 99.28116861979167
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; sb . append ( $STRING$ ) ; }
rank: 613
score: 99.27212524414062
patch: break . append ( $STRING$ ) ; break . append ( $STRING$ ) ; }
rank: 613
score: 99.25858248197116
patch: case $STRING$ + $STRING$ : sb . append ( c ) ;
rank: 613
score: 99.20350060096153
patch: append ( sb . equals ( $STRING$ ) ) ; break ;
rank: 613
score: 99.1935283954327
patch: case $STRING$ ++ sb . append ( $STRING$ ) ; break ;
rank: 613
score: 99.15859750600961
patch: case ( c ) : sb . append ( c ) ;
rank: 614
score: 99.35706922743056
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ; backslash CaMeL Escape . append ( $STRING$ ) ;
rank: 614
score: 99.35186767578125
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) . append ( $STRING$ ) . append ( $STRING$ ) ; break ;
rank: 614
score: 99.27211216517857
patch: sb . append ( $STRING$ ) . append ( $STRING$ ) ; }
rank: 614
score: 99.26656668526786
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c , $STRING$ ) ;
rank: 614
score: 99.20259312220982
patch: append < $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 614
score: 99.19308471679688
patch: } case $STRING$ : sb . append ( $STRING$ ) ;
rank: 614
score: 99.15857872596153
patch: case $NUMBER$ : sb . append ( quote ) ; break ;
rank: 615
score: 99.2929443359375
patch: case $STRING$ : break ; case $STRING$ : case $STRING$ : return $STRING$ ;
rank: 615
score: 99.28104771205358
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder ) ;
rank: 615
score: 99.27146218039773
patch: break . append ( $STRING$ ) ; break ; }
rank: 615
score: 99.2661865234375
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . str CaMeL Escape ) ;
rank: 615
score: 99.25724283854167
patch: if ( c != $STRING$ ) { sb . append ( $STRING$ ) ;
rank: 615
score: 99.20213317871094
patch: case $STRING$ : break ; break ;
rank: 615
score: 99.19200788225446
patch: case 0 : case $STRING$ : sb . append ( $STRING$ ) ;
rank: 615
score: 99.15786508413461
patch: sb . append ( $STRING$ ) ; break ; case $STRING$ :
rank: 616
score: 99.29229266826923
patch: case $STRING$ : sb . append ( format ) ; break ;
rank: 616
score: 99.27074381510417
patch: case $STRING$ : sb . append ( $STRING$ ) ; } return s ;
rank: 616
score: 99.20192173549107
patch: case STRING : return sb . append ( $STRING$ ) ; break ;
rank: 616
score: 99.15716083233173
patch: case $STRING$ : $STRING$ . append ( backslash CaMeL Escape ) ;
rank: 617
score: 99.35688308189656
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder != null ) { sb . append ( s . char CaMeL At ( i ) ) ;
rank: 617
score: 99.35049258961396
patch: case $NUMBER$ : return s . char CaMeL At ( i ) ; case $NUMBER$ :
rank: 617
score: 99.2915283203125
patch: case $STRING$ : return sb . to CaMeL Char CaMeL Array ( ) ;
rank: 617
score: 99.27063802083333
patch: case $STRING$ + n : sb . append ( $STRING$ ) ; break ;
rank: 617
score: 99.25196940104166
patch: case $STRING$ + backslash CaMeL Escape : sb . append ( $STRING$ ) ;
rank: 617
score: 99.20172588641827
patch: case MIN : sb . append ( $STRING$ ) ; break ;
rank: 617
score: 99.1907246907552
patch: case $STRING$ sb . append ( $STRING$ ) ; break ;
rank: 617
score: 99.15393938337054
patch: case $STRING$ : sb . append ( ( String ) s ) ;
rank: 618
score: 99.35015869140625
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ; return sb . to CaMeL Upper CaMeL Case ( c ) ;
rank: 618
score: 99.29124959309895
patch: case $STRING$ : break ; case $STRING$ : return $STRING$ ;
rank: 618
score: 99.27985382080078
patch: case $STRING$ : sb . append ( $STRING$ ) ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String ( ) ) ; break ;
rank: 618
score: 99.27047293526786
patch: case EOF : sb . append ( $STRING$ ) ; break ; }
rank: 618
score: 99.25107046274039
patch: case $STRING$ : sb . append ( $STRING$ ) + break ;
rank: 618
score: 99.20165143694196
patch: append ( $STRING$ + sb . trim ( ) ) ; break ;
rank: 619
score: 99.35616048177083
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; break ;
rank: 619
score: 99.34979248046875
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( $STRING$ ) ) ; sb . append ( $STRING$ ) ; }
rank: 619
score: 99.27968052455357
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { sb . append ( $STRING$ ) ; } }
rank: 619
score: 99.26554581925676
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . new CaMeL String ( c ) ) ;
rank: 619
score: 99.25082397460938
patch: case $STRING$ : sb . append ( $STRING$ $STRING$ ) ;
rank: 619
score: 99.20083182198661
patch: case 0 : sb . append ( $STRING$ ) ; break ; $STRING$
rank: 619
score: 99.1892559344952
patch: case line : sb . append ( $STRING$ ) ; break ;
rank: 620
score: 99.35561186691811
patch: if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append ( $STRING$ ) . append ( $STRING$ ) ;
rank: 620
score: 99.34970703125
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( $STRING$ ) ) . append ( $STRING$ ) . append ( c ) ;
rank: 620
score: 99.28924153645833
patch: case $STRING$ : $STRING$ : sb . append ( c ) ; break ;
rank: 620
score: 99.27953197337963
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( s ) ) { sb . append ( $STRING$ ) ;
rank: 620
score: 99.27030436197917
patch: case $STRING$ : break ; } } sb . append ( $STRING$ ) ;
rank: 620
score: 99.20036097935268
patch: case STRING $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 620
score: 99.18890380859375
patch: case 0 : else sb . append ( $STRING$ ) ; break ;
rank: 620
score: 99.15312848772321
patch: case $STRING$ : sb . append ( $STRING$ ) ; + c ;
rank: 621
score: 99.2794189453125
patch: case $STRING$ : sb . append ( value ) ; break ;
rank: 621
score: 99.26964393028847
patch: case $STRING$ : sb . add ( $STRING$ ) ; break ;
rank: 621
score: 99.26550686743951
patch: case $STRING$ : sb . append ( $STRING$ ) ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String ( ) ) ; }
rank: 621
score: 99.18849400111607
patch: case $STRING$ : return $STRING$ ; sb . append ( $STRING$ ) ;
rank: 621
score: 99.15230618990384
patch: s . append ( $STRING$ ) ; break ; case $STRING$ :
rank: 622
score: 99.34946114676339
patch: case $STRING$ : case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) . append ( $STRING$ ) ;
rank: 622
score: 99.26927839006696
patch: case 1 ] : sb . append ( $STRING$ ) ; break ;
rank: 622
score: 99.26520182291667
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { sb . append ( backslash CaMeL Escape ) ; break ;
rank: 622
score: 99.19879150390625
patch: case STRING : sb . append ( $STRING$ ) ; return $STRING$ ;
rank: 622
score: 99.18808218149039
patch: case false : sb . append ( $STRING$ ) ; break ;
rank: 622
score: 99.15192522321429
patch: case $STRING$ : sb . append ( ( char ) s ) ;
rank: 623
score: 99.35434907058189
patch: if ( output CaMeL Charset CaMeL Encoder != null ) { if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( backslash CaMeL Escape ) )
rank: 623
score: 99.349365234375
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( ) ) . append ( $STRING$ ) . append ( c ) ;
rank: 623
score: 99.28669956752232
patch: case $STRING$ : case $STRING$ :
rank: 623
score: 99.27913936491936
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { sb . append ( c ) ;
rank: 623
score: 99.26923076923077
patch: case char : sb . append ( $STRING$ ) ; break ;
rank: 623
score: 99.26502574573864
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( true ) ; }
rank: 623
score: 99.24817708333333
patch: ( c ) { case $STRING$ : sb . append ( $STRING$ ) ;
rank: 623
score: 99.19780622209821
patch: case $STRING$ : . append ( $STRING$ ) ; break ; $STRING$ ;
rank: 624
score: 99.348779296875
patch: case $NUMBER$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( c ) . to CaMeL Lower CaMeL Case ( ) ; }
rank: 624
score: 99.28649088541667
patch: case $STRING$ : if ( $STRING$ . equals ( c ) ) continue ;
rank: 624
score: 99.26885579427083
patch: * case $STRING$ : sb . append ( $STRING$ ) ; break ; }
rank: 624
score: 99.2650082236842
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( ) ) ; break ;
rank: 624
score: 99.247705078125
patch: case $STRING$ : sb . append ( $STRING$ ) + backslash CaMeL Escape ;
rank: 624
score: 99.15183668870192
patch: case $STRING$ : sb . append ( c + quote ) ;
rank: 625
score: 99.35413411458333
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( output CaMeL Charset CaMeL Encoder ) . append ( c ) ;
rank: 625
score: 99.34766438802083
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; return sb . to CaMeL String ( ) ; }
rank: 625
score: 99.27898700420673
patch: case $STRING$ : sb . append ( $STRING$ ) ; / *
rank: 625
score: 99.26461087740384
patch: case $STRING$ : sb . append ( doublequote CaMeL Escape ) ; break ; case $STRING$ : sb . append ( $STRING$ ) ;
rank: 625
score: 99.15149797712054
patch: case $STRING$ : sb . append ( ( int ) quote ) ;
rank: 626
score: 99.35412203881049
patch: case $STRING$ : output CaMeL Charset CaMeL Encoder . append ( $STRING$ ) ; break ; case $STRING$ : output CaMeL Charset CaMeL Encoder . append ( c ) ;
rank: 626
score: 99.34724934895833
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( Character . to CaMeL Char CaMeL Array ( c ) ) ;
rank: 626
score: 99.28511555989583
patch: case Integer . MIN _ VALUE : sb . append ( $STRING$ ) ;
rank: 626
score: 99.2787353515625
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ; break ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation (
rank: 626
score: 99.2450439453125
patch: case $STRING$ : sb = s . char CaMeL At ( i ) ;
rank: 626
score: 99.1955078125
patch: $STRING$ . append ( $STRING$ ) ; break ;
rank: 626
score: 99.18685913085938
patch: $STRING$ + sb . append ( $STRING$ ) ; break ;
rank: 626
score: 99.14998953683036
patch: case $STRING$ : sb . append ( $STRING$ ) ; + $STRING$ ;
rank: 627
score: 99.34693224676724
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( c ) . to CaMeL String ( ) ; break ;
rank: 627
score: 99.26637369791666
patch: case Integer . TRUE : sb . append ( $STRING$ ) ; break ;
rank: 627
score: 99.26416954627403
patch: case $STRING$ : sb . append ( $STRING$ ) ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( $STRING$ , c ) ;
rank: 627
score: 99.194580078125
patch: case $NUMBER$ : : sb . append ( $STRING$ ) ; break ;
rank: 627
score: 99.14995868389423
patch: case $STRING$ : s . append ( backslash CaMeL Escape ) ;
rank: 628
score: 99.34636688232422
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ; return sb . to CaMeL Lower CaMeL Case ( c ) ;
rank: 628
score: 99.26613943917411
patch: case $STRING$ + sb . char CaMeL Value ( ) ; break ;
rank: 628
score: 99.19423264723558
patch: case MULTILINE : sb . append ( $STRING$ ) ; break ;
rank: 628
score: 99.14979771205357
patch: case $STRING$ : sb . append ( ( String ) quote ) ;
rank: 629
score: 99.3459236391129
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( $STRING$ ) ) ; return sb . to CaMeL Upper CaMeL Case ( ) ;
rank: 629
score: 99.2834942157452
patch: default : sb . append ( $STRING$ ) ; } break ;
rank: 629
score: 99.27775969328704
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ; System . out . append ( $STRING$ ) ;
rank: 629
score: 99.265673828125
patch: case $STRING$ + 0 : sb . append ( $STRING$ ) ; break ;
rank: 629
score: 99.26380657327586
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; sb . append ( backslash CaMeL Escape ) ; sb . append ( c ) ;
rank: 629
score: 99.19339425223214
patch: case LINE : sb . append ( $STRING$ ) ; break ; ;
rank: 629
score: 99.14940534319196
patch: case $STRING$ : sb . append ( $STRING$ ) ; i ++ ;
rank: 630
score: 99.34546712239583
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) . append ( $STRING$ ) . to CaMeL Upper CaMeL Case ( ) ; }
rank: 630
score: 99.28151041666666
patch: case $STRING$ : sb . append ( char CaMeL At ) ; break ;
rank: 630
score: 99.18584333147321
patch: append case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 631
score: 99.3515625
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( output CaMeL Charset CaMeL Encoder ) . append ( $STRING$ ) . append ( c ) ;
rank: 631
score: 99.27689855238971
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { sb . append ( s . char CaMeL At ( i ) ) ; }
rank: 631
score: 99.26382446289062
patch: / * sb . append ( $STRING$ ) ; break ;
rank: 631
score: 99.26349954044117
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL Char CaMeL Array ( ) ) ;
rank: 631
score: 99.19204275948661
patch: case $NUMBER$ : sb . append ( $STRING$ ) ) ; break ;
rank: 631
score: 99.18583540482955
patch: finally { sb . append ( $STRING$ ) ; }
rank: 631
score: 99.14890834263393
patch: case $STRING$ : return backslash CaMeL Escape ; break ; case $STRING$ :
rank: 632
score: 99.351318359375
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( output CaMeL Charset CaMeL Encoder ) . append ( $STRING$ ) ;
rank: 632
score: 99.34524356617646
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( $STRING$ ) ) . append ( Character . to CaMeL Lower CaMeL Case ( $STRING$ ) ) ;
rank: 632
score: 99.28107096354167
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; break ; default :
rank: 632
score: 99.27688598632812
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) && output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( s ) )
rank: 632
score: 99.26286368534483
patch: String CaMeL Builder sb = new String CaMeL Builder ( s . to CaMeL String ( ) ) ; sb . append ( backslash CaMeL Escape ) ;
rank: 632
score: 99.19153703962054
patch: case NUMBER : { sb . append ( $STRING$ ) ; break ;
rank: 632
score: 99.1855977376302
patch: case $NUMBER$ : return sb . append ( $STRING$ ) ;
rank: 632
score: 99.1488506610577
patch: case $STRING$ : return backslash CaMeL Escape ) ; case $STRING$ :
rank: 633
score: 99.35077311197917
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) ; }
rank: 633
score: 99.34520004734848
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) . to CaMeL Upper CaMeL Case ( ) ;
rank: 633
score: 99.2768325805664
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) && output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ;
rank: 633
score: 99.26205357142857
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( c ) . to CaMeL String ( ) ) ;
rank: 633
score: 99.2344219501202
patch: case $STRING$ - $NUMBER$ : sb . append ( $STRING$ ) ;
rank: 633
score: 99.18517127403847
patch: case $NUMBER$ ? sb . append ( $STRING$ ) ; break ;
rank: 633
score: 99.14853341238839
patch: case $STRING$ : sb . append ( ( byte ) 1 ) ;
rank: 634
score: 99.34483119419643
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( Character . to CaMeL Char CaMeL Array ( c ) ) ; }
rank: 634
score: 99.26206868489584
patch: case $STRING$ : sb . append ( $STRING$ ) ; break break ; }
rank: 634
score: 99.26202713815789
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder , output CaMeL Charset CaMeL Encoder , c ) ;
rank: 634
score: 99.1847675030048
patch: case $STRING$ : sb . append ( $STRING$ ) ; break {
rank: 634
score: 99.14821213942308
patch: case $STRING$ : sb . append ( c , quote ) ;
rank: 635
score: 99.35048355594758
patch: case $STRING$ : output CaMeL Charset CaMeL Encoder . append ( $STRING$ ) ; break ; case $STRING$ : output CaMeL Charset CaMeL Encoder . append ( $STRING$ ) ;
rank: 635
score: 99.34465921336206
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( ) ) . append ( $STRING$ ) . append ( $STRING$ ) ;
rank: 635
score: 99.28003743489583
patch: case $STRING$ : case $STRING$ : sb . append ( ) ; break ;
rank: 635
score: 99.27659040178571
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) && output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( backslash CaMeL Escape ) ) {
rank: 635
score: 99.2618896484375
patch: } } case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 635
score: 99.26167353877315
patch: case $STRING$ : sb . append ( $STRING$ ) ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , sb ) ; }
rank: 635
score: 99.19015502929688
patch: case $STRING$ : sb . append ( $STRING$ ) ; return
rank: 635
score: 99.14796031605114
patch: case s : sb . append ( quote ) ;
rank: 636
score: 99.35008893694196
patch: case $STRING$ : sb . append ( sb . char CaMeL At ( i ) ) . append ( $STRING$ ) . append ( $STRING$ ) ;
rank: 636
score: 99.34462076822916
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( c ) . to CaMeL Char CaMeL Array ( ) ; }
rank: 636
score: 99.2791748046875
patch: case $STRING$ : sb . append ( $STRING$ ) ; ; continue ;
rank: 636
score: 99.27654670266544
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . c ) ;
rank: 636
score: 99.26155090332031
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation (
rank: 636
score: 99.2614013671875
patch: case $STRING$ ] : sb . append ( $STRING$ ) ; } break ;
rank: 636
score: 99.23314557756696
patch: case $STRING$ { case $STRING$ : sb . append ( $STRING$ ) ;
rank: 636
score: 99.18932088216145
patch: case $STRING$ : sb . append ( $STRING$ ) ; try
rank: 636
score: 99.14745154747597
patch: case $STRING$ : sb . append ( $STRING$ ) || $STRING$ ;
rank: 637
score: 99.34995814732143
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder != null ) { sb . append ( output CaMeL Charset CaMeL Encoder . $STRING$ ) ;
rank: 637
score: 99.3442803744612
patch: case $STRING$ : sb . append ( Character . to CaMeL Char CaMeL Array ( c ) ) ; sb . append ( $STRING$ ) ; break ;
rank: 637
score: 99.27887369791667
patch: case $STRING$ : case $STRING$ : case $STRING$ : case $STRING$ : continue ;
rank: 637
score: 99.26141160534274
patch: case $STRING$ : sb . append ( $STRING$ ) ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , doublequote CaMeL Escape ) ; break ;
rank: 637
score: 99.26117350260417
patch: case $STRING$ : sb . append ( $STRING$ ) ; return c ; }
rank: 637
score: 99.18856375558036
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; --
rank: 637
score: 99.18294270833333
patch: else sb . append ( $STRING$ ) ; break ; ;
rank: 637
score: 99.1446533203125
patch: case s : sb . append ( c ) ; break ;
rank: 638
score: 99.3498114224138
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ; backslash CaMeL Escape . append ( backslash CaMeL Escape ) ;
rank: 638
score: 99.34414236886161
patch: case $STRING$ : sb . append ( $STRING$ ) ; } sb . append ( Character . to CaMeL Upper CaMeL Case ( $STRING$ ) ) ;
rank: 638
score: 99.277783203125
patch: case - 1 : sb . append ( $STRING$ ) ; break ; }
rank: 638
score: 99.2743389423077
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder ) ;
rank: 638
score: 99.26079852764423
patch: / * sb . append ( $STRING$ ) ; break ; }
rank: 638
score: 99.18793596540179
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; sb
rank: 638
score: 99.17872032752403
patch: case chars : sb . append ( $STRING$ ) ; break ;
rank: 639
score: 99.34976309317129
patch: case $STRING$ : if ( backslash CaMeL Escape . can CaMeL Encode ( c ) ) { sb . append ( backslash CaMeL Escape ) ;
rank: 639
score: 99.34413364955357
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; sb . append ( c ) ; }
rank: 639
score: 99.27711995442708
patch: case $STRING$ : case $STRING$ : break ; case $STRING$ :
rank: 639
score: 99.27433733258928
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) && output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( singlequote CaMeL Escape ) )
rank: 639
score: 99.26097196691177
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , charset ) ;
rank: 639
score: 99.25990804036458
patch: * sb . append ( $STRING$ ) ; break ; }
rank: 639
score: 99.18601771763393
patch: case $NUMBER$ : ; sb . append ( $STRING$ ) ; break ;
rank: 639
score: 99.14453996930804
patch: case $STRING$ : if ( can CaMeL Encode ( c ) ) {
rank: 640
score: 99.34959193638393
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( sb . char CaMeL At ( i ) ) . append ( quote ) ;
rank: 640
score: 99.34407832704741
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) . to CaMeL Upper CaMeL Case ( ) . append ( $STRING$ ) ;
rank: 640
score: 99.276611328125
patch: case Character . NULL : sb . append ( $STRING$ ) ; break ;
rank: 640
score: 99.2609001608456
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , sb . to CaMeL String ( ) ) ;
rank: 640
score: 99.25947265625
patch: case $STRING$ : sb . append ( $STRING$ ) ; return break ; }
rank: 640
score: 99.23036545973558
patch: case String . $STRING$ : sb . append ( $STRING$ ) ;
rank: 640
score: 99.18568638392857
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; throw $STRING$ ;
rank: 640
score: 99.17695756392045
patch: case DEFAULT : sb . append ( $STRING$ ) ;
rank: 640
score: 99.14385114397321
patch: case ) { case $STRING$ : sb . append ( quote ) ;
rank: 641
score: 99.34879244290866
patch: case $STRING$ : sb . append ( sb . append ( $STRING$ ) ) . append ( sb . append ( c ) ) ;
rank: 641
score: 99.275634765625
patch: case $STRING$ : { sb . append ( $STRING$ ) ; }
rank: 641
score: 99.27339311079545
patch: case $STRING$ : sb . append ( quote ) ; break ; case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ;
rank: 641
score: 99.26066080729167
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( s ) ; }
rank: 641
score: 99.25857747395834
patch: * * case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 641
score: 99.14300537109375
patch: case $STRING$ : sb . append ( $STRING$ ) ; * * /
rank: 642
score: 99.348779296875
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , c ) ;
rank: 642
score: 99.34392438616071
patch: case Character . $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) . append ( $STRING$ ) ; }
rank: 642
score: 99.27425130208333
patch: case Character . MAX : sb . append ( $STRING$ ) ; break ;
rank: 642
score: 99.273291015625
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; else sb . append ( $STRING$ ) ; }
rank: 642
score: 99.26057703354779
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( quote , c ) ;
rank: 642
score: 99.2291971842448
patch: case $STRING$ ] : sb . append ( $STRING$ ) ;
rank: 642
score: 99.18454415457589
patch: case EOF : { sb . append ( $STRING$ ) ; break ;
rank: 642
score: 99.17527418870192
patch: case name : sb . append ( $STRING$ ) ; break ;
rank: 642
score: 99.14247349330357
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ) ;
rank: 643
score: 99.34876360212054
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( sb . append ( backslash CaMeL Escape ) ) . append ( c ) ;
rank: 643
score: 99.34371300899622
patch: case $STRING$ : if ( Character . is CaMeL Upper CaMeL Case ( c ) ) sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ;
rank: 643
score: 99.2732434395032
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; break ;
rank: 643
score: 99.26052024147727
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( false ) ; }
rank: 643
score: 99.1845370205966
patch: case $STRING$ : String sb = $STRING$ ; break ;
rank: 643
score: 99.17511455829327
patch: case START : sb . append ( $STRING$ ) ; break ;
rank: 643
score: 99.14237154447116
patch: case s : sb . append ( quote ) ; break ;
rank: 644
score: 99.34856708233173
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( sb . append ( backslash CaMeL Escape ) ) ; }
rank: 644
score: 99.34324544270834
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( $STRING$ ) ) . append ( $STRING$ ) . append ( $STRING$ ) ;
rank: 644
score: 99.2732421875
patch: case Character . $STRING$ : sb . append ( c ) ; break ;
rank: 644
score: 99.273193359375
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) && output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( new
rank: 644
score: 99.26023815524194
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( output CaMeL Charset CaMeL Encoder . to CaMeL Hex CaMeL String ( $STRING$ ) ) ;
rank: 644
score: 99.256982421875
patch: case $STRING$ : sb . append ( $STRING$ ) ; } return line ;
rank: 644
score: 99.2289794921875
patch: case $STRING$ : for ( int i = 0 ; i < s .
rank: 644
score: 99.1745361328125
patch: append . append ( $STRING$ ) ; break ;
rank: 644
score: 99.14048414963942
patch: case $STRING$ : if ( ( c == $STRING$ ) ) {
rank: 645
score: 99.3485107421875
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; sb . append ( $STRING$ ) . append ( sb . char CaMeL At ( i ) ) ;
rank: 645
score: 99.27183430989584
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset , c ) ;
rank: 645
score: 99.27174595424107
patch: case $STRING$ : throw new Null CaMeL Pointer CaMeL Exception ( ) ;
rank: 645
score: 99.25971984863281
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder , $STRING$ ) ;
rank: 645
score: 99.25620930989584
patch: case 0 + $NUMBER$ : sb . append ( $STRING$ ) ; break ;
rank: 645
score: 99.14043719951923
patch: case $STRING$ : sb . append ( $STRING$ + quote ) ;
rank: 646
score: 99.34829915364584
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( output CaMeL Charset CaMeL Encoder . append ( c ) ) . append ( $STRING$ ) ;
rank: 646
score: 99.34296123798077
patch: case $STRING$ : throw new Runtime CaMeL Exception ( $STRING$ ) ;
rank: 646
score: 99.27115885416667
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) && output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( $STRING$ ) ) {
rank: 646
score: 99.2695821126302
patch: case $STRING$ : sb . append ( $STRING$ ) break ;
rank: 646
score: 99.25595528738839
patch: * case 1 : sb . append ( $STRING$ ) ; break ;
rank: 646
score: 99.22788899739584
patch: case $STRING$ : i = s . char CaMeL At ( i ) ;
rank: 646
score: 99.17183061079545
patch: case LINE : sb . append ( $STRING$ ) ;
rank: 646
score: 99.13948277064732
patch: case $STRING$ : { sb . append ( backslash CaMeL Escape ) ;
rank: 647
score: 99.34823172433036
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ; sb . append ( backslash CaMeL Escape ) ; }
rank: 647
score: 99.34289971713362
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( Character . to CaMeL Char CaMeL Array ( c ) ) ; break ;
rank: 647
score: 99.27078894412878
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : node . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ;
rank: 647
score: 99.268603515625
patch: case $STRING$ : * / break ; case $STRING$ : * / break ;
rank: 647
score: 99.25947840073529
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder , c ) ; break ;
rank: 648
score: 99.34274727957589
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) . to CaMeL Lower CaMeL Case ( ) . append ( ) ;
rank: 648
score: 99.25926298253677
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( output CaMeL Charset CaMeL Encoder . to CaMeL Hex CaMeL String ( doublequote CaMeL Escape ) ) ;
rank: 648
score: 99.25563267299107
patch: else sb . append ( $STRING$ ) ; break ; break ; }
rank: 648
score: 99.2268535907452
patch: case $STRING$ : sb . append ( 0 + c ) ;
rank: 648
score: 99.18228585379464
patch: case $STRING$ : if ( sb . length ( ) : break ;
rank: 648
score: 99.1708272298177
patch: 0 : sb . append ( $STRING$ ) ; break ;
rank: 648
score: 99.13773890904018
patch: n = backslash CaMeL Escape ; sb . append ( $STRING$ ) ;
rank: 649
score: 99.34817165798611
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; sb . append ( $STRING$ ) ; sb . append ( c ) ;
rank: 649
score: 99.34268680695564
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( $STRING$ ) ) . append ( Character . to CaMeL Lower CaMeL Case ( ;
rank: 649
score: 99.2707160500919
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , doublequote CaMeL Escape , singlequote CaMeL Escape , doublequote CaMeL Escape ) ;
rank: 649
score: 99.26817908653847
patch: case $STRING$ : if ( $STRING$ . equals ( c ) )
rank: 649
score: 99.25906470514113
patch: case $STRING$ : sb . append ( ( ( String ) output CaMeL Charset CaMeL Encoder . to CaMeL String ( c ) ) . str CaMeL Escape ) ;
rank: 649
score: 99.25450032552084
patch: sb . append ( $STRING$ ) ; } else { break ; } }
rank: 649
score: 99.18219866071429
patch: case 1 : sb . append ( $STRING$ ) ; break ; )
rank: 649
score: 99.17006429036458
patch: $NUMBER$ : sb . append ( $STRING$ ) ; break ;
rank: 649
score: 99.13750665838069
patch: case $STRING$ : if ( backslash CaMeL Escape ) {
rank: 650
score: 99.34268188476562
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; } return sb . to CaMeL Lower CaMeL Case ( ) ;
rank: 650
score: 99.226318359375
patch: case $STRING$ : sb + $STRING$ : sb . append ( $STRING$ ) ;
rank: 650
score: 99.13548932756696
patch: String CaMeL Builder sb = new String CaMeL Builder ( $STRING$ ) ;
rank: 651
score: 99.34783935546875
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( output CaMeL Charset CaMeL Encoder . char CaMeL At ( i ) ) ;
rank: 651
score: 99.34166608537946
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) . to CaMeL Upper CaMeL Case ( ) . trim ( ) ;
rank: 651
score: 99.27038995150862
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String ( ) , c ) ; * /
rank: 651
score: 99.26783040364583
patch: case $STRING$ : sb . append ( c ) ; $STRING$ ; break ;
rank: 651
score: 99.258544921875
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( backslash CaMeL Escape ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation (
rank: 651
score: 99.25201822916667
patch: append ( sb . to CaMeL Lower CaMeL Case ( ) ) ; }
rank: 651
score: 99.22409292367789
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb ;
rank: 651
score: 99.18120868389423
patch: case $STRING$ : break ; sb . append ( $STRING$ ) ;
rank: 651
score: 99.16845703125
patch: case 0 : sb . append ( $NUMBER$ ) ; break ;
rank: 651
score: 99.13519287109375
patch: case $STRING$ : sb . append ( $STRING$ ] ) ; break ;
rank: 652
score: 99.34772805606617
patch: case $STRING$ : sb . append ( sb . length ( ) + $STRING$ ) ;
rank: 652
score: 99.34157889229911
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) . append ( $STRING$ ) ; break ; }
rank: 652
score: 99.26923014322917
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append ( backslash CaMeL Escape ) ; }
rank: 652
score: 99.2676025390625
patch: case Integer . MAX : sb . append ( $STRING$ ) ; break ;
rank: 652
score: 99.25121256510417
patch: case $STRING$ : sb . append ( $STRING$ ) ; } throw null ;
rank: 652
score: 99.22388712565105
patch: case $STRING$ : sb . append ( $STRING$ 1 ) ;
rank: 652
score: 99.16729266826923
patch: case $STRING$ : sb . append ( PREFIX ) ; break ;
rank: 652
score: 99.13392223011364
patch: case c : sb . append ( c ) ;
rank: 653
score: 99.34751313308189
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder != null ) { if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c )
rank: 653
score: 99.34143784466912
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) . append ( $STRING$ ) . to CaMeL Lower CaMeL Case ( ) ; }
rank: 653
score: 99.26919759114584
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , c ) ;
rank: 653
score: 99.25835890997024
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( doublequote CaMeL Escape ) , c ) ;
rank: 653
score: 99.2231953938802
patch: case $STRING$ 1 : sb . append ( $STRING$ ) ;
rank: 653
score: 99.18093436104911
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; c
rank: 653
score: 99.16649451622597
patch: case $STRING$ : sb . append ( $STRING$ ) ; while (
rank: 653
score: 99.1333759014423
patch: case $STRING$ ? c : sb . append ( $STRING$ ) ;
rank: 654
score: 99.34749629579741
patch: case $STRING$ : output CaMeL Charset CaMeL Encoder . append ( sb . char CaMeL At ( i ) ) . append ( $STRING$ ) ; break ;
rank: 654
score: 99.34125114889706
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) . to CaMeL Lower CaMeL Case ( ) ; }
rank: 654
score: 99.26890733506944
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c ) ; }
rank: 654
score: 99.26581217447917
patch: case $STRING$ : return $STRING$ ; case $STRING$ : break ; case $STRING$ :
rank: 654
score: 99.2583236694336
patch: case $STRING$ : sb . append ( $STRING$ ) ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , sb . to CaMeL String ( ) ) ;
rank: 654
score: 99.25044759114583
patch: case $STRING$ : sb . append ( $STRING$ ) : break ; break ;
rank: 654
score: 99.22213541666666
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( s ;
rank: 654
score: 99.18083844866071
patch: sb . append ( $STRING$ ) ; break ; $STRING$ ; break ;
rank: 654
score: 99.1649678548177
patch: i : sb . append ( $STRING$ ) ; break ;
rank: 654
score: 99.13316127232143
patch: case - $NUMBER$ : sb . append ( backslash CaMeL Escape ) ;
rank: 655
score: 99.34682436342592
patch: case $STRING$ : String CaMeL Builder . append ( sb . char CaMeL At ( i ) ) ; sb . append ( c ) ;
rank: 655
score: 99.26878446691177
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String ( ) ) ; sb . append ( c ) ; break ;
rank: 655
score: 99.26572829026442
patch: case $STRING$ : sb . append ( $STRING$ ) ; } ;
rank: 655
score: 99.25831604003906
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( quote ) ;
rank: 655
score: 99.25037434895833
patch: } if ( sb . length ( ) > 0 ) { break ;
rank: 655
score: 99.18045748197116
patch: case $STRING$ : sb . println ( $STRING$ ) ; break ;
rank: 655
score: 99.16433481069711
patch: case $STRING$ : sb . append ( sb . $STRING$ ) ;
rank: 656
score: 99.34028894761029
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ; sb . append ( Character . to CaMeL Lower CaMeL Case ( ; }
rank: 656
score: 99.26871304898648
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( backslash CaMeL Escape . to CaMeL String ( ) ) ) ;
rank: 656
score: 99.26486642020089
patch: case $STRING$ : case $STRING$ : break ; default : break ; }
rank: 656
score: 99.25811582623106
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( $STRING$ ) ;
rank: 656
score: 99.2501220703125
patch: case $STRING$ ? $NUMBER$ : sb . append ( $STRING$ ) ; break ;
rank: 656
score: 99.17945207868304
patch: case NOT $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 656
score: 99.16420491536458
patch: case 0 : sb . append ( $STRING$ ) ; }
rank: 656
score: 99.13226318359375
patch: case $STRING$ ? case $STRING$ : sb . append ( $STRING$ ) ;
rank: 657
score: 99.34005421605603
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( $STRING$ ) . char CaMeL At ( i ) ) ; break ;
rank: 657
score: 99.2686064749053
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c , c ) ;
rank: 657
score: 99.258056640625
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset ) ; break ;
rank: 657
score: 99.24989420572916
patch: case Integer . EMPTY : sb . append ( $STRING$ ) ; break ;
rank: 657
score: 99.22027994791667
patch: case $STRING$ + c + $STRING$ : sb . append ( $STRING$ ) ;
rank: 657
score: 99.17835344587054
patch: case $STRING$ : System . out . println ( $STRING$ ; break ;
rank: 657
score: 99.1638653094952
patch: case Short : sb . append ( $STRING$ ) ; break ;
rank: 657
score: 99.13177490234375
patch: case - 1 : sb . append ( c ) ;
rank: 658
score: 99.34562174479167
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( output CaMeL Charset CaMeL Encoder . append ( c ) ) ; break ;
rank: 658
score: 99.33922576904297
patch: case $STRING$ : case $STRING$ : s . append ( $STRING$ ) ; break ;
rank: 658
score: 99.26849550189394
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; break ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation (
rank: 658
score: 99.26385498046875
patch: case $STRING$ : case $STRING$ : return $STRING$ ;
rank: 658
score: 99.25767415364584
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset , c ) ;
rank: 658
score: 99.24878801618304
patch: case $STRING$ : return sb . to CaMeL String ( ) ; }
rank: 658
score: 99.21929931640625
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c ) ;
rank: 658
score: 99.17833600725446
patch: final case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 658
score: 99.16361177884616
patch: case $STRING$ : return sb . append ( $STRING$ ) ; }
rank: 658
score: 99.13118802584134
patch: case quote : sb . append ( c ) ; break ;
rank: 659
score: 99.34547706886575
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder != null && output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( $STRING$ ) )
rank: 659
score: 99.26845230594758
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; else sb . append ( $STRING$ ) ; break ;
rank: 659
score: 99.26220703125
patch: case $STRING$ ? $STRING$ : sb . append ( c ) ; break ;
rank: 659
score: 99.24853515625
patch: } else { sb . append ( $STRING$ ) ; break ;
rank: 659
score: 99.16317044771634
patch: break ; : sb . append ( $STRING$ ) ; break ;
rank: 659
score: 99.13094388521634
patch: case $STRING$ | $STRING$ : sb . append ( $STRING$ ) ;
rank: 660
score: 99.34502963362068
patch: case $STRING$ : output CaMeL Charset CaMeL Encoder . append ( backslash CaMeL Escape ) ; break ; case $STRING$ : sb . append ( $STRING$ ) ;
rank: 660
score: 99.33835671164773
patch: case $STRING$ : if ( $STRING$ . equals CaMeL Ignore CaMeL Case ( c ) ) sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ;
rank: 660
score: 99.26837355090726
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , doublequote CaMeL Escape , singlequote CaMeL Escape , c ) ;
rank: 660
score: 99.26204427083333
patch: case $STRING$ : sb . append ( $STRING$ ) ; ;
rank: 660
score: 99.25695470861487
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . get CaMeL String ( $STRING$ ) ) ;
rank: 660
score: 99.21836751302084
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb ) ; }
rank: 660
score: 99.13031877790179
patch: case $STRING$ : sb = new String CaMeL Builder ( $STRING$ ) ;
rank: 661
score: 99.34481698495371
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ; backslash CaMeL Escape . append ( c ) ;
rank: 661
score: 99.26794063683712
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : super . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ;
rank: 661
score: 99.261962890625
patch: case $STRING$ : return new String ( $STRING$ ) ;
rank: 661
score: 99.24827357700893
patch: * $STRING$ : sb . append ( $STRING$ ) ; break ; }
rank: 661
score: 99.17738694411058
patch: case $NUMBER$ : sb . append ( 1 ) ; break ;
rank: 661
score: 99.16259765625
patch: case $NUMBER$ : try { sb . append ( $STRING$ ) ;
rank: 662
score: 99.34464518229167
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( output CaMeL Charset CaMeL Encoder . append ( c ) ) ;
rank: 662
score: 99.33826446533203
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) . char CaMeL At ( 0 ) ) . append ( $STRING$ ) ;
rank: 662
score: 99.267578125
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , doublequote CaMeL Escape , backslash CaMeL Escape ) ; break ;
rank: 662
score: 99.26149088541666
patch: case $STRING$ : continue ; default : sb . append ( $STRING$ ) ;
rank: 662
score: 99.25629252772177
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder ) ; }
rank: 662
score: 99.21714680989584
patch: case $STRING$ : sb . append ( s . trim ( ) ) ;
rank: 662
score: 99.16177133413461
patch: else sb . append ( $STRING$ ) ; break ; $STRING$ ;
rank: 662
score: 99.12979830228366
patch: case $STRING$ : String . append ( backslash CaMeL Escape ) ;
rank: 663
score: 99.34462327223558
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( sb . append ( $STRING$ ) ) ;
rank: 663
score: 99.337890625
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) . char CaMeL At ( 0 ) ) ; break ; }
rank: 663
score: 99.267041015625
patch: case $STRING$ : sb . append ( $STRING$ ) ; * ; break ;
rank: 663
score: 99.25618269636824
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . get CaMeL Charset ( c ) ) ;
rank: 663
score: 99.12979561941964
patch: case $STRING$ : sb . append ( ( Character ) c ) ;
rank: 664
score: 99.25890241350446
patch: case $STRING$ : continue ; case $STRING$ : case $STRING$ : break ;
rank: 664
score: 99.25604771205357
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . get ( c ) ) ;
rank: 664
score: 99.24794108072916
patch: case $STRING$ > 0 ? sb . append ( $STRING$ ) : break ;
rank: 664
score: 99.21661376953125
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( (
rank: 664
score: 99.15994262695312
patch: case 1 : return sb . append ( $STRING$ ) ;
rank: 664
score: 99.1296895345052
patch: case $STRING$ : switch ( $STRING$ ) { case $STRING$ :
rank: 665
score: 99.3373779296875
patch: case Char CaMeL Sequence . $STRING$ : sb . append ( $STRING$ ) . append ( c ) . append ( $STRING$ ) . append ( $STRING$ ) ;
rank: 665
score: 99.26639701224663
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) && output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( output CaMeL Charset CaMeL Encoder ) ) {
rank: 665
score: 99.2584228515625
patch: case $STRING$ : return $STRING$ ; break ; case $STRING$ : return $STRING$ ;
rank: 665
score: 99.25601535373264
patch: case $STRING$ : sb . append ( $STRING$ ) ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String ( ) . to CaMeL String ( ) ) ;
rank: 665
score: 99.17631312779018
patch: case $STRING$ : sb . append ( $STRING$ ) ; throw sb ;
rank: 665
score: 99.15989176432292
patch: case $STRING$ + sb . trim ( ) ; break ;
rank: 665
score: 99.1294414813702
patch: case $STRING$ : sb . append ( quote + $STRING$ ) ;
rank: 666
score: 99.33681303879311
patch: case Character . $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; sb . append ( $STRING$ ) ;
rank: 666
score: 99.25789097377232
patch: default : sb . append ( $STRING$ ) ; } break ; }
rank: 666
score: 99.25569661458333
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( backslash CaMeL Escape ) ; break ;
rank: 666
score: 99.24750162760417
patch: case $STRING$ case 0 : sb . append ( $STRING$ ) ; break ;
rank: 666
score: 99.21461838942308
patch: case $STRING$ : * / sb . append ( $STRING$ ) ;
rank: 666
score: 99.17622593470982
patch: case $STRING$ : . append ( $STRING$ ) ; break ; break ;
rank: 666
score: 99.15920785757211
patch: case $STRING$ : list . append ( $STRING$ ) ; break ;
rank: 666
score: 99.12836565290179
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; else
rank: 667
score: 99.34392841045673
patch: case $STRING$ : sb . append ( sb . char CaMeL At ( i ) ) ; else sb . append ( c ) ;
rank: 667
score: 99.33671061197917
patch: case $STRING$ : sb . append ( Character . to CaMeL Char CaMeL Array ( c ) ) ; return sb . to CaMeL String ( ) ; }
rank: 667
score: 99.2660011085304
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c , c ) ;
rank: 667
score: 99.25756022135417
patch: case $STRING$ : { sb . append ( $STRING$ ) ; } break ;
rank: 667
score: 99.25501598011364
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( quote ) ; }
rank: 667
score: 99.245947265625
patch: case $STRING$ > 0 ) sb . append ( $STRING$ ) ; break ;
rank: 667
score: 99.212646484375
patch: case $STRING$ : System . } sb . append ( $STRING$ ) ;
rank: 667
score: 99.15809044471153
patch: case $NUMBER$ + $STRING$ : sb . append ( $STRING$ ) ;
rank: 667
score: 99.12833345853366
patch: buffer . append ( quote ) ; break ; case $STRING$ :
rank: 668
score: 99.33658854166667
patch: case $STRING$ : if ( Character . is CaMeL Whitespace ( c ) )
rank: 668
score: 99.26589704241071
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . , c ) ;
rank: 668
score: 99.257080078125
patch: case $STRING$ : break ; default : break ; }
rank: 668
score: 99.25485711348684
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( c ) ) ; }
rank: 668
score: 99.24589320591518
patch: } if ( sb . equals ( $STRING$ ) ) { break ;
rank: 668
score: 99.21019568810097
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) :
rank: 668
score: 99.1753680889423
patch: case $STRING$ : chars . append ( $STRING$ ) ; break ;
rank: 668
score: 99.15732046274039
patch: case $STRING$ : sb . append ( $STRING$ ) ; try {
rank: 669
score: 99.34262319711539
patch: case $STRING$ : sb . append ( s . append ( $STRING$ ) ) . append ( $STRING$ ) . append ( c ) ;
rank: 669
score: 99.33643317945075
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) . append ( $STRING$ ) . to CaMeL Upper CaMeL Case ( ) ;
rank: 669
score: 99.26552734375
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case ?
rank: 669
score: 99.256396484375
patch: case $STRING$ : throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;
rank: 669
score: 99.25472259521484
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c ) ; }
rank: 669
score: 99.2454833984375
patch: case $STRING$ : break ; else sb . append ( $STRING$ ) ; }
rank: 669
score: 99.12769493689903
patch: line . append ( $STRING$ ) ; break ; case $STRING$ :
rank: 670
score: 99.34244791666667
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( sb . char CaMeL At ( i ) )
rank: 670
score: 99.33621215820312
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( Character . to CaMeL Lower CaMeL Case ( c ) . char CaMeL At ( 0 ) ) ;
rank: 670
score: 99.26475201231061
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { sb . append ( s . char CaMeL At ( i ) ) ;
rank: 670
score: 99.25550944010416
patch: case $STRING$ : sb . append ( c ) ; ) ; break ;
rank: 670
score: 99.25472203696647
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c ) ;
rank: 670
score: 99.24495442708333
patch: case Token . STRING : sb . append ( $STRING$ ) ; break ;
rank: 670
score: 99.17405348557692
patch: case $STRING$ : log . append ( $STRING$ ) ; break ;
rank: 670
score: 99.15424053485577
patch: case LT : sb . append ( $STRING$ ) ; break ;
rank: 670
score: 99.1264139811198
patch: case $STRING$ : sb . append ( $STRING$ true ) ;
rank: 671
score: 99.3355712890625
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( $STRING$ ) ) . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ;
rank: 671
score: 99.26374897203948
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String ( ) ) ; sb . append ( s . to CaMeL String ( ) ) ;
rank: 671
score: 99.25496419270833
patch: case Integer . MIN _ VALUE : case Integer . MIN _ VALUE :
rank: 671
score: 99.25452706473214
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , $STRING$ ) ; }
rank: 671
score: 99.20875133167614
patch: case $STRING$ : c . append ( $STRING$ ) ;
rank: 671
score: 99.12618001302083
patch: case $STRING$ : return backslash CaMeL Escape ; case $STRING$ :
rank: 672
score: 99.34180559430804
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { { sb . append ( $STRING$ ) ;
rank: 672
score: 99.33516808712122
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) . to CaMeL Upper CaMeL Case ( ) ;
rank: 672
score: 99.2636520798142
patch: case $STRING$ : output CaMeL Charset CaMeL Encoder . append ( $STRING$ ) ; break ; case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ;
rank: 672
score: 99.25442940848214
patch: case $STRING$ : return String . value CaMeL Of ( $STRING$ ) ;
rank: 672
score: 99.25437182049419
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( c ) . to CaMeL String ( ) ) ;
rank: 672
score: 99.15238131009616
patch: case n : sb . append ( $STRING$ ) ; break ;
rank: 672
score: 99.12568010602679
patch: else sb . append ( $STRING$ ) ; break ; case $STRING$ :
rank: 673
score: 99.33387756347656
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( $STRING$ ) ) ; return sb . to CaMeL Lower CaMeL Case ( $STRING$ ) ;
rank: 673
score: 99.26287163628473
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) && output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( singlequote CaMeL Escape ) ) {
rank: 673
score: 99.254345703125
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( ) ) ; break ;
rank: 673
score: 99.2534912109375
patch: case $STRING$ : / * sb . append ( $STRING$ ) ; break ;
rank: 673
score: 99.24356282552084
patch: case Character . TRUE : sb . append ( $STRING$ ) ; break ;
rank: 673
score: 99.17364032451923
patch: $STRING$ : sb . append ( $STRING$ ) ; ; break ;
rank: 673
score: 99.1514892578125
patch: case $NUMBER$ ? $STRING$ : sb . append ( $STRING$ ) ;
rank: 673
score: 99.12507847377232
patch: case $STRING$ : sb . append ( $STRING$ ) ; * ) ;
rank: 674
score: 99.34142127403847
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; } else { sb . append ( backslash CaMeL Escape ) ; }
rank: 674
score: 99.33370768229166
patch: case $STRING$ : sb . append ( c ) . append ( $STRING$ ) . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ;
rank: 674
score: 99.2626953125
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( s . to CaMeL String ( ) ) ) ;
rank: 674
score: 99.25411184210526
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder , output CaMeL Charset CaMeL Encoder ) ; break ;
rank: 674
score: 99.25342668805804
patch: case - 1 : sb . append ( c ) ; break ;
rank: 674
score: 99.24305826822916
patch: case 0 + 1 : sb . append ( $STRING$ ) ; break ;
rank: 674
score: 99.20615797776442
patch: case $STRING$ : System . out . append ( $STRING$ ) ;
rank: 674
score: 99.15088500976563
patch: s . append ( $STRING$ ) ; break ;
rank: 674
score: 99.12486853966347
patch: case $STRING$ : sb . append ( s + $STRING$ ) ;
rank: 675
score: 99.34140309979838
patch: case $STRING$ : output CaMeL Charset CaMeL Encoder . append ( c ) ; break ; case $STRING$ : output CaMeL Charset CaMeL Encoder . append ( c ) ;
rank: 675
score: 99.2624152688419
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { sb . append ( backslash CaMeL Escape . to CaMeL String ( ) ) ;
rank: 675
score: 99.25403225806451
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( singlequote CaMeL Escape , c ) ;
rank: 675
score: 99.17335728236607
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; default
rank: 675
score: 99.12460763113839
patch: case $STRING$ : return sb . append ( backslash CaMeL Escape ) ;
rank: 676
score: 99.34128042367789
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( sb . append ( c ) . append ( $STRING$ ) ) ;
rank: 676
score: 99.3329086303711
patch: case $NUMBER$ : break ; case $NUMBER$ : sb . append ( $STRING$ ) ;
rank: 676
score: 99.26236454133064
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , doublequote CaMeL Escape , doublequote CaMeL Escape ) ; break ;
rank: 676
score: 99.25395651424633
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder , output CaMeL Charset ) ;
rank: 676
score: 99.25274251302083
patch: case $STRING$ : c = $STRING$ ; break ; default : break ; }
rank: 676
score: 99.24181315104167
patch: / * case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 676
score: 99.20419546274039
patch: case $STRING$ : System . sb . append ( $STRING$ ) ;
rank: 676
score: 99.17214731069711
patch: case $STRING$ : break . append ( $STRING$ ) ; break ;
rank: 676
score: 99.14949857271634
patch: case $NUMBER$ ) sb . append ( $STRING$ ) ; break ;
rank: 676
score: 99.12451171875
patch: case $STRING$ : System . err . println ( c ) ;
rank: 677
score: 99.34127807617188
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) . append ( $STRING$ ) ;
rank: 677
score: 99.33265787760416
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( $STRING$ ) . to CaMeL Lower CaMeL Case ( ) ; }
rank: 677
score: 99.2623291015625
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append ( $STRING$ ) ; break ; }
rank: 677
score: 99.25375027126736
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( backslash CaMeL Escape , c ) ;
rank: 677
score: 99.25235689603366
patch: case $STRING$ : sb . append ( c ) ; continue ;
rank: 677
score: 99.17188439002403
patch: case $STRING$ : sb . append ( true ) ; break ;
rank: 677
score: 99.1478740985577
patch: case Integer . $STRING$ : sb . append ( $STRING$ ) ;
rank: 677
score: 99.12425740559895
patch: case $STRING$ / : sb . append ( $STRING$ ) ;
rank: 678
score: 99.2502910907452
patch: case $STRING$ : sb . append ( $STRING$ ) ; return ;
rank: 678
score: 99.12397112165179
patch: case $STRING$ : sb . append ( ( int ) $NUMBER$ ) ;
rank: 679
score: 99.34005172164352
patch: case $STRING$ : sb . append ( s . to CaMeL String ( ) ) . append ( $STRING$ ) . append ( $STRING$ ) ;
rank: 679
score: 99.3319891567888
patch: case $STRING$ : if ( $STRING$ . equals ( Character . to CaMeL Lower CaMeL Case ( c ) ) ) sb . append ( $STRING$ ) ;
rank: 679
score: 99.26211751302084
patch: case $STRING$ : sb . append ( $STRING$ ) ; if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( output CaMeL Charset CaMeL Encoder ) )
rank: 679
score: 99.25315679505815
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder ) ; output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ;
rank: 679
score: 99.24109700520833
patch: case $STRING$ + c : sb . append ( $STRING$ ) ; break ;
rank: 679
score: 99.20148174579327
patch: case $STRING$ : sb . append ( $STRING$ - c ) ;
rank: 679
score: 99.1702880859375
patch: case ANNOTATION : sb . append ( $STRING$ ) ; break ;
rank: 679
score: 99.12361966646634
patch: case $STRING$ : String . char CaMeL At ( i ) ;
rank: 680
score: 99.33997034143519
patch: case $STRING$ : sb . append ( output CaMeL Charset CaMeL Encoder ) ; break ; case $STRING$ : sb . append ( c ) ;
rank: 680
score: 99.26204207136824
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c ) ; break ;
rank: 680
score: 99.2529296875
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c , c ) ; }
rank: 680
score: 99.24090576171875
patch: else { sb . append ( $STRING$ ) ; break ; } }
rank: 680
score: 99.20064603365384
patch: case $STRING$ : System . append ( $STRING$ ) ; break ;
rank: 680
score: 99.14751727764423
patch: case 1 ? sb . append ( $STRING$ ) ; break ;
rank: 680
score: 99.12264578683036
patch: $STRING$ : sb . append ( backslash CaMeL Escape ) ; break ;
rank: 681
score: 99.33943176269531
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ; sb . append ( s . char CaMeL At ( i ) ) ;
rank: 681
score: 99.26191563760081
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( $STRING$ ) ) ; break ;
rank: 681
score: 99.25275735294117
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , 0 ) ;
rank: 681
score: 99.19816450639205
patch: case FORMAT : sb . append ( $STRING$ ) ;
rank: 681
score: 99.16576209435097
patch: case $STRING$ : $STRING$ . append ( $STRING$ ) ; break ;
rank: 681
score: 99.14743276742789
patch: case $STRING$ : return sb . append ( $STRING$ ) ; ;
rank: 682
score: 99.3394187644676
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( output CaMeL Charset CaMeL Encoder ) ; break ;
rank: 682
score: 99.26173450100806
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; return sb . to CaMeL String ( ) ; }
rank: 682
score: 99.25243298760776
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( s , c ) ; }
rank: 682
score: 99.14727783203125
patch: s = sb . append ( $STRING$ ) ; break ;
rank: 682
score: 99.12140362079327
patch: case $STRING$ : String CaMeL Builder . append ( quote ) ;
rank: 683
score: 99.33936388739224
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( sb . append ( output CaMeL Charset CaMeL Encoder . $STRING$ ) ) ;
rank: 683
score: 99.26165771484375
patch: case $STRING$ : output CaMeL Charset CaMeL Encoder . append ( $STRING$ ) ; break ; case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation (
rank: 683
score: 99.25198025173611
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( backslash CaMeL Escape , sb . to CaMeL String ( ) ) ;
rank: 683
score: 99.24588716947116
patch: case decode : sb . append ( $STRING$ ) ; break ;
rank: 683
score: 99.23795863560268
patch: case $STRING$ ? sb . append ( $STRING$ ) ; break ; }
rank: 683
score: 99.16259765625
patch: case $NUMBER$ : out . append ( $STRING$ ) ; break ;
rank: 683
score: 99.1452167217548
patch: case IF : sb . append ( $STRING$ ) ; break ;
rank: 683
score: 99.12104143415179
patch: } else { case $STRING$ : sb . append ( c ) ;
rank: 684
score: 99.33905498798077
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( s . append ( $STRING$ ) ) . append ( $STRING$ ) ;
rank: 684
score: 99.32997574344758
patch: case $STRING$ : return Character . to CaMeL Upper CaMeL Case ( c ) ; case $STRING$ : return Character . to CaMeL Upper CaMeL Case ( c ) ;
rank: 684
score: 99.26121012369792
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) break ;
rank: 684
score: 99.25192353219697
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c ) ; sb . append ( c ) ;
rank: 684
score: 99.19469275841347
patch: case $STRING$ : System . append ( backslash CaMeL Escape ) ;
rank: 684
score: 99.161376953125
patch: $STRING$ : sb . append ( $STRING$ ) ; return $STRING$ ;
rank: 684
score: 99.14518229166667
patch: case $NUMBER$ sb . append ( $STRING$ ) ; break ;
rank: 684
score: 99.12059607872597
patch: case TRUE : sb . append ( backslash CaMeL Escape ) ;
rank: 685
score: 99.33802625868056
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( output CaMeL Charset CaMeL Encoder ) . append ( c ) ; break ;
rank: 685
score: 99.32768110795455
patch: case $STRING$ : sb . append ( Character . to CaMeL Char CaMeL Array ( c ) ) ; sb . append ( Character . to CaMeL Lower CaMeL Case ( ;
rank: 685
score: 99.26083984375
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { sb . append ( $STRING$ ) ; }
rank: 685
score: 99.25170180376838
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; }
rank: 685
score: 99.23733956473214
patch: break case 1 : sb . append ( $STRING$ ) ; break ;
rank: 685
score: 99.12045724051339
patch: case $STRING$ : sb . append ( ( Character ) $STRING$ ) ;
rank: 686
score: 99.32723236083984
patch: case $STRING$ : sb . append ( Character . trim ( c ) ) ;
rank: 686
score: 99.26046654485887
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; sb . append ( backslash CaMeL Escape ) ; }
rank: 686
score: 99.23967633928571
patch: case $STRING$ : default : sb . append ( $STRING$ ) ; }
rank: 686
score: 99.23728249289773
patch: * sb . append ( $STRING$ ) ; break ;
rank: 686
score: 99.19036395733173
patch: case $STRING$ : sb . append ( DEFAULT + $STRING$ ) ;
rank: 686
score: 99.14419320913461
patch: case format : sb . append ( $STRING$ ) ; break ;
rank: 686
score: 99.12038010817308
patch: case $STRING$ : sb . append ( $STRING$ , c ) ;
rank: 687
score: 99.32720947265625
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) . append ( $STRING$ ) . append ( $STRING$ ) ; break ;
rank: 687
score: 99.26045057508681
patch: if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation (
rank: 687
score: 99.25167199337122
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb ) ;
rank: 687
score: 99.2369140625
patch: break . append ( $STRING$ ) ; break ;
rank: 687
score: 99.1610576923077
patch: case 1 : sb . append ( 0 ) ; break ;
rank: 687
score: 99.1440938313802
patch: n = sb . append ( $STRING$ ) ; break ;
rank: 688
score: 99.33690592447917
patch: case $STRING$ : sb . append ( $STRING$ ) ; output CaMeL Charset CaMeL Encoder . append ( sb . char CaMeL At ( i ) ) ; }
rank: 688
score: 99.32707663143383
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) . append ( $STRING$ ) . to CaMeL Lower CaMeL Case ( ) ; }
rank: 688
score: 99.2604248046875
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append ( s . char CaMeL At (
rank: 688
score: 99.25157645089286
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , s ) ; }
rank: 688
score: 99.23626154119319
patch: break ; } sb . append ( $STRING$ ) ;
rank: 688
score: 99.16085815429688
patch: $STRING$ : sb . append ( $NUMBER$ ) ; break ;
rank: 688
score: 99.14174397786458
patch: $STRING$ ) sb . append ( $STRING$ ) ; break ;
rank: 688
score: 99.1198260967548
patch: case $STRING$ : String CaMeL Builder . append ( c ) ;
rank: 689
score: 99.33674225983796
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( sb . char CaMeL At ( i ) ) . append ( $STRING$ )
rank: 689
score: 99.26023236443015
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( doublequote CaMeL Escape ) ) ; break ;
rank: 689
score: 99.23222133091518
patch: case $STRING$ : break ; case $STRING$ : case $STRING$ : continue ;
rank: 689
score: 99.18754359654018
patch: String CaMeL Builder sb = new String CaMeL Builder ( s ) ;
rank: 689
score: 99.14093017578125
patch: value = sb . append ( $STRING$ ) ; break ;
rank: 689
score: 99.1192959872159
patch: case FALSE : sb . append ( $STRING$ ) ;
rank: 690
score: 99.33566720145089
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( sb . append ( output CaMeL Charset CaMeL Encoder . ) ) ;
rank: 690
score: 99.2503662109375
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder , c . to CaMeL String ( ) ) ;
rank: 690
score: 99.22984900841347
patch: case - 1 : sb . append ( $STRING$ ) ; }
rank: 690
score: 99.15863647460938
patch: case $STRING$ : break ; $STRING$ ; break ;
rank: 690
score: 99.13937612680289
patch: case $STRING$ : sb . append ( $STRING$ ; { break ;
rank: 691
score: 99.33566623263889
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( output CaMeL Charset CaMeL Encoder ) . append ( c ) ;
rank: 691
score: 99.3259041078629
patch: case $STRING$ : return Character . to CaMeL Lower CaMeL Case ( c ) ; case $STRING$ : return Character . to CaMeL Upper CaMeL Case ( c ) ;
rank: 691
score: 99.25029440487133
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( $STRING$ , c ) ;
rank: 691
score: 99.22853306361607
patch: case $STRING$ : return Integer . to CaMeL String ( c ) ;
rank: 691
score: 99.1572774251302
patch: case $NUMBER$ : . append ( $STRING$ ) ; break ;
rank: 691
score: 99.138427734375
patch: case STRING ) sb . append ( $STRING$ ) ; break ;
rank: 692
score: 99.33555385044643
patch: case $STRING$ : sb . append ( sb . append ( $STRING$ ) ) . append ( sb . append ( backslash CaMeL Escape ) ) ;
rank: 692
score: 99.32503255208333
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; sb . append ( Character . to CaMeL Upper CaMeL Case ( ;
rank: 692
score: 99.25988399621212
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( s , c ) ;
rank: 692
score: 99.250244140625
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( charset ) ; }
rank: 692
score: 99.23472377232143
patch: case $STRING$ : break ; } sb . append ( $STRING$ ) ;
rank: 692
score: 99.22840294471153
patch: case $STRING$ : sb . append ( $STRING$ ; break ; }
rank: 692
score: 99.18539663461539
patch: case $STRING$ : sb . append ( TYPE + $STRING$ ) ;
rank: 692
score: 99.13829627403847
patch: case $STRING$ : sb . append ( Character . $STRING$ ) ;
rank: 692
score: 99.1183194247159
patch: case quote : sb . append ( quote ) ;
rank: 693
score: 99.32447007123162
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ;
rank: 693
score: 99.25948079427083
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c ) ; break ; case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation (
rank: 693
score: 99.25002639358108
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( ) ) ; }
rank: 693
score: 99.22624860491071
patch: case $STRING$ : sb . append ( s ) ; break ; }
rank: 693
score: 99.11684744698661
patch: } else { case $STRING$ : sb . append ( quote ) ;
rank: 694
score: 99.32391948084677
patch: case $STRING$ : if ( Character . is CaMeL Digit ( c ) ) sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ;
rank: 694
score: 99.24985080295139
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } }
rank: 694
score: 99.22501046316964
patch: case $STRING$ : sb . append ( c ) ) ; break ;
rank: 694
score: 99.18387276785714
patch: case $STRING$ : sb . append ( s [ i ] ) ;
rank: 694
score: 99.1537334735577
patch: case $NUMBER$ : sb . append ( $STRING$ ) ; for (
rank: 694
score: 99.13794884314903
patch: case 1 : try { sb . append ( $STRING$ ) ;
rank: 694
score: 99.11647385817308
patch: case $STRING$ : sb . append ( $STRING$ || $STRING$ ) ;
rank: 695
score: 99.3344955444336
patch: case $STRING$ : sb . append ( output CaMeL Charset CaMeL Encoder . append ( sb . char CaMeL At ( i ) ) ) . append ( $STRING$ ) ;
rank: 695
score: 99.32371471774194
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) . append ( $STRING$ ) . to CaMeL Upper CaMeL Case ( ) ; break ;
rank: 695
score: 99.25911238386824
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , sb ) ;
rank: 695
score: 99.24979560319767
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( backslash CaMeL Escape ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c ) ;
rank: 695
score: 99.23091343470982
patch: case $STRING$ ; sb . append ( $STRING$ ) ; } break ;
rank: 695
score: 99.22248186383929
patch: case Character . MIN : sb . append ( $STRING$ ) ; }
rank: 695
score: 99.15126546223958
patch: case $STRING$ : sb . append ( $STRING$ ) ; throw
rank: 695
score: 99.13792835582386
patch: case $NUMBER$ ; sb . append ( $STRING$ ) ;
rank: 695
score: 99.11537863991477
patch: case static : sb . append ( $STRING$ ) ;
rank: 696
score: 99.33435452368951
patch: case $STRING$ : output CaMeL Charset CaMeL Encoder . append ( c ) ; break ; case $STRING$ : output CaMeL Charset CaMeL Encoder . append ( $STRING$ ) ;
rank: 696
score: 99.2491356102196
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . str CaMeL Escape ) ; }
rank: 696
score: 99.23053850446429
patch: break ; } else sb . append ( $STRING$ ) ; break ;
rank: 696
score: 99.1827392578125
patch: case $STRING$ : sb . append ( s , $STRING$ ) ;
rank: 696
score: 99.15047513521634
patch: case charset : sb . append ( $STRING$ ) ; break ;
rank: 696
score: 99.13756385216347
patch: case LINE ) sb . append ( $STRING$ ) ; break ;
rank: 696
score: 99.11536583533653
patch: case ( charset ) : sb . append ( $STRING$ ) ;
rank: 697
score: 99.33428192138672
patch: case $STRING$ ; break ; case $STRING$ : sb . append ( $STRING$ ) ;
rank: 697
score: 99.32332589285714
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; sb . append ( Character . to CaMeL Lower CaMeL Case ( ) ) ;
rank: 697
score: 99.25871930803571
patch: case $STRING$ : sb . append ( + $STRING$ ) ; break ;
rank: 697
score: 99.24899366425305
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c ) ;
rank: 697
score: 99.22158578725961
patch: case $STRING$ : case $STRING$ : return $STRING$ ; case $STRING$ :
rank: 697
score: 99.18263938210227
patch: case $STRING$ : sb . append ( null ) ;
rank: 697
score: 99.15018717447917
patch: case $STRING$ : break ; $STRING$ ; break ; break ;
rank: 697
score: 99.13715069110577
patch: append ( sb . append ( $STRING$ ) ) ; continue ;
rank: 697
score: 99.11505681818181
patch: case LABEL : sb . append ( $STRING$ ) ;
rank: 698
score: 99.33421947337963
patch: case $STRING$ : output CaMeL Charset CaMeL Encoder . append ( c ) ; break ; case $STRING$ : sb . append ( $STRING$ ) ;
rank: 698
score: 99.32279968261719
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) . append ( Character . to CaMeL Lower CaMeL Case ( ; }
rank: 698
score: 99.24896599264706
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( s , sb ) ;
rank: 698
score: 99.1793721516927
patch: case + $STRING$ : sb . append ( $STRING$ ) ;
rank: 698
score: 99.1368408203125
patch: buf . append ( $STRING$ ) ; break ;
rank: 698
score: 99.11409135298295
patch: case EMPTY : sb . append ( $STRING$ ) ;
rank: 699
score: 99.3341064453125
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder != null && output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { break ;
rank: 699
score: 99.322216796875
patch: case $NUMBER$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) . append ( $STRING$ ) . append ( $STRING$ ) ;
rank: 699
score: 99.24879409327652
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , output CaMeL Charset CaMeL Encoder ) ; }
rank: 699
score: 99.22825404575893
patch: sb . append ( $STRING$ ) . append ( c ) ; }
rank: 699
score: 99.22108154296875
patch: case $STRING$ : return $STRING$ ; case $STRING$ :
rank: 699
score: 99.17888532366071
patch: case $STRING$ : sb . append ( $STRING$ ) + $STRING$ ) ;
rank: 699
score: 99.14943284254808
patch: case RETURN : sb . append ( $STRING$ ) ; break ;
rank: 700
score: 99.33396693638393
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) . append ( c ) . append ( $STRING$ ) ;
rank: 700
score: 99.3218505859375
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ; return sb . to CaMeL String ( ) ; }
rank: 700
score: 99.25856119791666
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ; if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode (
rank: 700
score: 99.24870531486742
patch: case $STRING$ : sb . append ( ( ( String ) output CaMeL Charset CaMeL Encoder . to CaMeL String ( $STRING$ ) ) . to CaMeL String ( ) ) ;
rank: 700
score: 99.21983991350446
patch: case $STRING$ : case $STRING$ : break ; case $STRING$ : continue ;
rank: 700
score: 99.14870042067308
patch: case $NUMBER$ : break ; append ( $STRING$ ) ; break ;
rank: 700
score: 99.11330003004808
patch: case quote : sb . append ( quote ) ; break ;
rank: 701
score: 99.32143985523896
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( $STRING$ ) ) . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ;
rank: 701
score: 99.25846354166667
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , sb ) ;
rank: 701
score: 99.14743041992188
patch: case $STRING$ : sb . append ( $STRING$ ) ; /
rank: 701
score: 99.13572184244792
patch: else sb . append ( $STRING$ ) ; return $STRING$ ;
rank: 701
score: 99.1130840594952
patch: buf . append ( quote ) ; break ; case $STRING$ :
rank: 702
score: 99.32109832763672
patch: case $STRING$ : s . append ( $STRING$ ) . append ( c ) ;
rank: 702
score: 99.25830865675404
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; break ; case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation (
rank: 702
score: 99.24806082589286
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( backslash CaMeL Escape ) ; sb . append ( $STRING$ ) ;
rank: 702
score: 99.22530423677884
patch: case STAR : sb . append ( $STRING$ ) ; break ;
rank: 702
score: 99.17661830357143
patch: case $STRING$ : case $STRING$ : sb . append ( quote ) ;
rank: 702
score: 99.13543231670673
patch: case start : sb . append ( $STRING$ ) ; break ;
rank: 702
score: 99.11248779296875
patch: case ( $STRING$ : sb . append ( c ) ;
rank: 703
score: 99.33243534482759
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( output CaMeL Charset CaMeL Encoder . sb , c ) ;
rank: 703
score: 99.31981658935547
patch: case $STRING$ : s . append ( $STRING$ ) . append ( $STRING$ ) ;
rank: 703
score: 99.25826379024622
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( backslash CaMeL Escape ) ) ; break ;
rank: 703
score: 99.2477491425305
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String ( ) ) ;
rank: 703
score: 99.21543666294643
patch: case $STRING$ : if ( ) sb . append ( $STRING$ ) ;
rank: 703
score: 99.17523662860577
patch: String CaMeL Builder sb = new String CaMeL Builder ( ) ;
rank: 703
score: 99.14647498497597
patch: case abstract : sb . append ( $STRING$ ) ; break ;
rank: 703
score: 99.1120135967548
patch: case c : sb . append ( c ) ; break ;
rank: 704
score: 99.31973470052084
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) . to CaMeL Lower CaMeL Case ( ) . trim ( ) ; break ;
rank: 704
score: 99.24727957589286
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset ) ; }
rank: 704
score: 99.1748046875
patch: case $STRING$ : name . append ( $STRING$ ) ;
rank: 704
score: 99.1455078125
patch: case PROPERTY : sb . append ( $STRING$ ) ; break ;
rank: 705
score: 99.33155138739224
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { sb . append ( $STRING$ ) ;
rank: 705
score: 99.31941469254032
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) . append ( $STRING$ ) . append ( $STRING$ ) ; }
rank: 705
score: 99.25804036458334
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb ,
rank: 705
score: 99.24702962239583
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , sb , c ) ;
rank: 705
score: 99.21414888822116
patch: case $STRING$ ; sb . append ( c ) ; break ;
rank: 705
score: 99.17387172154018
patch: case $STRING$ ; case $STRING$ : sb . append ( c ) ;
rank: 705
score: 99.1453857421875
patch: case EQ : sb . append ( $STRING$ ) ; break ;
rank: 705
score: 99.1350430575284
patch: case $STRING$ + sb . append ( $STRING$ ) ;
rank: 705
score: 99.11045485276442
patch: switch ( output CaMeL Charset CaMeL Encoder ) { case $STRING$ :
rank: 706
score: 99.33097330729167
patch: case $STRING$ : { sb . append ( c ) ;
rank: 706
score: 99.31842447916667
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) . char CaMeL At ( 0 ) ) ; break ; }
rank: 706
score: 99.25784505208334
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; sb . append ( $STRING$ ) ; sb . append ( $STRING$ ) ;
rank: 706
score: 99.24697696461396
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , quote ) ;
rank: 706
score: 99.1448974609375
patch: $STRING$ : ; sb . append ( $STRING$ ) ; break ;
rank: 706
score: 99.11024983723958
patch: case $STRING$ : else sb . append ( c ) ;
rank: 707
score: 99.33088684082031
patch: case $STRING$ : output CaMeL Charset CaMeL Encoder . append ( sb . char CaMeL At ( i ) ) . append ( $STRING$ ) . append ( c ) ;
rank: 707
score: 99.3183830015121
patch: case $NUMBER$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( c ) . to CaMeL Lower CaMeL Case ( ) ; break ;
rank: 707
score: 99.25768713048987
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String ( ) ) ; if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode (
rank: 707
score: 99.24686104910714
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . append ( c ) ) ;
rank: 707
score: 99.22264753069196
patch: case $STRING$ : sb . append ( $STRING$ ) ; throw null ;
rank: 707
score: 99.17281668526786
patch: case ? $STRING$ : sb . append ( backslash CaMeL Escape ) ;
rank: 707
score: 99.13405198317308
patch: case $STRING$ || sb . append ( $STRING$ ) ; break ;
rank: 707
score: 99.1102294921875
patch: case $STRING$ : sb . append ( ( i ) ) ;
rank: 708
score: 99.330322265625
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( $STRING$ ) . append ( sb . to CaMeL String ( ) ) ;
rank: 708
score: 99.31825358072916
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c ) . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ;
rank: 708
score: 99.25765991210938
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) && output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) .
rank: 708
score: 99.24684053308823
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder ) ; singlequote CaMeL Escape
rank: 708
score: 99.2119140625
patch: case default : sb . append ( $STRING$ ) ; break ; }
rank: 708
score: 99.14450307992789
patch: case NEW : sb . append ( $STRING$ ) ; break ;
rank: 708
score: 99.13357309194711
patch: case 0 ? sb . append ( $STRING$ ) ; break ;
rank: 709
score: 99.31795501708984
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( $STRING$ ) ) ; return sb . to CaMeL Upper CaMeL Case ( $STRING$ ) ;
rank: 709
score: 99.24660773026316
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; }
rank: 709
score: 99.22198016826923
patch: } case $STRING$ : sb . append ( $STRING$ ) ; }
rank: 709
score: 99.17037527901786
patch: case $STRING$ 1 : sb . append ( $STRING$ ) ; break ;
rank: 709
score: 99.14427771935097
patch: case $STRING$ : System . println ( $STRING$ ) ; break ;
rank: 709
score: 99.13219197591145
patch: / ] sb . append ( $STRING$ ) ; break ;
rank: 709
score: 99.10935280539773
patch: case c : sb . append ( quote ) ;
rank: 710
score: 99.32949533770162
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; output CaMeL Charset CaMeL Encoder . append ( sb . char CaMeL At ( i ) ) ;
rank: 710
score: 99.31753540039062
patch: case $STRING$ : return Character . to CaMeL Upper CaMeL Case ( $STRING$ ) ;
rank: 710
score: 99.2574462890625
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . new CaMeL String ( ) ) ;
rank: 710
score: 99.24636579241071
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( backslash CaMeL Escape ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb ) ;
rank: 710
score: 99.20962960379464
patch: case $STRING$ : sb . append ( c ) ; } break ;
rank: 710
score: 99.14370492788461
patch: case length : sb . append ( $STRING$ ) ; break ;
rank: 710
score: 99.13157301682692
patch: case index : sb . append ( $STRING$ ) ; break ;
rank: 711
score: 99.31737493699596
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( $STRING$ ) . to CaMeL Lower CaMeL Case ( ) ; break ;
rank: 711
score: 99.25743519176136
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ; if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) )
rank: 711
score: 99.24596854967949
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( ( String ) output CaMeL Charset CaMeL Encoder . to CaMeL String ( ) ) ;
rank: 711
score: 99.20866176060268
patch: case Token . $STRING$ : sb . append ( $STRING$ ) ; }
rank: 711
score: 99.16800631009616
patch: case $STRING$ : sb . append ( STRING + $STRING$ ) ;
rank: 711
score: 99.10892427884616
patch: case c : sb . append ( quote ) ; break ;
rank: 712
score: 99.32870588631465
patch: case $STRING$ : String CaMeL Builder . append ( sb . char CaMeL At ( i ) ) ; sb . append ( backslash CaMeL Escape ) ;
rank: 712
score: 99.31717681884766
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; return sb . to CaMeL Lower CaMeL Case ( $STRING$ ) ;
rank: 712
score: 99.25741872479838
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : this . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c ) ;
rank: 712
score: 99.20778111049107
patch: case $STRING$ : continue ; case $STRING$ : break ; case $STRING$ :
rank: 712
score: 99.16663469587054
patch: } break ; case $STRING$ : sb . append ( $STRING$ ) ;
rank: 712
score: 99.14298502604167
patch: append ( sb . trim ( ) ) ; break ;
rank: 712
score: 99.10757211538461
patch: case $STRING$ ? $STRING$ : sb . append ( c ) ;
rank: 713
score: 99.32862955729166
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; sb . append ( $STRING$ ) . append ( output CaMeL Charset CaMeL Encoder . ) ;
rank: 713
score: 99.31716918945312
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( Character . to CaMeL Upper CaMeL Case ( c ) . char CaMeL At ( 0 ) ) ;
rank: 713
score: 99.25733947753906
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { sb . append ( c ) ; }
rank: 713
score: 99.24534653172348
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( output CaMeL Charset CaMeL Encoder . to CaMeL Hex CaMeL String ( backslash CaMeL Escape ) ) ;
rank: 713
score: 99.2069424715909
patch: case $STRING$ : sb . append ( ; break ;
rank: 713
score: 99.16591971261161
patch: String CaMeL Builder sb = new String CaMeL Builder ( quote ) ;
rank: 713
score: 99.14285982572116
patch: case BLOCK : sb . append ( $STRING$ ) ; break ;
rank: 713
score: 99.13069974459134
patch: else sb . append ( $STRING$ ) ; break ; ; }
rank: 713
score: 99.10732797475961
patch: case $STRING$ : sb . append ( $STRING$ | c ) ;
rank: 714
score: 99.25730202414773
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 714
score: 99.2450812844669
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , this ) ;
rank: 714
score: 99.2068622295673
patch: case Character . MIN : sb . append ( $STRING$ ) ;
rank: 714
score: 99.16507662259616
patch: case STRING : sb . append ( backslash CaMeL Escape ) ;
rank: 714
score: 99.14083158052884
patch: case $STRING$ : . append ( $STRING$ ) ; break ; ;
rank: 714
score: 99.10720825195312
patch: case ( ) : sb . append ( $STRING$ ) ;
rank: 715
score: 99.31680297851562
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) . append ( $STRING$ ) . append ( c ) ; break ;
rank: 715
score: 99.25723470052084
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) break ;
rank: 715
score: 99.24444395123106
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . get CaMeL String ( $STRING$ ) ) ;
rank: 715
score: 99.20552280970982
patch: case $STRING$ : sb . append ( $STRING$ + $STRING$ ) ; }
rank: 715
score: 99.14004281850961
patch: case $STRING$ : break ; case $STRING$ : break ; $STRING$ ;
rank: 715
score: 99.1065204326923
patch: case $STRING$ : c = sb . append ( $STRING$ ) ;
rank: 716
score: 99.32830403645833
patch: case $STRING$ : output CaMeL Charset CaMeL Encoder . append ( sb . char CaMeL At ( i ) ) ; sb . append ( $STRING$ ) ; }
rank: 716
score: 99.3163070678711
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; return sb . to CaMeL Lower CaMeL Case ( ) ; }
rank: 716
score: 99.24430541992187
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String ( ) . to CaMeL String ( ) ) ; break ;
rank: 716
score: 99.205322265625
patch: case $STRING$ : return String . value CaMeL Of ( c ) ;
rank: 716
score: 99.1646259014423
patch: case $STRING$ : sb . append ( $STRING$ ) . append (
rank: 716
score: 99.1397235576923
patch: case append : sb . append ( $STRING$ ) ; break ;
rank: 716
score: 99.1065204326923
patch: case $STRING$ : str CaMeL Escape . append ( $STRING$ ) ;
rank: 717
score: 99.32828495420259
patch: switch ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 717
score: 99.31621723790323
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( c ) . to CaMeL Char CaMeL Array ( ) ; break ;
rank: 717
score: 99.24391741071429
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( backslash CaMeL Escape , doublequote CaMeL Escape ) ; break ;
rank: 717
score: 99.21824951171875
patch: else sb . append ( $STRING$ ) ; }
rank: 717
score: 99.20474947415866
patch: case parse : sb . append ( $STRING$ ) ; break ;
rank: 717
score: 99.13916015625
patch: case $STRING$ : try . append ( $STRING$ ) ; break ;
rank: 718
score: 99.327587890625
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) . append ( $STRING$ ) . append ( backslash CaMeL Escape ) ;
rank: 718
score: 99.31597900390625
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; break ;
rank: 718
score: 99.25613403320312
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) && output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( 0 ) )
rank: 718
score: 99.24369981553819
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , quote ) ;
rank: 718
score: 99.20416259765625
patch: case $STRING$ : sb . append ( $STRING$ ) $STRING$ ; break ;
rank: 718
score: 99.16103891225961
patch: case ? case $STRING$ : sb . append ( $STRING$ ) ;
rank: 718
score: 99.1368408203125
patch: case DOT : sb . append ( $STRING$ ) ; break ;
rank: 718
score: 99.1287841796875
patch: case $STRING$ : sb . append ( DELIMITER ) ; break ;
rank: 718
score: 99.10558143028847
patch: case $STRING$ : sb = new String CaMeL Builder ( ) ;
rank: 719
score: 99.32723236083984
patch: case $STRING$ : sb . append ( s . append ( quote ) ) ;
rank: 719
score: 99.24350314670139
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; break ; case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( $STRING$ ) ;
rank: 719
score: 99.21731332632211
patch: * * sb . append ( $STRING$ ) ; break ; }
rank: 719
score: 99.15953480113636
patch: case $STRING$ : i . append ( $STRING$ ) ;
rank: 719
score: 99.13649338942308
patch: case $STRING$ : append ( $STRING$ ) ; break ; break ;
rank: 719
score: 99.12864332932692
patch: sb . append ( $STRING$ ) ; break ; case $STRING$ ;
rank: 719
score: 99.10538423978366
patch: case $STRING$ : sb . append ( c ) ; true ;
rank: 720
score: 99.32704380580357
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( s . char CaMeL At ( i ) ) . append ( quote ) ;
rank: 720
score: 99.2433330829327
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . str CaMeL Escape , singlequote CaMeL Escape ) ;
rank: 720
score: 99.21634928385417
patch: } sb . append ( $STRING$ ) ;
rank: 720
score: 99.20201764787946
patch: case $STRING$ ) : sb . append ( c ) ; break ;
rank: 720
score: 99.15591195913461
patch: case $STRING$ + $STRING$ : sb . append ( quote ) ;
rank: 720
score: 99.13628680889423
patch: append ( $STRING$ + sb . append ( $STRING$ ) ) ;
rank: 720
score: 99.12863393930289
patch: case trim : sb . append ( $STRING$ ) ; break ;
rank: 720
score: 99.10497107872597
patch: case $STRING$ : sb : sb . append ( $STRING$ ) ;
rank: 721
score: 99.31451970880681
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( $STRING$ ) ) ; sb . append ( Character . to CaMeL Lower CaMeL Case ( ;
rank: 721
score: 99.25537109375
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c ) ;
rank: 721
score: 99.2432861328125
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String ( ) , $STRING$ ) ;
rank: 721
score: 99.21625627790179
patch: case $STRING$ : sb . put ( $STRING$ ) ; break ; }
rank: 721
score: 99.2012939453125
patch: case $STRING$ : sb . append ( line ) ; break ; }
rank: 721
score: 99.15523274739583
patch: { case $STRING$ : sb . append ( $STRING$ ) ;
rank: 721
score: 99.1359393780048
patch: case $STRING$ : if ( char == $STRING$ ) { break ;
rank: 721
score: 99.12863159179688
patch: $STRING$ : sb . append ( $STRING$ ) ;
rank: 722
score: 99.31432387408088
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ;
rank: 722
score: 99.24321153428819
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . str CaMeL Escape ) ; break ;
rank: 722
score: 99.21510667067308
patch: break ; sb . append ( $STRING$ ) ; break ; }
rank: 722
score: 99.15377103365384
patch: case $STRING$ : sb . append ( $STRING$ - $STRING$ ) ;
rank: 722
score: 99.13556377704327
patch: case $STRING$ : sb . append ( $STRING$ ) ; / /
rank: 722
score: 99.128173828125
patch: c = sb . append ( $STRING$ ) ; break ;
rank: 722
score: 99.10274564302884
patch: text . append ( quote ) ; break ; case $STRING$ :
rank: 723
score: 99.32627766927084
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( sb . char CaMeL At ( i ) ) . append ( $STRING$ ) ; break ;
rank: 723
score: 99.31414979876894
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( $STRING$ ) ) . append ( Character . to CaMeL Lower CaMeL Case ( c ) )
rank: 723
score: 99.24308035714286
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb ) ;
rank: 723
score: 99.19872174944196
patch: case DEFAULT : sb . append ( $STRING$ ) ; break ; }
rank: 723
score: 99.13269981971153
patch: case $STRING$ , sb . append ( $STRING$ ) ; break ;
rank: 723
score: 99.12710571289062
patch: case $NUMBER$ : sb . append ( ) ; break ;
rank: 723
score: 99.10272686298077
patch: case $STRING$ : sb [ i ] = $STRING$ ; break ;
rank: 724
score: 99.325927734375
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( c ) ) ;
rank: 724
score: 99.31382123161765
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( sb . char CaMeL At ( i ) ) . char CaMeL At ( i ) ) ;
rank: 724
score: 99.24156668526786
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( Charset CaMeL Encoder ) ; }
rank: 724
score: 99.21410023082386
patch: break sb . append ( $STRING$ ) ; break ;
rank: 724
score: 99.1260274251302
patch: break ; $STRING$ : sb . append ( $STRING$ ) ;
rank: 725
score: 99.32582092285156
patch: case $STRING$ : output CaMeL Charset CaMeL Encoder . append ( sb . char CaMeL At ( i ) ) . append ( $STRING$ ) . append ( $STRING$ ) ;
rank: 725
score: 99.31330915178572
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) . to CaMeL Lower CaMeL Case ( ) ; break ;
rank: 725
score: 99.25375027126736
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; break ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c ) ;
rank: 725
score: 99.24126120174633
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( out , c ) ;
rank: 725
score: 99.19601675180289
patch: case $STRING$ : sb . append ( chars ) ; break ;
rank: 725
score: 99.15352376302083
patch: case $STRING$ : sb . append ( $STRING$ $NUMBER$ ) ;
rank: 725
score: 99.12374877929688
patch: $STRING$ * sb . append ( $STRING$ ) ; break ;
rank: 725
score: 99.0989990234375
patch: result . append ( quote ) ; break ; case $STRING$ :
rank: 726
score: 99.31217956542969
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) . append ( $STRING$ ) . append ( $STRING$ ) ; break ;
rank: 726
score: 99.25368245442708
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; break ; case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb ) ;
rank: 726
score: 99.24117963741988
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String ( ) . to CaMeL String ( ) ) ; }
rank: 726
score: 99.21348353794643
patch: case $STRING$ + sb . append ( $STRING$ ) ; } break ;
rank: 726
score: 99.1956787109375
patch: case $STRING$ : sb . append ( $STRING$ : ) ; break ;
rank: 726
score: 99.13185471754808
patch: case BOTH : sb . append ( $STRING$ ) ; break ;
rank: 726
score: 99.12071644176136
patch: append ( $STRING$ ) ; break ; case $STRING$ ;
rank: 726
score: 99.09889729817708
patch: case $STRING$ : sb . append ( $STRING$ false ) ;
rank: 727
score: 99.32560221354167
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder != null && output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( backslash CaMeL Escape ) ) {
rank: 727
score: 99.31192508820564
patch: case $STRING$ : if ( Character . is CaMeL Whitespace ( c ) ) sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ;
rank: 727
score: 99.25265404485887
patch: case $STRING$ : sb . append ( c ) ; break ; case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb ) ;
rank: 727
score: 99.1951192220052
patch: case $STRING$ : break ; default : break ; } }
rank: 727
score: 99.15299682617187
patch: case $STRING$ : sb . append ( ) ;
rank: 727
score: 99.13084998497597
patch: case VOID : sb . append ( $STRING$ ) ; break ;
rank: 727
score: 99.09879244290866
patch: case $STRING$ : sb . append ( c ) ; false ;
rank: 728
score: 99.32536315917969
patch: case $STRING$ : continue ; case $STRING$ : sb . append ( c ) ;
rank: 728
score: 99.31156412760417
patch: case $STRING$ : case $STRING$ : sb . append ( c ) ; }
rank: 728
score: 99.25230084043561
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ; break ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c ) ;
rank: 728
score: 99.1511563387784
patch: case $STRING$ : value . append ( $STRING$ ) ;
rank: 728
score: 99.13072791466347
patch: case $STRING$ : sb . append ( $STRING$ ) ; break .
rank: 728
score: 99.09791148792614
patch: case NAME : sb . append ( $STRING$ ) ;
rank: 729
score: 99.31094065020162
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( $STRING$ ) ) . append ( Character . to CaMeL Upper CaMeL Case ( ;
rank: 729
score: 99.24069053248355
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder ) ; sb . to CaMeL String ( ) ;
rank: 729
score: 99.21238356370192
patch: else sb . append ( $STRING$ ) ; break ; } }
rank: 729
score: 99.15072866586539
patch: case Charset . $STRING$ : sb . append ( $STRING$ ) ;
rank: 729
score: 99.09772198016827
patch: case $STRING$ : sb . append ( $STRING$ ) ; else {
rank: 730
score: 99.32489013671875
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( $STRING$ ) . append ( output CaMeL Charset CaMeL Encoder . ) ;
rank: 730
score: 99.31046024445564
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) . append ( Character . to CaMeL Upper CaMeL Case ( ;
rank: 730
score: 99.25199250252017
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( output CaMeL Charset CaMeL Encoder ,
rank: 730
score: 99.24052470439189
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , c ) ; }
rank: 730
score: 99.1941387469952
patch: default : sb . append ( c ) ; break ; }
rank: 730
score: 99.11146036783855
patch: append ( sb . append ( $STRING$ ) ; break ;
rank: 730
score: 99.0970928485577
patch: case $STRING$ : sb . append ( c + c ) ;
rank: 731
score: 99.30997467041016
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; return sb . to CaMeL Lower CaMeL Case ( s ) ;
rank: 731
score: 99.25197405133929
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) && output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( doublequote CaMeL Escape ) )
rank: 731
score: 99.24041389016544
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) )
rank: 731
score: 99.21082414899554
patch: case $STRING$ : s . append ( $STRING$ ) ; break ; }
rank: 731
score: 99.10975138346355
patch: try { sb . append ( $STRING$ ) ; break ;
rank: 731
score: 99.09661310369319
patch: case ) : sb . append ( c ) ;
rank: 732
score: 99.324560546875
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( output CaMeL Charset CaMeL Encoder ) . append ( $STRING$ ) . append ( $STRING$ ) ;
rank: 732
score: 99.3097915649414
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( Character . to CaMeL Lower CaMeL Case ( c ) . char CaMeL At ( i ) ) ;
rank: 732
score: 99.24032369474085
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder , doublequote CaMeL Escape . to CaMeL String ( ) ) ;
rank: 732
score: 99.12904710036058
patch: case $STRING$ : sb . append ( EOF ) ; break ;
rank: 733
score: 99.32325060614224
patch: case $STRING$ : sb . append ( output CaMeL Charset CaMeL Encoder . append ( sb . char CaMeL At ( i ) , c ) ) ;
rank: 733
score: 99.30964660644531
patch: case Character . $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) . append ( $STRING$ ) . append ( $STRING$ ) ;
rank: 733
score: 99.2507842092803
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String ( ) ) ; sb . append ( $STRING$ ) ; }
rank: 733
score: 99.24024135044642
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , null ) ; }
rank: 733
score: 99.20987642728366
patch: case $STRING$ + sb . append ( $STRING$ ) ; continue ;
rank: 733
score: 99.19315011160714
patch: case $STRING$ : sb . append ( $STRING$ ) ; } ) ;
rank: 733
score: 99.15005258413461
patch: case $STRING$ : c . append ( $STRING$ ) ; break ;
rank: 733
score: 99.12869027944711
patch: case MAIN : sb . append ( $STRING$ ) ; break ;
rank: 733
score: 99.09573129507211
patch: case $STRING$ * $STRING$ : sb . append ( $STRING$ ) ;
rank: 734
score: 99.322412109375
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( $STRING$ ) . append ( s . char CaMeL At ( i ) ) ;
rank: 734
score: 99.23941824776786
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) {
rank: 734
score: 99.20811110276442
patch: break ; } return sb . to CaMeL String ( ) ;
rank: 734
score: 99.1912841796875
patch: case YES : sb . append ( $STRING$ ) ; break ;
rank: 734
score: 99.14961381392045
patch: case MIN : sb . append ( $STRING$ ) ;
rank: 734
score: 99.09982299804688
patch: case $STRING$ ] ; sb . append ( $STRING$ ) ;
rank: 734
score: 99.09544020432692
patch: case null : sb . append ( backslash CaMeL Escape ) ;
rank: 735
score: 99.30887488162878
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ; sb . append ( Character . to CaMeL Upper CaMeL Case ( ;
rank: 735
score: 99.250244140625
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) {
rank: 735
score: 99.23832622327302
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder , s . to CaMeL String ( ) ) ;
rank: 735
score: 99.20785086495536
patch: case $STRING$ : sb . char CaMeL Value ( ) ; break ;
rank: 735
score: 99.12838040865384
patch: case $STRING$ : if ( c == $STRING$ ) { break ;
rank: 735
score: 99.0985819498698
patch: case 0 : return sb . append ( $STRING$ ) ;
rank: 735
score: 99.09454345703125
patch: case : sb . append ( c ) ; break ;
rank: 736
score: 99.30840879498106
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) . append ( Character . to CaMeL Lower CaMeL Case ( c ) )
rank: 736
score: 99.25017951516544
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; System . out . append ( backslash CaMeL Escape ) ; break ;
rank: 736
score: 99.23829377003206
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( Charset CaMeL Encoder . str CaMeL Escape ) ; }
rank: 736
score: 99.20743502103366
patch: case $STRING$ : in . append ( $STRING$ ) ; break ;
rank: 736
score: 99.12823955829327
patch: break ; sb . append ( $STRING$ ) ; break ; ;
rank: 736
score: 99.09452681107955
patch: case NONE : sb . append ( $STRING$ ) ;
rank: 737
score: 99.321337890625
patch: case $STRING$ : sb . append ( c ) ; sb . append ( $STRING$ ) . append ( sb . char CaMeL At ( i ) ) ;
rank: 737
score: 99.3083251953125
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( c )
rank: 737
score: 99.25013643152573
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , doublequote CaMeL Escape , doublequote CaMeL Escape , doublequote CaMeL Escape ) ;
rank: 737
score: 99.1846036044034
patch: case $STRING$ : break ; case $STRING$ : continue ;
rank: 737
score: 99.14788348858173
patch: case FORMAT : sb . append ( $STRING$ ) ; break ;
rank: 737
score: 99.12807053786058
patch: case STRING : sb . append ( $NUMBER$ ) ; break ;
rank: 737
score: 99.09586791992187
patch: buffer . append ( $STRING$ ) ; break ;
rank: 737
score: 99.09414438100961
patch: case ERROR : sb . append ( backslash CaMeL Escape ) ;
rank: 738
score: 99.18442007211539
patch: case $STRING$ : return $STRING$ ; case $STRING$ : case $STRING$ :
rank: 738
score: 99.147705078125
patch: case $STRING$ : sb . append ( - 1 ) ;
rank: 738
score: 99.12720665564903
patch: $STRING$ : sb . append ( $STRING$ ) ; return break ;
rank: 738
score: 99.09542846679688
patch: case ) sb . append ( $STRING$ ) ; break ;
rank: 738
score: 99.09300740559895
patch: case - 1 : sb . append ( quote ) ;
rank: 739
score: 99.3075942993164
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( sb . char CaMeL At ( i ) ) ) . append ( $STRING$ ) ;
rank: 739
score: 99.24988162878788
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , sb ) ;
rank: 739
score: 99.23752728630515
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder , doublequote CaMeL Escape $NUMBER$
rank: 739
score: 99.14719801682692
patch: case $STRING$ - 1 : sb . append ( $STRING$ ) ;
rank: 739
score: 99.1265399639423
patch: case $STRING$ : append . append ( $STRING$ ) ; break ;
rank: 739
score: 99.09327189127605
patch: case $NUMBER$ : } sb . append ( $STRING$ ) ;
rank: 740
score: 99.30730842141544
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; sb . append ( Character . to CaMeL Upper CaMeL Case ( ; }
rank: 740
score: 99.23726283482142
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . append ( $STRING$ ) ) ;
rank: 740
score: 99.20592389787946
patch: case EOL : sb . append ( $STRING$ ) ; break ; }
rank: 740
score: 99.1261737530048
patch: case 1 : sb . append ( 1 ) ; break ;
rank: 740
score: 99.09235174005681
patch: return $STRING$ : sb . append ( $STRING$ ) ;
rank: 741
score: 99.32026198814656
patch: case $STRING$ : output CaMeL Charset CaMeL Encoder . append ( backslash CaMeL Escape ) ; break ; case $STRING$ : sb . append ( c ) ;
rank: 741
score: 99.30693989415323
patch: case $NUMBER$ : sb . append ( $STRING$ ) . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) . append ( $STRING$ ) ; }
rank: 741
score: 99.24894634046052
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) break ;
rank: 741
score: 99.23710239955358
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String ( ) , c ) ; }
rank: 741
score: 99.20549665178571
patch: case $STRING$ : sb . append ( $STRING$ ) ; } return ;
rank: 741
score: 99.18032836914062
patch: case $STRING$ : break ; default : break ;
rank: 741
score: 99.12595778245192
patch: case $STRING$ : if ( String != 0 ) { break ;
rank: 741
score: 99.09130859375
patch: 1 : sb . append ( $STRING$ ) ; break ;
rank: 742
score: 99.32007623487904
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) ; break ;
rank: 742
score: 99.30662582859848
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( $STRING$ ) ) . append ( Character . to CaMeL Lower CaMeL Case ( Character . ;
rank: 742
score: 99.24880888967803
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . c ) ;
rank: 742
score: 99.23709542410714
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder ) ; output CaMeL Charset CaMeL Encoder . to CaMeL String ( ) ;
rank: 742
score: 99.20509690504808
patch: case $STRING$ * sb . append ( $STRING$ ) ; break ;
rank: 742
score: 99.17733060396634
patch: case $STRING$ : case $STRING$ : case $STRING$ : ; break ;
rank: 742
score: 99.1456298828125
patch: case $STRING$ : sb . append ( c ) + $STRING$ :
rank: 742
score: 99.1250469501202
patch: case $STRING$ : if ( String == 0 ) { break ;
rank: 742
score: 99.09178670247395
patch: case $STRING$ : sb . append ( $STRING$ ) ; break
rank: 743
score: 99.32000101023706
patch: case $STRING$ : sb . append ( output CaMeL Charset CaMeL Encoder . append ( sb . char CaMeL At ( i ) ) ) ; } }
rank: 743
score: 99.30631510416667
patch: case $STRING$ : if ( $STRING$ . equals CaMeL Ignore CaMeL Case ( c ) ) sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ;
rank: 743
score: 99.2484359741211
patch: case $STRING$ : String CaMeL Builder sb = new String CaMeL Builder ( s . char CaMeL At ( i ) . to CaMeL Lower CaMeL Case ( ) ) ;
rank: 743
score: 99.23701028262867
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder , singlequote CaMeL Escape $NUMBER$
rank: 743
score: 99.14462515024039
patch: case $STRING$ : sb . append ( NAME + $STRING$ ) ;
rank: 743
score: 99.12489827473958
patch: sb . append ( $STRING$ + $STRING$ ) ; break ;
rank: 744
score: 99.31872137661638
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( sb . append ( c ) . to CaMeL String ( ) ) ;
rank: 744
score: 99.24820523648648
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) && output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( output CaMeL Charset CaMeL Encoder . to CaMeL
rank: 744
score: 99.23700629340277
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; break ;
rank: 744
score: 99.12478402944711
patch: case OTHER : sb . append ( $STRING$ ) ; break ;
rank: 744
score: 99.09138627485795
patch: case 0 : sb . append ( c ) ;
rank: 744
score: 99.0893046061198
patch: else case $STRING$ : sb . append ( $STRING$ ) ;
rank: 745
score: 99.31834253771552
patch: if ( output CaMeL Charset CaMeL Encoder != null ) { if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) break ;
rank: 745
score: 99.30599483366936
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) . append ( $STRING$ ) . append ( c ) ; }
rank: 745
score: 99.24800618489583
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) && output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( backslash CaMeL Escape ) ) break ;
rank: 745
score: 99.23694565716912
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( null , c ) ;
rank: 745
score: 99.17338053385417
patch: case $STRING$ : case $STRING$ : case $STRING$ : continue ;
rank: 745
score: 99.1247089092548
patch: case THIS : sb . append ( $STRING$ ) ; break ;
rank: 745
score: 99.0908203125
patch: case $STRING$ : sb . append ( c + $NUMBER$ ) ;
rank: 745
score: 99.08889770507812
patch: ch = sb . append ( $STRING$ ) ; break ;
rank: 746
score: 99.31796559979838
patch: case String CaMeL Builder . $STRING$ : sb . append ( $STRING$ ) ; break ; case String CaMeL Builder . $STRING$ : sb . append ( c ) ;
rank: 746
score: 99.23694196428572
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( backslash CaMeL Escape ) ; sb . append ( c ) ;
rank: 746
score: 99.20270647321429
patch: case $STRING$ : ! sb . append ( $STRING$ ) ; break ;
rank: 746
score: 99.1732177734375
patch: case $STRING$ : sb . append ( char ) ; break ;
rank: 746
score: 99.13701837713069
patch: case $STRING$ : sb . append ( STRING ) ;
rank: 746
score: 99.09074263139205
patch: - 1 : sb . append ( $STRING$ ) ;
rank: 747
score: 99.31792805989583
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } }
rank: 747
score: 99.30564880371094
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) . append ( Character . to CaMeL Lower CaMeL Case ( ; }
rank: 747
score: 99.24736724028716
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder , c ) ;
rank: 747
score: 99.23689558699324
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( quote ) ) ;
rank: 747
score: 99.1363192471591
patch: case MAX : sb . append ( $STRING$ ) ;
rank: 747
score: 99.12306722005208
patch: case $STRING$ : break ; case $STRING$ : { break ;
rank: 747
score: 99.09051983173077
patch: case char [ ] : sb . append ( $STRING$ ) ;
rank: 747
score: 99.0859375
patch: * else sb . append ( $STRING$ ) ; break ;
rank: 748
score: 99.31785425646552
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder != null ) { sb . append ( sb . char CaMeL At ( i ) ) ;
rank: 748
score: 99.23662505278716
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder , singlequote CaMeL Escape , c ) ;
rank: 748
score: 99.20168631417411
patch: break ; } break ; } sb . append ( $STRING$ ) ;
rank: 748
score: 99.1699969951923
patch: case $STRING$ : case $STRING$ : break ; default : break ;
rank: 748
score: 99.13570462740384
patch: case $STRING$ : sb . append ( 0 + $STRING$ ) ;
rank: 748
score: 99.09049479166667
patch: case : sb . append ( quote ) ; break ;
rank: 749
score: 99.31770324707031
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( output CaMeL Charset CaMeL Encoder . append ( backslash CaMeL Escape ) ) ;
rank: 749
score: 99.30501827116936
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( sb . to CaMeL Lower CaMeL Case ( ) ) ; break ;
rank: 749
score: 99.24675750732422
patch: case $STRING$ : String CaMeL Builder sb = new String CaMeL Builder ( s . char CaMeL At ( i ) . to CaMeL String ( ) ) ; break ;
rank: 749
score: 99.23633510044642
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( output CaMeL Charset CaMeL Encoder , c ) ) ;
rank: 749
score: 99.1356709798177
patch: case $STRING$ : sb . append ( s . char CaMeL
rank: 749
score: 99.12291463216145
patch: case $STRING$ : break ; break ; $STRING$ ; break ;
rank: 749
score: 99.08974045973558
patch: case $STRING$ + c : sb . append ( $STRING$ ) ;
rank: 749
score: 99.08357747395833
patch: result = sb . append ( $STRING$ ) ; break ;
rank: 750
score: 99.23607680376838
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder ) ; doublequote CaMeL Escape
rank: 750
score: 99.20145961216518
patch: case 1 ; sb . append ( $STRING$ ) ; break ; }
rank: 750
score: 99.16719876802884
patch: case Integer . MIN : sb . append ( $STRING$ ) ;
rank: 750
score: 99.08938363882211
patch: case ( s . char CaMeL At ( i ) ) :
rank: 750
score: 99.08352661132812
patch: / else sb . append ( $STRING$ ) ; break ;
rank: 751
score: 99.31761881510417
patch: case $STRING$ : output CaMeL Charset CaMeL Encoder . append ( sb . char CaMeL At ( i ) ) ; sb . append ( c ) ; }
rank: 751
score: 99.2461799172794
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; case $STRING$ : sb . append ( backslash CaMeL Escape . to CaMeL String ( ) ) ;
rank: 751
score: 99.20081438337054
patch: case $STRING$ : out . append ( $STRING$ ) ; break ; }
rank: 751
score: 99.13446514423077
patch: case $STRING$ : sb { sb . append ( $STRING$ ) ;
rank: 751
score: 99.12267127403847
patch: case GT : sb . append ( $STRING$ ) ; break ;
rank: 751
score: 99.08885779747597
patch: case $STRING$ : sb . append ( ( String ) break ;
rank: 751
score: 99.08294122869319
patch: case NULL : sb . append ( $STRING$ ) ;
rank: 752
score: 99.31681034482759
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( $STRING$ ) ) ;
rank: 752
score: 99.30420619419642
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ; sb . append ( Character . to CaMeL Lower CaMeL Case ( ) ) ;
rank: 752
score: 99.24591238839285
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) {
rank: 752
score: 99.23533121744792
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . str CaMeL Escape ) ;
rank: 752
score: 99.1990079012784
patch: break . to CaMeL String ( ) ; break ;
rank: 752
score: 99.16484239366319
patch: case $STRING$ : case $STRING$ : break ;
rank: 752
score: 99.13426795372597
patch: case $STRING$ : this . sb . append ( $STRING$ ) ;
rank: 752
score: 99.08876389723558
patch: case ( $NUMBER$ ) : sb . append ( $STRING$ ) ;
rank: 753
score: 99.31650390625
patch: case $STRING$ : try { sb . append ( backslash CaMeL Escape ) ;
rank: 753
score: 99.30416870117188
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ; return sb . to CaMeL Lower CaMeL Case ( ) ; }
rank: 753
score: 99.2457176414696
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . c ) ;
rank: 753
score: 99.23518415178572
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( $STRING$ ) ;
rank: 753
score: 99.16323513454861
patch: case $STRING$ : return $STRING$ + c ;
rank: 753
score: 99.13409893329327
patch: case $STRING$ & $STRING$ : sb . append ( $STRING$ ) ;
rank: 753
score: 99.0885760967548
patch: case $STRING$ : else { sb . append ( $STRING$ ) ;
rank: 753
score: 99.0820821126302
patch: case 1 : sb . append ( ) ; break ;
rank: 754
score: 99.3041283392137
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) . append ( $STRING$ ) . append ( $STRING$ ) ; }
rank: 754
score: 99.23510024126838
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , true ) ;
rank: 754
score: 99.19771321614583
patch: break ; } sb . append ( $STRING$ ) ; }
rank: 754
score: 99.12191068209134
patch: case $STRING$ : values . append ( $STRING$ ) ; break ;
rank: 754
score: 99.08651029146634
patch: case Exception . $STRING$ : sb . append ( $STRING$ ) ;
rank: 754
score: 99.0777254971591
patch: case 1 ; sb . append ( $STRING$ ) ;
rank: 755
score: 99.31573275862068
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( $STRING$ ) . append ( output CaMeL Charset CaMeL Encoder . $STRING$ ) ;
rank: 755
score: 99.30357776988636
patch: case $STRING$ : if ( Character . is CaMeL Upper CaMeL Case ( c ) ) sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ;
rank: 755
score: 99.23499253216912
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder , sb , c ) ;
rank: 755
score: 99.1323993389423
patch: case $STRING$ : sb . append ( DEFAULT + c ) ;
rank: 755
score: 99.12161020132211
patch: case $STRING$ : iterator . append ( $STRING$ ) ; break ;
rank: 755
score: 99.08642578125
patch: case $STRING$ : sb . append ( ( quote ) ) ;
rank: 755
score: 99.0758056640625
patch: i = sb . append ( $STRING$ ) ; break ;
rank: 756
score: 99.315576171875
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder != null ) { if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( $STRING$ ) )
rank: 756
score: 99.3030776977539
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( $STRING$ ) ) . append ( $STRING$ ) . append ( c ) ; break ;
rank: 756
score: 99.23495718149039
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( c ) ) ; break ;
rank: 756
score: 99.19527180989583
patch: sb . append ( $STRING$ ) ; } return break ;
rank: 756
score: 99.16173299153645
patch: case DEFAULT : sb . append ( $STRING$ ) ; }
rank: 756
score: 99.13150024414062
patch: case $STRING$ : sb . append ( new $STRING$ ) ;
rank: 756
score: 99.12128155048077
patch: case $STRING$ : append ( $STRING$ ) ; break ; $STRING$ ;
rank: 757
score: 99.3026123046875
patch: case $STRING$ : if ( Character . is CaMeL Upper CaMeL Case ( c ) ) { sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ;
rank: 757
score: 99.24483816964286
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; break ;
rank: 757
score: 99.23450425091912
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , s . to CaMeL String ( ) ) ;
rank: 757
score: 99.16173299153645
patch: case $STRING$ : return $STRING$ ; case $STRING$ : break ;
rank: 757
score: 99.1309814453125
patch: case $STRING$ + c . char CaMeL At ( i ) ;
rank: 757
score: 99.08614095052083
patch: case - 0 : sb . append ( $STRING$ ) ;
rank: 758
score: 99.3023681640625
patch: case $STRING$ : if ( $STRING$ . equals CaMeL Ignore CaMeL Case ( c ) ) { sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ;
rank: 758
score: 99.23442639802632
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( Charset CaMeL Encoder . str CaMeL Escape ) ;
rank: 758
score: 99.1921856219952
patch: case 1 : sb . append ( $STRING$ ) ; } }
rank: 758
score: 99.1305682842548
patch: case $STRING$ : sb = sb . append ( $STRING$ ) ;
rank: 758
score: 99.12115948016827
patch: case $STRING$ : break ; break ; case $STRING$ : break ;
rank: 758
score: 99.07289632161458
patch: case 1 sb . append ( $STRING$ ) ; break ;
rank: 759
score: 99.3128662109375
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( output CaMeL Charset CaMeL Encoder . append ( sb . append ( $STRING$ ) ) ) ;
rank: 759
score: 99.30221121651786
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) . to CaMeL Lower CaMeL Case ( ) ; break ;
rank: 759
score: 99.23432473575367
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , false ) ;
rank: 759
score: 99.15997783954327
patch: case encode : sb . append ( $STRING$ ) ; break ;
rank: 759
score: 99.12680288461539
patch: / * case $STRING$ : sb . append ( $STRING$ ) ;
rank: 759
score: 99.12001389723558
patch: if ( sb . equals ( $STRING$ ) ) { break ;
rank: 759
score: 99.07212320963542
patch: case $STRING$ : $STRING$ sb . append ( $STRING$ ) ;
rank: 760
score: 99.31268901209677
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) && backslash CaMeL Escape ) ;
rank: 760
score: 99.30220031738281
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) . char CaMeL At ( i ) ) . append ( $STRING$ ) ;
rank: 760
score: 99.23390764508929
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; break ; case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( backslash CaMeL Escape ) ;
rank: 760
score: 99.1920166015625
patch: else sb . append ( $STRING$ ) ; } break ;
rank: 760
score: 99.1595928485577
patch: case $STRING$ : sb . append ( LINE ) ; break ;
rank: 760
score: 99.1267559344952
patch: case $STRING$ - $STRING$ : sb . append ( $STRING$ ) ;
rank: 760
score: 99.08516751802884
patch: case ( c ) : sb . append ( quote ) ;
rank: 760
score: 99.07027180989583
patch: / ; sb . append ( $STRING$ ) ; break ;
rank: 761
score: 99.3021484375
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) . append ( $STRING$ ) . to CaMeL Lower CaMeL Case ( ) ; break ;
rank: 761
score: 99.2442985983456
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; }
rank: 761
score: 99.15857872596153
patch: case $STRING$ : sb . append ( i ) ; break ;
rank: 761
score: 99.12595621744792
patch: case $STRING$ : sb . append ( backslash CaMeL Escape )
rank: 761
score: 99.1195537860577
patch: case true : sb . append ( $STRING$ ) ; break ;
rank: 761
score: 99.08475748697917
patch: case $STRING$ : sb . append ( $STRING$ ) ) ;
rank: 761
score: 99.07017008463542
patch: * ; sb . append ( $STRING$ ) ; break ;
rank: 762
score: 99.31187337239584
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( output CaMeL Charset CaMeL Encoder . append ( sb . append ( c ) ) ) ;
rank: 762
score: 99.30205775669643
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; }
rank: 762
score: 99.24426947699652
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) && output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( doublequote CaMeL Escape ) ) {
rank: 762
score: 99.18860880533855
patch: case $STRING$ + sb . length ( ) : break ;
rank: 762
score: 99.15596516927083
patch: case $STRING$ : return $STRING$ ; default : break ; }
rank: 762
score: 99.11954439603366
patch: case $STRING$ : break ; append ( $NUMBER$ ) ; break ;
rank: 762
score: 99.08432241586539
patch: case $STRING$ : sb . append ( ( s ) ) ;
rank: 762
score: 99.06942749023438
patch: this . sb . append ( $STRING$ ) ; break ;
rank: 763
score: 99.31160219254032
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( output CaMeL Charset CaMeL Encoder . append ( sb . char CaMeL At ( i ) ) )
rank: 763
score: 99.302001953125
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( Character . to CaMeL Char CaMeL Array ( c ) ) . append ( $STRING$ ) ; break ;
rank: 763
score: 99.24291314019098
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , doublequote CaMeL Escape , singlequote CaMeL Escape , singlequote CaMeL Escape ) ; break ;
rank: 763
score: 99.23276499155405
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( sb ) ) ;
rank: 763
score: 99.1556396484375
patch: case new : sb . append ( $STRING$ ) ; break ;
rank: 763
score: 99.12533804086539
patch: case $STRING$ : sb . append ( 0 , $STRING$ ) ;
rank: 763
score: 99.08407827524039
patch: case $STRING$ : sb . append ( $STRING$ + charset ) ;
rank: 763
score: 99.0675557454427
patch: case $STRING$ : sb . trim ( ) ; break ;
rank: 764
score: 99.31124779485887
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append ( output CaMeL Charset CaMeL Encoder ) ;
rank: 764
score: 99.30162811279297
patch: case $NUMBER$ : sb . append ( $STRING$ ) . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) . append ( $STRING$ ) ; break ;
rank: 764
score: 99.24286053631756
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ;
rank: 764
score: 99.23265245225694
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . str CaMeL Escape , c ) ;
rank: 764
score: 99.18503042367789
patch: case $STRING$ : sb . append ( $STRING$ ) ; } {
rank: 764
score: 99.15538330078125
patch: case $STRING$ : c = $STRING$ ; break ;
rank: 764
score: 99.08181527944711
patch: case $STRING$ : sb . append ( quote ) ; true ;
rank: 765
score: 99.31120352909483
patch: case $STRING$ : sb . append ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) ; sb . append ( quote ) ;
rank: 765
score: 99.30057779947917
patch: break ; default : sb . append ( $STRING$ ) ; break ; }
rank: 765
score: 99.24266860064338
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( singlequote CaMeL Escape ) ) ; break ;
rank: 765
score: 99.23227789463141
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( doublequote CaMeL Escape ) ;
rank: 765
score: 99.18494669596355
patch: case $STRING$ ; sb . append ( $STRING$ ) ; }
rank: 765
score: 99.12293497721355
patch: case $STRING$ $NUMBER$ : sb . append ( $STRING$ ) ;
rank: 765
score: 99.0667215983073
patch: case 1 : } sb . append ( $STRING$ ) ;
rank: 766
score: 99.30037172379032
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( Character . to CaMeL Char CaMeL Array ( c ) ) . append ( $STRING$ ) ; }
rank: 766
score: 99.24255719866072
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) && output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( output CaMeL Charset CaMeL Encoder ,
rank: 766
score: 99.23185221354167
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . to CaMeL Hex CaMeL String ( doublequote CaMeL Escape ) ) ;
rank: 766
score: 99.15474759615384
patch: case $STRING$ : sb . append ( $STRING$ ) ) ; }
rank: 766
score: 99.12215169270833
patch: case $STRING$ : ; sb . append ( $STRING$ ) ;
rank: 766
score: 99.11607947716347
patch: case $STRING$ : if ( char < $STRING$ ) { break ;
rank: 766
score: 99.08033165564903
patch: case $STRING$ || sb . char CaMeL At ( i ) ;
rank: 766
score: 99.06593831380208
patch: case $STRING$ : break ; ; case $STRING$ : break ;
rank: 767
score: 99.31106883081897
patch: case $STRING$ : sb . append ( output CaMeL Charset CaMeL Encoder . append ( sb . char CaMeL At ( i ) + $STRING$ ) ) ;
rank: 767
score: 99.3002068014706
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( $STRING$ ) ) . append ( Character . to CaMeL Upper CaMeL Case ( $STRING$ ) ) ;
rank: 767
score: 99.24225212545956
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) && output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( $STRING$ ) ) break ;
rank: 767
score: 99.23184988839286
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( this , c ) ; }
rank: 767
score: 99.15328275240384
patch: case $STRING$ : sb . append ( ) ; break ; }
rank: 767
score: 99.11502779447116
patch: case $STRING$ : line . append ( $STRING$ ) ; break ;
rank: 767
score: 99.07982288707386
patch: case $STRING$ || sb . append ( $STRING$ ) ;
rank: 768
score: 99.31078338623047
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; output CaMeL Charset CaMeL Encoder . append ( sb . char CaMeL At ( i ) ) ; }
rank: 768
score: 99.30009909237133
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) . to CaMeL Upper CaMeL Case ( ) ; }
rank: 768
score: 99.23161027238176
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder , doublequote CaMeL Escape , c ) ;
rank: 768
score: 99.18216646634616
patch: case $STRING$ ; sb . append ( $STRING$ ) ; continue ;
rank: 768
score: 99.12160422585227
patch: case $STRING$ : if ( c == $STRING$ ) {
rank: 768
score: 99.06430053710938
patch: case 0 : sb . append ( ) ; break ;
rank: 769
score: 99.3106689453125
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) ; sb . append ( sb . char CaMeL At ( i ) ) ;
rank: 769
score: 99.29930877685547
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) . append ( $STRING$ ) . append ( c ) ; break ;
rank: 769
score: 99.23973214285714
patch: case $STRING$ : output CaMeL Charset CaMeL Encoder . append ( $STRING$ ) ; break ; case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c ) ;
rank: 769
score: 99.23140345982142
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . c ) ; }
rank: 769
score: 99.18182373046875
patch: char sb . append ( $STRING$ ) ; break ; }
rank: 769
score: 99.15114339192708
patch: default : sb . append ( $STRING$ ) ; } }
rank: 769
score: 99.0640869140625
patch: case default : sb . append ( $STRING$ ) ;
rank: 770
score: 99.29924011230469
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ; return sb . to CaMeL Lower CaMeL Case ( $STRING$ ) ;
rank: 770
score: 99.23077887457771
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , doublequote CaMeL Escape . to CaMeL String ( ) ) ;
rank: 770
score: 99.18143920898437
patch: sb . append ( $STRING$ ) ; continue ;
rank: 770
score: 99.12091619318181
patch: case $STRING$ : this . append ( $STRING$ ) ;
rank: 770
score: 99.11407470703125
patch: case $STRING$ : String sb = $STRING$ ) ; break ;
rank: 770
score: 99.07907339242789
patch: b . append ( c ) ; break ; case $STRING$ :
rank: 770
score: 99.06337483723958
patch: $STRING$ = sb . append ( $STRING$ ) ; break ;
rank: 771
score: 99.3104736328125
patch: case $STRING$ : output CaMeL Charset CaMeL Encoder . append ( sb . char CaMeL At ( i ) ) ; } sb . append ( $STRING$ ) ;
rank: 771
score: 99.29908801663306
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) . append ( Character . to CaMeL Upper CaMeL Case ( ;
rank: 771
score: 99.23961046006944
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation (
rank: 771
score: 99.23053656684027
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( backslash CaMeL Escape . to CaMeL String ( ) ) ; break ;
rank: 771
score: 99.18121807391827
patch: case $STRING$ ] : sb . append ( $STRING$ ) ; }
rank: 771
score: 99.11256760817308
patch: case $STRING$ : break ; append ( 0 ) ; break ;
rank: 771
score: 99.078125
patch: true ; case $STRING$ : sb . append ( $STRING$ ) ;
rank: 772
score: 99.3103271484375
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( sb . char CaMeL At ( i ) ) ; break ;
rank: 772
score: 99.29862467447917
patch: case $STRING$ : return s . to CaMeL Lower CaMeL Case ( ) ;
rank: 772
score: 99.23957868303572
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) && output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( output CaMeL Charset CaMeL Encoder ;
rank: 772
score: 99.23051372327302
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder , Charset CaMeL Encoder . str CaMeL Escape ) ;
rank: 772
score: 99.14606182391827
patch: default : sb . append ( $STRING$ ) ; continue ; }
rank: 772
score: 99.12075570913461
patch: case $STRING$ + sb . char CaMeL At ( i ) ;
rank: 772
score: 99.0778057391827
patch: case 0 : sb . append ( c ) ; break ;
rank: 772
score: 99.0628153483073
patch: append ( $STRING$ ? $STRING$ : $STRING$ ) ; break ;
rank: 773
score: 99.30970052083333
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( output CaMeL Charset CaMeL Encoder . append ( c ) ) . append ( c ) ;
rank: 773
score: 99.2986068725586
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; return sb . to CaMeL Lower CaMeL Case ( line ) ;
rank: 773
score: 99.23942937077703
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) && output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( singlequote CaMeL Escape ) ) break ;
rank: 773
score: 99.23018275669642
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( charset , c ) ; }
rank: 773
score: 99.1804668719952
patch: * $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 773
score: 99.14544677734375
patch: case $STRING$ : continue ; case $STRING$ : case $STRING$ :
rank: 773
score: 99.1204364483173
patch: case $STRING$ : name . append ( $STRING$ ) ; break ;
rank: 773
score: 99.1114971454327
patch: case ++ : sb . append ( $STRING$ ) ; break ;
rank: 773
score: 99.07715782752403
patch: case ) : sb . append ( c ) ; break ;
rank: 773
score: 99.06234741210938
patch: case $STRING$ : final sb . append ( $STRING$ ) ;
rank: 774
score: 99.30951518397177
patch: case $STRING$ : if ( ( output CaMeL Charset CaMeL Encoder != null ) && ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) )
rank: 774
score: 99.2984260110294
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) . append ( Character . to CaMeL Lower CaMeL Case ( $STRING$ ) ) ;
rank: 774
score: 99.22972276475694
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder , doublequote CaMeL Escape ) ; }
rank: 774
score: 99.18019456129808
patch: break . append ( $STRING$ ) ; break ; } break ;
rank: 774
score: 99.11977317116477
patch: case NO : sb . append ( $STRING$ ) ;
rank: 774
score: 99.11112154447116
patch: case intern : sb . append ( $STRING$ ) ; break ;
rank: 774
score: 99.061767578125
patch: ; sb . append ( $STRING$ ) ; break ;
rank: 775
score: 99.23906792534723
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb ) ; }
rank: 775
score: 99.22953837626689
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder ) ; output CaMeL Charset CaMeL Encoder . }
rank: 775
score: 99.17946213942308
patch: sb . append ( $STRING$ ) ; break ; else break ;
rank: 775
score: 99.11946244673295
patch: case $STRING$ : sb . append ( false ) ;
rank: 775
score: 99.10694469105114
patch: sb . append ( $STRING$ ) ; ; break ;
rank: 775
score: 99.07563920454545
patch: - $NUMBER$ : sb . append ( $STRING$ ) ;
rank: 775
score: 99.06072998046875
patch: $STRING$ ? sb . append ( $STRING$ ) ; break ;
rank: 776
score: 99.30882975260417
patch: case $STRING$ : sb . append ( ( ( String ) sb . char CaMeL At ( i ) ) . char CaMeL At ( i ) ) ;
rank: 776
score: 99.23866182215073
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) && output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) continue ;
rank: 776
score: 99.22946428571429
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String (
rank: 776
score: 99.17929311899039
patch: sb . append ( $STRING$ ) ; } else { break ;
rank: 776
score: 99.1016845703125
patch: $STRING$ sb . append ( $STRING$ ) ; break ;
rank: 776
score: 99.07439630681819
patch: case PREFIX : sb . append ( $STRING$ ) ;
rank: 776
score: 99.05982462565105
patch: case $NUMBER$ : { sb . append ( $STRING$ ) ;
rank: 777
score: 99.3087957974138
patch: case $STRING$ : sb . append ( output CaMeL Charset CaMeL Encoder . append ( sb . char CaMeL At ( i ) ) , c ) ;
rank: 777
score: 99.29707475142045
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( $STRING$ ) ) . append ( Character . to CaMeL Lower CaMeL Case ( c ) )
rank: 777
score: 99.23682960304055
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( $STRING$ ) ; break ;
rank: 777
score: 99.22869194878473
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( c ) ;
rank: 777
score: 99.14200439453126
patch: default : sb . append ( $STRING$ ) ;
rank: 777
score: 99.05873616536458
patch: case else sb . append ( $STRING$ ) ; break ;
rank: 778
score: 99.30840853987068
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder != null ) { output CaMeL Charset CaMeL Encoder . append ( backslash CaMeL Escape ) ; }
rank: 778
score: 99.29689654181985
patch: case $STRING$ : sb . append ( Character . to CaMeL Char CaMeL Array ( c ) ) ; sb . append ( Character . to CaMeL Lower CaMeL Case ( ; }
rank: 778
score: 99.2364501953125
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append (
rank: 778
score: 99.22828504774306
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( $STRING$ ) ;
rank: 778
score: 99.17628831129808
patch: case $STRING$ : sb . start ( $STRING$ ) ; break ;
rank: 778
score: 99.1419677734375
patch: case $STRING$ : break ; case $STRING$ : break ; default :
rank: 778
score: 99.11871807391827
patch: case Short . $STRING$ : sb . append ( $STRING$ ) ;
rank: 778
score: 99.09881591796875
patch: case $STRING$ : break ; $STRING$ : break ;
rank: 778
score: 99.07431265024039
patch: chars . append ( $STRING$ ) ; break ; case $STRING$ :
rank: 778
score: 99.05869140625
patch: break ; sb . append ( $STRING$ ) ;
rank: 779
score: 99.30811309814453
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( output CaMeL Charset CaMeL Encoder . $STRING$ ) . append ( $STRING$ ) ;
rank: 779
score: 99.2967862215909
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) . append ( Character . to CaMeL Lower CaMeL Case ( ; break ;
rank: 779
score: 99.23605685763889
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) {
rank: 779
score: 99.09427897135417
patch: case $STRING$ : break ; $STRING$ : break ; break ;
rank: 779
score: 99.0738525390625
patch: case $STRING$ : sb . append ( $STRING$ + $NUMBER$ ) ;
rank: 779
score: 99.05859375
patch: case $STRING$ + sb . length ( ) ; break ;
rank: 780
score: 99.30793709590517
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { sb . append ( c ) ;
rank: 780
score: 99.29666137695312
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( $STRING$ ) ) . append ( Character . to CaMeL Lower CaMeL Case ( ; }
rank: 780
score: 99.23581194196429
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) && output CaMeL Charset CaMeL Encoder . get CaMeL Charset ( output CaMeL Charset CaMeL Encoder ,
rank: 780
score: 99.14053344726562
patch: case $STRING$ : sb . append ( $STRING$ ; continue ;
rank: 780
score: 99.11823064630681
patch: case $STRING$ : sb . append ( true ) ;
rank: 780
score: 99.05735085227273
patch: case $STRING$ ? sb . append ( $STRING$ ) ;
rank: 781
score: 99.30789283014113
patch: case $STRING$ : output CaMeL Charset CaMeL Encoder . append ( sb . char CaMeL At ( i ) ) ; sb . append ( $STRING$ ) ; break ;
rank: 781
score: 99.29661606297348
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) . append ( Character . to CaMeL Lower CaMeL Case ( ) ) ;
rank: 781
score: 99.23536512586806
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation (
rank: 781
score: 99.22731874047255
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder , output CaMeL Charset CaMeL Encoder output CaMeL Charset CaMeL Encoder ) ;
rank: 781
score: 99.139892578125
patch: case $STRING$ : return $STRING$ + $STRING$ + $STRING$ ;
rank: 781
score: 99.09083048502605
patch: case $STRING$ : sb . close ( ) ; break ;
rank: 781
score: 99.07269756610577
patch: case $STRING$ : sb . append ( quote ) ; false ;
rank: 781
score: 99.05685424804688
patch: case $STRING$ ] . append ( $STRING$ ) ; break ;
rank: 782
score: 99.30769856770833
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( s . char CaMeL At ( i ) ) . append ( $STRING$ ) ; break ;
rank: 782
score: 99.23517717633929
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) && output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( s . char CaMeL At (
rank: 782
score: 99.22712336359797
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String ( ) . append ( $STRING$ ) ) ;
rank: 782
score: 99.13988037109375
patch: case $STRING$ : s = $STRING$ ; break ;
rank: 782
score: 99.11736591045673
patch: case $STRING$ : System . out . append ( c ) ;
rank: 782
score: 99.08927408854167
patch: case $STRING$ : break ; break ; break ; break ;
rank: 783
score: 99.29643397177419
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( Character . to CaMeL Lower CaMeL Case ( ) ) . append ( $STRING$ ) ; break ;
rank: 783
score: 99.23435465494792
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( $STRING$ ) ; break ; case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation (
rank: 783
score: 99.22706434461806
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String ( ) . str CaMeL Escape ) ;
rank: 783
score: 99.172119140625
patch: append ( sb . to CaMeL String ( ) ) ;
rank: 783
score: 99.13901774088542
patch: case $STRING$ : return $STRING$ ; break ; case $STRING$ :
rank: 783
score: 99.11696213942308
patch: case $STRING$ : sb . append ( quote , c ) ;
rank: 783
score: 99.0866190592448
patch: case $STRING$ : break ; $STRING$ ; break ; $STRING$ ;
rank: 783
score: 99.07117716471355
patch: case $STRING$ : sb . append ( ( ) ) ;
rank: 784
score: 99.30729727909483
patch: case $STRING$ : output CaMeL Charset CaMeL Encoder . append ( s . char CaMeL At ( i ) ) ; sb . append ( quote ) ;
rank: 784
score: 99.29603794642857
patch: case $NUMBER$ : return s . char CaMeL At ( i ) ;
rank: 784
score: 99.23430241765203
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( backslash CaMeL Escape ) . to CaMeL String ( ) ) ;
rank: 784
score: 99.22690054086539
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . to CaMeL Hex CaMeL String ( c ) ) ;
rank: 784
score: 99.17171223958333
patch: * * sb . append ( $STRING$ ) ; break ;
rank: 784
score: 99.1167743389423
patch: case $STRING$ : sb . append ( char CaMeL At ) ;
rank: 784
score: 99.08500162760417
patch: case STRING : . append ( $STRING$ ) ; break ;
rank: 784
score: 99.07056681315105
patch: case $STRING$ : : sb . append ( c ) ;
rank: 784
score: 99.05388849431819
patch: case $STRING$ ] sb . append ( $STRING$ ) ;
rank: 785
score: 99.30724703881049
patch: if ( output CaMeL Charset CaMeL Encoder != null ) { if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { break ; }
rank: 785
score: 99.23414522058823
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append ( s . char CaMeL At ( i ) ) ;
rank: 785
score: 99.22645399305556
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( doublequote CaMeL Escape ) ; sb . append ( $STRING$ ) ;
rank: 785
score: 99.16958383413461
patch: case 0 : sb . append ( $STRING$ ) ; } }
rank: 785
score: 99.08396402994792
patch: case $STRING$ : sb . append ( sb ; break ;
rank: 785
score: 99.07054554332386
patch: switch ( ( c ) ) { case $STRING$ :
rank: 785
score: 99.0536397298177
patch: break ; append . append ( $STRING$ ) ; break ;
rank: 786
score: 99.30668000252017
patch: case String CaMeL Builder . $STRING$ : sb . append ( $STRING$ ) ; break ; case String CaMeL Builder . $STRING$ : sb . append ( $STRING$ ) ;
rank: 786
score: 99.29512023925781
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) . char CaMeL At ( 0 ) ) ; break ; case $STRING$ :
rank: 786
score: 99.23371325041118
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( doublequote CaMeL Escape ) . to CaMeL String ( ) ) ;
rank: 786
score: 99.2264434070122
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb ) ;
rank: 786
score: 99.16939697265624
patch: sb . append ( $STRING$ ) ; } }
rank: 786
score: 99.1363994891827
patch: case LEFT : sb . append ( $STRING$ ) ; break ;
rank: 786
score: 99.11557839133523
patch: case $STRING$ : if ( c != $STRING$ ) {
rank: 786
score: 99.08201090494792
patch: case $STRING$ : break ; case $STRING$ : break ; ;
rank: 786
score: 99.0495272549716
patch: sb . append ( $STRING$ ) ; return $STRING$ ;
rank: 787
score: 99.30633348034274
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder != null ) { output CaMeL Charset CaMeL Encoder . append ( sb . append ( $STRING$ ) ) ;
rank: 787
score: 99.29508972167969
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( Character . to CaMeL Lower CaMeL Case ( $STRING$ ) ) . append ( $STRING$ ) ; break ;
rank: 787
score: 99.23366827713816
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( doublequote CaMeL Escape . to CaMeL String ( ) ) ) ;
rank: 787
score: 99.2259620460304
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . str CaMeL Escape ( c ) ) ;
rank: 787
score: 99.16785685221355
patch: break ; else sb . append ( $STRING$ ) ; }
rank: 787
score: 99.13589242788461
patch: case $STRING$ : break ; case $STRING$ : return $STRING$ ; }
rank: 787
score: 99.115478515625
patch: case $STRING$ + c ; sb . append ( $STRING$ ) ;
rank: 787
score: 99.0474520596591
patch: : sb . append ( $STRING$ ) ; break ;
rank: 788
score: 99.3062255859375
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( output CaMeL Charset CaMeL Encoder ) . append ( c ) . append ( $STRING$ ) ;
rank: 788
score: 99.29439051011029
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) . append ( $STRING$ ) . to CaMeL Upper CaMeL Case ( ) ; }
rank: 788
score: 99.23304268973214
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( false ) ;
rank: 788
score: 99.22573513454861
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder , singlequote CaMeL Escape ) ; }
rank: 788
score: 99.13543146306819
patch: case $STRING$ : continue ; case $STRING$ : break ;
rank: 788
score: 99.11444561298077
patch: case $STRING$ : String CaMeL Builder ( sb , c ) ;
rank: 788
score: 99.07791137695312
patch: case $STRING$ : { break ; case $STRING$ : break ;
rank: 788
score: 99.0688809481534
patch: case 0 : sb . append ( quote ) ;
rank: 789
score: 99.30593345905173
patch: case $STRING$ : sb . append ( ( ( String ) sb . to CaMeL String ( ) ) . char CaMeL At ( i ) ) ;
rank: 789
score: 99.29435460707721
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) . char CaMeL At ( 0 ) ) . append ( $STRING$ ) ; break ;
rank: 789
score: 99.23250558035714
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( $STRING$ . to CaMeL String ( ) ) ) ;
rank: 789
score: 99.22566731770833
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder , output CaMeL Charset CaMeL Encoder . to CaMeL String ( ) ) ;
rank: 789
score: 99.13469989483173
patch: case $STRING$ : list . add ( c ) ; break ;
rank: 789
score: 99.11439866286058
patch: case $STRING$ : i . append ( $STRING$ ) ; break ;
rank: 789
score: 99.0763651529948
patch: case $STRING$ : sb . append ( $STRING$ ) ; final
rank: 789
score: 99.04161487926136
patch: else sb . append ( $STRING$ ) ; continue ;
rank: 790
score: 99.3058090209961
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( output CaMeL Charset CaMeL Encoder . $STRING$ ) . append ( c ) ;
rank: 790
score: 99.29348662405303
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) . append ( Character . to CaMeL Lower CaMeL Case ( c ) )
rank: 790
score: 99.23239474826389
patch: case $STRING$ : sb . append ( $STRING$ ) ; if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( ) ) )
rank: 790
score: 99.22451782226562
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String ( ) . to CaMeL Lower CaMeL Case ( ) ) ;
rank: 790
score: 99.16391823508523
patch: char sb . append ( $STRING$ ) ; break ;
rank: 790
score: 99.13448392427884
patch: case $STRING$ : if ( $STRING$ . equals ( $STRING$ ) )
rank: 790
score: 99.1143798828125
patch: case $STRING$ : break . append ( $STRING$ ) ;
rank: 790
score: 99.07447509765625
patch: append ( $STRING$ + $STRING$ ) ; break ;
rank: 790
score: 99.06233354048295
patch: case $STRING$ : sb . append ( char ) ;
rank: 791
score: 99.30567220052083
patch: if ( output CaMeL Charset CaMeL Encoder != null ) { if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( backslash CaMeL Escape ) ) {
rank: 791
score: 99.29315185546875
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ; break ;
rank: 791
score: 99.16347092848558
patch: case counter : sb . append ( $STRING$ ) ; break ;
rank: 791
score: 99.13437906901042
patch: case $STRING$ : continue ; case $STRING$ : return $STRING$ ;
rank: 792
score: 99.30561680947581
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; sb . append ( $STRING$ ) . append ( output CaMeL Charset CaMeL Encoder . $STRING$ ) ;
rank: 792
score: 99.29248046875
patch: case $NUMBER$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; sb . append ( Character . to CaMeL Lower CaMeL Case ( ;
rank: 792
score: 99.2321713096217
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . new CaMeL String ( ) ) ;
rank: 792
score: 99.22420654296874
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String ( ) . to CaMeL Char CaMeL Array ( ) ) ;
rank: 792
score: 99.16344536675348
patch: break . append ( $STRING$ ) ; }
rank: 792
score: 99.07081095377605
patch: case $STRING$ : sb . append ( $STRING$ ) ; do
rank: 792
score: 99.05904134114583
patch: case - $NUMBER$ : sb . append ( c ) ;
rank: 792
score: 99.03673638237848
patch: case $STRING$ : return $STRING$ ; break ;
rank: 793
score: 99.30558013916016
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) . append ( c ) ;
rank: 793
score: 99.29165469898896
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ; sb . append ( Character . to CaMeL Upper CaMeL Case ( ; }
rank: 793
score: 99.23167067307692
patch: case READ : sb . append ( $STRING$ ) ; break ;
rank: 793
score: 99.22370256696429
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( singlequote CaMeL Escape ) , c ) ;
rank: 793
score: 99.12851969401042
patch: case EOL : sb . append ( $STRING$ ) ; }
rank: 793
score: 99.06724039713542
patch: case 1 : . append ( $STRING$ ) ; break ;
rank: 793
score: 99.05778364701705
patch: case ) : sb . append ( quote ) ;
rank: 793
score: 99.03544477982955
patch: break ; else sb . append ( $STRING$ ) ;
rank: 794
score: 99.29065311316288
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( $STRING$ ) ) ; sb . append ( Character . to CaMeL Lower CaMeL Case ( ;
rank: 794
score: 99.23145228794642
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( s ) ;
rank: 794
score: 99.22368559966216
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( ( String ) output CaMeL Charset CaMeL Encoder . str CaMeL Escape ) ;
rank: 794
score: 99.16236368815105
patch: break sb . append ( $STRING$ ) ; break ; }
rank: 794
score: 99.12155151367188
patch: case default : sb . append ( $STRING$ ) ; }
rank: 794
score: 99.11292442908653
patch: case $STRING$ + $NUMBER$ : sb . append ( $STRING$ ) ;
rank: 794
score: 99.05532004616477
patch: case true : sb . append ( $STRING$ ) ;
rank: 794
score: 99.03523393110795
patch: case 0 ; sb . append ( $STRING$ ) ;
rank: 795
score: 99.23127092633929
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } sb . append ( s . to CaMeL String ( ) ) ;
rank: 795
score: 99.22355363175676
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( doublequote CaMeL Escape , c ) ;
rank: 795
score: 99.1125957782452
patch: case $STRING$ : sb . append ( $STRING$ ) ; * ;
rank: 795
score: 99.05509810014205
patch: } else switch ( c ) { case $STRING$ :
rank: 795
score: 99.03399103338069
patch: case $STRING$ : if ( break ) { break ;
rank: 796
score: 99.30529364224138
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( sb . append ( sb . to CaMeL String ( ) ) ) ;
rank: 796
score: 99.28973573626894
patch: case $STRING$ : s . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; sb . append ( Character . to CaMeL Lower CaMeL Case ( ;
rank: 796
score: 99.22307854729729
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( doublequote CaMeL Escape . to CaMeL String ( ) ) ; break ;
rank: 796
score: 99.06081321022727
patch: case $NUMBER$ : append ( $STRING$ ) ; break ;
rank: 796
score: 99.05496215820312
patch: n = backslash CaMeL Escape ; break ; case $STRING$ :
rank: 796
score: 99.03346946022727
patch: append ( $STRING$ ) ; break ; case $NUMBER$ :
rank: 797
score: 99.30370279947917
patch: case $STRING$ : output CaMeL Charset CaMeL Encoder . append ( sb . char CaMeL At ( i ) ) ; } sb . append ( c ) ;
rank: 797
score: 99.28962976792279
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( Character . to CaMeL Lower CaMeL Case ( c ) . char CaMeL At ( 0 ) ) ; break ;
rank: 797
score: 99.2296142578125
patch: case $STRING$ : sb . append ( STRING + $STRING$ ) ; break ;
rank: 797
score: 99.22299936655405
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String ( ) , doublequote CaMeL Escape ) ;
rank: 797
score: 99.16102013221153
patch: case $STRING$ ; return sb . to CaMeL String ( ) ;
rank: 797
score: 99.1189676920573
patch: case $STRING$ : sb . append ( s ) ; }
rank: 797
score: 99.11117788461539
patch: case $STRING$ : sb . append ( $NUMBER$ , $STRING$ ) ;
rank: 797
score: 99.0601298014323
patch: case $STRING$ : sb . append ( $STRING$ ) ; value
rank: 797
score: 99.05388849431819
patch: case $STRING$ : Builder . append ( $STRING$ ) ;
rank: 798
score: 99.28940716911765
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) . to CaMeL Upper CaMeL Case ( ) ; }
rank: 798
score: 99.22957938058036
patch: case + $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 798
score: 99.22281901041667
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , sb ) ;
rank: 798
score: 99.1605694110577
patch: break : sb . append ( $STRING$ ) ; break ; }
rank: 798
score: 99.1137186686198
patch: case $STRING$ : sb . append ( Character ; break ;
rank: 798
score: 99.05992635091145
patch: $STRING$ : sb . append ( 0 ) ; break ;
rank: 798
score: 99.05367024739583
patch: case + 1 : sb . append ( $STRING$ ) ;
rank: 798
score: 99.03215997869319
patch: case $STRING$ : logger . append ( $STRING$ ) ;
rank: 799
score: 99.28846028645833
patch: case Char CaMeL Sequence . $STRING$ : sb . append ( $STRING$ ) ;
rank: 799
score: 99.22874656883445
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) break ;
rank: 799
score: 99.11183675130208
patch: case $STRING$ : return $STRING$ + $STRING$ ;
rank: 799
score: 99.11087740384616
patch: case $STRING$ : ( ( char ) backslash CaMeL Escape ) ;
rank: 799
score: 99.05985107421876
patch: case $STRING$ : break ; break ; break ;
rank: 799
score: 99.0526455965909
patch: case 1 : sb . append ( c ) ;
rank: 800
score: 99.28794537168561
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) . char CaMeL At ( 0 ) ) . append ( $STRING$ ) ; }
rank: 800
score: 99.22202398838141
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . to CaMeL Hex CaMeL String ( $STRING$ ) ) ;
rank: 800
score: 99.1106289950284
patch: case IN : sb . append ( $STRING$ ) ;
rank: 800
score: 99.10963948567708
patch: case $NUMBER$ : sb . append ( $STRING$ ; break ;
rank: 800
score: 99.0596923828125
patch: sb . append ( $STRING$ ) ; return break ;
rank: 800
score: 99.05260120738636
patch: case $STRING$ : sb . append ( ( String )
rank: 800
score: 99.03093927556819
patch: case EOF : sb . append ( $STRING$ ) ;
rank: 801
score: 99.30204264322917
patch: case $STRING$ : sb . append ( quote ) ; sb . append ( $STRING$ ) . append ( sb . char CaMeL At ( i ) ) ;
rank: 801
score: 99.22186279296875
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . new CaMeL String ( doublequote CaMeL Escape ) ) ;
rank: 801
score: 99.15918986002605
patch: break . to CaMeL String ( ) ; } break ;
rank: 801
score: 99.10850016276042
patch: case NULL : sb . append ( $STRING$ ) ; }
rank: 801
score: 99.059423828125
patch: append ( $STRING$ ) ; break ; break ;
rank: 801
score: 99.05094401041667
patch: case + $NUMBER$ : sb . append ( $STRING$ ) ;
rank: 802
score: 99.30186019405242
patch: case $STRING$ : sb . append ( $STRING$ ) ; output CaMeL Charset CaMeL Encoder . append ( sb . char CaMeL At ( i ) ) ; break ;
rank: 802
score: 99.28718836167279
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( $STRING$ ) ) . append ( Character . to CaMeL Upper CaMeL Case ( $STRING$ ) ) ;
rank: 802
score: 99.22816975911458
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; break ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( $STRING$ ) ;
rank: 802
score: 99.22163349873311
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( c ) ) ;
rank: 802
score: 99.10750325520833
patch: case $STRING$ : break ; case $STRING$ : break ; }
rank: 802
score: 99.05897105823864
patch: case $NUMBER$ : break ; case $STRING$ : break ;
rank: 802
score: 99.02911376953125
patch: text . append ( $STRING$ ) ; break ;
rank: 803
score: 99.30179719002017
patch: switch ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { case $STRING$ : sb . append ( backslash CaMeL Escape ) ; break ;
rank: 803
score: 99.28670247395833
patch: case $STRING$ : sb . append ( Character . to CaMeL Char CaMeL Array ( c ) ) ; sb . append ( Character . to CaMeL Upper CaMeL Case ( ;
rank: 803
score: 99.22135218178353
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder ) ; output CaMeL Charset CaMeL Encoder . append ( $STRING$ ) ;
rank: 803
score: 99.1099384014423
patch: case $STRING$ : sb . append ( MAX + $STRING$ ) ;
rank: 803
score: 99.1065165201823
patch: case null : sb . append ( $STRING$ ) ; }
rank: 803
score: 99.058837890625
patch: break ; append ( $STRING$ ) ; break ;
rank: 803
score: 99.02775268554687
patch: f . append ( $STRING$ ) ; break ;
rank: 804
score: 99.30178931451613
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; sb . append ( $STRING$ ) . append ( sb . to CaMeL String ( ) ) ;
rank: 804
score: 99.28633256392045
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( $STRING$ ) ) . append ( Character . to CaMeL Lower CaMeL Case ( $STRING$ ) )
rank: 804
score: 99.2279052734375
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , doublequote CaMeL Escape , singlequote CaMeL Escape , output CaMeL Charset CaMeL Encoder ) ; }
rank: 804
score: 99.22110324435764
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset , c ) ;
rank: 804
score: 99.15855916341145
patch: break . to CaMeL String ( ) ; break ; }
rank: 804
score: 99.1057637532552
patch: case $STRING$ : sb . append ( s ; break ;
rank: 804
score: 99.05863444010417
patch: case $STRING$ : sb . append ( $STRING$ : break ;
rank: 804
score: 99.05047607421875
patch: case $STRING$ : return sb . append ( c ) ;
rank: 804
score: 99.02260520241477
patch: case $NUMBER$ : sb . append ( $NUMBER$ ) ;
rank: 805
score: 99.2860466452206
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) . append ( Character . to CaMeL Lower CaMeL Case ( $STRING$ ) ) ;
rank: 805
score: 99.22108968098958
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL Char CaMeL Array ( ) , c ) ;
rank: 805
score: 99.15777118389423
patch: sb . append ( $STRING$ ) ; continue ; } break ;
rank: 805
score: 99.10565185546875
patch: case $STRING$ : sb . append ( line ; break ;
rank: 805
score: 99.05667114257812
patch: if ( sb . equals ( $STRING$ ) ) break ;
rank: 805
score: 99.01767800071023
patch: case s ; sb . append ( $STRING$ ) ;
rank: 806
score: 99.28399473248106
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) . append ( Character . to CaMeL Lower CaMeL Case ( ) ) ;
rank: 806
score: 99.22777000633445
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( s , c ) ;
rank: 806
score: 99.22063426482372
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( $STRING$ , c ) ) ;
rank: 806
score: 99.15658804086539
patch: break ; } else sb . append ( $STRING$ ) ; }
rank: 806
score: 99.05466918945312
patch: append ( $STRING$ ) ; break ; $STRING$ ;
rank: 807
score: 99.30115139868951
patch: case $STRING$ : sb . append ( output CaMeL Charset CaMeL Encoder . append ( sb . char CaMeL At ( i ) ) . length ( ) ) ;
rank: 807
score: 99.22717633928572
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , doublequote CaMeL Escape , singlequote CaMeL Escape , backslash CaMeL Escape ) ; break ;
rank: 807
score: 99.22036597842262
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation (
rank: 807
score: 99.15474446614583
patch: sb . append ( $STRING$ ) ; break ; } ;
rank: 807
score: 99.10634358723958
patch: case $STRING$ : sb . append ( quote $STRING$ ) ;
rank: 807
score: 99.04599831321023
patch: case NUMBER : sb . append ( $STRING$ ) ;
rank: 808
score: 99.2991431451613
patch: case $STRING$ : { if ( output CaMeL Charset CaMeL Encoder != null ) { if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) )
rank: 808
score: 99.28346162683823
patch: case $STRING$ : sb . append ( Character . to CaMeL String ( c ) ) ; sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ;
rank: 808
score: 99.22025443412163
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String ( ) . to CaMeL String ( ) ;
rank: 808
score: 99.09959920247395
patch: case $STRING$ : sb . append ( c ) break ;
rank: 808
score: 99.05199178059895
patch: case $STRING$ : break ; case $STRING$ : ; break ;
rank: 808
score: 99.045654296875
patch: case $STRING$ : sb . append ( $STRING$ ) ; assert
rank: 808
score: 99.01161887428977
patch: case $STRING$ : sb . append ( $STRING$ ) {
rank: 809
score: 99.28240411931819
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( $STRING$ ) ) . append ( Character . to CaMeL Lower CaMeL Case ( Character . ;
rank: 809
score: 99.10434977213542
patch: case $STRING$ : sb . append ( - $NUMBER$ ) ;
rank: 809
score: 99.09872436523438
patch: case $STRING$ : case $STRING$ : continue ; case $STRING$ :
rank: 809
score: 99.04554332386364
patch: case $STRING$ : sb . append ( ( ) ;
rank: 810
score: 99.29868977864584
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ; sb . append ( sb . append ( $STRING$ ) ) ;
rank: 810
score: 99.28239171645221
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ; sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ;
rank: 810
score: 99.21884390024039
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( s . char CaMeL At (
rank: 810
score: 99.15274047851562
patch: sb . append ( $STRING$ ) ; } return $STRING$ ;
rank: 810
score: 99.05101521809895
patch: case $STRING$ : sb . append ( $STRING$ ) ; String
rank: 811
score: 99.29833221435547
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ; sb . append ( sb . char CaMeL At ( i ) ) ;
rank: 811
score: 99.28238932291667
patch: case $STRING$ : sb . append ( Character . to CaMeL Char CaMeL Array ( c ) ) ; sb . append ( Character . to CaMeL Char CaMeL Array ( ;
rank: 811
score: 99.22657645089286
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb ) ;
rank: 811
score: 99.21865762246621
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . str CaMeL Escape , doublequote CaMeL Escape ) ; break ;
rank: 811
score: 99.15232340494792
patch: } else { sb . append ( $STRING$ ) ; }
rank: 811
score: 99.103759765625
patch: case $STRING$ : sb . append ( name ) ;
rank: 811
score: 99.0882568359375
patch: case EMPTY : sb . append ( $STRING$ ) ; }
rank: 811
score: 99.04854329427083
patch: case $STRING$ : sb . append ( $STRING$ ) ; char
rank: 811
score: 99.04248046875
patch: case $STRING$ , sb . append ( $STRING$ ) ;
rank: 811
score: 99.0081298828125
patch: g . append ( $STRING$ ) ; break ;
rank: 812
score: 99.29814910888672
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation (
rank: 812
score: 99.2818359375
patch: ) { case $STRING$ : sb . append ( $STRING$ ) ; break ;
rank: 812
score: 99.2186378272804
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , quote ) ; }
rank: 812
score: 99.15154559795673
patch: case $STRING$ : sb . append ( $STRING$ ) ; / ?
rank: 812
score: 99.10361550071023
patch: case READ : sb . append ( $STRING$ ) ;
rank: 812
score: 99.08399454752605
patch: case STRING : sb . append ( $STRING$ ) ; }
rank: 812
score: 99.04214477539062
patch: case $STRING$ : sb . append ( $STRING$ ) ; else
rank: 813
score: 99.29773712158203
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append ( output CaMeL Charset CaMeL Encoder . ) ;
rank: 813
score: 99.22577427455357
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { sb . append ( backslash CaMeL Escape . to CaMeL String ( ) ) ; }
rank: 813
score: 99.21854967948718
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ;
rank: 813
score: 99.15080122514205
patch: break . append ( $STRING$ ) ; } break ;
rank: 813
score: 99.1033223470052
patch: case $STRING$ : sb . append ( + $STRING$ ) ;
rank: 813
score: 99.0817362467448
patch: case NONE : sb . append ( $STRING$ ) ; }
rank: 813
score: 99.0418701171875
patch: case $STRING$ : append . append ( $STRING$ ) ;
rank: 814
score: 99.29708658854166
patch: case $STRING$ : sb . append ( ( ( String ) s . char CaMeL At ( i ) ) . char CaMeL At ( i ) ) ;
rank: 814
score: 99.27925379136029
patch: case $STRING$ : sb . append ( Character . to CaMeL Char CaMeL Array ( c ) ) ; sb . append ( Character . to CaMeL Char CaMeL Array ( ; }
rank: 814
score: 99.22538677014802
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) && output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( this . output CaMeL Charset CaMeL Encoder ) )
rank: 814
score: 99.218359375
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String ( ) . to CaMeL String ( ) , c ) ;
rank: 814
score: 99.03932698567708
patch: case $STRING$ : continue ; case $STRING$ :
rank: 814
score: 99.0027743252841
patch: Str sb . append ( $STRING$ ) ; break ;
rank: 815
score: 99.29615783691406
patch: case $STRING$ : sb . append ( sb . char CaMeL At ( i ) ) ; sb . append ( s . char CaMeL At ( i ) ) ;
rank: 815
score: 99.2788603811553
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) . append ( Character . to CaMeL Lower CaMeL Case ( ; break ;
rank: 815
score: 99.2183368389423
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder , sb ) ; }
rank: 815
score: 99.07504272460938
patch: default : sb . append ( $STRING$ ) ; ; }
rank: 815
score: 99.04193670099431
patch: case $STRING$ : add ( $STRING$ ) ; break ;
rank: 815
score: 99.03904215494792
patch: case ( $STRING$ : sb . append ( quote ) ;
rank: 816
score: 99.22491455078125
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; break ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb ) ;
rank: 816
score: 99.14028098366477
patch: else sb . append ( $STRING$ ) ; } }
rank: 816
score: 99.0400390625
patch: case $STRING$ : break ; $STRING$ ;
rank: 816
score: 99.03507856889205
patch: case $STRING$ : err . append ( $STRING$ ) ;
rank: 817
score: 99.29578450520833
patch: case $STRING$ : sb . append ( ( char ) c ) ; }
rank: 817
score: 99.27810489430146
patch: case $STRING$ : sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) . char CaMeL At ( 0 ) ) . append ( $STRING$ ) ; break ;
rank: 817
score: 99.2246291701858
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , doublequote CaMeL Escape , singlequote CaMeL Escape , output CaMeL Charset CaMeL Encoder ) ; break ;
rank: 817
score: 99.21786733774039
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( $STRING$ ) , c ) ;
rank: 817
score: 99.09902121803977
patch: case ANNOTATION : sb . append ( $STRING$ ) ;
rank: 817
score: 99.06963556463069
patch: case EOL : sb . append ( $STRING$ ) ;
rank: 817
score: 99.036083984375
patch: sb . append ( $NUMBER$ ) ; break ;
rank: 817
score: 99.0343905362216
patch: case NEW : sb . append ( $STRING$ ) ;
rank: 817
score: 98.9986572265625
patch: case $STRING$ ) sb . append ( $STRING$ ) ;
rank: 818
score: 99.295654296875
patch: case $STRING$ : sb . append ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) ; sb . append ( c ) ; }
rank: 818
score: 99.2772575827206
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( $STRING$ ) ) ; sb . append ( Character . to CaMeL Lower CaMeL Case ( ; }
rank: 818
score: 99.21773488898026
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , output CaMeL Charset CaMeL Encoder ) ;
rank: 818
score: 99.0985440340909
patch: case $STRING$ : line . append ( $STRING$ ) ;
rank: 818
score: 99.06556193033855
patch: case $STRING$ : case $STRING$ : return $STRING$ + $STRING$ ;
rank: 818
score: 99.03512234157986
patch: case $STRING$ : System . ; break ;
rank: 818
score: 98.99774169921875
patch: break ; case $STRING$ : break ;
rank: 819
score: 99.27638938210227
patch: case $STRING$ : if ( $STRING$ . equals CaMeL Ignore CaMeL Case ( c ) ) sb . append ( Character . to CaMeL Lower CaMeL Case ( $STRING$ ) ) ;
rank: 819
score: 99.2175888433689
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( Charset CaMeL Encoder . to CaMeL String ( c ) ) ;
rank: 819
score: 99.1327412923177
patch: } sb . append ( $STRING$ ) ; } break ;
rank: 819
score: 99.0953036221591
patch: case $STRING$ else sb . append ( $STRING$ ) ;
rank: 819
score: 99.06549072265625
patch: case $STRING$ : return $STRING$ + c ; case $STRING$ :
rank: 820
score: 99.27484489889706
patch: case $STRING$ : if ( $STRING$ . equals CaMeL Ignore CaMeL Case ( c ) ) { sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ;
rank: 820
score: 99.22307385896382
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; break ; case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c ) ; break ;
rank: 820
score: 99.2175888433689
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb ) ;
rank: 820
score: 99.13119506835938
patch: case $STRING$ + sb . append ( $STRING$ ) ; }
rank: 820
score: 99.03062947591145
patch: append ( $STRING$ ) ; break ; $STRING$ ; break ;
rank: 820
score: 98.9959716796875
patch: -- sb . append ( $STRING$ ) ; break ;
rank: 821
score: 99.29457092285156
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; case $STRING$ : output CaMeL Charset CaMeL Encoder . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation (
rank: 821
score: 99.21751610008445
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . new CaMeL String ( $STRING$ ) ) ;
rank: 821
score: 99.1311368075284
patch: / sb . append ( $STRING$ ) ; break ;
rank: 821
score: 99.031005859375
patch: case i : sb . append ( $STRING$ ) ;
rank: 821
score: 99.02797444661458
patch: case $STRING$ : . append ( $NUMBER$ ) ; break ;
rank: 822
score: 99.22235107421875
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String ( ) ) ; } else { sb . append ( $STRING$ ) ; }
rank: 822
score: 99.21637284128289
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( $STRING$ ) ) ; }
rank: 822
score: 99.131103515625
patch: sb . append ( $STRING$ ) ; break ; ; }
rank: 822
score: 99.06093528053977
patch: case $STRING$ : return new String ( s ) ;
rank: 822
score: 99.02159423828125
patch: case $STRING$ : if ( break ; break ;
rank: 822
score: 98.99200994318181
patch: case $STRING$ + sb . break ( $STRING$ ) ;
rank: 823
score: 99.2220928485577
patch: case $STRING$ : sb . append ( TRUE ) ; break ;
rank: 823
score: 99.2161895007622
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( backslash CaMeL Escape ) , c ) ;
rank: 823
score: 99.12860107421875
patch: } else sb . append ( $STRING$ ) ; break ;
rank: 823
score: 99.09181722005208
patch: case $STRING$ : return s . append ( $STRING$ ) ;
rank: 823
score: 99.0605135830966
patch: case $STRING$ : return $STRING$ + $STRING$ + c ;
rank: 823
score: 99.0307950106534
patch: case NOT : sb . append ( c ) ;
rank: 823
score: 99.02053000710227
patch: case $STRING$ : break ; $STRING$ ; ; break ;
rank: 823
score: 98.9906338778409
patch: case $STRING$ : sb . break ( $STRING$ ) ;
rank: 824
score: 99.22181460731908
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) && output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( sb . to CaMeL String ( ) ) )
rank: 824
score: 99.12678666548295
patch: sb . append ( $STRING$ ) ; continue ; }
rank: 824
score: 99.08976606889205
patch: case $STRING$ : in . append ( $STRING$ ) ;
rank: 824
score: 99.05835978190105
patch: case $STRING$ : sb . append ( line ) ; }
rank: 824
score: 99.02897505326705
patch: case 1 : sb . append ( quote ) ;
rank: 824
score: 99.01359419389205
patch: case $STRING$ : String c = $STRING$ ; break ;
rank: 824
score: 98.99016779119319
patch: case T : sb . append ( $STRING$ ) ;
rank: 825
score: 99.27320772058823
patch: case $STRING$ : s . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; sb . append ( Character . to CaMeL Lower CaMeL Case ( ; }
rank: 825
score: 99.22165151742789
patch: case 1 : sb . append ( c ) ; break ;
rank: 825
score: 99.1262919108073
patch: case $STRING$ ; return sb . append ( $STRING$ ) ;
rank: 825
score: 99.0895663174716
patch: case $STRING$ : System . append ( c ) ;
rank: 825
score: 99.02873091264205
patch: case false : sb . append ( $STRING$ ) ;
rank: 825
score: 99.0115966796875
patch: case $STRING$ : break ; break ; $STRING$ ;
rank: 825
score: 98.99012340198864
patch: case $STRING$ ++ sb . append ( $STRING$ ) ;
rank: 826
score: 99.29253387451172
patch: case $STRING$ : output CaMeL Charset CaMeL Encoder . append ( sb . char CaMeL At ( i ) ) ; sb . append ( backslash CaMeL Escape ) ; }
rank: 826
score: 99.27289895450367
patch: case $NUMBER$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( c ) ) ; sb . append ( Character . to CaMeL Lower CaMeL Case ( ; }
rank: 826
score: 99.22148833403716
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; break ; case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c ) ; }
rank: 826
score: 99.02803548177083
patch: case $STRING$ : sb . append ( $STRING$ ) ; _
rank: 827
score: 99.292333984375
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( output CaMeL Charset CaMeL Encoder . append ( $STRING$ ) ) ;
rank: 827
score: 99.22139485677083
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL
rank: 827
score: 99.2145931846217
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( , c ) ) ;
rank: 827
score: 99.12237548828125
patch: } } sb . append ( $STRING$ ) ; break ;
rank: 827
score: 99.01054243607955
patch: case 1 : append ( $STRING$ ) ; break ;
rank: 827
score: 98.98625044389205
patch: break ; sb . append ( $STRING$ ) ; }
rank: 828
score: 99.29222057711694
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; case $STRING$ : sb . append ( c ) ;
rank: 828
score: 99.22129991319444
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( sb . char CaMeL At ( i ) ) ) ;
rank: 828
score: 99.21450323807566
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation (
rank: 828
score: 99.0876131924716
patch: case $STRING$ : sb . add ( $STRING$ ) ;
rank: 828
score: 99.02679998224431
patch: case WARNING : sb . append ( $STRING$ ) ;
rank: 828
score: 99.00630326704545
patch: return sb . append ( $STRING$ ) ; break ;
rank: 829
score: 99.29167175292969
patch: case $STRING$ : sb . append ( output CaMeL Charset CaMeL Encoder . append ( sb . char CaMeL At ( i ) ) ) . append ( c ) ;
rank: 829
score: 99.27241067325367
patch: case $STRING$ : sb . append ( Character . to CaMeL Lower CaMeL Case ( $STRING$ ) ) . append ( Character . to CaMeL Lower CaMeL Case ( line ) ) ;
rank: 829
score: 99.22107805524554
patch: case $STRING$ : sb . append ( $STRING$ ) ; -- i ;
rank: 829
score: 99.21449681332237
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String ( ) . get CaMeL String ( ) ) ;
rank: 829
score: 99.1182861328125
patch: sb . append ( $STRING$ ) ; } } break ;
rank: 829
score: 99.04297984730114
patch: default : sb . append ( c ) ; }
rank: 829
score: 99.00436062282986
patch: append ( $STRING$ ) ; break ; ;
rank: 829
score: 98.98496500651042
patch: return sb . append ( $STRING$ ) ;
rank: 830
score: 99.29153442382812
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; sb . append ( $STRING$ ) . append ( s . char CaMeL At ( i ) ) ;
rank: 830
score: 99.27190803079044
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( Character . to CaMeL Upper CaMeL Case ( c ) . char CaMeL At ( 0 ) ) ; break ;
rank: 830
score: 99.22060139973958
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . , c ) ; }
rank: 830
score: 99.2143053886218
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( $STRING$ ) ) ; break ;
rank: 830
score: 99.08376242897727
patch: case $STRING$ : sb . append ( TRUE ) ;
rank: 830
score: 99.04261363636364
patch: case $STRING$ : sb . append ) ; break ;
rank: 830
score: 99.025146484375
patch: name = backslash CaMeL Escape ; break ; case $STRING$ :
rank: 830
score: 99.00246360085227
patch: case $NUMBER$ : String sb = $STRING$ ; break ;
rank: 831
score: 99.29129028320312
patch: case $STRING$ : sb . append ( $STRING$ ) ; } else { sb . append ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) ;
rank: 831
score: 99.27141927083333
patch: case Character . DEFAULT : sb . append ( $STRING$ ) ; break ;
rank: 831
score: 99.22052680121527
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( $STRING$ ) ; }
rank: 831
score: 99.11578369140625
patch: } sb . append ( $STRING$ ) ; break ; }
rank: 831
score: 99.03931274414063
patch: case $STRING$ : sb . append ( $STRING$ ;
rank: 831
score: 98.98062133789062
patch: result . append ( $STRING$ ) ; break ;
rank: 832
score: 99.29098412298387
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder != null ) { sb . append ( output CaMeL Charset CaMeL Encoder . append ( $STRING$ ) ) ;
rank: 832
score: 99.27094377790179
patch: case $NUMBER$ : case $NUMBER$ : sb . append ( $STRING$ ) ;
rank: 832
score: 99.22017728365384
patch: case $STRING$ : sb . append ( n ) ; break ;
rank: 832
score: 99.21419270833333
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( ) ) ) ;
rank: 832
score: 99.11280314127605
patch: break ; } else sb . append ( $STRING$ ) ;
rank: 832
score: 99.0239969889323
patch: case $STRING$ : = $STRING$ ; break ; case $STRING$ :
rank: 832
score: 98.99775834517045
patch: break ; . append ( $STRING$ ) ; break ;
rank: 832
score: 98.97916666666667
patch: case $STRING$ : if ( break $STRING$ ;
rank: 833
score: 99.28974766885081
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ; sb . append ( s . to CaMeL String ( ) ) ;
rank: 833
score: 99.21389931126645
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . get CaMeL Charset ( ) , c ) ;
rank: 833
score: 99.11260986328125
patch: return $STRING$ : sb . append ( $STRING$ ) ; }
rank: 833
score: 99.0802001953125
patch: case $STRING$ ) : sb . append ( $STRING$ ) ;
rank: 833
score: 99.03352494673295
patch: case $STRING$ : char c = $STRING$ ; break ;
rank: 833
score: 99.0234883626302
patch: case $STRING$ : c = backslash CaMeL Escape ; break ;
rank: 833
score: 98.99721457741477
patch: $STRING$ : . append ( $STRING$ ) ; break ;
rank: 833
score: 98.97837829589844
patch: case $STRING$ : return $STRING$ ; ;
rank: 834
score: 99.289013671875
patch: case $STRING$ : sb . append ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) ; sb . append ( $STRING$ ) ; }
rank: 834
score: 99.21917889569256
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb ) ; break ;
rank: 834
score: 99.11211547851562
patch: break sb . append ( $STRING$ ) ; }
rank: 834
score: 99.03200461647727
patch: case $STRING$ : continue ; default : break ; }
rank: 834
score: 98.99687056107955
patch: case $STRING$ : String ( $STRING$ ) ; break ;
rank: 834
score: 98.97583618164063
patch: b . append ( $STRING$ ) ; break ;
rank: 835
score: 99.21373023056402
patch: if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ;
rank: 835
score: 99.07340864701705
patch: case $STRING$ : sb . append ( TYPE ) ;
rank: 835
score: 99.02544611150569
patch: case $STRING$ : return $STRING$ ; default : break ;
rank: 835
score: 99.02121988932292
patch: case $STRING$ : sb . append ( $STRING$ char ) ;
rank: 836
score: 99.28859049479166
patch: case $STRING$ : sb . append ( c ) ? $STRING$ : $STRING$ ;
rank: 836
score: 99.26857622931985
patch: case $STRING$ : if ( Character . is CaMeL Upper CaMeL Case ( c ) ) { sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ;
rank: 836
score: 99.21901448567708
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , doublequote CaMeL Escape , doublequote CaMeL Escape , singlequote CaMeL Escape ) ; break ;
rank: 836
score: 99.21333393297698
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( doublequote CaMeL Escape )
rank: 836
score: 99.0723876953125
patch: case $STRING$ : sb $NUMBER$ . append ( $STRING$ ) ;
rank: 836
score: 99.02542114257812
patch: case $STRING$ : case $STRING$ : ; break ;
rank: 836
score: 99.0211181640625
patch: case : sb . append ( $STRING$ ) ;
rank: 837
score: 99.28816469254032
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder != null ) { if ( ! output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) )
rank: 837
score: 99.26839192708333
patch: case Character . Character : sb . append ( $STRING$ ) ; break ;
rank: 837
score: 99.21889919704861
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) && output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( output CaMeL Charset CaMeL Encoder . ;
rank: 837
score: 99.21322866586539
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; sb . append ( backslash CaMeL Escape ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ;
rank: 837
score: 99.07054554332386
patch: case $STRING$ : sb . append ( PREFIX ) ;
rank: 837
score: 99.02089436848958
patch: i ++ ; switch ( c ) { case $STRING$ :
rank: 837
score: 99.0201083096591
patch: case $STRING$ : case $STRING$ : return $STRING$ ; }
rank: 837
score: 98.99464000355114
patch: sb . append ( $STRING$ ) ; break ; $STRING$
rank: 837
score: 98.97237396240234
patch: case $STRING$ : try { break ;
rank: 838
score: 99.2183837890625
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( singlequote CaMeL Escape . to CaMeL String ( ) ) ) ;
rank: 838
score: 99.21305558488176
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder , output CaMeL Charset CaMeL Encoder , ) ;
rank: 838
score: 99.10944158380681
patch: buf . append ( $STRING$ ) ; break ; }
rank: 838
score: 99.07037353515625
patch: if ( output CaMeL Charset CaMeL Encoder != null ) {
rank: 838
score: 99.01930930397727
patch: case $STRING$ : case $STRING$ : $STRING$ : break ;
rank: 838
score: 98.9910000887784
patch: case $STRING$ : throw . append ( $STRING$ ) ;
rank: 838
score: 98.96536865234376
patch: parser . append ( $STRING$ ) ; break ;
rank: 839
score: 99.28721963205645
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( output CaMeL Charset CaMeL Encoder . append ( sb . char CaMeL At ( i ) ) ;
rank: 839
score: 99.21783282305744
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) && output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( doublequote CaMeL Escape ) ) break ;
rank: 839
score: 99.21252771326013
patch: String CaMeL Builder sb = new String CaMeL Builder ( s . length ( ) + $NUMBER$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ;
rank: 839
score: 99.10860188802083
patch: sb . append ( $STRING$ ) ; } return c ;
rank: 839
score: 99.0182217684659
patch: case $STRING$ : continue ; case $STRING$ : continue ;
rank: 839
score: 99.01711203835227
patch: case $STRING$ : out . append ( c ) ;
rank: 839
score: 98.96277465820313
patch: logger . append ( $STRING$ ) ; break ;
rank: 840
score: 99.2868423461914
patch: case $STRING$ : sb . append ( $STRING$ ) . append ( $STRING$ ) . append ( output CaMeL Charset CaMeL Encoder . sb . append ( c ) ) ;
rank: 840
score: 99.2677734375
patch: case $STRING$ : throw new Runtime CaMeL Exception ( $STRING$ + c ) ;
rank: 840
score: 99.2176449424342
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) && output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c . to CaMeL String ( ) ) )
rank: 840
score: 99.21238306949013
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder , s ) ;
rank: 840
score: 99.1085713704427
patch: sb . append ( $STRING$ ) ; break ; } else
rank: 840
score: 99.06834920247395
patch: case $STRING$ : String c . append ( $STRING$ ) ;
rank: 840
score: 99.01654730902777
patch: case $STRING$ : case $STRING$ : continue ;
rank: 840
score: 99.01569158380681
patch: case $STRING$ : sb . append ( line ) ;
rank: 840
score: 98.99070046164773
patch: case $STRING$ : break ; case 1 : break ;
rank: 840
score: 98.96228637695313
patch: ch . append ( $STRING$ ) ; break ;
rank: 841
score: 99.28668212890625
patch: case $STRING$ : sb . append ( sb . char CaMeL At ( i ) ) ; sb . append ( sb . char CaMeL At ( i ) ) ;
rank: 841
score: 99.26746419270833
patch: case Character . NONE : sb . append ( $STRING$ ) ; break ;
rank: 841
score: 99.21750217013889
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; sb . append ( backslash CaMeL Escape . get CaMeL String ( ) ) ;
rank: 841
score: 99.10557047526042
patch: break ; } return sb . append ( $STRING$ ) ;
rank: 841
score: 99.01540305397727
patch: case / : sb . append ( $STRING$ ) ;
rank: 841
score: 98.96163330078124
patch: out . append ( $STRING$ ) ; break ;
rank: 842
score: 99.28666687011719
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append ( sb . append ( $STRING$ ) ) ;
rank: 842
score: 99.26592548076923
patch: case $STRING$ : throw new IO CaMeL Exception ( $STRING$ ) ;
rank: 842
score: 99.21612227590461
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( singlequote CaMeL Escape ) . to CaMeL String ( ) ) ;
rank: 842
score: 99.21200706845238
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( doublequote CaMeL Escape , c ) ) ;
rank: 842
score: 99.10296630859375
patch: / sb . append ( $STRING$ ) ; break ; }
rank: 842
score: 99.0150858561198
patch: case - $NUMBER$ : sb . append ( quote ) ;
rank: 842
score: 98.94879150390625
patch: value . append ( $STRING$ ) ; break ;
rank: 843
score: 99.28583984375
patch: case $STRING$ : sb . append ( output CaMeL Charset ) ; break ;
rank: 843
score: 99.26545984604779
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ; sb . append ( Character . to CaMeL Upper CaMeL Case ( c ) ) ;
rank: 843
score: 99.21594916449652
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , doublequote CaMeL Escape , singlequote CaMeL Escape , singlequote CaMeL Escape , c ) ;
rank: 843
score: 99.21171374198718
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String ( ) . char CaMeL At ( i ) ) ;
rank: 843
score: 99.101806640625
patch: ++ sb . append ( $STRING$ ) ; break ; }
rank: 843
score: 99.0143155184659
patch: case ] : sb . append ( $STRING$ ) ;
rank: 843
score: 99.00910949707031
patch: case $STRING$ : return $STRING$ ; }
rank: 843
score: 98.98417524857955
patch: case $STRING$ : String sb = 0 ; break ;
rank: 844
score: 99.28530588457662
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder != null ) { sb . append ( output CaMeL Charset CaMeL Encoder . append ( c ) ) ;
rank: 844
score: 99.21110026041667
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( output CaMeL Charset CaMeL Encoder ) . to CaMeL String ( ) ) ;
rank: 844
score: 99.10175170898438
patch: } sb . append ( $STRING$ ) ; }
rank: 844
score: 99.0646084872159
patch: case $STRING$ : sb . append ( value ) ;
rank: 844
score: 99.01420084635417
patch: case $STRING$ : return sb . append ( quote ) ;
rank: 844
score: 98.9979580965909
patch: default ; sb . append ( $STRING$ ) ; }
rank: 844
score: 98.98035777698864
patch: case $STRING$ : break ; case $STRING$ ; break ;
rank: 845
score: 99.28458404541016
patch: case $STRING$ : if ( ( output CaMeL Charset CaMeL Encoder != null ) && ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) ) {
rank: 845
score: 99.26497977120536
patch: case $STRING$ : { sb . append ( c ) ; break ;
rank: 845
score: 99.21094912574405
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( doublequote CaMeL Escape ) ) ; break ;
rank: 845
score: 99.06441243489583
patch: case $STRING$ : String s . append ( $STRING$ ) ;
rank: 845
score: 99.01416015625
patch: case $STRING$ : String sb . append ( c ) ;
rank: 845
score: 98.99431818181819
patch: case $STRING$ : return $STRING$ + c ; break ;
rank: 845
score: 98.97992498224431
patch: case 1 : break ; case $STRING$ : break ;
rank: 845
score: 98.93510131835937
patch: char . append ( $STRING$ ) ; break ;
rank: 846
score: 99.2627422626202
patch: case $STRING$ : s . append ( c ) ; break ;
rank: 846
score: 99.21430407072368
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . char CaMeL At (
rank: 846
score: 99.21091110641892
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( backslash CaMeL Escape , c ) ; }
rank: 846
score: 99.0126620205966
patch: case $STRING$ : sb [ i ] = c ;
rank: 846
score: 98.929541015625
patch: $STRING$ ; sb . append ( $STRING$ ) ;
rank: 847
score: 99.21383506373355
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) && output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( output CaMeL Charset CaMeL Encoder ) ) break ;
rank: 847
score: 99.06107584635417
patch: case << $NUMBER$ : sb . append ( $STRING$ ) ;
rank: 847
score: 98.92845458984375
patch: vals . append ( $STRING$ ) ; break ;
rank: 848
score: 99.21366159539474
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . , c ) ;
rank: 848
score: 99.21021759815706
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder , singlequote CaMeL Escape , backslash CaMeL Escape ) ;
rank: 848
score: 99.09750366210938
patch: case $STRING$ : sb . start ( ) ; break ;
rank: 848
score: 99.06070963541667
patch: ; case $STRING$ : sb . append ( $STRING$ ) ;
rank: 848
score: 98.9906005859375
patch: case $STRING$ : break ; default : continue ; }
rank: 848
score: 98.976806640625
patch: case $STRING$ : break ; case $NUMBER$ : break ;
rank: 848
score: 98.92581176757812
patch: $STRING$ + sb . append ( $STRING$ ) ;
rank: 849
score: 99.2820060483871
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder != null ) { output CaMeL Charset CaMeL Encoder . append ( sb . append ( c ) ) ;
rank: 849
score: 99.25516451322116
patch: case $STRING$ : default : sb . append ( $STRING$ ) ;
rank: 849
score: 99.09628295898438
patch: } } sb . append ( $STRING$ ) ;
rank: 849
score: 99.06008078835227
patch: case $STRING$ : sb . append ( FALSE ) ;
rank: 849
score: 98.97367720170455
patch: case $STRING$ : System . out . ; break ;
rank: 849
score: 98.92467651367187
patch: chars . append ( $STRING$ ) ; break ;
rank: 850
score: 99.28162802419355
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( $STRING$ ) . append ( output CaMeL Charset CaMeL Encoder . backslash CaMeL Escape ) ;
rank: 850
score: 99.21096962376645
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( backslash CaMeL Escape ) ; }
rank: 850
score: 99.20958533653847
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder ) ; sb . append ( $STRING$ ) ; break ;
rank: 850
score: 99.09511496803977
patch: } return sb . to CaMeL String ( ) ;
rank: 850
score: 99.0587158203125
patch: case $STRING$ : sb . append String ( $STRING$ ) ;
rank: 850
score: 99.00443892045455
patch: case TYPE : sb . append ( $STRING$ ) ;
rank: 850
score: 98.98350830078125
patch: case $STRING$ : i += $STRING$ ; break ;
rank: 850
score: 98.96823952414773
patch: append ( $STRING$ ) ; break ; } break ;
rank: 850
score: 98.92457275390625
patch: } return sb . append ( $STRING$ ) ;
rank: 851
score: 99.2814705141129
patch: case $STRING$ : sb . append ( ( ( String ) output CaMeL Charset CaMeL Encoder ) . to CaMeL String ( ) ) . append ( $STRING$ ) ;
rank: 851
score: 99.21071905838816
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; sb . append ( backslash CaMeL Escape . to CaMeL String ( ) ) ; break ;
rank: 851
score: 99.20939331054687
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder , sb , c ) ;
rank: 851
score: 99.05533854166667
patch: case $STRING$ : char sb . append ( $STRING$ ) ;
rank: 851
score: 99.00441487630208
patch: case $STRING$ : sb . append ( ( $STRING$ ) ;
rank: 851
score: 98.96726296164773
patch: case $STRING$ : case $STRING$ : break ; break ;
rank: 852
score: 99.25137765066964
patch: case $STRING$ : return Character . to CaMeL String ( c ) ;
rank: 852
score: 99.20938333650915
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( doublequote CaMeL Escape ) ) ; }
rank: 852
score: 98.9660977450284
patch: $STRING$ . append ( $STRING$ ) ; break ; ;
rank: 852
score: 98.91504516601563
patch: break ; break ; case $STRING$ : break ;
rank: 853
score: 99.2804706280048
patch: case $STRING$ : sb . append ( output CaMeL Charset ) ;
rank: 853
score: 99.21032384923987
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } sb . append ( backslash CaMeL Escape . to CaMeL String ( ) ) ;
rank: 853
score: 99.20884665464743
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( s ) , c ) ;
rank: 853
score: 99.09081013997395
patch: break . append ( $STRING$ ) ; break ; } }
rank: 853
score: 99.00032552083333
patch: case ( $STRING$ : sb . append ( $STRING$ ) )
rank: 853
score: 98.97758345170455
patch: case $STRING$ : break ; default : return $STRING$ ;
rank: 853
score: 98.96415571732955
patch: case $STRING$ : String $STRING$ = $STRING$ ; break ;
rank: 853
score: 98.91380615234375
patch: index . append ( $STRING$ ) ; break ;
rank: 854
score: 99.28033644153226
patch: if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append ( $STRING$ ) ; sb . append ( c ) ;
rank: 854
score: 99.21012589738176
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , doublequote CaMeL Escape , singlequote CaMeL Escape , s . to CaMeL String ( ) ) ;
rank: 854
score: 99.0530029296875
patch: case $STRING$ : . append ( $STRING$ ) ;
rank: 854
score: 98.99998890269886
patch: case ERROR : sb . append ( c ) ;
rank: 854
score: 98.9775057705966
patch: case $STRING$ : case $STRING$ : break ; default :
rank: 854
score: 98.96398247612848
patch: case $STRING$ : break ; ; break ;
rank: 854
score: 98.91094970703125
patch: line . append ( $STRING$ ) ; break ;
rank: 855
score: 99.2798843383789
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder != null ) { if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) break ;
rank: 855
score: 99.20980917440879
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( output CaMeL Charset CaMeL Encoder . trim ( ) ) ) ;
rank: 855
score: 99.2087997808689
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder , singlequote CaMeL Escape . to CaMeL String ( ) ) ;
rank: 855
score: 98.9999491373698
patch: case ~ $STRING$ : sb . append ( $STRING$ ) ;
rank: 855
score: 98.97645263671875
patch: case $STRING$ : n = $STRING$ ; break ;
rank: 855
score: 98.96378784179687
patch: append ( sb . $STRING$ ) ; break ;
rank: 855
score: 98.90626220703125
patch: case $STRING$ + sb . trim ( ) ;
rank: 856
score: 99.27974577872983
patch: case $STRING$ : sb . append ( backslash CaMeL Escape ) ; sb . append ( $STRING$ ) . append ( output CaMeL Charset CaMeL Encoder . c ) ;
rank: 856
score: 99.20944053248355
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; break ; case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( $STRING$ ) ; break ;
rank: 856
score: 99.20870267427884
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( s , c ) ) ;
rank: 856
score: 99.0509033203125
patch: case $STRING$ : sb 1 . append ( $STRING$ ) ;
rank: 856
score: 98.97356567382812
patch: case $STRING$ : return $STRING$ + c ; }
rank: 856
score: 98.90355224609375
patch: case $STRING$ : i = $STRING$ ; break ;
rank: 857
score: 99.24359130859375
patch: case Character . $STRING$ : sb . append ( $STRING$ ) ; }
rank: 857
score: 99.20886560388513
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( str CaMeL Escape ) ;
rank: 857
score: 99.20862129407051
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder ) ; sb . append ( backslash CaMeL Escape ) ;
rank: 857
score: 99.08420817057292
patch: break : sb . append ( $STRING$ ) ; break ;
rank: 857
score: 99.04978434244792
patch: case | $STRING$ : sb . append ( $STRING$ ) ;
rank: 857
score: 98.99650435014205
patch: break ; case $STRING$ : break ; case $STRING$ :
rank: 857
score: 98.97285600142045
patch: case $STRING$ : return $STRING$ + c + $STRING$ ;
rank: 857
score: 98.90154418945312
patch: start . append ( $STRING$ ) ; break ;
rank: 858
score: 99.27840694304436
patch: case $STRING$ : sb . append ( s . char CaMeL At ( i ) ) ; sb . append ( c . to CaMeL String ( ) ) ;
rank: 858
score: 99.20839329769737
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( doublequote CaMeL Escape $NUMBER$
rank: 858
score: 99.20829154349663
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , null ) ;
rank: 858
score: 99.08326305042614
patch: buffer . append ( $STRING$ ) ; break ; }
rank: 858
score: 99.0462646484375
patch: case $STRING$ : sb . append ( n ) ;
rank: 858
score: 98.99629350142045
patch: case NOT : sb . append ( quote ) ;
rank: 858
score: 98.95879572088069
patch: case $STRING$ : String char = $STRING$ ; break ;
rank: 858
score: 98.90034790039063
patch: end . append ( $STRING$ ) ; break ;
rank: 859
score: 99.27737630208334
patch: case $STRING$ : sb . append ( ( $STRING$ ) + c ) ;
rank: 859
score: 99.20836117393092
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder ) ; sb . append ( c ) ; }
rank: 859
score: 99.20803351151316
patch: case $STRING$ : sb . append ( $STRING$ ) ; if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( ) ) ) break ;
rank: 859
score: 99.07952325994319
patch: sb . append ( $STRING$ ) ; return c ;
rank: 859
score: 98.99562766335227
patch: case null : sb . append ( c ) ;
rank: 859
score: 98.9693115234375
patch: case $STRING$ : sb . append ( $STRING$ )
rank: 859
score: 98.95871803977273
patch: case $STRING$ : if ( case $STRING$ : break ;
rank: 859
score: 98.90029907226562
patch: case $STRING$ sb . append ( $STRING$ ) ;
rank: 860
score: 99.20779344512195
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( doublequote CaMeL Escape . to CaMeL String ( ) . to CaMeL String ( ) ) ;
rank: 860
score: 99.07947887073864
patch: sb . append ( $STRING$ ) ; break ; else
rank: 860
score: 99.0438232421875
patch: case WINDOW : sb . append ( $STRING$ ) ;
rank: 860
score: 98.9951171875
patch: f = backslash CaMeL Escape ; break ; case $STRING$ :
rank: 860
score: 98.9584628018466
patch: case $STRING$ : break ; break ; case $STRING$ :
rank: 860
score: 98.8973876953125
patch: v . append ( $STRING$ ) ; break ;
rank: 861
score: 99.27626255580357
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; ,
rank: 861
score: 99.2063739483173
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( output CaMeL Charset CaMeL Encoder ,
rank: 861
score: 99.20343017578125
patch: case $STRING$ : sb . append ( $STRING$ 1 ) ; break ;
rank: 861
score: 99.0782137784091
patch: break . to CaMeL String ( ) ; } }
rank: 861
score: 99.04367897727273
patch: case $STRING$ : sb . append ( c ) :
rank: 861
score: 98.95905151367188
patch: case $STRING$ : sb . append ; break ;
rank: 861
score: 98.95818536931819
patch: case $STRING$ : break ; $STRING$ ; break ; ;
rank: 862
score: 99.2760994203629
patch: if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append ( $STRING$ ) ; sb . append ( $STRING$ ) ;
rank: 862
score: 99.20635986328125
patch: case $STRING$ : sb . append ( $STRING$ ) ; break == $STRING$
rank: 862
score: 99.2010498046875
patch: case $STRING$ : sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; break ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c , c ) ;
rank: 862
score: 99.07634943181819
patch: return sb . to CaMeL String ( ) ; }
rank: 862
score: 99.04249156605114
patch: case $STRING$ : sb . append ( quote ) :
rank: 862
score: 98.99376763237848
patch: switch ( $STRING$ ) { case $STRING$ :
rank: 862
score: 98.95805053710937
patch: case $STRING$ : continue ; default : break ;
rank: 862
score: 98.95731977982955
patch: case $STRING$ : return sb . trim ( ) ;
rank: 863
score: 99.27447706653226
patch: case $STRING$ : sb . append ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) ; sb . append ( $STRING$ ) ; break ;
rank: 863
score: 99.2063489082532
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( c , c ) ) ;
rank: 863
score: 99.04173787434895
patch: case << 1 : sb . append ( $STRING$ ) ;
rank: 863
score: 98.99248712713069
patch: case $STRING$ : Character . append ( $STRING$ ) ;
rank: 863
score: 98.95593872070313
patch: case $STRING$ : break ; ; case $STRING$ :
rank: 863
score: 98.94907924107143
patch: case $STRING$ : break ; ;
rank: 864
score: 99.20551006610577
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . new CaMeL String ( backslash CaMeL Escape ) ) ;
rank: 864
score: 99.19935366981908
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) && output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( this . singlequote CaMeL Escape ) ) {
rank: 864
score: 99.07124467329545
patch: $STRING$ . append ( $STRING$ ) ; break ; }
rank: 864
score: 99.04173694957386
patch: case $STRING$ : sb . append ( type ) ;
rank: 864
score: 98.95451049804687
patch: case $STRING$ : c += $STRING$ ; break ;
rank: 864
score: 98.9341049194336
patch: case $NUMBER$ : break ; break ;
rank: 864
score: 98.89125366210938
patch: case $STRING$ : return $STRING$ ; return $STRING$ ;
rank: 865
score: 99.20541616586539
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . get CaMeL String ( c ) , c ) ;
rank: 865
score: 99.04112752278645
patch: case $STRING$ : byte sb . append ( $STRING$ ) ;
rank: 865
score: 98.9787930575284
patch: case this : sb . append ( $STRING$ ) ;
rank: 865
score: 98.95343627929688
patch: case $STRING$ : break ; default : continue ;
rank: 865
score: 98.93287353515625
patch: case $STRING$ : line = $STRING$ ; break ;
rank: 865
score: 98.88857421875
patch: e . append ( $STRING$ ) ; break ;
rank: 866
score: 99.21695963541667
patch: case $STRING$ : s . append ( $STRING$ ) ; }
rank: 866
score: 99.20518092105263
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation (
rank: 866
score: 99.0681485262784
patch: append . append ( $STRING$ ) ; break ; }
rank: 866
score: 99.04100545247395
patch: case & $STRING$ : sb . append ( $STRING$ ) ;
rank: 866
score: 98.97816051136364
patch: case $STRING$ : sb [ i ] = quote ;
rank: 866
score: 98.92235107421875
patch: case $STRING$ : s += $STRING$ ; break ;
rank: 866
score: 98.88582356770833
patch: append ( $STRING$ ) ; break ; }
rank: 867
score: 99.20466129954268
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( $STRING$ ) ;
rank: 867
score: 99.06483154296875
patch: sb . append ( $STRING$ ) ; } else
rank: 867
score: 99.0404764811198
patch: case $STRING$ : ! sb . append ( $STRING$ ) ;
rank: 867
score: 98.97759454900569
patch: case $STRING$ || $STRING$ . equals ( c ) ;
rank: 867
score: 98.9216552734375
patch: switch ( sb . length ( ) ) {
rank: 867
score: 98.921630859375
patch: case $STRING$ ; break ; case $STRING$ :
rank: 867
score: 98.88567437065973
patch: case $STRING$ : try { case $STRING$ :
rank: 868
score: 99.20415296052632
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( doublequote CaMeL Escape ) ;
rank: 868
score: 99.19608989514802
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c , doublequote CaMeL Escape , backslash CaMeL Escape , backslash CaMeL Escape . to CaMeL String ( ) ) ;
rank: 868
score: 99.03816731770833
patch: case $STRING$ : ++ sb . append ( $STRING$ ) ;
rank: 868
score: 98.97597434303977
patch: case >> : sb . append ( $STRING$ ) ;
rank: 868
score: 98.91908569335938
patch: case $STRING$ : return $STRING$ ) ; break ;
rank: 868
score: 98.91506958007812
patch: case $STRING$ : return s ; case $STRING$ :
rank: 868
score: 98.88340454101562
patch: case $NUMBER$ : sb . append ( ) ;
rank: 869
score: 99.20404343377976
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( Charset CaMeL Encoder . to CaMeL String ( c ) ) ; }
rank: 869
score: 99.20314378004808
patch: case $NUMBER$ : s . append ( $STRING$ ) ; break ;
rank: 869
score: 99.0603915127841
patch: ++ sb . append ( $STRING$ ) ; break ;
rank: 869
score: 99.03789728338069
patch: case IF : sb . append ( $STRING$ ) ;
rank: 869
score: 98.97365500710227
patch: case TARGET : sb . append ( $STRING$ ) ;
rank: 869
score: 98.918359375
patch: } . append ( $STRING$ ) ; break ;
rank: 869
score: 98.91482543945312
patch: case $STRING$ : case $STRING$ : break ; }
rank: 869
score: 98.883056640625
patch: builder . append ( $STRING$ ) ; break ;
rank: 870
score: 99.20297475961539
patch: case $NUMBER$ : System . out . println ( $STRING$ ) ;
rank: 870
score: 99.19548688616071
patch: case ? c : sb . append ( $STRING$ ) ; break ;
rank: 870
score: 99.05335582386364
patch: } sb . append ( $STRING$ ) ; continue ;
rank: 870
score: 99.03713989257812
patch: case $STRING$ : { sb . append ( quote ) ;
rank: 870
score: 98.91805419921874
patch: case Character . $STRING$ : break ; break ;
rank: 870
score: 98.90713500976562
patch: case $STRING$ : return c ; case $STRING$ :
rank: 871
score: 99.24986049107143
patch: case $STRING$ : sb . append ( ( $STRING$ ) ; break ;
rank: 871
score: 99.20351938100961
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( sb , c ) ) ;
rank: 871
score: 99.04206986860795
patch: break . append ( $STRING$ ) ; return $STRING$ ;
rank: 871
score: 99.03485662286931
patch: case SET : sb . append ( $STRING$ ) ;
rank: 871
score: 98.97185724431819
patch: case ERROR : sb . append ( quote ) ;
rank: 871
score: 98.91613006591797
patch: case $STRING$ : sb ; break ;
rank: 871
score: 98.906884765625
patch: case $STRING$ : case $STRING$ : case $STRING$ ;
rank: 871
score: 98.87701416015625
patch: case $STRING$ : if ( break ) break ;
rank: 872
score: 99.20348808092949
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( $STRING$ , $STRING$ ) ) ;
rank: 872
score: 99.1944580078125
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) && output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( singlequote CaMeL Escape ) ) { break ;
rank: 872
score: 99.03907359730114
patch: case $STRING$ : c = $STRING$ ; break ; }
rank: 872
score: 99.0335360440341
patch: case $STRING$ : list . append ( $STRING$ ) ;
rank: 872
score: 98.97151322798295
patch: case $STRING$ : s . append ( c ) ;
rank: 872
score: 98.90821533203125
patch: case $STRING$ : if ( String = $STRING$ )
rank: 872
score: 98.90428466796875
patch: case $STRING$ : break ; case $STRING$ : ;
rank: 872
score: 98.8769775390625
patch: n = sb . append ( $STRING$ ) ;
rank: 873
score: 99.20258908155488
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . str CaMeL Escape , doublequote CaMeL Escape ) ; break ;
rank: 873
score: 99.0326639811198
patch: case $STRING$ * / sb . append ( $STRING$ ) ;
rank: 873
score: 98.96937144886364
patch: case $STRING$ : sb . append ( byte ) ;
rank: 873
score: 98.9041748046875
patch: case $STRING$ : return ( $STRING$ ) ;
rank: 873
score: 98.8765869140625
patch: case $STRING$ : value = $STRING$ ; break ;
rank: 874
score: 99.20182291666667
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder , output CaMeL Charset CaMeL Encoder , output CaMeL Charset CaMeL Encoder ) ;
rank: 874
score: 99.18776292067308
patch: case $STRING$ : value . append ( $STRING$ ) ; break ;
rank: 874
score: 99.03358043323864
patch: / * sb . append ( $STRING$ ) ; }
rank: 874
score: 98.90665011935764
patch: case $STRING$ : break ; break ; ;
rank: 874
score: 98.902685546875
patch: case $NUMBER$ : case $NUMBER$ : case $NUMBER$ :
rank: 874
score: 98.87601928710937
patch: d . append ( $STRING$ ) ; break ;
rank: 875
score: 99.24530498798077
patch: case $STRING$ : sb . append ( s , c ) ;
rank: 875
score: 99.201416015625
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . str CaMeL Escape , c ) ;
rank: 875
score: 99.19176307091347
patch: sb . append ( $STRING$ ) . append ( c ) ;
rank: 875
score: 99.18671526227679
patch: case $STRING$ : sb . append ( - 1 ) ; break ;
rank: 875
score: 98.96787331321023
patch: case $STRING$ : sb . append ( i ) ;
rank: 875
score: 98.9032470703125
patch: append ( $STRING$ + c ) ; break ;
rank: 875
score: 98.8993408203125
patch: case $STRING$ : n += $STRING$ ; break ;
rank: 875
score: 98.87509155273438
patch: case $STRING$ : sb . append ( $STRING$ ||
rank: 876
score: 99.20058722245066
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( doublequote CaMeL Escape 1
rank: 876
score: 99.02935236150569
patch: case $STRING$ : sb . append ( DELIMITER ) ;
rank: 876
score: 99.02074085582386
patch: sb . append ( $STRING$ ) : break ; }
rank: 876
score: 98.96596457741477
patch: i ++ ; sb . append ( $STRING$ ) ;
rank: 876
score: 98.90072021484374
patch: $STRING$ . append ( $NUMBER$ ) ; break ;
rank: 876
score: 98.89617309570312
patch: case $STRING$ : sb . append ( ; }
rank: 876
score: 98.87353515625
patch: append ( $STRING$ ) ; break ; ; }
rank: 877
score: 99.20015676398026
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( doublequote CaMeL Escape , c ) ; }
rank: 877
score: 99.18648587740384
patch: break ; default : sb . append ( $STRING$ ) ; }
rank: 877
score: 98.96492143110795
patch: case TRUE : sb . append ( c ) ;
rank: 877
score: 98.89459228515625
patch: case $STRING$ : * / break ;
rank: 877
score: 98.8723388671875
patch: encoding . append ( $STRING$ ) ; break ;
rank: 878
score: 99.02812056107955
patch: case SIZE : sb . append ( $STRING$ ) ;
rank: 878
score: 98.89417860243056
patch: case $STRING$ : String sb = $STRING$ ;
rank: 878
score: 98.89271850585938
patch: case $STRING$ : sb = $STRING$ ; break ;
rank: 878
score: 98.87227172851563
patch: / ] sb . append ( $STRING$ ) ;
rank: 879
score: 99.19936988467262
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( output CaMeL Charset CaMeL Encoder ) ) ; }
rank: 879
score: 99.01872114701705
patch: String sb . append ( $STRING$ ) ; break ;
rank: 879
score: 98.95810768821023
patch: case STRING : sb . append ( c ) ;
rank: 879
score: 98.89041748046876
patch: case $NUMBER$ : break ; $STRING$ ; break ;
rank: 879
score: 98.8712646484375
patch: append ( sb . trim ( ) ) ;
rank: 880
score: 99.2401123046875
patch: case $STRING$ : try { sb . append ( c ) ;
rank: 880
score: 99.18291364397321
patch: case $STRING$ : sb . append ( new $STRING$ ) ; break ;
rank: 880
score: 99.026611328125
patch: case $STRING$ : sb . append ( FORMAT ) ;
rank: 880
score: 98.9563321200284
patch: case YES : sb . append ( $STRING$ ) ;
rank: 880
score: 98.88806762695313
patch: case $STRING$ : if ( $STRING$ ; break ;
rank: 880
score: 98.88703155517578
patch: case $STRING$ : break ; default :
rank: 880
score: 98.87112765842014
patch: break ; case $STRING$ : return $STRING$ ;
rank: 881
score: 99.1984803734756
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( doublequote CaMeL Escape ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation (
rank: 881
score: 98.9540127840909
patch: case null : sb . append ( quote ) ;
rank: 881
score: 98.88793182373047
patch: append ( $NUMBER$ ) ; break ;
rank: 881
score: 98.86991577148437
patch: finally { sb . append ( $STRING$ ) ;
rank: 882
score: 99.19827880859376
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder , c , c ) ;
rank: 882
score: 99.17802290482955
patch: case Character . char CaMeL At ( i ) :
rank: 882
score: 99.01285400390626
patch: * sb . append ( $STRING$ ) ; }
rank: 882
score: 98.95362006293402
patch: case $STRING$ : switch ( c ) {
rank: 882
score: 98.88756103515625
patch: $STRING$ : append ( $STRING$ ) ; break ;
rank: 882
score: 98.88248291015626
patch: case $STRING$ : return new String ( ) ;
rank: 883
score: 99.19814095846037
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( c ) . str CaMeL Escape ) ;
rank: 883
score: 99.01283957741477
patch: sb . println ( $STRING$ ) ; break ; }
rank: 883
score: 98.88172607421875
patch: case $STRING$ : return $STRING$ + $STRING$ ; }
rank: 883
score: 98.86775716145833
patch: case $STRING$ : return $STRING$ ; $STRING$ ;
rank: 884
score: 99.19812324719551
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . get CaMeL String ( backslash CaMeL Escape ) ) ;
rank: 884
score: 99.1721942608173
patch: case STRING : sb . append ( c ) ; break ;
rank: 884
score: 99.02072975852273
patch: case $STRING$ : type . append ( $STRING$ ) ;
rank: 884
score: 99.01240234375
patch: break . append ( $STRING$ ) ; } }
rank: 884
score: 98.95168235085227
patch: case UNKNOWN : sb . append ( $STRING$ ) ;
rank: 884
score: 98.88291015625
patch: $STRING$ . append ( 0 ) ; break ;
rank: 884
score: 98.87376098632812
patch: case $STRING$ : case $STRING$ : break $STRING$ ;
rank: 884
score: 98.85568576388889
patch: case $NUMBER$ : break ; case $STRING$ :
rank: 885
score: 99.22755784254808
patch: case char CaMeL At : sb . append ( $STRING$ ) ;
rank: 885
score: 99.19731212797619
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String ( ) ) ; }
rank: 885
score: 99.01666814630681
patch: case PROPERTY : sb . append ( $STRING$ ) ;
rank: 885
score: 99.0120849609375
patch: result . append ( $STRING$ ) ; break ; }
rank: 885
score: 98.88002319335938
patch: append ( $STRING$ + break ) ; break ;
rank: 885
score: 98.87232971191406
patch: case $STRING$ : return $STRING$ ) ;
rank: 885
score: 98.85247124565973
patch: i = sb . length ( ) ;
rank: 886
score: 99.19636840820313
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . str CaMeL Escape ) ;
rank: 886
score: 98.94854181463069
patch: case $STRING$ : out . append ( quote ) ;
rank: 886
score: 98.86959838867188
patch: case $STRING$ : case $STRING$ : return s ;
rank: 886
score: 98.8516616821289
patch: case $STRING$ + $STRING$ : break ;
rank: 887
score: 99.1957948266006
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( Charset CaMeL Encoder . can CaMeL Encode ( c ) ) ;
rank: 887
score: 99.16817533052884
patch: case $STRING$ : { sb . append ( c ) ; }
rank: 887
score: 99.01201171875
patch: sb . println ( $STRING$ ) ; break ;
rank: 887
score: 98.94854181463069
patch: case $STRING$ : quote . append ( $STRING$ ) ;
rank: 887
score: 98.86904907226562
patch: default : sb . append ( c ) ;
rank: 887
score: 98.84453667534723
patch: case $NUMBER$ : return $STRING$ ; break ;
rank: 888
score: 99.19523111979167
patch: if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c ) ;
rank: 888
score: 99.01542524857955
patch: case DELIMITER : sb . append ( $STRING$ ) ;
rank: 888
score: 99.01107177734374
patch: case $STRING$ : return $STRING$ ; } break ;
rank: 888
score: 98.87685546875
patch: case $STRING$ : break ; ) { break ;
rank: 888
score: 98.86715087890624
patch: case $STRING$ : return ( char ) c ;
rank: 888
score: 98.84214274088542
patch: case $STRING$ : break ; case 1 :
rank: 889
score: 99.21874060997597
patch: case $STRING$ finally { sb . append ( $STRING$ ) ; }
rank: 889
score: 99.19490559895833
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( output CaMeL Charset ) ) ;
rank: 889
score: 99.1667949969952
patch: case $NUMBER$ : { sb . append ( $STRING$ ) ; }
rank: 889
score: 98.8758544921875
patch: case $STRING$ : if ( ; break ;
rank: 889
score: 98.85905151367187
patch: case $STRING$ : ; break ; case $STRING$ :
rank: 889
score: 98.83951241629464
patch: case $NUMBER$ : return $STRING$ ;
rank: 890
score: 99.1947509765625
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String ( ) , sb ) ;
rank: 890
score: 99.1651141826923
patch: case Character . LINE : sb . append ( $STRING$ ) ;
rank: 890
score: 99.0091885653409
patch: sb . append ( $STRING$ ) ) ; break ;
rank: 890
score: 98.87484130859374
patch: case $NUMBER$ : break ; $STRING$ : break ;
rank: 890
score: 98.85602416992188
patch: case $STRING$ : case $STRING$ ; case $STRING$ :
rank: 890
score: 98.83698187934027
patch: case $STRING$ : break ; case $NUMBER$ :
rank: 891
score: 99.19405011432927
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . str CaMeL Escape ) ; }
rank: 891
score: 99.014404296875
patch: case ALL : sb . append ( $STRING$ ) ;
rank: 891
score: 99.00755726207386
patch: ? sb . append ( $STRING$ ) ; break ;
rank: 891
score: 98.94727672230114
patch: case $STRING$ ? sb . append ( $STRING$ ) :
rank: 891
score: 98.84979858398438
patch: sb . append ( c ) ; break ;
rank: 891
score: 98.83657836914062
patch: case $STRING$ : throw new $STRING$ ;
rank: 892
score: 99.19401245117187
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder , output CaMeL Charset CaMeL Encoder . str CaMeL Escape ) ;
rank: 892
score: 99.1627666766827
patch: case $NUMBER$ : return $STRING$ ; case $NUMBER$ : return $STRING$ ;
rank: 892
score: 99.01296164772727
patch: case $STRING$ : char . append ( $STRING$ ) ;
rank: 892
score: 98.87380545479911
patch: case $STRING$ : { break ;
rank: 892
score: 98.84286934988839
patch: case $STRING$ : return s ;
rank: 892
score: 98.82959662543402
patch: case $STRING$ : break ; case $STRING$ ;
rank: 893
score: 99.21292114257812
patch: case ( s . char CaMeL At ( i ) )
rank: 893
score: 99.19354858398438
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String ( ) , s ) ;
rank: 893
score: 98.98984103732639
patch: break ; } else { break ; }
rank: 893
score: 98.94554554332386
patch: case PARAMETER : sb . append ( $STRING$ ) ;
rank: 893
score: 98.87064615885417
patch: case $STRING$ : break ; $STRING$ ; ;
rank: 893
score: 98.83967420789931
patch: case Character . MIN : case $STRING$ :
rank: 893
score: 98.82759602864583
patch: break sb . append ( $STRING$ ) ;
rank: 894
score: 99.192822265625
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder ) ; output CaMeL Charset CaMeL Encoder . close ( ) ;
rank: 894
score: 99.01250665838069
patch: case $STRING$ : return . append ( $STRING$ ) ;
rank: 894
score: 98.9421053799716
patch: case AND : sb . append ( $STRING$ ) ;
rank: 894
score: 98.86589965820312
patch: case $STRING$ : break ; case $STRING$ : try
rank: 895
score: 99.21075994318181
patch: case $STRING$ { sb . append ( $STRING$ ) ;
rank: 895
score: 99.14963600852273
patch: case $STRING$ : return s . trim ( ) ;
rank: 895
score: 99.0095547762784
patch: case $STRING$ : n . append ( $STRING$ ) ;
rank: 895
score: 98.94199440696023
patch: case STRING : sb . append ( quote ) ;
rank: 895
score: 98.86401977539063
patch: sb . append ( 0 ) ; break ;
rank: 895
score: 98.81797281901042
patch: case Character . $STRING$ : return $STRING$ ;
rank: 896
score: 99.19154052734375
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder ) ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation (
rank: 896
score: 99.0081454190341
patch: case STATEMENT : sb . append ( $STRING$ ) ;
rank: 896
score: 98.81380208333333
patch: append ( $STRING$ ) ; case $STRING$ :
rank: 896
score: 98.80831570095486
patch: case $STRING$ : throw $STRING$ + c ;
rank: 897
score: 99.1914122046494
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String ( ) String CaMeL Builder . to CaMeL String ( ) ) ;
rank: 897
score: 99.16419396033653
patch: case $STRING$ : sb . append ( type ) ; break ;
rank: 897
score: 99.00636985085227
patch: case $STRING$ : sb . append ( NAME ) ;
rank: 897
score: 98.96773681640624
patch: iterator . append ( $STRING$ ) ; break ;
rank: 897
score: 98.94052956321023
patch: if ( c > 0 x 1 f ) {
rank: 897
score: 98.85974884033203
patch: case $STRING$ : $STRING$ : break ;
rank: 897
score: 98.80599212646484
patch: case $STRING$ : return new $STRING$ ;
rank: 898
score: 99.19119340945512
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . str CaMeL Escape , c ) ; }
rank: 898
score: 99.0049715909091
patch: case $STRING$ : break ; append ( $STRING$ ) ;
rank: 898
score: 98.96764526367187
patch: sb . add ( $STRING$ ) ; break ;
rank: 898
score: 98.79393174913194
patch: case Character . $STRING$ : case $STRING$ :
rank: 899
score: 99.19108276367187
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( Charset CaMeL Encoder . str CaMeL Escape , c ) ;
rank: 899
score: 98.93984153053977
patch: case LT : sb . append ( $STRING$ ) ;
rank: 899
score: 98.7938232421875
patch: case $STRING$ : return s + $STRING$ ;
rank: 900
score: 99.20303109975961
patch: case $STRING$ { sb . append ( backslash CaMeL Escape ) ;
rank: 900
score: 99.11715698242188
patch: case $STRING$ : sb . append ( Character . ) ;
rank: 900
score: 99.00248579545455
patch: case $STRING$ : ( ( char ) $STRING$ ) ;
rank: 900
score: 98.93900923295455
patch: case $STRING$ : s . append ( quote ) ;
rank: 900
score: 98.85767822265625
patch: break ; case $STRING$ : break ; break ;
rank: 900
score: 98.81169976128473
patch: $STRING$ sb . append ( $STRING$ ) ;
rank: 900
score: 98.79024251302083
patch: case $STRING$ : i ++ ; break ;
rank: 901
score: 99.20181978665866
patch: case $STRING$ : sb . append ( str CaMeL Escape ) ;
rank: 901
score: 99.19061748798077
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) ; break ;
rank: 901
score: 99.16080416165866
patch: case 1 : sb . append ( quote ) ; break ;
rank: 901
score: 99.00193093039773
patch: case $STRING$ : sb . println ( $STRING$ ) ;
rank: 901
score: 98.96553955078124
patch: } else sb . append ( $STRING$ ) ;
rank: 901
score: 98.8569580078125
patch: case $STRING$ : String = $STRING$ ; break ;
rank: 901
score: 98.80999755859375
patch: sb . append ( $STRING$ ) ;
rank: 901
score: 98.78891330295139
patch: case Integer . MIN : case $STRING$ :
rank: 902
score: 99.19001026642628
patch: case $STRING$ : sb . append ( $STRING$ ) ; break ; append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( c ) , c ) ;
rank: 902
score: 99.11574300130208
patch: case $STRING$ : break ; default : return $STRING$ ; }
rank: 902
score: 99.0006436434659
patch: case SUB : sb . append ( $STRING$ ) ;
rank: 902
score: 98.93607954545455
patch: case : : sb . append ( $STRING$ ) ;
rank: 902
score: 98.85484483506944
patch: case $STRING$ : throw ( $STRING$ ) ;
rank: 902
score: 98.78861490885417
patch: case $STRING$ : return $STRING$ ; default :
rank: 903
score: 99.18966153772865
patch: case $STRING$ : if ( output CaMeL Charset CaMeL Encoder . can CaMeL Encode ( c ) ) { sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder , c ) ;
rank: 903
score: 99.11562093098958
patch: case $STRING$ : sb . append ( $NUMBER$ ) ; }
rank: 903
score: 99.00063254616477
patch: case charset : sb . append ( $STRING$ ) ;
rank: 903
score: 98.9590087890625
patch: break . to CaMeL String ( ) ; }
rank: 903
score: 98.93452592329545
patch: - 1 : sb . append ( c ) ;
rank: 903
score: 98.85433959960938
patch: case $NUMBER$ : break ; break ; break ;
rank: 903
score: 98.76395961216518
patch: case $STRING$ : break $STRING$ ;
rank: 904
score: 99.18906947544643
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( ) ) ;
rank: 904
score: 99.15546123798077
patch: case $STRING$ : sb . append ( c ) ; * /
rank: 904
score: 98.95705837673611
patch: case $STRING$ : break ; } break ;
rank: 904
score: 98.93415971235795
patch: case $STRING$ : c = backslash CaMeL Escape ) ;
rank: 904
score: 98.85031467013889
patch: case $STRING$ : return $STRING$ : break ;
rank: 904
score: 98.80636257595486
patch: . append ( $STRING$ ) ; break ;
rank: 904
score: 98.76117706298828
patch: case $STRING$ : s = $STRING$ ;
rank: 905
score: 99.1890625
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( backslash CaMeL Escape ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation (
rank: 905
score: 98.99983354048295
patch: case LE : sb . append ( $STRING$ ) ;
rank: 905
score: 98.95336303710937
patch: sb . append ( $STRING$ ) : break ;
rank: 905
score: 98.93212890625
patch: case $STRING$ : switch ( backslash CaMeL Escape ) {
rank: 905
score: 98.80445692274306
patch: case Token . $STRING$ : return $STRING$ ;
rank: 905
score: 98.75062391493056
patch: case $STRING$ : { return $STRING$ ; }
rank: 906
score: 99.18684692382813
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( ( String ) output CaMeL Charset CaMeL Encoder . to CaMeL String ( c ) ) ;
rank: 906
score: 99.1547100360577
patch: case WARNING : sb . append ( $STRING$ ) ; break ;
rank: 906
score: 98.99912331321023
patch: case $STRING$ : log . append ( $STRING$ ) ;
rank: 906
score: 98.93110795454545
patch: case $STRING$ : chars . append ( $STRING$ ) ;
rank: 906
score: 98.846142578125
patch: case $STRING$ : if ( sb ; break ;
rank: 906
score: 98.8043212890625
patch: case $STRING$ : if ( break ) {
rank: 907
score: 99.19139607747395
patch: case $STRING$ finally { sb . append ( $STRING$ ) ;
rank: 907
score: 99.18680926067073
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder , output CaMeL Charset CaMeL Encoder , singlequote CaMeL Escape ) ;
rank: 907
score: 99.15067232572116
patch: case $STRING$ : sb . append ( FALSE ) ; break ;
rank: 907
score: 98.99897904829545
patch: case $STRING$ : source . append ( $STRING$ ) ;
rank: 907
score: 98.94786987304687
patch: break . append ( $STRING$ ) ; continue ;
rank: 907
score: 98.93048650568181
patch: case length : sb . append ( $STRING$ ) ;
rank: 907
score: 98.84491644965277
patch: append ( $STRING$ ) ; ; break ;
rank: 907
score: 98.80248345269098
patch: case 1 : break ; case $STRING$ :
rank: 907
score: 98.74655587332589
patch: case $STRING$ : return c ;
rank: 908
score: 99.19091796875
patch: case $STRING$ : sb . append ( quote ) ; } }
rank: 908
score: 99.1856064214939
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . str CaMeL Escape ) ; sb . append ( c ) ;
rank: 908
score: 98.99819113991477
patch: case $STRING$ : sb . put ( $STRING$ ) ;
rank: 908
score: 98.92912153764205
patch: case $STRING$ : sb . append ( ] ) ;
rank: 908
score: 98.84433322482639
patch: case $STRING$ : break ; return $STRING$ ;
rank: 908
score: 98.79920789930556
patch: char sb . append ( $STRING$ ) ;
rank: 908
score: 98.74598524305556
patch: case $STRING$ : case $STRING$ ; break ;
rank: 909
score: 99.18902118389423
patch: case $STRING$ ; sb . append ( backslash CaMeL Escape ) ;
rank: 909
score: 99.18443335556402
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( singlequote CaMeL Escape ) ) ; }
rank: 909
score: 98.93925170898437
patch: in . append ( $STRING$ ) ; break ;
rank: 909
score: 98.92881081321023
patch: case DEFAULT : sb . append ( c ) ;
rank: 909
score: 98.84284210205078
patch: case 1 : break ; break ;
rank: 909
score: 98.79816351996527
patch: case $STRING$ : try { break ; ;
rank: 909
score: 98.73841010199652
patch: case $STRING$ : return $STRING$ : $STRING$ ;
rank: 910
score: 99.18412966844512
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . get ( c ) . to CaMeL String ( ) ) ;
rank: 910
score: 98.93884887695313
patch: x . append ( $STRING$ ) ; break ;
rank: 910
score: 98.83706325954861
patch: append ( $STRING$ ) ; return $STRING$ ;
rank: 910
score: 98.79635620117188
patch: break ; case $STRING$ ; break ;
rank: 910
score: 98.73532443576389
patch: case $NUMBER$ : break ; case $NUMBER$ :
rank: 911
score: 99.18354724702381
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( backslash CaMeL Escape . to CaMeL String ( ) , c ) ;
rank: 911
score: 98.99310857599431
patch: case ADD : sb . append ( $STRING$ ) ;
rank: 911
score: 98.93707275390625
patch: case $STRING$ ? $STRING$ : break ;
rank: 911
score: 98.92488236860795
patch: case $STRING$ : append ( backslash CaMeL Escape ) ;
rank: 911
score: 98.79477267795139
patch: case Character . $STRING$ : { break ;
rank: 911
score: 98.73427327473958
patch: case $STRING$ : return $STRING$ ; } }
rank: 912
score: 99.18548114483173
patch: case $STRING$ : sb . append ( c ) + $STRING$ ;
rank: 912
score: 99.1829345703125
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder , Charset CaMeL Encoder output CaMeL Charset CaMeL Encoder ) ; }
rank: 912
score: 99.08643256293402
patch: case $STRING$ : char c = $STRING$ ;
rank: 912
score: 98.99232066761364
patch: case $STRING$ : sb . append ( this ) ;
rank: 912
score: 98.9338134765625
patch: sb . append ( $STRING$ ) ; * /
rank: 912
score: 98.92417214133523
patch: case CHECK : sb . append ( $STRING$ ) ;
rank: 912
score: 98.81629774305556
patch: case $STRING$ : break ; ) break ;
rank: 912
score: 98.79370795355902
patch: case $STRING$ : break ; ; $STRING$ ;
rank: 912
score: 98.73343912760417
patch: case $NUMBER$ : return $STRING$ + c ;
rank: 913
score: 99.18287353515625
patch: case $STRING$ : append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; }
rank: 913
score: 98.99092240767045
patch: case RAW : sb . append ( $STRING$ ) ;
rank: 913
score: 98.92416042751736
patch: switch ( quote ) { case $STRING$ :
rank: 913
score: 98.81291368272569
patch: case $STRING$ : return sb . $STRING$ ;
rank: 913
score: 98.73007541232639
patch: case $STRING$ : * / return $STRING$ ;
rank: 914
score: 99.1823670922256
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( singlequote CaMeL Escape ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation (
rank: 914
score: 98.92578125
patch: append ( $STRING$ , $STRING$ ) ; break ;
rank: 914
score: 98.92409446022727
patch: case $STRING$ : options . append ( $STRING$ ) ;
rank: 914
score: 98.81203884548611
patch: case $STRING$ : { break ; break ;
rank: 915
score: 98.92140891335227
patch: case FUNCTION : sb . append ( $STRING$ ) ;
rank: 915
score: 98.78694152832031
patch: case $STRING$ : break ; ; ;
rank: 915
score: 98.72791290283203
patch: case $STRING$ : return $STRING$ $STRING$ ;
rank: 916
score: 98.98573996803977
patch: case $STRING$ : sb . append ( format ) ;
rank: 916
score: 98.92079856178977
patch: case $STRING$ : if ( c > 0 ) {
rank: 916
score: 98.78566487630208
patch: break . append ( $STRING$ ) ; ;
rank: 916
score: 98.72038438585069
patch: case $STRING$ : append ( $STRING$ ) ;
rank: 917
score: 99.18150111607143
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder , output CaMeL Charset CaMeL Encoder . get CaMeL Charset ( ) ) ;
rank: 917
score: 98.9228271484375
patch: case $STRING$ : break ; } break ; }
rank: 917
score: 98.91986638849431
patch: case $STRING$ : String . append ( c ) ;
rank: 917
score: 98.78519984654018
patch: case 1 : return $STRING$ ;
rank: 918
score: 99.18118722098214
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( singlequote CaMeL Escape , c ) ) ;
rank: 918
score: 98.98438609730114
patch: case CASE : sb . append ( $STRING$ ) ;
rank: 918
score: 98.9145751953125
patch: i . append ( $STRING$ ) ; break ;
rank: 918
score: 98.79286193847656
patch: case $STRING$ : break ; $STRING$ :
rank: 918
score: 98.78354899088542
patch: break ; . append ( $STRING$ ) ;
rank: 918
score: 98.70465087890625
patch: case $STRING$ : return new ) ;
rank: 919
score: 99.1811463891006
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( , doublequote CaMeL Escape ) ) ;
rank: 919
score: 99.17487041766827
patch: append ( sb . char CaMeL At ( i ) ) ;
rank: 919
score: 99.0453213778409
patch: case s . char CaMeL At ( i ) :
rank: 919
score: 98.91419813368056
patch: break . to CaMeL String ( ) ;
rank: 919
score: 98.79003228081598
patch: case $STRING$ : break ; $STRING$ break ;
rank: 919
score: 98.783447265625
patch: case Token . $STRING$ : { break ;
rank: 920
score: 99.18087332589286
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( sb . to CaMeL String ( ) ) ;
rank: 920
score: 99.1736591045673
patch: case $STRING$ finally { sb . append ( c ) ; }
rank: 920
score: 99.03919566761364
patch: case $NUMBER$ : s . append ( $STRING$ ) ;
rank: 920
score: 98.98046875
patch: case $STRING$ : sb . append ( SIZE ) ;
rank: 920
score: 98.90738525390626
patch: case $STRING$ : break ; } } break ;
rank: 920
score: 98.88983154296875
patch: case $STRING$ :
rank: 920
score: 98.78480360243056
patch: case $STRING$ : for ( { break ;
rank: 920
score: 98.78030734592014
patch: ; sb . append ( $STRING$ ) ;
rank: 920
score: 98.69309779575893
patch: case 0 : return $STRING$ ;
rank: 921
score: 99.17986188616071
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . to CaMeL String ( singlequote CaMeL Escape ) ) ; break ;
rank: 921
score: 98.9797030362216
patch: case $STRING$ : charset . append ( $STRING$ ) ;
rank: 921
score: 98.90475463867188
patch: Lower . append ( $STRING$ ) ; break ;
rank: 921
score: 98.88407592773437
patch: case $STRING$ : return quote ; case $STRING$ :
rank: 921
score: 98.7847900390625
patch: case $STRING$ : $STRING$ ; break ;
rank: 921
score: 98.77779812282986
patch: case $NUMBER$ : case $STRING$ : break ;
rank: 921
score: 98.68538665771484
patch: case $STRING$ : break + $STRING$ ;
rank: 922
score: 99.17916944550305
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String ( ) , sb ) ; }
rank: 922
score: 98.97931463068181
patch: case VAR : sb . append ( $STRING$ ) ;
rank: 922
score: 98.87094116210938
patch: case $STRING$ : { break ; case $STRING$ :
rank: 922
score: 98.78110080295139
patch: case $NUMBER$ : System . ; break ;
rank: 922
score: 98.77731662326389
patch: case $NUMBER$ : if ( break $STRING$ ;
rank: 922
score: 98.67135620117188
patch: case $STRING$ : throw $STRING$ ; }
rank: 923
score: 99.1790146246189
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb . to CaMeL String ( ) , s ) ; }
rank: 923
score: 99.02656693892045
patch: case $NUMBER$ : break ; case $NUMBER$ : break ;
rank: 923
score: 98.901025390625
patch: sb . append ( $STRING$ ) ; } ;
rank: 923
score: 98.86808946397569
patch: switch ( charset ) { case $STRING$ :
rank: 923
score: 98.77877044677734
patch: case STRING : break ; break ;
rank: 923
score: 98.76980251736111
patch: * sb . append ( $STRING$ ) ;
rank: 924
score: 99.17815120045732
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder , output CaMeL Charset CaMeL Encoder , doublequote CaMeL Escape ) ;
rank: 924
score: 99.02630060369319
patch: case $STRING$ : format . append ( $STRING$ ) ;
rank: 924
score: 98.89810180664062
patch: / * sb . append ( $STRING$ ) ;
rank: 924
score: 98.86463012695313
patch: case $STRING$ : return break ; case $STRING$ :
rank: 924
score: 98.76685248480902
patch: case $STRING$ : throw new $STRING$ ) ;
rank: 924
score: 98.66275787353516
patch: case - 1 : case $STRING$ :
rank: 925
score: 99.17786225818452
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder , output CaMeL Charset CaMeL Encoder ) ;
rank: 925
score: 98.97496448863636
patch: case OR : sb . append ( $STRING$ ) ;
rank: 925
score: 98.77025010850694
patch: case $STRING$ : sb ; ; break ;
rank: 925
score: 98.7637939453125
patch: i = $STRING$ ; break ;
rank: 925
score: 98.65653773716518
patch: case $NUMBER$ : case $NUMBER$ :
rank: 926
score: 99.17678163109755
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . str CaMeL Escape , singlequote CaMeL Escape ) ; break ;
rank: 926
score: 99.146728515625
patch: case s . char CaMeL At ( i ) ;
rank: 926
score: 98.76830182756696
patch: case $STRING$ : throw $STRING$ ;
rank: 926
score: 98.65271759033203
patch: case $STRING$ : { return $STRING$ ;
rank: 927
score: 99.1767810639881
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( Charset CaMeL Encoder . can CaMeL Encode ( c ) ) ; }
rank: 927
score: 99.14323286576705
patch: case $STRING$ : sb . append ( break ) ;
rank: 927
score: 99.00641424005681
patch: ) sb . append ( $STRING$ ) ; break ;
rank: 927
score: 98.9724454012784
patch: case $STRING$ : sb . substring ( $STRING$ ) ;
rank: 927
score: 98.83587646484375
patch: case ( c ) { case $STRING$ :
rank: 927
score: 98.76246643066406
patch: case $STRING$ : if ( break ;
rank: 927
score: 98.64789581298828
patch: case $STRING$ : c = $STRING$ ;
rank: 928
score: 99.17661490091463
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( $STRING$ ) ;
rank: 928
score: 98.88641967773438
patch: case $STRING$ + $STRING$ : break ; break ;
rank: 928
score: 98.82947998046875
patch: case : sb . append ( c ) ;
rank: 928
score: 98.76200103759766
patch: case $NUMBER$ : return $STRING$ ; ;
rank: 928
score: 98.64505767822266
patch: case - 1 : return $STRING$ ;
rank: 929
score: 99.17659108231707
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . str CaMeL Escape ) ; sb . append ( $STRING$ ) ;
rank: 929
score: 98.97002618963069
patch: case $STRING$ : sb . remove ( $STRING$ ) ;
rank: 929
score: 98.87841796875
patch: break ; } break ; }
rank: 929
score: 98.82473754882812
patch: case ( $STRING$ : break ; case $STRING$ :
rank: 929
score: 98.76544952392578
patch: append ( 0 ) ; break ;
rank: 930
score: 99.17636480564025
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( backslash CaMeL Escape . to CaMeL String ( ) ) ; }
rank: 930
score: 99.1342264811198
patch: case $STRING$ finally { sb . append ( c ) ;
rank: 930
score: 98.87110053168402
patch: break ; } case $STRING$ : break ;
rank: 930
score: 98.8089599609375
patch: case : sb . append ( quote ) ;
rank: 930
score: 98.76427544487848
patch: case $STRING$ : break ; break ; }
rank: 930
score: 98.76038953993056
patch: case 1 : return $STRING$ ; break ;
rank: 930
score: 98.63883972167969
patch: case $STRING$ ) : return $STRING$ ;
rank: 931
score: 98.968017578125
patch: case INSTANCEOF : sb . append ( $STRING$ ) ;
rank: 931
score: 98.87067522321429
patch: case $STRING$ : break ; }
rank: 931
score: 98.80281372070313
patch: name = $STRING$ ; break ; case $STRING$ :
rank: 931
score: 98.76378716362848
patch: case $STRING$ : String char = $STRING$ ;
rank: 931
score: 98.75434112548828
patch: break ; break ; case $STRING$ :
rank: 931
score: 98.63197326660156
patch: case $STRING$ : / * break ;
rank: 932
score: 99.17609514508929
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . new CaMeL String ( doublequote CaMeL Escape ) , c ) ;
rank: 932
score: 99.12445623224431
patch: case $STRING$ { sb . append ( c ) ;
rank: 932
score: 99.07619222005208
patch: case $STRING$ : new String ( $STRING$ ) ; break ;
rank: 932
score: 98.86631944444444
patch: buf . append ( $STRING$ ) ; }
rank: 932
score: 98.80235460069444
patch: case $STRING$ : if ( $STRING$ ) {
rank: 932
score: 98.76319715711806
patch: case $STRING$ : sb ) ; break ;
rank: 932
score: 98.62806701660156
patch: case $STRING$ : if ( ; }
rank: 933
score: 99.17478086890245
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder , Charset CaMeL Encoder output CaMeL Charset CaMeL Encoder , c ) ;
rank: 933
score: 98.97838745117187
patch: case $NUMBER$ : return $STRING$ ; case $NUMBER$ :
rank: 933
score: 98.7747802734375
patch: case $STRING$ : switch ( $STRING$ ) {
rank: 933
score: 98.75929768880208
patch: case $STRING$ : String $STRING$ : break ;
rank: 933
score: 98.6237564086914
patch: case $STRING$ : continue ; default :
rank: 934
score: 99.17451404389881
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder ) ; output CaMeL Charset CaMeL Encoder . append ( c ) ; }
rank: 934
score: 98.9670077237216
patch: case $STRING$ : $STRING$ . append ( c ) ;
rank: 934
score: 98.74256049262152
patch: case $STRING$ : if ( quote ) {
rank: 934
score: 98.73542022705078
patch: case $NUMBER$ : try { break ;
rank: 934
score: 98.61890411376953
patch: case $STRING$ : case $STRING$ : ;
rank: 935
score: 99.17410799352135
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( Charset CaMeL Encoder . str CaMeL Escape , c ) ; }
rank: 935
score: 99.05159505208333
patch: case $STRING$ : . append ( c ) ; break ;
rank: 935
score: 98.95538330078125
patch: case $STRING$ : if ( c == $STRING$ )
rank: 935
score: 98.83449978298611
patch: buffer . append ( $STRING$ ) ; }
rank: 935
score: 98.75645446777344
patch: append ( sb ) ; break ;
rank: 935
score: 98.73421902126736
patch: length ( c ) { case $STRING$ :
rank: 935
score: 98.61629813058036
patch: case $STRING$ : case $STRING$ ;
rank: 936
score: 98.96494362571023
patch: case GT : sb . append ( $STRING$ ) ;
rank: 936
score: 98.83154296875
patch: break . trim ( ) ; break ;
rank: 936
score: 98.71974012586806
patch: case ( ( char ) $STRING$ ) :
rank: 936
score: 98.71922810872395
patch: case $STRING$ : break ;
rank: 937
score: 99.17036365327381
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( doublequote CaMeL Escape . to CaMeL String ( ) ) ; }
rank: 937
score: 98.75176323784723
patch: case $STRING$ : $STRING$ : ; break ;
rank: 937
score: 98.71421305338542
patch: case $STRING$ : sb , c ) ;
rank: 937
score: 98.6124496459961
patch: case $STRING$ : s += $STRING$ ;
rank: 938
score: 99.10838734019886
patch: case ) { sb . append ( $STRING$ ) ;
rank: 938
score: 98.82489691840277
patch: sb . close ( ) ; break ;
rank: 938
score: 98.75046212332589
patch: case $STRING$ : ; break ;
rank: 938
score: 98.71640014648438
patch: case 1 : return $STRING$ ; ;
rank: 938
score: 98.60107421875
patch: case $STRING$ : n += $STRING$ ;
rank: 939
score: 98.96337890625
patch: case $STRING$ + s . append ( $STRING$ ) ;
rank: 939
score: 98.93425835503473
patch: case $STRING$ : default : break ; }
rank: 939
score: 98.82431369357639
patch: result . append ( $STRING$ ) ; }
rank: 939
score: 98.75019666883681
patch: case $STRING$ : String sb = 0 ;
rank: 939
score: 98.7039794921875
patch: end ( $STRING$ ) ; break ;
rank: 939
score: 98.70153130425348
patch: case $STRING$ : if ( c ) {
rank: 940
score: 99.16622488839286
patch: case $STRING$ : sb . append ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( $STRING$ ) ; sb . append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( c ) ; }
rank: 940
score: 98.9629794034091
patch: case $STRING$ : sb = ( char ) $STRING$ ;
rank: 940
score: 98.81458197699652
patch: break . length ( ) ; break ;
rank: 940
score: 98.74977620442708
patch: case $STRING$ : String sb = $STRING$ )
rank: 940
score: 98.68990325927734
patch: case 1 : try { break ;
rank: 940
score: 98.5858383178711
patch: case $STRING$ : return s ; }
rank: 941
score: 98.9627685546875
patch: case $STRING$ : sb . append ( chars ) ;
rank: 941
score: 98.81012725830078
patch: case $STRING$ + $STRING$ ; break ;
rank: 941
score: 98.74750434027777
patch: case $STRING$ : System . { break ;
rank: 941
score: 98.69611952039931
patch: case $STRING$ || c < 0 ) {
rank: 942
score: 99.16495768229167
patch: append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( sb , c ) ; } else { append CaMeL Hex CaMeL Java CaMeL Script CaMeL Representation ( output CaMeL Charset CaMeL Encoder . str CaMeL Escape , c ) ;
rank: 942
score: 98.9588290127841
patch: case THIS : sb . append ( $STRING$ ) ;
rank: 942
score: 98.92513427734374
patch: case $STRING$ : sb . append ( c )
rank: 942
score: 98.69068739149306
patch: i ++ ; switch ( c ) {
rank: 942
score: 98.68423461914062
patch: catch ( $STRING$ ) { break ;
rank: 942
score: 98.57032775878906
patch: case $STRING$ : break += $STRING$ ;
rank: 943
score: 99.16473858173077
patch: case PARAMETER : sb . append ( $STRING$ ) ; break ;
rank: 943
score: 98.78509521484375
patch: case $STRING$ : { break ; }
rank: 943
score: 98.68889702690973
patch: case quote : break ; case $STRING$ :
rank: 943
score: 98.6821060180664
patch: case $STRING$ ; break ; break ;
rank: 943
score: 98.56828308105469
patch: case $STRING$ : ; return $STRING$ ;
rank: 944
score: 99.16232534555289
patch: case $STRING$ : sb . append ( $STRING$ ) ; break &
rank: 944
score: 98.95746404474431
patch: case $STRING$ : sb . append ( String ) ;
rank: 944
score: 98.78310139973958
patch: sb . add ( $STRING$ ) ; }
rank: 944
score: 98.74058532714844
patch: case $STRING$ : while ( break ;
rank: 944
score: 98.68623860677083
patch: case $STRING$ : c = ( ) ;
rank: 944
score: 98.68067169189453
patch: case $STRING$ : break ; ; }
rank: 945
score: 98.9574307528409
patch: case $STRING$ : System . println ( $STRING$ ) ;
rank: 945
score: 98.73859998914931
patch: append ( $STRING$ : break ; break ;
rank: 945
score: 98.68623860677083
patch: case $STRING$ : c = $STRING$ ; }
rank: 945
score: 98.56513323102679
patch: case $STRING$ ; case $STRING$ :
rank: 946
score: 98.95728648792614
patch: case XML : sb . append ( $STRING$ ) ;
rank: 946
score: 98.78044891357422
patch: break ; } else { break ;
rank: 946
score: 98.68618435329861
patch: switch ( i ) { case $STRING$ :
rank: 946
score: 98.67045593261719
patch: case $STRING$ : throw new $STRING$ :
rank: 946
score: 98.56330871582031
patch: case $STRING$ : n = $STRING$ ;
rank: 947
score: 99.0895108309659
patch: case $STRING$ ; sb . append ( c ) ;
rank: 947
score: 98.89769829644098
patch: case Character . ) { case $STRING$ :
rank: 947
score: 98.78023274739583
patch: case $STRING$ : break ; else break ;
rank: 947
score: 98.73128509521484
patch: case $STRING$ : continue ; break ;
rank: 947
score: 98.683837890625
patch: b . append ( $STRING$ ) ;
rank: 947
score: 98.66423034667969
patch: break ; append ( $STRING$ ) ;
rank: 947
score: 98.56250871930804
patch: case $STRING$ : if ( ;
rank: 948
score: 98.94325561523438
patch: case $STRING$ : if ( c != $STRING$ )
rank: 948
score: 98.89451293945312
patch: case $STRING$ : final char c = $STRING$ ;
rank: 948
score: 98.72791399274554
patch: case $STRING$ : } break ;
rank: 948
score: 98.67907036675348
patch: byte ( c ) { case $STRING$ :
rank: 948
score: 98.66260637555804
patch: i = 0 ; break ;
rank: 948
score: 98.54765101841518
patch: case $STRING$ : return null ;
rank: 949
score: 98.99235395951705
patch: case $STRING$ : throw ( $STRING$ + c ) ;
rank: 949
score: 98.92282104492188
patch: case $STRING$ : sb . append ( s ;
rank: 949
score: 98.71126883370536
patch: case $STRING$ : return break ;
rank: 949
score: 98.67486572265625
patch: case s . length ( ) :
rank: 949
score: 98.65773010253906
patch: break . append ( $STRING$ ) ;
rank: 949
score: 98.54621124267578
patch: case $STRING$ : i += $STRING$ ;
rank: 950
score: 98.8927490234375
patch: case STRING : case STRING : case STRING :
rank: 950
score: 98.77278645833333
patch: break . start ( ) ; break ;
rank: 950
score: 98.67146809895833
patch: return ( $STRING$ ) ; case $STRING$ :
rank: 950
score: 98.65756661551339
patch: value = $STRING$ ; break ;
rank: 950
score: 98.542724609375
patch: case $STRING$ : return new String ;
rank: 951
score: 98.75894927978516
patch: case $STRING$ : break ; } }
rank: 951
score: 98.66967010498047
patch: case $NUMBER$ : break ; $STRING$ ;
rank: 951
score: 98.65367126464844
patch: buffer . append ( $STRING$ ) ;
rank: 951
score: 98.65055847167969
patch: break ; ; else { break ;
rank: 951
score: 98.52875627790179
patch: case $NUMBER$ : case $STRING$ :
rank: 952
score: 99.04282448508523
patch: case $STRING$ : sb . append ( ( $STRING$ )
rank: 952
score: 98.75015258789062
patch: case $STRING$ + sb ; break ;
rank: 952
score: 98.66948699951172
patch: append ( 1 ) ; break ;
rank: 952
score: 98.64804077148438
patch: warn ( $STRING$ ) ; break ;
rank: 952
score: 98.6401138305664
patch: buf . append ( $STRING$ ) ;
rank: 952
score: 98.52455357142857
patch: case $STRING$ : return line ;
rank: 953
score: 98.88717651367188
patch: case $STRING$ : sb . append ( char CaMeL
rank: 953
score: 98.653076171875
patch: case $STRING$ : throw $NUMBER$ ;
rank: 953
score: 98.63584899902344
patch: break ; case $NUMBER$ : break ;
rank: 954
score: 98.87936062282986
patch: case $STRING$ : sb . append ( (
rank: 954
score: 98.84459771050348
patch: case $NUMBER$ : case $NUMBER$ : break ;
rank: 954
score: 98.65283203125
patch: case $STRING$ : return $NUMBER$ ;
rank: 954
score: 98.63315255301339
patch: s = $STRING$ ; break ;
rank: 954
score: 98.60470581054688
patch: $STRING$ . append ( $STRING$ ) ;
rank: 955
score: 98.87503051757812
patch: * / sb . append ( $STRING$ ) ;
rank: 955
score: 98.83914523654514
patch: break ; case $STRING$ : case $STRING$ :
rank: 955
score: 98.68856375558036
patch: break ; } } break ;
rank: 955
score: 98.6490707397461
patch: case LINE : break ; break ;
rank: 955
score: 98.62955474853516
patch: case 0 : try { break ;
rank: 955
score: 98.60456848144531
patch: text . append ( $STRING$ ) ;
rank: 955
score: 98.49403599330357
patch: case null : return $STRING$ ;
rank: 956
score: 99.1434795673077
patch: case $STRING$ : sb . append ( $STRING$ ) ; break *
rank: 956
score: 98.87135620117188
patch: case $STRING$ : sb . trim ( ) ;
rank: 956
score: 98.62922886439732
patch: break ; $STRING$ ; break ;
rank: 956
score: 98.60208129882812
patch: result . append ( $STRING$ ) ;
rank: 957
score: 99.02644653320313
patch: case $STRING$ : if ( c > 0 )
rank: 957
score: 98.86803588867187
patch: case $STRING$ : sb = backslash CaMeL Escape ;
rank: 957
score: 98.83256700303819
patch: ) sb . append ( $STRING$ ) ;
rank: 957
score: 98.6286392211914
patch: case 0 : break ; break ;
rank: 957
score: 98.54145812988281
patch: b . append ( quote ) ;
rank: 957
score: 98.47345842633929
patch: case 0 : case 1 :
rank: 958
score: 98.82328287760417
patch: case $STRING$ : String $STRING$ = $STRING$ ;
rank: 958
score: 98.68433489118304
patch: } else { break ; }
rank: 958
score: 98.62626647949219
patch: case $STRING$ : { break ; ;
rank: 958
score: 98.53544616699219
patch: case $STRING$ : backslash CaMeL Escape ;
rank: 958
score: 98.46843610491071
patch: case $STRING$ : return new ;
rank: 959
score: 99.01838822798295
patch: case ) { sb . append ( c ) ;
rank: 959
score: 98.80811225043402
patch: case $STRING$ : String s = $STRING$ ;
rank: 959
score: 98.68118286132812
patch: append ( c ) ; break ;
rank: 959
score: 98.5136947631836
patch: case String CaMeL Builder . $STRING$ :
rank: 959
score: 98.46497453962054
patch: case NULL : return $STRING$ ;
rank: 960
score: 99.08931477864583
patch: case $STRING$ : if ( c != $STRING$ ) break ;
rank: 960
score: 98.63799176897321
patch: append ( ) ; break ;
rank: 960
score: 98.46415492466518
patch: case 1 : case $NUMBER$ :
rank: 961
score: 98.67462158203125
patch: case $STRING$ : break $STRING$ ; }
rank: 961
score: 98.63773018973214
patch: case $NUMBER$ : { break ;
rank: 961
score: 98.50725555419922
patch: buffer . append ( quote ) ;
rank: 961
score: 98.45041329520089
patch: case - 1 : break ;
rank: 962
score: 98.84216918945313
patch: case $STRING$ ++ sb . length ( ) ;
rank: 962
score: 98.78617350260417
patch: case STRING : break ; case STRING :
rank: 962
score: 98.67097473144531
patch: case $STRING$ case $STRING$ : break ;
rank: 962
score: 98.63359069824219
patch: case $NUMBER$ : sb ; break ;
rank: 962
score: 98.50422668457031
patch: buf . append ( quote ) ;
rank: 962
score: 98.42504010881696
patch: case $STRING$ : i ++ ;
rank: 963
score: 99.00921075994319
patch: case s . append ( $STRING$ ) ; break ;
rank: 963
score: 98.84141845703125
patch: case $STRING$ : c = backslash CaMeL Escape ;
rank: 963
score: 98.78507486979167
patch: case $NUMBER$ : char c = $STRING$ ;
rank: 963
score: 98.66813659667969
patch: case $STRING$ : break ; * /
rank: 963
score: 98.62702178955078
patch: case $STRING$ : String = $STRING$ ;
rank: 963
score: 98.58285086495536
patch: ch = $STRING$ ; break ;
rank: 963
score: 98.48260498046875
patch: case ) { case $STRING$ :
rank: 963
score: 98.42482212611607
patch: case $STRING$ : * break ;
rank: 964
score: 98.78464084201389
patch: case $STRING$ : case $STRING$ : default :
rank: 964
score: 98.66687774658203
patch: case 0 + $STRING$ : break ;
rank: 964
score: 98.6236801147461
patch: $STRING$ : case $STRING$ : break ;
rank: 964
score: 98.57436697823661
patch: break ; ; case $STRING$ :
rank: 964
score: 98.46323649088542
patch: break ; case $STRING$ :
rank: 964
score: 98.41983468191964
patch: case DEFAULT : return $STRING$ ;
rank: 965
score: 98.79396057128906
patch: case $STRING$ : sb = $STRING$ ;
rank: 965
score: 98.78383382161458
patch: sb . append ( c ) ; }
rank: 965
score: 98.65176827566964
patch: break ; break ; } }
rank: 965
score: 98.62054443359375
patch: append ( $STRING$ : break ;
rank: 965
score: 98.56558663504464
patch: i += $STRING$ ; break ;
rank: 965
score: 98.41335623604911
patch: case $STRING$ : return $STRING$ :
rank: 966
score: 98.99011908637152
patch: case s . append ( $STRING$ ) ;
rank: 966
score: 98.78251817491319
patch: } sb . append ( quote ) ;
rank: 966
score: 98.65062604631696
patch: } case $STRING$ : break ;
rank: 966
score: 98.62035260881696
patch: case STRING : { break ;
rank: 966
score: 98.56327601841518
patch: case STRING : return $STRING$ ;
rank: 967
score: 98.960400390625
patch: case $STRING$ : sb . append ( c ;
rank: 967
score: 98.76039123535156
patch: case $STRING$ : default : break ;
rank: 967
score: 98.64191436767578
patch: case $STRING$ ? 0 : break ;
rank: 967
score: 98.61126708984375
patch: case $NUMBER$ : break ; ;
rank: 967
score: 98.55495779854911
patch: c = $STRING$ ; break ;
rank: 967
score: 98.37838309151786
patch: case - 1 : continue ;
rank: 967
score: 98.2828369140625
patch: return $STRING$ ; case $STRING$ :
rank: 968
score: 98.76198323567708
patch: case $STRING$ : String c = $STRING$ ;
rank: 968
score: 98.63393729073661
patch: append ( $STRING$ ) ; }
rank: 968
score: 98.54129464285714
patch: case case $STRING$ : break ;
rank: 968
score: 98.37645467122395
patch: case $STRING$ : continue ;
rank: 968
score: 98.2750244140625
patch: } else { case $STRING$ :
rank: 969
score: 98.958349609375
patch: case $STRING$ : if ( backslash CaMeL Escape )
rank: 969
score: 98.76043023003473
patch: } sb . append ( c ) ;
rank: 969
score: 98.63172149658203
patch: case $STRING$ > $STRING$ : break ;
rank: 969
score: 98.50880650111607
patch: case 1 : case $STRING$ :
rank: 969
score: 98.37611607142857
patch: case 0 : case $STRING$ :
rank: 969
score: 98.27046421595982
patch: n = backslash CaMeL Escape ;
rank: 970
score: 98.74913024902344
patch: case $STRING$ : sb = c ;
rank: 970
score: 98.6287612915039
patch: case 1 : return $STRING$ ; }
rank: 970
score: 98.54030936104911
patch: case 1 : { break ;
rank: 970
score: 98.50714983258929
patch: case $STRING$ ] ; break ;
rank: 970
score: 98.36929757254464
patch: case $STRING$ ) : continue ;
rank: 970
score: 98.22898356119792
patch: switch ( c ) {
rank: 971
score: 98.85128173828124
patch: case $STRING$ : name = $STRING$ ; break ;
rank: 971
score: 98.72353108723958
patch: case $STRING$ : return backslash CaMeL Escape ;
rank: 971
score: 98.54006522042411
patch: case $STRING$ : else break ;
rank: 971
score: 98.36632428850446
patch: case EOL : return $STRING$ ;
rank: 972
score: 98.83865966796876
patch: case $STRING$ : new String ( $STRING$ ) ;
rank: 972
score: 98.69263458251953
patch: break ; default : break ; }
rank: 972
score: 98.62059783935547
patch: case $STRING$ ] : break ; }
rank: 972
score: 98.36628941127232
patch: case NONE : return $STRING$ ;
rank: 972
score: 98.11658732096355
patch: case $STRING$ ? $STRING$ :
rank: 973
score: 98.83855523003473
patch: case $STRING$ : = $STRING$ ; break ;
rank: 973
score: 98.61845397949219
patch: case 0 : return $STRING$ ; }
rank: 973
score: 98.48630196707589
patch: x = $STRING$ ; break ;
rank: 973
score: 98.36475481305804
patch: case EMPTY : return $STRING$ ;
rank: 973
score: 98.07725016276042
patch: case ( c ) :
rank: 974
score: 98.71041531032986
patch: case $STRING$ : append ( c ) ;
rank: 974
score: 98.61792864118304
patch: case $STRING$ ] : break ;
rank: 974
score: 98.47869873046875
patch: case LINE : return $STRING$ ;
rank: 974
score: 98.36424037388393
patch: case 0 : case $NUMBER$ :
rank: 974
score: 98.01949055989583
patch: case $STRING$ + $STRING$ :
rank: 975
score: 98.6980972290039
patch: if ( c != $STRING$ ) {
rank: 975
score: 98.60552106584821
patch: break ; } case $STRING$ ;
rank: 975
score: 98.51760428292411
patch: case 1 : break ; ;
rank: 975
score: 98.35915701729911
patch: case $STRING$ : return value ;
rank: 975
score: 97.98508911132812
patch: case $STRING$ : {
rank: 976
score: 98.66925811767578
patch: case $STRING$ : if ( break )
rank: 976
score: 98.49626813616071
patch: case - $STRING$ : break ;
rank: 976
score: 98.46964808872768
patch: index = $STRING$ ; break ;
rank: 976
score: 97.84649047851562
patch: case - 1 :
rank: 977
score: 98.8920654296875
patch: $STRING$ : sb . append ( c ) ;
rank: 977
score: 98.57706996372768
patch: break ; else break ; }
rank: 977
score: 98.49449811662946
patch: $STRING$ : break ; break ;
rank: 977
score: 98.45921979631696
patch: break ; $STRING$ : break ;
rank: 977
score: 98.3502197265625
patch: case $STRING$ : case $NUMBER$ :
rank: 977
score: 97.83346557617188
patch: case ( $STRING$ :
rank: 978
score: 98.55814906529018
patch: else { break ; } }
rank: 978
score: 98.48908342633929
patch: case $STRING$ : break ; )
rank: 978
score: 98.34754289899554
patch: case $STRING$ : continue $STRING$ ;
rank: 978
score: 97.76089477539062
patch: case $NUMBER$ :
rank: 979
score: 98.73908148871527
patch: case $STRING$ : return str CaMeL Escape ;
rank: 979
score: 98.63108825683594
patch: case $STRING$ : switch ( c )
rank: 979
score: 98.5556640625
patch: case $STRING$ ; return $STRING$ ;
rank: 979
score: 98.48821149553571
patch: case LINE : { break ;
rank: 979
score: 98.45407540457589
patch: case $STRING$ : break ; *
rank: 979
score: 98.34446498325893
patch: case $STRING$ : continue ; }
rank: 979
score: 97.72720336914062
patch: case $STRING$ : :
rank: 980
score: 98.73473442925348
patch: case $STRING$ : if ( c == )
rank: 980
score: 98.64710344587054
patch: case STRING : case STRING :
rank: 980
score: 98.61241149902344
patch: case $STRING$ : ( $STRING$ ) ;
rank: 980
score: 98.55483572823661
patch: break case $STRING$ : break ;
rank: 980
score: 98.48285784040179
patch: case $STRING$ : try break ;
rank: 980
score: 98.34272112165179
patch: case $STRING$ : throw new ;
rank: 980
score: 97.71982421875
patch: switch ( c )
rank: 981
score: 98.79252115885417
patch: case sb . append ( $STRING$ ) ;
rank: 981
score: 98.71038818359375
patch: case $STRING$ : throw new ) ;
rank: 981
score: 98.62555803571429
patch: case $STRING$ : -- i ;
rank: 981
score: 98.46953473772321
patch: case $STRING$ : return 1 ;
rank: 981
score: 98.33694893973214
patch: case $STRING$ : break break ;
rank: 981
score: 97.69326782226562
patch: case quote :
rank: 982
score: 98.61685943603516
patch: case $STRING$ : case $STRING$ : }
rank: 982
score: 98.5777587890625
patch: append ( sb , $STRING$ ) ;
rank: 982
score: 98.46339634486607
patch: case $STRING$ : return 0 ;
rank: 982
score: 98.33681815011161
patch: case $STRING$ ; ; break ;
rank: 982
score: 97.66622924804688
patch: case - $NUMBER$ :
rank: 983
score: 98.88644409179688
patch: case $STRING$ : sb . append ( quote ;
rank: 983
score: 98.78084309895833
patch: case s . append ( c ) ;
rank: 983
score: 98.57386016845703
patch: case $STRING$ : if ( s .
rank: 983
score: 98.46173967633929
patch: case $NUMBER$ : throw $STRING$ ;
rank: 983
score: 98.44739641462054
patch: end ( ) ; break ;
rank: 983
score: 98.33626883370536
patch: case $STRING$ : return charset ;
rank: 983
score: 97.64973449707031
patch: case s :
rank: 984
score: 98.87789916992188
patch: case $STRING$ : break ? $STRING$ : $STRING$ ;
rank: 984
score: 98.77943250868056
patch: case $STRING$ : sb . append ( ;
rank: 984
score: 98.5701904296875
patch: case $STRING$ : i = $STRING$ ;
rank: 984
score: 98.51872907366071
patch: case $STRING$ ; break ; }
rank: 984
score: 98.46140834263393
patch: case $STRING$ : : break ;
rank: 984
score: 98.33192661830357
patch: case $STRING$ : i -- ;
rank: 984
score: 97.64352416992188
patch: case $STRING$ : }
rank: 985
score: 98.44820731026786
patch: append ( $STRING$ ; break ;
rank: 985
score: 98.32737513950893
patch: case $STRING$ ) : break ;
rank: 985
score: 97.55940246582031
patch: case c :
rank: 986
score: 98.80056423611111
patch: case $STRING$ : sb . append ( backslash
rank: 986
score: 98.54876708984375
patch: case $STRING$ : throw null ;
rank: 986
score: 98.48936244419643
patch: case $STRING$ : case STRING :
rank: 986
score: 98.48117501395089
patch: case $STRING$ : new $STRING$ :
rank: 986
score: 98.44729178292411
patch: case $STRING$ : break ; String
rank: 986
score: 98.32695661272321
patch: case $STRING$ : ; continue ;
rank: 986
score: 97.42581939697266
patch: case 0 :
rank: 987
score: 98.44227818080357
patch: case $STRING$ : continue ; ;
rank: 987
score: 97.42283630371094
patch: case ) :
rank: 988
score: 98.48077392578125
patch: break ; } else break ;
rank: 988
score: 98.45450265066964
patch: case $STRING$ : throw c ;
rank: 988
score: 98.44142368861607
patch: case $STRING$ : $STRING$ break ;
rank: 988
score: 98.43094308035714
patch: case $STRING$ : = $STRING$ ;
rank: 988
score: 98.35726928710938
patch: case $NUMBER$ : break ;
rank: 988
score: 97.34357452392578
patch: case ) {
rank: 989
score: 98.66541290283203
patch: case $STRING$ : c = c ;
rank: 989
score: 98.6309814453125
patch: case $STRING$ : break ; case $STRING$
rank: 989
score: 98.47385951450893
patch: i ++ ; break ; }
rank: 989
score: 98.44089181082589
patch: append += $STRING$ ; break ;
rank: 989
score: 98.31357828776042
patch: case $STRING$ ; break ;
rank: 989
score: 98.31276157924107
patch: case $STRING$ : break c ;
rank: 989
score: 97.32762908935547
patch: case 1 :
rank: 990
score: 98.44911411830357
patch: case $STRING$ : ++ i ;
rank: 990
score: 98.2716776529948
patch: case 1 : break ;
rank: 990
score: 98.19631958007812
patch: case $STRING$ : * /
rank: 990
score: 97.27314758300781
patch: case NOT :
rank: 991
score: 98.58549499511719
patch: case $STRING$ : if ( ( c
rank: 991
score: 98.46262032645089
patch: append ( c ) ; }
rank: 991
score: 97.14387512207031
patch: case ERROR :
rank: 992
score: 98.45588030133929
patch: break $STRING$ ; } break ;
rank: 992
score: 98.21273803710938
patch: case 0 : break ;
rank: 992
score: 97.64629364013672
patch: case $STRING$ ;
rank: 992
score: 97.135009765625
patch: case TRUE :
rank: 993
score: 98.461181640625
patch: case $STRING$ : if ( backslash
rank: 993
score: 98.45566231863839
patch: append ( sb ) ; }
rank: 993
score: 98.39077322823661
patch: case $STRING$ : return name ;
rank: 993
score: 98.19883219401042
patch: case STRING : break ;
rank: 993
score: 97.13360595703125
patch: case STRING :
rank: 994
score: 98.44124930245536
patch: case $STRING$ : if ( c
rank: 994
score: 98.32517787388393
patch: case $STRING$ : new $STRING$ ;
rank: 994
score: 98.31329345703125
patch: break ; } break ;
rank: 994
score: 98.07134399414062
patch: break ; $STRING$ ;
rank: 994
score: 97.8573486328125
patch: break ; break ;
rank: 994
score: 97.11697387695312
patch: case null :
rank: 995
score: 96.70086669921875
patch: case :
rank: 996
score: 98.2188212076823
patch: break ; break ; }
rank: 996
score: 98.14100138346355
patch: case $STRING$ : System .
rank: 996
score: 97.01481628417969
patch: case LINE :
rank: 996
score: 96.3592529296875
patch: break ;
rank: 997
score: 98.21646118164062
patch: break ; }
rank: 997
score: 96.9981918334961
patch: case EOL :
rank: 997
score: 96.34732055664062
patch: default :
rank: 998
score: 97.68599853515624
patch: case $STRING$ : i
rank: 998
score: 97.65447387695312
patch: case $STRING$ : ;
rank: 998
score: 97.47058868408203
patch: } break ;
rank: 998
score: 97.24375915527344
patch: break ; ;
rank: 998
score: 97.17168426513672
patch: case DEFAULT :
rank: 998
score: 96.93539428710938
patch: case $STRING$ )
rank: 998
score: 96.77266438802083
patch: case $STRING$
rank: 998
score: 96.16518147786458
patch: $STRING$ :
rank: 999
score: 96.00583902994792
patch: case )
rank: 999
score: 94.94135284423828
patch: case
rank: 1000
score: 96.90299224853516
patch: case NULL :
rank: 1000
score: 94.91371154785156
patch: }
