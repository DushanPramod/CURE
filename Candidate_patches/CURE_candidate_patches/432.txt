rank: 1
score: 99.80855305989583
patch: continue ;
rank: 1
score: 99.67308134191177
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 1
score: 99.55746459960938
patch: return false ;
rank: 1
score: 99.31541748046875
patch: continue ; continue ;
rank: 2
score: 99.58085704985119
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 2
score: 99.48251003689236
patch: return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 2
score: 99.48015747070312
patch: if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 2
score: 99.45777893066406
patch: return continue ;
rank: 2
score: 99.3277359008789
patch: continue ; }
rank: 2
score: 99.24962158203125
patch: continue { continue ;
rank: 2
score: 99.20597330729167
patch: throw new Runtime CaMeL Exception ( $STRING$ ;
rank: 3
score: 99.47767398231908
patch: if ( is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 3
score: 99.45296478271484
patch: return true ;
rank: 3
score: 99.36940511067708
patch: continue ; if continue ;
rank: 3
score: 99.23858642578125
patch: continue * /
rank: 3
score: 99.21036783854167
patch: continue { continue ; }
rank: 3
score: 99.14885796440973
patch: throw new Runtime CaMeL Exception ( ) ;
rank: 4
score: 99.55961528577302
patch: return parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 4
score: 99.44805297851562
patch: if ( parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ) {
rank: 4
score: 99.35404459635417
patch: if continue ; continue ;
rank: 4
score: 99.1912841796875
patch: else { continue ; }
rank: 4
score: 99.17832438151042
patch: return ;
rank: 4
score: 99.09945242745536
patch: continue ; } if ( ;
rank: 4
score: 99.09686279296875
patch: throw new Runtime CaMeL Exception ( ;
rank: 5
score: 99.5500424033717
patch: return this . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 5
score: 99.49732881433823
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref ) ;
rank: 5
score: 99.37781439887152
patch: super . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 5
score: 99.28288269042969
patch: if continue ;
rank: 5
score: 99.15137481689453
patch: return null ;
rank: 5
score: 99.08466254340277
patch: throw new Assertion CaMeL Error ( ) ;
rank: 5
score: 99.0789794921875
patch: continue ; } * /
rank: 6
score: 99.51564331054688
patch: return gramps . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 6
score: 99.4956916360294
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent ) ;
rank: 6
score: 99.43204752604167
patch: if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 6
score: 99.27256774902344
patch: continue ; continue ; if continue ;
rank: 6
score: 99.13257853190105
patch: } else if continue ;
rank: 6
score: 99.00521240234374
patch: if ( continue )
rank: 6
score: 99.00492640904018
patch: continue * / return false ;
rank: 7
score: 99.50798882378473
patch: ret = is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 7
score: 99.4284435453869
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref ) ;
rank: 7
score: 99.42639690896739
patch: if ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 7
score: 99.35862972861842
patch: return ref . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 7
score: 99.13351440429688
patch: continue ; continue ; }
rank: 7
score: 99.13193766276042
patch: return false ; continue ;
rank: 7
score: 98.98655482700893
patch: continue ; / * continue ;
rank: 7
score: 98.95772298177083
patch: throw new Illegal CaMeL State CaMeL Exception ;
rank: 8
score: 99.42420543323864
patch: if ( gramps . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 8
score: 99.35552423650569
patch: return ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 8
score: 99.12838309151786
patch: continue ; if ; continue ;
rank: 8
score: 99.1187744140625
patch: } continue ; continue ;
rank: 8
score: 99.03265380859375
patch: return continue ; continue ;
rank: 8
score: 98.95971069335937
patch: continue * / ;
rank: 8
score: 98.88613552517361
patch: throw new Unsupported CaMeL Operation CaMeL Exception ;
rank: 9
score: 99.465908203125
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) ) ;
rank: 9
score: 99.10300903320312
patch: try { continue ;
rank: 9
score: 99.093994140625
patch: continue ; ; if continue ;
rank: 9
score: 99.01082066127232
patch: } else { if continue ;
rank: 9
score: 98.87455919053819
patch: throw new Illegal CaMeL Argument CaMeL Exception ;
rank: 10
score: 99.47932942708333
patch: return gramps . get CaMeL First CaMeL Child ( ) . is CaMeL Getter CaMeL Def ( ) ;
rank: 10
score: 99.44571940104167
patch: return Node CaMeL Util . is CaMeL Statement CaMeL Block ( ref ) ;
rank: 10
score: 99.08278111049107
patch: continue ; continue ; continue ;
rank: 10
score: 99.07403564453125
patch: continue continue ;
rank: 10
score: 98.92276436941964
patch: continue ; } else { ;
rank: 10
score: 98.84114292689732
patch: throw new Runtime CaMeL Exception ;
rank: 11
score: 99.4755795127467
patch: return $STRING$ . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 11
score: 99.41688939144737
patch: return null . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 11
score: 99.4138416108631
patch: if ( parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 11
score: 99.32562255859375
patch: return . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 11
score: 99.06993611653645
patch: try { continue ; }
rank: 11
score: 99.0379638671875
patch: continue ; if continue ; continue ;
rank: 11
score: 98.96552734375
patch: } if continue ;
rank: 11
score: 98.92208862304688
patch: continue ; * /
rank: 12
score: 99.31692665501645
patch: if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) )
rank: 12
score: 99.01601155598958
patch: if continue ; continue ; if continue ;
rank: 12
score: 98.9432373046875
patch: return false ; } continue ;
rank: 12
score: 98.91077532087054
patch: continue * / if ( ;
rank: 13
score: 99.31301645132211
patch: return gramps . get CaMeL Prop ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 13
score: 99.01300920758929
patch: if continue ; if continue ;
rank: 13
score: 98.92645263671875
patch: } else if continue ; continue ;
rank: 13
score: 98.90773010253906
patch: if ( ;
rank: 13
score: 98.80311414930556
patch: throw new Runtime CaMeL Exception ( ; }
rank: 14
score: 99.3017578125
patch: return gramps . is CaMeL Call ( ) ;
rank: 14
score: 99.04798889160156
patch: continue ; ;
rank: 14
score: 99.00273786272321
patch: if continue ; continue ; ;
rank: 14
score: 98.91183907645089
patch: return continue ; } continue ;
rank: 14
score: 98.90766143798828
patch: continue ; } else { continue ;
rank: 14
score: 98.79916042751736
patch: throw new Assertion CaMeL Error ( $STRING$ ;
rank: 15
score: 99.45652369449013
patch: return node . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 15
score: 99.43582286005434
patch: return gramps . get CaMeL First CaMeL Child ( ) == parent . get CaMeL First CaMeL Child ( ) ;
rank: 15
score: 99.38067948190789
patch: return refs . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 15
score: 99.03228759765625
patch: else { continue ;
rank: 15
score: 98.90642438616071
patch: } if continue ; continue ;
rank: 15
score: 98.90292019314236
patch: continue ; } else { continue ; }
rank: 15
score: 98.78842163085938
patch: continue = true ;
rank: 16
score: 99.45509643554688
patch: return ref . get CaMeL First CaMeL Child ( ) . is CaMeL Getter CaMeL Def ( ) ;
rank: 16
score: 99.37724223889802
patch: return super . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 16
score: 99.34952585320724
patch: return target . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 16
score: 98.99296569824219
patch: value . continue ; if continue ;
rank: 16
score: 98.97856903076172
patch: continue ; continue ; } continue ;
rank: 16
score: 98.90279715401786
patch: return false ; continue ; }
rank: 16
score: 98.89737374441964
patch: continue * / return true ;
rank: 16
score: 98.75437418619792
patch: if ( ; continue ;
rank: 17
score: 99.44883326480263
patch: ret = ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 17
score: 99.4309375
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Assigned CaMeL Value ( ) ) ;
rank: 17
score: 99.36965506417411
patch: if ( parent . is CaMeL Get CaMeL Prop ( ) ) {
rank: 17
score: 98.98292541503906
patch: } continue ;
rank: 17
score: 98.9586181640625
patch: continue ; continue ; if ;
rank: 17
score: 98.89012145996094
patch: continue ; / * continue * /
rank: 17
score: 98.87967936197917
patch: return null ; continue ;
rank: 17
score: 98.75421142578125
patch: throw new Runtime CaMeL Exception ( $STRING$
rank: 18
score: 99.4448306435033
patch: return type . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 18
score: 99.42361328125
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Assigned CaMeL Value ( ) ) ;
rank: 18
score: 99.36649576822917
patch: if ( is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) )
rank: 18
score: 99.27879749644886
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) ;
rank: 18
score: 98.97954711914062
patch: return false ; ;
rank: 18
score: 98.94834899902344
patch: if continue ; continue ; continue ;
rank: 18
score: 98.88531494140625
patch: continue ; } * / ;
rank: 18
score: 98.86868722098214
patch: * * * * * /
rank: 18
score: 98.74287923177083
patch: continue value CaMeL Of ( continue ) ;
rank: 19
score: 99.417490234375
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL First CaMeL Child ( ) ) ;
rank: 19
score: 99.36601329985119
patch: if ( gramps . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ) {
rank: 19
score: 98.95816802978516
patch: continue { continue ; } continue ;
rank: 19
score: 98.93667263454861
patch: continue ; continue ; if ; continue ;
rank: 19
score: 98.87491280691964
patch: continue ; } return false ;
rank: 19
score: 98.86507742745536
patch: return continue ; continue ; }
rank: 19
score: 98.74217393663194
patch: continue throw new Runtime CaMeL Exception ( ;
rank: 20
score: 99.27161254882813
patch: return ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) ;
rank: 20
score: 98.9457499186198
patch: continue ; ; continue ;
rank: 20
score: 98.93033854166667
patch: continue ; continue ; ;
rank: 20
score: 98.86571393694196
patch: continue ; } catch ( ;
rank: 20
score: 98.8632583618164
patch: } else {
rank: 20
score: 98.73511505126953
patch: logger . error ( $STRING$ ) ;
rank: 21
score: 99.4358142671131
patch: return gramps . get CaMeL First CaMeL Child ( ) . is CaMeL Setter CaMeL Def ( ) ;
rank: 21
score: 99.40428845635776
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Assigned CaMeL Value ( ) ) ;
rank: 21
score: 99.3534647623698
patch: if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref ) ) {
rank: 21
score: 98.94493756975446
patch: } else { continue ; }
rank: 21
score: 98.89647420247395
patch: return ; if continue ;
rank: 21
score: 98.86007690429688
patch: } else { continue ;
rank: 22
score: 99.43275035511364
patch: ret = Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 22
score: 99.4019546508789
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ;
rank: 22
score: 99.35247192382812
patch: if ( ref . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ) {
rank: 22
score: 99.2694921875
patch: return parent . get CaMeL Prop ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 22
score: 98.93410237630208
patch: finally { continue ; }
rank: 22
score: 98.89320203993056
patch: continue ; if continue ; if continue ;
rank: 22
score: 98.85678100585938
patch: return false ; } catch continue ;
rank: 22
score: 98.85238211495536
patch: / * ; ; * /
rank: 22
score: 98.71858723958333
patch: continue log . error ( $STRING$ ) ;
rank: 23
score: 99.4002101732337
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Value ( ) ) ;
rank: 23
score: 98.91714477539062
patch: value . continue ;
rank: 23
score: 98.88337925502232
patch: continue ; continue ; break ;
rank: 23
score: 98.8536376953125
patch: return false ; } else {
rank: 23
score: 98.84694213867188
patch: continue * * /
rank: 23
score: 98.71061706542969
patch: throw new Assertion CaMeL Error ( ;
rank: 24
score: 99.34749702785327
patch: if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) )
rank: 24
score: 99.3264095908717
patch: return VAR . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 24
score: 99.26652388139205
patch: continue . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 24
score: 98.91255696614583
patch: continue { continue ; ;
rank: 24
score: 98.86004638671875
patch: continue ; } continue ;
rank: 24
score: 98.85321044921875
patch: continue * * * * /
rank: 24
score: 98.81814914279514
patch: synchronized ( this ) { continue ; }
rank: 24
score: 98.71035766601562
patch: if ( continue ;
rank: 25
score: 99.42918860394022
patch: return Node CaMeL Util . is CaMeL Statement CaMeL Block ( ref . get CaMeL First CaMeL Child ( ) ) ;
rank: 25
score: 99.3445056733631
patch: if ( this . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 25
score: 99.265205078125
patch: return ref . get CaMeL Prop ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 25
score: 98.85881696428571
patch: if ; continue ; continue ;
rank: 25
score: 98.8511474609375
patch: return false ; }
rank: 25
score: 98.81609235491071
patch: continue ; } / * ;
rank: 25
score: 98.706494140625
patch: continue = false ;
rank: 26
score: 99.39543204471983
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL First CaMeL Child ( ) ) ;
rank: 26
score: 99.34344482421875
patch: if ( parent . get CaMeL First CaMeL Child ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ) {
rank: 26
score: 99.3256603422619
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent ) ;
rank: 26
score: 99.26435289884868
patch: return name . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 26
score: 98.89327239990234
patch: try { continue ; } continue ;
rank: 26
score: 98.84560139973958
patch: return false ; } }
rank: 26
score: 98.70046657986111
patch: throw new Internal CaMeL Error ( ) ;
rank: 27
score: 99.34228515625
patch: if ( parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) )
rank: 27
score: 99.32469593394886
patch: return ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref ) ;
rank: 27
score: 99.26351768092105
patch: return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) ;
rank: 27
score: 98.85024007161458
patch: continue ; ; if continue ; continue ;
rank: 27
score: 98.83873291015625
patch: return continue ; }
rank: 27
score: 98.81324114118304
patch: continue ; } finally { ;
rank: 27
score: 98.69149780273438
patch: report CaMeL Error ( $STRING$ ) ;
rank: 28
score: 99.41284790039063
patch: return ! parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 28
score: 99.39246026400862
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) ) ;
rank: 28
score: 99.26118774414063
patch: return gramps . get CaMeL First CaMeL Child ( ) . is CaMeL Getter CaMeL Def ( )
rank: 28
score: 98.89070129394531
patch: continue { continue ; if continue ;
rank: 28
score: 98.8392562866211
patch: continue ; if ; if continue ;
rank: 28
score: 98.83592006138393
patch: } else { return false ;
rank: 28
score: 98.68446858723958
patch: throw new Runtime CaMeL Exception ( continue ;
rank: 29
score: 99.39178825827206
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( refs ) ;
rank: 29
score: 99.3376131924716
patch: if ( ! parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 29
score: 99.32112630208333
patch: return ref . get CaMeL Node ( ) . is CaMeL Getter CaMeL Def ( ) ;
rank: 29
score: 99.25997220552884
patch: return gramps . is CaMeL Call ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 29
score: 98.88180106026786
patch: } continue ; continue ; }
rank: 29
score: 98.83502197265625
patch: } else return false ;
rank: 29
score: 98.82623291015625
patch: continue ; if continue ; break ;
rank: 29
score: 98.78971644810268
patch: continue ; ; } * /
rank: 29
score: 98.67707824707031
patch: log . error ( $STRING$ ) ;
rank: 30
score: 99.390859375
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL First CaMeL Child ( ) ) ;
rank: 30
score: 99.258095703125
patch: return is CaMeL Get CaMeL Prop ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 30
score: 98.87566375732422
patch: value . continue ; continue ; }
rank: 30
score: 98.81639099121094
patch: if continue ; continue ; break ;
rank: 30
score: 98.67604573567708
patch: throw new Null CaMeL Pointer CaMeL Exception ;
rank: 31
score: 99.40870768229166
patch: return Node CaMeL Util . is CaMeL Statement CaMeL Block ( name ) ;
rank: 31
score: 99.38983832465277
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) == name ) ;
rank: 31
score: 99.33629840353261
patch: if ( ! gramps . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 31
score: 99.31876413445724
patch: return declarations . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 31
score: 99.24834526909723
patch: return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref ) ;
rank: 31
score: 98.82271030970982
patch: if ( continue ; continue ;
rank: 31
score: 98.81049940321181
patch: continue ; continue ; if continue ; }
rank: 31
score: 98.78714425223214
patch: continue ; } return true ;
rank: 31
score: 98.67501831054688
patch: continue ret = true ;
rank: 32
score: 99.40810675370066
patch: return value . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 32
score: 99.38734502377717
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Node ( ) ) ;
rank: 32
score: 99.33286981997283
patch: if ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref ) ) {
rank: 32
score: 99.31705729166667
patch: return this . ref . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 32
score: 98.81736246744792
patch: } else return continue ;
rank: 32
score: 98.80375671386719
patch: continue ; continue ; continue ; }
rank: 32
score: 98.787109375
patch: continue ; / * continue . * /
rank: 33
score: 99.38391644021739
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Node ( ) ) ;
rank: 33
score: 99.33228759765625
patch: if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref ) ) {
rank: 33
score: 99.24273003472223
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) ;
rank: 33
score: 98.80215115017361
patch: continue ; if ; continue ; continue ;
rank: 33
score: 98.78653971354167
patch: System . out . println ( $STRING$ ;
rank: 33
score: 98.66513061523438
patch: if ( continue ) {
rank: 34
score: 99.40589971127717
patch: return Node CaMeL Util . is CaMeL Statement CaMeL Block ( ref . get CaMeL Assigned CaMeL Value ( ) ) ;
rank: 34
score: 99.33014787946429
patch: if ( ! parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ) {
rank: 34
score: 99.31011284722223
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Node ( ) ) ;
rank: 34
score: 98.8694356282552
patch: return true ; continue ;
rank: 34
score: 98.80419158935547
patch: } else { return false ; }
rank: 34
score: 98.79717145647321
patch: return continue ; if continue ;
rank: 34
score: 98.7862548828125
patch: continue ; / * ;
rank: 35
score: 99.40557570684524
patch: return this . parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 35
score: 99.38205482219827
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Assigned CaMeL Value ( ) ) ;
rank: 35
score: 99.32963634672619
patch: if ( gramps . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) )
rank: 35
score: 99.24130088404605
patch: return ( is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) ;
rank: 35
score: 98.79229058159723
patch: continue ; continue ; } if continue ;
rank: 35
score: 98.78572591145833
patch: return this . continue ;
rank: 35
score: 98.77935791015625
patch: continue ; * continue * /
rank: 35
score: 98.65010288783482
patch: if ( continue && continue )
rank: 36
score: 99.380966796875
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Assigned CaMeL Value ( ) ) ;
rank: 36
score: 99.32831365411931
patch: if ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) )
rank: 36
score: 98.86857386997768
patch: } continue ; if continue ;
rank: 36
score: 98.78815569196429
patch: if continue ; continue ; }
rank: 36
score: 98.7825927734375
patch: return false ; } catch ;
rank: 36
score: 98.77662876674107
patch: continue * / continue ; }
rank: 36
score: 98.64984809027777
patch: if ( continue ) { continue ; }
rank: 37
score: 99.23681640625
patch: code . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 37
score: 98.86240844726562
patch: continue ; ; ;
rank: 37
score: 98.78204345703125
patch: continue ; continue ; while continue ;
rank: 37
score: 98.77579171316964
patch: continue ; / * * /
rank: 38
score: 99.38001069568452
patch: return gramps . get CaMeL First CaMeL Child ( ) . is CaMeL Get CaMeL Prop ( ) ;
rank: 38
score: 99.32078150699013
patch: if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ) {
rank: 38
score: 98.85981096540179
patch: else continue ; continue ; }
rank: 38
score: 98.78139241536458
patch: continue ; if continue ; continue ; }
rank: 38
score: 98.77719116210938
patch: return false ; } } continue ;
rank: 38
score: 98.77024623325893
patch: continue ; ; } else {
rank: 38
score: 98.64586530412946
patch: if ( continue ) continue ;
rank: 39
score: 99.40289306640625
patch: ret = parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 39
score: 99.31959170386905
patch: if ( ref . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 39
score: 99.30591430664063
patch: return ref . get CaMeL First CaMeL Child ( ) . is CaMeL Setter CaMeL Def ( ) ;
rank: 39
score: 98.85761369977679
patch: return false ; continue ; ;
rank: 39
score: 98.7770263671875
patch: } else if ;
rank: 39
score: 98.77212088448661
patch: continue ; } if continue ;
rank: 39
score: 98.769775390625
patch: continue ; } / * continue ;
rank: 39
score: 98.63927350725446
patch: continue = true ; continue ;
rank: 40
score: 99.40284365699405
patch: return ( parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) ;
rank: 40
score: 99.23150956003289
patch: return ! ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 40
score: 98.77672467912946
patch: return continue ; } else {
rank: 40
score: 98.77135358537946
patch: / if continue ; continue ;
rank: 40
score: 98.76893107096355
patch: continue * / * /
rank: 40
score: 98.63735622829861
patch: throw new Runtime CaMeL Exception ( ; ;
rank: 41
score: 99.37109375
patch: return . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) ) ;
rank: 41
score: 99.3158846768466
patch: if ( ! this . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 41
score: 99.23056862571023
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref ) ) ;
rank: 41
score: 98.8382568359375
patch: continue ; ; continue ; }
rank: 41
score: 98.77571868896484
patch: return continue ; } catch continue ;
rank: 41
score: 98.76866658528645
patch: continue ; if ( ;
rank: 41
score: 98.76747639973958
patch: continue ; continue ; else
rank: 41
score: 98.6370849609375
patch: if ( ; return continue ;
rank: 42
score: 99.31542358398437
patch: if ( parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) )
rank: 42
score: 99.22783868963069
patch: exception . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 42
score: 98.7733154296875
patch: return false ; } return false ;
rank: 42
score: 98.63651529947917
patch: continue value = continue ;
rank: 43
score: 99.36730085100446
patch: return gramps . get CaMeL First CaMeL Child ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 43
score: 99.31350226151316
patch: if ( is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref ) ) {
rank: 43
score: 98.8319803873698
patch: continue { if continue ;
rank: 43
score: 98.77330671037946
patch: continue * * * / }
rank: 43
score: 98.76394992404514
patch: if ( name . equals ( $STRING$ ;
rank: 43
score: 98.75878143310547
patch: continue ; continue ; for continue ;
rank: 43
score: 98.63011169433594
patch: throw new Error ( $STRING$ ) ;
rank: 44
score: 99.39451197574013
patch: return scope . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 44
score: 99.31301645132211
patch: if ( gramps . is CaMeL Call ( ) ) {
rank: 44
score: 99.2224609375
patch: return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , name ) ;
rank: 44
score: 98.83187866210938
patch: try { continue ; ;
rank: 44
score: 98.76390923394098
patch: synchronized ( ; ) { continue ; }
rank: 44
score: 98.75678168402777
patch: if continue ; continue ; for continue ;
rank: 45
score: 99.39020406788794
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Assigned CaMeL Value ( ) ) ;
rank: 45
score: 99.36552097486413
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Node ( ) ) ;
rank: 45
score: 99.31263799252717
patch: return ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) ;
rank: 45
score: 99.22239854600694
patch: super . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) .
rank: 45
score: 98.82414245605469
patch: value . continue ; } continue ;
rank: 45
score: 98.76353963216145
patch: continue ; } else {
rank: 45
score: 98.7608642578125
patch: continue * * / continue ;
rank: 45
score: 98.75546700613839
patch: continue ; if continue ; ;
rank: 45
score: 98.62520345052083
patch: continue ret = false ;
rank: 46
score: 99.38913302951389
patch: result = is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 46
score: 99.36449133831522
patch: return gramps . get CaMeL First CaMeL Child ( ) != parent . get CaMeL First CaMeL Child ( ) ;
rank: 46
score: 99.310478515625
patch: return ref . get CaMeL Node ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 46
score: 99.29553674768519
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Parent ( ) ) ;
rank: 46
score: 99.22190755208334
patch: return gramps . get CaMeL First CaMeL Child ( ) == parent ;
rank: 46
score: 98.82367553710938
patch: continue continue ; ;
rank: 46
score: 98.75642903645833
patch: break ;
rank: 46
score: 98.75465393066406
patch: continue ; ; if ; continue ;
rank: 46
score: 98.6229248046875
patch: throw new Internal CaMeL Error ( $STRING$ ;
rank: 47
score: 99.38662880345395
patch: return n . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 47
score: 99.31016188401442
patch: if ( ! Node CaMeL Util . is CaMeL Statement CaMeL Block ( ref . get CaMeL First CaMeL Child ( ) ) ) {
rank: 47
score: 99.29511854383681
patch: return ref . get CaMeL Parent ( ) . is CaMeL Getter CaMeL Def ( ) ;
rank: 47
score: 99.22130126953125
patch: return parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) ;
rank: 47
score: 98.81447056361607
patch: continue continue ; continue ; }
rank: 47
score: 98.75608825683594
patch: } else { if ; continue ;
rank: 47
score: 98.75202941894531
patch: if ; continue ; if continue ;
rank: 47
score: 98.61872100830078
patch: if ( continue ) return false ;
rank: 48
score: 99.38575744628906
patch: return ! Node CaMeL Util . is CaMeL Statement CaMeL Block ( ref ) ;
rank: 48
score: 99.35895244891827
patch: return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) ) ;
rank: 48
score: 99.30971891983695
patch: for ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 48
score: 98.8123291015625
patch: finally { continue ;
rank: 48
score: 98.75687081473214
patch: continue ; } else continue ;
rank: 48
score: 98.7557373046875
patch: return false ; continue ; continue ;
rank: 48
score: 98.74723597935268
patch: return if continue ; continue ;
rank: 48
score: 98.61579047309027
patch: throw new Runtime CaMeL Exception ( name ;
rank: 49
score: 99.30780436197917
patch: if ( gramps . is CaMeL Get CaMeL Prop ( ) ) {
rank: 49
score: 99.29256863064236
patch: return ref . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ;
rank: 49
score: 99.21944754464286
patch: continue . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) )
rank: 49
score: 98.81026785714286
patch: continue { continue ; } ;
rank: 49
score: 98.75191824776786
patch: continue ; ; } finally {
rank: 49
score: 98.74618966238839
patch: continue ; if continue ; }
rank: 49
score: 98.61483764648438
patch: continue get CaMeL Result ( ) ;
rank: 50
score: 99.38343505859375
patch: return parent . get CaMeL First CaMeL Child ( ) . is CaMeL Getter CaMeL Def ( ) ;
rank: 50
score: 99.35546875
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Parent ( ) ) ;
rank: 50
score: 99.3075702373798
patch: if ( ! Node CaMeL Util . is CaMeL Statement CaMeL Block ( ref . get CaMeL Assigned CaMeL Value ( ) ) ) {
rank: 50
score: 99.21927218967014
patch: super . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) {
rank: 50
score: 98.80728912353516
patch: else { continue ; } continue ;
rank: 50
score: 98.75078473772321
patch: continue ; / * * ;
rank: 50
score: 98.7493387858073
patch: return continue ; } }
rank: 50
score: 98.74380057198661
patch: if continue ; ; continue ;
rank: 51
score: 99.35539444633152
patch: return gramps . get CaMeL First CaMeL Child ( ) . is CaMeL Inlinable CaMeL Object ( ) ;
rank: 51
score: 99.30750774515086
patch: if ( parent . get CaMeL First CaMeL Child ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 51
score: 99.21834663722827
patch: return ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) ;
rank: 51
score: 98.74848768446181
patch: continue ; } finally { continue ; }
rank: 51
score: 98.74773406982422
patch: continue * * * * * /
rank: 51
score: 98.7435531616211
patch: continue ; ; ; if continue ;
rank: 51
score: 98.60236952039931
patch: continue report CaMeL Error ( $STRING$ ) ;
rank: 52
score: 99.29009688527961
patch: return this . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref ) ;
rank: 52
score: 99.21818033854167
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL
rank: 52
score: 98.8035176595052
patch: value . continue ; }
rank: 52
score: 98.74736676897321
patch: } else if continue continue ;
rank: 52
score: 98.74671088324652
patch: throw new Interrupted CaMeL Exception ( ) ;
rank: 52
score: 98.74162946428571
patch: continue ; else if continue ;
rank: 52
score: 98.60001627604167
patch: logger . error ( $STRING$ + name ;
rank: 53
score: 98.79944719587054
patch: else { return false ; }
rank: 53
score: 98.74658203125
patch: continue ; } * continue ;
rank: 53
score: 98.73903401692708
patch: * * * * /
rank: 53
score: 98.73518589564732
patch: continue ; ; ; continue ;
rank: 54
score: 99.37510102370689
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL First CaMeL Child ( ) ) ;
rank: 54
score: 99.28843336838942
patch: return ref . get CaMeL First CaMeL Child ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ;
rank: 54
score: 99.21445100203805
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , name ) ;
rank: 54
score: 98.79902866908482
patch: try { continue continue ; }
rank: 54
score: 98.74471609933036
patch: continue * / / * /
rank: 54
score: 98.73870849609375
patch: return false ; return false ;
rank: 54
score: 98.72299533420139
patch: continue ; continue ; if continue ; ;
rank: 54
score: 98.59261745876736
patch: continue value . to CaMeL String ( ;
rank: 55
score: 99.37485139266305
patch: return Node CaMeL Util . is CaMeL Statement CaMeL Block ( parent . get CaMeL First CaMeL Child ( ) ) ;
rank: 55
score: 99.35277381310097
patch: return . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Assigned CaMeL Value ( ) ) ;
rank: 55
score: 99.30050998263889
patch: if ( is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ) {
rank: 55
score: 99.28511379076087
patch: return Node CaMeL Util . is CaMeL Getter CaMeL Def ( ref . get CaMeL First CaMeL Child ( ) ) ;
rank: 55
score: 98.79869842529297
patch: this . continue ; if continue ;
rank: 55
score: 98.74127197265625
patch: continue ; } else if ( ;
rank: 55
score: 98.73863728841145
patch: } else { if ;
rank: 55
score: 98.71848842075893
patch: if continue ; for continue ;
rank: 55
score: 98.58621978759766
patch: continue ; } if ( continue )
rank: 56
score: 99.37478637695312
patch: return ! Node CaMeL Util . is CaMeL Statement CaMeL Block ( ref . get CaMeL First CaMeL Child ( ) ) ;
rank: 56
score: 99.35189115084134
patch: return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Assigned CaMeL Value ( ) ) ;
rank: 56
score: 99.29932803199405
patch: if ( refs . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 56
score: 99.2109439247533
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , name ) ;
rank: 56
score: 98.79488372802734
patch: out . continue ; if continue ;
rank: 56
score: 98.74046979631696
patch: continue ; } * / /
rank: 56
score: 98.73685128348214
patch: * * * / continue ;
rank: 56
score: 98.71721055772569
patch: continue ; if continue ; for continue ;
rank: 56
score: 98.58293805803571
patch: continue = false ; continue ;
rank: 57
score: 99.37451171875
patch: return ( gramps . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) ;
rank: 57
score: 99.29840087890625
patch: if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent ) ) {
rank: 57
score: 98.79159545898438
patch: catch continue ; continue ;
rank: 57
score: 98.74033900669643
patch: continue ; } ; * /
rank: 57
score: 98.73152160644531
patch: throw new Runtime CaMeL Exception continue ;
rank: 57
score: 98.71165771484375
patch: if ; continue ;
rank: 57
score: 98.57699245876736
patch: throw new Runtime CaMeL Exception ( new ;
rank: 58
score: 99.37417263454861
patch: return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent ) ;
rank: 58
score: 99.2978759765625
patch: if ( . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 58
score: 99.20836871603261
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , ref ) ;
rank: 58
score: 98.73685709635417
patch: continue * / continue ;
rank: 58
score: 98.70556640625
patch: continue ; if continue ; continue ; ;
rank: 58
score: 98.57185872395833
patch: synchronized ( this ) {
rank: 59
score: 99.29295765269886
patch: if ( parent . get CaMeL First CaMeL Child ( ) . is CaMeL Getter CaMeL Def ( ) ) {
rank: 59
score: 98.78495570591518
patch: else { continue ; } ;
rank: 59
score: 98.73258666992187
patch: continue - 1 ;
rank: 59
score: 98.70336151123047
patch: if continue ; continue ; if ;
rank: 59
score: 98.56624058314732
patch: if ( ; continue ; }
rank: 60
score: 99.37162853422619
patch: return gramps . get CaMeL First CaMeL Child ( ) . is CaMeL Statement CaMeL Block ( ) ;
rank: 60
score: 99.20622114701705
patch: break . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 60
score: 98.78392537434895
patch: else { continue ; ;
rank: 60
score: 98.73223114013672
patch: continue ; } * / * /
rank: 60
score: 98.72896902901786
patch: } else { return continue ;
rank: 60
score: 98.70225306919643
patch: if continue ; continue ; else
rank: 60
score: 98.56427001953125
patch: throw new Exception ( $STRING$ ) ;
rank: 61
score: 99.28963216145833
patch: if ( gramps . get CaMeL First CaMeL Child ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 61
score: 99.20596652560764
patch: continue = is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 61
score: 98.77456665039062
patch: this . continue ; continue ; }
rank: 61
score: 98.72915649414062
patch: continue ; * / ;
rank: 61
score: 98.72766985212054
patch: } else if ( continue ;
rank: 61
score: 98.69966634114583
patch: if continue ; if continue ; continue ;
rank: 62
score: 99.28957693917411
patch: if ( parent . is CaMeL Getter CaMeL Def ( ) ) {
rank: 62
score: 99.27622633713942
patch: return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Assigned CaMeL Value ( ) ) ;
rank: 62
score: 99.20420532226562
patch: return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , ref ) ;
rank: 62
score: 98.77357177734375
patch: continue continue ; }
rank: 62
score: 98.7291259765625
patch: continue * * continue * /
rank: 62
score: 98.72118377685547
patch: return continue ; } } continue ;
rank: 62
score: 98.69711642795139
patch: continue ; continue ; ; if continue ;
rank: 62
score: 98.5545654296875
patch: if ( ; return true )
rank: 63
score: 99.34872834578805
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Parent ( ) ) ;
rank: 63
score: 99.28875732421875
patch: return parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ;
rank: 63
score: 99.27609092310855
patch: return ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 63
score: 99.20333251953124
patch: return ! this . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 63
score: 98.72696940104167
patch: continue ; default * /
rank: 63
score: 98.71411895751953
patch: continue * * * / continue ;
rank: 63
score: 98.69293212890625
patch: if ; { continue ;
rank: 63
score: 98.55403645833333
patch: continue ret = continue ;
rank: 64
score: 99.36844437210648
patch: return parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Assigned CaMeL Value ( ) ) ;
rank: 64
score: 99.27500563401442
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( gramps . get CaMeL First CaMeL Child ( ) ) ;
rank: 64
score: 98.76750183105469
patch: value . continue ; break ; }
rank: 64
score: 98.72103881835938
patch: continue ; * continue ;
rank: 64
score: 98.71353149414062
patch: * * * * * * /
rank: 64
score: 98.69162326388889
patch: continue ; continue ; if continue ; else
rank: 64
score: 98.55301920572917
patch: log . error ( $STRING$ + name ;
rank: 65
score: 99.36801583426339
patch: return gramps . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Assigned CaMeL Value ( ) ) ;
rank: 65
score: 99.34618353074596
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) . get CaMeL Parent ( ) ) ;
rank: 65
score: 99.287841796875
patch: continue is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 65
score: 99.27306676793981
patch: return parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) ) ;
rank: 65
score: 98.7662353515625
patch: } continue ; } continue ;
rank: 65
score: 98.71404157366071
patch: continue ; } ; finally {
rank: 65
score: 98.68404812282986
patch: if continue ; continue ; continue ; }
rank: 65
score: 98.5506591796875
patch: if ( continue ) break ;
rank: 66
score: 99.34480794270833
patch: return Node CaMeL Util . is CaMeL Statement CaMeL Block ( ref . get CaMeL Parent ( ) ) ;
rank: 66
score: 99.28697138247283
patch: if ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent ) ) {
rank: 66
score: 99.27267690805289
patch: return ref . get CaMeL First CaMeL Child ( ) . get CaMeL Parent ( ) . is CaMeL Getter CaMeL Def ( ) ;
rank: 66
score: 98.76175689697266
patch: value . out . println continue ;
rank: 66
score: 98.71175384521484
patch: continue null ;
rank: 66
score: 98.71150970458984
patch: continue * * * * continue ;
rank: 66
score: 98.68304443359375
patch: return ; if continue ; continue ;
rank: 66
score: 98.54789733886719
patch: if ( continue ) return true ;
rank: 67
score: 99.281591796875
patch: if ( Node CaMeL Util . is CaMeL Statement CaMeL Block ( ref . get CaMeL Assigned CaMeL Value ( ) ) ) {
rank: 67
score: 99.27185510706019
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Value ( ) ) ;
rank: 67
score: 99.20083618164062
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Node CaMeL
rank: 67
score: 98.76154436383929
patch: continue continue ; if continue ;
rank: 67
score: 98.71117401123047
patch: * * * * / continue ;
rank: 67
score: 98.70994059244792
patch: continue * / return ;
rank: 67
score: 98.67804827008929
patch: continue ; continue ; / /
rank: 68
score: 99.3670590049342
patch: return callback . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 68
score: 99.20073009672619
patch: return ! gramps . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 68
score: 98.76079450334821
patch: } continue ; continue ; ;
rank: 68
score: 98.70993477957589
patch: * * * * / }
rank: 68
score: 98.70741489955357
patch: continue ; * / * /
rank: 68
score: 98.67352294921875
patch: continue ; continue ; try
rank: 68
score: 98.53790283203125
patch: if ( ; return false )
rank: 69
score: 99.27845110212054
patch: if ( ref . get CaMeL First CaMeL Child ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ) {
rank: 69
score: 99.27058919270833
patch: return Node CaMeL Util . is CaMeL Statement CaMeL Block ( ref . get CaMeL Node ( ) ) ;
rank: 69
score: 99.1997314453125
patch: return parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL
rank: 69
score: 98.76078033447266
patch: try { continue ; if continue ;
rank: 69
score: 98.70720563616071
patch: continue * * * continue ;
rank: 69
score: 98.66670735677083
patch: if continue ; break ;
rank: 69
score: 98.53415256076389
patch: continue value CaMeL Of ( type ) ;
rank: 70
score: 99.36631146599265
patch: return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ;
rank: 70
score: 99.2782421875
patch: if ( Node CaMeL Util . is CaMeL Statement CaMeL Block ( ref . get CaMeL First CaMeL Child ( ) ) ) {
rank: 70
score: 99.27046926398026
patch: return parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref ) ;
rank: 70
score: 98.70241088867188
patch: if ( ; ;
rank: 70
score: 98.66510009765625
patch: if continue ; continue ; while continue ;
rank: 70
score: 98.533203125
patch: System . err . println ( $STRING$ ;
rank: 71
score: 99.27819146050348
patch: if ( ! Node CaMeL Util . is CaMeL Statement CaMeL Block ( ref ) ) {
rank: 71
score: 98.7521260579427
patch: continue continue ; continue ;
rank: 71
score: 98.70589192708333
patch: return ; continue ; }
rank: 71
score: 98.70062255859375
patch: continue ; } finally { continue ;
rank: 71
score: 98.65754699707031
patch: if ; if continue ; continue ;
rank: 71
score: 98.5308837890625
patch: continue ret = true ; }
rank: 72
score: 99.36231578480114
patch: result = Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 72
score: 99.27517700195312
patch: is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 72
score: 99.19905598958333
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( id ) ;
rank: 72
score: 98.75027465820312
patch: logger . out . println continue ;
rank: 72
score: 98.7043685913086
patch: return continue ; continue ; continue ;
rank: 72
score: 98.69979858398438
patch: / * ; * /
rank: 72
score: 98.6551513671875
patch: continue ; continue ; if ; {
rank: 72
score: 98.52944607204861
patch: throw new Runtime CaMeL Exception ( $STRING$ )
rank: 73
score: 99.36166268807871
patch: return this . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Assigned CaMeL Value ( ) ) ;
rank: 73
score: 99.2741928100586
patch: if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL First CaMeL Child ( ) ) ) {
rank: 73
score: 99.2656882957176
patch: return this . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Assigned CaMeL Value ( ) ) ;
rank: 73
score: 99.198623046875
patch: return parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Node ( ) ) ;
rank: 73
score: 98.70072174072266
patch: return false ; } return continue ;
rank: 73
score: 98.69185384114583
patch: is CaMeL Get CaMeL Prop ( ) ;
rank: 73
score: 98.65346854073661
patch: continue ; return if continue ;
rank: 73
score: 98.52855573381696
patch: continue ret = false ; }
rank: 74
score: 99.36114823190789
patch: return options . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 74
score: 99.27328596443965
patch: if ( gramps . get CaMeL First CaMeL Child ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ) {
rank: 74
score: 99.26441446940105
patch: return ref . get CaMeL Node ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ;
rank: 74
score: 98.69725036621094
patch: return continue ; } return false ;
rank: 74
score: 98.69058227539062
patch: continue ; / * continue * ;
rank: 74
score: 98.65094866071429
patch: continue ; if continue ; else
rank: 74
score: 98.52701241629464
patch: throw new ; } continue ;
rank: 75
score: 99.35984584263393
patch: return ref . get CaMeL First CaMeL Child ( ) . get CaMeL First CaMeL Child ( ) . is CaMeL Getter CaMeL Def ( ) ;
rank: 75
score: 99.26416829427083
patch: return Node CaMeL Util . is CaMeL Getter CaMeL Def ( ref ) ;
rank: 75
score: 99.19816080729167
patch: return Node CaMeL Util . is CaMeL Statement CaMeL Block ( gramps . get CaMeL First CaMeL Child ( ) ) ;
rank: 75
score: 98.74411010742188
patch: continue ; for continue ;
rank: 75
score: 98.6923828125
patch: } else if ; continue ;
rank: 75
score: 98.69057791573661
patch: continue - 1 . $NUMBER$ ;
rank: 75
score: 98.64876302083333
patch: continue ; if ; continue ; break ;
rank: 75
score: 98.52359008789062
patch: continue false ;
rank: 76
score: 99.35971248851104
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( type ) ;
rank: 76
score: 99.26336991159539
patch: return null . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref ) ;
rank: 76
score: 99.19652210582386
patch: state . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 76
score: 98.74029541015625
patch: if false ; continue ;
rank: 76
score: 98.68965657552083
patch: } if ( continue ;
rank: 76
score: 98.64820014105902
patch: continue ; continue ; else if continue ;
rank: 76
score: 98.52259657118056
patch: Thread . current CaMeL Thread ( ) ;
rank: 77
score: 99.35952919407895
patch: return module . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 77
score: 99.2718994140625
patch: if ( name . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ) {
rank: 77
score: 99.26289424189815
patch: return parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Assigned CaMeL Value ( ) ) ;
rank: 77
score: 99.19473605685764
patch: return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( id ) ;
rank: 77
score: 98.68049621582031
patch: continue . * / return false ;
rank: 77
score: 98.67814331054687
patch: return ; continue ;
rank: 77
score: 98.6455307006836
patch: continue ; continue ; break ; }
rank: 77
score: 98.51942661830357
patch: if ( continue ) { }
rank: 78
score: 99.32920735677084
patch: return ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Assigned CaMeL Value ( ) ) ;
rank: 78
score: 99.26189055266204
patch: return null . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Assigned CaMeL Value ( ) ) ;
rank: 78
score: 99.19462890625
patch: return parent . get CaMeL Node ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 78
score: 98.73756626674107
patch: else { if continue ; }
rank: 78
score: 98.67952183314732
patch: continue * / * / ;
rank: 78
score: 98.67766571044922
patch: return this . continue ; continue ;
rank: 78
score: 98.64349365234375
patch: continue ; if ; continue ; ;
rank: 78
score: 98.51874542236328
patch: if ( continue ) { continue ;
rank: 79
score: 99.328837890625
patch: return this . gramps . get CaMeL First CaMeL Child ( ) == parent . get CaMeL First CaMeL Child ( ) ;
rank: 79
score: 99.2705078125
patch: if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref ) )
rank: 79
score: 98.73721749441964
patch: continue continue ; } continue ;
rank: 79
score: 98.67946951729911
patch: continue ; } / * *
rank: 79
score: 98.67525634765624
patch: } return continue ;
rank: 79
score: 98.64237976074219
patch: continue ; continue ; } if ;
rank: 79
score: 98.51593889508929
patch: continue false / * continue ;
rank: 80
score: 99.26887342664931
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ; }
rank: 80
score: 99.26011305588942
patch: return ref . get CaMeL First CaMeL Child ( ) . get CaMeL Parent ( ) . is CaMeL Setter CaMeL Def ( ) ;
rank: 80
score: 98.73534138997395
patch: try { continue continue ;
rank: 80
score: 98.67381940569196
patch: return null ; continue ; }
rank: 80
score: 98.64195033482143
patch: else if continue ; continue ;
rank: 80
score: 98.51592254638672
patch: throw new Runtime CaMeL Exception ; }
rank: 81
score: 99.3564453125
patch: ret = gramps . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 81
score: 99.32841411389802
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name == name ) ;
rank: 81
score: 99.26559012276786
patch: if ( ! ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 81
score: 99.19264914772727
patch: schema . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 81
score: 98.73503875732422
patch: else { continue ; if continue ;
rank: 81
score: 98.67475237165179
patch: continue * / continue * /
rank: 81
score: 98.67253766741071
patch: return null ; } continue ;
rank: 81
score: 98.64168875558036
patch: if ; continue ; break ;
rank: 81
score: 98.51458740234375
patch: continue value CaMeL Of ( name ) ;
rank: 82
score: 99.32798414963942
patch: return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL First CaMeL Child ( ) ) ;
rank: 82
score: 99.26526409646739
patch: synchronized ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 82
score: 99.25922594572368
patch: return parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent ) ;
rank: 82
score: 98.73041534423828
patch: i . continue ; if continue ;
rank: 82
score: 98.67391531808036
patch: ; / * continue * /
rank: 82
score: 98.67158508300781
patch: } else { return continue ; }
rank: 82
score: 98.6413803100586
patch: / ; continue ; if continue ;
rank: 82
score: 98.5145263671875
patch: continue value CaMeL Of ( ;
rank: 83
score: 99.35618082682292
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( gramps ) ;
rank: 83
score: 99.2649558738426
patch: if ( parent . get CaMeL First CaMeL Child ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) )
rank: 83
score: 99.25887948495371
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , parent . get CaMeL First CaMeL Child ( ) ) ;
rank: 83
score: 99.19130345394737
patch: return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ; }
rank: 83
score: 98.72808074951172
patch: continue ; continue ; System . ;
rank: 83
score: 98.67046356201172
patch: continue * / return false ; }
rank: 83
score: 98.67037527901786
patch: return continue ; } catch ;
rank: 83
score: 98.64027404785156
patch: continue ; if continue ; if ;
rank: 83
score: 98.51289876302083
patch: for ( ; ; )
rank: 84
score: 99.32718098958334
patch: return gramps . get CaMeL First CaMeL Child ( ) == name ;
rank: 84
score: 99.25858347039474
patch: return this . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent ) ;
rank: 84
score: 98.72514125279018
patch: } finally { continue ; }
rank: 84
score: 98.6676025390625
patch: * * * * continue ;
rank: 84
score: 98.66690826416016
patch: continue ; / * continue ; }
rank: 84
score: 98.63824462890625
patch: if continue ; } continue ;
rank: 84
score: 98.51152886284723
patch: continue throws Illegal CaMeL State CaMeL Exception {
rank: 85
score: 99.32704228940217
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Parent ( ) ) ;
rank: 85
score: 99.2632366677989
patch: if ( gramps . get CaMeL First CaMeL Child ( ) . is CaMeL Getter CaMeL Def ( ) ) {
rank: 85
score: 99.1903076171875
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , ref ) ;
rank: 85
score: 98.72512381417411
patch: catch ( $STRING$ ; continue ;
rank: 85
score: 98.6641845703125
patch: continue * * * /
rank: 85
score: 98.63784450954861
patch: continue ; continue ; while ; continue ;
rank: 85
score: 98.50984022352431
patch: Assert . is CaMeL True ( continue ;
rank: 86
score: 99.3537264737216
patch: return ref . get CaMeL First CaMeL Child ( ) == parent . get CaMeL First CaMeL Child ( ) ;
rank: 86
score: 99.26268717447917
patch: if ( gramps . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL First CaMeL Child ( ) ) ) {
rank: 86
score: 99.18906947544643
patch: code . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) )
rank: 86
score: 98.66329193115234
patch: continue ; } / * * /
rank: 86
score: 98.66083635602679
patch: } else if ( false ;
rank: 86
score: 98.63424246651786
patch: return ; if ; continue ;
rank: 86
score: 98.50825500488281
patch: LOG . error ( $STRING$ ) ;
rank: 87
score: 99.35344495271382
patch: return gramps . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ;
rank: 87
score: 99.32677770543981
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Value ( ) ) ;
rank: 87
score: 99.26228841145833
patch: } if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 87
score: 98.71995035807292
patch: value . continue ; ;
rank: 87
score: 98.66206868489583
patch: continue . * / return false ; }
rank: 87
score: 98.63419342041016
patch: continue ; continue ; return continue ;
rank: 87
score: 98.50615098741319
patch: throw new Assertion CaMeL Error ( ; }
rank: 88
score: 99.32667824074075
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) == parent ) ;
rank: 88
score: 99.26207885742187
patch: if ( gramps . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) )
rank: 88
score: 99.25657371238425
patch: return ref . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) ) ;
rank: 88
score: 99.1835604580966
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL
rank: 88
score: 98.71450369698661
patch: else { continue ; } }
rank: 88
score: 98.65900530133929
patch: continue ; / * ; ;
rank: 88
score: 98.65238189697266
patch: } else { if continue ; }
rank: 88
score: 98.63313802083333
patch: if ; if continue ;
rank: 88
score: 98.50408935546875
patch: continue get CaMeL Result ( continue ) ;
rank: 89
score: 99.32627650669643
patch: return gramps . get CaMeL First CaMeL Child ( ) == parent . get CaMeL Parent ( ) ;
rank: 89
score: 99.26079767400569
patch: if ( ! ref . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 89
score: 98.71216837565105
patch: continue { continue continue ;
rank: 89
score: 98.65224202473958
patch: this . return false ;
rank: 89
score: 98.63113403320312
patch: return ; if continue ; break ;
rank: 89
score: 98.5035400390625
patch: continue = true ; }
rank: 90
score: 99.35310581752232
patch: return gramps . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) ) ;
rank: 90
score: 99.25860954733456
patch: if ( gramps . get CaMeL First CaMeL Child ( ) == parent ) {
rank: 90
score: 98.712158203125
patch: continue { continue ; break ; }
rank: 90
score: 98.65644182477679
patch: continue * / * continue ;
rank: 90
score: 98.64854213169643
patch: } if ; return continue ;
rank: 90
score: 98.63111223493304
patch: if continue ; continue ; return
rank: 90
score: 98.49809434678819
patch: continue remove CaMeL Child ( continue ) ;
rank: 91
score: 99.35300699869792
patch: return ! Node CaMeL Util . is CaMeL Statement CaMeL Block ( ref . get CaMeL Assigned CaMeL Value ( ) ) ;
rank: 91
score: 99.25819227430556
patch: if ( parent . get CaMeL Node ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 91
score: 99.18259148848684
patch: continue = ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 91
score: 98.71000366210937
patch: continue continue continue ;
rank: 91
score: 98.655517578125
patch: continue * / ; }
rank: 91
score: 98.64787292480469
patch: return false ; else return false ;
rank: 91
score: 98.63107638888889
patch: continue ; continue ; continue ; if ;
rank: 91
score: 98.49803924560547
patch: try { continue ; } catch ;
rank: 92
score: 99.32429750504032
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) == name ) ;
rank: 92
score: 99.25811767578125
patch: while ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 92
score: 99.18174525669643
patch: continue . if ( is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 92
score: 98.7066650390625
patch: continue ; ; continue ; ;
rank: 92
score: 98.65323893229167
patch: continue ; } finally { if ( ;
rank: 92
score: 98.64009312220982
patch: return false ; } finally {
rank: 92
score: 98.6295166015625
patch: continue ; if continue ; while continue ;
rank: 92
score: 98.49382019042969
patch: continue value CaMeL Of ( continue ;
rank: 93
score: 99.32403971354167
patch: return Node CaMeL Util . is CaMeL Statement CaMeL Block ( parent ) ;
rank: 93
score: 99.25745738636364
patch: if ( ! gramps . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ) {
rank: 93
score: 99.2554931640625
patch: return this . ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 93
score: 99.18049422554348
patch: return get CaMeL Prop ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 93
score: 98.7065658569336
patch: value . continue ; System . ;
rank: 93
score: 98.65087280273437
patch: continue ; ; }
rank: 93
score: 98.64009312220982
patch: return false ; if continue ;
rank: 93
score: 98.62730407714844
patch: break ; continue ; if continue ;
rank: 93
score: 98.49112277560764
patch: Log . error ( this , $STRING$ ;
rank: 94
score: 99.35202462332589
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , gramps . get CaMeL First CaMeL Child ( ) ) ;
rank: 94
score: 99.25732421875
patch: while ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 94
score: 99.1803337545956
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( id ) ;
rank: 94
score: 98.64983367919922
patch: System . out . println ( ;
rank: 94
score: 98.63813781738281
patch: * * * * * continue ;
rank: 94
score: 98.62663269042969
patch: continue ; if continue ; / /
rank: 94
score: 98.49001639229911
patch: if ( continue != null )
rank: 95
score: 99.35200557002315
patch: return ref . get CaMeL First CaMeL Child ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 95
score: 99.18022228422619
patch: exception . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) )
rank: 95
score: 98.64973667689732
patch: / * ; * / ;
rank: 95
score: 98.63690948486328
patch: return false ; } if continue ;
rank: 95
score: 98.62581380208333
patch: continue ; continue ; continue ; continue ;
rank: 96
score: 99.32241981907895
patch: return list . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 96
score: 99.25452053931451
patch: if ( ! gramps . get CaMeL First CaMeL Child ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 96
score: 99.25336371527777
patch: return null . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) ) ;
rank: 96
score: 99.17923677884616
patch: return gramps . get CaMeL Node ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 96
score: 98.70161743164063
patch: this . continue ;
rank: 96
score: 98.64933471679687
patch: continue ; } ;
rank: 96
score: 98.63003104073661
patch: return true ; } continue ;
rank: 96
score: 98.48769124348958
patch: if ( continue ) { break ; }
rank: 97
score: 99.34998276654412
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( property ) ;
rank: 97
score: 99.25388816550925
patch: if ( ref . get CaMeL Node ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 97
score: 99.17861540421195
patch: continue . if ( parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 97
score: 98.70071411132812
patch: else continue ; continue ;
rank: 97
score: 98.64901297433036
patch: continue ; } / * /
rank: 97
score: 98.6292012532552
patch: if ( ! continue ;
rank: 97
score: 98.62437220982143
patch: if continue ; while continue ;
rank: 97
score: 98.4862060546875
patch: logger . log ( ; continue ;
rank: 98
score: 99.25350459929436
patch: if ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL First CaMeL Child ( ) ) ) {
rank: 98
score: 99.17590942382813
patch: return ref . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) ;
rank: 98
score: 98.70021275111607
patch: else { return continue ; }
rank: 98
score: 98.64752197265625
patch: continue * * / ;
rank: 98
score: 98.62295096261161
patch: continue * * / } }
rank: 98
score: 98.62276204427083
patch: continue ; continue ; if ; break ;
rank: 98
score: 98.48512486049107
patch: if ( value == null )
rank: 99
score: 99.25325150923295
patch: return parent . get CaMeL First CaMeL Child ( ) == parent . get CaMeL First CaMeL Child ( ) ;
rank: 99
score: 99.25022486636513
patch: return null . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent ) ;
rank: 99
score: 98.69781494140625
patch: else continue ;
rank: 99
score: 98.6474609375
patch: continue ; } } return ret ;
rank: 99
score: 98.62234836154514
patch: continue ; ; if continue ; break ;
rank: 99
score: 98.48478480747768
patch: for ( ; ; ) {
rank: 100
score: 99.34866768973214
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( property ) ;
rank: 100
score: 99.32022530691964
patch: return . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) == name ) ;
rank: 100
score: 99.17446719898896
patch: boolean is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) {
rank: 100
score: 98.6961669921875
patch: continue { for continue ;
rank: 100
score: 98.64388275146484
patch: continue ; * / if ( ;
rank: 100
score: 98.61943223741319
patch: continue ; if continue ; break ; }
rank: 100
score: 98.61912536621094
patch: this . return false ; continue ;
rank: 100
score: 98.48476155598958
patch: continue super . continue ;
rank: 101
score: 99.25272310697116
patch: if ( parent . get CaMeL Node ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ) {
rank: 101
score: 99.17330771998355
patch: result = ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 101
score: 98.69241768973214
patch: } continue ; while continue ;
rank: 101
score: 98.64317103794643
patch: continue ; } } finally {
rank: 101
score: 98.61917114257812
patch: continue ; continue ; throw continue ;
rank: 101
score: 98.61550903320312
patch: continue * * * * * ;
rank: 101
score: 98.48217010498047
patch: logger . warning ( $STRING$ ) ;
rank: 102
score: 99.31967050057871
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL First CaMeL Child ( ) == name ) ;
rank: 102
score: 99.25263904389881
patch: if ( ! parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) )
rank: 102
score: 98.68915666852679
patch: } continue ; return continue ;
rank: 102
score: 98.6394551595052
patch: / * continue * /
rank: 102
score: 98.6190185546875
patch: continue ; continue ; while ;
rank: 102
score: 98.61457824707031
patch: } else { if ( continue ;
rank: 102
score: 98.48057047526042
patch: report CaMeL Error ( $STRING$ + name ;
rank: 103
score: 99.3174465013587
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Value ( ) ) ;
rank: 103
score: 99.2520751953125
patch: } return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 103
score: 99.24814324629934
patch: return super . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref ) ;
rank: 103
score: 99.17292336856617
patch: return ( is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name )
rank: 103
score: 98.63621303013393
patch: continue ; * continue ; }
rank: 103
score: 98.61496988932292
patch: continue ; continue ; } continue ; }
rank: 103
score: 98.61298479352679
patch: return continue ; return false ;
rank: 103
score: 98.4786376953125
patch: if ( continue = continue )
rank: 104
score: 99.31742802372685
patch: return this . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) ) ;
rank: 104
score: 99.25150553385417
patch: if ( ! Node CaMeL Util . is CaMeL Statement CaMeL Block ( ref . get CaMeL Parent ( ) ) ) {
rank: 104
score: 99.1728515625
patch: throw is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 104
score: 98.68805541992188
patch: } continue ; ;
rank: 104
score: 98.63519287109375
patch: continue ; } finally {
rank: 104
score: 98.61482238769531
patch: return if continue ; if continue ;
rank: 104
score: 98.61296844482422
patch: return null ; } catch continue ;
rank: 104
score: 98.47843715122768
patch: continue false * / continue ;
rank: 105
score: 99.34328206380208
patch: return parent . is CaMeL Getter CaMeL Def ( ) ;
rank: 105
score: 99.31635199652777
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Assigned CaMeL Value ( ) == name ) ;
rank: 105
score: 99.25080217633929
patch: if ( ! ref . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ) {
rank: 105
score: 99.24653930664063
patch: if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL
rank: 105
score: 99.17206573486328
patch: boolean is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name )
rank: 105
score: 98.68733215332031
patch: continue { continue ; continue ; }
rank: 105
score: 98.6343994140625
patch: continue ; } * continue * /
rank: 105
score: 98.61449517144098
patch: continue ; } if continue ; continue ;
rank: 105
score: 98.61229858398437
patch: } return false ;
rank: 105
score: 98.47760687934027
patch: continue parent . remove CaMeL Child ( ;
rank: 106
score: 99.17195951021634
patch: return . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) . is CaMeL Getter CaMeL Def ( ) ;
rank: 106
score: 98.68615112304687
patch: } continue continue ;
rank: 106
score: 98.63088553292411
patch: if ( name != null ;
rank: 106
score: 98.61424255371094
patch: continue ; if ; continue ; }
rank: 106
score: 98.6110610961914
patch: if ( ! continue ; continue ;
rank: 107
score: 99.34109061104911
patch: return gramps . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Assigned CaMeL Value ( ) ) ;
rank: 107
score: 99.3146339699074
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Parent ( ) ) ;
rank: 107
score: 99.24901404747597
patch: if ( ref . get CaMeL Node ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ) {
rank: 107
score: 99.24545127467105
patch: return ref . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent ) ;
rank: 107
score: 99.17165208899456
patch: return ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref ) ) ;
rank: 107
score: 98.68568420410156
patch: if this . continue ; continue ;
rank: 107
score: 98.62831115722656
patch: continue ; } ; if ( ;
rank: 107
score: 98.61080169677734
patch: return continue ; } return continue ;
rank: 107
score: 98.47657993861607
patch: if ( continue && continue ;
rank: 108
score: 99.3143898292824
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Node ( ) ) ;
rank: 108
score: 99.24866116431451
patch: if ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Assigned CaMeL Value ( ) ) ) {
rank: 108
score: 99.17151988636364
patch: return parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Node CaMeL
rank: 108
score: 98.684814453125
patch: try { continue ; } ;
rank: 108
score: 98.62550354003906
patch: continue ; } / * * ;
rank: 108
score: 98.61299133300781
patch: if continue ; continue ; / /
rank: 108
score: 98.610107421875
patch: return ( continue ;
rank: 108
score: 98.4728775024414
patch: report CaMeL Error ( continue ) ;
rank: 109
score: 99.31410618832237
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( this . name ) ;
rank: 109
score: 99.24863688151042
patch: if ( ! Node CaMeL Util . is CaMeL Statement CaMeL Block ( ref . get CaMeL Node ( ) ) ) {
rank: 109
score: 99.17137315538194
patch: throw ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 109
score: 98.68250383649554
patch: value . continue ; continue ;
rank: 109
score: 98.62422398158482
patch: if ( name == null ;
rank: 109
score: 98.61189778645833
patch: continue ; continue ; return
rank: 109
score: 98.60608673095703
patch: } else { if continue continue ;
rank: 109
score: 98.47081163194444
patch: continue 1 . $NUMBER$ * / continue ;
rank: 110
score: 99.34010009765625
patch: return ref . get CaMeL First CaMeL Child ( ) . is CaMeL Get CaMeL Prop ( ) ;
rank: 110
score: 99.31318516885081
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) . get CaMeL Node ( ) ) ;
rank: 110
score: 99.24855735085227
patch: if ( ! gramps . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) )
rank: 110
score: 98.67945098876953
patch: logger . parse ( continue ) ;
rank: 110
score: 98.62386474609374
patch: / * continue ;
rank: 110
score: 98.6114273071289
patch: continue ; continue ; } break ;
rank: 110
score: 98.60282135009766
patch: return false ; else return continue ;
rank: 110
score: 98.46881103515625
patch: logger . error ( $STRING$ , name ;
rank: 111
score: 99.246923828125
patch: if ( this . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ) {
rank: 111
score: 99.17100694444444
patch: super . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref ) ;
rank: 111
score: 98.67943464006696
patch: return false ; while continue ;
rank: 111
score: 98.6224594116211
patch: Assert . is CaMeL True ( ;
rank: 111
score: 98.61126030815973
patch: return ; if continue ; if continue ;
rank: 111
score: 98.60163879394531
patch: } else { continue ; continue ;
rank: 111
score: 98.46859741210938
patch: Thread . sleep ( $NUMBER$ ) ;
rank: 112
score: 99.31171875
patch: return ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL First CaMeL Child ( ) ) ;
rank: 112
score: 99.24630737304688
patch: if ( parent . get CaMeL First CaMeL Child ( ) != parent ) {
rank: 112
score: 98.67760467529297
patch: continue { continue ; System . ;
rank: 112
score: 98.62163543701172
patch: throw new Internal CaMeL Error ( ;
rank: 112
score: 98.61046491350446
patch: if continue ; continue ; /
rank: 112
score: 98.59987095424107
patch: return null ; } else {
rank: 112
score: 98.46706814236111
patch: continue get CaMeL Current CaMeL Node ( ;
rank: 113
score: 99.2454833984375
patch: if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL First CaMeL Child ( ) ) ) {
rank: 113
score: 99.1708514873798
patch: return . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL First CaMeL Child ( ) ) ;
rank: 113
score: 98.67688860212054
patch: continue ; continue ; } ;
rank: 113
score: 98.61701311383929
patch: continue ; } return ret ;
rank: 113
score: 98.609619140625
patch: continue ; continue ; /
rank: 113
score: 98.5994873046875
patch: } if ( continue ; continue ;
rank: 113
score: 98.46657307942708
patch: continue = false ; }
rank: 114
score: 99.24464925130208
patch: if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( refs ) ) {
rank: 114
score: 98.67434256417411
patch: continue { if continue ; ;
rank: 114
score: 98.61665344238281
patch: if ( name . equals ( ;
rank: 114
score: 98.6070327758789
patch: continue ; return ; if continue ;
rank: 114
score: 98.59900665283203
patch: return false ; } else if ;
rank: 114
score: 98.46594916449652
patch: continue new Null CaMeL Pointer CaMeL Exception ;
rank: 115
score: 99.24461951622597
patch: if ( ! Node CaMeL Util . is CaMeL Statement CaMeL Block ( parent . get CaMeL First CaMeL Child ( ) ) ) {
rank: 115
score: 99.16935591264205
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( gramps ) ;
rank: 115
score: 98.67218889508929
patch: if new continue ; continue ;
rank: 115
score: 98.61463928222656
patch: continue ; * / return false ;
rank: 115
score: 98.60643768310547
patch: continue ; continue ; continue ; ;
rank: 115
score: 98.59699249267578
patch: * * * * * / }
rank: 115
score: 98.46129353841145
patch: continue false = true ;
rank: 116
score: 99.33515625
patch: return ref . get CaMeL First CaMeL Child ( ) . is CaMeL Statement CaMeL Block ( ) ;
rank: 116
score: 99.30755418346774
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL First CaMeL Child ( ) . get CaMeL Parent ( ) ) ;
rank: 116
score: 99.243896484375
patch: if ( parent . get CaMeL First CaMeL Child ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) )
rank: 116
score: 99.16908957741477
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 116
score: 98.67073974609374
patch: else ; continue ;
rank: 116
score: 98.61406598772321
patch: continue ; * / continue ;
rank: 116
score: 98.60581970214844
patch: continue ; ; if continue ; }
rank: 116
score: 98.59683227539062
patch: } if ; continue ;
rank: 116
score: 98.46125793457031
patch: continue value . if ( continue )
rank: 117
score: 99.33487955729167
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ) ;
rank: 117
score: 99.3071525327621
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL First CaMeL Child ( ) == name ) ;
rank: 117
score: 99.24345703125
patch: if ( ! ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 117
score: 99.23947482638889
patch: return ref . get CaMeL Parent ( ) . is CaMeL Setter CaMeL Def ( ) ;
rank: 117
score: 98.61403111049107
patch: continue * / return ; }
rank: 117
score: 98.60581461588542
patch: continue ; else if continue ; continue ;
rank: 117
score: 98.59283447265625
patch: } else return continue ; continue ;
rank: 117
score: 98.46060616629464
patch: if ( continue == null )
rank: 118
score: 99.24282731681035
patch: if ( ref . get CaMeL First CaMeL Child ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 118
score: 99.23902476917614
patch: return ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent ) ;
rank: 118
score: 99.16846988075658
patch: return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 118
score: 98.60823822021484
patch: sb . append ( name ) ;
rank: 118
score: 98.604736328125
patch: continue ; break ; if continue ;
rank: 118
score: 98.59264264787946
patch: } return continue ; continue ;
rank: 118
score: 98.45901925223214
patch: continue ; } return continue ;
rank: 119
score: 99.242626953125
patch: if ( ! gramps . get CaMeL First CaMeL Child ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ) {
rank: 119
score: 99.16829427083333
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Node CaMeL
rank: 119
score: 98.66868082682292
patch: result { continue ; }
rank: 119
score: 98.60041639539931
patch: continue ; if continue ; ; continue ;
rank: 119
score: 98.59226481119792
patch: return false ; } else
rank: 119
score: 98.45851643880208
patch: logger . error ( $STRING$ ) ; }
rank: 120
score: 99.24221934442934
patch: for ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref ) ) {
rank: 120
score: 99.2385784646739
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref , name ) ;
rank: 120
score: 99.16659385279605
patch: } return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 120
score: 98.66786411830357
patch: try { continue ; continue ;
rank: 120
score: 98.6059061686198
patch: do { continue ; }
rank: 120
score: 98.5967788696289
patch: continue ; if ; = continue ;
rank: 120
score: 98.59114837646484
patch: } else if ; return continue ;
rank: 120
score: 98.45785861545139
patch: continue throws Illegal CaMeL Argument CaMeL Exception {
rank: 121
score: 99.3322120949074
patch: return gramps . get CaMeL First CaMeL Child ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ;
rank: 121
score: 99.3064453125
patch: return gramps . get CaMeL First CaMeL Child ( ) != null ;
rank: 121
score: 99.16611891526442
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( Node CaMeL Util . get CaMeL Node CaMeL
rank: 121
score: 98.6671142578125
patch: return true ; ;
rank: 121
score: 98.6052001953125
patch: continue null ; }
rank: 121
score: 98.59658813476562
patch: / if continue ; if continue ;
rank: 121
score: 98.58734130859375
patch: } else continue ;
rank: 121
score: 98.45768907335069
patch: throw new Security CaMeL Exception ( $STRING$ ;
rank: 122
score: 99.24189685639881
patch: if ( super . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 122
score: 98.66709681919643
patch: else { continue continue ; }
rank: 122
score: 98.60321807861328
patch: add CaMeL Node ( name ) ;
rank: 122
score: 98.59654235839844
patch: if continue ; ; if continue ;
rank: 122
score: 98.58719635009766
patch: } else return false ; continue ;
rank: 122
score: 98.45686340332031
patch: Thread . current CaMeL Thread ( ;
rank: 123
score: 99.24185884915866
patch: if ( parent . is CaMeL Get CaMeL Prop ( ) )
rank: 123
score: 99.16389604048295
patch: super . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 123
score: 98.60267333984375
patch: continue . * /
rank: 123
score: 98.59570990668402
patch: continue ; if continue ; } continue ;
rank: 123
score: 98.58571079799107
patch: * * * continue * /
rank: 124
score: 99.24132191051136
patch: if ( parent . get CaMeL First CaMeL Child ( ) . is CaMeL Get CaMeL Prop ( ) ) {
rank: 124
score: 99.23508029513889
patch: return parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL First CaMeL Child ( ) ) ;
rank: 124
score: 98.66390991210938
patch: logger . append ( continue ) ;
rank: 124
score: 98.60060337611607
patch: continue ; if ( ; ;
rank: 124
score: 98.59429931640625
patch: return ; continue ; if continue ;
rank: 124
score: 98.58448028564453
patch: return continue ; } if continue ;
rank: 124
score: 98.45265028211806
patch: try { continue ; } catch ( ;
rank: 125
score: 99.24081566220238
patch: if ( name . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 125
score: 99.23387732872597
patch: if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Child CaMeL
rank: 125
score: 99.16357421875
patch: return ref . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Node ( ) ) ;
rank: 125
score: 98.66206577845982
patch: continue { if continue ; }
rank: 125
score: 98.59873962402344
patch: continue * ;
rank: 125
score: 98.5938720703125
patch: continue ; continue ; if ; else
rank: 125
score: 98.58438546316964
patch: return true ; continue ; }
rank: 126
score: 99.32733832465277
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) == ref ) ;
rank: 126
score: 99.30464228877315
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Node ( ) ) ;
rank: 126
score: 99.24049682617188
patch: if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent ) ) {
rank: 126
score: 98.66166178385417
patch: return false ; ; ;
rank: 126
score: 98.59846714564732
patch: / * continue * * /
rank: 126
score: 98.59205845424107
patch: continue ; ; } continue ;
rank: 126
score: 98.58353097098214
patch: / * * * * /
rank: 126
score: 98.45070975167411
patch: if ; this . continue ;
rank: 127
score: 99.32727471713362
patch: return gramps . get CaMeL First CaMeL Child ( ) . get CaMeL First CaMeL Child ( ) . is CaMeL Getter CaMeL Def ( ) ;
rank: 127
score: 99.30408732096355
patch: return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Value ( ) ) ;
rank: 127
score: 99.24046630859375
patch: if ( this . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) )
rank: 127
score: 99.23322663483796
patch: return null . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Assigned CaMeL Value ( ) ) ;
rank: 127
score: 99.16304154829545
patch: this . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 127
score: 98.66127522786458
patch: if null ; continue ;
rank: 127
score: 98.59739990234375
patch: continue * ; }
rank: 127
score: 98.59012858072917
patch: continue ; ; if ;
rank: 127
score: 98.58292388916016
patch: return false ; } else return ;
rank: 127
score: 98.44986300998264
patch: continue throw new Runtime CaMeL Exception ( $STRING$
rank: 128
score: 99.32595486111111
patch: return ref . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Assigned CaMeL Value ( ) ) ;
rank: 128
score: 99.3020751953125
patch: return ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Assigned CaMeL Value ( ) ) ;
rank: 128
score: 99.23961181640625
patch: return parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ; }
rank: 128
score: 99.16293674045139
patch: return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) {
rank: 128
score: 98.66065470377605
patch: while continue ; continue ;
rank: 128
score: 98.59617396763393
patch: if ( name != null )
rank: 128
score: 98.58580932617187
patch: return if continue ;
rank: 128
score: 98.58197021484375
patch: return false ; } return true ;
rank: 129
score: 99.23935116038604
patch: if ( gramps . get CaMeL First CaMeL Child ( ) != parent ) {
rank: 129
score: 99.23236374627976
patch: return parent . is CaMeL Getter CaMeL Def ( parent . get CaMeL First CaMeL Child ( ) ) ;
rank: 129
score: 98.65963745117188
patch: try { continue ; continue ; }
rank: 129
score: 98.59606061662946
patch: continue * / * * /
rank: 129
score: 98.58481852213542
patch: continue ; continue ; return if continue ;
rank: 129
score: 98.58133951822917
patch: this . return continue ;
rank: 129
score: 98.44676971435547
patch: continue 1 . / * continue ;
rank: 130
score: 99.32577694163604
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( node ) ;
rank: 130
score: 99.30111839657738
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( refs ) ;
rank: 130
score: 99.23900082236842
patch: if ( ref . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) )
rank: 130
score: 99.2319844563802
patch: return ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) ;
rank: 130
score: 99.16057477678571
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) {
rank: 130
score: 98.65943908691406
patch: logger . arraycopy ( continue ) ;
rank: 130
score: 98.59598214285714
patch: return false ; } * /
rank: 130
score: 98.58437093098958
patch: if continue ; continue ; break ; }
rank: 130
score: 98.57916259765625
patch: if ( continue ; return continue ;
rank: 130
score: 98.44472927517361
patch: if ( error CaMeL Handler != null )
rank: 131
score: 99.23768833705357
patch: for ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name )
rank: 131
score: 99.16038004557292
patch: return parent . is CaMeL Get CaMeL Prop ( ) ;
rank: 131
score: 98.65883963448661
patch: return null ; continue ; ;
rank: 131
score: 98.59311349051339
patch: continue ; } } * /
rank: 131
score: 98.58091905381944
patch: continue ; continue ; continue ; break ;
rank: 131
score: 98.44453648158482
patch: if ( value != null )
rank: 132
score: 99.324951171875
patch: return parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Assigned CaMeL Value ( ) ) ;
rank: 132
score: 99.301025390625
patch: return ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) ) ;
rank: 132
score: 99.23754040948276
patch: if ( parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL First CaMeL Child ( ) ) ) {
rank: 132
score: 99.16001539963942
patch: super . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL First CaMeL Child ( ) ) ;
rank: 132
score: 98.65871175130208
patch: for continue ; continue ;
rank: 132
score: 98.5881118774414
patch: synchronized ( this ) { continue ;
rank: 132
score: 98.58033582899306
patch: continue ; continue ; if continue ; return
rank: 132
score: 98.57856750488281
patch: return true ; } catch continue ;
rank: 132
score: 98.44451904296875
patch: else throw new Runtime CaMeL Exception ( ;
rank: 133
score: 99.30068824404762
patch: throw Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 133
score: 99.2374267578125
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ; }
rank: 133
score: 99.15980113636364
patch: cfw . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 133
score: 98.58609008789062
patch: continue . * / if ( ;
rank: 133
score: 98.57679578993056
patch: } continue ; continue ; if continue ;
rank: 133
score: 98.57181222098214
patch: * * continue * * /
rank: 133
score: 98.44428253173828
patch: continue throws Illegal CaMeL State CaMeL Exception
rank: 134
score: 99.30054552801724
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Parent CaMeL Node ( ) ) ;
rank: 134
score: 99.23733520507812
patch: if ( parent . get CaMeL First CaMeL Child ( ) == parent ) {
rank: 134
score: 99.15959028764205
patch: return gramps . get CaMeL First CaMeL Child ( ) . is CaMeL Getter CaMeL Def ( ) ) {
rank: 134
score: 98.65557861328125
patch: return null ; ;
rank: 134
score: 98.58584158761161
patch: return true ; } * /
rank: 134
score: 98.57655843098958
patch: continue ; continue ; if ; if ;
rank: 134
score: 98.57065255301339
patch: result = continue ; continue ;
rank: 134
score: 98.44342912946429
patch: continue get CaMeL Result ( ;
rank: 135
score: 99.323046875
patch: return ( parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ) ;
rank: 135
score: 99.23634643554688
patch: while ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 135
score: 99.23099949048913
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref , ref ) ;
rank: 135
score: 99.15850275213069
patch: impl . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 135
score: 98.65445709228516
patch: super . continue ; continue ; }
rank: 135
score: 98.58447265625
patch: / * continue * / ;
rank: 135
score: 98.57597520616319
patch: if continue ; continue ; ; continue ;
rank: 135
score: 98.5702896118164
patch: return null ; continue ; continue ;
rank: 135
score: 98.44306776258681
patch: continue 1 . / * continue ; }
rank: 136
score: 99.23625837053571
patch: super . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , ref . get CaMeL First CaMeL Child ( ) ) ;
rank: 136
score: 99.2308349609375
patch: return ref . get CaMeL Parent ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ;
rank: 136
score: 99.15687913161058
patch: super . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL First CaMeL Child ( ) ) ;
rank: 136
score: 98.58385467529297
patch: continue ; / * * * /
rank: 136
score: 98.57022094726562
patch: return false ; } } if ;
rank: 137
score: 99.29963930191532
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Node ( ) . get CaMeL First CaMeL Child ( ) ) ;
rank: 137
score: 99.23618861607143
patch: super . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , ref . get CaMeL Assigned CaMeL Value ( ) ) ;
rank: 137
score: 99.23073323567708
patch: return ref . get CaMeL Node ( ) . get CaMeL Parent ( ) . is CaMeL Getter CaMeL Def ( ) ;
rank: 137
score: 99.1567150297619
patch: break . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) )
rank: 137
score: 98.65325927734375
patch: continue ; this . continue ; }
rank: 137
score: 98.58198547363281
patch: continue ; System . out . ;
rank: 137
score: 98.57496861049107
patch: return if continue ; break ;
rank: 137
score: 98.56969342912946
patch: * * * * continue /
rank: 137
score: 98.44150119357639
patch: if ( continue CaMeL Node != null )
rank: 138
score: 99.321767578125
patch: return parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Value ( ) ) ;
rank: 138
score: 99.29927571614583
patch: return . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Value ( ) ) ;
rank: 138
score: 99.236181640625
patch: if ( ! Node CaMeL Util . is CaMeL Statement CaMeL Block ( ref . get CaMeL First CaMeL Child ( ) ) )
rank: 138
score: 99.2306495949074
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , ref . get CaMeL Assigned CaMeL Value ( ) ) ;
rank: 138
score: 99.156474609375
patch: return parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Parent ( ) ) ;
rank: 138
score: 98.65083312988281
patch: finally { continue ; } continue ;
rank: 138
score: 98.58147430419922
patch: continue * / / * * /
rank: 138
score: 98.57290988498264
patch: if continue ; continue ; continue ; ;
rank: 138
score: 98.56829071044922
patch: return continue ; else return false ;
rank: 139
score: 99.3206199363426
patch: return gramps . get CaMeL First CaMeL Child ( ) . get CaMeL Parent ( ) . is CaMeL Getter CaMeL Def ( ) ;
rank: 139
score: 99.15626109730114
patch: found . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 139
score: 98.65080915178571
patch: finally { continue ; } ;
rank: 139
score: 98.57741001674107
patch: if ( name == null )
rank: 139
score: 98.57179260253906
patch: continue ; if ; continue ; else
rank: 139
score: 98.56744384765625
patch: this . continue ; } continue ;
rank: 139
score: 98.44013214111328
patch: sb . append ( continue ) ;
rank: 140
score: 99.29914656929348
patch: return this . gramps . get CaMeL First CaMeL Child ( ) . is CaMeL Getter CaMeL Def ( ) ;
rank: 140
score: 98.57605743408203
patch: continue * / return true ; }
rank: 140
score: 98.57162136501736
patch: continue ; ; continue ; if continue ;
rank: 140
score: 98.43224419487848
patch: logger . error ( $STRING$ ; continue ;
rank: 141
score: 99.32009887695312
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , gramps ) ;
rank: 141
score: 99.29878874747983
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Node ( ) . get CaMeL First CaMeL Child ( ) ) ;
rank: 141
score: 99.2353125
patch: if ( ! Node CaMeL Util . is CaMeL Statement CaMeL Block ( ref . get CaMeL Assigned CaMeL Value ( ) ) )
rank: 141
score: 99.2293113425926
patch: return null . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL First CaMeL Child ( ) ) ;
rank: 141
score: 98.5698013305664
patch: continue . * / return true ;
rank: 141
score: 98.56760079520089
patch: if ; { if continue ;
rank: 141
score: 98.56549072265625
patch: if ( continue continue ;
rank: 141
score: 98.43175659179687
patch: continue false * /
rank: 142
score: 99.31982421875
patch: ret = ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 142
score: 99.23526436941964
patch: if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL First CaMeL Child ( ) ) ) {
rank: 142
score: 99.22874168113425
patch: return this . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL First CaMeL Child ( ) ) ;
rank: 142
score: 98.56770324707031
patch: continue ; } finally { ; }
rank: 142
score: 98.56724039713542
patch: if continue ; break ; if continue ;
rank: 142
score: 98.56465657552083
patch: if ; return continue ;
rank: 142
score: 98.42860921223958
patch: if ( continue ) { return false ;
rank: 143
score: 99.29757925180289
patch: return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL First CaMeL Child ( ) ) ;
rank: 143
score: 99.23469623766448
patch: if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref ) )
rank: 143
score: 99.22841389973958
patch: return ref . get CaMeL Node ( ) . is CaMeL Setter CaMeL Def ( ) ;
rank: 143
score: 98.64621988932292
patch: else { if continue ;
rank: 143
score: 98.5672836303711
patch: sb . append ( $STRING$ ) ;
rank: 143
score: 98.56372942243304
patch: return continue ; } finally {
rank: 143
score: 98.42754448784723
patch: logger . log ( ; return false ;
rank: 144
score: 99.23452919407895
patch: if ( . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ) {
rank: 144
score: 99.22832892922794
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( this ) ;
rank: 144
score: 98.56307220458984
patch: continue ; * / / * /
rank: 144
score: 98.56053924560547
patch: continue ; ; if continue ; ;
rank: 144
score: 98.55994415283203
patch: return is CaMeL True ( continue ;
rank: 144
score: 98.42464192708333
patch: continue parent . has CaMeL Child ( ;
rank: 145
score: 99.31867327008929
patch: return Node CaMeL Util . is CaMeL Statement CaMeL Block ( is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) ;
rank: 145
score: 99.29693312872024
patch: return is CaMeL Inlinable CaMeL Object ( parent . get CaMeL First CaMeL Child ( ) ) ;
rank: 145
score: 99.2344637784091
patch: if ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref ) )
rank: 145
score: 99.22765174278847
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( gramps . get CaMeL Assigned CaMeL Value ( ) ) ;
rank: 145
score: 99.15434337797619
patch: return gramps . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) ;
rank: 145
score: 98.64532470703125
patch: / * continue ; continue ;
rank: 145
score: 98.56285095214844
patch: continue ; / * if ( ;
rank: 145
score: 98.55999755859375
patch: continue ; / if continue ;
rank: 145
score: 98.4244384765625
patch: throw new Assertion CaMeL Error ( continue ;
rank: 146
score: 99.31794343171296
patch: return this . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Assigned CaMeL Value ( ) ) ;
rank: 146
score: 99.227099609375
patch: return ref . get CaMeL Parent ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 146
score: 99.15333140980114
patch: xml . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 146
score: 98.64495849609375
patch: else continue ; if continue ;
rank: 146
score: 98.56243024553571
patch: continue ; default * / ;
rank: 146
score: 98.55912017822266
patch: continue ; ; / if continue ;
rank: 146
score: 98.55766950334821
patch: } else if continue ; }
rank: 146
score: 98.42432996961806
patch: Class CaMeL Not CaMeL Found CaMeL Exception ;
rank: 147
score: 99.31757269965277
patch: return node . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Assigned CaMeL Value ( ) ) ;
rank: 147
score: 99.23372395833333
patch: if ( ! parent . get CaMeL First CaMeL Child ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 147
score: 98.64324079241071
patch: continue { continue ; continue ;
rank: 147
score: 98.55972726004464
patch: while ( ; ; ) {
rank: 147
score: 98.55875651041667
patch: continue ; if ; {
rank: 147
score: 98.55515834263393
patch: } else { if ; }
rank: 147
score: 98.42373996310764
patch: throw new Runtime CaMeL Exception ( $STRING$ +
rank: 148
score: 99.29522901965726
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Parent ( ) . get CaMeL First CaMeL Child ( ) ) ;
rank: 148
score: 99.22605543870192
patch: return ref . get CaMeL Parent ( ) . get CaMeL First CaMeL Child ( ) . is CaMeL Getter CaMeL Def ( ) ;
rank: 148
score: 99.15273649796195
patch: code . if ( parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 148
score: 98.64307403564453
patch: value . continue ; continue ; ;
rank: 148
score: 98.55942208426339
patch: ; ; * continue * /
rank: 148
score: 98.55504499162946
patch: continue / * * * /
rank: 148
score: 98.54999457465277
patch: continue ; ; if ; if continue ;
rank: 148
score: 98.42355685763889
patch: throw new Runtime CaMeL Exception ( null ;
rank: 149
score: 99.2951171875
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Parent CaMeL Node ( ) ) ;
rank: 149
score: 99.2336193266369
patch: return gramps . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ; }
rank: 149
score: 99.22538618607955
patch: if ( ref . get CaMeL First CaMeL Child ( ) . is CaMeL Getter CaMeL Def ( ) ) {
rank: 149
score: 99.15213173314145
patch: continue && ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 149
score: 98.64083862304688
patch: return false ; continue ; ; ;
rank: 149
score: 98.55892508370536
patch: while ( ; ) { ;
rank: 149
score: 98.5533955891927
patch: break ; continue ; }
rank: 149
score: 98.54978434244792
patch: continue ; if ; continue ; if ;
rank: 150
score: 99.31692270132211
patch: return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Assigned CaMeL Value ( ) ) ;
rank: 150
score: 99.22524192116477
patch: return ref . get CaMeL First CaMeL Child ( ) . is CaMeL Inlinable CaMeL Object ( ) ;
rank: 150
score: 99.15103759765626
patch: return ref . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL
rank: 150
score: 98.55765206473214
patch: continue - 1 . 0 ;
rank: 150
score: 98.55311584472656
patch: this . return continue ; continue ;
rank: 150
score: 98.54921177455357
patch: continue ; if ; break ;
rank: 151
score: 99.31674033717105
patch: return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( gramps ) ;
rank: 151
score: 99.29356282552084
patch: return gramps . get CaMeL First CaMeL Child ( ) != name ;
rank: 151
score: 99.22429456208882
patch: return gramps . get CaMeL Node ( ) . is CaMeL Getter CaMeL Def ( ) ;
rank: 151
score: 99.15103004092262
patch: super . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) . return false ;
rank: 151
score: 98.6403096516927
patch: } finally { continue ;
rank: 151
score: 98.55034637451172
patch: return false ; } else continue ;
rank: 151
score: 98.54586791992188
patch: / ; if continue ;
rank: 151
score: 98.41873604910714
patch: if ( continue = continue ;
rank: 152
score: 99.31569066540948
patch: return Node CaMeL Util . is CaMeL Statement CaMeL Block ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) ;
rank: 152
score: 99.23304443359375
patch: if ( ! parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) )
rank: 152
score: 99.22412109375
patch: return ref . get CaMeL First CaMeL Child ( ) . get CaMeL Node ( ) . is CaMeL Getter CaMeL Def ( ) ;
rank: 152
score: 99.15084706182066
patch: return ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 152
score: 98.63935198102679
patch: } continue ; ; continue ;
rank: 152
score: 98.5555191040039
patch: continue ; } else { return ;
rank: 152
score: 98.55020577566964
patch: return this . continue ; }
rank: 152
score: 98.54386138916016
patch: continue ; continue ; if break ;
rank: 152
score: 98.41722106933594
patch: continue new Error ( $STRING$ ) ;
rank: 153
score: 99.31555706521739
patch: return Node CaMeL Util . is CaMeL Statement CaMeL Block ( parent . get CaMeL Assigned CaMeL Value ( ) ) ;
rank: 153
score: 99.29296875
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) ;
rank: 153
score: 99.23302041330645
patch: if ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) ) ) {
rank: 153
score: 99.14996016652961
patch: return ref . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref ) ;
rank: 153
score: 98.63676452636719
patch: element . continue ; if continue ;
rank: 153
score: 98.55523681640625
patch: continue ; } else if ;
rank: 153
score: 98.54998779296875
patch: } else = continue ;
rank: 153
score: 98.54194471571181
patch: return continue ; continue ; if continue ;
rank: 153
score: 98.41621907552083
patch: LOG . error ( $STRING$ + name ;
rank: 154
score: 99.31521606445312
patch: return parent . is CaMeL Statement CaMeL Block ( ) ;
rank: 154
score: 99.23218883167614
patch: return parent . get CaMeL First CaMeL Child ( ) != parent . get CaMeL First CaMeL Child ( ) ;
rank: 154
score: 99.14991396949405
patch: code . if ( is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 154
score: 98.63660430908203
patch: continue { continue ; return null ;
rank: 154
score: 98.5548095703125
patch: continue ; / * / ;
rank: 154
score: 98.5403060913086
patch: if continue ; if ; continue ;
rank: 154
score: 98.414794921875
patch: if ( ; return false ) {
rank: 155
score: 99.22368706597223
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , ref . get CaMeL First CaMeL Child ( ) ) ;
rank: 155
score: 99.1490542763158
patch: return parent . get CaMeL First CaMeL Child ( ) . is CaMeL Getter CaMeL Def ( )
rank: 155
score: 98.6343765258789
patch: logger . err . println continue ;
rank: 155
score: 98.55474853515625
patch: continue ; ; } catch ( ;
rank: 155
score: 98.5478515625
patch: } if continue ; continue ; }
rank: 155
score: 98.54006522042411
patch: if ; * / continue ;
rank: 155
score: 98.41476779513889
patch: logger . error ( $STRING$ + ; }
rank: 156
score: 99.29202431126645
patch: return gramps . get CaMeL First CaMeL Child ( ) . is CaMeL Statement ( ) ;
rank: 156
score: 99.22777210582386
patch: if ( ! refs . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 156
score: 99.22252836681548
patch: return Node CaMeL Util . is CaMeL Getter CaMeL Def ( ref . get CaMeL Node ( ) ) ;
rank: 156
score: 98.63381522042411
patch: return true ; continue ; ;
rank: 156
score: 98.55358123779297
patch: / * ; ; ; * /
rank: 156
score: 98.54657854352679
patch: / * * / continue ;
rank: 156
score: 98.53894805908203
patch: return * continue ; if continue ;
rank: 156
score: 98.41469319661458
patch: if ( continue ; }
rank: 157
score: 99.31441004136029
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( n ) ;
rank: 157
score: 99.29169291834677
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Parent ( ) . get CaMeL First CaMeL Child ( ) ) ;
rank: 157
score: 99.22762398097827
patch: if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ) {
rank: 157
score: 98.63343048095703
patch: if continue ; continue ; ; ;
rank: 157
score: 98.5516128540039
patch: synchronized ( ; ) { continue ;
rank: 157
score: 98.5447998046875
patch: return false ; } } }
rank: 157
score: 98.53860812717014
patch: continue ; continue ; if continue ; /
rank: 157
score: 98.41312662760417
patch: if ; return false ;
rank: 158
score: 99.29147240423387
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Node ( ) . get CaMeL First CaMeL Child ( ) ) ;
rank: 158
score: 99.14790852864583
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( Node CaMeL Util . get CaMeL
rank: 158
score: 98.63204956054688
patch: super . continue ;
rank: 158
score: 98.55088806152344
patch: continue ; / * ; * /
rank: 158
score: 98.54438127790179
patch: continue * * * continue /
rank: 158
score: 98.53680419921875
patch: if continue ; continue ; } continue ;
rank: 158
score: 98.41297743055556
patch: synchronized ( continue ) { continue ; }
rank: 159
score: 99.29129831414474
patch: return gramps . get CaMeL First CaMeL Child ( ) . is CaMeL Call ( ) ;
rank: 159
score: 99.22734375
patch: if ( Node CaMeL Util . is CaMeL Statement CaMeL Block ( parent . get CaMeL First CaMeL Child ( ) ) ) {
rank: 159
score: 99.1479022686298
patch: return gramps . get CaMeL Prop ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref ) ;
rank: 159
score: 98.6285400390625
patch: continue ; continue ; ; ;
rank: 159
score: 98.55054473876953
patch: continue . * continue . * /
rank: 159
score: 98.5431137084961
patch: return false ; this . continue ;
rank: 159
score: 98.53654649522569
patch: continue ; } continue ; if continue ;
rank: 159
score: 98.41115993923611
patch: System . out . println ( continue ;
rank: 160
score: 99.313662109375
patch: return this . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Value ( ) ) ;
rank: 160
score: 99.291015625
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL First CaMeL Child ( ) == parent ) ;
rank: 160
score: 99.22730712890625
patch: if ( node . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ) {
rank: 160
score: 99.21813286675348
patch: return null . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ;
rank: 160
score: 99.1478125
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Parent CaMeL Node ( ) ) ;
rank: 160
score: 98.62826974051339
patch: else continue ; } continue ;
rank: 160
score: 98.55052693684895
patch: * / return false ;
rank: 160
score: 98.540771484375
patch: * * * /
rank: 160
score: 98.53626251220703
patch: / ; if continue ; continue ;
rank: 160
score: 98.40978131975446
patch: logger . error ( $STRING$ ;
rank: 161
score: 99.31357602719908
patch: return node . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) ) ;
rank: 161
score: 99.2262027138158
patch: super . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ; }
rank: 161
score: 99.21751708984375
patch: if ( ref . get CaMeL Node ( ) . is CaMeL Getter CaMeL Def ( ) ) {
rank: 161
score: 98.62811279296875
patch: i . out . println continue ;
rank: 161
score: 98.55022321428571
patch: ; / * ; * /
rank: 161
score: 98.54063415527344
patch: return continue ; } else if ;
rank: 161
score: 98.53425598144531
patch: if ; = continue ; continue ;
rank: 161
score: 98.40885416666667
patch: continue parent . has CaMeL Children ( ;
rank: 162
score: 99.29085811491936
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Assigned CaMeL Value ( ) == name ) ;
rank: 162
score: 99.22620210193452
patch: if ( ! this . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) )
rank: 162
score: 98.62688446044922
patch: try { continue ; break ; }
rank: 162
score: 98.54887390136719
patch: continue ; } ; return ret ;
rank: 162
score: 98.5330810546875
patch: / if continue ; break ;
rank: 162
score: 98.40882703993056
patch: continue value . / * continue ; }
rank: 163
score: 99.29067595108695
patch: return gramps . get CaMeL First CaMeL Child ( ) == parent . is CaMeL Getter CaMeL Def ( ) ;
rank: 163
score: 99.22551016971983
patch: if ( gramps . get CaMeL First CaMeL Child ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) )
rank: 163
score: 98.62510463169643
patch: continue ; } continue ; }
rank: 163
score: 98.54743957519531
patch: if ( name != null && ;
rank: 163
score: 98.53910609654018
patch: return true ; } else {
rank: 163
score: 98.53146362304688
patch: if continue ; } if continue ;
rank: 163
score: 98.40802001953125
patch: continue throws Illegal CaMeL State CaMeL Exception ;
rank: 164
score: 99.31039428710938
patch: return ! Node CaMeL Util . is CaMeL Statement CaMeL Block ( parent . get CaMeL First CaMeL Child ( ) ) ;
rank: 164
score: 99.22542055191532
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , ref . get CaMeL Assigned CaMeL Value ( ) ) ;
rank: 164
score: 99.21543666294643
patch: return Node CaMeL Util . is CaMeL Getter CaMeL Def ( ref . get CaMeL Parent ( ) ) ;
rank: 164
score: 98.62464904785156
patch: key . continue ; if continue ;
rank: 164
score: 98.54693603515625
patch: continue ; this . ;
rank: 164
score: 98.53064727783203
patch: continue ; continue ; continue ; return
rank: 164
score: 98.40763346354167
patch: throw new Runtime CaMeL Exception ( $STRING$ }
rank: 165
score: 99.31034545898437
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , gramps ) ;
rank: 165
score: 99.2147705078125
patch: return parent . get CaMeL First CaMeL Child ( ) . is CaMeL Setter CaMeL Def ( ) ;
rank: 165
score: 99.14664916992187
patch: return $STRING$ . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) ;
rank: 165
score: 98.62449645996094
patch: value . continue ; if null ;
rank: 165
score: 98.53740583147321
patch: continue * * * * ;
rank: 165
score: 98.53004673549107
patch: continue ; continue ; return ;
rank: 165
score: 98.40636528862848
patch: continue value . add CaMeL All ( ;
rank: 166
score: 99.289931640625
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Parent CaMeL Node ( ) ) ;
rank: 166
score: 99.22470092773438
patch: return gramps . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent ) ;
rank: 166
score: 99.21450570913461
patch: return ref . get CaMeL Node ( ) . get CaMeL Parent CaMeL Node ( ) . is CaMeL Getter CaMeL Def ( ) ;
rank: 166
score: 98.62374114990234
patch: value . continue ; return false ;
rank: 166
score: 98.54112548828125
patch: ; ; * /
rank: 166
score: 98.53709411621094
patch: System . out . println continue ;
rank: 166
score: 98.52957916259766
patch: continue ; continue ; ; if ;
rank: 166
score: 98.40613471137152
patch: throw new Illegal CaMeL State CaMeL Exception (
rank: 167
score: 99.309814453125
patch: return gramps . get CaMeL First CaMeL Child ( ) . get CaMeL Node ( ) . is CaMeL Getter CaMeL Def ( ) ;
rank: 167
score: 99.28984142485119
patch: return gramps . get CaMeL First CaMeL Child ( ) == parent . get CaMeL Node ( ) ;
rank: 167
score: 99.22468784877232
patch: if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Assigned CaMeL Value ( ) ) ) {
rank: 167
score: 99.14637974330357
patch: state . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) )
rank: 167
score: 98.62369210379464
patch: continue ; ; return false ;
rank: 167
score: 98.54027448381696
patch: if ( ; continue * /
rank: 167
score: 98.53582763671875
patch: * * * / } }
rank: 167
score: 98.52874755859375
patch: continue ; if ; { continue ;
rank: 167
score: 98.40605817522321
patch: try { return continue ; }
rank: 168
score: 99.28966891381049
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Assigned CaMeL Value ( ) == name ) ;
rank: 168
score: 99.21422809103261
patch: return Node CaMeL Util . is CaMeL Getter CaMeL Def ( ref . get CaMeL Assigned CaMeL Value ( ) ) ;
rank: 168
score: 99.1463264016544
patch: return ( gramps . get CaMeL First CaMeL Child ( ) == parent ) ;
rank: 168
score: 98.62330627441406
patch: item . continue ; if continue ;
rank: 168
score: 98.53992462158203
patch: continue - 1 . $NUMBER$ ; }
rank: 168
score: 98.5357437133789
patch: return continue ; } } if ;
rank: 168
score: 98.52699497767857
patch: continue ; continue ; System ;
rank: 169
score: 99.30959848257211
patch: return ! parent . is CaMeL Getter CaMeL Def ( ) ;
rank: 169
score: 99.2236328125
patch: if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) { {
rank: 169
score: 99.2140362079327
patch: return ref . get CaMeL Node ( ) . get CaMeL First CaMeL Child ( ) . is CaMeL Getter CaMeL Def ( ) ;
rank: 169
score: 98.62216186523438
patch: else { continue ; break ; }
rank: 169
score: 98.53948974609375
patch: continue ; / * /
rank: 169
score: 98.5355733235677
patch: } else return true ;
rank: 169
score: 98.40422905815973
patch: throw new Assertion CaMeL Error ( this ;
rank: 170
score: 99.30819038722827
patch: return gramps . get CaMeL First CaMeL Child ( ) == ref . get CaMeL First CaMeL Child ( ) ;
rank: 170
score: 99.22325478830645
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , ref . get CaMeL First CaMeL Child ( ) ) ;
rank: 170
score: 98.62173461914062
patch: out . continue ; continue ; }
rank: 170
score: 98.53469412667411
patch: } if ; return false ;
rank: 170
score: 98.52106584821429
patch: if continue ; continue ; int
rank: 170
score: 98.40400390625
patch: continue = continue ;
rank: 171
score: 99.30797887731481
patch: return parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL First CaMeL Child ( ) ) ;
rank: 171
score: 99.21156819661458
patch: if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL
rank: 171
score: 99.1453857421875
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref ) ) {
rank: 171
score: 98.62009102957589
patch: } continue ; for continue ;
rank: 171
score: 98.53492954799107
patch: continue null ; } * /
rank: 171
score: 98.51968383789062
patch: if continue ; else if continue ;
rank: 171
score: 98.40326538085938
patch: continue return false ;
rank: 172
score: 99.30766858552632
patch: return ! parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ;
rank: 172
score: 99.22267578125
patch: if ( Node CaMeL Util . is CaMeL Get CaMeL Prop ( parent . get CaMeL First CaMeL Child ( ) ) ) {
rank: 172
score: 99.14532470703125
patch: return gramps . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref ) ;
rank: 172
score: 98.61961146763393
patch: continue { } continue ; }
rank: 172
score: 98.53353881835938
patch: continue ; return false ;
rank: 172
score: 98.53120930989583
patch: } else { return ;
rank: 172
score: 98.51449148995536
patch: continue ; if continue ; /
rank: 172
score: 98.40216064453125
patch: for ( ; ; ; )
rank: 173
score: 99.30745723329741
patch: return parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) == name ) ;
rank: 173
score: 99.28842268318965
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Node ( ) . get CaMeL Parent ( ) ) ;
rank: 173
score: 99.22247783954327
patch: if ( ! Node CaMeL Util . is CaMeL Statement CaMeL Block ( parent . get CaMeL Assigned CaMeL Value ( ) ) ) {
rank: 173
score: 99.1451999830163
patch: exception . if ( parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 173
score: 98.53306361607143
patch: / * continue ; * /
rank: 173
score: 98.53010559082031
patch: if ( continue ; return false ;
rank: 173
score: 98.51026153564453
patch: continue ; } continue ; continue ;
rank: 173
score: 98.40007672991071
patch: if ( continue || continue )
rank: 174
score: 99.2211383322011
patch: if ( Node CaMeL Util . is CaMeL Statement CaMeL Block ( ref . get CaMeL Node ( ) ) ) {
rank: 174
score: 99.14442661830357
patch: exception . if ( is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 174
score: 98.61783272879464
patch: this . continue ; continue ;
rank: 174
score: 98.53036934988839
patch: continue / * continue * /
rank: 174
score: 98.52933175223214
patch: } else continue ; continue ;
rank: 174
score: 98.50968170166016
patch: continue ; continue ; continue ; else
rank: 174
score: 98.39927455357143
patch: java . lang . continue ;
rank: 175
score: 99.22085173233695
patch: return ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref ) ) ;
rank: 175
score: 98.61470249720982
patch: try { continue ; ; ;
rank: 175
score: 98.52822440011161
patch: continue * / / * ;
rank: 175
score: 98.52816009521484
patch: continue * * * continue continue ;
rank: 175
score: 98.50704956054688
patch: continue ; continue ; if ; }
rank: 175
score: 98.39913601345486
patch: continue parent . set CaMeL Property ( ;
rank: 176
score: 99.28682002314815
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Assigned CaMeL Value ( ) == name ) ;
rank: 176
score: 99.2206394361413
patch: if ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( refs ) ) {
rank: 176
score: 99.21026611328125
patch: return ref . get CaMeL Parent ( ) . get CaMeL Parent ( ) . is CaMeL Getter CaMeL Def ( ) ;
rank: 176
score: 99.14337158203125
patch: return ! ref . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 176
score: 98.5262451171875
patch: continue ; ; } if ( ;
rank: 176
score: 98.50694274902344
patch: continue ; continue ; ; continue ;
rank: 177
score: 99.30690696022727
patch: return gramps . get CaMeL First CaMeL Child ( ) . is CaMeL Getter CaMeL Def ( ) ) ;
rank: 177
score: 99.1424560546875
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . ) ;
rank: 177
score: 98.61346435546875
patch: } continue ; continue ; continue ;
rank: 177
score: 98.52778625488281
patch: return ; continue ; } continue ;
rank: 177
score: 98.52427673339844
patch: continue * / continue * * /
rank: 177
score: 98.50276184082031
patch: / / continue ; if continue ;
rank: 177
score: 98.3978042602539
patch: continue throws Illegal CaMeL Argument CaMeL Exception
rank: 178
score: 99.21987915039062
patch: if ( refs . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ) {
rank: 178
score: 99.20956655649039
patch: if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Node ( ) ) ) {
rank: 178
score: 99.14219599184783
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref == name ) ;
rank: 178
score: 98.52737426757812
patch: continue * * / if continue ;
rank: 178
score: 98.39740668402777
patch: this throw new Runtime CaMeL Exception ( ;
rank: 179
score: 99.2858654203869
patch: return Node CaMeL Util . is CaMeL Statement ( parent . get CaMeL First CaMeL Child ( ) ) ;
rank: 179
score: 99.21987619707662
patch: if ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL First CaMeL Child ( ) ) ) {
rank: 179
score: 99.14197794596355
patch: return Node CaMeL Util . is CaMeL Getter CaMeL Def ( gramps . get CaMeL First CaMeL Child ( ) ) ;
rank: 179
score: 98.61101531982422
patch: else { out . continue ; }
rank: 179
score: 98.52721405029297
patch: continue * * * * / }
rank: 179
score: 98.5025863647461
patch: continue ; continue ; if continue .
rank: 179
score: 98.39683702256944
patch: continue throws Illegal CaMeL Argument CaMeL Exception ;
rank: 180
score: 99.30618851273148
patch: return $STRING$ . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Assigned CaMeL Value ( ) ) ;
rank: 180
score: 99.28580204133064
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL First CaMeL Child ( ) == parent ) ;
rank: 180
score: 98.60960170200893
patch: else { for continue ; }
rank: 180
score: 98.5270004272461
patch: return null ; } } continue ;
rank: 180
score: 98.5235824584961
patch: is CaMeL Get CaMeL Prop ( ;
rank: 180
score: 98.4988784790039
patch: continue ; ; if continue ; else
rank: 180
score: 98.39358520507812
patch: continue / * continue ;
rank: 181
score: 99.2857601768092
patch: return pass . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 181
score: 99.21965225883152
patch: if ( Node CaMeL Util . is CaMeL Statement CaMeL Block ( ref . get CaMeL Parent ( ) ) ) {
rank: 181
score: 99.14178107766544
patch: boolean is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 181
score: 98.60926513671875
patch: else continue ; }
rank: 181
score: 98.52620442708333
patch: return null ; } }
rank: 181
score: 98.52291870117188
patch: continue * / if ( ; ;
rank: 181
score: 98.49851771763393
patch: continue ; if if continue ;
rank: 181
score: 98.39249420166016
patch: if ( ; if ( continue )
rank: 182
score: 99.2187167080966
patch: if ( this . ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 182
score: 99.20845992476852
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Parent ( ) ) ;
rank: 182
score: 99.14116876775569
patch: body . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 182
score: 98.60761369977679
patch: else { if continue ; ;
rank: 182
score: 98.52535574776786
patch: if ( continue ; break ;
rank: 182
score: 98.52138846261161
patch: / * ; * * /
rank: 182
score: 98.49733189174107
patch: if continue ; continue ; try
rank: 183
score: 99.3054832175926
patch: return name . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Assigned CaMeL Value ( ) ) ;
rank: 183
score: 99.28477647569444
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) == null ) ;
rank: 183
score: 99.21851695667614
patch: if ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ) {
rank: 183
score: 99.14109497070312
patch: return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , refs ) ;
rank: 183
score: 98.60702514648438
patch: continue { if continue ; continue ;
rank: 183
score: 98.52069091796875
patch: continue ; if ( ; continue ;
rank: 183
score: 98.495849609375
patch: break ; if continue ;
rank: 183
score: 98.39105224609375
patch: continue ret = continue ; }
rank: 184
score: 99.21846516927083
patch: if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Node ( ) ) ) {
rank: 184
score: 98.60701751708984
patch: logger . error ( continue ) ;
rank: 184
score: 98.5244140625
patch: continue * * * * continue /
rank: 184
score: 98.51863098144531
patch: continue ; } * / continue ;
rank: 184
score: 98.49301147460938
patch: continue ; continue ; = continue ;
rank: 184
score: 98.39094761439732
patch: try { continue ; } finally
rank: 185
score: 99.30498046875
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( target . get CaMeL First CaMeL Child ( ) ) ;
rank: 185
score: 99.28395238415948
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Node ( ) . get CaMeL Parent ( ) ) ;
rank: 185
score: 99.21785191127232
patch: if ( gramps . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Node ( ) ) ) {
rank: 185
score: 99.20728600543478
patch: return Node CaMeL Util . is CaMeL Statement CaMeL Block ( ref . get CaMeL Parent CaMeL Node ( ) ) ;
rank: 185
score: 99.13953575721153
patch: return gramps . is CaMeL Get CaMeL Prop ( ) ;
rank: 185
score: 98.60568237304688
patch: continue continue ; } if continue ;
rank: 185
score: 98.52410888671875
patch: * * * * * ;
rank: 185
score: 98.51825823102679
patch: if ( ; ; * /
rank: 185
score: 98.49242401123047
patch: continue ; if ; continue ; /
rank: 185
score: 98.39015706380208
patch: continue value . continue ;
rank: 186
score: 99.2838846842448
patch: return . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Node ( ) ) ;
rank: 186
score: 99.21759033203125
patch: } if ( is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 186
score: 99.13947496916118
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , refs ) ;
rank: 186
score: 98.60536193847656
patch: continue ; try { continue ; }
rank: 186
score: 98.52409144810268
patch: } if ( continue continue ;
rank: 186
score: 98.51716613769531
patch: continue ; } else { ; }
rank: 186
score: 98.49019949776786
patch: continue ; } ; continue ;
rank: 186
score: 98.3885498046875
patch: continue value . if ( ; continue ;
rank: 187
score: 99.30434233566811
patch: return this . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) == name ) ;
rank: 187
score: 99.28298514229911
patch: return ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Node ( ) ) ;
rank: 187
score: 99.20598493303571
patch: return parent . is CaMeL Setter CaMeL Def ( parent . get CaMeL First CaMeL Child ( ) ) ;
rank: 187
score: 99.13947088068181
patch: params . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 187
score: 98.60409545898438
patch: / continue ; continue ;
rank: 187
score: 98.52389526367188
patch: * * * * * * ;
rank: 187
score: 98.5167948404948
patch: * / if ( ;
rank: 187
score: 98.48994445800781
patch: } if continue ; if continue ;
rank: 187
score: 98.38758850097656
patch: Log . error ( $STRING$ ) ;
rank: 188
score: 99.30333794487848
patch: return this . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ;
rank: 188
score: 99.21672952586206
patch: if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( gramps . get CaMeL First CaMeL Child ( ) ) ) {
rank: 188
score: 99.1391960592831
patch: ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 188
score: 98.60401407877605
patch: continue {
rank: 188
score: 98.52322823660714
patch: } return false ; continue ;
rank: 188
score: 98.51477922712054
patch: if ( ; / * ;
rank: 188
score: 98.48969268798828
patch: else if continue ; if continue ;
rank: 189
score: 99.30294363839286
patch: return gramps . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL First CaMeL Child ( ) ) ;
rank: 189
score: 99.28066184303977
patch: return ! Node CaMeL Util . is CaMeL Statement CaMeL Block ( ref . get CaMeL Parent ( ) ) ;
rank: 189
score: 99.13917178199405
patch: schema . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) )
rank: 189
score: 98.52318572998047
patch: return continue ; else return continue ;
rank: 189
score: 98.51393127441406
patch: continue ; } if ( ; ;
rank: 189
score: 98.48918914794922
patch: continue ; if ; continue ; return
rank: 189
score: 98.38384246826172
patch: continue throw new Runtime CaMeL Exception ;
rank: 190
score: 99.20549858940973
patch: return target . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ;
rank: 190
score: 99.13901774088542
patch: return Node CaMeL Util . is CaMeL Statement CaMeL Block ( gramps . get CaMeL Assigned CaMeL Value ( ) ) ;
rank: 190
score: 98.52303641183036
patch: return false ; break ; }
rank: 190
score: 98.5119120279948
patch: continue ; } catch ;
rank: 190
score: 98.48883056640625
patch: / continue ; if continue ;
rank: 190
score: 98.38351876395089
patch: continue false ret = true ;
rank: 191
score: 99.28060302734374
patch: return gramps . is CaMeL Call ( parent . get CaMeL First CaMeL Child ( ) ) ;
rank: 191
score: 99.20439091435185
patch: if ( is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL First CaMeL Child ( ) ) ) {
rank: 191
score: 99.13860120271382
patch: return gramps . is CaMeL Call ( ) . is CaMeL Getter CaMeL Def ( ) ;
rank: 191
score: 98.52259063720703
patch: return get CaMeL State ( ) ;
rank: 191
score: 98.51182338169643
patch: / * * continue * /
rank: 191
score: 98.48795863560268
patch: if continue ; continue ; System
rank: 191
score: 98.38160923549107
patch: continue this . return false ;
rank: 192
score: 99.30259874131944
patch: return node . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ;
rank: 192
score: 99.280517578125
patch: return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) == name ) ;
rank: 192
score: 99.21544471153847
patch: if ( ! Node CaMeL Util . is CaMeL Get CaMeL Prop ( parent . get CaMeL First CaMeL Child ( ) ) ) {
rank: 192
score: 98.60262625558036
patch: for ( $STRING$ ; continue ;
rank: 192
score: 98.52175903320312
patch: } else return null ;
rank: 192
score: 98.51066371372768
patch: continue * / ; * /
rank: 192
score: 98.3810526529948
patch: continue false = false ;
rank: 193
score: 99.3016716452206
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( null ) ;
rank: 193
score: 99.28043859145221
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( $STRING$ ) ;
rank: 193
score: 99.2039325420673
patch: return ref . get CaMeL Parent ( ) . get CaMeL First CaMeL Child ( ) . is CaMeL Setter CaMeL Def ( ) ;
rank: 193
score: 99.13807744565217
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , refs ) ;
rank: 193
score: 98.60243733723958
patch: else { continue continue ;
rank: 193
score: 98.52104840959821
patch: return false ; return true ;
rank: 193
score: 98.48471069335938
patch: System ; continue ; if continue ;
rank: 193
score: 98.38002522786458
patch: throw new Unsupported CaMeL Operation CaMeL Exception (
rank: 194
score: 99.30094401041667
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( target ) ;
rank: 194
score: 99.2148770419034
patch: if ( ! VAR . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 194
score: 99.2018359375
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . is CaMeL Getter CaMeL Def ( ) ) ;
rank: 194
score: 99.13755289713542
patch: return ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , name ) ;
rank: 194
score: 98.60237884521484
patch: catch ( $STRING$ ) { continue ;
rank: 194
score: 98.52099609375
patch: return continue ; } else return ;
rank: 194
score: 98.50730590820312
patch: return true ; }
rank: 194
score: 98.48430524553571
patch: continue ; if ; / /
rank: 194
score: 98.3746337890625
patch: continue / * continue ; }
rank: 195
score: 99.21444209929436
patch: if ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Assigned CaMeL Value ( ) ) ) {
rank: 195
score: 99.2015380859375
patch: return name . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ;
rank: 195
score: 99.13743896484375
patch: super . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) . break ;
rank: 195
score: 98.60235595703125
patch: continue { continue ; return false ;
rank: 195
score: 98.52064514160156
patch: return null ; } return false ;
rank: 195
score: 98.50686645507812
patch: continue ; / * * continue ;
rank: 196
score: 99.279541015625
patch: return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Node ( ) ) ;
rank: 196
score: 99.21439034598214
patch: if ( ! this . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ) {
rank: 196
score: 99.13735961914062
patch: return parent . is CaMeL Call ( ) ;
rank: 196
score: 98.50636291503906
patch: continue * / * continue * /
rank: 196
score: 98.48110961914062
patch: continue ; return continue ;
rank: 196
score: 98.3718490600586
patch: continue value . / * continue ;
rank: 197
score: 99.21438914331897
patch: if ( ! parent . get CaMeL First CaMeL Child ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ) {
rank: 197
score: 99.2009785970052
patch: if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL
rank: 197
score: 99.13726515997024
patch: return ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name )
rank: 197
score: 98.60170200892857
patch: continue { continue ; / /
rank: 197
score: 98.51893833705357
patch: return continue ; return continue ;
rank: 197
score: 98.50563049316406
patch: continue ; ; } else { ;
rank: 197
score: 98.47972760881696
patch: for continue ; if continue ;
rank: 197
score: 98.37119838169643
patch: continue value = continue ; }
rank: 198
score: 99.29990456321023
patch: return ! Node CaMeL Util . is CaMeL Statement CaMeL Block ( ref . get CaMeL Node ( ) ) ;
rank: 198
score: 99.21405639648438
patch: if ( ref . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) )
rank: 198
score: 99.20093834918478
patch: if ( gramps . get CaMeL First CaMeL Child ( ) . is CaMeL Setter CaMeL Def ( ) ) {
rank: 198
score: 99.13688151041667
patch: return gramps . get CaMeL First CaMeL Child ( ) . is CaMeL Getter CaMeL Def ( ) )
rank: 198
score: 98.60169328962054
patch: continue ; for continue ; ;
rank: 198
score: 98.51881626674107
patch: return ; } return false ;
rank: 198
score: 98.50560760498047
patch: continue ; / * * / ;
rank: 198
score: 98.47880336216518
patch: if continue ; continue ; {
rank: 199
score: 99.29942321777344
patch: return ! Node CaMeL Util . is CaMeL Statement CaMeL Block ( name ) ;
rank: 199
score: 99.2134945518092
patch: if ( is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent ) ) {
rank: 199
score: 99.1361019736842
patch: return ( parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name )
rank: 199
score: 98.60143171037946
patch: continue { continue ; ; ;
rank: 199
score: 98.51838684082031
patch: * * * * continue * /
rank: 199
score: 98.50527954101562
patch: continue ; * / return true ;
rank: 199
score: 98.47803751627605
patch: if ; = continue ;
rank: 199
score: 98.36934407552083
patch: if ( ; break ;
rank: 200
score: 99.29940359933036
patch: return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ) ;
rank: 200
score: 99.279228515625
patch: return parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Node ( ) ) ;
rank: 200
score: 99.21292246942934
patch: if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent ) )
rank: 200
score: 99.20067420372597
patch: if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Node CaMeL
rank: 200
score: 99.1353759765625
patch: switch ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) )
rank: 200
score: 98.6011962890625
patch: continue continue ; continue ; ;
rank: 200
score: 98.51806640625
patch: continue / * * / continue ;
rank: 200
score: 98.50483049665179
patch: continue ; ; if ( ;
rank: 200
score: 98.47450256347656
patch: continue ; continue ; continue ; /
rank: 200
score: 98.36872100830078
patch: continue log . error ( $STRING$ ;
rank: 201
score: 99.13496537642045
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , ) ;
rank: 201
score: 98.60088348388672
patch: finally { continue ; if continue ;
rank: 201
score: 98.51673889160156
patch: * * * * * continue /
rank: 201
score: 98.50396728515625
patch: continue * / }
rank: 201
score: 98.47423553466797
patch: continue ; continue ; break ; ;
rank: 201
score: 98.36710902622768
patch: continue value . return false ;
rank: 202
score: 99.2979403409091
patch: return this . parent . get CaMeL First CaMeL Child ( ) . is CaMeL Getter CaMeL Def ( ) ;
rank: 202
score: 99.21258544921875
patch: if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) )
rank: 202
score: 99.20052083333333
patch: return ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref ) ) ;
rank: 202
score: 99.13471069335938
patch: super . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) . continue ;
rank: 202
score: 98.60086059570312
patch: i . continue ; } continue ;
rank: 202
score: 98.51487731933594
patch: } else = continue ; continue ;
rank: 202
score: 98.47296142578125
patch: / * continue ; if continue ;
rank: 202
score: 98.36697387695312
patch: continue ; } if ; continue ;
rank: 203
score: 99.29756221064815
patch: return target . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Assigned CaMeL Value ( ) ) ;
rank: 203
score: 99.27669921875
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( node . get CaMeL First CaMeL Child ( ) ) ;
rank: 203
score: 99.1346435546875
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) {
rank: 203
score: 98.60004534040179
patch: continue { return false ; }
rank: 203
score: 98.51418050130208
patch: return ; return continue ;
rank: 203
score: 98.50227573939732
patch: continue ; default if ( ;
rank: 203
score: 98.47004699707031
patch: continue ; if continue ; while ;
rank: 203
score: 98.36662946428571
patch: if ( ; return continue )
rank: 204
score: 99.29745628720238
patch: return ! parent . get CaMeL First CaMeL Child ( ) . is CaMeL Getter CaMeL Def ( ) ;
rank: 204
score: 99.27619039601294
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Parent CaMeL Node ( ) ) ;
rank: 204
score: 99.21122685185185
patch: if ( parent . get CaMeL Parent ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 204
score: 99.199296875
patch: return parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Node ( ) ) ;
rank: 204
score: 99.13426795372597
patch: return parent . get CaMeL Prop ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) ;
rank: 204
score: 98.59915161132812
patch: value { continue ; }
rank: 204
score: 98.51315743582589
patch: return false ; return continue ;
rank: 204
score: 98.50088065011161
patch: continue ; / * continue :
rank: 204
score: 98.46939849853516
patch: continue ; continue ; if ; ;
rank: 204
score: 98.36579895019531
patch: continue [ 0 ] . continue ;
rank: 205
score: 99.29733712332589
patch: return parent . get CaMeL First CaMeL Child ( ) . get CaMeL First CaMeL Child ( ) . is CaMeL Getter CaMeL Def ( ) ;
rank: 205
score: 99.27615559895834
patch: return gramps . get CaMeL First CaMeL Child ( ) == null ;
rank: 205
score: 99.13425699869792
patch: return ref . is CaMeL Get CaMeL Prop ( ) ;
rank: 205
score: 98.59890747070312
patch: index . continue ; if continue ;
rank: 205
score: 98.51222229003906
patch: return true ; } return false ;
rank: 205
score: 98.50068664550781
patch: continue ; } try { continue ;
rank: 205
score: 98.46784210205078
patch: continue ; if ; / / /
rank: 206
score: 99.29697487571023
patch: return ( parent . get CaMeL First CaMeL Child ( ) . is CaMeL Getter CaMeL Def ( ) ) ;
rank: 206
score: 99.27615017361111
patch: return this . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL First CaMeL Child ( ) ) ;
rank: 206
score: 99.210703125
patch: if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) { {
rank: 206
score: 99.19770951704545
patch: if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Child CaMeL
rank: 206
score: 99.13363647460938
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name .
rank: 206
score: 98.59866768973214
patch: continue { continue continue ; }
rank: 206
score: 98.51201629638672
patch: * * * continue * * /
rank: 206
score: 98.49830627441406
patch: continue ; / * continue ; ;
rank: 206
score: 98.4666519165039
patch: continue ; continue ; if / /
rank: 206
score: 98.35662841796875
patch: continue get CaMeL Parent ( ) ;
rank: 207
score: 99.2969280740489
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . to CaMeL String ( ) ) ;
rank: 207
score: 99.13324529474431
patch: cm . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 207
score: 98.59786551339286
patch: continue { continue ; break ;
rank: 207
score: 98.51090785435268
patch: * * * * / /
rank: 207
score: 98.49798583984375
patch: ; / * continue ;
rank: 207
score: 98.46573311941964
patch: if ; = ; continue ;
rank: 207
score: 98.35563151041667
patch: continue parent . continue ;
rank: 208
score: 99.29679790296052
patch: ret = parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ;
rank: 208
score: 99.27536010742188
patch: return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Node ( ) ) ;
rank: 208
score: 99.21034071180556
patch: if ( is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL First CaMeL Child ( ) ) ) {
rank: 208
score: 99.19644325657895
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , parent ) ;
rank: 208
score: 99.13323211669922
patch: return gramps . get CaMeL First CaMeL Child ( ) == parent ) ;
rank: 208
score: 98.59786551339286
patch: else { return null ; }
rank: 208
score: 98.5099385579427
patch: return continue ; } else
rank: 208
score: 98.49715423583984
patch: continue ; } if ( ret ;
rank: 208
score: 98.46489606584821
patch: return ; if continue ; ;
rank: 208
score: 98.35543387276786
patch: if ; return false ; }
rank: 209
score: 99.29595477764423
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) == ) ;
rank: 209
score: 99.210205078125
patch: if ( Node CaMeL Util . is CaMeL Statement CaMeL Block ( ref ) ) {
rank: 209
score: 99.19618626644737
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref , name ) ;
rank: 209
score: 98.59779575892857
patch: } catch continue ; continue ;
rank: 209
score: 98.49657185872395
patch: if ( parent . ;
rank: 209
score: 98.46444702148438
patch: if continue ; continue ; while ;
rank: 209
score: 98.35454450334821
patch: if ( ; break ; }
rank: 210
score: 99.21014959161931
patch: for ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) )
rank: 210
score: 99.13099254261364
patch: se . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 210
score: 98.50950622558594
patch: return continue ; } return true ;
rank: 210
score: 98.49575805664062
patch: * ; ; * /
rank: 210
score: 98.35111781529018
patch: if ; if ( continue )
rank: 211
score: 99.29546760110294
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( key ) ;
rank: 211
score: 99.27411941002156
patch: return Node CaMeL Util . is CaMeL Statement CaMeL Block ( ref . get CaMeL First CaMeL Child ( ) . get CaMeL Parent ( ) ) ;
rank: 211
score: 99.20980495876736
patch: if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name )
rank: 211
score: 99.13095092773438
patch: return . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Node ( ) ) ;
rank: 211
score: 98.50886535644531
patch: continue * * * continue * /
rank: 211
score: 98.49562072753906
patch: continue ; } catch ( Exception ;
rank: 211
score: 98.46221051897321
patch: continue ; continue ; println ;
rank: 211
score: 98.35103934151786
patch: throw new Error ( $STRING$ ;
rank: 212
score: 99.20968807444854
patch: if ( is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name )
rank: 212
score: 99.13082275390624
patch: return this . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) ;
rank: 212
score: 98.49365234375
patch: continue ; default * / * /
rank: 212
score: 98.46199035644531
patch: continue ; continue ; if ; continue
rank: 212
score: 98.34941755022321
patch: throw new Throwable ( ) ;
rank: 213
score: 99.27377614667338
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) == parent ) ;
rank: 213
score: 99.20955810546874
patch: if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( refs ) ) {
rank: 213
score: 99.19536884014423
patch: if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Parent ( ) ) ) {
rank: 213
score: 98.59586334228516
patch: value . get CaMeL Parent ( ;
rank: 213
score: 98.50833892822266
patch: return true ; } } continue ;
rank: 213
score: 98.49242292131696
patch: / * * ; * /
rank: 213
score: 98.46176583426339
patch: continue ; if continue ; return
rank: 213
score: 98.34873046875
patch: continue return true ;
rank: 214
score: 99.27353200604838
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) . get CaMeL Value ( ) ) ;
rank: 214
score: 99.2095458984375
patch: if ( gramps . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) ) ) {
rank: 214
score: 99.13075949928977
patch: proc . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 214
score: 98.59517124720982
patch: super . continue ; continue ;
rank: 214
score: 98.50833565848214
patch: return continue ; } } }
rank: 214
score: 98.489501953125
patch: continue . * / ;
rank: 214
score: 98.46098327636719
patch: continue ; ; } if continue ;
rank: 214
score: 98.34766387939453
patch: if ( ; return true ) {
rank: 215
score: 99.20945046164773
patch: return ref . get CaMeL First CaMeL Child ( ) != parent . get CaMeL First CaMeL Child ( ) ;
rank: 215
score: 99.19505726207386
patch: return ref . get CaMeL First CaMeL Child ( ) == ref . get CaMeL First CaMeL Child ( ) ;
rank: 215
score: 99.13017442491319
patch: return ) is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 215
score: 98.5927734375
patch: continue ; try ; if continue ;
rank: 215
score: 98.5081787109375
patch: break ; continue ;
rank: 215
score: 98.48939732142857
patch: continue null ; } else {
rank: 215
score: 98.46070098876953
patch: return continue ; ; if continue ;
rank: 216
score: 99.27285661368535
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Node ( ) . get CaMeL Parent ( ) ) ;
rank: 216
score: 99.194970703125
patch: if ( gramps . is CaMeL Getter CaMeL Def ( ) ) {
rank: 216
score: 99.12903849283855
patch: return ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , ref ) ;
rank: 216
score: 98.59228515625
patch: continue ; continue ; return null ;
rank: 216
score: 98.50794474283855
patch: } else throw null ;
rank: 216
score: 98.48810577392578
patch: continue * / / * / ;
rank: 216
score: 98.46037946428571
patch: continue ; if continue ; try
rank: 216
score: 98.34490966796875
patch: continue ret = true ; continue ;
rank: 217
score: 99.2928515625
patch: return name . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Value ( ) ) ;
rank: 217
score: 99.27236643145162
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL First CaMeL Child ( ) . get CaMeL Parent ( ) ) ;
rank: 217
score: 99.2092578125
patch: } if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 217
score: 98.59107971191406
patch: continue { out . continue ; }
rank: 217
score: 98.50783865792411
patch: return ( continue ; continue ;
rank: 217
score: 98.45757184709821
patch: if continue ; return continue ;
rank: 217
score: 98.34357452392578
patch: continue ; } if ( continue ;
rank: 218
score: 99.29249331825658
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name == null ) ;
rank: 218
score: 99.12823486328125
patch: return ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name )
rank: 218
score: 98.59104919433594
patch: continue { continue ; } ; *
rank: 218
score: 98.45397186279297
patch: continue ; continue ; ; break ;
rank: 219
score: 99.27132686491936
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Node ( ) . get CaMeL Parent CaMeL Node ( ) ) ;
rank: 219
score: 99.20882686491936
patch: if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL First CaMeL Child ( ) ) )
rank: 219
score: 99.19425101902173
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref , parent ) ;
rank: 219
score: 99.12814812911184
patch: return gramps . is CaMeL Call ( ) . is CaMeL Get CaMeL Prop ( ) ;
rank: 219
score: 98.58958435058594
patch: out . out . println continue ;
rank: 219
score: 98.50628662109375
patch: return false ; for continue ;
rank: 219
score: 98.45365905761719
patch: if ; if continue ; break ;
rank: 219
score: 98.34156036376953
patch: log . log . log ( ;
rank: 220
score: 99.2920703125
patch: return Node CaMeL Util . is CaMeL Statement CaMeL Block ( is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ) ;
rank: 220
score: 99.20871206430289
patch: if ( parent . get CaMeL First CaMeL Child ( ) ;
rank: 220
score: 99.19383826622597
patch: if ( ! Node CaMeL Util . is CaMeL Getter CaMeL Def ( ref . get CaMeL First CaMeL Child ( ) ) ) {
rank: 220
score: 98.58922729492187
patch: else continue ; ;
rank: 220
score: 98.50599670410156
patch: / * * * / continue ;
rank: 220
score: 98.48479352678571
patch: continue ; this . continue ;
rank: 220
score: 98.45096588134766
patch: else ; continue ; if continue ;
rank: 220
score: 98.34152657645089
patch: result = true ; continue ;
rank: 221
score: 99.29197782628677
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( index ) ;
rank: 221
score: 99.27100513599537
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL First CaMeL Child ( ) == name ) ;
rank: 221
score: 99.19322791466347
patch: if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Assigned CaMeL
rank: 221
score: 99.127197265625
patch: schema . if ( is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 221
score: 98.58869280133929
patch: } continue ; continue ; /
rank: 221
score: 98.50440470377605
patch: } } if continue ;
rank: 221
score: 98.48307291666667
patch: continue * continue * /
rank: 221
score: 98.44959259033203
patch: if ; continue ; continue ; }
rank: 221
score: 98.34126281738281
patch: x $NUMBER$ . / * continue ;
rank: 222
score: 99.29184751157408
patch: return type . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) ) ;
rank: 222
score: 99.20780181884766
patch: if ( parent . get CaMeL First CaMeL Child ( ) != name ) {
rank: 222
score: 98.58775329589844
patch: super . continue ; if continue ;
rank: 222
score: 98.50296020507812
patch: } if ;
rank: 222
score: 98.48305838448661
patch: continue ; ; / * ;
rank: 222
score: 98.44620186941964
patch: continue ; continue ; } /
rank: 222
score: 98.34120396205357
patch: try { continue false ; }
rank: 223
score: 99.29172877261513
patch: return parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( type ) ;
rank: 223
score: 99.19161283052884
patch: ref . if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 223
score: 99.12691497802734
patch: return ( parent . get CaMeL First CaMeL Child ( ) == parent ) ;
rank: 223
score: 98.5875244140625
patch: logger . error continue ; continue ;
rank: 223
score: 98.50245012555804
patch: * * / if continue ;
rank: 223
score: 98.48063151041667
patch: while ( ; ; )
rank: 223
score: 98.44601876395089
patch: continue ; continue ; ; /
rank: 223
score: 98.341064453125
patch: throw new Assertion CaMeL Error ( $STRING$
rank: 224
score: 99.29161658653847
patch: return gramps . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Value ( ) ) ;
rank: 224
score: 99.26987777217742
patch: return Node CaMeL Util . is CaMeL Statement CaMeL Block ( ref . get CaMeL First CaMeL Child ( ) . get CaMeL First CaMeL Child ( ) ) ;
rank: 224
score: 99.20634765625
patch: if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Parent ( ) ) ) {
rank: 224
score: 99.19157858455883
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( value ) ;
rank: 224
score: 99.12681995738636
patch: return ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( id ) ;
rank: 224
score: 98.58740234375
patch: this . continue ; ;
rank: 224
score: 98.50236293247768
patch: return ; continue ; continue ;
rank: 224
score: 98.47984967912946
patch: ; ; * / * /
rank: 224
score: 98.44411795479911
patch: continue ; ; ; if ;
rank: 224
score: 98.33872985839844
patch: continue initial CaMeL Value = continue ;
rank: 225
score: 99.20627848307292
patch: if ( Node CaMeL Util . is CaMeL Statement CaMeL Block ( ref . get CaMeL Assigned CaMeL Value ( ) ) )
rank: 225
score: 99.12671837439903
patch: return gramps . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Node ( ) ) ;
rank: 225
score: 98.58685302734375
patch: text . continue ; if continue ;
rank: 225
score: 98.50061798095703
patch: } else { continue ; } }
rank: 225
score: 98.47882843017578
patch: add CaMeL Node ( name , ;
rank: 225
score: 98.44407435825893
patch: / ; continue ; continue ;
rank: 225
score: 98.33780924479167
patch: if ( ! continue )
rank: 226
score: 99.29148236443015
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( target ) ;
rank: 226
score: 99.1914571126302
patch: return ! Node CaMeL Util . is CaMeL Getter CaMeL Def ( ref . get CaMeL First CaMeL Child ( ) ) ;
rank: 226
score: 99.12669735863095
patch: return gramps . is CaMeL Call ( ) . is CaMeL Inlinable CaMeL Object ( ) ;
rank: 226
score: 98.58658272879464
patch: else { ; continue ; }
rank: 226
score: 98.50053187779018
patch: } if ; if continue ;
rank: 226
score: 98.47797393798828
patch: / * ; ; * / ;
rank: 226
score: 98.44383021763393
patch: return / * / continue ;
rank: 227
score: 99.1912257982337
patch: return Node CaMeL Util . is CaMeL Getter CaMeL Def ( ref . get CaMeL Parent CaMeL Node ( ) ) ;
rank: 227
score: 99.12633056640625
patch: super . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , name ) ;
rank: 227
score: 98.58248138427734
patch: return false ; ; if continue ;
rank: 227
score: 98.50043487548828
patch: return continue ; this . continue ;
rank: 227
score: 98.47714233398438
patch: logger . error ( $STRING$ + ;
rank: 228
score: 99.2910793138587
patch: return gramps . get CaMeL First CaMeL Child ( ) == parent . get CaMeL Assigned CaMeL Value ( ) ;
rank: 228
score: 99.26906912667411
patch: return ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Parent ( ) ) ;
rank: 228
score: 99.20595139723558
patch: if ( ! Node CaMeL Util . is CaMeL Get CaMeL Prop ( ref . get CaMeL First CaMeL Child ( ) ) ) {
rank: 228
score: 98.49993896484375
patch: return false ; } } return ;
rank: 228
score: 98.47621663411458
patch: continue ; } else ;
rank: 228
score: 98.44261932373047
patch: continue ; continue ; continue ; throw
rank: 229
score: 99.29083251953125
patch: return gramps . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Assigned CaMeL Value ( ) ) ;
rank: 229
score: 99.26888333834134
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) == parent ;
rank: 229
score: 99.20590209960938
patch: if ( is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) { {
rank: 229
score: 99.1259765625
patch: return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , ) ;
rank: 229
score: 98.58202362060547
patch: logger . out . ; continue ;
rank: 229
score: 98.49925231933594
patch: return this . is CaMeL Empty ;
rank: 229
score: 98.47611999511719
patch: continue ; / * / * /
rank: 229
score: 98.44025530133929
patch: if ; / / / /
rank: 229
score: 98.3316650390625
patch: throw new Security CaMeL Exception ( ;
rank: 230
score: 99.26867145040761
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Reference ( ) ) ;
rank: 230
score: 99.18991921164773
patch: ref . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 230
score: 99.12564697265626
patch: super . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , ref ) ;
rank: 230
score: 98.58150809151786
patch: try { continue ; / /
rank: 230
score: 98.49922398158482
patch: { return false ; } }
rank: 230
score: 98.47564697265625
patch: if ( ; * /
rank: 230
score: 98.3311767578125
patch: boolean ret = false ; continue ;
rank: 231
score: 99.29040979456019
patch: return name . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL First CaMeL Child ( ) ) ;
rank: 231
score: 99.26780651461694
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL First CaMeL Child ( ) . get CaMeL Node ( ) ) ;
rank: 231
score: 99.20546025815217
patch: if ( gramps . get CaMeL First CaMeL Child ( ) . is CaMeL Get CaMeL Prop ( ) ) {
rank: 231
score: 99.12473551432292
patch: return Node CaMeL Util . is CaMeL Get CaMeL Prop ( gramps . get CaMeL First CaMeL Child ( ) ) ;
rank: 231
score: 98.58128662109375
patch: return continue ; ;
rank: 231
score: 98.47506713867188
patch: / * ; * ; * /
rank: 231
score: 98.43950653076172
patch: continue ; continue ; if ; return
rank: 231
score: 98.32910919189453
patch: continue get CaMeL Value ( ) ;
rank: 232
score: 99.26755859375
patch: return this . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Node ( ) ) ;
rank: 232
score: 99.20542328933189
patch: if ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Node ( ) ) ) {
rank: 232
score: 99.1246921705163
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . is CaMeL Getter CaMeL Def ( )
rank: 232
score: 98.4947738647461
patch: * * * * / } }
rank: 232
score: 98.47459193638393
patch: continue * ; } * /
rank: 232
score: 98.43941497802734
patch: continue ; if ; ; continue ;
rank: 232
score: 98.32867431640625
patch: } if ( continue )
rank: 233
score: 99.20482235863095
patch: if ( parent . get CaMeL First CaMeL Child ( ) . is CaMeL Getter CaMeL Def ( ) )
rank: 233
score: 99.1898193359375
patch: return ref . get CaMeL Parent CaMeL Node ( ) . is CaMeL Getter CaMeL Def ( ) ;
rank: 233
score: 99.12453206380208
patch: super . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Node ( ) ) ;
rank: 233
score: 98.58055877685547
patch: continue ; try { if continue ;
rank: 233
score: 98.49407958984375
patch: return null ; } catch ;
rank: 233
score: 98.47341482979911
patch: ; * / return false ;
rank: 233
score: 98.43783133370536
patch: / / continue ; continue ;
rank: 233
score: 98.32831682477679
patch: report CaMeL Error ( $STRING$ ;
rank: 234
score: 99.28993443080357
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( node ) ;
rank: 234
score: 99.26628311820652
patch: if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) { return false ;
rank: 234
score: 99.20460862379808
patch: if ( name . get CaMeL Node ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ) {
rank: 234
score: 99.189697265625
patch: return parent . get CaMeL First CaMeL Child ( ) . get CaMeL Parent ( ) . is CaMeL Getter CaMeL Def ( ) ;
rank: 234
score: 99.1243896484375
patch: continue . if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 234
score: 98.5802001953125
patch: try { continue ; } }
rank: 234
score: 98.49339076450893
patch: break ; continue ; continue ;
rank: 234
score: 98.32825317382813
patch: result = true ;
rank: 235
score: 99.28953334263393
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ) ;
rank: 235
score: 99.20454915364583
patch: if ( ! gramps . get CaMeL First CaMeL Child ( ) . is CaMeL Getter CaMeL Def ( ) ) {
rank: 235
score: 99.12431196732955
patch: n . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 235
score: 98.57973807198661
patch: finally { continue ; } }
rank: 235
score: 98.49286760602679
patch: } * * * * /
rank: 235
score: 98.4717305501302
patch: / * continue * ;
rank: 235
score: 98.328125
patch: continue .
rank: 236
score: 99.28945131655092
patch: return $STRING$ . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) ) ;
rank: 236
score: 99.2647117332176
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL First CaMeL Child ( ) == parent ) ;
rank: 236
score: 99.20448133680556
patch: if ( ! Node CaMeL Util . is CaMeL Statement CaMeL Block ( gramps . get CaMeL First CaMeL Child ( ) ) ) {
rank: 236
score: 99.188583984375
patch: return null . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Node ( ) ) ;
rank: 236
score: 98.5794677734375
patch: return false ; ; continue ;
rank: 236
score: 98.49220275878906
patch: * * * / if continue ;
rank: 236
score: 98.47075653076172
patch: continue * / / * continue ;
rank: 236
score: 98.43018595377605
patch: return * / continue ;
rank: 236
score: 98.32803955078126
patch: throw new ; }
rank: 237
score: 99.2891845703125
patch: ret = is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Assigned CaMeL Value ( ) ) ;
rank: 237
score: 99.264599609375
patch: return gramps . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) == name ) ;
rank: 237
score: 99.20423719618056
patch: if ( ! Node CaMeL Util . is CaMeL Statement CaMeL Block ( name ) ) {
rank: 237
score: 99.12390814887152
patch: continue ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 237
score: 98.49154227120536
patch: { continue ; } continue ;
rank: 237
score: 98.42918395996094
patch: throw continue ;
rank: 237
score: 98.32759602864583
patch: continue false , continue ;
rank: 238
score: 99.28902004076087
patch: return ! ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 238
score: 99.26436491935483
patch: return ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Assigned CaMeL Value ( ) ) ) ;
rank: 238
score: 99.20423235212054
patch: if ( ref . is CaMeL Get CaMeL Prop ( ) ) {
rank: 238
score: 99.18777465820312
patch: return ref . get CaMeL Node ( ) . get CaMeL Parent ( ) . is CaMeL Setter CaMeL Def ( ) ;
rank: 238
score: 98.57830810546875
patch: value . get CaMeL Scope ( ;
rank: 238
score: 98.49137660435268
patch: result = false ; continue ;
rank: 238
score: 98.469482421875
patch: continue * / / / * /
rank: 238
score: 98.42916870117188
patch: continue ; ; else if continue ;
rank: 238
score: 98.32621765136719
patch: throw new Throwable ( $STRING$ ) ;
rank: 239
score: 99.28900615985577
patch: ret = is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) ) ;
rank: 239
score: 99.26426478794643
patch: return Node CaMeL Util . is CaMeL Statement CaMeL Block ( parent . get CaMeL Parent ( ) ) ;
rank: 239
score: 99.1871484375
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , ref . get CaMeL Node ( ) ) ;
rank: 239
score: 99.1238125887784
patch: return ref . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Node CaMeL
rank: 239
score: 98.57687813895089
patch: / * continue { continue ;
rank: 239
score: 98.49135335286458
patch: return true ; } }
rank: 239
score: 98.4689229329427
patch: continue ; } return ;
rank: 239
score: 98.32598114013672
patch: continue false / * continue ; }
rank: 240
score: 99.288623046875
patch: return Node CaMeL Util . is CaMeL Statement CaMeL Block ( ref . get CaMeL First CaMeL Child ( ) == parent ) ;
rank: 240
score: 99.20339133522727
patch: if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name )
rank: 240
score: 99.18708038330078
patch: Node name CaMeL Node = ref . get CaMeL First CaMeL Child ( ) ;
rank: 240
score: 99.12368435329861
patch: continue && is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 240
score: 98.5763651529948
patch: return ( continue ) ;
rank: 240
score: 98.46772112165179
patch: continue * * * / ;
rank: 240
score: 98.42725372314453
patch: continue ; continue ; continue ; if
rank: 241
score: 99.28861860795455
patch: ret = Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref ) ;
rank: 241
score: 99.186572265625
patch: return this . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Node ( ) ) ;
rank: 241
score: 98.57597133091518
patch: else { continue ; / /
rank: 241
score: 98.49079132080078
patch: continue / * * * continue ;
rank: 241
score: 98.46768624441964
patch: continue * / break ; }
rank: 241
score: 98.4271469116211
patch: continue ; if ; while continue ;
rank: 241
score: 98.32344055175781
patch: continue ret = false ; continue ;
rank: 242
score: 99.2631123860677
patch: return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Parent ( ) ) ;
rank: 242
score: 99.2029541015625
patch: if ( type . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ) {
rank: 242
score: 99.12333540482955
patch: e . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 242
score: 98.57448032924107
patch: else { } continue ; }
rank: 242
score: 98.4898681640625
patch: return false ; } break ;
rank: 242
score: 98.46734619140625
patch: continue ; in * / ;
rank: 242
score: 98.42401885986328
patch: continue ; continue ; else if ;
rank: 242
score: 98.3230209350586
patch: continue value . if ( continue ;
rank: 243
score: 99.28820348668981
patch: return type . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Assigned CaMeL Value ( ) ) ;
rank: 243
score: 99.26308371803977
patch: return ! gramps . get CaMeL First CaMeL Child ( ) . is CaMeL Getter CaMeL Def ( ) ;
rank: 243
score: 99.20231119791667
patch: if ( Node CaMeL Util . is CaMeL Statement CaMeL Block ( ref . get CaMeL First CaMeL Child ( ) ) )
rank: 243
score: 99.12261672247024
patch: cfw . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) )
rank: 243
score: 98.57276262555804
patch: continue { continue ; } }
rank: 243
score: 98.48854282924107
patch: continue / * * / }
rank: 243
score: 98.46634674072266
patch: continue ; } / * ; ;
rank: 243
score: 98.42175903320313
patch: / ; continue ;
rank: 243
score: 98.3228530883789
patch: continue false . if ( continue )
rank: 244
score: 99.28801618303571
patch: return ! parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Assigned CaMeL Value ( ) ) ;
rank: 244
score: 99.202275390625
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) . is CaMeL Getter CaMeL Def ( ) ;
rank: 244
score: 99.1219815340909
patch: ch . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 244
score: 98.48799133300781
patch: * * * * continue continue ;
rank: 244
score: 98.46623883928571
patch: continue ; default : continue ;
rank: 244
score: 98.42147827148438
patch: continue ; continue ; if ; /
rank: 245
score: 99.2874755859375
patch: ret = is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Assigned CaMeL Value ( ) ) ;
rank: 245
score: 99.20189557756696
patch: if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) ) ) {
rank: 245
score: 99.12162642045455
patch: continue . if ( parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) )
rank: 245
score: 98.57146344866071
patch: } else { continue ; ;
rank: 245
score: 98.48691813151042
patch: * * * continue ;
rank: 245
score: 98.46610260009766
patch: continue ; } ; catch ( ;
rank: 245
score: 98.4214096069336
patch: continue ; continue ; else continue ;
rank: 245
score: 98.32131522042411
patch: continue = true ; break ;
rank: 246
score: 99.287001953125
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( node . get CaMeL Assigned CaMeL Value ( ) ) ;
rank: 246
score: 99.12157040550595
patch: return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , gramps ) ;
rank: 246
score: 98.57095772879464
patch: continue { continue ; / ;
rank: 246
score: 98.48536900111607
patch: } else { } continue ;
rank: 246
score: 98.46538543701172
patch: continue ; * / * * /
rank: 246
score: 98.41793823242188
patch: continue ; ; if ; break ;
rank: 246
score: 98.32044219970703
patch: try { continue ; } finally {
rank: 247
score: 99.28568812779018
patch: ret = gramps . get CaMeL First CaMeL Child ( ) ;
rank: 247
score: 99.20115612399194
patch: if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Assigned CaMeL Value ( ) ) )
rank: 247
score: 99.12119140625
patch: return name . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Node ( ) ) ;
rank: 247
score: 98.56882149832589
patch: else continue ; continue ; ;
rank: 247
score: 98.48470306396484
patch: continue ; } else if continue ;
rank: 247
score: 98.464111328125
patch: continue ; } finally continue ;
rank: 247
score: 98.41768646240234
patch: continue ; continue ; } / /
rank: 247
score: 98.3203353881836
patch: if ( continue && ! continue )
rank: 248
score: 99.26118321572581
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Parent ( ) . get CaMeL First CaMeL Child ( ) ) ;
rank: 248
score: 99.20094992897727
patch: refs . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 248
score: 99.1850650185033
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref , ref ) ;
rank: 248
score: 98.5664774576823
patch: return false ; continue {
rank: 248
score: 98.48451450892857
patch: } else { break ; }
rank: 248
score: 98.46359252929688
patch: return false ; } catch ( ;
rank: 248
score: 98.41690499441964
patch: continue ; if continue ; this
rank: 248
score: 98.31842803955078
patch: continue false * / return false ;
rank: 249
score: 99.28433890964673
patch: return Node CaMeL Util . is CaMeL Setter CaMeL Def ( ref . get CaMeL First CaMeL Child ( ) ) ;
rank: 249
score: 99.26101684570312
patch: return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Node ( ) ) ;
rank: 249
score: 99.20076711554276
patch: return . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ; }
rank: 249
score: 99.18480767144098
patch: return value . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ;
rank: 249
score: 99.1207608309659
patch: buf . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 249
score: 98.56244768415179
patch: else { return true ; }
rank: 249
score: 98.48421805245536
patch: * * * / * /
rank: 249
score: 98.4622802734375
patch: continue ; ; } finally { ;
rank: 249
score: 98.31796700613839
patch: if ( continue , $STRING$ )
rank: 250
score: 99.26039566532258
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Node ( ) . get CaMeL Assigned CaMeL Value ( ) ) ;
rank: 250
score: 99.20076171875
patch: if ( Node CaMeL Util . is CaMeL Statement CaMeL Block ( parent . get CaMeL Assigned CaMeL Value ( ) ) ) {
rank: 250
score: 99.184326171875
patch: ref . if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref ) ) {
rank: 250
score: 99.1207608309659
patch: default . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 250
score: 98.4841537475586
patch: return continue ; } else continue ;
rank: 250
score: 98.46142578125
patch: continue ; } else return false ;
rank: 250
score: 98.41262381417411
patch: continue ; ; return continue ;
rank: 250
score: 98.31721714564732
patch: continue . / * continue ;
rank: 251
score: 99.2593994140625
patch: is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) ) ;
rank: 251
score: 99.20010579427084
patch: if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Node ( ) ) ) {
rank: 251
score: 99.18309607872597
patch: if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Parent CaMeL
rank: 251
score: 99.120419921875
patch: return ref . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Parent ( ) ) ;
rank: 251
score: 98.55849783761161
patch: if false continue ; continue ;
rank: 251
score: 98.48392159598214
patch: / * * * continue ;
rank: 251
score: 98.46024867466518
patch: * ; ; ; * /
rank: 251
score: 98.41211700439453
patch: continue ; continue ; ; / /
rank: 251
score: 98.3143310546875
patch: if ( continue && ;
rank: 252
score: 99.19924587673611
patch: if ( name . get CaMeL Node ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 252
score: 99.12038352272727
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ; else
rank: 252
score: 98.55835832868304
patch: return new $STRING$ == continue ;
rank: 252
score: 98.48175048828125
patch: return null ; }
rank: 252
score: 98.46003723144531
patch: continue * / ; } * /
rank: 252
score: 98.31418282645089
patch: List < Object > continue ;
rank: 253
score: 99.25869750976562
patch: return . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Parent ( ) ) ;
rank: 253
score: 99.19866943359375
patch: if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( type ) ) {
rank: 253
score: 99.12027994791667
patch: return parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name .
rank: 253
score: 98.55795288085938
patch: continue { return false ;
rank: 253
score: 98.48093087332589
patch: } / * * * /
rank: 253
score: 98.45900181361607
patch: continue ; case - 1 :
rank: 253
score: 98.41131591796875
patch: if ; / / / / /
rank: 253
score: 98.312744140625
patch: if ( ; throw new ;
rank: 254
score: 99.25868055555556
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) != name ) ;
rank: 254
score: 99.19858805338542
patch: while ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref ) ) {
rank: 254
score: 99.18130832248264
patch: return get CaMeL First CaMeL Child ( ) . is CaMeL Getter CaMeL Def ( ) ;
rank: 254
score: 99.12025035511364
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name == ) ;
rank: 254
score: 98.55653599330357
patch: return continue ; continue ; ;
rank: 254
score: 98.478759765625
patch: } else { return ; }
rank: 254
score: 98.45885358537946
patch: continue ; } this . ;
rank: 254
score: 98.41124471028645
patch: continue ; continue ; if
rank: 254
score: 98.30984933035714
patch: throw new Error ( ) ;
rank: 255
score: 99.28387741815476
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( type ) ;
rank: 255
score: 99.19821693157327
patch: if ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Node ( ) ) ) {
rank: 255
score: 99.18128380408653
patch: return ref . get CaMeL Node ( ) . get CaMeL First CaMeL Child ( ) . is CaMeL Setter CaMeL Def ( ) ;
rank: 255
score: 99.1201171875
patch: super . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) . is CaMeL Getter CaMeL Def ( ) ;
rank: 255
score: 98.55652872721355
patch: else ; continue ; }
rank: 255
score: 98.47870744977679
patch: continue * continue ; continue ;
rank: 255
score: 98.4584732055664
patch: System . err . println ( ;
rank: 255
score: 98.41119384765625
patch: if continue ; continue ; System ;
rank: 255
score: 98.3082784016927
patch: if ( continue ) ;
rank: 256
score: 99.19712094907408
patch: if ( ref . get CaMeL First CaMeL Child ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) )
rank: 256
score: 99.18100807883523
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref ) ; }
rank: 256
score: 99.12007863898026
patch: continue || ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 256
score: 98.55355398995536
patch: continue ; continue ; / ;
rank: 256
score: 98.47803497314453
patch: continue * * / return false ;
rank: 256
score: 98.45793805803571
patch: ; * ; ; * /
rank: 256
score: 98.41114153180804
patch: continue ; continue ; try /
rank: 256
score: 98.30790710449219
patch: continue this . if ( continue )
rank: 257
score: 99.28304036458333
patch: ret = is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref ) ;
rank: 257
score: 99.258046875
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( property . get CaMeL First CaMeL Child ( ) ) ;
rank: 257
score: 99.19705078125
patch: if ( Node CaMeL Util . is CaMeL Get CaMeL Prop ( ref . get CaMeL First CaMeL Child ( ) ) ) {
rank: 257
score: 99.180908203125
patch: return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Parent ( ) ) ;
rank: 257
score: 99.11993877704327
patch: return ref . get CaMeL Prop ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) ;
rank: 257
score: 98.47620646158855
patch: return false ; break ;
rank: 257
score: 98.45781707763672
patch: / * ; ; * continue ;
rank: 257
score: 98.40989685058594
patch: / ; if continue ; break ;
rank: 257
score: 98.30740356445312
patch: if ( continue && continue ) {
rank: 258
score: 99.28217424665179
patch: return ref . get CaMeL First CaMeL Child ( ) . get CaMeL First CaMeL Child ( ) . is CaMeL Setter CaMeL Def ( ) ;
rank: 258
score: 99.19700927734375
patch: if ( gramps . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name )
rank: 258
score: 99.180869140625
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , ref . get CaMeL Parent ( ) ) ;
rank: 258
score: 99.11989524147727
patch: meth . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 258
score: 98.47572326660156
patch: } else if ( ! continue ;
rank: 258
score: 98.4569091796875
patch: continue ; * continue . * /
rank: 258
score: 98.40866524832589
patch: if continue ; continue ; throw
rank: 258
score: 98.30717250279018
patch: continue false ret = false ;
rank: 259
score: 99.2573663119612
patch: return null . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) == name ) ;
rank: 259
score: 99.19680259967673
patch: if ( gramps . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL First CaMeL Child ( ) ) )
rank: 259
score: 99.17994140625
patch: return parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Parent ( ) ) ;
rank: 259
score: 98.54897054036458
patch: / * continue continue ;
rank: 259
score: 98.47538757324219
patch: } else * * * * /
rank: 259
score: 98.45660400390625
patch: ; * / / * /
rank: 259
score: 98.40836334228516
patch: continue ; if ; for continue ;
rank: 259
score: 98.3055419921875
patch: continue get CaMeL Result ( ; }
rank: 260
score: 99.19674479166666
patch: return gramps . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , ref . get CaMeL First CaMeL Child ( ) ) ;
rank: 260
score: 99.17991807725694
patch: return ref . get CaMeL Reference ( ) . is CaMeL Getter CaMeL Def ( ) ;
rank: 260
score: 99.11924438476562
patch: continue . if ( is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) )
rank: 260
score: 98.54844156901042
patch: if null || continue ;
rank: 260
score: 98.45610700334821
patch: if ( name . equals ;
rank: 260
score: 98.40778350830078
patch: continue ; continue ; / / /
rank: 260
score: 98.30545043945312
patch: if ( continue = continue . ;
rank: 261
score: 99.28177897135417
patch: return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( property ) ;
rank: 261
score: 99.256943359375
patch: return null . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Value ( ) ) ;
rank: 261
score: 99.19668240017361
patch: if ( is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref ) )
rank: 261
score: 99.17980018028847
patch: return ref . get CaMeL Node ( ) . get CaMeL Parent CaMeL Node ( ) . is CaMeL Setter CaMeL Def ( ) ;
rank: 261
score: 99.11915418836806
patch: res = is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 261
score: 98.5482177734375
patch: finally { continue ; ;
rank: 261
score: 98.47450256347656
patch: continue / * * * * /
rank: 261
score: 98.45581817626953
patch: continue ; ; } return false ;
rank: 261
score: 98.40669468470982
patch: if ; continue ; / /
rank: 261
score: 98.30515834263393
patch: continue ; } } continue ;
rank: 262
score: 99.25665480090726
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) == ref ) ;
rank: 262
score: 99.19654482886905
patch: if ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name )
rank: 262
score: 99.17977241847827
patch: result = ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 262
score: 98.54762486049107
patch: continue { for continue ; ;
rank: 262
score: 98.47322300502232
patch: return true ; } catch ;
rank: 262
score: 98.45550537109375
patch: continue ; } * ;
rank: 262
score: 98.406005859375
patch: continue ; ; return if continue ;
rank: 262
score: 98.30502319335938
patch: if ( ; return continue ; }
rank: 263
score: 99.25658392137096
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , parent . get CaMeL First CaMeL Child ( ) ) ;
rank: 263
score: 99.19644901670259
patch: return parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , ref . get CaMeL First CaMeL Child ( ) ) ;
rank: 263
score: 99.17971801757812
patch: return ref . get CaMeL Parent ( ) . get CaMeL Node ( ) . is CaMeL Getter CaMeL Def ( ) ;
rank: 263
score: 98.47318522135417
patch: continue * * / }
rank: 263
score: 98.40575299944196
patch: continue ; continue ; } return
rank: 263
score: 98.30462646484375
patch: continue throws Runtime CaMeL Exception {
rank: 264
score: 99.25637381417411
patch: return ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Value ( ) ) ;
rank: 264
score: 99.19583565848214
patch: if ( gramps . get CaMeL First CaMeL Child ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) )
rank: 264
score: 98.54556710379464
patch: continue continue ; return false ;
rank: 264
score: 98.47221374511719
patch: continue continue ; } catch continue ;
rank: 264
score: 98.451416015625
patch: continue ; this . return false ;
rank: 264
score: 98.40444510323661
patch: continue ; continue ; } else
rank: 264
score: 98.30342102050781
patch: continue value = continue ; continue ;
rank: 265
score: 99.1957674893466
patch: if ( ! target . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 265
score: 99.11832468133224
patch: return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ; else
rank: 265
score: 98.54496256510417
patch: continue { } continue ;
rank: 265
score: 98.47090148925781
patch: return true ; continue ; continue ;
rank: 265
score: 98.45001983642578
patch: continue ; } ; return false ;
rank: 265
score: 98.40413120814732
patch: continue ; else ; continue ;
rank: 265
score: 98.30170549665179
patch: continue ; if ( continue )
rank: 266
score: 99.25575699344758
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Node ( ) . get CaMeL Assigned CaMeL Value ( ) ) ;
rank: 266
score: 99.19557542067308
patch: if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Node ( ) ) ) {
rank: 266
score: 99.11826869419643
patch: return gramps . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL
rank: 266
score: 98.54377092633929
patch: / else { continue ; }
rank: 266
score: 98.469482421875
patch: this . continue ; }
rank: 266
score: 98.44996643066406
patch: continue . * / continue ; }
rank: 266
score: 98.40377044677734
patch: continue ; ; ; continue ; }
rank: 266
score: 98.30014038085938
patch: continue * / if ( continue )
rank: 267
score: 99.25537109375
patch: return gramps . get CaMeL First CaMeL Child ( ) == parent . get CaMeL Grandparent ( ) ;
rank: 267
score: 99.117431640625
patch: info . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 267
score: 98.54286702473958
patch: continue ; while continue ;
rank: 267
score: 98.46929931640625
patch: continue * / if continue ;
rank: 267
score: 98.44947306315105
patch: continue - 1 ; }
rank: 267
score: 98.40203857421875
patch: continue ; continue ; throw
rank: 267
score: 98.30010114397321
patch: throw new Exception ( $STRING$ ;
rank: 268
score: 99.28055245535714
patch: return gramps . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL First CaMeL Child ( ) ) ;
rank: 268
score: 99.2553478422619
patch: return is CaMeL Inlinable CaMeL Object ( ref . get CaMeL First CaMeL Child ( ) ) ;
rank: 268
score: 98.54282052176339
patch: if ( true ; continue ;
rank: 268
score: 98.46829659598214
patch: continue / * * continue ;
rank: 268
score: 98.44914245605469
patch: continue ; default : return false ;
rank: 268
score: 98.4016342163086
patch: if continue ; continue ; ; /
rank: 269
score: 99.25522189670139
patch: return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( refs ) ;
rank: 269
score: 99.19424203725961
patch: if ( parent . get CaMeL Parent ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ) {
rank: 269
score: 99.1173428622159
patch: arguments . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 269
score: 98.54224853515625
patch: result { continue ;
rank: 269
score: 98.46572875976562
patch: return continue ; } } else {
rank: 269
score: 98.4488296508789
patch: for ( ; ; ; ) {
rank: 269
score: 98.29953002929688
patch: final continue ;
rank: 270
score: 99.25507269965277
patch: return ( is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 270
score: 99.19396294487848
patch: Preconditions . check CaMeL Read ( parent . get CaMeL First CaMeL Child ( ) ) ;
rank: 270
score: 99.1172511888587
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name == name ) ;
rank: 270
score: 98.5416259765625
patch: try { continue continue ; ;
rank: 270
score: 98.46571858723958
patch: } else
rank: 270
score: 98.44742257254464
patch: continue ; return false ; }
rank: 270
score: 98.40135955810547
patch: continue ; if continue ; return ;
rank: 270
score: 98.29886300223214
patch: if ( continue == false )
rank: 271
score: 99.178125
patch: if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL
rank: 271
score: 98.5412089029948
patch: continue { while continue ;
rank: 271
score: 98.46539306640625
patch: continue * * / return continue ;
rank: 271
score: 98.44700404575893
patch: throw new ; } * /
rank: 271
score: 98.40123639787946
patch: if continue ; break ; ;
rank: 271
score: 98.29837472098214
patch: if ( continue , null )
rank: 272
score: 99.278662109375
patch: return node . get CaMeL First CaMeL Child ( ) . is CaMeL Getter CaMeL Def ( ) ;
rank: 272
score: 99.25478515625
patch: return ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Assigned CaMeL Value ( ) ) ;
rank: 272
score: 99.19337565104166
patch: if ( ! parent . is CaMeL Get CaMeL Prop ( ) ) {
rank: 272
score: 99.17811936598558
patch: return ref . get CaMeL First CaMeL Child ( ) . get CaMeL Node ( ) . is CaMeL Setter CaMeL Def ( ) ;
rank: 272
score: 99.117001953125
patch: return ref . get CaMeL Prop ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref ) ;
rank: 272
score: 98.54087611607143
patch: catch continue ; continue ; ;
rank: 272
score: 98.4646987915039
patch: / * * * * * /
rank: 272
score: 98.44698660714286
patch: continue * / continue * ;
rank: 272
score: 98.399169921875
patch: / if continue ;
rank: 272
score: 98.29810442243304
patch: continue = continue ; continue ;
rank: 273
score: 99.25449044363839
patch: return . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) == parent ) ;
rank: 273
score: 99.19325764973958
patch: if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( index ) ) {
rank: 273
score: 99.11620032269022
patch: return ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref ) ) {
rank: 273
score: 98.53885323660714
patch: continue { for continue ; }
rank: 273
score: 98.46440778459821
patch: return null ; return false ;
rank: 273
score: 98.4468002319336
patch: continue * / ; / * /
rank: 273
score: 98.39881134033203
patch: continue ; continue ; println continue ;
rank: 274
score: 99.25441136853448
patch: return gramps . get CaMeL First CaMeL Child ( ) . get CaMeL First CaMeL Child ( ) . is CaMeL Setter CaMeL Def ( ) ;
rank: 274
score: 99.19285481770834
patch: if ( ! parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL First CaMeL Child ( ) ) ) {
rank: 274
score: 99.1776631673177
patch: return ref . get CaMeL Parent ( ) . get CaMeL Parent ( ) . is CaMeL Setter CaMeL Def ( ) ;
rank: 274
score: 99.11616346571181
patch: break = is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 274
score: 98.53831263950893
patch: if false ; continue ; ;
rank: 274
score: 98.46399688720703
patch: continue * * / } continue ;
rank: 274
score: 98.44652557373047
patch: continue ; ; } * / ;
rank: 274
score: 98.39719935825893
patch: return ; ; if continue ;
rank: 274
score: 98.29691569010417
patch: continue this . continue ;
rank: 275
score: 99.27787562779018
patch: return ! parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) ) ;
rank: 275
score: 99.25426664806548
patch: return Node CaMeL Util . is CaMeL Call ( parent . get CaMeL First CaMeL Child ( ) ) ;
rank: 275
score: 99.17754516601562
patch: return this . ref . get CaMeL Node ( ) . is CaMeL Getter CaMeL Def ( ) ;
rank: 275
score: 99.11597842261905
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( index ) ;
rank: 275
score: 98.53599853515625
patch: } continue ; }
rank: 275
score: 98.46296997070313
patch: continue * continue ;
rank: 275
score: 98.44591413225446
patch: ; * / ; * /
rank: 275
score: 98.39679827008929
patch: if continue ; else continue ;
rank: 275
score: 98.29673767089844
patch: if ( continue ) { break ;
rank: 276
score: 99.1924715909091
patch: if ( gramps . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent ) ) {
rank: 276
score: 99.1773681640625
patch: return ref . get CaMeL First CaMeL Child ( ) . get CaMeL First CaMeL Child ( ) . get CaMeL Next ( ) ;
rank: 276
score: 98.53175571986607
patch: continue ; try ; continue ;
rank: 276
score: 98.44527762276786
patch: if ( ; } * /
rank: 276
score: 98.39675903320312
patch: if ; continue ; for continue ;
rank: 276
score: 98.2966817220052
patch: logger . log ( ;
rank: 277
score: 99.27756666100544
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name == null ) ;
rank: 277
score: 99.25337727864583
patch: return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Parent ( ) ) ;
rank: 277
score: 99.19242931547619
patch: if ( node . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 277
score: 99.1158203125
patch: continue && ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 277
score: 98.53001185825893
patch: finally { continue continue ; }
rank: 277
score: 98.46063232421875
patch: return get CaMeL State ( ;
rank: 277
score: 98.44444274902344
patch: continue ; } * ; * /
rank: 277
score: 98.39427947998047
patch: continue ; continue ; continue ; =
rank: 277
score: 98.29610188802083
patch: continue [ 0 ] ;
rank: 278
score: 99.19178602430556
patch: if ( is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Assigned CaMeL Value ( ) ) ) {
rank: 278
score: 99.17678000710227
patch: if ( ref . get CaMeL First CaMeL Child ( ) . is CaMeL Setter CaMeL Def ( ) ) {
rank: 278
score: 99.11576704545455
patch: sender . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 278
score: 98.52988978794643
patch: * continue ; continue ; }
rank: 278
score: 98.4605484008789
patch: } else if ; return false ;
rank: 278
score: 98.3940200805664
patch: continue ; if continue ; System ;
rank: 278
score: 98.29574584960938
patch: continue false return false ;
rank: 279
score: 99.27685546875
patch: return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( gramps . get CaMeL Assigned CaMeL Value ( ) ) ;
rank: 279
score: 99.19168090820312
patch: return refs . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ; }
rank: 279
score: 99.17627892127403
patch: return parent . get CaMeL First CaMeL Child ( ) . get CaMeL Parent ( ) . is CaMeL Setter CaMeL Def ( ) ;
rank: 279
score: 99.1155672940341
patch: cached . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 279
score: 98.46036529541016
patch: return null ; } return continue ;
rank: 279
score: 98.44321986607143
patch: if ( ; return false ;
rank: 279
score: 98.39186314174107
patch: return * * / continue ;
rank: 279
score: 98.29508666992187
patch: result = false ;
rank: 280
score: 99.25278005292338
patch: return ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 280
score: 99.19104534646739
patch: if ( gramps . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) { {
rank: 280
score: 99.11497913707386
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) true ;
rank: 280
score: 98.45984497070313
patch: } catch continue ;
rank: 280
score: 98.44281768798828
patch: continue ; / * * ; ;
rank: 280
score: 98.39158630371094
patch: continue ; else if ; continue ;
rank: 280
score: 98.29473876953125
patch: if continue ; return true ;
rank: 281
score: 99.25258225661058
patch: return gramps . get CaMeL First CaMeL Child ( ) . equals ( parent . get CaMeL First CaMeL Child ( ) ) ;
rank: 281
score: 99.17508544921876
patch: return ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref ) ) ;
rank: 281
score: 99.11481267755681
patch: attributes . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 281
score: 98.52869669596355
patch: case continue ; continue ;
rank: 281
score: 98.45930989583333
patch: / * * * /
rank: 281
score: 98.4427490234375
patch: continue ; * / return ;
rank: 281
score: 98.3910903930664
patch: return ; if continue ; / /
rank: 281
score: 98.2913818359375
patch: log . error ( $STRING$ ;
rank: 282
score: 99.27637396918402
patch: continue return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 282
score: 99.19080041956019
patch: if ( parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Node ( ) ) ) {
rank: 282
score: 99.1745272549716
patch: if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Child CaMeL
rank: 282
score: 99.11473999023437
patch: switch ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 282
score: 98.52619280133929
patch: return ( continue || continue ;
rank: 282
score: 98.44134521484375
patch: / * ; * / /
rank: 282
score: 98.39042445591518
patch: continue ; continue ; } }
rank: 283
score: 99.19031982421875
patch: return super . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ; }
rank: 283
score: 99.1146240234375
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ; else
rank: 283
score: 98.52519880022321
patch: try { continue ; break ;
rank: 283
score: 98.45846557617188
patch: return false && continue ;
rank: 283
score: 98.44130161830357
patch: if ( ; * / ;
rank: 283
score: 98.39036051432292
patch: if continue ; if ;
rank: 283
score: 98.29052734375
patch: continue value . if ( ;
rank: 284
score: 99.27590013586956
patch: return Node CaMeL Util . is CaMeL Statement CaMeL Block ( name . get CaMeL First CaMeL Child ( ) ) ;
rank: 284
score: 99.19029541015625
patch: if ( refs . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) )
rank: 284
score: 99.11460182883523
patch: adapter . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 284
score: 98.52516682942708
patch: continue ; continue continue ;
rank: 284
score: 98.44122314453125
patch: continue ; / * * * ;
rank: 284
score: 98.28895786830357
patch: try { return false ; }
rank: 285
score: 99.27575005425348
patch: ret = is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent ) ;
rank: 285
score: 99.251552734375
patch: return this . gramps . get CaMeL First CaMeL Child ( ) != parent . get CaMeL First CaMeL Child ( ) ;
rank: 285
score: 99.174072265625
patch: if ( gramps . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref ) ) {
rank: 285
score: 99.11403198242188
patch: return parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . ) ;
rank: 285
score: 98.52448381696429
patch: continue ; } continue ; ;
rank: 285
score: 98.4572982788086
patch: } else { if ; } }
rank: 285
score: 98.44083077566964
patch: . * / return false ;
rank: 285
score: 98.38870239257812
patch: if continue ; if continue ; }
rank: 285
score: 98.28871663411458
patch: continue node . continue ;
rank: 286
score: 99.27543712797619
patch: return this . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , name ) ;
rank: 286
score: 99.25091552734375
patch: return ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 286
score: 99.18976440429688
patch: if ( super . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ) {
rank: 286
score: 99.174072265625
patch: return null . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Parent ( ) ) ;
rank: 286
score: 99.11396928267045
patch: ts . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 286
score: 98.52390834263393
patch: else continue ; return false ;
rank: 286
score: 98.43905639648438
patch: continue ; } if ( ret )
rank: 286
score: 98.38825225830078
patch: if continue ; continue ; ; else
rank: 287
score: 99.27526403356481
patch: return target . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) ) ;
rank: 287
score: 99.25060546875
patch: return this . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Node ( ) ) ;
rank: 287
score: 99.1896503155048
patch: if ( parent . get CaMeL First CaMeL Child ( ) !=
rank: 287
score: 99.11375325520834
patch: return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs (
rank: 287
score: 98.52382114955357
patch: if null false ; continue ;
rank: 287
score: 98.45663452148438
patch: return false ; } } else {
rank: 287
score: 98.38690185546875
patch: continue ; continue ; int
rank: 287
score: 98.28825160435268
patch: notify CaMeL All ( ) ;
rank: 288
score: 99.24981282552083
patch: return ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL First CaMeL Child ( ) ) ;
rank: 288
score: 99.18951009114583
patch: if ( ! gramps . get CaMeL First CaMeL Child ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) )
rank: 288
score: 99.17233511117789
patch: if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Reference CaMeL
rank: 288
score: 99.11360677083333
patch: return ( ref . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) ;
rank: 288
score: 98.52340262276786
patch: continue ; ; return true ;
rank: 288
score: 98.4547831217448
patch: return ; } continue ;
rank: 288
score: 98.43736921037946
patch: ; ; / * * /
rank: 288
score: 98.28740583147321
patch: continue = false ; break ;
rank: 289
score: 99.27478637695313
patch: return target . get CaMeL First CaMeL Child ( ) . is CaMeL Getter CaMeL Def ( ) ;
rank: 289
score: 99.1894000509511
patch: return gramps . get CaMeL First CaMeL Child ( ) != parent . get CaMeL Assigned CaMeL Value ( ) ;
rank: 289
score: 99.11346726190476
patch: break . if ( is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 289
score: 98.52247837611607
patch: } try { continue ; }
rank: 289
score: 98.45435442243304
patch: } else * * * /
rank: 289
score: 98.43717738560268
patch: continue ; } } else {
rank: 289
score: 98.38422393798828
patch: / / if continue ; continue ;
rank: 289
score: 98.28704071044922
patch: continue = true ; return true ;
rank: 290
score: 99.27463204520089
patch: ret = parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) ) ;
rank: 290
score: 99.24944196428571
patch: return ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Node ( ) ) ;
rank: 290
score: 99.18932427300348
patch: return refs . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ;
rank: 290
score: 99.17195434570313
patch: if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( type ) ) {
rank: 290
score: 98.51820882161458
patch: while false ; continue ;
rank: 290
score: 98.45380401611328
patch: return ; } else return false ;
rank: 290
score: 98.43705749511719
patch: continue ; } * / * ;
rank: 290
score: 98.38410949707031
patch: if continue ; break ; continue ;
rank: 290
score: 98.28678894042969
patch: throw new Runtime CaMeL Exception ; ;
rank: 291
score: 99.27457101004464
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , gramps . get CaMeL Assigned CaMeL Value ( ) ) ;
rank: 291
score: 99.18876953125
patch: if ( ! ref . get CaMeL First CaMeL Child ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 291
score: 99.17169744318181
patch: if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) return false ;
rank: 291
score: 99.11299402573529
patch: return gramps . is CaMeL Call ( ) . is CaMeL Call ( ) ;
rank: 291
score: 98.51668003627232
patch: / continue ; continue ; }
rank: 291
score: 98.45333862304688
patch: if ; * * * * /
rank: 291
score: 98.4368184407552
patch: continue * / ; ;
rank: 291
score: 98.38405354817708
patch: continue ; continue ; set
rank: 291
score: 98.28660365513393
patch: for ( Object ; ; )
rank: 292
score: 99.24918882308468
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Node ( ) . get CaMeL Parent CaMeL Node ( ) ) ;
rank: 292
score: 99.18857421875
patch: if ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL First CaMeL Child ( ) ) )
rank: 292
score: 99.17095477764423
patch: return parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) ;
rank: 292
score: 99.11286272321429
patch: return ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) ) ;
rank: 292
score: 98.51664515904018
patch: try { continue ; ; }
rank: 292
score: 98.45191955566406
patch: } else { if ; break ;
rank: 292
score: 98.43650817871094
patch: if ( name == null || ;
rank: 292
score: 98.38349151611328
patch: continue ; } ; if continue ;
rank: 292
score: 98.28623962402344
patch: try { this . continue ; }
rank: 293
score: 99.24840436662946
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) ;
rank: 293
score: 99.18844401041666
patch: if ( gramps . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL First CaMeL Child ( ) ) ) {
rank: 293
score: 99.170068359375
patch: return parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Parent ( ) ) ;
rank: 293
score: 98.51610717773437
patch: result = continue ;
rank: 293
score: 98.45149230957031
patch: } if ; continue ; continue ;
rank: 293
score: 98.43475341796875
patch: continue ; } super . ;
rank: 293
score: 98.38254220145089
patch: if continue ; continue ; continue
rank: 293
score: 98.28581019810268
patch: continue false * / break ;
rank: 294
score: 99.169921875
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent , name ) ;
rank: 294
score: 99.11266508556548
patch: this . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) )
rank: 294
score: 98.45105852399554
patch: } else return ( continue ;
rank: 294
score: 98.43428039550781
patch: continue ; if ( parent . ;
rank: 294
score: 98.38143920898438
patch: return if continue ; for continue ;
rank: 294
score: 98.28568812779018
patch: if ( ! continue ) {
rank: 295
score: 99.2732821377841
patch: val = Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 295
score: 99.24832153320312
patch: return parent . get CaMeL First CaMeL Child ( ) . is CaMeL Get CaMeL Prop ( ) ;
rank: 295
score: 99.18837041440217
patch: while ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref ) ) {
rank: 295
score: 99.168857421875
patch: return this . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Parent ( ) ) ;
rank: 295
score: 99.11238236860795
patch: sb . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 295
score: 98.51497395833333
patch: continue { continue ; /
rank: 295
score: 98.45055135091145
patch: * * * / }
rank: 295
score: 98.43361409505208
patch: ; * ; * /
rank: 295
score: 98.2853759765625
patch: synchronized ( this )
rank: 296
score: 99.27325994318181
patch: return this . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , gramps ) ;
rank: 296
score: 99.24831671463816
patch: return is CaMeL Getter CaMeL Def ( parent . get CaMeL First CaMeL Child ( ) ) ;
rank: 296
score: 99.18834510216347
patch: if ( parent . get CaMeL Node ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) )
rank: 296
score: 99.16839599609375
patch: return parent . get CaMeL Node ( ) . is CaMeL Getter CaMeL Def ( ) ;
rank: 296
score: 98.51318359375
patch: break { continue ; }
rank: 296
score: 98.45040893554688
patch: / * * * * continue ;
rank: 296
score: 98.43335723876953
patch: while ( ; ; ) { ;
rank: 296
score: 98.3809305826823
patch: throw continue ; continue ;
rank: 296
score: 98.2822265625
patch: continue false = true ; }
rank: 297
score: 99.24826978600544
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Value ( ) ) ;
rank: 297
score: 99.18824181189903
patch: if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , name ) ) {
rank: 297
score: 99.11203484786184
patch: return parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . }
rank: 297
score: 98.51227678571429
patch: value . continue ; break ;
rank: 297
score: 98.44876098632812
patch: return continue ; } } return ;
rank: 297
score: 98.43297467912946
patch: continue ; } if ; ;
rank: 298
score: 99.27259765625
patch: return ref . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Value ( ) ) ;
rank: 298
score: 99.24767127403847
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 298
score: 99.18800455729166
patch: if ( gramps . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Assigned CaMeL Value ( ) ) ) {
rank: 298
score: 98.51211547851562
patch: continue ; ; ; ;
rank: 298
score: 98.44751848493304
patch: return false ; else return ;
rank: 298
score: 98.43230329241071
patch: ; * / if ( ;
rank: 298
score: 98.37911224365234
patch: if continue ; continue ; return ;
rank: 298
score: 98.281005859375
patch: if ( continue ; ;
rank: 299
score: 99.18800184461806
patch: super . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent ) ;
rank: 299
score: 99.16780395507813
patch: return null . get CaMeL First CaMeL Child ( ) . is CaMeL Getter CaMeL Def ( ) ;
rank: 299
score: 99.11167689732143
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ||
rank: 299
score: 98.51207624162946
patch: if ( false ; continue ;
rank: 299
score: 98.44727325439453
patch: * * * * / if ;
rank: 299
score: 98.43221282958984
patch: return ; / * continue * /
rank: 299
score: 98.37905447823661
patch: ; if continue ; continue ;
rank: 299
score: 98.2807846069336
patch: if ( continue ) return continue ;
rank: 300
score: 99.24689352101294
patch: return ( parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 300
score: 99.18763469827586
patch: if ( parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) ) ) {
rank: 300
score: 99.11143734580592
patch: return . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) ;
rank: 300
score: 98.51144409179688
patch: else { return false ;
rank: 300
score: 98.44677734375
patch: return ; } } return false ;
rank: 300
score: 98.43129475911458
patch: continue ; default : ;
rank: 300
score: 98.37876383463542
patch: continue ; if ; else
rank: 300
score: 98.27823311941964
patch: continue . * / continue ;
rank: 301
score: 99.24669921875
patch: return Node CaMeL Util . is CaMeL Statement CaMeL Block ( ref . get CaMeL First CaMeL Child ( ) == name ) ;
rank: 301
score: 99.1113513764881
patch: super . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) )
rank: 301
score: 98.51131766183036
patch: continue { return null ; }
rank: 301
score: 98.44676971435547
patch: } } if continue ; continue ;
rank: 301
score: 98.43113199869792
patch: ; ; * continue ;
rank: 301
score: 98.37860107421875
patch: if continue ; continue ; boolean
rank: 301
score: 98.27771759033203
patch: continue get CaMeL Prop ( ) ;
rank: 302
score: 99.27060953776042
patch: return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( type ) ;
rank: 302
score: 99.24621000744048
patch: return gramps . get CaMeL First CaMeL Child ( ) != parent . get CaMeL Parent ( ) ;
rank: 302
score: 99.18714396158855
patch: if ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) { {
rank: 302
score: 99.1112060546875
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , ) ;
rank: 302
score: 98.51012311662946
patch: value continue ; continue ; }
rank: 302
score: 98.44660186767578
patch: * * continue * * * /
rank: 302
score: 98.4300308227539
patch: continue ; } ret = false ;
rank: 302
score: 98.37715148925781
patch: continue ; continue ; else break ;
rank: 302
score: 98.27753448486328
patch: continue = true ; return false ;
rank: 303
score: 99.270458984375
patch: result = parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 303
score: 99.24592194733796
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name == parent . get CaMeL First CaMeL Child ( ) ) ;
rank: 303
score: 99.18709891183036
patch: if ( is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( gramps . get CaMeL First CaMeL Child ( ) ) ) {
rank: 303
score: 99.111103515625
patch: return parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . to CaMeL String ( ) ) ;
rank: 303
score: 98.50983537946429
patch: continue { continue ; * /
rank: 303
score: 98.44654083251953
patch: } else if ( continue continue ;
rank: 303
score: 98.42987823486328
patch: continue ; } else { ; ;
rank: 303
score: 98.3771240234375
patch: else if continue ;
rank: 303
score: 98.2774658203125
patch: continue false value = continue ;
rank: 304
score: 99.27029984085648
patch: return gramps . get CaMeL First CaMeL Child ( ) . get CaMeL Parent ( ) . is CaMeL Setter CaMeL Def ( ) ;
rank: 304
score: 99.11101740056819
patch: target . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 304
score: 98.50953020368304
patch: continue continue ; continue { }
rank: 304
score: 98.42926897321429
patch: ; / * continue * ;
rank: 304
score: 98.37576293945312
patch: continue ; continue ; return / /
rank: 304
score: 98.27593122209821
patch: continue false . return false ;
rank: 305
score: 99.24561360677083
patch: return gramps . get CaMeL First CaMeL Child ( ) . is CaMeL Setter CaMeL Def ( parent . get CaMeL First CaMeL Child ( ) ) ;
rank: 305
score: 99.18704322076613
patch: if ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( gramps . get CaMeL First CaMeL Child ( ) ) )
rank: 305
score: 99.11095610119048
patch: impl . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) )
rank: 305
score: 98.50939069475446
patch: try { continue ; / ;
rank: 305
score: 98.44512939453125
patch: continue if continue ; continue ;
rank: 305
score: 98.27574920654297
patch: logger . error ( $STRING$ , ;
rank: 306
score: 99.18691871279762
patch: if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) { }
rank: 306
score: 99.16409737723214
patch: result = gramps . get CaMeL First CaMeL Child ( ) ;
rank: 306
score: 99.11072887073864
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) false ;
rank: 306
score: 98.5089619954427
patch: } continue ; ; ;
rank: 306
score: 98.44422258649554
patch: return false ; } return ;
rank: 306
score: 98.42747497558594
patch: continue ; * / continue ; }
rank: 306
score: 98.3748046875
patch: continue ; break ;
rank: 306
score: 98.27536010742188
patch: if ( ; ) return true ;
rank: 307
score: 99.245576171875
patch: return null . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Node ( ) ) ;
rank: 307
score: 99.18686930338542
patch: if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) { return false ; }
rank: 307
score: 99.1102783203125
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name .
rank: 307
score: 98.44400024414062
patch: return ; return false ;
rank: 307
score: 98.42718505859375
patch: / * ; * continue ;
rank: 307
score: 98.37410888671874
patch: continue ; if ;
rank: 308
score: 99.24492355872844
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Parent ( ) . get CaMeL Parent ( ) ) ;
rank: 308
score: 99.163720703125
patch: if ( ref . get CaMeL Parent ( ) . is CaMeL Getter CaMeL Def ( ) ) {
rank: 308
score: 99.11023667279412
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . }
rank: 308
score: 98.44368743896484
patch: * * * / } continue ;
rank: 308
score: 98.42635672433036
patch: do { return false ; }
rank: 308
score: 98.37368774414062
patch: if ; / / /
rank: 308
score: 98.27294049944196
patch: for ( final ; ; )
rank: 309
score: 99.26830078125
patch: return $STRING$ . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Value ( ) ) ;
rank: 309
score: 99.24465460526316
patch: return gramps . get CaMeL First CaMeL Child ( ) . is CaMeL Get ( ) ;
rank: 309
score: 99.18649291992188
patch: if ( ! ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) )
rank: 309
score: 99.16370567908653
patch: if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Qualified CaMeL
rank: 309
score: 98.506494140625
patch: } ; continue ;
rank: 309
score: 98.4427261352539
patch: return false ; } else break ;
rank: 309
score: 98.42631312779018
patch: return true ; } finally {
rank: 309
score: 98.37346540178571
patch: if ; if ; continue ;
rank: 309
score: 98.27291107177734
patch: continue [ 0 ] = continue ;
rank: 310
score: 99.26824079241071
patch: return ref . get CaMeL First CaMeL Child ( ) . is CaMeL Getter CaMeL Def ( ) ) ;
rank: 310
score: 99.24462890625
patch: return . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent ) ;
rank: 310
score: 99.16338641826923
patch: return parent . is CaMeL Setter CaMeL Def ( name ) ;
rank: 310
score: 99.10988547585227
patch: il . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 310
score: 98.50580705915179
patch: finally { if continue ; }
rank: 310
score: 98.44270324707031
patch: } else if ; if continue ;
rank: 310
score: 98.42631022135417
patch: continue ; } ; ;
rank: 310
score: 98.37308175223214
patch: continue ; * if continue ;
rank: 310
score: 98.27272033691406
patch: if ( ; ) return false ;
rank: 311
score: 99.24455915178571
patch: return Node CaMeL Util . is CaMeL Statement ( ref . get CaMeL First CaMeL Child ( ) ) ;
rank: 311
score: 99.185986328125
patch: if ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , name ) ) {
rank: 311
score: 99.16325940583882
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent , ref ) ;
rank: 311
score: 99.1095303622159
patch: attribute . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 311
score: 98.50521850585938
patch: } * ; continue ;
rank: 311
score: 98.44213104248047
patch: } else / * * * /
rank: 311
score: 98.37275041852679
patch: continue ; if continue ; System
rank: 311
score: 98.27241516113281
patch: continue = false ; return true ;
rank: 312
score: 99.26742117745536
patch: return ( parent . is CaMeL Getter CaMeL Def ( ) ) ;
rank: 312
score: 99.24454538445724
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent == name ) ;
rank: 312
score: 99.18555797230114
patch: if ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent ) )
rank: 312
score: 99.10923549107143
patch: return parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , name ) ;
rank: 312
score: 98.44034249441964
patch: } else ret = false ;
rank: 312
score: 98.42508697509766
patch: if ( ; * / * /
rank: 312
score: 98.37165069580078
patch: continue ; continue ; if continue =
rank: 312
score: 98.27217610677083
patch: continue false return true ;
rank: 313
score: 99.26731178977273
patch: return ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( property ) ;
rank: 313
score: 99.1855232484879
patch: if ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Assigned CaMeL Value ( ) ) ) {
rank: 313
score: 99.16267578125
patch: return this . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Parent ( ) ) ;
rank: 313
score: 99.1091064453125
patch: return ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 313
score: 98.50494384765625
patch: catch new $STRING$ continue ;
rank: 313
score: 98.44001007080078
patch: } else if continue continue continue ;
rank: 313
score: 98.42449951171875
patch: ; finally { continue ; }
rank: 313
score: 98.37109375
patch: continue ; if ; * /
rank: 314
score: 99.26722301136364
patch: ret = gramps . get CaMeL First CaMeL Child ( ) . get CaMeL Assigned CaMeL Value ( ) ;
rank: 314
score: 99.16263156467014
patch: else return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 314
score: 99.10828921669408
patch: while ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) )
rank: 314
score: 98.50358072916667
patch: continue { break ; }
rank: 314
score: 98.43854522705078
patch: if ( continue continue ; continue ;
rank: 314
score: 98.421875
patch: ; ; * / ;
rank: 314
score: 98.36939348493304
patch: break ; if ; continue ;
rank: 314
score: 98.27074432373047
patch: log . error ( $STRING$ + ;
rank: 315
score: 99.26714409722223
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Assigned CaMeL Value ( ) == null ) ;
rank: 315
score: 99.24381801060268
patch: return gramps . get CaMeL First CaMeL Child ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent ) ;
rank: 315
score: 99.10818246694711
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( Node CaMeL Util . get CaMeL Parent CaMeL
rank: 315
score: 98.50285993303571
patch: finally { return false ; }
rank: 315
score: 98.43832833426339
patch: continue * * continue ; }
rank: 315
score: 98.42138671875
patch: continue ; / ;
rank: 315
score: 98.36647033691406
patch: continue ; else ; if continue ;
rank: 315
score: 98.27051798502605
patch: continue throws Runtime CaMeL Exception
rank: 316
score: 99.24350210336539
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) ) ; }
rank: 316
score: 99.18476720010081
patch: if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) ) )
rank: 316
score: 99.16177029079861
patch: return ref . get CaMeL Prop ( ) . is CaMeL Getter CaMeL Def ( ) ;
rank: 316
score: 98.50254603794643
patch: catch ( $STRING$ ) continue ;
rank: 316
score: 98.43702697753906
patch: continue * * * / * /
rank: 316
score: 98.42101178850446
patch: continue ; } * ; ;
rank: 316
score: 98.36541748046875
patch: break ; ; if continue ;
rank: 316
score: 98.27009582519531
patch: continue value CaMeL Of ( ; }
rank: 317
score: 99.26572446469908
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , parent . get CaMeL Assigned CaMeL Value ( ) ) ;
rank: 317
score: 99.2434318296371
patch: return ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 317
score: 99.161533203125
patch: return ref . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Node ( ) ) ;
rank: 317
score: 99.107578125
patch: return parent . get CaMeL Prop ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref ) ;
rank: 317
score: 98.49998779296875
patch: value { continue ;
rank: 317
score: 98.41901506696429
patch: continue * / } * /
rank: 317
score: 98.36481475830078
patch: return / continue ; if continue ;
rank: 317
score: 98.26954650878906
patch: continue false * / return true ;
rank: 318
score: 99.10697605298913
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Prop ( ) ) ;
rank: 318
score: 98.4359130859375
patch: if ( continue continue continue ;
rank: 318
score: 98.36390904017857
patch: if ; continue ; if ;
rank: 318
score: 98.26909528459821
patch: if ( continue , false )
rank: 319
score: 99.2650734230324
patch: return ! Node CaMeL Util . is CaMeL Statement CaMeL Block ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ) ;
rank: 319
score: 99.24311680947581
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL First CaMeL Child ( ) . get CaMeL Node ( ) ) ;
rank: 319
score: 99.18456217447917
patch: if ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Assigned CaMeL Value ( ) ) )
rank: 319
score: 99.10658957741477
patch: loader . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 319
score: 98.49321637834821
patch: continue continue ; catch continue ;
rank: 319
score: 98.43587820870536
patch: continue * * * / /
rank: 319
score: 98.41767120361328
patch: continue ; } ; / * ;
rank: 319
score: 98.3630142211914
patch: return continue ; if ; continue ;
rank: 319
score: 98.2645772298177
patch: synchronized ( continue ) {
rank: 320
score: 99.26463904747597
patch: return Node CaMeL Util . is CaMeL Statement CaMeL Block ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ) ;
rank: 320
score: 99.24270833333334
patch: return gramps . get CaMeL First CaMeL Child ( ) == parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 320
score: 99.18451138200432
patch: if ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Parent ( ) ) ) {
rank: 320
score: 99.16021728515625
patch: if ( ref . is CaMeL Getter CaMeL Def ( ) ) {
rank: 320
score: 99.10640869140624
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Parent CaMeL
rank: 320
score: 98.49288504464286
patch: try { if continue ; }
rank: 320
score: 98.43559265136719
patch: return false ; else return true ;
rank: 320
score: 98.4176254272461
patch: continue * / ret = false ;
rank: 320
score: 98.36131940569196
patch: ; continue ; if continue ;
rank: 320
score: 98.2637939453125
patch: continue false if ( continue )
rank: 321
score: 99.26429094587054
patch: return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Assigned CaMeL Value ( ) == name ) ;
rank: 321
score: 99.24251556396484
patch: return Node CaMeL Util . is CaMeL Statement CaMeL Block ( gramps ) ;
rank: 321
score: 99.18430397727273
patch: assignment . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 321
score: 99.1599609375
patch: else if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 321
score: 99.10603133491848
patch: return gramps . get CaMeL First CaMeL Child ( ) . is CaMeL Getter CaMeL Def ( ) || false ;
rank: 321
score: 98.43531799316406
patch: throw null ;
rank: 321
score: 98.41720581054688
patch: continue ; } * / ; ;
rank: 321
score: 98.36075592041016
patch: break ; if continue ; continue ;
rank: 321
score: 98.26359340122768
patch: continue default . return false ;
rank: 322
score: 99.18425641741071
patch: if ( gramps . is CaMeL Get CaMeL Prop ( ) )
rank: 322
score: 99.159912109375
patch: return parent . is CaMeL Getter CaMeL Def ( name ) ;
rank: 322
score: 99.1059061686198
patch: super . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) . boolean CaMeL Value ( ) ;
rank: 322
score: 98.49166434151786
patch: return false ; continue continue ;
rank: 322
score: 98.43284388950893
patch: continue * continue * * /
rank: 322
score: 98.41687774658203
patch: continue ; ; / * * /
rank: 322
score: 98.36046600341797
patch: return ; if ; if continue ;
rank: 322
score: 98.26319376627605
patch: if ; return true ;
rank: 323
score: 99.26413796164773
patch: return gramps . get CaMeL First CaMeL Child ( ) . is CaMeL Setter CaMeL Def ( ) ) ;
rank: 323
score: 99.24213324652777
patch: if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) ) )
rank: 323
score: 99.18371161099138
patch: return parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , ref . get CaMeL Assigned CaMeL Value ( ) ) ;
rank: 323
score: 99.15984552556819
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref == ) ;
rank: 323
score: 99.10582386363636
patch: match . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 323
score: 98.49115862165179
patch: if continue ; continue continue ;
rank: 323
score: 98.41680145263672
patch: return true ; } catch ( ;
rank: 324
score: 99.26409357244319
patch: ret = gramps . get CaMeL First CaMeL Child ( ) . is CaMeL Getter CaMeL Def ( ) ;
rank: 324
score: 99.18335899939903
patch: if ( ref . get CaMeL Node ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) )
rank: 324
score: 99.159423828125
patch: if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Reference CaMeL
rank: 324
score: 99.10574473505434
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , parent ) ;
rank: 324
score: 98.49098423549107
patch: else { return false ; ;
rank: 324
score: 98.43048967633929
patch: continue / * / continue ;
rank: 324
score: 98.35955047607422
patch: continue ; / / if continue ;
rank: 324
score: 98.26268659319196
patch: continue value . return true ;
rank: 325
score: 99.26395089285714
patch: return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) == parent ) ;
rank: 325
score: 99.2411873109879
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Assigned CaMeL Value ( ) , name ) ;
rank: 325
score: 99.183125
patch: for ( Node ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 325
score: 99.10572350543478
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent , name ) ;
rank: 325
score: 98.49048723493304
patch: catch continue ; continue ; }
rank: 325
score: 98.43017578125
patch: return null ; else return continue ;
rank: 325
score: 98.4163589477539
patch: continue ; } ; finally { ;
rank: 325
score: 98.35765729631696
patch: return ; { if continue ;
rank: 325
score: 98.26091003417969
patch: if ( value != null ) {
rank: 326
score: 99.24106782058189
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Parent ( ) . get CaMeL Parent ( ) ) ;
rank: 326
score: 99.18251439144737
patch: if ( . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) )
rank: 326
score: 99.15840480638587
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref , null ) ;
rank: 326
score: 99.1053466796875
patch: scope . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 326
score: 98.49037679036458
patch: catch null ; continue ;
rank: 326
score: 98.42961774553571
patch: return continue ; break ; }
rank: 326
score: 98.41625104631696
patch: continue ; } ; catch ;
rank: 326
score: 98.35736083984375
patch: continue ; continue ; this
rank: 326
score: 98.26082066127232
patch: if ( ; continue false )
rank: 327
score: 99.2634765625
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Last CaMeL Child ( ) ) ;
rank: 327
score: 99.182373046875
patch: parent . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 327
score: 99.10488746279762
patch: found . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) )
rank: 327
score: 98.48932756696429
patch: } ; continue ; continue ;
rank: 327
score: 98.42833600725446
patch: return continue ; return true ;
rank: 327
score: 98.41565813337054
patch: continue ; } ; / *
rank: 327
score: 98.35709926060268
patch: continue ; continue ; * /
rank: 327
score: 98.26048932756696
patch: if continue ; return false ;
rank: 328
score: 99.24063602570564
patch: return ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Assigned CaMeL Value ( ) ) ) ;
rank: 328
score: 99.18205261230469
patch: if ( parent . get CaMeL First CaMeL Child ( ) == name ) {
rank: 328
score: 98.48875209263393
patch: catch new continue ; continue ;
rank: 328
score: 98.42749895368304
patch: System . out . println ;
rank: 328
score: 98.4151840209961
patch: continue ; * / * / ;
rank: 328
score: 98.3569107055664
patch: continue ; } continue ; break ;
rank: 328
score: 98.2603759765625
patch: continue compare CaMeL To ( ;
rank: 329
score: 99.10472347861842
patch: super . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) . {
rank: 329
score: 98.4879862467448
patch: catch false ; continue ;
rank: 329
score: 98.41480102539063
patch: continue * * ;
rank: 329
score: 98.35635811941964
patch: continue ; System ; continue ;
rank: 329
score: 98.26034109933036
patch: continue false . return true ;
rank: 330
score: 99.26256713867187
patch: return parent . get CaMeL First CaMeL Child ( ) . is CaMeL Statement CaMeL Block ( ) ;
rank: 330
score: 99.181796875
patch: if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) { }
rank: 330
score: 99.15702550551471
patch: return $STRING$ . equals ( ref . get CaMeL First CaMeL Child ( ) ) ;
rank: 330
score: 99.10469193892045
patch: expression . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 330
score: 98.48627580915179
patch: try { continue = continue ;
rank: 330
score: 98.42502267020089
patch: * * * continue / }
rank: 330
score: 98.414794921875
patch: / * continue : * /
rank: 330
score: 98.35579681396484
patch: continue ; continue ; return break ;
rank: 331
score: 99.23980909778226
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Assigned CaMeL Value ( ) . get CaMeL Value ( ) ) ;
rank: 331
score: 99.10457356770833
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( n ) ;
rank: 331
score: 98.48594447544643
patch: catch new $STRING$ ; continue ;
rank: 331
score: 98.42496744791667
patch: continue * * continue ;
rank: 331
score: 98.41395568847656
patch: / * ; * continue * /
rank: 331
score: 98.35579136439732
patch: continue ; continue ; else /
rank: 331
score: 98.25779724121094
patch: continue = false ; return false ;
rank: 332
score: 99.1816342002467
patch: return parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ; }
rank: 332
score: 99.10451096754808
patch: return gramps . is CaMeL Call ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref ) ;
rank: 332
score: 98.42475237165179
patch: } else ret = continue ;
rank: 332
score: 98.41333879743304
patch: continue ; default * continue ;
rank: 332
score: 98.25543212890625
patch: continue get CaMeL Parent ( ;
rank: 333
score: 99.1043636924342
patch: super . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) . }
rank: 333
score: 98.48445638020833
patch: continue continue ; continue {
rank: 333
score: 98.42462158203125
patch: continue * * * / } }
rank: 333
score: 98.41190185546876
patch: continue ; * ;
rank: 333
score: 98.35482025146484
patch: if ; continue ; continue ; else
rank: 333
score: 98.254638671875
patch: continue false parent . continue ;
rank: 334
score: 99.23932243795956
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( var ) ;
rank: 334
score: 99.15592134915866
patch: return ref . get CaMeL First CaMeL Child ( ) . get CaMeL Parent ( ) . is CaMeL Statement CaMeL Block ( ) ;
rank: 334
score: 99.10425743689903
patch: super . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL First CaMeL Child ( ) ) {
rank: 334
score: 98.42450714111328
patch: continue * * * return false ;
rank: 334
score: 98.4118881225586
patch: continue ; ; / * continue ;
rank: 334
score: 98.35384695870536
patch: / * / if continue ;
rank: 334
score: 98.25401088169643
patch: if ( ; else continue ;
rank: 335
score: 99.26153094951923
patch: return gramps . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Node ( ) ) ;
rank: 335
score: 99.23918547453704
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref , parent . get CaMeL First CaMeL Child ( ) ) ;
rank: 335
score: 99.181455078125
patch: if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( gramps ) ) {
rank: 335
score: 99.15590306332237
patch: return gramps . get CaMeL Node ( ) . is CaMeL Setter CaMeL Def ( ) ;
rank: 335
score: 99.10420949835526
patch: return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name == ) ;
rank: 335
score: 98.48304239908855
patch: case 0 ; continue ;
rank: 335
score: 98.42388044084821
patch: return ; } if continue ;
rank: 335
score: 98.41085379464286
patch: continue ; * / ; ;
rank: 335
score: 98.35374450683594
patch: continue ; continue ; if ; try
rank: 335
score: 98.25364467075893
patch: continue false parent = continue ;
rank: 336
score: 99.2390773607337
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Name ( ) ) ;
rank: 336
score: 99.18126723345588
patch: if ( is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ++ ) {
rank: 336
score: 99.15504964192708
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL First CaMeL Child ( ) ;
rank: 336
score: 99.10400390625
patch: xform . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 336
score: 98.4830322265625
patch: / * * continue ;
rank: 336
score: 98.41050502232143
patch: ; ; / * continue ;
rank: 337
score: 99.26109095982143
patch: ret = parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Assigned CaMeL Value ( ) ) ;
rank: 337
score: 99.23873015372983
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Node ( ) . get CaMeL Assigned CaMeL Value ( ) ) ;
rank: 337
score: 99.18118418817934
patch: if ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( type ) ) {
rank: 337
score: 98.48286655970982
patch: } while continue ; continue ;
rank: 337
score: 98.42184884207589
patch: return continue ; for continue ;
rank: 337
score: 98.41019439697266
patch: ; / * continue * / ;
rank: 337
score: 98.3531494140625
patch: continue ; System ; if continue ;
rank: 338
score: 99.23814174107143
patch: return Node CaMeL Util . is CaMeL Statement ( parent . get CaMeL Assigned CaMeL Value ( ) ) ;
rank: 338
score: 99.18107299804687
patch: if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( index ) ) {
rank: 338
score: 99.10393732244319
patch: continue . while ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 338
score: 98.48260498046875
patch: } continue ; return false ;
rank: 338
score: 98.42172241210938
patch: return ; } else return continue ;
rank: 338
score: 98.4101791381836
patch: * / if ( ; continue ;
rank: 338
score: 98.35301862444196
patch: / if continue ; / /
rank: 338
score: 98.2490234375
patch: boolean ret = continue ; continue ;
rank: 339
score: 99.26030815972223
patch: return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( gramps . get CaMeL First CaMeL Child ( ) ) ;
rank: 339
score: 99.23789399245689
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Node ( ) . get CaMeL Node ( ) ) ;
rank: 339
score: 99.18058268229167
patch: if ( type . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 339
score: 99.15427809495192
patch: return ref . get CaMeL First CaMeL Child ( ) . get CaMeL Next ( ) . is CaMeL Getter CaMeL Def ( ) ;
rank: 339
score: 98.48257882254464
patch: if null continue ; continue ;
rank: 339
score: 98.42091369628906
patch: } * * * * * /
rank: 339
score: 98.409912109375
patch: continue ; ; } catch ;
rank: 339
score: 98.35187530517578
patch: continue ; continue ; if / ;
rank: 339
score: 98.24820709228516
patch: continue false = true ; continue ;
rank: 340
score: 99.260283203125
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( target . get CaMeL Assigned CaMeL Value ( ) ) ;
rank: 340
score: 99.18001883370536
patch: if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) { return false ; }
rank: 340
score: 99.15378736413044
patch: return gramps . get CaMeL First CaMeL Child ( ) == parent . is CaMeL Setter CaMeL Def ( ) ;
rank: 340
score: 98.4820556640625
patch: return new $STRING$ != continue ;
rank: 340
score: 98.42075805664062
patch: return continue continue ;
rank: 340
score: 98.40911102294922
patch: if ( ; / * continue ;
rank: 340
score: 98.35140555245536
patch: continue ; return ; continue ;
rank: 340
score: 98.24530029296875
patch: continue false value = true ;
rank: 341
score: 99.2600809733073
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) ==
rank: 341
score: 99.23769705636161
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL First CaMeL Child ( ) ;
rank: 341
score: 99.15377371651786
patch: if ( parent . is CaMeL Setter CaMeL Def ( ) ) {
rank: 341
score: 99.10311729029605
patch: continue return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 341
score: 98.48147147042411
patch: else { continue ; continue ;
rank: 341
score: 98.42056274414062
patch: } else { return true ; }
rank: 341
score: 98.40785435267857
patch: * ; ; * / ;
rank: 341
score: 98.24526977539062
patch: / * continue ; }
rank: 342
score: 99.17967066271552
patch: if ( ! gramps . get CaMeL First CaMeL Child ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) )
rank: 342
score: 99.15374286358173
patch: if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Child CaMeL
rank: 342
score: 99.10228382457386
patch: return parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Parent CaMeL
rank: 342
score: 98.48033447265625
patch: i . continue ;
rank: 342
score: 98.419677734375
patch: return true ; return false ;
rank: 342
score: 98.40776062011719
patch: for ( ; ; ) { ;
rank: 342
score: 98.35089874267578
patch: continue ; continue ; / break ;
rank: 342
score: 98.24332101004464
patch: continue throws Runtime CaMeL Exception ;
rank: 343
score: 99.17952104048295
patch: if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , name ) ) {
rank: 343
score: 99.15300835503473
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref ) ) ;
rank: 343
score: 99.10205078125
patch: return gramps . get CaMeL Prop ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( id ) ;
rank: 343
score: 98.47903878348214
patch: } * continue ; continue ;
rank: 343
score: 98.40742710658482
patch: if ( ; * / /
rank: 343
score: 98.35089874267578
patch: continue ; if ; continue ; throw
rank: 343
score: 98.24293736049107
patch: continue false = false ; }
rank: 344
score: 99.25955200195312
patch: ret = Node CaMeL Util . is CaMeL Statement CaMeL Block ( ref . get CaMeL First CaMeL Child ( ) ) ;
rank: 344
score: 99.23700161637932
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Parent ( ) . get CaMeL Node ( ) ) ;
rank: 344
score: 99.17948404947917
patch: return ! Node CaMeL Util . is CaMeL Statement CaMeL Block ( parent . get CaMeL Assigned CaMeL Value ( ) ) ;
rank: 344
score: 99.15299479166667
patch: return ref . get CaMeL First CaMeL Child ( ) . is CaMeL Statement ( ) ;
rank: 344
score: 99.10172895951705
patch: Reduction . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 344
score: 98.47773960658482
patch: return true ; if continue ;
rank: 344
score: 98.41860525948661
patch: } else if continue ; else
rank: 344
score: 98.4072265625
patch: continue ; } } return false ;
rank: 344
score: 98.3496322631836
patch: continue ; continue ; { continue ;
rank: 344
score: 98.24200439453125
patch: ret = false ; }
rank: 345
score: 99.25918344350961
patch: return parent . is CaMeL Getter CaMeL Def ( ) ) ;
rank: 345
score: 99.23648807920259
patch: return gramps . get CaMeL First CaMeL Child ( ) . get CaMeL First CaMeL Child ( ) . is CaMeL Statement CaMeL Block ( ) ;
rank: 345
score: 99.17945498511905
patch: if ( is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , name ) ) {
rank: 345
score: 99.1529296875
patch: return this . ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref ) ;
rank: 345
score: 99.10159434442934
patch: return gramps . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Node CaMeL
rank: 345
score: 98.47772216796875
patch: } else ; continue ;
rank: 345
score: 98.40706961495536
patch: * / ret = false ;
rank: 345
score: 98.34946986607143
patch: final if continue ; continue ;
rank: 345
score: 98.23986053466797
patch: boolean is CaMeL Null = continue ;
rank: 346
score: 99.25907970610119
patch: return gramps . get CaMeL First CaMeL Child ( ) == ref . get CaMeL Parent ( ) ;
rank: 346
score: 99.2364566200658
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref == name ) ;
rank: 346
score: 99.15225883152173
patch: result = ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref ) ;
rank: 346
score: 99.1011629971591
patch: callback . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 346
score: 98.41775076729911
patch: } if ( ! continue ;
rank: 346
score: 98.40643310546875
patch: continue * / /
rank: 346
score: 98.34938049316406
patch: return if continue ; while continue ;
rank: 347
score: 99.23637838924633
patch: return . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ;
rank: 347
score: 99.17899867466518
patch: if ( gramps . get CaMeL First CaMeL Child ( ) ==
rank: 347
score: 99.15189302884616
patch: return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Parent CaMeL Node ( ) ) ;
rank: 347
score: 99.10102982954545
patch: processor . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 347
score: 98.47537231445312
patch: i . continue ; }
rank: 347
score: 98.4168472290039
patch: continue * * * return continue ;
rank: 347
score: 98.40585327148438
patch: continue null ; } catch ( ;
rank: 347
score: 98.34926060267857
patch: continue ; if ; if ;
rank: 347
score: 98.23515101841518
patch: } else if ( continue )
rank: 348
score: 99.25839669363839
patch: return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) == ref ) ;
rank: 348
score: 99.1783806295956
patch: if ( gramps . get CaMeL First CaMeL Child ( ) == name ) {
rank: 348
score: 99.10087076822917
patch: continue || is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 348
score: 98.47317068917411
patch: if null ; continue ; ;
rank: 348
score: 98.41663360595703
patch: return true ; } return continue ;
rank: 348
score: 98.40532575334821
patch: continue ; * continue * ;
rank: 348
score: 98.34891510009766
patch: continue ; continue ; continue ; System
rank: 349
score: 99.25820486886161
patch: return ref . get CaMeL First CaMeL Child ( ) . get CaMeL First CaMeL Child ( ) . get CaMeL Assigned CaMeL Value ( ) ;
rank: 349
score: 99.17829000538794
patch: if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( gramps . get CaMeL Assigned CaMeL Value ( ) ) ) {
rank: 349
score: 99.15167557565789
patch: return ref . get CaMeL Node ( ) . is CaMeL Getter CaMeL Def ( ) ) ;
rank: 349
score: 99.10071411132813
patch: return parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 349
score: 98.47265625
patch: value ; continue ;
rank: 349
score: 98.4166259765625
patch: continue * * continue * * /
rank: 349
score: 98.40517752511161
patch: continue ; } try { ;
rank: 349
score: 98.34852818080357
patch: continue ; ; if ; /
rank: 349
score: 98.23484584263393
patch: continue true / * continue ;
rank: 350
score: 99.2577488111413
patch: return Node CaMeL Util . is CaMeL Statement CaMeL Block ( name . get CaMeL Assigned CaMeL Value ( ) ) ;
rank: 350
score: 99.2361370584239
patch: return gramps . get CaMeL First CaMeL Child ( ) == parent . is CaMeL Get CaMeL Prop ( ) ;
rank: 350
score: 99.17786096643519
patch: if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) { return false ;
rank: 350
score: 99.15149864783653
patch: return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . is CaMeL Getter CaMeL Def ( ) ) ;
rank: 350
score: 99.10068766276042
patch: return parent . get CaMeL Prop ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ;
rank: 350
score: 98.47185407366071
patch: continue { try ; continue ;
rank: 350
score: 98.41630045572917
patch: return false || continue ;
rank: 350
score: 98.40486653645833
patch: continue ; ; * /
rank: 350
score: 98.34850311279297
patch: continue ; if ; = break ;
rank: 350
score: 98.23456682477679
patch: if ( scope != null )
rank: 351
score: 99.17777876420455
patch: if ( ! node . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 351
score: 99.10066731770833
patch: xml . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) )
rank: 351
score: 98.4718526204427
patch: super . continue ; ;
rank: 351
score: 98.41573333740234
patch: case null * * * * /
rank: 351
score: 98.40314592633929
patch: / * continue * ; }
rank: 351
score: 98.34773254394531
patch: continue ; if ; return continue ;
rank: 351
score: 98.23161969866071
patch: continue false this . continue ;
rank: 352
score: 99.25742368344908
patch: return ref . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL First CaMeL Child ( ) ) ;
rank: 352
score: 99.23567147090517
patch: return Node CaMeL Util . is CaMeL Statement CaMeL Block ( parent . get CaMeL First CaMeL Child ( ) . get CaMeL Parent ( ) ) ;
rank: 352
score: 99.1777010830966
patch: while ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) )
rank: 352
score: 98.4718017578125
patch: catch ( Exception continue ;
rank: 352
score: 98.41331263950893
patch: continue * * return false ;
rank: 352
score: 98.40282185872395
patch: continue - 1 * /
rank: 352
score: 98.3475341796875
patch: continue ; continue ; catch continue ;
rank: 352
score: 98.23148018973214
patch: if ( continue = false )
rank: 353
score: 99.25741811899039
patch: return ! parent . is CaMeL Get CaMeL Prop ( ) ;
rank: 353
score: 99.23530910326087
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Type ( ) ) ;
rank: 353
score: 99.17765299479167
patch: if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Parent ( ) ) ) {
rank: 353
score: 99.10053045099431
patch: loop . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 353
score: 98.47156633649554
patch: continue ; try { continue ;
rank: 353
score: 98.41203962053571
patch: return continue ; } break ;
rank: 353
score: 98.40203857421875
patch: continue ; in * / * /
rank: 353
score: 98.23121861049107
patch: try { continue ; } else
rank: 354
score: 99.23489695581897
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Parent ( ) . get CaMeL Node ( ) ) ;
rank: 354
score: 99.17756453804348
patch: return ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ; }
rank: 354
score: 98.40073939732143
patch: continue * * / ; }
rank: 354
score: 98.34708077566964
patch: } if continue ; break ;
rank: 354
score: 98.22991943359375
patch: if ( continue ; } continue ;
rank: 355
score: 99.23418137122844
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Node ( ) . get CaMeL Node ( ) ) ;
rank: 355
score: 99.1490478515625
patch: if ( ref . get CaMeL Parent ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ) {
rank: 355
score: 99.09996880425348
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name == ) ;
rank: 355
score: 98.47037760416667
patch: if ( continue false ;
rank: 355
score: 98.41190883091518
patch: return ; } } continue ;
rank: 355
score: 98.40038190569196
patch: * / if ( ; ;
rank: 355
score: 98.34700775146484
patch: continue ; ; if ; / /
rank: 355
score: 98.22948455810547
patch: if ; do { continue ; }
rank: 356
score: 99.256416015625
patch: return Node CaMeL Util . is CaMeL Statement CaMeL Block ( parent . get CaMeL First CaMeL Child ( ) == parent ) ;
rank: 356
score: 99.23418137122844
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Node ( ) . get CaMeL Node ( ) ) ;
rank: 356
score: 99.14779324001736
patch: if ( ! Node CaMeL Util . is CaMeL Getter CaMeL Def ( ref ) ) {
rank: 356
score: 99.09983317057292
patch: return ref . get CaMeL Prop ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ;
rank: 356
score: 98.47010149274554
patch: } continue ; continue ; int
rank: 356
score: 98.39998081752232
patch: / * continue * / }
rank: 356
score: 98.22940826416016
patch: if continue ; if ( continue )
rank: 357
score: 99.17664155505952
patch: if ( parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ) { {
rank: 357
score: 99.099755859375
patch: return ref . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Node ( ) ) ;
rank: 357
score: 98.469482421875
patch: return ( continue && continue ;
rank: 357
score: 98.39896937779018
patch: continue * / if ; ;
rank: 357
score: 98.34684535435268
patch: if continue ; ; break ;
rank: 357
score: 98.2291971842448
patch: continue false * continue ;
rank: 358
score: 99.17652154737904
patch: if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( gramps . get CaMeL Node ( ) ) ) {
rank: 358
score: 99.14667619977679
patch: return ref . get CaMeL First CaMeL Child ( ) != null ;
rank: 358
score: 99.0992919921875
patch: return name . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) ;
rank: 358
score: 98.46733747209821
patch: else { while continue ; }
rank: 358
score: 98.41119384765625
patch: } else if ; return true ;
rank: 358
score: 98.39896937779018
patch: / * ; / * /
rank: 358
score: 98.34669494628906
patch: if continue ; continue ; ; }
rank: 358
score: 98.22859700520833
patch: continue false
rank: 359
score: 99.23356410435268
patch: return . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Assigned CaMeL Value ( ) == name ) ;
rank: 359
score: 99.17632184709821
patch: if ( ref . get CaMeL First CaMeL Child ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) )
rank: 359
score: 99.14576480263158
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , false ) ;
rank: 359
score: 99.09907670454545
patch: return gramps . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , name ) ;
rank: 359
score: 98.4664306640625
patch: else { * continue ; }
rank: 359
score: 98.41107940673828
patch: * * * * / * /
rank: 359
score: 98.39888218470982
patch: continue null ; } finally {
rank: 359
score: 98.3465067545573
patch: continue ; continue ; {
rank: 359
score: 98.22766985212054
patch: continue this . return true ;
rank: 360
score: 99.2553074048913
patch: return ( gramps . get CaMeL First CaMeL Child ( ) . is CaMeL Getter CaMeL Def ( ) ) ;
rank: 360
score: 99.23356119791667
patch: return gramps . get CaMeL First CaMeL Child ( ) . is CaMeL Getter CaMeL Def ( parent . get CaMeL First CaMeL Child ( ) ) ;
rank: 360
score: 99.17630004882812
patch: if ( ! Node CaMeL Util . is CaMeL Statement CaMeL Block ( parent . get CaMeL Parent ( ) ) ) {
rank: 360
score: 99.09900390625
patch: return parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Prop ( ) ) ;
rank: 360
score: 98.46554129464286
patch: for continue ; continue ; ;
rank: 360
score: 98.41094207763672
patch: { if continue ; continue ; }
rank: 360
score: 98.22654215494792
patch: boolean ret = false ;
rank: 361
score: 99.25509643554688
patch: return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name == null ) ;
rank: 361
score: 99.17585100446429
patch: if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Assigned CaMeL Value ( ) ) ) {
rank: 361
score: 98.46526227678571
patch: try { for continue ; }
rank: 361
score: 98.40941510881696
patch: return false ; } if ;
rank: 361
score: 98.3984603881836
patch: continue ; } catch ; * /
rank: 361
score: 98.34572928292411
patch: / ; continue ; break ;
rank: 361
score: 98.22642008463542
patch: continue false && continue ;
rank: 362
score: 99.23318917410714
patch: return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL First CaMeL Child ( ) == name ) ;
rank: 362
score: 99.17584425403226
patch: if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( . get CaMeL First CaMeL Child ( ) ) ) {
rank: 362
score: 99.14311137952302
patch: return ref . get CaMeL Parent ( ) . is CaMeL Getter CaMeL Def ( ) ) ;
rank: 362
score: 99.09872581845238
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( group ) ;
rank: 362
score: 98.46486990792411
patch: } if false ; continue ;
rank: 362
score: 98.4093017578125
patch: this . return continue ; }
rank: 362
score: 98.39812360491071
patch: return ; / * continue ;
rank: 362
score: 98.34532165527344
patch: if ; continue ; continue ; ;
rank: 362
score: 98.22582135881696
patch: continue true * / continue ;
rank: 363
score: 99.2546154203869
patch: return parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name == null ) ;
rank: 363
score: 99.23313621238425
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( refs , parent . get CaMeL First CaMeL Child ( ) ) ;
rank: 363
score: 99.14274516858552
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref , parent ) ;
rank: 363
score: 99.09871419270833
patch: return gramps . get CaMeL Prop ( ) . is CaMeL Getter CaMeL Def ( )
rank: 363
score: 98.46178181966145
patch: if 0 ; continue ;
rank: 363
score: 98.40887451171875
patch: if ; return continue ; continue ;
rank: 363
score: 98.39720153808594
patch: continue ; } else { throw ;
rank: 363
score: 98.34442138671875
patch: return if continue ; / /
rank: 363
score: 98.22562953404018
patch: if ( ; ++ continue ;
rank: 364
score: 99.174580078125
patch: if ( is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Node ( ) ) ) {
rank: 364
score: 99.14225260416667
patch: return ref . get CaMeL Parent ( ) . is CaMeL Statement CaMeL Block ( ) ;
rank: 364
score: 99.09833318536931
patch: block . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 364
score: 98.46139090401786
patch: continue { return continue ; }
rank: 364
score: 98.40863909040179
patch: } else { for continue ;
rank: 364
score: 98.39712088448661
patch: continue ; out = true ;
rank: 364
score: 98.34430694580078
patch: try ; continue ; if continue ;
rank: 364
score: 98.22548421223958
patch: result = true ; }
rank: 365
score: 99.25431605747768
patch: return gramps . get CaMeL First CaMeL Child ( ) == is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 365
score: 99.23297991071429
patch: return ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Parent ( ) ) ;
rank: 365
score: 99.1742831143466
patch: if ( gramps . get CaMeL First CaMeL Child ( ) . is CaMeL Getter CaMeL Def ( ) )
rank: 365
score: 99.14177788628473
patch: try { is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 365
score: 99.09817023026316
patch: { return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 365
score: 98.4607645670573
patch: continue ; return null ;
rank: 365
score: 98.4084243774414
patch: * * * * continue / }
rank: 365
score: 98.39598083496094
patch: continue ; ; } ; * /
rank: 365
score: 98.34383392333984
patch: if ; * / if continue ;
rank: 365
score: 98.22414725167411
patch: for ( int ; ; )
rank: 366
score: 99.25416847511575
patch: return Node CaMeL Util . is CaMeL Statement CaMeL Block ( ! Node CaMeL Util . is CaMeL Statement CaMeL Block ( ref ) ) ;
rank: 366
score: 99.23295375279018
patch: return ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 366
score: 99.0981381064967
patch: return return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 366
score: 98.46065673828124
patch: result ; continue ;
rank: 366
score: 98.39592742919922
patch: continue ; / * continue : ;
rank: 366
score: 98.34373256138393
patch: continue ; ; { continue ;
rank: 366
score: 98.22393798828125
patch: if ( value == null ) {
rank: 367
score: 99.2534412202381
patch: return Node CaMeL Util . is CaMeL Statement CaMeL Block ( parent . get CaMeL Node ( ) ) ;
rank: 367
score: 99.23245675223214
patch: return ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Node ( ) ) ;
rank: 367
score: 99.17385428292411
patch: if ( gramps . get CaMeL First CaMeL Child ( ) ;
rank: 367
score: 99.139892578125
patch: return Node CaMeL Util . is CaMeL Inlinable CaMeL Object ( ref ) ;
rank: 367
score: 99.0980224609375
patch: stream . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 367
score: 98.45949881417411
patch: continue continue ; ; continue ;
rank: 367
score: 98.40803745814732
patch: this . return ( continue ;
rank: 367
score: 98.39588928222656
patch: continue * / * / * /
rank: 367
score: 98.34347970145089
patch: return * continue / continue ;
rank: 367
score: 98.2238540649414
patch: continue false for ( ; ; )
rank: 368
score: 99.25335984002976
patch: return parent . is CaMeL Getter CaMeL Def ( ref . get CaMeL First CaMeL Child ( ) ) ;
rank: 368
score: 99.232177734375
patch: return ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Assigned CaMeL Value ( ) ) ) ;
rank: 368
score: 99.17360521399456
patch: if ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( index ) ) {
rank: 368
score: 99.13788248697917
patch: return Node CaMeL Util . is CaMeL Getter CaMeL Def ( parent ) ;
rank: 368
score: 99.09752308238636
patch: binding . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 368
score: 98.45915876116071
patch: Assert . continue ; continue ;
rank: 368
score: 98.40763092041016
patch: return false ; continue ; } else
rank: 368
score: 98.39556884765625
patch: continue ; } while ( ; )
rank: 368
score: 98.34278215680804
patch: continue ; if continue ; int
rank: 368
score: 98.22237396240234
patch: throw new Unsupported CaMeL Operation CaMeL Exception
rank: 369
score: 99.17355872844827
patch: if ( name . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL First CaMeL Child ( ) ) ) {
rank: 369
score: 99.13706868489584
patch: if ( gramps . is CaMeL Setter CaMeL Def ( ) ) {
rank: 369
score: 98.45914132254464
patch: while continue ; continue ; ;
rank: 369
score: 98.40700276692708
patch: * * / continue ;
rank: 369
score: 98.39522879464286
patch: if ( parent . ; }
rank: 369
score: 98.34273856026786
patch: continue ; ; = continue ;
rank: 369
score: 98.22225516183036
patch: continue . . return false ;
rank: 370
score: 99.17343374399039
patch: if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , ref ) ) {
rank: 370
score: 99.13673231336806
patch: return ref . get CaMeL Node ( ) . is CaMeL Statement CaMeL Block ( ) ;
rank: 370
score: 99.09723455255681
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . ) ;
rank: 370
score: 98.45753987630208
patch: continue { continue ; *
rank: 370
score: 98.40699114118304
patch: case null * * * /
rank: 370
score: 98.39507184709821
patch: / ; ; ; * /
rank: 370
score: 98.34233747209821
patch: return / * continue ; /
rank: 370
score: 98.22152099609374
patch: if ( ; )
rank: 371
score: 99.25194149925595
patch: return gramps . get CaMeL First CaMeL Child ( ) . get CaMeL Assigned CaMeL Value ( ) ;
rank: 371
score: 99.23086149796195
patch: return gramps . get CaMeL First CaMeL Child ( ) != parent . is CaMeL Getter CaMeL Def ( ) ;
rank: 371
score: 99.17259632457386
patch: return parent . get CaMeL First CaMeL Child ( ) == parent . get CaMeL Assigned CaMeL Value ( ) ;
rank: 371
score: 99.13450792100694
patch: return ref . get CaMeL Node ( ) . is CaMeL Get CaMeL Prop ( ) ;
rank: 371
score: 99.096826171875
patch: return $STRING$ . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Node ( ) ) ;
rank: 371
score: 98.45750935872395
patch: continue { return null ;
rank: 371
score: 98.39496721540179
patch: continue ; default : * /
rank: 372
score: 99.2517977627841
patch: ret = Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent ) ;
rank: 372
score: 99.23060344827586
patch: return gramps . get CaMeL First CaMeL Child ( ) == parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ;
rank: 372
score: 99.17254169170673
patch: if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) return false ;
rank: 372
score: 99.09651322798295
patch: att . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 372
score: 98.45737130301339
patch: else { continue ; ; }
rank: 372
score: 98.39429473876953
patch: continue * * / if ( ;
rank: 372
score: 98.34123229980469
patch: continue ; continue ; -- continue ;
rank: 372
score: 98.218603515625
patch: continue . continue ;
rank: 373
score: 99.23059953962054
patch: return ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Value ( ) ) ;
rank: 373
score: 99.17251586914062
patch: if ( gramps . get CaMeL First CaMeL Child ( ) == parent )
rank: 373
score: 99.13418240017361
patch: if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name .
rank: 373
score: 99.09641335227273
patch: table . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 373
score: 98.45479038783482
patch: return true ; while continue ;
rank: 373
score: 98.39391217912946
patch: * ; * ; * /
rank: 373
score: 98.34097726004464
patch: if continue ; continue ; if
rank: 373
score: 98.21856689453125
patch: result = false ; }
rank: 374
score: 99.25084092881944
patch: return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( node ) ;
rank: 374
score: 99.23055326021634
patch: return is CaMeL Inlinable CaMeL Object ( name ) ;
rank: 374
score: 99.17236328125
patch: if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL First CaMeL Child ( ) ) )
rank: 374
score: 99.13382161458334
patch: return Node CaMeL Util . is CaMeL Setter CaMeL Def ( ref ) ;
rank: 374
score: 99.09626207853618
patch: answer = ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 374
score: 98.45425415039062
patch: out . continue ;
rank: 374
score: 98.40472412109375
patch: } else { try = continue ;
rank: 374
score: 98.39385986328125
patch: continue ; } * continue * ;
rank: 374
score: 98.34089660644531
patch: continue ; / ; if continue ;
rank: 374
score: 98.21575927734375
patch: continue get CaMeL Log ( ;
rank: 375
score: 99.13317192925348
patch: if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref CaMeL
rank: 375
score: 99.09609985351562
patch: return name . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL
rank: 375
score: 98.45345633370536
patch: } else { while continue ;
rank: 375
score: 98.40437534877232
patch: * * continue ; continue ;
rank: 375
score: 98.39290945870536
patch: continue * * continue * ;
rank: 375
score: 98.3407974243164
patch: continue ; continue ; return if ;
rank: 376
score: 99.17209759880515
patch: if ( is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) )
rank: 376
score: 99.13273402622768
patch: Node ref = ref . get CaMeL First CaMeL Child ( ) ;
rank: 376
score: 99.09599609375
patch: if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( id ) ) {
rank: 376
score: 98.45308430989583
patch: } try { continue ;
rank: 376
score: 98.40435028076172
patch: * * * / return continue ;
rank: 376
score: 98.39230346679688
patch: continue ; } * / return ;
rank: 376
score: 98.33941650390625
patch: continue ; continue ; } return ;
rank: 377
score: 99.24993896484375
patch: return ref . get CaMeL First CaMeL Child ( ) . get CaMeL First CaMeL Child ( ) . is CaMeL Statement CaMeL Block ( ) ;
rank: 377
score: 99.1719970703125
patch: if ( Node CaMeL Util . is CaMeL Statement CaMeL Block ( gramps . get CaMeL First CaMeL Child ( ) ) ) {
rank: 377
score: 99.13206263950893
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ;
rank: 377
score: 98.40409633091518
patch: return false ; } else ;
rank: 377
score: 98.39186401367188
patch: continue = ; }
rank: 377
score: 98.3389663696289
patch: if continue ; while ; continue ;
rank: 377
score: 98.21247209821429
patch: continue new Error ( $STRING$ ;
rank: 378
score: 99.17198689778645
patch: if ( gramps . is CaMeL Call ( ) )
rank: 378
score: 99.13195037841797
patch: return ! Node CaMeL Util . is CaMeL Getter CaMeL Def ( ref ) ;
rank: 378
score: 99.095966796875
patch: return gramps . get CaMeL Prop ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name .
rank: 378
score: 98.45267159598214
patch: try { continue ; * /
rank: 378
score: 98.40348815917969
patch: } else { / * * /
rank: 378
score: 98.39182826450893
patch: continue ; * / / ;
rank: 378
score: 98.33847045898438
patch: continue ; continue ; =
rank: 378
score: 98.21242850167411
patch: throw new Assertion CaMeL Error ;
rank: 379
score: 99.24867876838235
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( declarations ) ;
rank: 379
score: 99.22921187789352
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent , parent . get CaMeL First CaMeL Child ( ) ) ;
rank: 379
score: 99.17161051432292
patch: if ( ! Node CaMeL Util . is CaMeL Call ( parent . get CaMeL First CaMeL Child ( ) ) ) {
rank: 379
score: 99.13136509486607
patch: return ref . get CaMeL First CaMeL Child ( ) == null ;
rank: 379
score: 99.095673828125
patch: return is CaMeL Get CaMeL Prop ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref ) ;
rank: 379
score: 98.45255533854167
patch: else { for continue ;
rank: 379
score: 98.40305873325893
patch: } } else if continue ;
rank: 379
score: 98.390869140625
patch: continue ; } * * /
rank: 379
score: 98.33480072021484
patch: continue ; ; continue ; break ;
rank: 379
score: 98.21096365792411
patch: synchronized ( this ; ) {
rank: 380
score: 99.24867650082237
patch: continue ret = is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 380
score: 99.22911658653847
patch: return is CaMeL Inlinable CaMeL Object ( ref ) ;
rank: 380
score: 99.1715576171875
patch: return gramps . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , ref . get CaMeL Assigned CaMeL Value ( ) ) ;
rank: 380
score: 99.13001360212054
patch: Node ref = ref . get CaMeL Assigned CaMeL Value ( ) ;
rank: 380
score: 98.4525146484375
patch: else { continue ; break ;
rank: 380
score: 98.4030517578125
patch: } else break ;
rank: 380
score: 98.39070129394531
patch: continue ; } catch ( ; ;
rank: 380
score: 98.33473205566406
patch: if continue ; if continue ; else
rank: 380
score: 98.21063232421875
patch: if ( ; } continue ;
rank: 381
score: 99.22898763020834
patch: return gramps . get CaMeL First CaMeL Child ( ) . is CaMeL Get CaMeL Prop ( parent . get CaMeL First CaMeL Child ( ) ) ;
rank: 381
score: 99.17149135044643
patch: if ( parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL First CaMeL Child ( ) ) )
rank: 381
score: 99.12844848632812
patch: return ref . is CaMeL Getter CaMeL Def ( ) ;
rank: 381
score: 98.45241292317708
patch: / * continue ; ;
rank: 381
score: 98.40282185872395
patch: } if continue ; }
rank: 381
score: 98.39013671875
patch: continue ; } ret = true ;
rank: 381
score: 98.33458709716797
patch: break ; continue ; } continue ;
rank: 381
score: 98.21027374267578
patch: do { continue ; } continue ;
rank: 382
score: 99.22881208147321
patch: return ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Assigned CaMeL Value ( ) ) ) ;
rank: 382
score: 99.1714375813802
patch: if ( parent . is CaMeL Call ( ) ) {
rank: 382
score: 99.121484375
patch: is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs = false ;
rank: 382
score: 99.0952392578125
patch: return ! ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) ;
rank: 382
score: 98.45235770089286
patch: logger . error continue continue ;
rank: 382
score: 98.40237862723214
patch: * * * continue ; }
rank: 382
score: 98.39011056082589
patch: ; ; * ; * /
rank: 382
score: 98.33396693638393
patch: return ; else if continue ;
rank: 382
score: 98.2083740234375
patch: continue ; } catch continue ;
rank: 383
score: 99.24699096679687
patch: return ref . get CaMeL First CaMeL Child ( ) . get CaMeL Assigned CaMeL Value ( ) ;
rank: 383
score: 99.171376953125
patch: if ( Node CaMeL Util . is CaMeL Getter CaMeL Def ( ref . get CaMeL First CaMeL Child ( ) ) ) {
rank: 383
score: 99.1214599609375
patch: return Node CaMeL Util . is CaMeL Getter CaMeL Def ( name ) ;
rank: 383
score: 99.09498180042614
patch: bug . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 383
score: 98.45228794642857
patch: / finally { continue ; }
rank: 383
score: 98.33351353236607
patch: continue ; if continue ; throw
rank: 383
score: 98.20774841308594
patch: try { for ( ; ; )
rank: 384
score: 99.24666050502232
patch: return parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) == ) ;
rank: 384
score: 99.22850206163194
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name == name ;
rank: 384
score: 99.17116380774456
patch: if ( Node CaMeL Util . is CaMeL Call ( parent . get CaMeL First CaMeL Child ( ) ) ) {
rank: 384
score: 99.12143380301339
patch: Node name CaMeL Node = ref . get CaMeL Parent ( ) ;
rank: 384
score: 99.09453790838069
patch: code . if ( parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) )
rank: 384
score: 98.45203653971355
patch: else { break ; }
rank: 384
score: 98.40196228027344
patch: return false ; } for continue ;
rank: 384
score: 98.38880920410156
patch: continue / * * continue * /
rank: 384
score: 98.33344377790179
patch: continue ; if continue ; continue
rank: 384
score: 98.20685686383929
patch: continue false ret = continue ;
rank: 385
score: 99.24662449048913
patch: return ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( gramps ) ;
rank: 385
score: 99.2283576516544
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ) ;
rank: 385
score: 99.17113196331522
patch: while ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) )
rank: 385
score: 99.11954752604167
patch: return ref . get CaMeL Assigned CaMeL Value ( ) ;
rank: 385
score: 99.09377712673611
patch: switch ( is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) )
rank: 385
score: 98.38852364676339
patch: if ( ; / * /
rank: 385
score: 98.33343505859375
patch: continue ; if ; ;
rank: 386
score: 99.17041693793402
patch: if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ++ ) {
rank: 386
score: 99.11688639322917
patch: if ( gramps . is CaMeL Statement CaMeL Block ( ) ) {
rank: 386
score: 99.09369365985577
patch: return is CaMeL Get CaMeL Prop ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) ;
rank: 386
score: 98.45027378627232
patch: out . ; continue ; }
rank: 386
score: 98.40182059151786
patch: this . return false ; }
rank: 386
score: 98.38850402832031
patch: continue * / / * * ;
rank: 386
score: 98.3333740234375
patch: return ; if continue ; if ;
rank: 386
score: 98.20527648925781
patch: continue = true ; } continue ;
rank: 387
score: 99.24586397058823
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( false ) ;
rank: 387
score: 99.22781687769397
patch: return gramps . get CaMeL First CaMeL Child ( ) . get CaMeL First CaMeL Child ( ) . is CaMeL Get CaMeL Prop ( ) ;
rank: 387
score: 99.1701151529948
patch: if ( ! ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) )
rank: 387
score: 99.11422025240384
patch: return gramps . is CaMeL Statement CaMeL Block ( ) ;
rank: 387
score: 98.4002914428711
patch: } else = false ; continue ;
rank: 387
score: 98.38822937011719
patch: ; / * ; ; * /
rank: 387
score: 98.33332824707031
patch: continue ; continue ; switch continue ;
rank: 387
score: 98.20491027832031
patch: continue = true ; return continue ;
rank: 388
score: 99.24579934512867
patch: return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ==
rank: 388
score: 99.22711588541667
patch: return . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Node ( ) . get CaMeL Parent ( ) ) ;
rank: 388
score: 99.16986674647177
patch: if ( ! gramps . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL First CaMeL Child ( ) ) ) {
rank: 388
score: 99.09339488636364
patch: return gramps . get CaMeL First CaMeL Child ( ) . is CaMeL Getter CaMeL Def ( name ) ;
rank: 388
score: 98.44764927455357
patch: continue { ; continue ; }
rank: 388
score: 98.39933776855469
patch: * * * * * / /
rank: 388
score: 98.38800920758929
patch: continue ; * ; * /
rank: 388
score: 98.33273315429688
patch: else ; if continue ; continue ;
rank: 389
score: 99.24572143554687
patch: return ref . get CaMeL Last CaMeL Child ( ) . is CaMeL Getter CaMeL Def ( ) ;
rank: 389
score: 99.16982926993535
patch: if ( parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Assigned CaMeL Value ( ) ) ) {
rank: 389
score: 99.10693359375
patch: synchronized ( is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ) {
rank: 389
score: 99.09322781032986
patch: return . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref ) ;
rank: 389
score: 98.4456787109375
patch: else { throw continue ; }
rank: 389
score: 98.39901733398438
patch: } else = false ;
rank: 389
score: 98.38784790039062
patch: continue * / / / * ;
rank: 389
score: 98.33268519810268
patch: continue ; ; continue ; /
rank: 389
score: 98.20449829101562
patch: if ( continue && ; continue ;
rank: 390
score: 99.1697414232337
patch: return ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent ) ) ;
rank: 390
score: 98.4454345703125
patch: else { for continue ; ;
rank: 390
score: 98.3876724243164
patch: continue ; default : continue ; }
rank: 390
score: 98.3323974609375
patch: continue ; continue ; else ;
rank: 390
score: 98.20448521205357
patch: continue remove CaMeL Child ( ;
rank: 391
score: 99.24564615885417
patch: ret = Node CaMeL Util . is CaMeL Statement CaMeL Block ( parent . get CaMeL First CaMeL Child ( ) ) ;
rank: 391
score: 99.16940104166666
patch: if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL First CaMeL Child ( ) ==
rank: 391
score: 99.1018817608173
patch: val = ref . get CaMeL Assigned CaMeL Value ( ) ;
rank: 391
score: 99.09275309244792
patch: super . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Node ( ) ) ;
rank: 391
score: 98.44533865792411
patch: try { if continue ; ;
rank: 391
score: 98.38725062779018
patch: / ; * continue * /
rank: 391
score: 98.33221435546875
patch: return ; if continue ; }
rank: 391
score: 98.20426025390626
patch: if ( ; }
rank: 392
score: 99.24536743164063
patch: return this . get CaMeL First CaMeL Child ( ) . is CaMeL Getter CaMeL Def ( ) ;
rank: 392
score: 99.16935546875
patch: if ( ! ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref ) ) {
rank: 392
score: 99.09613037109375
patch: return ! Node CaMeL Util . is CaMeL Statement CaMeL Block ( parent ) ;
rank: 392
score: 98.44423828125
patch: item . continue ;
rank: 392
score: 98.3966064453125
patch: { return false ; } else {
rank: 392
score: 98.38707275390625
patch: ; * / ;
rank: 392
score: 98.33216094970703
patch: continue ; if ; ! continue ;
rank: 392
score: 98.20318603515625
patch: continue value = true ;
rank: 393
score: 99.22572905441811
patch: return this . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , parent . get CaMeL First CaMeL Child ( ) ) ;
rank: 393
score: 99.16923191236413
patch: if ( is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) { return false ; }
rank: 393
score: 99.09275465745192
patch: return parent . is CaMeL Setter CaMeL Def ( ref ) ;
rank: 393
score: 99.0924560546875
patch: return ( is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) ) ;
rank: 393
score: 98.44313557942708
patch: else { continue ; /
rank: 393
score: 98.33182983398437
patch: System ; continue ;
rank: 393
score: 98.20259094238281
patch: report CaMeL Error ( $STRING$ + ;
rank: 394
score: 99.16920006793478
patch: synchronized ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref ) ) {
rank: 394
score: 99.09234008789062
patch: return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , parent ) ;
rank: 394
score: 99.09093221028645
patch: return parent . is CaMeL Setter CaMeL Def ( ) ;
rank: 394
score: 98.442626953125
patch: if true ; continue ;
rank: 394
score: 98.39623151506696
patch: * * * while continue ;
rank: 394
score: 98.3856709798177
patch: / ; ; * /
rank: 394
score: 98.33161926269531
patch: continue ; continue ; break ; else
rank: 394
score: 98.20176696777344
patch: if ( continue && ! continue ;
rank: 395
score: 99.225537109375
patch: return gramps . get CaMeL First CaMeL Child ( ) != parent ;
rank: 395
score: 99.16900390625
patch: if ( ! Node CaMeL Util . is CaMeL Statement CaMeL Block ( parent . get CaMeL First CaMeL Child ( ) ) )
rank: 395
score: 99.09228515625
patch: return parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . is CaMeL Getter CaMeL Def ( )
rank: 395
score: 98.39543805803571
patch: continue * continue / continue ;
rank: 395
score: 98.38544573102679
patch: continue ; } ret = ;
rank: 395
score: 98.33060455322266
patch: continue ; if / = continue ;
rank: 395
score: 98.20111955915179
patch: continue $NUMBER$ * / continue ;
rank: 396
score: 99.24404907226562
patch: return ref . get CaMeL First CaMeL Child ( ) == parent . get CaMeL Parent ( ) ;
rank: 396
score: 99.22547258649554
patch: return . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) == ref ) ;
rank: 396
score: 98.44212123325893
patch: else { continue ; / ;
rank: 396
score: 98.39528111049107
patch: } else break ; continue ;
rank: 396
score: 98.38406372070312
patch: continue ; } ; * / ;
rank: 396
score: 98.33039855957031
patch: / if continue ; while continue ;
rank: 396
score: 98.20104108537946
patch: } if ( continue ) {
rank: 397
score: 99.2439197358631
patch: return ! ref . get CaMeL First CaMeL Child ( ) . is CaMeL Getter CaMeL Def ( ) ;
rank: 397
score: 99.22543131510416
patch: return ( gramps . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 397
score: 99.16865066002156
patch: return refs . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , ref . get CaMeL First CaMeL Child ( ) ) ;
rank: 397
score: 99.09224243164063
patch: return null . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) ;
rank: 397
score: 99.083740234375
patch: if ( ref . get CaMeL First CaMeL Child ( ) == parent ) {
rank: 397
score: 98.3827133178711
patch: continue ; default : if ( ;
rank: 397
score: 98.33013916015625
patch: continue ; if ; continue ; try
rank: 397
score: 98.20008196149554
patch: ret = false ; continue ;
rank: 398
score: 99.24372209821429
patch: return this . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name == null ) ;
rank: 398
score: 99.22510928199405
patch: return Node CaMeL Util . is CaMeL Statement ( ref . get CaMeL Assigned CaMeL Value ( ) ) ;
rank: 398
score: 99.16800242456897
patch: if ( ! ref . get CaMeL First CaMeL Child ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ) {
rank: 398
score: 99.091435546875
patch: return null . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Node ( ) ) ;
rank: 398
score: 99.0836181640625
patch: return ref . is CaMeL Setter CaMeL Def ( name ) ;
rank: 398
score: 98.44072614397321
patch: ( null false ; continue ;
rank: 398
score: 98.39419991629464
patch: if ; * * * /
rank: 398
score: 98.38262329101562
patch: continue - $NUMBER$ ;
rank: 398
score: 98.32884724934895
patch: if ; ; continue ;
rank: 398
score: 98.19967651367188
patch: continue ret = continue ; continue ;
rank: 399
score: 99.1676384420956
patch: if ( gramps . get CaMeL First CaMeL Child ( ) != name ) {
rank: 399
score: 99.09142485119048
patch: cm . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) )
rank: 399
score: 98.44066510881696
patch: continue ; ; / / /
rank: 399
score: 98.39328002929688
patch: break ; } else if continue ;
rank: 399
score: 98.32869720458984
patch: / if continue ; for continue ;
rank: 399
score: 98.19793701171875
patch: try { do { continue ; }
rank: 400
score: 99.24288807744566
patch: return gramps . get CaMeL Last CaMeL Child ( ) == parent . get CaMeL First CaMeL Child ( ) ;
rank: 400
score: 99.1674167798913
patch: if ( ! Node CaMeL Util . is CaMeL Statement CaMeL Block ( ref . get CaMeL Parent ( ) ) )
rank: 400
score: 99.09120579769737
patch: return gramps . get CaMeL Prop ( ) . is CaMeL Get CaMeL Prop ( ) ;
rank: 400
score: 99.0821762084961
patch: Node name CaMeL Node = ref . get CaMeL Assigned CaMeL Value ( ) ;
rank: 400
score: 98.44038899739583
patch: continue ; continue ; *
rank: 400
score: 98.39311000279018
patch: continue return false ; continue ;
rank: 400
score: 98.3282470703125
patch: continue ; continue ; = ;
rank: 400
score: 98.19694301060268
patch: Set < String > continue ;
rank: 401
score: 99.24287719726563
patch: return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( this . name ) ;
rank: 401
score: 99.1673583984375
patch: if ( parent . get CaMeL Name ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ) {
rank: 401
score: 99.09114074707031
patch: return gramps . get CaMeL First CaMeL Child ( ) == name ) ;
rank: 401
score: 98.43853759765625
patch: continue { return continue ;
rank: 401
score: 98.38230678013393
patch: continue ; / * ; }
rank: 401
score: 98.3276138305664
patch: continue ; continue ; break ; return
rank: 401
score: 98.19667561848958
patch: ret = true ; }
rank: 402
score: 99.2239501953125
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) == parent ;
rank: 402
score: 99.16724650065105
patch: if ( parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ) { return false ; }
rank: 402
score: 99.09113875679348
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref == parent ) ;
rank: 402
score: 98.43803187779018
patch: * if continue ; continue ;
rank: 402
score: 98.39246622721355
patch: { return false ; }
rank: 402
score: 98.38190569196429
patch: continue = ; } * /
rank: 402
score: 98.19581821986607
patch: continue [ 0 ] . ;
rank: 403
score: 99.16721598307292
patch: if ( gramps . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , name ) ) {
rank: 403
score: 99.09112227590461
patch: return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref ) ) ;
rank: 403
score: 99.07755533854167
patch: Node gramps = ref . get CaMeL First CaMeL Child ( ) ;
rank: 403
score: 98.43677368164063
patch: catch new continue ;
rank: 403
score: 98.39236450195312
patch: } if continue ; while continue ;
rank: 403
score: 98.38056945800781
patch: continue ; } } catch ( ;
rank: 403
score: 98.32714080810547
patch: continue ; continue ; / / }
rank: 403
score: 98.19523620605469
patch: continue = false ; return continue ;
rank: 404
score: 99.22356567382812
patch: return . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , name ) ;
rank: 404
score: 99.16715140964673
patch: if ( ! parent . get CaMeL First CaMeL Child ( ) . is CaMeL Getter CaMeL Def ( ) ) {
rank: 404
score: 99.09104517886513
patch: retval = ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 404
score: 99.07750525841347
patch: return ref . is CaMeL Getter CaMeL Def ( name ) ;
rank: 404
score: 98.43596540178571
patch: try { ; continue ; }
rank: 404
score: 98.39213562011719
patch: return null ; else return false ;
rank: 404
score: 98.38055419921875
patch: continue ; } catch ; ;
rank: 404
score: 98.32680838448661
patch: return ; if continue ; else
rank: 404
score: 98.19464983258929
patch: if ( report CaMeL Error )
rank: 405
score: 99.24180094401042
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name == null ;
rank: 405
score: 99.22334216889881
patch: return Node CaMeL Util . is CaMeL Call ( ref . get CaMeL First CaMeL Child ( ) ) ;
rank: 405
score: 99.16712239583333
patch: if ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) ) )
rank: 405
score: 99.08999794407895
patch: return gramps . get CaMeL Prop ( ) . is CaMeL Getter CaMeL Def ( ) ;
rank: 405
score: 99.07637845552884
patch: return parent . is CaMeL Setter CaMeL Def ( parent ) ;
rank: 405
score: 98.43594360351562
patch: out . continue ; }
rank: 405
score: 98.39143589564732
patch: return continue ; while continue ;
rank: 405
score: 98.38028971354167
patch: return ; } * /
rank: 405
score: 98.32518005371094
patch: result ; continue ; if continue ;
rank: 405
score: 98.19444056919643
patch: if ( continue = true )
rank: 406
score: 99.16703527113971
patch: if ( ! Node CaMeL Util . is CaMeL Statement CaMeL Block ( ref ) )
rank: 406
score: 99.08997163318452
patch: return parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , ref ) ;
rank: 406
score: 99.07583383413461
patch: return parent . is CaMeL Getter CaMeL Def ( parent ) ;
rank: 406
score: 98.4343973795573
patch: catch ( $STRING$ ) {
rank: 406
score: 98.39100864955357
patch: continue * * continue / }
rank: 406
score: 98.37755584716797
patch: continue ; * continue * / ;
rank: 406
score: 98.3240254720052
patch: if ; ! continue ;
rank: 407
score: 99.24163818359375
patch: ret = Node CaMeL Util . is CaMeL Statement CaMeL Block ( ref . get CaMeL Assigned CaMeL Value ( ) ) ;
rank: 407
score: 99.08977307771382
patch: break = ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 407
score: 98.43416341145833
patch: else { return continue ;
rank: 407
score: 98.39049421037946
patch: * * * / if ;
rank: 407
score: 98.37665557861328
patch: continue ; else { continue ; }
rank: 407
score: 98.32366943359375
patch: return * ; if continue ;
rank: 407
score: 98.19210379464286
patch: if ( ; ; continue ;
rank: 408
score: 99.16692483836206
patch: if ( ! parent . get CaMeL First CaMeL Child ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) )
rank: 408
score: 99.08954412286931
patch: return ( parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) ) ;
rank: 408
score: 99.07395582932692
patch: result = ref . get CaMeL Assigned CaMeL Value ( ) ;
rank: 408
score: 98.43321010044643
patch: continue { while continue ; ;
rank: 408
score: 98.39007568359375
patch: if ( continue ; while continue ;
rank: 408
score: 98.376220703125
patch: continue ; } } if ( ;
rank: 408
score: 98.1909408569336
patch: continue false = false ; continue ;
rank: 409
score: 99.24091932508681
patch: return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( n ) ;
rank: 409
score: 99.22226057381465
patch: return Node CaMeL Util . is CaMeL Statement CaMeL Block ( ref . get CaMeL Parent ( ) . get CaMeL First CaMeL Child ( ) ) ;
rank: 409
score: 99.16630859375
patch: if ( parent . get CaMeL Node ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) )
rank: 409
score: 99.08951822916667
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Parent CaMeL
rank: 409
score: 98.43187604631696
patch: continue continue ; return continue ;
rank: 409
score: 98.3900655110677
patch: { if continue ; }
rank: 409
score: 98.3759765625
patch: continue * / if ;
rank: 409
score: 98.32312774658203
patch: if ; { continue ; break ;
rank: 409
score: 98.18996756417411
patch: continue . if ( continue )
rank: 410
score: 99.22162186472039
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( refs , name ) ;
rank: 410
score: 99.16615923713235
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ; }
rank: 410
score: 99.08943684895833
patch: body . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) )
rank: 410
score: 98.431396484375
patch: } continue { continue ; }
rank: 410
score: 98.38945007324219
patch: * * continue * / continue ;
rank: 410
score: 98.37572224934895
patch: continue ; . * /
rank: 410
score: 98.32264709472656
patch: if ; continue ; ; continue ;
rank: 410
score: 98.18907165527344
patch: if ( ; return false ; }
rank: 411
score: 99.23971896701389
patch: return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( target ) ;
rank: 411
score: 99.22154889787946
patch: return . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) == null ) ;
rank: 411
score: 99.16606287802419
patch: if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( gramps . get CaMeL Parent ( ) ) ) {
rank: 411
score: 99.08942260742188
patch: return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ; break ;
rank: 411
score: 98.43097795758929
patch: / * continue continue ; }
rank: 411
score: 98.37564849853516
patch: ; / * continue * * /
rank: 411
score: 98.32255554199219
patch: if ; continue ; } continue ;
rank: 412
score: 99.2395731608073
patch: return gramps . get CaMeL First CaMeL Child ( ) == gramps . get CaMeL First CaMeL Child ( ) ;
rank: 412
score: 99.16604712701613
patch: for ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Assigned CaMeL Value ( ) ) ) {
rank: 412
score: 99.08931790865384
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( Node CaMeL Util . get CaMeL Object CaMeL
rank: 412
score: 99.06914813701923
patch: e = ref . get CaMeL Assigned CaMeL Value ( ) ;
rank: 412
score: 98.3883056640625
patch: * * * / return false ;
rank: 412
score: 98.37497384207589
patch: continue * / * / }
rank: 412
score: 98.32252720424107
patch: else ; continue ; continue ;
rank: 412
score: 98.18775177001953
patch: continue false } if ( continue )
rank: 413
score: 99.23936971028645
patch: return this . parent . get CaMeL First CaMeL Child ( ) == parent . get CaMeL First CaMeL Child ( ) ;
rank: 413
score: 99.21998754040948
patch: return this . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) == parent ) ;
rank: 413
score: 99.16591925370066
patch: if ( is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( refs ) ) {
rank: 413
score: 99.0893046061198
patch: return . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) . is CaMeL Call ( ) ;
rank: 413
score: 99.06468787560097
patch: return gramps . is CaMeL Setter CaMeL Def ( ) ;
rank: 413
score: 98.38803536551339
patch: return continue ; } } else
rank: 413
score: 98.37464141845703
patch: / * ; * / continue ;
rank: 413
score: 98.32220458984375
patch: continue ; continue ; return / ;
rank: 413
score: 98.18600027901786
patch: if ( target != null )
rank: 414
score: 99.16583448840726
patch: if ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( gramps . get CaMeL Assigned CaMeL Value ( ) ) )
rank: 414
score: 99.08915201822917
patch: return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( index ) ;
rank: 414
score: 99.06333571213942
patch: e = ref . get CaMeL First CaMeL Child ( ) ;
rank: 414
score: 98.43030657087054
patch: else { continue ; ; ;
rank: 414
score: 98.38764953613281
patch: return continue ; } continue ; }
rank: 414
score: 98.3740234375
patch: continue ; ; } return ret ;
rank: 414
score: 98.32193429129464
patch: continue ; continue ; ; }
rank: 414
score: 98.18489837646484
patch: if ( continue ; continue ; }
rank: 415
score: 99.23890904017857
patch: return parent . is CaMeL Inlinable CaMeL Object ( ) ;
rank: 415
score: 99.21950276692708
patch: val = is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 415
score: 99.16563924153645
patch: if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( key ) ) {
rank: 415
score: 99.06267438616071
patch: return ref . is CaMeL Inlinable CaMeL Object ( ) ;
rank: 415
score: 98.386962890625
patch: return ; continue ; } else {
rank: 415
score: 98.32136753627232
patch: continue ; continue ; log ;
rank: 415
score: 98.1845703125
patch: try { if ( continue )
rank: 416
score: 99.23880440848214
patch: return this . parent . is CaMeL Getter CaMeL Def ( ) ;
rank: 416
score: 99.16549682617188
patch: if ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) { }
rank: 416
score: 99.08853853665866
patch: super . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL First CaMeL Child ( ) ) {
rank: 416
score: 99.06082857572116
patch: return super . is CaMeL Statement CaMeL Block ( ref ) ;
rank: 416
score: 98.42978515625
patch: else continue continue ;
rank: 416
score: 98.38530622209821
patch: / * * * / }
rank: 416
score: 98.37357875279018
patch: do { continue ; } ;
rank: 416
score: 98.32078043619792
patch: if ; continue ; ;
rank: 416
score: 98.18330601283482
patch: Error CaMeL Handler . continue ;
rank: 417
score: 99.16546433971774
patch: if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Assigned CaMeL Value ( ) ) )
rank: 417
score: 99.08848987926136
patch: return ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) {
rank: 417
score: 99.06048583984375
patch: return ref . get CaMeL First CaMeL Child ( ) == name ;
rank: 417
score: 98.42978341238839
patch: else { continue ; } *
rank: 417
score: 98.38473946707589
patch: } } continue ; continue ;
rank: 417
score: 98.37328229631696
patch: continue ; } ; else {
rank: 417
score: 98.32023620605469
patch: continue ; continue ; if ; *
rank: 417
score: 98.18328857421875
patch: List < String > continue ;
rank: 418
score: 99.21782977764423
patch: return is CaMeL Inlinable CaMeL Object ( parent ) ;
rank: 418
score: 99.16454016644022
patch: if ( ! Node CaMeL Util . is CaMeL Statement CaMeL Block ( ref . get CaMeL Node ( ) ) )
rank: 418
score: 99.0884258563702
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 418
score: 99.06039663461539
patch: return gramps . is CaMeL Getter CaMeL Def ( ) ;
rank: 418
score: 98.4286865234375
patch: if new continue ;
rank: 418
score: 98.38422502790179
patch: * * * ; continue ;
rank: 418
score: 98.373046875
patch: continue * * / continue ; }
rank: 418
score: 98.31977081298828
patch: continue ; continue ; try / }
rank: 418
score: 98.18311564127605
patch: if ( continue = ;
rank: 419
score: 99.23864028033088
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( true ) ;
rank: 419
score: 99.16445524796195
patch: for ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent ) ) {
rank: 419
score: 98.42830113002232
patch: while ( true ; continue ;
rank: 419
score: 98.38398088727679
patch: continue * * / if ;
rank: 419
score: 98.37296549479167
patch: continue ; return true ;
rank: 419
score: 98.31923130580357
patch: continue ; if ; System ;
rank: 419
score: 98.18280901227679
patch: * / if ( continue )
rank: 420
score: 99.21651905980603
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , parent . get CaMeL First CaMeL Child ( ) == name ) ;
rank: 420
score: 99.16444227430556
patch: if ( is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Assigned CaMeL Value ( ) ) ) {
rank: 420
score: 99.088076171875
patch: return ref . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Parent ( ) ) ;
rank: 420
score: 99.06009347098214
patch: return ref . get CaMeL First CaMeL Child ( ) == parent ;
rank: 420
score: 98.42677525111607
patch: return false ; ; ; ;
rank: 420
score: 98.38298797607422
patch: case null * * / continue ;
rank: 420
score: 98.37272426060268
patch: / * continue . * /
rank: 420
score: 98.31880950927734
patch: if ; continue ; return continue ;
rank: 420
score: 98.18267822265625
patch: continue = false ; } continue ;
rank: 421
score: 99.23816499255952
patch: return ( gramps . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ) ;
rank: 421
score: 99.21592610677084
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , gramps . get CaMeL First CaMeL Child ( ) == name ) ;
rank: 421
score: 99.1644287109375
patch: if ( gramps . get CaMeL First CaMeL Child ( ) !=
rank: 421
score: 99.0600116436298
patch: val = ref . get CaMeL First CaMeL Child ( ) ;
rank: 421
score: 98.42613874162946
patch: if null ) { continue ;
rank: 421
score: 98.38268280029297
patch: continue ; } else return continue ;
rank: 421
score: 98.37264578683036
patch: logger . warning ( $STRING$ ;
rank: 421
score: 98.31781768798828
patch: if ; ! continue ; continue ;
rank: 421
score: 98.18153599330357
patch: if ( continue , continue )
rank: 422
score: 99.21525743272569
patch: Preconditions . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 422
score: 99.16344033518145
patch: if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL First CaMeL Child ( ) ) )
rank: 422
score: 99.05472237723214
patch: return ref . get CaMeL Assigned CaMeL Value ( ) == null ;
rank: 422
score: 98.42566935221355
patch: else ; continue ; ;
rank: 422
score: 98.38246154785156
patch: return true ; else return false ;
rank: 422
score: 98.37212371826172
patch: continue * / * continue ; }
rank: 422
score: 98.18020629882812
patch: if ( continue ) ; continue ;
rank: 423
score: 99.21521417025862
patch: return ( parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Assigned CaMeL Value ( ) ) ) ;
rank: 423
score: 99.16264997209821
patch: if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Assigned CaMeL Value ( ) ) ) {
rank: 423
score: 99.08663236177884
patch: return . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Parent CaMeL Node ( ) ) ;
rank: 423
score: 99.05242047991071
patch: Node name = ref . get CaMeL First CaMeL Child ( ) ;
rank: 423
score: 98.42524065290179
patch: return get CaMeL Type ( ;
rank: 423
score: 98.38232421875
patch: * * continue / continue ;
rank: 423
score: 98.3717753092448
patch: continue ; super . ;
rank: 423
score: 98.31704275948661
patch: if ; * ; continue ;
rank: 423
score: 98.17989676339286
patch: if ( continue == 0 )
rank: 424
score: 99.21403556034483
patch: return parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , parent . get CaMeL First CaMeL Child ( ) ) ;
rank: 424
score: 99.16250315020162
patch: for ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL First CaMeL Child ( ) ) ) {
rank: 424
score: 98.42460414341518
patch: / * * continue ; }
rank: 424
score: 98.38214111328125
patch: continue * * if continue ;
rank: 424
score: 98.37109375
patch: continue * * continue * / ;
rank: 424
score: 98.31685638427734
patch: continue ; ; continue ; if ;
rank: 424
score: 98.17934744698661
patch: if ( continue , this )
rank: 425
score: 99.2138671875
patch: return parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) == parent ) ;
rank: 425
score: 99.162060546875
patch: if ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( gramps . get CaMeL Node ( ) ) ) {
rank: 425
score: 99.0865811434659
patch: exception . if ( parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) )
rank: 425
score: 99.0481708233173
patch: return Node CaMeL Util . is CaMeL Statement ( ref ) ;
rank: 425
score: 98.42442975725446
patch: if null true ; continue ;
rank: 425
score: 98.38174002511161
patch: return ! continue ; continue ;
rank: 425
score: 98.3698501586914
patch: while ( ; ) { continue ;
rank: 425
score: 98.31619262695312
patch: continue ; continue ; break ; /
rank: 425
score: 98.17769622802734
patch: try { continue ; } else {
rank: 426
score: 99.23722116570724
patch: return && ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 426
score: 99.21378300107759
patch: return ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Node ( ) ) ) ;
rank: 426
score: 99.16205078125
patch: if ( ref . get CaMeL Node ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) )
rank: 426
score: 99.08657691592262
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( key ) ;
rank: 426
score: 99.04786028180804
patch: if ( name . is CaMeL Getter CaMeL Def ( ) ) {
rank: 426
score: 98.4224853515625
patch: continue continue ; ; ;
rank: 426
score: 98.3809305826823
patch: } if continue continue ;
rank: 426
score: 98.36947195870536
patch: continue ; } else ; ;
rank: 426
score: 98.31594848632812
patch: continue ; continue ; else / /
rank: 427
score: 99.23713822798295
patch: return parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , gramps ) ;
rank: 427
score: 99.21263020833334
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 427
score: 99.16190279447116
patch: if ( parent . get CaMeL First CaMeL Child ( ) ==
rank: 427
score: 99.08656712582237
patch: return parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( id ) ;
rank: 427
score: 98.4215087890625
patch: element . continue ;
rank: 427
score: 98.38043212890625
patch: return null ; if continue ;
rank: 427
score: 98.36904907226562
patch: continue ; ; / * * ;
rank: 427
score: 98.31520080566406
patch: continue ; if continue ; * /
rank: 427
score: 98.17699432373047
patch: if ( continue ) { } }
rank: 428
score: 99.21170247395834
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Assigned CaMeL Value ( ) == ) ;
rank: 428
score: 99.16189236111111
patch: if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL First CaMeL Child ( ) ) )
rank: 428
score: 99.086337890625
patch: return gramps . get CaMeL Prop ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ;
rank: 428
score: 99.04678109975961
patch: if ( parent . is CaMeL Getter CaMeL Def ( ) )
rank: 428
score: 98.42064557756696
patch: value = continue ; continue ;
rank: 428
score: 98.3802261352539
patch: continue * * * / if ;
rank: 428
score: 98.36903076171875
patch: if ( ! ;
rank: 428
score: 98.31492106119792
patch: / / if continue ;
rank: 428
score: 98.17672729492188
patch: boolean success = false ; continue ;
rank: 429
score: 99.21038411458333
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 429
score: 99.16151165140086
patch: if ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Parent ( ) ) ) {
rank: 429
score: 99.08594360351563
patch: code . if ( is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) )
rank: 429
score: 99.04227701822917
patch: return ref . is CaMeL Setter CaMeL Def ( ) ;
rank: 429
score: 98.4204813639323
patch: if false || continue ;
rank: 429
score: 98.37935384114583
patch: } else { break ;
rank: 429
score: 98.36890520368304
patch: continue ; if ( ! ;
rank: 429
score: 98.3145523071289
patch: if continue ; continue ; ; return
rank: 429
score: 98.17638288225446
patch: continue get CaMeL Value ( ;
rank: 430
score: 99.16139439174107
patch: if ( gramps . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Parent ( ) ) ) {
rank: 430
score: 99.0859375
patch: return gramps . is CaMeL Get CaMeL Prop ( parent . get CaMeL First CaMeL Child ( ) ) ;
rank: 430
score: 99.04141438802084
patch: if ( ! parent . is CaMeL Getter CaMeL Def ( ) ) {
rank: 430
score: 98.37793840680804
patch: } else { if false ;
rank: 430
score: 98.36791229248047
patch: continue null ; } if ( ;
rank: 430
score: 98.3127212524414
patch: continue ; continue ; case continue ;
rank: 430
score: 98.17609514508929
patch: if ( continue ret ) {
rank: 431
score: 99.23561497738487
patch: ret = ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref ) ;
rank: 431
score: 99.1609637920673
patch: if ( gramps . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) { return false ; }
rank: 431
score: 99.0856701078869
patch: params . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) )
rank: 431
score: 99.04115647536058
patch: return parent . is CaMeL Getter CaMeL Def ( ref ) ;
rank: 431
score: 98.41875348772321
patch: continue { return false ; ;
rank: 431
score: 98.31256103515625
patch: continue ; break ; continue ;
rank: 431
score: 98.17576904296875
patch: synchronized ( continue )
rank: 432
score: 99.20802137586806
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent ) ) ;
rank: 432
score: 99.04048374720982
patch: if ( ref . is CaMeL Setter CaMeL Def ( ) ) {
rank: 432
score: 98.41817801339286
patch: continue { while continue ; }
rank: 432
score: 98.37654331752232
patch: * * * continue continue ;
rank: 432
score: 98.36766706194196
patch: * / ret = true ;
rank: 432
score: 98.3117446899414
patch: continue ; if ; { break ;
rank: 432
score: 98.17559814453125
patch: if ( continue ; return true )
rank: 433
score: 99.20757649739583
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) == ) ;
rank: 433
score: 99.16090675636575
patch: if ( parent . get CaMeL Name ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 433
score: 99.08543812144886
patch: if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , ref ) ) {
rank: 433
score: 98.41730608258929
patch: continue ; while continue ; ;
rank: 433
score: 98.37559000651042
patch: continue * continue ; }
rank: 433
score: 98.3670654296875
patch: continue / * * /
rank: 433
score: 98.3115234375
patch: continue ; continue ; while ; ;
rank: 433
score: 98.175537109375
patch: if ( continue , true )
rank: 434
score: 99.23518676757813
patch: return ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL
rank: 434
score: 99.20719401041667
patch: return Node CaMeL Util . is CaMeL Statement CaMeL Block ( refs ) ;
rank: 434
score: 99.16002400716145
patch: if ( gramps . is CaMeL Get CaMeL Prop ( parent . get CaMeL First CaMeL Child ( ) ) ) {
rank: 434
score: 99.08478338068181
patch: state . while ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 434
score: 99.0369873046875
patch: return super . is CaMeL Statement CaMeL Block ( name ) ;
rank: 434
score: 98.41415405273438
patch: } continue ; try {
rank: 434
score: 98.37513950892857
patch: } else { return true ;
rank: 434
score: 98.36651611328125
patch: ; ; ; * /
rank: 434
score: 98.31117248535156
patch: } ; continue ; if continue ;
rank: 434
score: 98.17510986328125
patch: continue value value = continue ;
rank: 435
score: 99.20691731770833
patch: return . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Node ( ) . get CaMeL Parent ( ) ) ;
rank: 435
score: 99.15964918870192
patch: if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref , name ) ) {
rank: 435
score: 99.08420817057292
patch: return ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref , name ) ;
rank: 435
score: 99.03672438401442
patch: return parent . is CaMeL Setter CaMeL Def ( ) ) ;
rank: 435
score: 98.41268920898438
patch: value . continue continue ;
rank: 435
score: 98.37478201729911
patch: { if continue ; continue ;
rank: 435
score: 98.36617606026786
patch: continue * / / / ;
rank: 435
score: 98.31114850725446
patch: continue ; while ; continue ;
rank: 435
score: 98.17445882161458
patch: if ( continue ) }
rank: 436
score: 99.23422677176339
patch: return ( parent . is CaMeL Get CaMeL Prop ( ) ) ;
rank: 436
score: 99.15951772836539
patch: return ref . get CaMeL Node ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ; }
rank: 436
score: 99.03544921875
patch: Node gramps = ref . get CaMeL Assigned CaMeL Value ( ) ;
rank: 436
score: 98.41220092773438
patch: value { continue ; ;
rank: 436
score: 98.37444196428571
patch: } else * / continue ;
rank: 436
score: 98.36587088448661
patch: / ; ; * / ;
rank: 436
score: 98.31058756510417
patch: else ; if continue ;
rank: 436
score: 98.17436000279018
patch: finally { if ( ; }
rank: 437
score: 99.23395647321429
patch: ret = parent . get CaMeL First CaMeL Child ( ) . get CaMeL Assigned CaMeL Value ( ) ;
rank: 437
score: 99.2056884765625
patch: return this . gramps . get CaMeL First CaMeL Child ( ) == name ;
rank: 437
score: 99.15935546875
patch: if ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , ref ) ) {
rank: 437
score: 99.08326551649306
patch: super . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( id ) ;
rank: 437
score: 98.37418823242187
patch: return ! continue ;
rank: 437
score: 98.36564127604167
patch: continue ; ; } ;
rank: 437
score: 98.31024169921875
patch: if ; / ; continue ;
rank: 437
score: 98.17416381835938
patch: continue ; for ( ; ; )
rank: 438
score: 99.20518391927084
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , gramps . get CaMeL First CaMeL Child ( ) == parent ) ;
rank: 438
score: 99.1588934536638
patch: return refs . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , ref . get CaMeL Assigned CaMeL Value ( ) ) ;
rank: 438
score: 99.0831298828125
patch: return Node CaMeL Util . is CaMeL Call ( gramps . get CaMeL First CaMeL Child ( ) ) ;
rank: 438
score: 99.03170072115384
patch: return ref . is CaMeL Getter CaMeL Def ( ) ) ;
rank: 438
score: 98.36479840959821
patch: continue ; ; } else ;
rank: 438
score: 98.30985804966518
patch: return / ; if continue ;
rank: 438
score: 98.174072265625
patch: if ; continue ; }
rank: 439
score: 99.2327880859375
patch: return ( parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 439
score: 99.2040951377467
patch: return is CaMeL Statement CaMeL Block ( parent . get CaMeL First CaMeL Child ( ) ) ;
rank: 439
score: 99.158642578125
patch: if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Node ( ) ) ) {
rank: 439
score: 99.08309273097827
patch: return Node CaMeL Util . is CaMeL Get CaMeL Prop ( parent . get CaMeL First CaMeL Child ( ) ) ;
rank: 439
score: 99.03106219951923
patch: ret = ref . get CaMeL Assigned CaMeL Value ( ) ;
rank: 439
score: 98.41060093470982
patch: ( new $STRING$ ; continue ;
rank: 439
score: 98.37160237630208
patch: return is CaMeL Empty ;
rank: 439
score: 98.36460876464844
patch: if ( ( ; ) && ;
rank: 439
score: 98.30855305989583
patch: if ; * / /
rank: 439
score: 98.1737772623698
patch: throw new Error ( ;
rank: 440
score: 99.23273064108456
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( pos ) ;
rank: 440
score: 99.1581522623698
patch: if ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( gramps ) ) {
rank: 440
score: 99.03056989397321
patch: if ( gramps . is CaMeL Getter CaMeL Def ( ) )
rank: 440
score: 98.41030447823661
patch: finally { for continue ; }
rank: 440
score: 98.37155587332589
patch: } else / * * /
rank: 440
score: 98.36431121826172
patch: / * ; ; / * /
rank: 440
score: 98.30815124511719
patch: continue ; if continue ; try /
rank: 441
score: 99.1578857421875
patch: if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Parent ( ) ) ) {
rank: 441
score: 99.08275204613095
patch: return gramps . get CaMeL First CaMeL Child ( ) . is CaMeL Getter CaMeL Def ( ) {
rank: 441
score: 99.03016008649554
patch: return parent . get CaMeL First CaMeL Child ( ) == null ;
rank: 441
score: 98.40936279296875
patch: * continue ; continue ;
rank: 441
score: 98.37037353515625
patch: } else return ;
rank: 441
score: 98.36386108398438
patch: continue false ; }
rank: 441
score: 98.3077621459961
patch: logger ; continue ; if continue ;
rank: 442
score: 98.40932791573661
patch: continue { continue ; ; }
rank: 442
score: 98.3703125
patch: { if continue ;
rank: 442
score: 98.36155700683594
patch: continue ; } ; ; * /
rank: 442
score: 98.1711654663086
patch: try { super . continue ; }
rank: 443
score: 99.15781430844908
patch: if ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) { return false ; }
rank: 443
score: 99.08202185997597
patch: return parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Node ( ) ) ) ;
rank: 443
score: 99.02728740985577
patch: result = ref . get CaMeL First CaMeL Child ( ) ;
rank: 443
score: 98.4080098470052
patch: return null ; ; ;
rank: 443
score: 98.36917550223214
patch: * * * > continue ;
rank: 443
score: 98.3072738647461
patch: if ; continue ; while continue ;
rank: 443
score: 98.17071533203125
patch: if ( ; if ( continue ;
rank: 444
score: 99.1568094889323
patch: if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( id ) ) {
rank: 444
score: 99.08200073242188
patch: return is CaMeL Get CaMeL Prop ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ;
rank: 444
score: 99.02560659555289
patch: return super . is CaMeL Getter CaMeL Def ( ref ) ;
rank: 444
score: 98.40787179129464
patch: / continue ; } continue ;
rank: 444
score: 98.36915079752605
patch: continue * return false ;
rank: 444
score: 98.30719757080078
patch: if continue ; break ; break ;
rank: 444
score: 98.16993931361607
patch: continue = this . continue ;
rank: 445
score: 99.229248046875
patch: return ref . get CaMeL First CaMeL Child ( ) == parent . get CaMeL Assigned CaMeL Value ( ) ;
rank: 445
score: 99.2003173828125
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( 0 ) ;
rank: 445
score: 99.15592687270221
patch: if ( Node CaMeL Util . is CaMeL Statement CaMeL Block ( name ) ) {
rank: 445
score: 99.08198547363281
patch: return gramps . get CaMeL First CaMeL Child ( ) == parent ) {
rank: 445
score: 99.02440534319196
patch: switch ( parent . get CaMeL First CaMeL Child ( ) ) {
rank: 445
score: 98.36766706194196
patch: / * * * continue /
rank: 445
score: 98.35847473144531
patch: continue * / ; } else {
rank: 445
score: 98.30484008789062
patch: continue ; continue ; continue ; {
rank: 445
score: 98.1689453125
patch: initial CaMeL Value = continue ;
rank: 446
score: 99.1556984230324
patch: if ( ! Node CaMeL Util . is CaMeL Statement CaMeL Block ( gramps . get CaMeL Assigned CaMeL Value ( ) ) ) {
rank: 446
score: 99.08197576349431
patch: return name . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Node CaMeL
rank: 446
score: 99.02212960379464
patch: if ( parent . is CaMeL Statement CaMeL Block ( ) ) {
rank: 446
score: 98.40718587239583
patch: item . continue ; }
rank: 446
score: 98.35740443638393
patch: / * continue * * ;
rank: 446
score: 98.30445861816406
patch: return ; if ; / / /
rank: 446
score: 98.16832733154297
patch: continue = ; if ( continue )
rank: 447
score: 99.15534078663794
patch: if ( this . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL First CaMeL Child ( ) ) ) {
rank: 447
score: 99.08196551983173
patch: return . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) . is CaMeL Setter CaMeL Def ( ) ;
rank: 447
score: 99.02064732142857
patch: Object ref = ref . get CaMeL Assigned CaMeL Value ( ) ;
rank: 447
score: 98.40611049107143
patch: else { try ; continue ;
rank: 447
score: 98.36741420200893
patch: case null ? return false ;
rank: 447
score: 98.3564682006836
patch: continue ; ; * / * /
rank: 447
score: 98.3043441772461
patch: continue ; if ; = / /
rank: 447
score: 98.16781616210938
patch: boolean has CaMeL Child = false ;
rank: 448
score: 99.08162747896634
patch: super . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Parent CaMeL Node ( ) ) ;
rank: 448
score: 99.01480538504464
patch: switch ( ref . get CaMeL First CaMeL Child ( ) ) {
rank: 448
score: 98.40593610491071
patch: try { for continue ; ;
rank: 448
score: 98.36580113002232
patch: continue * * continue continue ;
rank: 448
score: 98.35634940011161
patch: continue ; ; * / ;
rank: 448
score: 98.30340576171875
patch: return ; { continue ;
rank: 448
score: 98.16615804036458
patch: continue true = true ;
rank: 449
score: 99.1551171875
patch: for ( Reference ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 449
score: 99.0814697265625
patch: return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name == name ) ;
rank: 449
score: 99.01407296316964
patch: Node parent = ref . get CaMeL First CaMeL Child ( ) ;
rank: 449
score: 98.40384347098214
patch: value . ; continue ; }
rank: 449
score: 98.30172729492188
patch: continue ; if ; try
rank: 449
score: 98.16549246651786
patch: if ( continue ; continue )
rank: 450
score: 99.19333224826389
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ; ;
rank: 450
score: 99.15501051682692
patch: if ( ! Node CaMeL Util . is CaMeL Getter CaMeL Def ( parent . get CaMeL First CaMeL Child ( ) ) ) {
rank: 450
score: 99.081103515625
patch: continue . if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) )
rank: 450
score: 99.01371256510417
patch: return target . is CaMeL Getter CaMeL Def ( ) ;
rank: 450
score: 98.403564453125
patch: if new continue || continue ;
rank: 450
score: 98.35538736979167
patch: * / return true ;
rank: 450
score: 98.30017961774554
patch: return ; continue ; break ;
rank: 451
score: 99.15489459859914
patch: if ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Node ( ) ) ) {
rank: 451
score: 99.01368931361607
patch: return parent . get CaMeL First CaMeL Child ( ) != null ;
rank: 451
score: 98.36483328683036
patch: return ; continue ; } }
rank: 451
score: 98.35479736328125
patch: continue false ; } * /
rank: 451
score: 98.16407121930804
patch: continue Unsupported CaMeL Operation CaMeL Exception
rank: 452
score: 99.22728382457386
patch: ret = Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( property ) ;
rank: 452
score: 99.18597819010417
patch: return gramps . get CaMeL First CaMeL Child ( ) == ref ;
rank: 452
score: 99.15453125
patch: if ( gramps . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) { return false ;
rank: 452
score: 99.08000044389205
patch: return gramps . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , ref ) ;
rank: 452
score: 99.01078287760417
patch: return name . is CaMeL Getter CaMeL Def ( ) ;
rank: 452
score: 98.40305873325893
patch: else { new continue ; }
rank: 452
score: 98.3638916015625
patch: throw null ; continue ;
rank: 452
score: 98.3543701171875
patch: ; * continue ;
rank: 452
score: 98.16335623604911
patch: if ( ; return true ;
rank: 453
score: 99.22646197150735
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( pass ) ;
rank: 453
score: 99.1810073852539
patch: return ret ;
rank: 453
score: 99.1543477376302
patch: if ( ! ! gramps . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 453
score: 99.07990112304688
patch: exception . if ( is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) )
rank: 453
score: 99.00738994891827
patch: return null . is CaMeL Setter CaMeL Def ( name ) ;
rank: 453
score: 98.40223185221355
patch: return true ; ; ;
rank: 453
score: 98.36266217912946
patch: continue continue ; } else {
rank: 453
score: 98.35435267857143
patch: sb . append ( name ;
rank: 453
score: 98.29770333426339
patch: if continue = ; continue ;
rank: 453
score: 98.16330392020089
patch: if ( continue = ; }
rank: 454
score: 99.22600959329044
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ret ) ;
rank: 454
score: 99.15399639423077
patch: if ( ! Node CaMeL Util . is CaMeL Get CaMeL Prop ( ref . get CaMeL Assigned CaMeL Value ( ) ) ) {
rank: 454
score: 99.07982381184895
patch: return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) . is CaMeL Call ( ) ;
rank: 454
score: 99.00666155133929
patch: String name = ref . get CaMeL First CaMeL Child ( ) ;
rank: 454
score: 98.40205891927083
patch: continue continue continue ; }
rank: 454
score: 98.361572265625
patch: } else if continue false ;
rank: 454
score: 98.35417938232422
patch: ; * / / * continue ;
rank: 454
score: 98.29747663225446
patch: continue ; / / continue ;
rank: 454
score: 98.15992082868304
patch: finally { if ( continue )
rank: 455
score: 99.22532743566177
patch: ret = is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ;
rank: 455
score: 99.15382893880208
patch: return ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) ; }
rank: 455
score: 99.00435014204545
patch: return is CaMeL Statement CaMeL Block ( name ) ;
rank: 455
score: 98.40182059151786
patch: continue { continue ; * ;
rank: 455
score: 98.36121622721355
patch: this . return null ;
rank: 455
score: 98.35342407226562
patch: ; * continue * /
rank: 455
score: 98.29643903459821
patch: return ; * / continue ;
rank: 455
score: 98.158447265625
patch: if ( continue not ) {
rank: 456
score: 99.17601600060097
patch: return Node CaMeL Util . is CaMeL Statement ( parent ) ;
rank: 456
score: 99.15375
patch: if ( Node CaMeL Util . is CaMeL Getter CaMeL Def ( parent . get CaMeL First CaMeL Child ( ) ) ) {
rank: 456
score: 99.07930131392045
patch: code . while ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 456
score: 99.00420673076923
patch: return target . is CaMeL Setter CaMeL Def ( name ) ;
rank: 456
score: 98.40180206298828
patch: catch continue ;
rank: 456
score: 98.36106654575893
patch: return continue ; else return ;
rank: 456
score: 98.353271484375
patch: continue ; / / * ;
rank: 456
score: 98.29637799944196
patch: if continue ; continue = ;
rank: 456
score: 98.1583760579427
patch: continue false * / }
rank: 457
score: 99.17315266927083
patch: throw Node CaMeL Util . is CaMeL Statement CaMeL Block ( ref ) ;
rank: 457
score: 99.1533935546875
patch: if ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL First CaMeL Child ( ) ) )
rank: 457
score: 99.07906087239583
patch: super . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Node ( ) ) {
rank: 457
score: 99.00338309151786
patch: Node declarations = ref . get CaMeL Assigned CaMeL Value ( ) ;
rank: 457
score: 98.40122767857143
patch: else continue ; ; continue ;
rank: 457
score: 98.35931396484375
patch: return continue ; break ;
rank: 457
score: 98.29607282366071
patch: return * continue ; break ;
rank: 457
score: 98.15828450520833
patch: if ( ; continue )
rank: 458
score: 99.22071668836806
patch: return parent . get CaMeL Parent ( ) . is CaMeL Getter CaMeL Def ( ) ;
rank: 458
score: 99.15290436921296
patch: if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Assigned CaMeL Value ( ) ) )
rank: 458
score: 99.07892922794117
patch: return parent . get CaMeL Node ( ) . is CaMeL Getter CaMeL Def ( )
rank: 458
score: 98.40039934430804
patch: / * * continue ; /
rank: 458
score: 98.35319519042969
patch: continue ; / * * ; /
rank: 458
score: 98.15823800223214
patch: continue get CaMeL Prop ( ;
rank: 459
score: 99.15240009014423
patch: if ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) { return false ;
rank: 459
score: 99.07884724934895
patch: return Node CaMeL Util . is CaMeL Setter CaMeL Def ( gramps . get CaMeL First CaMeL Child ( ) ) ;
rank: 459
score: 98.99691336495536
patch: Object ref = ref . get CaMeL First CaMeL Child ( ) ;
rank: 459
score: 98.4002685546875
patch: catch ( $STRING$ || continue ;
rank: 459
score: 98.35844203404018
patch: continue * / return continue ;
rank: 459
score: 98.35276576450893
patch: continue * / ret = ;
rank: 459
score: 98.29354422433036
patch: throw if continue ; continue ;
rank: 459
score: 98.15755208333333
patch: continue parent = continue ;
rank: 460
score: 99.16813441685268
patch: return name . is CaMeL Inlinable CaMeL Object ( ) ;
rank: 460
score: 99.1521708170573
patch: if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( node ) ) {
rank: 460
score: 99.07839965820312
patch: return . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Parent ( ) ) ;
rank: 460
score: 98.98998006184895
patch: throw ref . get CaMeL First CaMeL Child ( ) ;
rank: 460
score: 98.39964803059895
patch: logger . out . ;
rank: 460
score: 98.35671997070312
patch: } } continue ;
rank: 460
score: 98.35226876395089
patch: / * continue * / /
rank: 460
score: 98.1558609008789
patch: try { if ; continue ; }
rank: 461
score: 99.22002096737133
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( VAR ) ;
rank: 461
score: 99.15194881663604
patch: super . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ;
rank: 461
score: 99.07833426339286
patch: se . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) )
rank: 461
score: 98.9879150390625
patch: return ref . is CaMeL Statement CaMeL Block ( ) ;
rank: 461
score: 98.39910888671875
patch: / * * return continue ;
rank: 461
score: 98.35524204799107
patch: * * continue * continue ;
rank: 461
score: 98.35186767578125
patch: continue ; } * / / ;
rank: 461
score: 98.29343668619792
patch: continue ; ; break ;
rank: 461
score: 98.15496826171875
patch: if ( continue = continue ; }
rank: 462
score: 99.2195183249081
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( start ) ;
rank: 462
score: 99.16167805989583
patch: return Node CaMeL Util . is CaMeL Get CaMeL Prop ( ref ) ;
rank: 462
score: 99.15161974676724
patch: if ( ref . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL First CaMeL Child ( ) ) ) {
rank: 462
score: 98.98482572115384
patch: return ! parent . is CaMeL Setter CaMeL Def ( ) ;
rank: 462
score: 98.39894321986607
patch: } continue ; continue ; *
rank: 462
score: 98.35509381975446
patch: continue return continue ; continue ;
rank: 462
score: 98.35177176339286
patch: continue ; . * / ;
rank: 462
score: 98.15299769810268
patch: continue remove CaMeL Prop ( ;
rank: 463
score: 99.21944173177083
patch: return node . is CaMeL Getter CaMeL Def ( ) ;
rank: 463
score: 99.15103352864584
patch: if ( gramps . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Assigned CaMeL Value ( ) ) ) {
rank: 463
score: 99.078037109375
patch: return ref . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . to CaMeL String ( ) ) ;
rank: 463
score: 98.98136080228366
patch: if ( ref . is CaMeL Getter CaMeL Def ( ) )
rank: 463
score: 98.39890834263393
patch: continue ; continue ; * ;
rank: 463
score: 98.35463460286458
patch: } ; if continue ;
rank: 463
score: 98.35147530691964
patch: continue * / * * ;
rank: 463
score: 98.29046630859375
patch: continue ; ; ; break ;
rank: 463
score: 98.15266927083333
patch: continue false . continue ;
rank: 464
score: 99.15078735351562
patch: if ( Node CaMeL Util . is CaMeL Statement CaMeL Block ( parent . get CaMeL First CaMeL Child ( ) ) )
rank: 464
score: 99.07769097222223
patch: return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( group ) ;
rank: 464
score: 98.97966918945312
patch: ret = false ;
rank: 464
score: 98.35399373372395
patch: } else throw continue ;
rank: 464
score: 98.34962463378906
patch: continue ; } finally { ; ;
rank: 464
score: 98.152001953125
patch: continue && continue ;
rank: 465
score: 99.21786980879934
patch: ret = is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( gramps ) ;
rank: 465
score: 99.15027727399554
patch: if ( ! parent . get CaMeL First CaMeL Child ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) )
rank: 465
score: 98.97532301682692
patch: return ! ref . is CaMeL Getter CaMeL Def ( ) ;
rank: 465
score: 98.39767020089286
patch: else { return continue ; ;
rank: 465
score: 98.35367838541667
patch: * * continue * /
rank: 465
score: 98.34952218191964
patch: continue * / ; ; }
rank: 465
score: 98.27923583984375
patch: continue ; ; / /
rank: 465
score: 98.15194702148438
patch: continue . return false ;
rank: 466
score: 99.2174072265625
patch: try { return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ;
rank: 466
score: 99.15003380408653
patch: if ( parent . get CaMeL First CaMeL Child ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( )
rank: 466
score: 99.14903913225446
patch: return Node CaMeL Util . is CaMeL Statement CaMeL Block ( ) ;
rank: 466
score: 99.07756604646382
patch: return ( is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref ) ) ;
rank: 466
score: 98.97372436523438
patch: Node ref = ref . get CaMeL Parent ( ) ;
rank: 466
score: 98.39733014787946
patch: finally { continue ; / /
rank: 466
score: 98.35323660714286
patch: return false ; } } else
rank: 466
score: 98.15024239676339
patch: if ( parent != null )
rank: 467
score: 99.21681722005208
patch: if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ==
rank: 467
score: 99.14983499461206
patch: if ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Parent ( ) ) ) {
rank: 467
score: 99.14835611979167
patch: return super . is CaMeL Inlinable CaMeL Object ( ref ) ;
rank: 467
score: 99.07734375
patch: return name . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Parent ( ) ) ;
rank: 467
score: 98.97048117897727
patch: return is CaMeL Statement CaMeL Block ( ref ) ;
rank: 467
score: 98.39724295479911
patch: while ( false ; continue ;
rank: 467
score: 98.35312325613839
patch: return continue ; continue ; else
rank: 467
score: 98.34895833333333
patch: continue ; / ; }
rank: 467
score: 98.26962280273438
patch: continue ; continue ; check
rank: 467
score: 98.14964948381696
patch: if ( ; continue ; ;
rank: 468
score: 99.21647135416667
patch: return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( key ) ;
rank: 468
score: 99.149462890625
patch: if ( ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) ) {
rank: 468
score: 99.07692057291666
patch: new CaMeL Node = ref . get CaMeL First CaMeL Child ( ) ;
rank: 468
score: 98.9696553548177
patch: super . is CaMeL Statement CaMeL Block ( ref ) ;
rank: 468
score: 98.39696393694196
patch: } else { continue continue ;
rank: 468
score: 98.35264369419643
patch: } else if ( true ;
rank: 468
score: 98.34877232142857
patch: if ; ret = false ;
rank: 468
score: 98.26289876302083
patch: continue ; if ; continue
rank: 468
score: 98.149560546875
patch: continue false continue ;
rank: 469
score: 99.14915364583334
patch: if ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Assigned CaMeL Value ( ) ) )
rank: 469
score: 99.1474609375
patch: return is CaMeL Getter CaMeL Def ( parent ) ;
rank: 469
score: 99.07685198102679
patch: continue = gramps . get CaMeL First CaMeL Child ( ) ;
rank: 469
score: 98.3486328125
patch: continue ; } ; ; ;
rank: 469
score: 98.26114908854167
patch: if continue ; / /
rank: 469
score: 98.14800153459821
patch: if ; value = continue ;
rank: 470
score: 99.14833984375
patch: if ( ! Node CaMeL Util . is CaMeL Statement CaMeL Block ( parent . get CaMeL Assigned CaMeL Value ( ) ) )
rank: 470
score: 99.07644786005434
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ; break ;
rank: 470
score: 98.96119181315105
patch: return null . is CaMeL Getter CaMeL Def ( ) ;
rank: 470
score: 98.39665876116071
patch: continue { continue continue ; ;
rank: 470
score: 98.35123988560268
patch: return false ; } else }
rank: 470
score: 98.34817940848214
patch: * / / * continue ;
rank: 470
score: 98.25388590494792
patch: continue ; break ; }
rank: 471
score: 99.2154900045956
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( prefix ) ;
rank: 471
score: 99.14820274939903
patch: while ( ! Node CaMeL Util . is CaMeL Statement CaMeL Block ( ref . get CaMeL First CaMeL Child ( ) ) ) {
rank: 471
score: 99.14378356933594
patch: return Node CaMeL Util . is CaMeL Statement CaMeL Block ( ref ) ) ;
rank: 471
score: 99.07601928710938
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ; return false ;
rank: 471
score: 98.96082652698864
patch: return is CaMeL Statement CaMeL Block ( parent ) ;
rank: 471
score: 98.39638061523438
patch: } * continue ;
rank: 471
score: 98.35100446428571
patch: { return false ; continue ;
rank: 471
score: 98.34815325055804
patch: continue ; default ? * /
rank: 471
score: 98.24283599853516
patch: continue ; else
rank: 471
score: 98.1475118001302
patch: report CaMeL Error ( ;
rank: 472
score: 99.21515969669117
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( string ) ;
rank: 472
score: 99.14775558997844
patch: if ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL First CaMeL Child ( ) ==
rank: 472
score: 99.07557896205357
patch: return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ; return false ;
rank: 472
score: 98.96045939127605
patch: return target . is CaMeL Setter CaMeL Def ( ) ;
rank: 472
score: 98.39515032087054
patch: continue ; for continue ; }
rank: 472
score: 98.35045369466145
patch: } if ( ret ;
rank: 472
score: 98.34760393415179
patch: continue ; * / if ;
rank: 472
score: 98.2401611328125
patch: if continue ; ;
rank: 472
score: 98.14641462053571
patch: if ( value == null ;
rank: 473
score: 99.14757037984914
patch: if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Node ( ) ) )
rank: 473
score: 99.075439453125
patch: return ref . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , name ) ;
rank: 473
score: 98.39455159505208
patch: if null false continue ;
rank: 473
score: 98.35001046316964
patch: } if ; } continue ;
rank: 473
score: 98.23773193359375
patch: continue ; else continue ;
rank: 473
score: 98.1455586751302
patch: synchronized ( ; ) {
rank: 474
score: 99.14740397135417
patch: if ( parent . get CaMeL First CaMeL Child ( ) == parent )
rank: 474
score: 99.13875906808036
patch: return parent . get CaMeL First CaMeL Child ( ) == name ;
rank: 474
score: 98.95094807942708
patch: return VAR . is CaMeL Getter CaMeL Def ( ) ;
rank: 474
score: 98.394287109375
patch: if new $STRING$ { continue ;
rank: 474
score: 98.34683990478516
patch: continue * / ret = true ;
rank: 474
score: 98.2340799967448
patch: if ; ? continue ;
rank: 474
score: 98.14364188058036
patch: LOG . error ( $STRING$ ;
rank: 475
score: 99.20988464355469
patch: ret = Node CaMeL Util . is CaMeL Statement CaMeL Block ( ref ) ;
rank: 475
score: 98.94996134440105
patch: return ref . get CaMeL Parent ( ) != null ;
rank: 475
score: 98.39342389787946
patch: } else { continue ; /
rank: 475
score: 98.3467788696289
patch: continue * / throw new ; }
rank: 475
score: 98.22979736328125
patch: continue ; throw continue ;
rank: 475
score: 98.14240373883929
patch: synchronized ( continue ) { }
rank: 476
score: 99.14732623922414
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , ref . get CaMeL Node ( ) ) ;
rank: 476
score: 99.12808430989584
patch: return ! Node CaMeL Util . is CaMeL Statement CaMeL Block ( ) ;
rank: 476
score: 99.07505580357143
patch: continue . while ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) )
rank: 476
score: 98.94575639204545
patch: return is CaMeL Getter CaMeL Def ( ref ) ;
rank: 476
score: 98.39241245814732
patch: try { try ; continue ;
rank: 476
score: 98.34774344308036
patch: continue * * * return ;
rank: 476
score: 98.34652709960938
patch: continue ; ; } else continue ;
rank: 476
score: 98.22963460286458
patch: if continue ; continue /
rank: 477
score: 99.2085430438702
patch: return ! parent . is CaMeL Statement CaMeL Block ( ) ;
rank: 477
score: 99.1470947265625
patch: while ( ! Node CaMeL Util . is CaMeL Statement CaMeL Block ( ref . get CaMeL Assigned CaMeL Value ( ) ) ) {
rank: 477
score: 99.07498604910714
patch: proc . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) )
rank: 477
score: 98.94296264648438
patch: super . is CaMeL Getter CaMeL Def ( ref ) ;
rank: 477
score: 98.39008440290179
patch: else { continue ; * /
rank: 477
score: 98.34762137276786
patch: continue * * / break ;
rank: 477
score: 98.34529876708984
patch: ; ; / * continue * /
rank: 477
score: 98.223876953125
patch: if continue + continue ;
rank: 478
score: 99.14708600725446
patch: if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( gramps . get CaMeL First CaMeL Child ( ) ) )
rank: 478
score: 99.07492963005515
patch: return gramps . get CaMeL Prop ( ) . is CaMeL Call ( ) ;
rank: 478
score: 98.93963623046875
patch: return is CaMeL Statement CaMeL Block ( ) ;
rank: 478
score: 98.38996233258929
patch: return null ; ; continue ;
rank: 478
score: 98.34755161830357
patch: return continue ; } else ;
rank: 478
score: 98.3449935913086
patch: ; * /
rank: 478
score: 98.22278849283855
patch: continue ; if break ;
rank: 478
score: 98.1388651529948
patch: if ( continue not )
rank: 479
score: 99.14680085358796
patch: if ( gramps . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Node ( ) ) )
rank: 479
score: 99.07483491443452
patch: buf . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) )
rank: 479
score: 98.93914794921875
patch: Node name = ref . get CaMeL Parent ( ) ;
rank: 479
score: 98.34688023158482
patch: continue * if continue ; }
rank: 479
score: 98.34480285644531
patch: continue ; ; } return true ;
rank: 479
score: 98.2198486328125
patch: for continue ;
rank: 479
score: 98.13870675223214
patch: if ( continue ) return ;
rank: 480
score: 99.1467578125
patch: if ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) return false ;
rank: 480
score: 99.07464044744319
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL
rank: 480
score: 98.93701171875
patch: return gramps . is CaMeL Call ( name ) ;
rank: 480
score: 98.38863699776786
patch: continue { return true ; }
rank: 480
score: 98.34667096819196
patch: if ; return continue ; }
rank: 480
score: 98.34478759765625
patch: continue ; ; } ; finally {
rank: 480
score: 98.21744791666667
patch: continue ; } if ;
rank: 480
score: 98.13848876953125
patch: if ( continue false ) {
rank: 481
score: 99.2005106608073
patch: return name . is CaMeL Get CaMeL Prop ( ) ;
rank: 481
score: 99.14671912560097
patch: if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , refs ) ) {
rank: 481
score: 99.107421875
patch: return ! gramps . is CaMeL Call ( ) ;
rank: 481
score: 98.9359639485677
patch: throw ref . get CaMeL Parent CaMeL Node ( ) ;
rank: 481
score: 98.38863118489583
patch: if continue ; continue {
rank: 481
score: 98.34647914341518
patch: return null ; } finally {
rank: 481
score: 98.3447265625
patch: * ; * /
rank: 481
score: 98.13590785435268
patch: Set < Object > continue ;
rank: 482
score: 99.19927978515625
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ==
rank: 482
score: 99.14656284877232
patch: if ( is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( gramps . get CaMeL Assigned CaMeL Value ( ) ) ) {
rank: 482
score: 99.07436301491477
patch: return Node CaMeL Util . is CaMeL Statement CaMeL Block ( gramps . get CaMeL Parent ( ) ) ;
rank: 482
score: 98.93328857421875
patch: return value . is CaMeL Getter CaMeL Def ( ) ;
rank: 482
score: 98.38859049479167
patch: } * continue continue ;
rank: 482
score: 98.34624372209821
patch: return continue ; } if ;
rank: 482
score: 98.34415108816964
patch: continue * / continue ; ;
rank: 482
score: 98.2159423828125
patch: continue ; continue ; do
rank: 482
score: 98.13544573102679
patch: if ( continue && ; }
rank: 483
score: 99.197265625
patch: return this . parent . is CaMeL Getter CaMeL Def ( ) ) ;
rank: 483
score: 99.146220703125
patch: if ( parent . get CaMeL First CaMeL Child ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs (
rank: 483
score: 99.07381497896634
patch: return gramps . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Parent ( ) ) ;
rank: 483
score: 98.93024236505681
patch: return is CaMeL Getter CaMeL Def ( name ) ;
rank: 483
score: 98.38855852399554
patch: continue ; super . continue ;
rank: 483
score: 98.34600830078125
patch: return is CaMeL Empty ( ;
rank: 483
score: 98.34348842075893
patch: * / / * * /
rank: 483
score: 98.21382649739583
patch: if ; continue ; else
rank: 483
score: 98.13522774832589
patch: if ( error == null )
rank: 484
score: 99.1952392578125
patch: return ! parent . is CaMeL Inlinable CaMeL Object ( ) ;
rank: 484
score: 99.10476888020834
patch: return gramps . get CaMeL First CaMeL Child ( ) == false ;
rank: 484
score: 98.92794799804688
patch: return ref . get CaMeL Node ( ) != null ;
rank: 484
score: 98.38782755533855
patch: / * / continue ;
rank: 484
score: 98.34479631696429
patch: } finally { if continue ;
rank: 484
score: 98.34341430664062
patch: continue ; } } finally { ;
rank: 484
score: 98.21169026692708
patch: return / * continue ;
rank: 484
score: 98.13067626953125
patch: final Object value = continue ;
rank: 485
score: 99.14569682459677
patch: if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( gramps . get CaMeL First CaMeL Child ( ) ==
rank: 485
score: 99.10360013521634
patch: return Node CaMeL Util . is CaMeL Call ( ref ) ;
rank: 485
score: 98.92777506510417
patch: return super . is CaMeL Statement CaMeL Block ( ) ;
rank: 485
score: 98.34466552734375
patch: } else * /
rank: 485
score: 98.34327043805804
patch: * ; * continue * /
rank: 485
score: 98.12955147879464
patch: continue value = continue ; ;
rank: 486
score: 99.07268608940973
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs (
rank: 486
score: 98.92544555664062
patch: return null . is CaMeL Get CaMeL Prop ( ) ;
rank: 486
score: 98.38676234654018
patch: return this . continue ; ;
rank: 486
score: 98.34327043805804
patch: continue ; / * ; /
rank: 486
score: 98.20918782552083
patch: continue ; continue ; boolean
rank: 487
score: 99.186572265625
patch: ret = parent . is CaMeL Inlinable CaMeL Object ( ) ;
rank: 487
score: 99.07266090029762
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref ) {
rank: 487
score: 98.92529296875
patch: return ref . get CaMeL First CaMeL Child ( ) ;
rank: 487
score: 98.38666643415179
patch: continue ; ; / * /
rank: 487
score: 98.3431905110677
patch: continue ; } / ;
rank: 487
score: 98.12752859933036
patch: try { return true ; }
rank: 488
score: 99.145263671875
patch: if ( is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) ) ) {
rank: 488
score: 99.07151197350544
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , false ) ;
rank: 488
score: 98.38628278459821
patch: finally { continue ; continue ;
rank: 488
score: 98.342529296875
patch: continue ; ; } / * ;
rank: 488
score: 98.20166015625
patch: if ; continue ; /
rank: 488
score: 98.12559291294643
patch: if ; return true ; }
rank: 489
score: 99.14515422952586
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , ref . get CaMeL Parent ( ) ) ;
rank: 489
score: 99.0965087890625
patch: return gramps . get CaMeL First CaMeL Child ( ) != false ;
rank: 489
score: 99.07105712890625
patch: return ref . is CaMeL Call ( ) ;
rank: 489
score: 98.904541015625
patch: Node parent = ref . get CaMeL Parent ( ) ;
rank: 489
score: 98.38520159040179
patch: continue ; return false ; ;
rank: 489
score: 98.34154510498047
patch: return false ; } if ( ;
rank: 489
score: 98.19529215494792
patch: throw new { continue ;
rank: 490
score: 99.14417317708333
patch: if ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( gramps . get CaMeL Parent ( ) ) ) {
rank: 490
score: 99.07001201923077
patch: return gramps . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Node ( ) ) ;
rank: 490
score: 98.38466971261161
patch: continue { continue ; } *
rank: 490
score: 98.34127807617188
patch: continue ; * / /
rank: 490
score: 98.1931660970052
patch: if ; * continue ;
rank: 490
score: 98.12222290039062
patch: boolean ret = continue ;
rank: 491
score: 99.14283970424107
patch: if ( ! ref . get CaMeL Node ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) {
rank: 491
score: 99.07000732421875
patch: super . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Parent ( ) ) ;
rank: 491
score: 98.89912245008681
patch: return is CaMeL Var ( name ) ;
rank: 491
score: 98.3845926920573
patch: if null && continue ;
rank: 491
score: 98.12096296037946
patch: if ( ; continue ret )
rank: 492
score: 98.89518432617187
patch: ret = true ;
rank: 492
score: 98.38406372070312
patch: out . continue ; ;
rank: 492
score: 98.3409194946289
patch: continue ; } else { if ;
rank: 492
score: 98.33982631138393
patch: * * / return false ;
rank: 492
score: 98.1873270670573
patch: return / / continue ;
rank: 492
score: 98.11917550223214
patch: logger . log ( ; }
rank: 493
score: 99.14242989676339
patch: if ( ! parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Node ( ) ) ) {
rank: 493
score: 99.06980202414773
patch: return gramps . get CaMeL First CaMeL Child ( ) . is CaMeL Get CaMeL Prop ( ) ) ;
rank: 493
score: 98.89280007102273
patch: return ! is CaMeL Statement CaMeL Block ( ) ;
rank: 493
score: 98.38363647460938
patch: continue ; new continue ;
rank: 493
score: 98.34068298339844
patch: continue ; } finally { if ;
rank: 493
score: 98.33939906529018
patch: } else return continue ; }
rank: 493
score: 98.18618774414062
patch: if continue ; System ;
rank: 493
score: 98.11893136160714
patch: continue 1 . $NUMBER$ * /
rank: 494
score: 99.17972564697266
patch: ret = Node CaMeL Util . is CaMeL Statement CaMeL Block ( name ) ;
rank: 494
score: 99.14242350260416
patch: if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) ==
rank: 494
score: 98.88890991210937
patch: throw ref . get CaMeL Parent ( ) ;
rank: 494
score: 98.38307698567708
patch: / else { continue ;
rank: 494
score: 98.34055873325893
patch: continue ; * / * ;
rank: 494
score: 98.18258666992188
patch: continue ; else if ;
rank: 494
score: 98.11857386997768
patch: continue false * / if ;
rank: 495
score: 99.17937360491071
patch: return this . parent . is CaMeL Get CaMeL Prop ( ) ;
rank: 495
score: 98.8874844637784
patch: e = ref . get CaMeL Parent ( ) ;
rank: 495
score: 98.38303048270089
patch: } finally { continue ; ;
rank: 495
score: 98.3404769897461
patch: continue * / * * / ;
rank: 495
score: 98.33890206473214
patch: * * * * ; }
rank: 495
score: 98.1182861328125
patch: continue value = false ;
rank: 496
score: 99.17760291466347
patch: ret = parent . get CaMeL First CaMeL Child ( ) ;
rank: 496
score: 99.14176993534483
patch: if ( gramps . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) ) )
rank: 496
score: 99.06948617788461
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs (
rank: 496
score: 98.8870137532552
patch: if ( parent . is CaMeL Getter CaMeL Def ( )
rank: 496
score: 98.3828125
patch: return new $STRING$ ; ;
rank: 496
score: 98.34000941685268
patch: * / / / * /
rank: 496
score: 98.33838762555804
patch: * continue * * * /
rank: 496
score: 98.11818440755208
patch: continue value CaMeL Of ;
rank: 497
score: 99.14168294270833
patch: if ( ! parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) ) ) {
rank: 497
score: 99.06947678786058
patch: return gramps . get CaMeL Prop ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) {
rank: 497
score: 98.8829345703125
patch: Node ref = ref . get CaMeL Node ( ) ;
rank: 497
score: 98.33833530970982
patch: continue / * * continue /
rank: 497
score: 98.1181640625
patch: if ( continue ) { ;
rank: 498
score: 99.1416251890121
patch: if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( . get CaMeL Assigned CaMeL Value ( ) ) ) {
rank: 498
score: 98.87730823863636
patch: return gramps . is CaMeL Statement ( ) ;
rank: 498
score: 98.33897181919643
patch: if ; ret = true ;
rank: 499
score: 99.14076232910156
patch: if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs (
rank: 499
score: 99.07594604492188
patch: return is CaMeL Get CaMeL Prop ( ) ;
rank: 499
score: 98.86740112304688
patch: return ref . is CaMeL Var ( ) ;
rank: 499
score: 98.3788350423177
patch: catch ( $STRING$ ; ;
rank: 499
score: 98.33822631835938
patch: continue ; } ; return true ;
rank: 499
score: 98.33781215122768
patch: continue ; if ( continue ;
rank: 499
score: 98.1729227701823
patch: continue ; continue ; --
rank: 500
score: 99.14066569010417
patch: if ( ! this . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL First CaMeL Child ( ) ) ) {
rank: 500
score: 99.068916015625
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( n . get CaMeL First CaMeL Child ( ) ) ;
rank: 500
score: 98.37869262695312
patch: if this . continue ;
rank: 500
score: 98.33790806361607
patch: continue ; / * continue *
rank: 500
score: 98.16321818033855
patch: continue ; { continue ;
rank: 500
score: 98.11612955729167
patch: continue false = continue ;
rank: 501
score: 99.13990045362904
patch: if ( ! Node CaMeL Util . is CaMeL Statement CaMeL Block ( is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) ) {
rank: 501
score: 99.06832753057066
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( child CaMeL Value ) ;
rank: 501
score: 98.37819126674107
patch: continue { try { continue ;
rank: 501
score: 98.33729771205357
patch: continue ; } } return ;
rank: 501
score: 98.33694893973214
patch: * * * / } /
rank: 501
score: 98.11604527064732
patch: synchronized ( this ) { }
rank: 502
score: 99.16703578404018
patch: return this . parent . is CaMeL Statement CaMeL Block ( ) ;
rank: 502
score: 99.13856949344758
patch: if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( Node CaMeL Util . get CaMeL First CaMeL Child ( ref ) ) ) {
rank: 502
score: 99.06907301682692
patch: return Node CaMeL Util . is CaMeL Call ( parent ) ;
rank: 502
score: 99.06792534722223
patch: return ref . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name .
rank: 502
score: 98.84944291548295
patch: return . is CaMeL Getter CaMeL Def ( ) ;
rank: 502
score: 98.33721923828125
patch: continue ; * * /
rank: 502
score: 98.33592878069196
patch: continue * continue * continue ;
rank: 502
score: 98.1156005859375
patch: if ( continue != 0 )
rank: 503
score: 99.13844401041666
patch: if ( parent . get CaMeL First CaMeL Child ( ) != parent )
rank: 503
score: 98.841943359375
patch: return parent . is CaMeL Statement ( ) ;
rank: 503
score: 98.37667846679688
patch: default { continue ; }
rank: 503
score: 98.33699798583984
patch: continue ; * / ; * /
rank: 503
score: 98.33225795200893
patch: break ; } if continue ;
rank: 503
score: 98.1602071126302
patch: continue ; continue ; out
rank: 503
score: 98.10982259114583
patch: if ( continue false )
rank: 504
score: 99.13748931884766
patch: if ( ref . get CaMeL First CaMeL Child ( ) != parent ) {
rank: 504
score: 99.06748453776042
patch: return ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref == name ) ;
rank: 504
score: 98.83920627170139
patch: return is CaMeL Statement ( name ) ;
rank: 504
score: 98.37598876953125
patch: if false continue ;
rank: 504
score: 98.33683558872768
patch: continue ; default * / /
rank: 504
score: 98.33199637276786
patch: continue * return false ; }
rank: 504
score: 98.15960693359375
patch: continue ; if ; /
rank: 504
score: 98.10932159423828
patch: throw new ;
rank: 505
score: 99.15908377511161
patch: return this . parent . is CaMeL Setter CaMeL Def ( ) ;
rank: 505
score: 99.13723228717673
patch: if ( parent . get CaMeL First CaMeL Child ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ) { {
rank: 505
score: 98.83433948863636
patch: return super . is CaMeL Statement ( name ) ;
rank: 505
score: 98.37460763113839
patch: value . continue ; ; ;
rank: 505
score: 98.33662632533482
patch: continue false ; } else {
rank: 505
score: 98.33112444196429
patch: { return ; } continue ;
rank: 505
score: 98.15956624348958
patch: continue ; ; System ;
rank: 505
score: 98.10927908761161
patch: final boolean ret = false ;
rank: 506
score: 99.13701171875
patch: super . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , ref . get CaMeL First CaMeL Child ( ) == parent ) ;
rank: 506
score: 99.0668233235677
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( Node CaMeL Util . child CaMeL
rank: 506
score: 98.83307439630681
patch: return parent . is CaMeL Var ( name ) ;
rank: 506
score: 98.3720703125
patch: catch false || continue ;
rank: 506
score: 98.33642578125
patch: continue ; / * / /
rank: 506
score: 98.33080182756696
patch: { if ; continue ; }
rank: 506
score: 98.15871175130208
patch: continue ; continue ; ret
rank: 506
score: 98.10841878255208
patch: continue && ! continue ;
rank: 507
score: 99.13622283935547
patch: if ( ! gramps . is CaMeL Get CaMeL Prop ( ) ) {
rank: 507
score: 99.06636186079545
patch: return $STRING$ . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Node CaMeL
rank: 507
score: 99.05745152064732
patch: return parent . get CaMeL First CaMeL Child ( ) != name ;
rank: 507
score: 98.8330078125
patch: return is CaMeL Var ( ref ) ;
rank: 507
score: 98.37200927734375
patch: / * continue { continue {
rank: 507
score: 98.33628845214844
patch: for ( ; ; ; ; )
rank: 507
score: 98.330419921875
patch: } else { }
rank: 507
score: 98.15736389160156
patch: if ; {
rank: 508
score: 99.13570963541666
patch: if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Value ( ) ) ) {
rank: 508
score: 99.065986328125
patch: return ref . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Prop ( ) ) ;
rank: 508
score: 98.82700805664062
patch: return ref . is CaMeL Statement ( ) ;
rank: 508
score: 98.37180582682292
patch: System . ; continue ;
rank: 508
score: 98.33625139508929
patch: * / ; / * /
rank: 508
score: 98.15501912434895
patch: System ; continue ; }
rank: 508
score: 98.10600934709821
patch: if ( error != null )
rank: 509
score: 99.13520159040179
patch: ref . if ( ! Node CaMeL Util . is CaMeL Statement CaMeL Block ( ref . get CaMeL Assigned CaMeL Value ( ) ) ) {
rank: 509
score: 99.06584028764205
patch: continue . if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref ) ) {
rank: 509
score: 99.0543721516927
patch: return is CaMeL Inlinable CaMeL Object ( ) ;
rank: 509
score: 98.37159075055804
patch: } * continue { continue ;
rank: 509
score: 98.33533586774554
patch: continue ; else continue ; }
rank: 509
score: 98.32750244140625
patch: continue return continue ;
rank: 509
score: 98.15099487304687
patch: if continue ; }
rank: 510
score: 99.13463092672414
patch: if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Parent ( ) ) )
rank: 510
score: 99.065673828125
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name + ) ;
rank: 510
score: 99.05274376502403
patch: return Node CaMeL Util . is CaMeL Statement ( name ) ;
rank: 510
score: 98.82428588867188
patch: return parent . is CaMeL Var ( ) ;
rank: 510
score: 98.37120564778645
patch: / * if continue ;
rank: 510
score: 98.3349100748698
patch: continue * / * ;
rank: 510
score: 98.14808146158855
patch: start ; if continue ;
rank: 510
score: 98.10507202148438
patch: continue true = false ;
rank: 511
score: 99.13433837890625
patch: if ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Node ( ) ) )
rank: 511
score: 99.06547995174633
patch: return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name .
rank: 511
score: 99.04879995492789
patch: return gramps . get CaMeL First CaMeL Child ( ) ;
rank: 511
score: 98.82286376953125
patch: return ref . is CaMeL Empty ( ) ;
rank: 511
score: 98.37111409505208
patch: } * / continue ;
rank: 511
score: 98.14098103841145
patch: if ; + continue ;
rank: 511
score: 98.10487583705357
patch: throw new Runtime CaMeL Exception (
rank: 512
score: 99.06473482572116
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( Node CaMeL Util . get CaMeL Reference CaMeL
rank: 512
score: 98.37099783761161
patch: finally { if continue ; ;
rank: 512
score: 98.33426339285714
patch: ; * / return true ;
rank: 512
score: 98.32443673270089
patch: * * continue * / }
rank: 512
score: 98.10402134486607
patch: if ( continue = null ;
rank: 513
score: 99.15125325520833
patch: return super . is CaMeL Inlinable CaMeL Object ( name ) ;
rank: 513
score: 99.13251139322917
patch: if ( gramps . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Assigned CaMeL Value ( ) ) ) {
rank: 513
score: 99.0641581217448
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , ref ) ) ;
rank: 513
score: 98.33404541015625
patch: / * ; continue * /
rank: 513
score: 98.32369995117188
patch: { return continue ; }
rank: 513
score: 98.1368916829427
patch: continue ; continue ; start
rank: 513
score: 98.10346330915179
patch: continue get CaMeL Message ( ;
rank: 514
score: 99.13203430175781
patch: if ( gramps . get CaMeL First CaMeL Child ( ) != parent )
rank: 514
score: 99.06400923295455
patch: return ( gramps . is CaMeL Call ( )
rank: 514
score: 98.81020100911458
patch: if ( ! is CaMeL Var ) {
rank: 514
score: 98.36944580078125
patch: else continue ; continue ; /
rank: 514
score: 98.33326212565105
patch: continue ; ; ; }
rank: 514
score: 98.3233642578125
patch: return * * * continue ;
rank: 514
score: 98.13233439127605
patch: continue ; ; return ;
rank: 514
score: 98.10328892299107
patch: if ( type != null )
rank: 515
score: 99.14734903971355
patch: return node . is CaMeL Get CaMeL Prop ( ) ;
rank: 515
score: 99.131591796875
patch: if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( gramps . get CaMeL Reference ( ) ) ) {
rank: 515
score: 99.06399536132812
patch: return ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) ) ;
rank: 515
score: 98.80947875976562
patch: return is CaMeL Getter CaMeL Def ( ) ;
rank: 515
score: 98.33326067243304
patch: continue ; out = false ;
rank: 515
score: 98.12828826904297
patch: ; continue ;
rank: 515
score: 98.10187639508929
patch: if ( continue == null ;
rank: 516
score: 99.14693777901786
patch: return ! parent . is CaMeL Getter CaMeL Def ( ) ) ;
rank: 516
score: 99.13151550292969
patch: is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref ) ;
rank: 516
score: 99.06374887319711
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( Node CaMeL Util . get CaMeL Child CaMeL
rank: 516
score: 99.03309983473558
patch: return is CaMeL Inlinable CaMeL Object ( refs ) ;
rank: 516
score: 98.80494995117188
patch: return parent . is CaMeL Empty ( ) ;
rank: 516
score: 98.3328857421875
patch: ; * ; * / ;
rank: 516
score: 98.32292829241071
patch: } else * if continue ;
rank: 517
score: 99.14485990084134
patch: return parent . is CaMeL Statement CaMeL Block ( name ) ;
rank: 517
score: 99.0635653409091
patch: return Node CaMeL Util . is CaMeL Statement CaMeL Block ( gramps . get CaMeL Node ( ) ) ;
rank: 517
score: 99.02858323317308
patch: return super . is CaMeL Statement CaMeL Block ( parent ) ;
rank: 517
score: 98.7994140625
patch: return ref . get CaMeL Value ( ) ;
rank: 517
score: 98.36648995535714
patch: value . continue ; } ;
rank: 517
score: 98.33250209263393
patch: continue ; else { continue ;
rank: 517
score: 98.3224385579427
patch: } else if ; }
rank: 517
score: 98.12261962890625
patch: System ; if continue ;
rank: 517
score: 98.10072544642857
patch: if ( continue ++ continue )
rank: 518
score: 99.13020272090517
patch: if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Node ( ) ) )
rank: 518
score: 98.78699340820313
patch: return ref . get CaMeL Grandparent ( ) ;
rank: 518
score: 98.32205636160714
patch: return ; this . continue ;
rank: 518
score: 98.12035115559895
patch: if * / continue ;
rank: 518
score: 98.10056559244792
patch: throw new Exception ( ;
rank: 519
score: 99.14393107096355
patch: return type . is CaMeL Get CaMeL Prop ( ) ;
rank: 519
score: 99.06308815696023
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref , ) ;
rank: 519
score: 98.77092149522569
patch: return is CaMeL Statement ( ref ) ;
rank: 519
score: 98.36572265625
patch: next new continue ; continue ;
rank: 519
score: 98.33193969726562
patch: ; * / continue ;
rank: 519
score: 98.32167271205357
patch: break * * * * /
rank: 519
score: 98.1172587076823
patch: if ; / * /
rank: 519
score: 98.09980119977679
patch: synchronized ( this ; ; )
rank: 520
score: 99.14340645926339
patch: return ! gramps . is CaMeL Statement CaMeL Block ( ) ;
rank: 520
score: 99.12972285829741
patch: if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( . get CaMeL Node ( ) ) ) {
rank: 520
score: 99.06291397758152
patch: return ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , ) ;
rank: 520
score: 98.76746961805556
patch: return $STRING$ . equals ( name ) ;
rank: 520
score: 98.36488850911458
patch: return false ; } ;
rank: 520
score: 98.33175223214286
patch: synchronized ( this ; continue ;
rank: 520
score: 98.3212890625
patch: * * * : * /
rank: 520
score: 98.11654663085938
patch: continue ; continue ; Logger
rank: 520
score: 98.0975850423177
patch: continue = continue ; }
rank: 521
score: 99.1420147235577
patch: return parent . is CaMeL Statement CaMeL Block ( ) ) ;
rank: 521
score: 99.12959929435483
patch: if ( ! gramps . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) ) ) {
rank: 521
score: 99.06284401633523
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( Node CaMeL Util . get CaMeL Node CaMeL
rank: 521
score: 99.02475992838542
patch: return gramps . is CaMeL Call ( ) ) ;
rank: 521
score: 98.7626708984375
patch: else return false ;
rank: 521
score: 98.36478969029018
patch: continue ; ; ; ; ;
rank: 521
score: 98.33171844482422
patch: continue ; * / * continue ;
rank: 521
score: 98.31934465680804
patch: return continue ; } return ;
rank: 521
score: 98.11643473307292
patch: continue ; if continue =
rank: 521
score: 98.09751383463542
patch: continue throw new ; }
rank: 522
score: 99.02394456129808
patch: return parent . is CaMeL Get CaMeL Prop ( ) ) ;
rank: 522
score: 98.33155059814453
patch: continue ; } if ( ! ;
rank: 522
score: 98.3191630045573
patch: * * * * ;
rank: 522
score: 98.11623128255208
patch: if ; continue ; try
rank: 523
score: 99.12907462284483
patch: if ( ! gramps . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Node ( ) ) ) {
rank: 523
score: 99.0625469501202
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL First CaMeL Child ( ) ) ) ;
rank: 523
score: 99.0193583170573
patch: return Node CaMeL Util . is CaMeL Statement ( ) ;
rank: 523
score: 98.36436244419643
patch: while false ; continue ; ;
rank: 523
score: 98.33145577566964
patch: continue ; * continue ; ;
rank: 523
score: 98.31808035714286
patch: if ( continue continue false ;
rank: 523
score: 98.11548868815105
patch: continue ; continue ; assert
rank: 523
score: 98.09428187779018
patch: if ( continue == true )
rank: 524
score: 99.12808964170259
patch: if ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL First CaMeL Child ( ) ==
rank: 524
score: 99.01913686899039
patch: return ( gramps . is CaMeL Call ( ) ) ;
rank: 524
score: 98.74733276367188
patch: return null . is CaMeL Statement ( ) ;
rank: 524
score: 98.36293538411458
patch: result { continue ; ;
rank: 524
score: 98.33049665178571
patch: continue * ; / * /
rank: 524
score: 98.31742350260417
patch: continue * if continue ;
rank: 524
score: 98.1118896484375
patch: return * continue ;
rank: 524
score: 98.09182739257812
patch: throw new continue ;
rank: 525
score: 99.1277587890625
patch: if ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( gramps . get CaMeL First CaMeL Child ( ) ==
rank: 525
score: 99.06222713694854
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( group ) ;
rank: 525
score: 99.01601938100961
patch: return this . gramps . is CaMeL Call ( ) ;
rank: 525
score: 98.36224365234375
patch: catch ( $STRING$ continue ;
rank: 525
score: 98.33026123046875
patch: continue ; } ; if ;
rank: 525
score: 98.11117553710938
patch: continue ; ; / ;
rank: 526
score: 99.12428332913306
patch: if ( ! gramps . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL First CaMeL Child ( ) ) ) {
rank: 526
score: 98.73873562282986
patch: return is CaMeL Var ( parent ) ;
rank: 526
score: 98.36141967773438
patch: m continue ; continue ;
rank: 526
score: 98.32969447544643
patch: continue : / * continue ;
rank: 526
score: 98.10951741536458
patch: result ; if continue ;
rank: 527
score: 99.12378717237904
patch: if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Assigned CaMeL Value ( ) ) )
rank: 527
score: 99.06149291992188
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( gramps . get CaMeL Node ( ) ) ;
rank: 527
score: 99.01076253255208
patch: throw parent . is CaMeL Getter CaMeL Def ( ) ;
rank: 527
score: 98.73713989257813
patch: return null . is CaMeL Call ( ) ;
rank: 527
score: 98.35926310221355
patch: continue . continue ; }
rank: 527
score: 98.32963344029018
patch: continue * / catch ( ;
rank: 527
score: 98.3119405110677
patch: return 0 ; continue ;
rank: 527
score: 98.10757446289062
patch: continue ; continue ; case
rank: 527
score: 98.0843017578125
patch: continue ; } }
rank: 528
score: 99.1231689453125
patch: if ( ! parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Assigned CaMeL Value ( ) ) ) {
rank: 528
score: 99.0611328125
patch: return gramps . is CaMeL Call ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ;
rank: 528
score: 99.0094327059659
patch: return is CaMeL Get CaMeL Prop ( name ) ;
rank: 528
score: 98.72301567925348
patch: return is CaMeL Statement ( parent ) ;
rank: 528
score: 98.32953752790179
patch: continue / * * / ;
rank: 528
score: 98.30926513671875
patch: return null && continue ;
rank: 528
score: 98.1064961751302
patch: ; ; if continue ;
rank: 529
score: 99.1318603515625
patch: return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ;
rank: 529
score: 99.12307942708334
patch: if ( gramps . get CaMeL First CaMeL Child ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent ) ) {
rank: 529
score: 99.061064453125
patch: return refs . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Node ( ) ) ;
rank: 529
score: 98.72001342773437
patch: return null . is CaMeL Var ( ) ;
rank: 529
score: 98.35784912109375
patch: } finally ; continue ;
rank: 529
score: 98.30907331194196
patch: * * * / } else
rank: 529
score: 98.10606892903645
patch: continue ; continue ; Throwable
rank: 529
score: 98.07774861653645
patch: Log . log ( ;
rank: 530
score: 99.122705078125
patch: if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Assigned CaMeL Value ( ) ==
rank: 530
score: 99.061005859375
patch: return parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Name ( ) ) ;
rank: 530
score: 99.00146484375
patch: return is CaMeL Getter CaMeL Def ( gramps ) ;
rank: 530
score: 98.35650634765625
patch: return continue ; ; ;
rank: 530
score: 98.32899693080357
patch: continue * continue * / ;
rank: 530
score: 98.30825369698661
patch: / * * * / /
rank: 530
score: 98.10420735677083
patch: return * continue ; /
rank: 530
score: 98.07664998372395
patch: continue false , break ;
rank: 531
score: 99.122705078125
patch: if ( parent . get CaMeL First CaMeL Child ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ) { {
rank: 531
score: 99.06092900815217
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name CaMeL Node ) ;
rank: 531
score: 98.35631103515625
patch: return new continue ;
rank: 531
score: 98.32871791294643
patch: continue ? * continue * /
rank: 532
score: 99.1290283203125
patch: return node . is CaMeL Getter CaMeL Def ( ) ) ;
rank: 532
score: 99.12261372227823
patch: if ( is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ! Node CaMeL Util . is CaMeL Statement CaMeL Block ( ref ) ) ) {
rank: 532
score: 99.06084650213069
patch: return gramps . is CaMeL Call ( ) . is CaMeL Inlinable CaMeL Object ( name ) ;
rank: 532
score: 98.35629272460938
patch: catch null || continue ;
rank: 532
score: 98.32826232910156
patch: / * continue * * / ;
rank: 532
score: 98.30670166015625
patch: } return * * continue ;
rank: 532
score: 98.09759521484375
patch: if ; { break ;
rank: 532
score: 98.07478841145833
patch: continue null = true ;
rank: 533
score: 99.12170803931451
patch: if ( ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( Node CaMeL Util . get CaMeL Assigned CaMeL Value ( ref ) ) ) {
rank: 533
score: 99.0603778545673
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Assigned CaMeL Value ( ) ) ) ;
rank: 533
score: 98.99473063151042
patch: return target . is CaMeL Get CaMeL Prop ( ) ;
rank: 533
score: 98.63642883300781
patch: throw false ;
rank: 533
score: 98.355712890625
patch: try { if continue ;
rank: 533
score: 98.32821655273438
patch: ; ; if ( ;
rank: 533
score: 98.30663045247395
patch: this . if continue ;
rank: 533
score: 98.07008666992188
patch: continue true * /
rank: 534
score: 98.63451470269098
patch: if ( ref . get CaMeL Reference CaMeL
rank: 534
score: 98.35099283854167
patch: catch false { continue ;
rank: 534
score: 98.32761637369792
patch: ; * / * /
rank: 534
score: 98.30623372395833
patch: continue * * * ;
rank: 534
score: 98.09006754557292
patch: if continue ; while ;
rank: 534
score: 98.0674540201823
patch: continue if ( continue )
rank: 535
score: 99.12099984975961
patch: ret = parent . get CaMeL Assigned CaMeL Value ( ) ;
rank: 535
score: 99.11864295372597
patch: continue + ref . get CaMeL First CaMeL Child ( ) ;
rank: 535
score: 98.98244406960227
patch: throw new Illegal CaMeL Argument CaMeL Exception ( ) ;
rank: 535
score: 98.62065124511719
patch: return is CaMeL Statement ( ) ;
rank: 535
score: 98.3508809407552
patch: } ; continue ; ;
rank: 535
score: 98.30494907924107
patch: * * * ? * /
rank: 535
score: 98.08907063802083
patch: continue ; continue ; type
rank: 535
score: 98.06500244140625
patch: continue . return true ;
rank: 536
score: 99.11882672991071
patch: return this . ref . is CaMeL Getter CaMeL Def ( ) ;
rank: 536
score: 99.11824035644531
patch: Preconditions . error ( parent . get CaMeL First CaMeL Child ( ) ) ;
rank: 536
score: 99.0594012920673
patch: return gramps . get CaMeL Prop ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent ) ;
rank: 536
score: 98.62014334542411
patch: if ( ) return false ;
rank: 536
score: 98.3506591796875
patch: break { continue ;
rank: 536
score: 98.3048095703125
patch: throw null ; continue ; }
rank: 536
score: 98.08772786458333
patch: if ; continue ; return
rank: 537
score: 99.11768517127403
patch: ret = parent . is CaMeL Getter CaMeL Def ( ) ;
rank: 537
score: 99.05879350142045
patch: return ref . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Parent CaMeL
rank: 537
score: 98.97015380859375
patch: return null . is CaMeL Statement CaMeL Block ( ) ;
rank: 537
score: 98.3271484375
patch: continue ; / * continue /
rank: 537
score: 98.30252075195312
patch: case null * * /
rank: 537
score: 98.08718872070312
patch: continue ; continue ; String
rank: 537
score: 98.06178283691406
patch: continue this ;
rank: 538
score: 99.11765543619792
patch: return $STRING$ . is CaMeL Get CaMeL Prop ( ) ;
rank: 538
score: 99.11460433467742
patch: if ( ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( gramps . get CaMeL First CaMeL Child ( ) )
rank: 538
score: 99.0587627704327
patch: return . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) . is CaMeL Get CaMeL Prop ( ) ;
rank: 538
score: 98.34993896484374
patch: catch continue ; ;
rank: 538
score: 98.30237833658855
patch: return ( continue ; }
rank: 538
score: 98.08599853515625
patch: return continue ; if ;
rank: 538
score: 98.06121826171875
patch: if ; break ; }
rank: 539
score: 99.11266696068549
patch: return ref . get CaMeL Node ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Node ( ) ) ;
rank: 539
score: 99.0580417798913
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) + ) ;
rank: 539
score: 98.32649739583333
patch: continue * / break ;
rank: 539
score: 98.30211530412946
patch: } else { / * /
rank: 540
score: 99.11604817708333
patch: return node . is CaMeL Statement CaMeL Block ( ) ;
rank: 540
score: 99.11236572265625
patch: if ( parent . get CaMeL First CaMeL Child ( ) != null ) {
rank: 540
score: 99.05785193810097
patch: return parent . is CaMeL Get CaMeL Prop ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ;
rank: 540
score: 98.9657694498698
patch: return gramps . is CaMeL Call ( parent ) ;
rank: 540
score: 98.59899291992187
patch: else return true ;
rank: 540
score: 98.34666951497395
patch: i . continue ; ;
rank: 540
score: 98.32472446986607
patch: if ( parent . ; ;
rank: 540
score: 98.08268229166667
patch: return ; = continue ;
rank: 540
score: 98.0562235514323
patch: } else if ( ;
rank: 541
score: 99.11559244791667
patch: is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs = ret ;
rank: 541
score: 99.10875283518145
patch: for ( Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) . is CaMeL Getter CaMeL Def ( ) ) {
rank: 541
score: 99.05751953125
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . is CaMeL Get CaMeL Prop ( ) ) ;
rank: 541
score: 98.59602864583333
patch: if ( ref . get CaMeL Child CaMeL
rank: 541
score: 98.34657796223958
patch: if ) { continue ;
rank: 541
score: 98.32456461588542
patch: continue ; in * /
rank: 541
score: 98.30143229166667
patch: * * * continue /
rank: 541
score: 98.08229573567708
patch: ; continue ; continue ;
rank: 542
score: 99.10704694475446
patch: if ( name . is CaMeL Get CaMeL Prop ( ) ) {
rank: 542
score: 99.0574199969952
patch: return parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( gramps . get CaMeL Node ( ) ) ;
rank: 542
score: 98.953369140625
patch: if ( gramps . is CaMeL Call ( ) &&
rank: 542
score: 98.34585571289062
patch: return ( continue false ;
rank: 542
score: 98.30038452148438
patch: return ( continue continue ;
rank: 542
score: 98.08157348632812
patch: break ; continue ; ;
rank: 542
score: 98.05394490559895
patch: continue return false ; }
rank: 543
score: 99.10374450683594
patch: if ( this . parent . is CaMeL Get CaMeL Prop ( ) ) {
rank: 543
score: 98.95264781605114
patch: return is CaMeL Get CaMeL Prop ( ref ) ;
rank: 543
score: 98.58511352539062
patch: throw true ;
rank: 543
score: 98.34288330078125
patch: return new $STRING$ ;
rank: 543
score: 98.32405090332031
patch: return false ; } } finally {
rank: 543
score: 98.08143107096355
patch: / * continue ; /
rank: 543
score: 98.05295817057292
patch: if ( continue ret )
rank: 544
score: 98.95004272460938
patch: return this . is CaMeL Statement CaMeL Block ( ) ;
rank: 544
score: 98.58335658482143
patch: return is CaMeL Var ) ;
rank: 544
score: 98.32374790736607
patch: if ( ; else { ;
rank: 544
score: 98.08030192057292
patch: continue ; if ; System
rank: 544
score: 98.05257161458333
patch: if ( continue continue )
rank: 545
score: 99.10623168945312
patch: return value . is CaMeL Get CaMeL Prop ( ) ;
rank: 545
score: 99.10165405273438
patch: Preconditions . check ( parent . get CaMeL First CaMeL Child ( ) ) ;
rank: 545
score: 98.93838500976562
patch: return && gramps . is CaMeL Call ( ) ;
rank: 545
score: 98.5804672241211
patch: return is CaMeL Empty ( ) ;
rank: 545
score: 98.33716837565105
patch: try { continue ; /
rank: 545
score: 98.3228988647461
patch: continue ; } / * / ;
rank: 545
score: 98.29784284319196
patch: try { if ; continue ;
rank: 545
score: 98.07959594726563
patch: try ; continue ;
rank: 545
score: 98.05197143554688
patch: if ( ; return ;
rank: 546
score: 99.09809875488281
patch: if ( parent . is CaMeL Inlinable CaMeL Object ( ) ) {
rank: 546
score: 99.05612182617188
patch: return ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , refs ) ;
rank: 546
score: 98.93731134588069
patch: return is CaMeL Get CaMeL Prop ( parent ) ;
rank: 546
score: 98.5707778930664
patch: return is CaMeL Var ( ) ;
rank: 546
score: 98.3363545735677
patch: value ; continue ; ;
rank: 546
score: 98.32257080078125
patch: continue ; out . continue ;
rank: 546
score: 98.07950846354167
patch: else if ; continue ;
rank: 546
score: 98.04684448242188
patch: continue . . continue ;
rank: 547
score: 99.09750162760416
patch: is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ) ;
rank: 547
score: 98.93693403764205
patch: return is CaMeL Setter CaMeL Def ( parent ) ;
rank: 547
score: 98.33616129557292
patch: ( null ; continue ;
rank: 547
score: 98.322509765625
patch: ; / * * continue * /
rank: 547
score: 98.29656110491071
patch: return ; return continue ; }
rank: 547
score: 98.07821655273438
patch: / continue ;
rank: 547
score: 98.046142578125
patch: continue default . continue ;
rank: 548
score: 99.0967548076923
patch: if ( gramps . is CaMeL Var ( ) ) {
rank: 548
score: 98.93363813920455
patch: return . is CaMeL Get CaMeL Prop ( ) ;
rank: 548
score: 98.54586791992188
patch: return is CaMeL Var ;
rank: 548
score: 98.3354736328125
patch: for continue ; ;
rank: 548
score: 98.32169342041016
patch: / * ; * / * /
rank: 548
score: 98.29524448939732
patch: return ; continue ; } else
rank: 548
score: 98.0751444498698
patch: / ; continue ; }
rank: 548
score: 98.04454549153645
patch: continue false || continue ;
rank: 549
score: 99.10263497488839
patch: return this . ref . is CaMeL Get CaMeL Prop ( ) ;
rank: 549
score: 99.055654296875
patch: return ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Node ( ) ) ;
rank: 549
score: 98.93297322591145
patch: return super . is CaMeL Getter CaMeL Def ( ) ;
rank: 549
score: 98.32086181640625
patch: continue ; / * if ;
rank: 549
score: 98.29481724330357
patch: continue * * * break ;
rank: 549
score: 98.0744120279948
patch: if continue ; try /
rank: 549
score: 98.04388427734375
patch: continue new Error ( ;
rank: 550
score: 99.10200718470982
patch: return ( parent . is CaMeL Setter CaMeL Def ( ) ) ;
rank: 550
score: 99.0556109884511
patch: return Node CaMeL Util . is CaMeL Get CaMeL Prop ( ref . get CaMeL First CaMeL Child ( ) ) ;
rank: 550
score: 98.9319559733073
patch: return || gramps . is CaMeL Call ( ) ;
rank: 550
score: 98.54372151692708
patch: try { return false ;
rank: 550
score: 98.33363850911458
patch: } * * continue ;
rank: 550
score: 98.32080078125
patch: continue * * continue * / }
rank: 550
score: 98.29473005022321
patch: continue * * / } else
rank: 550
score: 98.07335408528645
patch: continue ; continue ; print
rank: 550
score: 98.04137166341145
patch: continue false return continue ;
rank: 551
score: 99.09233747209821
patch: if ( ! gramps . is CaMeL Call ( ) ) {
rank: 551
score: 99.05516516644022
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref == ref ) ;
rank: 551
score: 98.54208374023438
patch: return this . false ;
rank: 551
score: 98.33362833658855
patch: return null . continue ;
rank: 551
score: 98.32077462332589
patch: continue ; else if ( ;
rank: 551
score: 98.29466901506696
patch: } try { if continue ;
rank: 551
score: 98.07281494140625
patch: continue ; continue ; throws
rank: 551
score: 98.04110717773438
patch: continue null = continue ;
rank: 552
score: 99.05467122395834
patch: new CaMeL Node = ref . get CaMeL Assigned CaMeL Value ( ) ;
rank: 552
score: 98.9303487141927
patch: return ! is CaMeL Getter CaMeL Def ( ref ) ;
rank: 552
score: 98.33290608723958
patch: id { continue ; }
rank: 552
score: 98.32020568847656
patch: continue * / if ( ; }
rank: 552
score: 98.29274204799107
patch: continue * * / * /
rank: 552
score: 98.0712158203125
patch: / / continue ;
rank: 553
score: 99.09833635602679
patch: return ! gramps . is CaMeL Setter CaMeL Def ( ) ;
rank: 553
score: 99.0909423828125
patch: if ( ref . get CaMeL First CaMeL Child ( ) != name ) {
rank: 553
score: 99.05419921875
patch: super . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Parent ( ) ) ;
rank: 553
score: 98.5207010904948
patch: ref . return false ;
rank: 553
score: 98.3316141764323
patch: out . ; continue ;
rank: 553
score: 98.31949288504464
patch: continue ; default * / }
rank: 553
score: 98.29256591796874
patch: * * continue ;
rank: 553
score: 98.07118733723958
patch: this ; if continue ;
rank: 553
score: 98.03748321533203
patch: continue true ;
rank: 554
score: 99.09706333705357
patch: return node . is CaMeL Inlinable CaMeL Object ( ) ;
rank: 554
score: 98.31727091471355
patch: continue n . * /
rank: 554
score: 98.29176839192708
patch: return false ; } finally
rank: 554
score: 98.0708516438802
patch: continue ; continue ; to
rank: 554
score: 98.03539021809895
patch: continue = true ; ;
rank: 555
score: 99.0970126065341
patch: return ! is CaMeL Get CaMeL Prop ( ) ;
rank: 555
score: 99.08842468261719
patch: is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) {
rank: 555
score: 98.49152374267578
patch: if ( ref != null ) {
rank: 555
score: 98.33062744140625
patch: } continue ; break ;
rank: 555
score: 98.3169453938802
patch: continue ; default * ;
rank: 555
score: 98.2916768391927
patch: * / if continue ;
rank: 555
score: 98.06954956054688
patch: if ; = 0 ;
rank: 555
score: 98.02976481119792
patch: if ; } continue ;
rank: 556
score: 99.05269368489583
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Parent CaMeL
rank: 556
score: 98.9171854654948
patch: return ! is CaMeL Getter CaMeL Def ( parent ) ;
rank: 556
score: 98.3281758626302
patch: continue { return true ;
rank: 556
score: 98.31640625
patch: continue ; } else { * /
rank: 556
score: 98.06715901692708
patch: continue ; continue ; final
rank: 556
score: 98.02904256184895
patch: continue node = continue ;
rank: 557
score: 99.09317220052084
patch: return ref . get CaMeL First CaMeL Child ( ) == parent ) ;
rank: 557
score: 99.052431640625
patch: return ref . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . is CaMeL Getter CaMeL Def ( )
rank: 557
score: 98.91108842329545
patch: return ! is CaMeL Getter CaMeL Def ( ) ;
rank: 557
score: 98.47630964006696
patch: if ( ) return true ;
rank: 557
score: 98.3268534342448
patch: else { continue ; *
rank: 557
score: 98.3159891764323
patch: continue * / / ;
rank: 557
score: 98.29120744977679
patch: continue * if ( continue ;
rank: 557
score: 98.06447347005208
patch: continue ; continue ; ++
rank: 557
score: 98.0284423828125
patch: throw new Runtime ;
rank: 558
score: 98.90141157670455
patch: return gramps . is CaMeL Assign ( ) ;
rank: 558
score: 98.3268534342448
patch: continue ; case continue ;
rank: 558
score: 98.31492614746094
patch: / * * ; ; * /
rank: 558
score: 98.28946358816964
patch: if ( continue CaMeL Node ;
rank: 558
score: 98.06396484375
patch: return ; / / /
rank: 558
score: 98.02755737304688
patch: continue $NUMBER$ * continue ;
rank: 559
score: 99.0788104717548
patch: return parent . is CaMeL Get CaMeL Prop ( ) ; }
rank: 559
score: 99.05186971028645
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL First CaMeL Child ( ) ==
rank: 559
score: 98.9010009765625
patch: super . is CaMeL Statement CaMeL Block ( ) ;
rank: 559
score: 98.31409454345703
patch: continue ; * continue * * /
rank: 559
score: 98.28862915039062
patch: continue if continue ;
rank: 559
score: 98.06337483723958
patch: continue ; continue ; first
rank: 559
score: 98.02260335286458
patch: continue . . * /
rank: 560
score: 98.89881480823864
patch: return . is CaMeL Statement CaMeL Block ( ) ;
rank: 560
score: 98.47075653076172
patch: if ( name != null ) {
rank: 560
score: 98.32532755533855
patch: super . continue continue ;
rank: 560
score: 98.28831263950893
patch: / * * * * ;
rank: 560
score: 98.06139119466145
patch: continue ; continue ; public
rank: 561
score: 99.07479858398438
patch: if ( ref . get CaMeL First CaMeL Child ( ) == name ) {
rank: 561
score: 99.05117399796195
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( gramps . get CaMeL
rank: 561
score: 98.895263671875
patch: return is CaMeL Setter CaMeL Def ( ref ) ;
rank: 561
score: 98.32308959960938
patch: continue continue ; } ;
rank: 561
score: 98.312255859375
patch: continue ; , * /
rank: 561
score: 98.28803362165179
patch: break ; continue ; } }
rank: 561
score: 98.06105550130208
patch: continue ; break ; ;
rank: 561
score: 98.02002563476563
patch: continue value . ;
rank: 562
score: 99.08684430803571
patch: return ! is CaMeL Inlinable CaMeL Object ( name ) ;
rank: 562
score: 99.0732650756836
patch: if ( Node CaMeL Util . is CaMeL Statement CaMeL Block ( ref ) )
rank: 562
score: 99.05076246995192
patch: return gramps . get CaMeL Prop ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . }
rank: 562
score: 98.32208251953125
patch: ( $STRING$ ; continue ;
rank: 562
score: 98.31156158447266
patch: continue * / return false ; ;
rank: 562
score: 98.28715297154018
patch: } else return false ; }
rank: 562
score: 98.0194091796875
patch: continue false } continue ;
rank: 563
score: 99.0844217936198
patch: return this . is CaMeL Get CaMeL Prop ( ) ;
rank: 563
score: 99.06862095424107
patch: if ( ! parent . is CaMeL Get CaMeL Prop ( ) )
rank: 563
score: 98.4613037109375
patch: return size ( ) > 0 ;
rank: 563
score: 98.32190958658855
patch: } continue continue ; ;
rank: 563
score: 98.31153869628906
patch: ; * / / * * /
rank: 563
score: 98.28703962053571
patch: { return continue ; } }
rank: 563
score: 98.06039428710938
patch: continue ; if continue .
rank: 564
score: 99.06849772135416
patch: if ( ! ref . is CaMeL Get CaMeL Prop ( ) ) {
rank: 564
score: 99.05062866210938
patch: super . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) . is CaMeL Call ( ) ;
rank: 564
score: 98.88339233398438
patch: return name . is CaMeL Call ( ) ;
rank: 564
score: 98.45970153808594
patch: if ( ! is CaMeL Var )
rank: 564
score: 98.31850179036458
patch: finally { if continue ;
rank: 564
score: 98.31112670898438
patch: continue ; } / / * ;
rank: 564
score: 98.28690011160714
patch: * * / continue ; }
rank: 564
score: 98.05511474609375
patch: do ; if continue ;
rank: 564
score: 98.01732381184895
patch: continue = ! continue ;
rank: 565
score: 99.08162747896634
patch: result = parent . get CaMeL First CaMeL Child ( ) ;
rank: 565
score: 99.050400390625
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Node ( ) == name ) ;
rank: 565
score: 98.8831787109375
patch: return gramps . is CaMeL Var ( ) ;
rank: 565
score: 98.44540841238839
patch: return true ; return true ;
rank: 565
score: 98.30426788330078
patch: return ; }
rank: 565
score: 98.28636823381696
patch: * * * if continue ;
rank: 565
score: 98.0547383626302
patch: if continue . continue ;
rank: 566
score: 99.07881986177884
patch: return ! ref . is CaMeL Get CaMeL Prop ( ) ;
rank: 566
score: 99.0643310546875
patch: if ( parent . get CaMeL First CaMeL Child ( ) != name )
rank: 566
score: 99.050390625
patch: return $STRING$ . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Parent ( ) ) ;
rank: 566
score: 98.87532182173295
patch: throw new Null CaMeL Pointer CaMeL Exception ( ) ;
rank: 566
score: 98.4423319498698
patch: try { return true ;
rank: 566
score: 98.3165995279948
patch: continue continue ; / /
rank: 566
score: 98.30397033691406
patch: continue = ;
rank: 566
score: 98.2862548828125
patch: * * * ; * /
rank: 566
score: 98.05133056640625
patch: if continue ; continue .
rank: 566
score: 98.01394653320312
patch: continue value = null ;
rank: 567
score: 99.07764610877403
patch: ret = parent . is CaMeL Statement CaMeL Block ( ) ;
rank: 567
score: 99.06426532451923
patch: if ( ref . get CaMeL First CaMeL Child ( ) ;
rank: 567
score: 99.05020141601562
patch: return ( parent . is CaMeL Getter CaMeL Def ( )
rank: 567
score: 98.85896439985795
patch: return is CaMeL Statement CaMeL Block ( refs ) ;
rank: 567
score: 98.3130615234375
patch: synchronized new continue ;
rank: 567
score: 98.28589739118304
patch: { return false ; } else
rank: 567
score: 98.05118815104167
patch: continue ; if / ;
rank: 567
score: 98.01282755533855
patch: continue value return true ;
rank: 568
score: 99.07693246694711
patch: return name . is CaMeL Getter CaMeL Def ( ) ) ;
rank: 568
score: 99.06319486177884
patch: if ( ! is CaMeL Get CaMeL Prop ( ) ) {
rank: 568
score: 99.04958177649456
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , value ) ;
rank: 568
score: 98.85378196022727
patch: return is CaMeL Setter CaMeL Def ( name ) ;
rank: 568
score: 98.43782261439732
patch: if ( ! ret ) {
rank: 568
score: 98.29644165039062
patch: continue ; default :
rank: 568
score: 98.04981486002605
patch: continue ; if ; ?
rank: 568
score: 98.01268513997395
patch: synchronized ( this ; )
rank: 569
score: 99.07688551682692
patch: ret = ref . get CaMeL First CaMeL Child ( ) ;
rank: 569
score: 99.0576923076923
patch: if ( ref . is CaMeL Get CaMeL Prop ( ) )
rank: 569
score: 99.04913799579327
patch: return gramps . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . is CaMeL Getter CaMeL Def ( )
rank: 569
score: 98.42463902064732
patch: ret = false ; } }
rank: 569
score: 98.31051635742188
patch: / * continue {
rank: 569
score: 98.29573567708333
patch: continue * if ( ;
rank: 569
score: 98.27022298177083
patch: return false ? continue ;
rank: 569
score: 98.0455810546875
patch: continue ; return ;
rank: 569
score: 98.01136271158855
patch: continue value return false ;
rank: 570
score: 99.04912567138672
patch: return gramps . is CaMeL Inlinable CaMeL Object ( name ) ;
rank: 570
score: 98.41192626953125
patch: else return false ; }
rank: 570
score: 98.31044514973958
patch: key { continue ; }
rank: 570
score: 98.2955830891927
patch: continue ; * / }
rank: 570
score: 98.2654520670573
patch: return null ; } else
rank: 570
score: 98.04484049479167
patch: / ; continue ; ;
rank: 570
score: 98.01063537597656
patch: continue false .
rank: 571
score: 99.0573486328125
patch: if ( parent . get CaMeL First CaMeL Child ( ) == name )
rank: 571
score: 99.04898274739584
patch: return gramps . get CaMeL First CaMeL Child ( ) . get CaMeL
rank: 571
score: 98.84670188210227
patch: super . is CaMeL Getter CaMeL Def ( ) ;
rank: 571
score: 98.41150774274554
patch: return false ; } / /
rank: 571
score: 98.30999755859375
patch: finally { continue continue ;
rank: 571
score: 98.29537353515624
patch: continue ? * /
rank: 571
score: 98.2652816772461
patch: return 0 ;
rank: 571
score: 98.04477945963542
patch: / / / continue ;
rank: 571
score: 98.010498046875
patch: if ( ; ) {
rank: 572
score: 99.04888671875
patch: return ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name , gramps ) ;
rank: 572
score: 98.40379842122395
patch: return this . true ;
rank: 572
score: 98.3096415201823
patch: } continue continue continue ;
rank: 572
score: 98.2930908203125
patch: * / / * /
rank: 572
score: 98.00838216145833
patch: else if ( continue )
rank: 573
score: 99.06962367466518
patch: return ( ref . is CaMeL Get CaMeL Prop ( ) ) ;
rank: 573
score: 99.05460611979167
patch: if ( parent . is CaMeL Var ( ) ) {
rank: 573
score: 98.40151541573661
patch: if ( ref . get CaMeL
rank: 573
score: 98.29278564453125
patch: while ( ; ) {
rank: 573
score: 98.25734456380208
patch: } if ( false ;
rank: 573
score: 98.0427490234375
patch: do ; continue ;
rank: 574
score: 99.06955973307292
patch: return target . is CaMeL Statement CaMeL Block ( ) ;
rank: 574
score: 99.04829676011029
patch: return parent . get CaMeL Prop ( ) . is CaMeL Getter CaMeL Def ( )
rank: 574
score: 98.810205078125
patch: return value . is CaMeL Call ( ) ;
rank: 574
score: 98.30775960286458
patch: return true ; continue {
rank: 574
score: 98.29112752278645
patch: if ( name . ;
rank: 574
score: 98.2530517578125
patch: return continue continue ; }
rank: 574
score: 98.03953043619792
patch: c ; if continue ;
rank: 575
score: 99.05218505859375
patch: is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ++ ;
rank: 575
score: 99.0477734375
patch: return parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Id ( ) ) ;
rank: 575
score: 98.39579264322917
patch: ref . return true ;
rank: 575
score: 98.306640625
patch: catch false && continue ;
rank: 575
score: 98.28037516276042
patch: this . * / ;
rank: 575
score: 98.25225830078125
patch: this . return true ;
rank: 575
score: 98.0053202311198
patch: continue null = false ;
rank: 576
score: 99.05201067243304
patch: if ( refs . is CaMeL Get CaMeL Prop ( ) ) {
rank: 576
score: 99.0475437330163
patch: return ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ; else
rank: 576
score: 98.803125
patch: return refs . size ( ) > 0 ;
rank: 576
score: 98.306640625
patch: while null || continue ;
rank: 576
score: 98.27212524414062
patch: continue ; default ;
rank: 576
score: 98.25167846679688
patch: } else * * /
rank: 576
score: 98.03694661458333
patch: return else if continue ;
rank: 576
score: 98.00343831380208
patch: boolean ret = true ;
rank: 577
score: 99.047333984375
patch: return null . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Parent ( ) ) ;
rank: 577
score: 98.39424351283482
patch: if ( ! false ) {
rank: 577
score: 98.26998901367188
patch: continue ; out = ;
rank: 577
score: 98.24923706054688
patch: } * * * /
rank: 577
score: 98.0364278157552
patch: continue ; continue ; ?
rank: 577
score: 98.0024169921875
patch: continue new continue ;
rank: 578
score: 99.04637654622395
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Reference CaMeL
rank: 578
score: 98.39412841796874
patch: } return true ;
rank: 578
score: 98.304931640625
patch: if ( continue null ;
rank: 578
score: 98.26987915039062
patch: continue super . ;
rank: 578
score: 98.0357666015625
patch: if do { continue ;
rank: 578
score: 98.00133260091145
patch: continue type = continue ;
rank: 579
score: 99.06446251502403
patch: ret = parent . is CaMeL Setter CaMeL Def ( ) ;
rank: 579
score: 98.79232177734374
patch: throw new Runtime CaMeL Exception ( $STRING$ ) ;
rank: 579
score: 98.30476888020833
patch: element . continue ; ;
rank: 579
score: 98.24395141601562
patch: { continue ; }
rank: 579
score: 98.03536987304688
patch: if continue ; try ;
rank: 579
score: 97.9898681640625
patch: boolean success = false ;
rank: 580
score: 99.04535381610577
patch: if ( ref . get CaMeL First CaMeL Child ( ) !=
rank: 580
score: 98.7866943359375
patch: return super . is CaMeL Statement ( ) ;
rank: 580
score: 98.37602887834821
patch: return true ; } / /
rank: 580
score: 98.30398559570312
patch: element . continue ; }
rank: 580
score: 97.98710327148437
patch: state = continue ;
rank: 581
score: 99.0609600360577
patch: ret = parent . is CaMeL Get CaMeL Prop ( ) ;
rank: 581
score: 99.045166015625
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ; try {
rank: 581
score: 99.04369303385417
patch: Object . type = ref . get CaMeL First CaMeL Child ( ) ;
rank: 581
score: 98.37509155273438
patch: else ret = false ;
rank: 581
score: 98.3037821451823
patch: if null ) continue ;
rank: 581
score: 98.26418050130208
patch: continue - $NUMBER$ * /
rank: 581
score: 98.24275716145833
patch: * * * / /
rank: 581
score: 98.03265991210938
patch: continue ; System ;
rank: 581
score: 97.98676147460938
patch: if ; break ;
rank: 582
score: 99.0411885579427
patch: if ( is CaMeL Get CaMeL Prop ( ) ) {
rank: 582
score: 98.75424194335938
patch: return parent . is CaMeL Get ( ) ;
rank: 582
score: 98.30287679036458
patch: try { for continue ;
rank: 582
score: 98.03255208333333
patch: return if continue ; ;
rank: 582
score: 97.98609619140625
patch: * / continue ;
rank: 583
score: 99.04476224459134
patch: return gramps . get CaMeL First CaMeL Child ( ) ==
rank: 583
score: 99.02840482271634
patch: return parent . is CaMeL Getter CaMeL Def ( ) ; }
rank: 583
score: 98.36536661783855
patch: return Boolean . true ;
rank: 583
score: 98.3019510904948
patch: m false ; continue ;
rank: 583
score: 98.24052734375
patch: / * * /
rank: 583
score: 98.03220621744792
patch: if null = continue ;
rank: 584
score: 99.05515543619792
patch: return type . is CaMeL Getter CaMeL Def ( ) ;
rank: 584
score: 99.044697265625
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Type CaMeL Name ( ) ) ;
rank: 584
score: 98.36476353236607
patch: ret = true ; } }
rank: 584
score: 98.30115763346355
patch: if false ? continue ;
rank: 584
score: 98.25733947753906
patch: * / ;
rank: 584
score: 98.2403055826823
patch: return continue && continue ;
rank: 584
score: 98.03172810872395
patch: if continue ; return ;
rank: 584
score: 97.98409016927083
patch: try { continue false ;
rank: 585
score: 99.04445393880208
patch: super . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Value ( ) ) ;
rank: 585
score: 99.02605731670673
patch: if ( gramps . is CaMeL Empty ( ) ) {
rank: 585
score: 98.30075073242188
patch: / finally { continue ;
rank: 585
score: 98.25643920898438
patch: continue ; * ; }
rank: 585
score: 98.03113810221355
patch: continue ; continue ; un@@
rank: 585
score: 97.98236083984375
patch: logger . error ( ;
rank: 586
score: 99.05365459735577
patch: return this . is CaMeL Statement CaMeL Block ( name ) ;
rank: 586
score: 99.0436503092448
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( ref . get CaMeL Node CaMeL
rank: 586
score: 99.0243671123798
patch: if ( ref . get CaMeL First CaMeL Child ( ) ==
rank: 586
score: 98.74110717773438
patch: return refs . size ( ) > 1 ;
rank: 586
score: 98.36442347935268
patch: Preconditions . ret = false ;
rank: 586
score: 98.29958089192708
patch: } try ; continue ;
rank: 586
score: 98.255078125
patch: this . * /
rank: 586
score: 97.982080078125
patch: ret = continue ;
rank: 587
score: 99.0434765625
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Root CaMeL Node ( ) ) ;
rank: 587
score: 98.73787231445313
patch: return is CaMeL Setter CaMeL Def ( ) ;
rank: 587
score: 98.29874674479167
patch: } continue { continue ;
rank: 587
score: 98.25381469726562
patch: continue . * continue ;
rank: 587
score: 98.23895263671875
patch: this . return ;
rank: 587
score: 98.02918497721355
patch: end ; if continue ;
rank: 587
score: 97.98091888427734
patch: * continue ;
rank: 588
score: 99.049072265625
patch: return ( ref . is CaMeL Getter CaMeL Def ( ) ) ;
rank: 588
score: 99.04297892252605
patch: return ! Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name == name ) ;
rank: 588
score: 98.36347307477679
patch: if ( ! true ) {
rank: 588
score: 98.29761759440105
patch: break ; ; continue ;
rank: 588
score: 98.2510477701823
patch: this . if ( ;
rank: 588
score: 98.23876953125
patch: / * * / }
rank: 588
score: 98.02836100260417
patch: if continue ; ; /
rank: 588
score: 97.98065948486328
patch: fail continue ;
rank: 589
score: 99.04905482700893
patch: return ( parent . is CaMeL Statement CaMeL Block ( ) ) ;
rank: 589
score: 99.0410546875
patch: return parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Reference ( ) ) ;
rank: 589
score: 99.0188457782452
patch: if ( parent . get CaMeL Assigned CaMeL Value ( ) ;
rank: 589
score: 98.3595682779948
patch: if ( ) continue ;
rank: 589
score: 98.23623657226562
patch: return continue ; } finally
rank: 589
score: 98.02806599934895
patch: if ; * ; /
rank: 589
score: 97.97906494140625
patch: try { return continue ;
rank: 590
score: 99.040810546875
patch: return parent . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name . get CaMeL Type ( ) ) ;
rank: 590
score: 99.01814778645833
patch: return gramps . is CaMeL Call ( ) ; }
rank: 590
score: 98.71240234375
patch: throw ( Runtime CaMeL Exception ) false ;
rank: 590
score: 98.35816446940105
patch: assignment . return false ;
rank: 590
score: 98.29651896158855
patch: return continue ; continue {
rank: 590
score: 98.24911499023438
patch: if ( name != ;
rank: 590
score: 98.23602294921875
patch: return ! continue ; }
rank: 590
score: 98.02593994140625
patch: continue ; continue ; long
rank: 590
score: 97.97880045572917
patch: continue value = this ;
rank: 591
score: 99.04051717122395
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( parent . get CaMeL Parent CaMeL
rank: 591
score: 98.35688127790179
patch: return this . return false ;
rank: 591
score: 98.29586181640624
patch: continue { break ;
rank: 591
score: 98.2490966796875
patch: ; if ( ;
rank: 591
score: 98.23255411783855
patch: return new continue ; }
rank: 591
score: 98.02559204101563
patch: if continue ; else
rank: 591
score: 97.97873942057292
patch: if ( continue , ;
rank: 592
score: 99.040087890625
patch: return Node CaMeL Util . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ) ? false : false ;
rank: 592
score: 99.0177714029948
patch: if ( ref . is CaMeL Call ( ) ) {
rank: 592
score: 98.35548618861607
patch: continue . ret = false ;
rank: 592
score: 98.29465738932292
patch: item . continue ; ;
rank: 592
score: 98.24680582682292
patch: continue ; } finally ;
rank: 592
score: 98.02459716796875
patch: continue ; continue ; add
rank: 592
score: 97.97789510091145
patch: continue get CaMeL Result ;
rank: 593
score: 98.68399810791016
patch: return boolean CaMeL Value ( ) ;
rank: 593
score: 98.29391479492188
patch: catch ( $STRING$ ) ;
rank: 593
score: 98.22997029622395
patch: this . return ; }
rank: 593
score: 98.0211181640625
patch: if ; = null ;
rank: 593
score: 97.97688293457031
patch: t continue ;
rank: 594
score: 99.00189763849431
patch: if ( parent . is CaMeL Call ( ) )
rank: 594
score: 98.3414306640625
patch: System . ret = false ;
rank: 594
score: 98.29193115234375
patch: if continue ; try {
rank: 594
score: 98.24307250976562
patch: continue = null ;
rank: 594
score: 98.22974650065105
patch: } else = null ;
rank: 594
score: 97.9766337076823
patch: boolean continue = false ;
rank: 595
score: 99.04187883649554
patch: return ! is CaMeL Inlinable CaMeL Object ( ref ) ;
rank: 595
score: 99.03970336914062
patch: return gramps . get CaMeL First CaMeL Child ( ) . is CaMeL Inlinable CaMeL Object ( name ) ;
rank: 595
score: 98.98958333333333
patch: if ( parent . is CaMeL Empty ( ) ) {
rank: 595
score: 98.33387247721355
patch: System . return false ;
rank: 595
score: 98.29080200195312
patch: else { while continue ;
rank: 595
score: 98.23746744791667
patch: continue this . * /
rank: 595
score: 98.00740356445313
patch: continue ; ; /
rank: 596
score: 99.04183959960938
patch: return node . is CaMeL Setter CaMeL Def ( ) ;
rank: 596
score: 99.03875177556819
patch: return parent . is CaMeL Getter CaMeL Def ( )
rank: 596
score: 98.98597208658855
patch: return refs . is CaMeL Get CaMeL Prop ( ) ;
rank: 596
score: 98.333740234375
patch: return return false ;
rank: 596
score: 98.23679606119792
patch: * ; * / ;
rank: 596
score: 98.22786458333333
patch: } / * * /
rank: 596
score: 97.9896469116211
patch: continue ; /
rank: 596
score: 97.97072347005208
patch: result = continue ; }
rank: 597
score: 98.64862670898438
patch: return ret ; }
rank: 597
score: 98.33323160807292
patch: return VAR != null ;
rank: 597
score: 98.289453125
patch: if null continue ;
rank: 597
score: 98.2272440592448
patch: return super . continue ;
rank: 597
score: 97.96905517578125
patch: add CaMeL Value continue ;
rank: 598
score: 99.03892299107143
patch: return ! parent . is CaMeL Setter CaMeL Def ( ) ) ;
rank: 598
score: 99.037587890625
patch: return parent . get CaMeL Prop ( ) . is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( id ) ;
rank: 598
score: 98.64382595486111
patch: return ! is CaMeL Statement ( ) ;
rank: 598
score: 98.32841273716518
patch: else ref . return false ;
rank: 598
score: 98.28802490234375
patch: if new new continue ;
rank: 598
score: 98.23369140625
patch: continue true ; }
rank: 598
score: 98.22679646809895
patch: return true ; } else
rank: 598
score: 97.97862548828125
patch: logger ; continue ;
rank: 599
score: 99.0385030110677
patch: return $STRING$ . is CaMeL Statement CaMeL Block ( ) ;
rank: 599
score: 99.03483072916667
patch: continue . if ( gramps . is CaMeL Call ( ) ) {
rank: 599
score: 98.63283284505208
patch: Preconditions . return false ;
rank: 599
score: 98.32632010323661
patch: try { ret = false ;
rank: 599
score: 98.28678894042969
patch: }
rank: 599
score: 98.2314453125
patch: while ( ; continue ;
rank: 599
score: 98.22610473632812
patch: return type . continue ;
rank: 599
score: 97.97791137695313
patch: ; if continue ;
rank: 599
score: 97.967529296875
patch: ret = continue ; }
rank: 600
score: 99.036865234375
patch: ret = parent . is CaMeL Getter CaMeL Def ( ) ) ;
rank: 600
score: 98.95006646050348
patch: for ( Reference ref : refs ) {
rank: 600
score: 98.32567487444196
patch: System . error ( ) ;
rank: 600
score: 98.286376953125
patch: name . continue ; }
rank: 600
score: 98.22957763671874
patch: continue null * /
rank: 600
score: 98.22559814453125
patch: continue - continue ;
rank: 600
score: 97.96584065755208
patch: continue false if ( ;
rank: 601
score: 99.03464918870192
patch: return ! name . is CaMeL Get CaMeL Prop ( ) ;
rank: 601
score: 99.03301532451923
patch: continue = ref . get CaMeL Assigned CaMeL Value ( ) ;
rank: 601
score: 98.28370157877605
patch: char continue ; continue ;
rank: 601
score: 98.22935180664062
patch: * / return ;
rank: 601
score: 98.22413126627605
patch: return false ; ; }
rank: 601
score: 97.9654032389323
patch: throw new ; } ;
rank: 601
score: 97.95628051757812
patch: ; ; continue ;
rank: 602
score: 99.03322190504808
patch: return ! target . is CaMeL Getter CaMeL Def ( ) ;
rank: 602
score: 99.02729143415179
patch: super . is CaMeL Inlinable CaMeL Object ( name ) ;
rank: 602
score: 98.63055419921875
patch: throw new Exception ( ) ;
rank: 602
score: 98.32066127232143
patch: result = false ; } }
rank: 602
score: 98.28355916341145
patch: else continue ; ; ;
rank: 602
score: 98.2220458984375
patch: return ; / * ;
rank: 602
score: 98.21987915039062
patch: this . break ; }
rank: 602
score: 97.961669921875
patch: if ( continue true )
rank: 603
score: 99.02559720552884
patch: state = ref . get CaMeL First CaMeL Child ( ) ;
rank: 603
score: 98.9441630045573
patch: ret = gramps . is CaMeL Call ( ) ;
rank: 603
score: 98.27858479817708
patch: } * if continue ;
rank: 603
score: 98.2198486328125
patch: * / ; * /
rank: 603
score: 98.2166748046875
patch: return false ; if ;
rank: 603
score: 97.9606221516927
patch: continue 1 . 0 ;
rank: 603
score: 97.9359130859375
patch: continue ; try
rank: 604
score: 99.03087439903847
patch: return parent . is CaMeL Get CaMeL Prop ( name ) ;
rank: 604
score: 98.9265645345052
patch: if ( gramps . is CaMeL Var ( ) )
rank: 604
score: 98.62215423583984
patch: return refs . get ( ) ;
rank: 604
score: 98.31694684709821
patch: catch ( ) return false ;
rank: 604
score: 98.21852620442708
patch: . * / continue ;
rank: 604
score: 98.21432495117188
patch: return null || continue ;
rank: 604
score: 97.959033203125
patch: continue = $STRING$ ;
rank: 604
score: 97.93348999023438
patch: LOG ; continue ;
rank: 605
score: 99.02994478665866
patch: return ref . is CaMeL Get CaMeL Prop ( ) ) ;
rank: 605
score: 99.02043151855469
patch: continue . if ( parent . is CaMeL Get CaMeL Prop ( ) ) {
rank: 605
score: 98.6198501586914
patch: return refs . length > 0 ;
rank: 605
score: 98.27782592773437
patch: key . continue ;
rank: 605
score: 98.21774291992188
patch: continue ; / ; ;
rank: 605
score: 97.95889282226562
patch: continue false / * ;
rank: 605
score: 97.93262939453125
patch: return / continue ;
rank: 606
score: 98.2770751953125
patch: } while continue ;
rank: 606
score: 98.21665445963542
patch: continue ? * / ;
rank: 606
score: 98.20578002929688
patch: } else } continue ;
rank: 606
score: 97.95786539713542
patch: synchronized ( init ) {
rank: 606
score: 97.93138427734375
patch: throw if continue ;
rank: 607
score: 99.02914663461539
patch: return ! name . is CaMeL Getter CaMeL Def ( ) ;
rank: 607
score: 98.30934651692708
patch: continue } return false ;
rank: 607
score: 98.27703857421875
patch: catch null && continue ;
rank: 607
score: 98.21443684895833
patch: add CaMeL Node ( ;
rank: 607
score: 98.2048110961914
patch: break continue ;
rank: 607
score: 97.95684814453125
patch: continue false }
rank: 608
score: 98.91150919596355
patch: if ( ref . is CaMeL Var ( ) ) {
rank: 608
score: 98.30721609933036
patch: if ( ref == null )
rank: 608
score: 98.2770284016927
patch: logger . ; continue ;
rank: 608
score: 98.21343994140625
patch: continue = - 1 ;
rank: 608
score: 98.20320638020833
patch: continue * return continue ;
rank: 608
score: 97.95670572916667
patch: continue value = ; }
rank: 609
score: 99.02696736653645
patch: return name . is CaMeL Statement CaMeL Block ( ) ;
rank: 609
score: 98.91094970703125
patch: if ( ! is CaMeL Get CaMeL Prop ( ) )
rank: 609
score: 98.27675374348958
patch: catch new continue ; ;
rank: 609
score: 98.2133076985677
patch: this ; return false ;
rank: 609
score: 98.20131429036458
patch: * * continue ; }
rank: 609
score: 97.95587158203125
patch: continue return true ; }
rank: 609
score: 97.90646362304688
patch: continue ; return
rank: 610
score: 99.02632649739583
patch: return gramps . is CaMeL Call ( ref ) ;
rank: 610
score: 99.01642717633929
patch: return parent . get CaMeL First CaMeL Child ( ) == parent ;
rank: 610
score: 98.90707397460938
patch: if ( parent . is CaMeL Get CaMeL Prop ( )
rank: 610
score: 98.30227225167411
patch: ref . return false ; }
rank: 610
score: 98.27672322591145
patch: return false ; try {
rank: 610
score: 98.21259765625
patch: continue new ; }
rank: 611
score: 99.02406663161058
patch: result = parent . get CaMeL Assigned CaMeL Value ( ) ;
rank: 611
score: 98.9063212076823
patch: if ( is CaMeL Getter CaMeL Def ( ) ) {
rank: 611
score: 98.27672322591145
patch: case false ; continue ;
rank: 611
score: 98.21126302083333
patch: synchronized ( ; continue ;
rank: 611
score: 98.20003255208333
patch: } else { } }
rank: 611
score: 97.95416259765625
patch: continue = false ; ;
rank: 611
score: 97.90431518554688
patch: continue ; else ;
rank: 612
score: 99.0147476196289
patch: return ( parent . get CaMeL First CaMeL Child ( ) == name ) ;
rank: 612
score: 98.29571533203125
patch: LOG . throw false ;
rank: 612
score: 98.19978841145833
patch: { if ; continue ;
rank: 612
score: 97.95391845703125
patch: if ( continue ret ;
rank: 612
score: 97.8927734375
patch: continue ; / /
rank: 613
score: 99.01020050048828
patch: return is CaMeL Get CaMeL Prop ( ) . is CaMeL Call ( ) ;
rank: 613
score: 98.90455211292614
patch: if ( ! is CaMeL Var ( ) ) {
rank: 613
score: 98.29296875
patch: parent . return false ;
rank: 613
score: 98.27608235677083
patch: else { return null ;
rank: 613
score: 98.20845540364583
patch: continue ? if ( ;
rank: 613
score: 98.199462890625
patch: return ; ;
rank: 613
score: 97.95086669921875
patch: continue ; } else
rank: 613
score: 97.88209838867188
patch: throw continue ; ;
rank: 614
score: 99.01248168945312
patch: return VAR . is CaMeL Get CaMeL Prop ( ) ;
rank: 614
score: 98.56021881103516
patch: return refs . length == 0 ;
rank: 614
score: 98.27542114257812
patch: list . continue ; }
rank: 614
score: 98.19940185546875
patch: this { continue ; }
rank: 615
score: 99.00742750901442
patch: continue = ref . get CaMeL First CaMeL Child ( ) ;
rank: 615
score: 98.55682373046875
patch: add CaMeL Node ( parent ) ;
rank: 615
score: 98.2914530436198
patch: else return true ; }
rank: 615
score: 98.20383707682292
patch: ; / * * /
rank: 615
score: 98.19911702473958
patch: { if ( continue ;
rank: 615
score: 97.94547526041667
patch: if ( continue $NUMBER$ )
rank: 615
score: 97.85547485351563
patch: this ; continue ;
rank: 616
score: 98.5562515258789
patch: return refs . length > 1 ;
rank: 616
score: 98.28788248697917
patch: } ret = false ;
rank: 616
score: 98.27486165364583
patch: logger . error continue ;
rank: 616
score: 97.94522094726562
patch: Security CaMeL Exception continue ;
rank: 616
score: 97.84517822265624
patch: while ; continue ;
rank: 617
score: 99.00192260742188
patch: return ! is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( {
rank: 617
score: 98.87563254616477
patch: return is CaMeL Get CaMeL Prop ( ) ; }
rank: 617
score: 98.2848409016927
patch: / / return false ;
rank: 617
score: 98.200927734375
patch: continue / * * ;
rank: 617
score: 98.19679768880208
patch: continue if continue ; }
rank: 617
score: 97.94383544921875
patch: report CaMeL Error ;
rank: 618
score: 99.00187174479167
patch: code . if ( gramps . is CaMeL Call ( ) ) {
rank: 618
score: 98.99485270182292
patch: return type . is CaMeL Statement CaMeL Block ( ) ;
rank: 618
score: 98.87171630859375
patch: return refs . is CaMeL Call ( ) ;
rank: 618
score: 98.28053792317708
patch: return this . ret ;
rank: 618
score: 98.27229817708333
patch: value continue ; continue ;
rank: 618
score: 98.19893391927083
patch: continue ; ; } }
rank: 618
score: 98.19659423828125
patch: } } return continue ;
rank: 618
score: 97.81749267578125
patch: return for continue ;
rank: 619
score: 99.00123596191406
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name ,
rank: 619
score: 98.27214965820312
patch: index . continue ;
rank: 619
score: 98.19889526367187
patch: continue / * ;
rank: 619
score: 98.1962890625
patch: return continue || continue ;
rank: 619
score: 97.94296264648438
patch: String name = continue ;
rank: 619
score: 97.81486206054687
patch: final if continue ;
rank: 620
score: 99.00028483072917
patch: exception . if ( gramps . is CaMeL Call ( ) ) {
rank: 620
score: 98.99043782552083
patch: return gramps . get CaMeL First CaMeL Child ( )
rank: 620
score: 98.8636141690341
patch: if ( parent . is CaMeL Var ( ) )
rank: 620
score: 98.2767842610677
patch: LOG . return false ;
rank: 620
score: 98.27107747395833
patch: continue { if null ;
rank: 620
score: 98.198486328125
patch: return false ; * /
rank: 620
score: 98.19381713867188
patch: } this . continue ;
rank: 620
score: 97.94254557291667
patch: if ( ; else {
rank: 620
score: 97.81353759765625
patch: start ; continue ;
rank: 621
score: 98.99862234933036
patch: break = gramps . get CaMeL First CaMeL Child ( ) ;
rank: 621
score: 98.26938883463542
patch: result ; continue ; }
rank: 621
score: 98.19761149088542
patch: continue ; out . ;
rank: 621
score: 98.19240315755208
patch: return ; break ; }
rank: 621
score: 97.8057861328125
patch: { continue ;
rank: 622
score: 98.517333984375
patch: return refs . length == 1 ;
rank: 622
score: 98.26839192708333
patch: if false && continue ;
rank: 622
score: 98.19498697916667
patch: continue ; } / *
rank: 622
score: 98.192138671875
patch: break ; } continue ;
rank: 622
score: 97.94004313151042
patch: add CaMeL Value ( ;
rank: 623
score: 98.99117024739583
patch: return ref . is CaMeL Inlinable CaMeL Object ( name ) ;
rank: 623
score: 98.8264892578125
patch: if ( is CaMeL Var ( ) ) {
rank: 623
score: 98.2676289876302
patch: value . ; continue ;
rank: 623
score: 98.19295247395833
patch: continue ; : * /
rank: 623
score: 98.19189453125
patch: return ; } } }
rank: 623
score: 97.804052734375
patch: if continue ; continue
rank: 624
score: 98.989990234375
patch: break = ref . get CaMeL First CaMeL Child ( ) ;
rank: 624
score: 98.9833272298177
patch: return scope . is CaMeL Statement CaMeL Block ( ) ;
rank: 624
score: 98.51402282714844
patch: return false ; } return ret ;
rank: 624
score: 98.2672627766927
patch: return ( false ) ;
rank: 624
score: 98.19285888671875
patch: synchronized ( continue ;
rank: 624
score: 98.19065551757812
patch: this . break ;
rank: 624
score: 97.93776448567708
patch: add CaMeL Property ( ;
rank: 624
score: 97.79952392578124
patch: if ; * /
rank: 625
score: 98.98992450420673
patch: res = ref . get CaMeL Assigned CaMeL Value ( ) ;
rank: 625
score: 98.9776102701823
patch: return name . is CaMeL Setter CaMeL Def ( ) ;
rank: 625
score: 98.2666015625
patch: key . continue ; }
rank: 625
score: 98.19014485677083
patch: continue null ; * /
rank: 625
score: 98.18532307942708
patch: * ; if continue ;
rank: 625
score: 97.9336446126302
patch: if ( continue || ;
rank: 626
score: 98.98776041666666
patch: return parent . is CaMeL Inlinable CaMeL Object ( name ) ;
rank: 626
score: 98.50718688964844
patch: return ) ;
rank: 626
score: 98.26682535807292
patch: else { return true ;
rank: 626
score: 98.26511637369792
patch: } continue ; } ;
rank: 626
score: 98.18389892578125
patch: return ; ; continue ;
rank: 626
score: 97.93106689453126
patch: do { continue ;
rank: 626
score: 97.78798217773438
patch: result if continue ;
rank: 627
score: 98.96456909179688
patch: return this . is CaMeL Getter CaMeL Def ( ) ;
rank: 627
score: 98.78735961914063
patch: if ( name . equals ( ) ) {
rank: 627
score: 98.26478068033855
patch: ++ continue ; continue ;
rank: 627
score: 98.18775431315105
patch: ; * / ; ;
rank: 627
score: 98.1831563313802
patch: } else = true ;
rank: 627
score: 97.78589477539063
patch: try if continue ;
rank: 628
score: 98.9824688251202
patch: state = ref . get CaMeL Assigned CaMeL Value ( ) ;
rank: 628
score: 98.96282958984375
patch: return ! is CaMeL Statement CaMeL Block ( name ) ;
rank: 628
score: 98.78722466362848
patch: for ( Reference name : refs ) {
rank: 628
score: 98.50222778320312
patch: return true ; } return true ;
rank: 628
score: 98.26332600911458
patch: continue { if null {
rank: 628
score: 98.2626241048177
patch: return Boolean . false ;
rank: 628
score: 98.18082682291667
patch: return continue - 1 ;
rank: 628
score: 97.78560791015624
patch: continue ; ; try
rank: 629
score: 98.98139299665179
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs (
rank: 629
score: 98.77948676215277
patch: if ( ! child CaMeL Value ) {
rank: 629
score: 98.49774169921875
patch: Preconditions . return true ;
rank: 629
score: 98.26188151041667
patch: continue continue continue ; ;
rank: 629
score: 98.26124064127605
patch: if ( ! ) {
rank: 629
score: 97.92855834960938
patch: continue value . if ;
rank: 629
score: 97.78314208984375
patch: continue ; ; else
rank: 630
score: 98.98115678267045
patch: return ref . is CaMeL Getter CaMeL Def ( )
rank: 630
score: 98.75507269965277
patch: return name . equals ( name ) ;
rank: 630
score: 98.49700317382812
patch: ref . continue ;
rank: 630
score: 98.26168823242188
patch: while null ; continue ;
rank: 630
score: 98.25673421223958
patch: } ret = true ;
rank: 630
score: 98.18346150716145
patch: if ( name == ;
rank: 630
score: 97.92774454752605
patch: if ( continue ( ;
rank: 630
score: 97.7828857421875
patch: buffer ; continue ;
rank: 631
score: 98.97994290865384
patch: break = ref . get CaMeL Assigned CaMeL Value ( ) ;
rank: 631
score: 98.260498046875
patch: else { } continue ;
rank: 631
score: 98.2556864420573
patch: return ret . false ;
rank: 631
score: 98.18269856770833
patch: ; * continue ; }
rank: 631
score: 97.7820556640625
patch: do if continue ;
rank: 632
score: 98.49318150111607
patch: gramps . return false ;
rank: 632
score: 98.26025390625
patch: continue continue ; /
rank: 632
score: 98.25340779622395
patch: else ret = true ;
rank: 632
score: 98.18229166666667
patch: continue target . * /
rank: 632
score: 98.17709350585938
patch: return null ; break ;
rank: 632
score: 97.92220052083333
patch: finally if ( continue )
rank: 632
score: 97.77452392578125
patch: return ; break ;
rank: 633
score: 98.95228160511364
patch: return $STRING$ . is CaMeL Call ( name ) ;
rank: 633
score: 98.4897232055664
patch: ret = false ; return false ;
rank: 633
score: 98.259619140625
patch: if continue continue ;
rank: 633
score: 98.2431131998698
patch: return ) ? false ;
rank: 633
score: 98.17814127604167
patch: continue make . * /
rank: 633
score: 97.7735366821289
patch: while continue ;
rank: 634
score: 98.97455240885417
patch: return parent . get CaMeL First CaMeL Child ( ) == parent ) ;
rank: 634
score: 98.72797393798828
patch: return is CaMeL Call ( ) ;
rank: 634
score: 98.48389434814453
patch: Preconditions . ret = false ; }
rank: 634
score: 98.25757853190105
patch: } if continue ; ;
rank: 634
score: 98.24295043945312
patch: assignment . return true ;
rank: 634
score: 98.17581176757812
patch: return false ; return ;
rank: 634
score: 97.92086791992188
patch: throw new ; } }
rank: 634
score: 97.7718505859375
patch: if continue ; try
rank: 635
score: 98.97379244290866
patch: return gramps . get CaMeL First CaMeL Child ( ) .
rank: 635
score: 98.94773356119792
patch: return value . is CaMeL Statement CaMeL Block ( ) ;
rank: 635
score: 98.71769883897569
patch: return refs . equals ( name ) ;
rank: 635
score: 98.24183146158855
patch: LOG . throw true ;
rank: 635
score: 97.92038981119792
patch: throw new ; } else
rank: 635
score: 97.77001953125
patch: return else continue ;
rank: 636
score: 98.97179361979167
patch: return is CaMeL Var CaMeL Or CaMeL Assign CaMeL Expr CaMeL Lhs ( name
rank: 636
score: 98.9424540201823
patch: return gramps . is CaMeL Var ( name ) ;
rank: 636
score: 98.48004150390625
patch: ret = true ; return false ;
rank: 636
score: 98.25687662760417
patch: if null true continue ;
rank: 636
score: 98.23521931966145
patch: System . return true ;
rank: 636
score: 98.17482503255208
patch: if ( ; ; ;
rank: 636
score: 97.91900634765625
patch: this continue ;
rank: 636
score: 97.76615905761719
patch: return ; {
rank: 637
score: 98.970703125
patch: return parent . get CaMeL First CaMeL Child ( ) == name ) ;
rank: 637
score: 98.705322265625
patch: for ( Reference ref : refs )
rank: 637
score: 98.2333984375
patch: ret = return false ;
rank: 637
score: 98.17403157552083
patch: continue - $NUMBER$ ; }
rank: 637
score: 98.17259521484375
patch: } for continue ;
rank: 638
score: 98.96951059194711
patch: return parent . is CaMeL Get CaMeL Prop ( ) ) {
rank: 638
score: 98.25634765625
patch: } ; continue continue ;
rank: 638
score: 98.23158772786458
patch: return true ; break ;
rank: 638
score: 98.1730448404948
patch: continue [ ] = ;
rank: 638
score: 97.76068115234375
patch: continue ; ; {
rank: 639
score: 98.96857158954327
patch: continue = parent . get CaMeL First CaMeL Child ( ) ;
rank: 639
score: 98.93832397460938
patch: return ! is CaMeL Getter CaMeL Def ( name ) ;
rank: 639
score: 98.47049560546876
patch: return ret ) ;
rank: 639
score: 98.25538126627605
patch: continue ; if null {
rank: 639
score: 98.16959635416667
patch: } else for continue ;
rank: 639
score: 97.91759643554687
patch: final continue ; }
rank: 640
score: 98.93658447265625
patch: return module . is CaMeL Statement CaMeL Block ( ) ;
rank: 640
score: 98.46688079833984
patch: return new ? false : false ;
rank: 640
score: 98.25506591796875
patch: } value ; continue ;
rank: 640
score: 98.22821044921875
patch: continue } return true ;
rank: 640
score: 98.16884358723958
patch: * * if continue ;
rank: 640
score: 97.91710408528645
patch: if ( continue not ;
rank: 640
score: 97.73541870117188
patch: out ; continue ;
rank: 641
score: 98.96720064603366
patch: ctor = ref . get CaMeL First CaMeL Child ( ) ;
rank: 641
score: 98.93381754557292
patch: return ref . get CaMeL Value ( ) == null ;
rank: 641
score: 98.22470092773438
patch: return ret + false ;
rank: 641
score: 98.1698710123698
patch: continue ; / / ;
rank: 641
score: 98.1687723795573
patch: } } return false ;
rank: 642
score: 98.93367513020833
patch: return VAR . is CaMeL Statement CaMeL Block ( ) ;
rank: 642
score: 98.68471950954861
patch: return . is CaMeL Call ( ) ;
rank: 642
score: 98.45948028564453
patch: return true ; } return ret ;
rank: 642
score: 98.25414021809895
patch: result ; continue ; ;
rank: 642
score: 98.16895548502605
patch: * / continue ; }
rank: 642
score: 98.16825358072917
patch: return ( ! continue ;
rank: 642
score: 97.71675415039063
patch: continue ; logger ;
rank: 643
score: 98.93294270833333
patch: return $STRING$ . is CaMeL Getter CaMeL Def ( ) ;
rank: 643
score: 98.25332641601562
patch: try { break ; }
rank: 643
score: 98.22095743815105
patch: return ret ? false ;
rank: 643
score: 98.16615804036458
patch: continue ; node = ;
rank: 643
score: 97.715576171875
patch: count ; continue ;
rank: 644
score: 98.96537272135417
patch: return ( ref . is CaMeL Getter CaMeL Def ( )
rank: 644
score: 98.66795518663194
patch: is CaMeL Getter CaMeL Def ( ) {
rank: 644
score: 98.21593627929687
patch: throw null ; }
rank: 644
score: 98.16725667317708
patch: break ; return false ;
rank: 644
score: 97.91272989908855
patch: is CaMeL Set continue ;
rank: 644
score: 97.70832061767578
patch: break ; ;
rank: 645
score: 98.9643085186298
patch: node = ref . get CaMeL First CaMeL Child ( ) ;
rank: 645
score: 98.92338423295455
patch: return is CaMeL Get CaMeL Prop ( ) ) ;
rank: 645
score: 98.25276692708333
patch: while ( continue ; ;
rank: 645
score: 98.21571858723958
patch: return Boolean . FALSE ;
rank: 645
score: 98.16629028320312
patch: } if ; break ;
rank: 645
score: 98.16482543945312
patch: return true ; * /
rank: 645
score: 97.9113057454427
patch: if ( continue ++ ;
rank: 645
score: 97.706201171875
patch: error ; continue ;
rank: 646
score: 98.9609375
patch: loop = ref . get CaMeL First CaMeL Child ( ) ;
rank: 646
score: 98.65235731336806
patch: for ( Node ref : refs ) {
rank: 646
score: 98.44537353515625
patch: Preconditions . return false ; }
rank: 646
score: 98.25233968098958
patch: } * continue ; ;
rank: 646
score: 98.21314697265625
patch: return ! false ;
rank: 646
score: 98.16518147786458
patch: * * / if ;
rank: 646
score: 98.16382853190105
patch: continue * * ; }
rank: 646
score: 97.91039021809895
patch: sb . append ( ;
rank: 646
score: 97.70340576171876
patch: found ; continue ;
rank: 647
score: 98.9595947265625
patch: return Node CaMeL Util . is CaMeL Get CaMeL Prop ( name ) ;
rank: 647
score: 98.64076741536458
patch: is CaMeL Get CaMeL Prop ( ) {
rank: 647
score: 98.25179036458333
patch: } / * continue ;
rank: 647
score: 98.21105346679687
patch: if ( ) {
rank: 647
score: 98.16245524088542
patch: do { if ( ;
rank: 647
score: 97.69929809570313
patch: ; continue ; ;
rank: 648
score: 98.95951021634616
patch: argument = ref . get CaMeL First CaMeL Child ( ) ;
rank: 648
score: 98.6384506225586
patch: if ( parent != null ) {
rank: 648
score: 98.21004231770833
patch: e . return false ;
rank: 648
score: 98.16245524088542
patch: ; ret = false ;
rank: 648
score: 97.90922037760417
patch: if ;
rank: 649
score: 98.95846792367789
patch: head = ref . get CaMeL First CaMeL Child ( ) ;
rank: 649
score: 98.25016276041667
patch: if null ? continue ;
rank: 649
score: 98.16043701171876
patch: continue * break ;
rank: 649
score: 98.15983276367187
patch: . * / ;
rank: 649
score: 97.907958984375
patch: continue false * * /
rank: 649
score: 97.688525390625
patch: return ; / /
rank: 650
score: 98.9578125
patch: return ( parent . is CaMeL Call ( )
rank: 650
score: 98.63205295138889
patch: if ( ) { return false ; }
rank: 650
score: 98.42318289620536
patch: ret = true ; continue ;
rank: 650
score: 98.24828084309895
patch: for false ; continue ;
rank: 650
score: 98.20707397460937
patch: return return true ;
rank: 650
score: 98.159326171875
patch: while ( ; )
rank: 650
score: 97.9069112141927
patch: if ( continue default )
rank: 650
score: 97.68814086914062
patch: default ; continue ;
rank: 651
score: 98.88466186523438
patch: return type . is CaMeL Call ( ) ;
rank: 651
score: 98.24745686848958
patch: next ( ; continue ;
rank: 651
score: 98.20274353027344
patch: / * /
rank: 651
score: 98.15985107421875
patch: } return ! continue ;
rank: 651
score: 98.15918986002605
patch: if ( this . ;
rank: 651
score: 97.90631103515625
patch: if ( ; finally {
rank: 652
score: 98.9553555575284
patch: if ( gramps . is CaMeL Call ( )
rank: 652
score: 98.41652134486607
patch: break ; } return false ;
rank: 652
score: 98.20176188151042
patch: continue ? return false ;
rank: 652
score: 98.15956624348958
patch: = continue ; continue ;
rank: 652
score: 98.15663655598958
patch: continue ; size = ;
rank: 652
score: 97.90627034505208
patch: continue . if ( ;
rank: 652
score: 97.68526611328124
patch: end ; continue ;
rank: 653
score: 98.87201538085938
patch: return $STRING$ . is CaMeL Call ( ) ;
rank: 653
score: 98.39902750651042
patch: return ret : false ;
rank: 653
score: 98.24596150716145
patch: / else if continue ;
rank: 653
score: 98.2016092936198
patch: if ( ret ) {
rank: 653
score: 98.15568237304687
patch: continue this ; }
rank: 653
score: 97.90526326497395
patch: if ( ; break )
rank: 653
score: 97.6834228515625
patch: true ; continue ;
rank: 654
score: 98.62275913783482
patch: / * / return false ;
rank: 654
score: 98.15807088216145
patch: continue * break ; }
rank: 654
score: 98.15496826171875
patch: this . * continue ;
rank: 655
score: 98.95200020926339
patch: super . is CaMeL Inlinable CaMeL Object ( name ) {
rank: 655
score: 98.87034301757812
patch: return name . is CaMeL Empty ( ) ;
rank: 655
score: 98.39373779296875
patch: / * ret = false ;
rank: 655
score: 98.24498291015625
patch: / else continue ;
rank: 655
score: 98.1982930501302
patch: result = return false ;
rank: 655
score: 98.15760294596355
patch: return false - continue ;
rank: 655
score: 98.15421549479167
patch: continue - - 1 ;
rank: 655
score: 97.6745849609375
patch: return ; System ;
rank: 656
score: 98.60848563058036
patch: ) { return false ; }
rank: 656
score: 98.24452718098958
patch: catch this . continue ;
rank: 656
score: 98.19639078776042
patch: LOG . return true ;
rank: 656
score: 98.15592041015626
patch: { return continue ;
rank: 656
score: 98.15305582682292
patch: return true ; } ;
rank: 656
score: 97.9009501139323
patch: if ( ; ret )
rank: 656
score: 97.6726318359375
patch: return ; * /
rank: 657
score: 98.94887869698661
patch: return gramps . get CaMeL First CaMeL Child ( ) == parent
rank: 657
score: 98.85465698242187
patch: return gramps . contains ( name ) ;
rank: 657
score: 98.39073835100446
patch: gramps . return true ;
rank: 657
score: 98.2439473470052
patch: if ( continue true ;
rank: 657
score: 98.19530232747395
patch: if ( false ) {
rank: 657
score: 98.15303548177083
patch: ; * / return ;
rank: 657
score: 97.89943237304688
patch: cfw . continue ;
rank: 657
score: 97.67075805664062
patch: / * continue /
rank: 658
score: 98.2431131998698
patch: finally { break ; }
rank: 658
score: 98.19462076822917
patch: return ret . true ;
rank: 658
score: 98.153564453125
patch: return false continue ;
rank: 658
score: 97.89923095703125
patch: this return false ;
rank: 658
score: 97.6665771484375
patch: * ; continue ;
rank: 659
score: 98.9481670673077
patch: return ( parent . get CaMeL First CaMeL Child ( ) ==
rank: 659
score: 98.84510387073864
patch: ret = parent . get CaMeL Parent ( ) ;
rank: 659
score: 98.3886474609375
patch: Preconditions . continue ;
rank: 659
score: 98.24168904622395
patch: } continue ; / /
rank: 659
score: 98.15346272786458
patch: if ; * * /
rank: 659
score: 98.14892578125
patch: continue - 1 ; ;
rank: 659
score: 97.89666748046875
patch: if ; if ( ;
rank: 659
score: 97.66544189453126
patch: c ; continue ;
rank: 660
score: 98.9461200420673
patch: loop = ref . get CaMeL Assigned CaMeL Value ( ) ;
rank: 660
score: 98.383544921875
patch: / * ret = true ;
rank: 660
score: 98.24100748697917
patch: key . continue ; ;
rank: 660
score: 98.19108072916667
patch: synchronized ( refs ) {
rank: 660
score: 98.14860026041667
patch: continue . default * /
rank: 660
score: 97.8963394165039
patch: continue . .
rank: 660
score: 97.66541137695313
patch: throw continue ; }
rank: 661
score: 98.24100748697917
patch: else ; continue continue ;
rank: 661
score: 98.19046630859376
patch: throw false ; }
rank: 661
score: 98.15194091796874
patch: return - 1 ;
rank: 661
score: 98.14781188964844
patch: this . ;
rank: 661
score: 97.66529541015625
patch: continue ; ; return
rank: 662
score: 98.94512469951923
patch: continue = parent . get CaMeL Assigned CaMeL Value ( ) ;
rank: 662
score: 98.17390950520833
patch: return ) ? true ;
rank: 662
score: 98.14678955078125
patch: ; ; return false ;
rank: 662
score: 97.89393107096355
patch: Thread . sleep ( ;
rank: 662
score: 97.66044311523437
patch: e ; continue ;
rank: 663
score: 98.94410196940105
patch: return ( parent . is CaMeL Call ( ) ) ;
rank: 663
score: 98.23707275390625
patch: v . continue ;
rank: 663
score: 98.17238362630208
patch: continue ) return false ;
rank: 663
score: 98.14881591796875
patch: { return false ;
rank: 663
score: 98.13846842447917
patch: ; finally { ; }
rank: 663
score: 97.89037475585937
patch: continue || continue ;
rank: 663
score: 97.65861206054687
patch: * if continue ;
rank: 664
score: 98.94294956752232
patch: switch ( gramps . get CaMeL First CaMeL Child ( ) )
rank: 664
score: 98.2362060546875
patch: else continue ; } ;
rank: 664
score: 98.1707763671875
patch: else return ret ;
rank: 664
score: 98.1476338704427
patch: return * * continue ;
rank: 664
score: 98.13791910807292
patch: continue * / } ;
rank: 664
score: 97.88980102539062
patch: continue *= $NUMBER$ ;
rank: 664
score: 97.65528564453125
patch: if ; / /
rank: 665
score: 98.5704574584961
patch: if ( parent == null ) {
rank: 665
score: 98.23560587565105
patch: for new $STRING$ continue ;
rank: 665
score: 98.14556884765625
patch: continue return continue ; }
rank: 665
score: 98.1354248046875
patch: synchronized ( ; )
rank: 665
score: 97.65527954101563
patch: finally ; continue ;
rank: 666
score: 98.94178118024554
patch: return ( gramps . get CaMeL First CaMeL Child ( ) ==
rank: 666
score: 98.56766183035714
patch: / / * * * /
rank: 666
score: 98.235302734375
patch: else return continue ;
rank: 666
score: 98.16305541992188
patch: if ( true ) {
rank: 666
score: 98.14551798502605
patch: * * continue / }
rank: 666
score: 97.880126953125
patch: Object continue = continue ;
rank: 667
score: 98.94017615685097
patch: return gramps . get CaMeL First CaMeL Child ( ) !=
rank: 667
score: 98.23365275065105
patch: try { continue ; *
rank: 667
score: 98.16226196289062
patch: Node ref = null ;
rank: 667
score: 98.14436848958333
patch: return ; return true ;
rank: 667
score: 98.1341552734375
patch: if ( parent ;
rank: 667
score: 97.64039306640625
patch: super ; continue ;
rank: 668
score: 98.93837193080357
patch: return ! gramps . is CaMeL Get CaMeL Prop ( ) ;
rank: 668
score: 98.36576625279018
patch: Preconditions . ret = true ;
rank: 668
score: 98.23295084635417
patch: } * * continue {
rank: 668
score: 98.1428731282552
patch: return ; , continue ;
rank: 668
score: 98.13364664713542
patch: if ( ! ; ;
rank: 668
score: 97.8751932779948
patch: this if ( continue )
rank: 668
score: 97.63662109375
patch: if ; System ;
rank: 669
score: 98.7840087890625
patch: return locale . is CaMeL Call ( ) ;
rank: 669
score: 98.55385916573661
patch: Preconditions . error ( ) ;
rank: 669
score: 98.23256429036458
patch: return new continue ; ;
rank: 669
score: 98.15990193684895
patch: parent . return true ;
rank: 669
score: 98.1426493326823
patch: continue * continue / }
rank: 669
score: 98.13363037109374
patch: continue * ; ;
rank: 669
score: 97.86846313476562
patch: continue value = ;
rank: 669
score: 97.63336791992188
patch: return return continue ;
rank: 670
score: 98.93365478515625
patch: return gramps . is CaMeL Call ( ) ) {
rank: 670
score: 98.36346435546875
patch: return new Object ( ) {
rank: 670
score: 98.23241170247395
patch: the continue ; continue ;
rank: 670
score: 98.15713500976562
patch: switch ( name ) {
rank: 670
score: 98.14199829101562
patch: * * continue continue ;
rank: 670
score: 98.13309733072917
patch: continue * ; * /
rank: 670
score: 97.86746215820312
patch: show continue ;
rank: 670
score: 97.63291015625
patch: return ; if ;
rank: 671
score: 98.93279157366071
patch: res = gramps . get CaMeL First CaMeL Child ( ) ;
rank: 671
score: 98.54955291748047
patch: This . { return false ; }
rank: 671
score: 98.23234049479167
patch: try { continue true ;
rank: 671
score: 98.1569315592448
patch: try { throw null ;
rank: 671
score: 98.13289388020833
patch: Object ; if ( ;
rank: 671
score: 97.6305160522461
patch: continue ; int
rank: 672
score: 98.9317626953125
patch: return gramps . is CaMeL Get CaMeL Prop ( ) ) ;
rank: 672
score: 98.54692731584821
patch: return false ; / * /
rank: 672
score: 98.23143310546875
patch: catch ( $STRING$ ;
rank: 672
score: 98.14158121744792
patch: * continue * * /
rank: 672
score: 98.13260498046876
patch: continue null ; ;
rank: 672
score: 97.86341552734375
patch: continue throw new ;
rank: 672
score: 97.62283325195312
patch: return this ;
rank: 673
score: 98.93138538707386
patch: return gramps . is CaMeL Call ( ) {
rank: 673
score: 98.75999145507812
patch: return ! is CaMeL Var ( name ) ;
rank: 673
score: 98.54248046875
patch: if ( is CaMeL Var ) {
rank: 673
score: 98.23047892252605
patch: if false false continue ;
rank: 673
score: 98.15345255533855
patch: return ret + true ;
rank: 673
score: 98.14122517903645
patch: return is CaMeL Local ;
rank: 673
score: 97.86061401367188
patch: continue false this ;
rank: 673
score: 97.61055908203124
patch: m ; continue ;
rank: 674
score: 98.34956577845982
patch: break ; } return true ;
rank: 674
score: 98.22998046875
patch: next new continue ;
rank: 674
score: 98.1527099609375
patch: log ( ) ;
rank: 674
score: 98.13027954101562
patch: continue null * / ;
rank: 674
score: 97.860400390625
patch: value = continue ;
rank: 675
score: 98.75634765625
patch: return ! is CaMeL Statement ( name ) ;
rank: 675
score: 98.53639439174107
patch: ret = false ; break ;
rank: 675
score: 98.15089925130208
patch: / / return true ;
rank: 676
score: 98.75301784939236
patch: return ! is CaMeL Empty ( ) ;
rank: 676
score: 98.53530447823661
patch: return true ; break ; }
rank: 676
score: 98.2294921875
patch: return ( continue ; ;
rank: 676
score: 98.14996337890625
patch: finally { return false ;
rank: 676
score: 98.12788899739583
patch: / ; * continue ;
rank: 676
score: 97.85537719726562
patch: continue throws continue ;
rank: 676
score: 97.60694580078125
patch: continue ; log ;
rank: 677
score: 98.92296491350446
patch: super . is CaMeL Inlinable CaMeL Object ( ref ) ;
rank: 677
score: 98.229296875
patch: for new continue ;
rank: 677
score: 98.1395975748698
patch: continue false if continue ;
rank: 677
score: 98.12626139322917
patch: Collections . sort ( ;
rank: 677
score: 97.60570068359375
patch: continue ; out ;
rank: 678
score: 98.91941481370192
patch: if ( gramps . get CaMeL First CaMeL Child ( )
rank: 678
score: 98.53229522705078
patch: if ( name == null ) {
rank: 678
score: 98.22877197265625
patch: continue ; try ;
rank: 678
score: 98.14728393554688
patch: throw true ; }
rank: 678
score: 97.83909912109375
patch: if ( error )
rank: 679
score: 98.9180908203125
patch: state = parent . get CaMeL First CaMeL Child ( ) ;
rank: 679
score: 98.73248969184027
patch: ret = is CaMeL Statement ( ) ;
rank: 679
score: 98.228173828125
patch: default { continue ;
rank: 679
score: 98.12325032552083
patch: synchronized ( continue ; }
rank: 679
score: 97.59303283691406
patch: return ; /
rank: 680
score: 98.34498814174107
patch: return ret ; return false ;
rank: 680
score: 98.22789510091145
patch: else continue continue ; }
rank: 680
score: 98.14628092447917
patch: } } return true ;
rank: 680
score: 97.836376953125
patch: continue value continue ;
rank: 681
score: 98.71702745225694
patch: return refs . contains ( name ) ;
rank: 681
score: 98.34328787667411
patch: continue ; else return false ;
rank: 681
score: 98.22730509440105
patch: for continue ; ; ;
rank: 681
score: 98.14585367838542
patch: continue ; } / /
rank: 681
score: 98.13634236653645
patch: return is CaMeL All ;
rank: 681
score: 98.1221923828125
patch: continue ; * ; ;
rank: 681
score: 97.8283203125
patch: continue default * /
rank: 681
score: 97.56559753417969
patch: if ; continue
rank: 682
score: 98.91597806490384
patch: argument = ref . get CaMeL Assigned CaMeL Value ( ) ;
rank: 682
score: 98.13404337565105
patch: * * ; continue ;
rank: 682
score: 98.12191772460938
patch: continue . * / }
rank: 682
score: 97.82745361328125
patch: continue false . }
rank: 682
score: 97.5606460571289
patch: m continue ;
rank: 683
score: 98.91580810546876
patch: return gramps . is CaMeL Call ( )
rank: 683
score: 98.34259905133929
patch: Preconditions . return true ; }
rank: 683
score: 98.22545776367187
patch: text . continue ;
rank: 683
score: 98.1422607421875
patch: ret = ret ;
rank: 683
score: 98.13333129882812
patch: return false - 0 ;
rank: 683
score: 98.11807250976562
patch: throw new continue ; }
rank: 683
score: 97.82614135742188
patch: continue false , ;
rank: 683
score: 97.54609680175781
patch: continue ; *
rank: 684
score: 98.91463797433036
patch: continue . if ( parent . is CaMeL Call ( ) ) {
rank: 684
score: 98.51490783691406
patch: for ( Reference name : refs )
rank: 684
score: 98.33955601283482
patch: return false ; } ) ;
rank: 684
score: 98.2252197265625
patch: return new null ; ;
rank: 684
score: 98.14126586914062
patch: System . throw null ;
rank: 684
score: 98.13253784179688
patch: if null return continue ;
rank: 684
score: 98.1169677734375
patch: synchronized ( ; ;
rank: 684
score: 97.82597351074219
patch: continue . ;
rank: 684
score: 97.52535247802734
patch: if ; try
rank: 685
score: 98.51410675048828
patch: return false ; } / * /
rank: 685
score: 98.13992309570312
patch: result . return false ;
rank: 685
score: 98.132080078125
patch: * ; return false ;
rank: 685
score: 98.11561889648438
patch: if ( name ;
rank: 685
score: 97.81857299804688
patch: continue value ;
rank: 685
score: 97.52410888671875
patch: long continue ;
rank: 686
score: 98.910400390625
patch: continue + gramps . get CaMeL First CaMeL Child ( ) ;
rank: 686
score: 98.3300272623698
patch: gramps . continue ;
rank: 686
score: 98.22267659505208
patch: else continue ; / /
rank: 686
score: 98.13175048828126
patch: } } if ;
rank: 686
score: 98.11515299479167
patch: continue null ; } ;
rank: 686
score: 97.8177001953125
patch: continue ; } finally
rank: 687
score: 98.9088885967548
patch: head = ref . get CaMeL Assigned CaMeL Value ( ) ;
rank: 687
score: 98.22238159179688
patch: next continue ; continue ;
rank: 687
score: 98.13683064778645
patch: literal . return false ;
rank: 687
score: 98.1146240234375
patch: continue ; index = ;
rank: 687
score: 97.81732177734375
patch: if ; }
rank: 687
score: 97.5060806274414
patch: continue ; set
rank: 688
score: 98.90886981670673
patch: node = ref . get CaMeL Assigned CaMeL Value ( ) ;
rank: 688
score: 98.3269551595052
patch: continue : return false ;
rank: 688
score: 98.2220458984375
patch: } catch new continue ;
rank: 688
score: 98.13285319010417
patch: out . return false ;
rank: 688
score: 98.13035074869792
patch: / * * continue /
rank: 688
score: 98.11432495117188
patch: continue [ ] ;
rank: 688
score: 97.81680297851562
patch: throw new ; ;
rank: 689
score: 98.90792846679688
patch: return parent . is CaMeL Get CaMeL Prop ( ) )
rank: 689
score: 98.21988932291667
patch: index . continue ; }
rank: 689
score: 98.13022867838542
patch: this . continue continue ;
rank: 689
score: 97.81663818359375
patch: continue true continue ;
rank: 689
score: 97.5042953491211
patch: return ; else
rank: 690
score: 98.32499476841518
patch: continue . return false ; }
rank: 690
score: 98.21964518229167
patch: / else ; continue ;
rank: 690
score: 98.12950642903645
patch: return false - 1 ;
rank: 690
score: 98.11964925130208
patch: return ( true ) ;
rank: 690
score: 98.11275227864583
patch: if ( parent instanceof ;
rank: 690
score: 97.8158187866211
patch: continue this .
rank: 690
score: 97.50332641601562
patch: if ; ;
rank: 691
score: 98.9069354717548
patch: break = parent . get CaMeL First CaMeL Child ( ) ;
rank: 691
score: 98.48508707682292
patch: / / * * /
rank: 691
score: 98.32386125837054
patch: throw ( int ) false ;
rank: 691
score: 98.21861775716145
patch: catch continue ; ; ;
rank: 691
score: 98.12736002604167
patch: return if ( continue ;
rank: 691
score: 97.79622802734374
patch: java . continue ;
rank: 691
score: 97.49726867675781
patch: continue ; boolean
rank: 692
score: 98.90347726004464
patch: continue . if ( gramps . is CaMeL Call ( ) )
rank: 692
score: 98.21799926757812
patch: name . continue ;
rank: 692
score: 98.12618001302083
patch: return ; continue continue ;
rank: 692
score: 98.1109619140625
patch: continue * continue * ;
rank: 692
score: 97.79494018554688
patch: final ; continue ;
rank: 693
score: 98.47742571149554
patch: Preconditions . clear ( ) ;
rank: 693
score: 98.21787109375
patch: while ( continue ;
rank: 693
score: 98.12599690755208
patch: { continue ; } }
rank: 693
score: 98.11806030273438
patch: } return ret ;
rank: 693
score: 98.1091064453125
patch: * continue * /
rank: 693
score: 97.47941589355469
patch: continue ; {
rank: 694
score: 98.90228740985577
patch: body = ref . get CaMeL Assigned CaMeL Value ( ) ;
rank: 694
score: 98.31486293247768
patch: throw ( boolean ) false ;
rank: 694
score: 98.21781412760417
patch: break { continue ; ;
rank: 694
score: 98.11715698242188
patch: log . throw false ;
rank: 694
score: 98.10874430338542
patch: / * if ( ;
rank: 694
score: 97.7890625
patch: continue ) continue ;
rank: 694
score: 97.4548110961914
patch: throw new {
rank: 695
score: 98.9019305889423
patch: inst = ref . get CaMeL Assigned CaMeL Value ( ) ;
rank: 695
score: 98.57332938058036
patch: return ) { return false ;
rank: 695
score: 98.31338065011161
patch: break ; } return ret ;
rank: 695
score: 98.21705118815105
patch: type { continue ; }
rank: 695
score: 98.1240743001302
patch: } catch ; continue ;
rank: 695
score: 98.11651611328125
patch: e . return true ;
rank: 695
score: 98.10823974609374
patch: * / ; ;
rank: 695
score: 97.78399658203125
patch: continue - break ;
rank: 695
score: 97.43589782714844
patch: new continue ;
rank: 696
score: 98.47535923549107
patch: continue / / * * /
rank: 696
score: 98.21567789713542
patch: / ; continue continue ;
rank: 696
score: 98.12401326497395
patch: } else return ret ;
rank: 696
score: 98.1075439453125
patch: synchronized ( this ; ;
rank: 696
score: 97.7808837890625
patch: continue false ( ;
rank: 696
score: 97.42010498046875
patch: if continue .
rank: 697
score: 98.89674729567308
patch: res = ref . get CaMeL First CaMeL Child ( ) ;
rank: 697
score: 98.2155049641927
patch: Set continue ; continue ;
rank: 697
score: 97.7785888671875
patch: * continue ; }
rank: 697
score: 97.41956329345703
patch: return ; *
rank: 698
score: 98.89639718191964
patch: return gramps . is CaMeL Get CaMeL Prop ( ) ) {
rank: 698
score: 98.54869079589844
patch: return refs . length != 1 ;
rank: 698
score: 98.46890694754464
patch: continue ? false : false ;
rank: 698
score: 98.30859375
patch: return ret : true ;
rank: 698
score: 98.1192626953125
patch: return this . value ;
rank: 698
score: 98.11349487304688
patch: return name == null ;
rank: 698
score: 98.10087076822917
patch: continue ; , continue ;
rank: 698
score: 97.77655029296875
patch: continue false break ;
rank: 698
score: 97.41366577148438
patch: return ; try
rank: 699
score: 98.30756487165179
patch: This pass . return false ;
rank: 699
score: 98.21439615885417
patch: synchronized new continue ; ;
rank: 699
score: 98.10042317708333
patch: System . out . ;
rank: 699
score: 97.40998840332031
patch: switch continue ;
rank: 700
score: 98.52888997395833
patch: return value == null ;
rank: 700
score: 98.30331420898438
patch: return ret ; break ;
rank: 700
score: 98.2140604654948
patch: v . continue ; }
rank: 700
score: 98.11548868815105
patch: return false + continue ;
rank: 700
score: 98.11131795247395
patch: / * return false ;
rank: 700
score: 98.09837849934895
patch: continue ; null * /
rank: 700
score: 97.76487426757812
patch: continue $NUMBER$ * /
rank: 700
score: 97.40351867675781
patch: continue ; this
rank: 701
score: 98.89285982572116
patch: switch ( parent . get CaMeL First CaMeL Child ( ) )
rank: 701
score: 98.11328125
patch: return this . has ;
rank: 701
score: 98.108154296875
patch: result return false ;
rank: 701
score: 98.09644571940105
patch: * ; * continue ;
rank: 701
score: 97.40096282958984
patch: return System ;
rank: 702
score: 98.88685960036058
patch: return ! ( parent . is CaMeL Getter CaMeL Def ( )
rank: 702
score: 98.21229044596355
patch: text . continue ; }
rank: 702
score: 98.11099243164062
patch: return type != null ;
rank: 702
score: 98.10647583007812
patch: try { return ret ;
rank: 702
score: 98.09583536783855
patch: continue ; / * *
rank: 702
score: 97.75830688476563
patch: continue = this ;
rank: 702
score: 97.39598846435547
patch: if ; ?
rank: 703
score: 98.88617412860577
patch: pos = ref . get CaMeL First CaMeL Child ( ) ;
rank: 703
score: 98.52253941127232
patch: return ! is CaMeL Var ;
rank: 703
score: 98.21110026041667
patch: } continue ; try ;
rank: 703
score: 98.10404052734376
patch: assignment return false ;
rank: 703
score: 98.09568277994792
patch: / ; if ( ;
rank: 703
score: 97.757080078125
patch: continue false )
rank: 703
score: 97.38036346435547
patch: continue ; out
rank: 704
score: 98.8847186748798
patch: ctor = ref . get CaMeL Assigned CaMeL Value ( ) ;
rank: 704
score: 98.21067301432292
patch: return null ; continue {
rank: 704
score: 98.10698852539062
patch: if ( false ;
rank: 704
score: 98.0955810546875
patch: continue ; default ; }
rank: 704
score: 97.75359497070312
patch: if ( ; else
rank: 704
score: 97.37225341796875
patch: if false ;
rank: 705
score: 98.88449096679688
patch: return gramps . is CaMeL Call ( this ) ;
rank: 705
score: 98.2911376953125
patch: ref . continue ; }
rank: 705
score: 98.20918782552083
patch: exception { continue ; }
rank: 705
score: 98.10201416015624
patch: ret return false ;
rank: 705
score: 98.09521484375
patch: continue null ; ; }
rank: 705
score: 97.75344848632812
patch: continue )
rank: 706
score: 98.20542399088542
patch: for new continue ; ;
rank: 706
score: 98.10066731770833
patch: return VAR == null ;
rank: 706
score: 98.09368896484375
patch: this . ; continue ;
rank: 706
score: 97.7518081665039
patch: continue ( ;
rank: 706
score: 97.36805725097656
patch: continue ; if
rank: 707
score: 98.50289916992188
patch: return ( name == null ) ;
rank: 707
score: 98.43031529017857
patch: for ( : refs ) {
rank: 707
score: 98.20525512695312
patch: list . continue ;
rank: 707
score: 98.10330200195312
patch: return true && continue ;
rank: 707
score: 98.1003173828125
patch: System . break ;
rank: 707
score: 98.09304809570312
patch: continue ; >= 0 ;
rank: 707
score: 97.74512939453125
patch: continue = 1 ;
rank: 707
score: 97.34991455078125
patch: return break ;
rank: 708
score: 98.87982647235577
patch: return gramps . is CaMeL Call ( ) . ) ;
rank: 708
score: 98.49878946940105
patch: ret = gramps ;
rank: 708
score: 98.429443359375
patch: / * / return true ;
rank: 708
score: 98.28281656901042
patch: return Boolean . TRUE ;
rank: 708
score: 98.20418294270833
patch: continue { ; continue ;
rank: 708
score: 98.1027119954427
patch: return is CaMeL Property ;
rank: 708
score: 98.09122721354167
patch: this . this . ;
rank: 708
score: 97.3459701538086
patch: public continue ;
rank: 709
score: 98.87894381009616
patch: continue . if ( gramps . is CaMeL Call ( )
rank: 709
score: 98.20218912760417
patch: continue { continue ; else
rank: 709
score: 98.09015502929688
patch: continue - ; }
rank: 709
score: 98.08590698242188
patch: ret = ret ; }
rank: 709
score: 97.73755645751953
patch: continue break ;
rank: 709
score: 97.31820678710938
patch: if ; else
rank: 710
score: 98.19950561523437
patch: while continue ; ;
rank: 710
score: 98.10093180338542
patch: } else while continue ;
rank: 710
score: 98.08968098958333
patch: ; if ( ; ;
rank: 710
score: 98.08562469482422
patch: return FALSE ;
rank: 710
score: 97.73712768554688
patch: parent = continue ;
rank: 710
score: 97.31678771972656
patch: continue ; do
rank: 711
score: 98.8780048076923
patch: block = ref . get CaMeL First CaMeL Child ( ) ;
rank: 711
score: 98.48065185546875
patch: ret = ! is CaMeL Var ;
rank: 711
score: 98.41739501953126
patch: / / * /
rank: 711
score: 98.10043334960938
patch: } else continue ; }
rank: 711
score: 98.08953857421875
patch: continue ; target = ;
rank: 711
score: 98.08538055419922
patch: return $STRING$ ;
rank: 711
score: 97.73700561523438
patch: continue false * ;
rank: 712
score: 98.87699068509616
patch: return ref . is CaMeL Getter CaMeL Def ( ref ) ;
rank: 712
score: 98.41526576450893
patch: return false ; * * /
rank: 712
score: 98.09988403320312
patch: } else / * /
rank: 712
score: 98.08926391601562
patch: continue : / * ;
rank: 712
score: 97.7287109375
patch: continue false ; ;
rank: 712
score: 97.31486511230469
patch: do continue ;
rank: 713
score: 98.18871459960937
patch: continue ; ; *
rank: 713
score: 98.09885660807292
patch: return continue continue continue ;
rank: 713
score: 98.08873494466145
patch: continue false ; * /
rank: 713
score: 98.08180541992188
patch: result = ret ;
rank: 713
score: 97.72806396484376
patch: continue = $NUMBER$ ;
rank: 713
score: 97.29967498779297
patch: if continue +
rank: 714
score: 98.40237862723214
patch: ret = true ; break ;
rank: 714
score: 98.18844604492188
patch: continue continue ; *
rank: 714
score: 98.09611002604167
patch: continue * while continue ;
rank: 714
score: 98.08681233723958
patch: continue * ; } ;
rank: 714
score: 98.07286580403645
patch: synchronized ( true ) {
rank: 714
score: 97.7250244140625
patch: continue false . ;
rank: 714
score: 97.29835510253906
patch: continue ; continue
rank: 715
score: 98.44747488839286
patch: ref . ret = false ;
rank: 715
score: 98.40079171316964
patch: Preconditions . check ( ) ;
rank: 715
score: 98.09541320800781
patch: } else ;
rank: 715
score: 98.08558146158855
patch: * / return ; }
rank: 715
score: 98.07239786783855
patch: result = gramps ;
rank: 715
score: 97.72405395507812
patch: Util . continue ;
rank: 715
score: 97.29684448242188
patch: continue
rank: 716
score: 98.39988199869792
patch: { return true ; }
rank: 716
score: 98.1762939453125
patch: warn . continue ;
rank: 716
score: 98.09251912434895
patch: continue * false * /
rank: 716
score: 98.08317260742187
patch: continue : * /
rank: 716
score: 98.07008056640625
patch: return throw false ;
rank: 716
score: 97.72249145507813
patch: continue parent . ;
rank: 716
score: 97.2960713704427
patch: System ;
rank: 717
score: 98.86500040690105
patch: return ( parent . get CaMeL First CaMeL Child ( )
rank: 717
score: 98.23801676432292
patch: Preconditions . return ret ;
rank: 717
score: 98.17203369140626
patch: key { continue ;
rank: 717
score: 98.0913798014323
patch: continue - continue ; }
rank: 717
score: 98.07080078125
patch: continue new ;
rank: 717
score: 98.06829833984375
patch: return ret ? true ;
rank: 717
score: 97.72005462646484
patch: add continue ;
rank: 717
score: 97.29362487792969
patch: ! continue ;
rank: 718
score: 98.86440022786458
patch: return parent . get CaMeL First CaMeL Child ( ) ==
rank: 718
score: 98.39780680338542
patch: This . return false ;
rank: 718
score: 98.08876546223958
patch: return false continue ; }
rank: 718
score: 98.068798828125
patch: continue code . ;
rank: 718
score: 98.06446533203125
patch: false return false ;
rank: 718
score: 97.2862777709961
patch: return * ;
rank: 719
score: 98.8595303622159
patch: return parent . is CaMeL Call ( ) ) ;
rank: 719
score: 98.39372907366071
patch: return true ; / * /
rank: 719
score: 98.2344258626302
patch: return Boolean . null ;
rank: 719
score: 98.16929321289062
patch: Assert . continue ;
rank: 719
score: 98.08852132161458
patch: } return continue ; }
rank: 719
score: 97.71676025390624
patch: finally continue ; }
rank: 720
score: 98.85931951349431
patch: super . is CaMeL Getter CaMeL Def ( ) {
rank: 720
score: 98.43115234375
patch: return contains ( name ) ;
rank: 720
score: 98.23429361979167
patch: ex . return false ;
rank: 720
score: 98.166357421875
patch: c . continue ;
rank: 720
score: 98.0636962890625
patch: this ; * /
rank: 720
score: 97.7134033203125
patch: Disposer . continue ;
rank: 720
score: 97.27857971191406
patch: if continue =
rank: 721
score: 98.85928344726562
patch: return ( parent . is CaMeL Get CaMeL Prop ( )
rank: 721
score: 98.39008440290179
patch: / / / * * /
rank: 721
score: 98.16483154296876
patch: state . continue ;
rank: 721
score: 98.08538818359375
patch: if ; continue continue ;
rank: 721
score: 98.0565414428711
patch: / * ;
rank: 721
score: 98.05490112304688
patch: return get CaMeL Var CaMeL
rank: 721
score: 97.70033569335938
patch: resolved = true ;
rank: 721
score: 97.277587890625
patch: if null ;
rank: 722
score: 98.85850941051136
patch: return ! parent . is CaMeL Call ( ) ;
rank: 722
score: 98.42793782552083
patch: continue ref . continue ;
rank: 722
score: 98.16428833007812
patch: continue { try ;
rank: 722
score: 98.05650024414062
patch: / * ; ;
rank: 722
score: 98.04976399739583
patch: return false ; else {
rank: 722
score: 97.27409362792969
patch: if ; /
rank: 723
score: 98.16263427734376
patch: next . continue ;
rank: 723
score: 98.08449300130208
patch: return continue ; return ;
rank: 723
score: 98.0440673828125
patch: error return false ;
rank: 723
score: 97.69599609375
patch: synchronized ( init )
rank: 723
score: 97.26921081542969
patch: return logger ;
rank: 724
score: 98.8570556640625
patch: continue && gramps . is CaMeL Call ( ) ;
rank: 724
score: 98.38581194196429
patch: ) { return true ; }
rank: 724
score: 98.08396402994792
patch: continue * continue continue ;
rank: 724
score: 98.051611328125
patch: continue ; / *
rank: 724
score: 97.69449462890626
patch: add CaMeL Value ;
rank: 724
score: 97.26882934570312
patch: return super ;
rank: 725
score: 98.42029680524554
patch: ret = is CaMeL Var ;
rank: 725
score: 98.3843505859375
patch: continue / * /
rank: 725
score: 98.15784912109375
patch: return new null ;
rank: 725
score: 98.08286539713542
patch: case null || continue ;
rank: 725
score: 98.0402587890625
patch: error = false ;
rank: 725
score: 97.691162109375
patch: continue null .
rank: 725
score: 97.25935363769531
patch: return ; int
rank: 726
score: 98.85365804036458
patch: throw parent . get CaMeL First CaMeL Child ( ) ;
rank: 726
score: 98.1577880859375
patch: cached . continue ;
rank: 726
score: 98.0816650390625
patch: continue * * continue /
rank: 726
score: 98.03856201171875
patch: ret = null ;
rank: 726
score: 98.03682861328124
patch: synchronized ( this ;
rank: 726
score: 97.69091796875
patch: continue node . ;
rank: 726
score: 97.25880432128906
patch: return / ;
rank: 727
score: 98.21573893229167
patch: continue ? return true ;
rank: 727
score: 98.1555908203125
patch: value continue ; ;
rank: 727
score: 98.08052571614583
patch: return continue ; } ;
rank: 727
score: 98.0368896484375
patch: return false ; else
rank: 727
score: 97.69054412841797
patch: continue false ,
rank: 727
score: 97.25757598876953
patch: System ; ;
rank: 728
score: 98.15323486328126
patch: catch null continue ;
rank: 728
score: 98.08004760742188
patch: return false && break ;
rank: 728
score: 98.03304443359374
patch: System . out .
rank: 728
score: 97.25335693359375
patch: if ; *
rank: 729
score: 98.84552001953125
patch: System . out . println ( $STRING$ ) ;
rank: 729
score: 98.4091084798177
patch: return n != null ;
rank: 729
score: 98.21405029296875
patch: break ; }
rank: 729
score: 97.68539428710938
patch: set continue ;
rank: 729
score: 97.25315348307292
patch: / ;
rank: 730
score: 98.40557861328125
patch: continue ref . return false ;
rank: 730
score: 98.07574462890625
patch: continue continue ; } }
rank: 730
score: 98.02861938476562
patch: continue . * ;
rank: 730
score: 98.02484741210938
patch: true return false ;
rank: 731
score: 98.8336893717448
patch: if ( parent . get CaMeL First CaMeL Child ( )
rank: 731
score: 98.37311662946429
patch: return false ; return ret ;
rank: 731
score: 98.2103271484375
patch: Preconditions . continue ; }
rank: 731
score: 97.68438720703125
patch: final Object continue ;
rank: 731
score: 97.2450180053711
patch: result continue ;
rank: 732
score: 98.83079020182292
patch: super . is CaMeL Getter CaMeL Def ( name ) ;
rank: 732
score: 98.1466293334961
patch: continue { ;
rank: 732
score: 98.01220092773437
patch: continue ; case ;
rank: 732
score: 98.01201782226562
patch: System . err .
rank: 733
score: 98.82884632457386
patch: super . is CaMeL Get CaMeL Prop ( ) ;
rank: 733
score: 98.07295532226563
patch: return continue ; else
rank: 733
score: 97.200439453125
patch: case continue ;
rank: 734
score: 98.82694498697917
patch: return gramps . is CaMeL Call ( null ) ;
rank: 734
score: 98.36771065848214
patch: case * * * * /
rank: 734
score: 98.00780639648437
patch: return false ) ;
rank: 734
score: 98.00624389648438
patch: continue ; in ;
rank: 734
score: 97.67694702148438
patch: continue continue false ;
rank: 734
score: 97.1990458170573
patch: else ;
rank: 735
score: 98.39300537109375
patch: ret = ret ? false ;
rank: 735
score: 98.20358276367188
patch: return pass ;
rank: 735
score: 98.07260131835938
patch: } else if ; else
rank: 735
score: 98.0009521484375
patch: ; return false ;
rank: 735
score: 97.67315673828125
patch: continue 1 . ;
rank: 735
score: 97.19357299804688
patch: / ; /
rank: 736
score: 98.39273507254464
patch: return pass ( name ) ;
rank: 736
score: 98.34603881835938
patch: continue / / * /
rank: 736
score: 98.14213256835937
patch: continue ; try {
rank: 736
score: 98.07225545247395
patch: * * * ; }
rank: 736
score: 97.99879760742188
patch: continue - false ;
rank: 736
score: 97.99434814453124
patch: val = false ;
rank: 736
score: 97.67295532226562
patch: catch continue ; }
rank: 736
score: 97.19244384765625
patch: if ; System
rank: 737
score: 98.80631510416667
patch: super . is CaMeL Call ( ) ;
rank: 737
score: 98.19466145833333
patch: continue . return ret ;
rank: 737
score: 98.13941650390625
patch: temp . continue ;
rank: 737
score: 97.98532104492188
patch: status = false ;
rank: 737
score: 97.67060089111328
patch: continue false ?
rank: 737
score: 97.19041442871094
patch: continue ; print
rank: 738
score: 98.80473188920455
patch: return gramps . is CaMeL Empty ( ) ;
rank: 738
score: 98.06358032226562
patch: return ; } }
rank: 738
score: 97.98770141601562
patch: / ; * /
rank: 738
score: 97.98413696289063
patch: result = null ;
rank: 738
score: 97.18516540527344
patch: / / /
rank: 739
score: 98.13767700195312
patch: i ; continue ;
rank: 739
score: 98.0625
patch: * * /
rank: 739
score: 97.9857421875
patch: . * continue ;
rank: 739
score: 97.98242797851563
patch: return throw true ;
rank: 739
score: 97.66748046875
patch: check continue ;
rank: 739
score: 97.18498229980469
patch: start continue ;
rank: 740
score: 98.1371337890625
patch: id { continue ;
rank: 740
score: 98.05350952148437
patch: } * * /
rank: 740
score: 97.98088989257812
patch: return true ; else
rank: 740
score: 97.66395568847656
patch: continue node ;
rank: 740
score: 97.184814453125
patch: boolean continue ;
rank: 741
score: 98.36246163504464
patch: return ) { return true ;
rank: 741
score: 98.13550415039063
patch: return ( false ;
rank: 741
score: 97.979150390625
patch: parent . continue ;
rank: 741
score: 97.97349243164062
patch: final ; * /
rank: 741
score: 97.6623291015625
patch: continue false * }
rank: 741
score: 97.17257690429688
patch: return $NUMBER$ ;
rank: 742
score: 98.05097045898438
patch: * * * ;
rank: 742
score: 97.96593017578125
patch: this . ; ;
rank: 742
score: 97.14933776855469
patch: throw this ;
rank: 743
score: 98.18094889322917
patch: y . return false ;
rank: 743
score: 98.1312255859375
patch: try . continue ;
rank: 743
score: 97.974755859375
patch: assignment return true ;
rank: 743
score: 97.96197509765625
patch: continue ret ; }
rank: 743
score: 97.65465087890625
patch: continue . this ;
rank: 743
score: 97.14799499511719
patch: return * /
rank: 744
score: 98.78388129340277
patch: print CaMeL Stack CaMeL Trace ( ) ;
rank: 744
score: 98.30848185221355
patch: cfw . return false ;
rank: 744
score: 98.127978515625
patch: continue { ; ;
rank: 744
score: 97.1458511352539
patch: if do {
rank: 745
score: 98.17214965820312
patch: break ret = false ;
rank: 745
score: 98.1239013671875
patch: m false continue ;
rank: 745
score: 98.03582763671875
patch: } if ; }
rank: 745
score: 97.9659912109375
patch: e return false ;
rank: 745
score: 97.14396667480469
patch: This continue ;
rank: 746
score: 98.78046209161931
patch: return parent . is CaMeL Call ( ) ) {
rank: 746
score: 98.1154296875
patch: throw new $STRING$ ;
rank: 746
score: 97.96148681640625
patch: else throw false ;
rank: 746
score: 97.94754638671876
patch: * / * /
rank: 746
score: 97.13880920410156
patch: continue ; count
rank: 747
score: 98.77944113991477
patch: return parent . get CaMeL First CaMeL Child ( )
rank: 747
score: 98.3334452311198
patch: return n == null ;
rank: 747
score: 98.29824829101562
patch: for ( Reference ) {
rank: 747
score: 98.17073567708333
patch: continue : return true ;
rank: 747
score: 98.11451416015625
patch: end . continue ;
rank: 747
score: 97.95938110351562
patch: result return true ;
rank: 747
score: 97.6346664428711
patch: finally continue ;
rank: 747
score: 97.12979125976562
patch: return out ;
rank: 748
score: 98.11369018554687
patch: / continue ; ;
rank: 748
score: 97.953955078125
patch: throw return false ;
rank: 748
score: 97.93782043457031
patch: ; ; ;
rank: 748
score: 97.63188171386719
patch: continue ) ;
rank: 748
score: 97.12718963623047
patch: if break ;
rank: 749
score: 98.77643377130681
patch: return gramps . get CaMeL Prop ( ) .
rank: 749
score: 97.95220336914062
patch: ret return true ;
rank: 749
score: 97.9371826171875
patch: finally { ; }
rank: 749
score: 97.62860107421875
patch: continue value * /
rank: 749
score: 97.12669372558594
patch: / ; ;
rank: 750
score: 98.16921997070312
patch: break . return false ;
rank: 750
score: 97.95159301757812
patch: return ! true ;
rank: 750
score: 97.93328857421875
patch: continue this . ;
rank: 750
score: 97.62749481201172
patch: my continue ;
rank: 750
score: 97.1221694946289
patch: continue ; check
rank: 751
score: 98.77482096354167
patch: System . out . println ( ) ;
rank: 751
score: 98.110888671875
patch: next false continue ;
rank: 751
score: 97.95074462890625
patch: System . continue ;
rank: 751
score: 97.932470703125
patch: continue ; this ;
rank: 751
score: 97.6271240234375
patch: continue false this .
rank: 752
score: 98.76412353515624
patch: if ( parent . is CaMeL Call ( )
rank: 752
score: 98.3114522298177
patch: return ) : false ;
rank: 752
score: 98.1639404296875
patch: info . return false ;
rank: 752
score: 98.10973510742187
patch: break ; ; ;
rank: 752
score: 97.93118286132812
patch: . * /
rank: 752
score: 97.62710571289062
patch: continue true this ;
rank: 752
score: 97.11271667480469
patch: if * /
rank: 753
score: 98.10673828125
patch: catch new $STRING$ ;
rank: 753
score: 98.01396484375
patch: return case null ;
rank: 753
score: 97.9476806640625
patch: assignment . continue ;
rank: 753
score: 97.9283447265625
patch: . ; * /
rank: 753
score: 97.11267852783203
patch: return start ;
rank: 754
score: 98.75265842013889
patch: return parent . is CaMeL Call ( )
rank: 754
score: 97.94725952148437
patch: warn = false ;
rank: 754
score: 97.92413940429688
patch: ; } * /
rank: 754
score: 97.62445678710938
patch: t continue ; }
rank: 754
score: 97.09900665283203
patch: continue ; add
rank: 755
score: 98.10159912109376
patch: / continue continue ;
rank: 755
score: 97.92263793945312
patch: n . * /
rank: 755
score: 97.62335968017578
patch: continue value .
rank: 755
score: 97.09042358398438
patch: in continue ;
rank: 756
score: 98.71629638671875
patch: return ref . is CaMeL Get ( ) ;
rank: 756
score: 98.14675903320312
patch: / * return true ;
rank: 756
score: 97.938623046875
patch: return true ) ;
rank: 756
score: 97.6229248046875
patch: continue . . ;
rank: 756
score: 97.08527374267578
patch: continue ; finally
rank: 757
score: 98.68201361762152
patch: super . is CaMeL Call ( ) {
rank: 757
score: 98.28082275390625
patch: ) { return false ;
rank: 757
score: 98.14634195963542
patch: return ( ret ) ;
rank: 757
score: 97.93837890625
patch: t return false ;
rank: 757
score: 97.62227630615234
patch: continue . }
rank: 758
score: 98.66010199652777
patch: get CaMeL Node ( ) . continue ;
rank: 758
score: 98.27482096354167
patch: / / / * /
rank: 758
score: 98.14129638671875
patch: error . return false ;
rank: 758
score: 98.09888916015625
patch: if null false ;
rank: 758
score: 97.9154541015625
patch: ; * / /
rank: 758
score: 97.078125
patch: if continue /
rank: 759
score: 98.27768961588542
patch: continue ret = ret ;
rank: 759
score: 98.14102935791016
patch: throw ret ;
rank: 759
score: 98.09818115234376
patch: catch false continue ;
rank: 759
score: 97.91409912109376
patch: continue ; null ;
rank: 759
score: 97.6168212890625
patch: continue true
rank: 759
score: 97.07730102539062
patch: default continue ;
rank: 760
score: 98.65450032552083
patch: return ! is CaMeL Call ( ) ;
rank: 760
score: 98.2742919921875
patch: return type == null ;
rank: 760
score: 98.2664082845052
patch: VAR . return false ;
rank: 760
score: 97.93145751953125
patch: false return true ;
rank: 760
score: 97.91351318359375
patch: continue ret ;
rank: 760
score: 97.07547760009766
patch: continue ; throw
rank: 761
score: 97.91096801757813
patch: do { ; ;
rank: 761
score: 97.6166015625
patch: continue = type ;
rank: 761
score: 97.07420349121094
patch: continue ; final
rank: 762
score: 98.27064005533855
patch: continue pass = false ;
rank: 762
score: 97.98491821289062
patch: case null * /
rank: 762
score: 97.615771484375
patch: Utils . continue ;
rank: 762
score: 97.068115234375
patch: throw ( {
rank: 763
score: 98.09385986328125
patch: next { continue ;
rank: 763
score: 97.91807250976562
patch: val return false ;
rank: 763
score: 97.90894775390625
patch: do { ; }
rank: 763
score: 97.61328125
patch: if ( true )
rank: 763
score: 97.0664291381836
patch: / logger ;
rank: 764
score: 97.91687622070313
patch: error = true ;
rank: 764
score: 97.90650634765625
patch: ; / * ;
rank: 764
score: 97.6068603515625
patch: continue type = ;
rank: 764
score: 97.0650634765625
patch: / ; else
rank: 765
score: 98.1266581217448
patch: return ret ) ; }
rank: 765
score: 98.08882446289063
patch: continue + continue ;
rank: 765
score: 97.9820068359375
patch: * * continue /
rank: 765
score: 97.91629638671876
patch: fail ( ) ;
rank: 765
score: 97.90591430664062
patch: ; ; ; ;
rank: 765
score: 97.60145263671875
patch: continue ret = ;
rank: 765
score: 97.06289672851562
patch: = continue ;
rank: 766
score: 98.08861083984375
patch: type { continue ;
rank: 766
score: 97.91593017578126
patch: val = true ;
rank: 766
score: 97.90581665039062
patch: continue - true ;
rank: 766
score: 97.6004150390625
patch: logger . error ;
rank: 766
score: 97.04499816894531
patch: / / ;
rank: 767
score: 98.54709298270089
patch: return ( parent . get CaMeL
rank: 767
score: 98.2400614420573
patch: continue / * / }
rank: 767
score: 98.08793334960937
patch: else { return ;
rank: 767
score: 97.97551879882812
patch: return null continue ;
rank: 767
score: 97.60021362304687
patch: continue do * /
rank: 767
score: 97.04068756103516
patch: continue ; super
rank: 768
score: 98.23936971028645
patch: if ( pass ) {
rank: 768
score: 98.0858154296875
patch: current . continue ;
rank: 768
score: 97.91333618164063
patch: status = true ;
rank: 768
score: 97.0390853881836
patch: catch ; {
rank: 769
score: 98.49881417410714
patch: log . error ( ) ;
rank: 769
score: 98.23734537760417
patch: return return false ; }
rank: 769
score: 98.12127685546875
patch: continue } return ret ;
rank: 769
score: 98.0855712890625
patch: continue { }
rank: 769
score: 97.96878662109376
patch: return && continue ;
rank: 769
score: 97.88989868164063
patch: t . * /
rank: 769
score: 97.59884643554688
patch: continue ( error )
rank: 769
score: 97.03809356689453
patch: error continue ;
rank: 770
score: 98.47551618303571
patch: if ( parent . get CaMeL
rank: 770
score: 98.24625651041667
patch: return this . null ;
rank: 770
score: 98.11963907877605
patch: ref . return ret ;
rank: 770
score: 98.083642578125
patch: loop { continue ;
rank: 770
score: 97.91135864257812
patch: error return true ;
rank: 770
score: 97.887109375
patch: continue n ; }
rank: 770
score: 97.59745483398437
patch: continue false if ;
rank: 770
score: 97.0378189086914
patch: return type ;
rank: 771
score: 98.11818440755208
patch: continue ; return ret ;
rank: 771
score: 98.08030700683594
patch: value continue ;
rank: 771
score: 97.91036376953124
patch: throw ( ) ;
rank: 771
score: 97.8867431640625
patch: continue -- * /
rank: 771
score: 97.597314453125
patch: synchronized continue ; }
rank: 771
score: 97.03680419921875
patch: continue ; System
rank: 772
score: 98.46683175223214
patch: continue . ret = true ;
rank: 772
score: 98.0794189453125
patch: connection . continue ;
rank: 772
score: 97.96473388671875
patch: * continue continue ;
rank: 772
score: 97.87610473632813
patch: warn . * /
rank: 772
score: 97.597119140625
patch: fail continue ; }
rank: 773
score: 98.11501057942708
patch: return refs == null ;
rank: 773
score: 98.07742919921876
patch: init new continue ;
rank: 773
score: 97.9638916015625
patch: return || continue ;
rank: 773
score: 97.907275390625
patch: return ! ret ;
rank: 773
score: 97.87554931640625
patch: . . * /
rank: 773
score: 97.59383544921874
patch: } if ( ;
rank: 773
score: 97.03016662597656
patch: continue ; long
rank: 774
score: 98.43840680803571
patch: LOG . error ( ) ;
rank: 774
score: 98.07322998046875
patch: i { continue ;
rank: 774
score: 97.96093139648437
patch: if ( ret ;
rank: 774
score: 97.90428466796875
patch: try { try {
rank: 774
score: 97.87257080078125
patch: continue ; new ;
rank: 774
score: 97.59326171875
patch: synchronized continue ;
rank: 774
score: 97.02692413330078
patch: if System ;
rank: 775
score: 98.40859549386161
patch: switch ( parent . get CaMeL
rank: 775
score: 98.23230997721355
patch: return value != null ;
rank: 775
score: 98.2164815266927
patch: supported . return false ;
rank: 775
score: 98.07249755859375
patch: / continue ; }
rank: 775
score: 97.96063232421875
patch: continue return null ;
rank: 775
score: 97.90425415039063
patch: println ( ) ;
rank: 775
score: 97.8718994140625
patch: * / / ;
rank: 775
score: 97.02645874023438
patch: return ; return
rank: 776
score: 98.39555140904018
patch: switch ( ref . get CaMeL
rank: 776
score: 98.21460978190105
patch: { throw null ; }
rank: 776
score: 98.0984598795573
patch: return ret ; } }
rank: 776
score: 97.95836181640625
patch: ? return false ;
rank: 776
score: 97.89307250976563
patch: true return true ;
rank: 776
score: 97.8708984375
patch: ; catch ( ;
rank: 776
score: 97.58388671875
patch: this continue ; }
rank: 777
score: 98.39389474051339
patch: end CaMeL Node ( ) ;
rank: 777
score: 97.95185546875
patch: } return null ;
rank: 777
score: 97.89176635742187
patch: else throw null ;
rank: 777
score: 97.0209732055664
patch: if name ;
rank: 778
score: 98.39082554408482
patch: return ( ref . get CaMeL
rank: 778
score: 98.21236572265624
patch: continue . false ;
rank: 778
score: 98.09775797526042
patch: ex . return true ;
rank: 778
score: 97.88807983398438
patch: This return false ;
rank: 778
score: 97.56617736816406
patch: the continue ;
rank: 779
score: 98.2102559407552
patch: refs . return false ;
rank: 779
score: 97.85771484375
patch: * / if ;
rank: 780
score: 98.2031758626302
patch: case * * * /
rank: 780
score: 98.06737060546875
patch: return false ; continue
rank: 780
score: 97.93848876953125
patch: } ; if ;
rank: 780
score: 97.88185424804688
patch: return ( ) ;
rank: 780
score: 97.85416870117187
patch: if ; ; ;
rank: 780
score: 97.56323852539063
patch: continue value . }
rank: 781
score: 98.09288787841797
patch: throw 0 ;
rank: 781
score: 98.05830891927083
patch: else {
rank: 781
score: 97.93226623535156
patch: } else }
rank: 781
score: 97.87471923828124
patch: warn return false ;
rank: 781
score: 97.85134887695312
patch: continue ; , ;
rank: 781
score: 97.5617919921875
patch: if ( error ;
rank: 781
score: 97.00885009765625
patch: end continue ;
rank: 782
score: 98.3423563639323
patch: exception . return false ;
rank: 782
score: 98.0916035970052
patch: finally { return true ;
rank: 782
score: 98.05625610351562
patch: string . continue ;
rank: 782
score: 97.9313720703125
patch: } else { else
rank: 782
score: 97.87075805664062
patch: throw ref ;
rank: 782
score: 97.84984130859375
patch: continue = ; ;
rank: 782
score: 97.55738830566406
patch: a continue ;
rank: 783
score: 98.33830915178571
patch: super . ret = false ;
rank: 783
score: 98.08956909179688
patch: / / return ret ;
rank: 783
score: 98.05517578125
patch: node . continue ;
rank: 783
score: 97.92941284179688
patch: continue ? continue ;
rank: 783
score: 97.86331176757812
patch: } throw false ;
rank: 783
score: 97.5542984008789
patch: continue 1 ;
rank: 783
score: 97.00594329833984
patch: continue ; code
rank: 784
score: 98.20479329427083
patch: return name != null ;
rank: 784
score: 98.05447387695312
patch: found . continue ;
rank: 784
score: 97.8487060546875
patch: / * / ;
rank: 784
score: 97.5514404296875
patch: List < continue ;
rank: 784
score: 97.00283813476562
patch: if parent ;
rank: 785
score: 98.08584594726562
patch: return ret ; * /
rank: 785
score: 97.92579345703125
patch: continue += continue ;
rank: 785
score: 97.5466079711914
patch: continue success ;
rank: 785
score: 96.99911499023438
patch: continue ; end
rank: 786
score: 98.30771891276042
patch: code . return false ;
rank: 786
score: 98.19305419921875
patch: This . return true ;
rank: 786
score: 98.0516845703125
patch: } * continue {
rank: 786
score: 97.85751342773438
patch: return throw null ;
rank: 786
score: 97.8423828125
patch: check ; * /
rank: 786
score: 96.99871826171875
patch: continue ; start
rank: 787
score: 98.07935587565105
patch: break ret = true ;
rank: 787
score: 98.04951171875
patch: next ; continue ;
rank: 787
score: 96.99742889404297
patch: int continue ;
rank: 788
score: 98.19089762369792
patch: continue . * * /
rank: 788
score: 98.04835815429688
patch: continue ; if null
rank: 788
score: 97.91558227539062
patch: } else = ;
rank: 788
score: 97.85062255859376
patch: else throw true ;
rank: 788
score: 97.52156066894531
patch: init continue ;
rank: 788
score: 96.9953842163086
patch: continue ; debug
rank: 789
score: 98.19622802734375
patch: assignment . return ret ;
rank: 789
score: 98.07377115885417
patch: return . . . ;
rank: 789
score: 98.04801025390626
patch: m null continue ;
rank: 789
score: 97.8385986328125
patch: add CaMeL Node ;
rank: 789
score: 96.99497985839844
patch: / break ;
rank: 790
score: 98.04528198242187
patch: if true continue ;
rank: 790
score: 97.90897827148437
patch: ? return continue ;
rank: 790
score: 97.84405517578125
patch: System . else {
rank: 790
score: 97.83547973632812
patch: continue ; default ?
rank: 790
score: 96.99258422851562
patch: if type ;
rank: 791
score: 98.18674723307292
patch: it . return false ;
rank: 791
score: 98.0716552734375
patch: return ) ; }
rank: 791
score: 98.04487915039063
patch: b . continue ;
rank: 791
score: 97.90718994140624
patch: } new continue ;
rank: 791
score: 97.84401245117188
patch: e return true ;
rank: 791
score: 97.83342895507812
patch: continue ; add ;
rank: 791
score: 97.5165023803711
patch: try continue ;
rank: 791
score: 96.98541259765625
patch: return value ;
rank: 792
score: 98.18595377604167
patch: Expr . return false ;
rank: 792
score: 98.04445190429688
patch: p . continue ;
rank: 792
score: 97.84295043945312
patch: warn = true ;
rank: 792
score: 97.83323974609375
patch: / * * ;
rank: 792
score: 97.51625061035156
patch: continue parent ;
rank: 792
score: 96.98130798339844
patch: if ; :
rank: 793
score: 97.903173828125
patch: break = continue ;
rank: 793
score: 97.8366455078125
patch: exception = false ;
rank: 793
score: 97.82898712158203
patch: continue n ;
rank: 793
score: 97.50349426269531
patch: continue TRUE ;
rank: 793
score: 96.97942352294922
patch: return String ;
rank: 794
score: 97.90194702148438
patch: continue / continue ;
rank: 794
score: 97.8343505859375
patch: { return true ;
rank: 794
score: 97.82781982421875
patch: for ( ; )
rank: 794
score: 97.50326538085938
patch: continue validate ;
rank: 794
score: 96.97492980957031
patch: continue ; current
rank: 795
score: 98.18167114257812
patch: return ref . continue ;
rank: 795
score: 98.06032307942708
patch: return 0 . null ;
rank: 795
score: 98.03831176757812
patch: command . continue ;
rank: 795
score: 97.89723510742188
patch: } / * /
rank: 795
score: 97.8331298828125
patch: LOG . break ;
rank: 795
score: 97.82237243652344
patch: do { ;
rank: 795
score: 97.50172424316406
patch: continue type ;
rank: 795
score: 96.97411346435547
patch: System continue ;
rank: 796
score: 98.17733764648438
patch: ret = ret ) ;
rank: 796
score: 98.03734130859375
patch: if ( true ;
rank: 796
score: 97.82673950195313
patch: assignment = false ;
rank: 796
score: 97.82006225585937
patch: for ; * /
rank: 796
score: 97.49151611328125
patch: continue target ;
rank: 797
score: 98.1997578938802
patch: return parent != null ;
rank: 797
score: 98.16476440429688
patch: return true ; else {
rank: 797
score: 98.03682250976563
patch: table . continue ;
rank: 797
score: 97.8260498046875
patch: ref return false ;
rank: 797
score: 97.81163330078125
patch: continue - 0 ;
rank: 797
score: 96.97228240966797
patch: continue ; to
rank: 798
score: 98.03414916992188
patch: prev . continue ;
rank: 798
score: 97.82593994140625
patch: val = null ;
rank: 798
score: 97.80978393554688
patch: continue not * /
rank: 798
score: 97.49006652832031
patch: continue true }
rank: 798
score: 96.96428680419922
patch: if ; do
rank: 799
score: 97.88197021484375
patch: { return ; }
rank: 799
score: 97.82551879882813
patch: continue - * /
rank: 799
score: 97.48754119873047
patch: continue true .
rank: 799
score: 96.96324920654297
patch: / / continue
rank: 800
score: 98.19075927734374
patch: break ; break ;
rank: 800
score: 98.1570332845052
patch: for ( Node ) {
rank: 800
score: 98.15437825520833
patch: return current != null ;
rank: 800
score: 98.03017578125
patch: if null ) {
rank: 800
score: 97.87841796875
patch: ? if continue ;
rank: 800
score: 97.81716918945312
patch: LOG . continue ;
rank: 800
score: 97.47526550292969
patch: continue default ;
rank: 800
score: 96.962646484375
patch: / System ;
rank: 801
score: 98.1875244140625
patch: exception . continue ;
rank: 801
score: 97.8155029296875
patch: throw return true ;
rank: 801
score: 97.80390625
patch: continue ; else {
rank: 801
score: 96.96179962158203
patch: continue ; String
rank: 802
score: 98.14991251627605
patch: Preconditions . return ) ;
rank: 802
score: 98.02704467773438
patch: n . continue ;
rank: 802
score: 97.87301635742188
patch: continue * return ;
rank: 802
score: 97.81483764648438
patch: t return true ;
rank: 802
score: 97.80274200439453
patch: final ; ;
rank: 802
score: 97.46975708007812
patch: continue default .
rank: 802
score: 96.96068572998047
patch: int type ;
rank: 803
score: 98.15924072265625
patch: break . continue ;
rank: 803
score: 98.03048706054688
patch: return null ) ;
rank: 803
score: 98.02691650390625
patch: callback . continue ;
rank: 803
score: 97.8063720703125
patch: log . break ;
rank: 803
score: 97.80074462890624
patch: super . ; ;
rank: 803
score: 97.46307373046875
patch: s continue ;
rank: 803
score: 96.95445251464844
patch: count continue ;
rank: 804
score: 98.02587890625
patch: * continue ; ;
rank: 804
score: 96.95191955566406
patch: /
rank: 805
score: 98.1443379720052
patch: return new ? false ;
rank: 805
score: 98.1374003092448
patch: return = false ; }
rank: 805
score: 97.80076293945312
patch: else return null ;
rank: 805
score: 97.45146179199219
patch: save continue ;
rank: 805
score: 96.95088195800781
patch: continue ; error
rank: 806
score: 98.14998168945313
patch: continue : continue ;
rank: 806
score: 98.13621012369792
patch: / * / break ;
rank: 806
score: 98.02421875
patch: else { break ;
rank: 806
score: 97.7981669108073
patch: * /
rank: 806
score: 96.94790649414062
patch: return Integer ;
rank: 807
score: 98.02210693359375
patch: proxy . continue ;
rank: 807
score: 97.86868896484376
patch: continue } continue ;
rank: 807
score: 97.79429931640625
patch: continue . default :
rank: 807
score: 97.43072509765625
patch: double continue ;
rank: 807
score: 96.94742584228516
patch: f continue ;
rank: 808
score: 98.02159423828125
patch: e . continue ;
rank: 808
score: 98.0106689453125
patch: continue return ret ;
rank: 808
score: 96.94389343261719
patch: if true ;
rank: 809
score: 97.86097412109375
patch: return - 0 ;
rank: 809
score: 97.79073486328124
patch: continue } else {
rank: 809
score: 97.78336181640626
patch: * / break ;
rank: 809
score: 97.41741180419922
patch: static continue ;
rank: 809
score: 96.94210815429688
patch: -- continue ;
rank: 810
score: 97.78577880859375
patch: return ! null ;
rank: 810
score: 97.78283081054687
patch: t ; * /
rank: 810
score: 97.41152954101562
patch: void continue ;
rank: 810
score: 96.9415054321289
patch: break ; else
rank: 811
score: 98.01839599609374
patch: m new continue ;
rank: 811
score: 97.85555419921874
patch: break continue ; }
rank: 811
score: 97.781591796875
patch: p . * /
rank: 811
score: 97.77994995117187
patch: else return ) ;
rank: 811
score: 97.41075897216797
patch: String continue ;
rank: 811
score: 96.94042205810547
patch: throw type ;
rank: 812
score: 98.1160176595052
patch: return ref . get CaMeL
rank: 812
score: 98.01475830078125
patch: continue continue ; else
rank: 812
score: 97.78134155273438
patch: return ( ; }
rank: 812
score: 97.40983581542969
patch: continue error ;
rank: 812
score: 96.9388427734375
patch: m ( {
rank: 813
score: 97.84768676757812
patch: return continue continue }
rank: 813
score: 97.78036499023438
patch: Util . ;
rank: 813
score: 97.77776489257812
patch: return break ; }
rank: 813
score: 97.40946197509766
patch: get continue ;
rank: 813
score: 96.93881225585938
patch: true continue ;
rank: 814
score: 98.01159057617187
patch: continue true ; ;
rank: 814
score: 97.84724426269531
patch: } catch ;
rank: 814
score: 97.77742919921874
patch: continue n . }
rank: 814
score: 97.4088134765625
patch: log continue ;
rank: 814
score: 96.92704264322917
patch: } ;
rank: 815
score: 98.12771606445312
patch: return name == name ;
rank: 815
score: 98.093994140625
patch: case * * /
rank: 815
score: 97.84703369140625
patch: continue * continue /
rank: 815
score: 97.39982604980469
patch: invoke continue ;
rank: 815
score: 96.90096028645833
patch: logger ;
rank: 816
score: 98.00888671875
patch: continue { continue {
rank: 816
score: 97.7756591796875
patch: continue . $NUMBER$ ;
rank: 816
score: 97.394775390625
patch: continue do ;
rank: 816
score: 96.85345458984375
patch: try ;
rank: 817
score: 98.00778198242188
patch: info . continue ;
rank: 817
score: 97.77113037109375
patch: continue = ( ;
rank: 817
score: 97.76940307617187
patch: return ret ; ;
rank: 817
score: 97.38923645019531
patch: A continue ;
rank: 818
score: 98.1149393717448
patch: return name . ) ;
rank: 818
score: 97.95767822265626
patch: return - $NUMBER$ ;
rank: 818
score: 97.8451171875
patch: return ; return ;
rank: 818
score: 97.76988525390625
patch: ; continue ; }
rank: 818
score: 97.3850326538086
patch: continue $NUMBER$ ;
rank: 818
score: 96.75535583496094
patch: try
rank: 819
score: 98.11409505208333
patch: return this . VAR ;
rank: 819
score: 98.0772216796875
patch: / * / }
rank: 819
score: 98.00455932617187
patch: stmt . continue ;
rank: 819
score: 97.76919555664062
patch: switch ( ;
rank: 819
score: 96.75
patch: do ;
rank: 820
score: 98.07252197265625
patch: interrupt ( ) ;
rank: 820
score: 98.0038330078125
patch: target . continue ;
rank: 820
score: 97.9565185546875
patch: break return false ;
rank: 820
score: 97.84096069335938
patch: false return continue ;
rank: 820
score: 97.37607828776042
patch: throw ;
rank: 820
score: 96.74642944335938
patch: / /
rank: 821
score: 98.09791259765625
patch: for ( Reference CaMeL
rank: 821
score: 98.06401977539062
patch: return = false ;
rank: 821
score: 98.00363159179688
patch: value continue continue ;
rank: 821
score: 97.76724853515626
patch: do { return ;
rank: 821
score: 97.75718688964844
patch: return error ;
rank: 821
score: 97.35712432861328
patch: continue not ;
rank: 821
score: 96.74595133463542
patch: result ;
rank: 822
score: 97.83919067382813
patch: ( Exception false ;
rank: 822
score: 97.75518035888672
patch: continue / /
rank: 822
score: 96.71238199869792
patch: LOG ;
rank: 823
score: 98.0005859375
patch: z . continue ;
rank: 823
score: 97.94774169921875
patch: return gramps ;
rank: 823
score: 97.8375244140625
patch: return 0 ; }
rank: 823
score: 97.76685791015625
patch: ; ret = ;
rank: 823
score: 97.75120849609375
patch: if ( child CaMeL
rank: 823
score: 97.35433197021484
patch: continue node .
rank: 823
score: 96.68009948730469
patch: 
rank: 824
score: 98.08811950683594
patch: throw 1 ;
rank: 824
score: 98.00020751953124
patch: res . continue ;
rank: 824
score: 97.76104125976562
patch: * continue * ;
rank: 824
score: 97.7483642578125
patch: try { break ;
rank: 824
score: 97.35187530517578
patch: catch ( ;
rank: 824
score: 96.598876953125
patch: return
rank: 825
score: 98.04726155598958
patch: return parent . get CaMeL
rank: 825
score: 97.997314453125
patch: t { continue ;
rank: 825
score: 97.83309326171874
patch: if ( false )
rank: 825
score: 97.74505004882812
patch: for ( Node )
rank: 825
score: 97.34551239013672
patch: continue . )
rank: 825
score: 96.59718322753906
patch: else
rank: 826
score: 97.9968017578125
patch: sql . continue ;
rank: 826
score: 97.94385375976563
patch: return return ret ;
rank: 826
score: 96.53338623046875
patch: ; ;
rank: 827
score: 98.03429565429687
patch: continue . break ;
rank: 827
score: 97.73544311523438
patch: ref .
rank: 827
score: 97.33683013916016
patch: so continue ;
rank: 827
score: 96.45735677083333
patch: c ;
rank: 828
score: 98.03297932942708
patch: break ; return true ;
rank: 828
score: 97.99323120117188
patch: d . continue ;
rank: 828
score: 97.75914306640625
patch: ; * * /
rank: 828
score: 97.72136840820312
patch: continue . / /
rank: 828
score: 97.33393859863281
patch: continue true )
rank: 828
score: 96.4550069173177
patch: start ;
rank: 829
score: 97.82711181640624
patch: . return continue ;
rank: 829
score: 97.75866088867187
patch: continue ? * ;
rank: 829
score: 96.43890380859375
patch: this ;
rank: 830
score: 97.9917236328125
patch: continue . true ;
rank: 830
score: 97.98988037109375
patch: for false continue ;
rank: 830
score: 97.932080078125
patch: return . false ;
rank: 830
score: 97.82520751953125
patch: return ; } else
rank: 830
score: 97.71748657226563
patch: for ( Node child
rank: 830
score: 97.33258056640625
patch: action continue ;
rank: 830
score: 96.42273966471355
patch: buffer ;
rank: 831
score: 98.03984985351562
patch: return VAR ) ;
rank: 831
score: 97.98961791992187
patch: tmp { continue ;
rank: 831
score: 97.75673828125
patch: fail ( $STRING$ ;
rank: 831
score: 97.71212768554688
patch: return $STRING$ ; }
rank: 831
score: 97.33135223388672
patch: continue 0 ;
rank: 831
score: 96.411376953125
patch: e ;
rank: 832
score: 98.03690795898437
patch: ret = $STRING$ ;
rank: 832
score: 98.02672729492187
patch: code . continue ;
rank: 832
score: 97.9778564453125
patch: This . break ;
rank: 832
score: 97.92844848632812
patch: throw - 1 ;
rank: 832
score: 97.748779296875
patch: ; return true ;
rank: 832
score: 97.32156372070312
patch: continue && ;
rank: 832
score: 96.39711507161458
patch: continue /
rank: 833
score: 98.02463989257812
patch: break = false ;
rank: 833
score: 97.9880126953125
patch: exception { continue ;
rank: 833
score: 97.74661254882812
patch: logger . ; ;
rank: 833
score: 97.32124328613281
patch: Action continue ;
rank: 833
score: 96.39211018880208
patch: finally ;
rank: 834
score: 97.97608642578125
patch: { break ; }
rank: 834
score: 97.92446899414062
patch: throw = false ;
rank: 834
score: 97.74657440185547
patch: continue - ;
rank: 834
score: 97.3204116821289
patch: continue type .
rank: 835
score: 98.01983642578125
patch: continue :
rank: 835
score: 97.9875732421875
patch: else { * /
rank: 835
score: 97.81666259765625
patch: break continue continue ;
rank: 835
score: 97.74495849609374
patch: stop ( ) ;
rank: 835
score: 97.66050211588542
patch: try {
rank: 835
score: 97.31629180908203
patch: Object continue ;
rank: 835
score: 96.3333740234375
patch: count ;
rank: 836
score: 97.74122314453125
patch: final ; ; ;
rank: 836
score: 96.31302897135417
patch: buf ;
rank: 837
score: 97.98118286132812
patch: line . continue ;
rank: 837
score: 97.9061279296875
patch: throw ! false ;
rank: 837
score: 97.8120849609375
patch: * * / }
rank: 837
score: 97.74103546142578
patch: this ; ;
rank: 837
score: 97.31290435791016
patch: continue target .
rank: 837
score: 96.30653889973958
patch: found ;
rank: 838
score: 97.97957153320313
patch: case 0 continue ;
rank: 838
score: 97.8111328125
patch: * return false ;
rank: 838
score: 97.31207275390625
patch: select continue ;
rank: 838
score: 96.30177815755208
patch: out ;
rank: 839
score: 97.9994888305664
patch: return 1 ;
rank: 839
score: 97.89642333984375
patch: y . continue ;
rank: 839
score: 97.80897216796875
patch: this . if ;
rank: 839
score: 97.73985595703125
patch: Util . ; ;
rank: 839
score: 97.62224578857422
patch: return ) {
rank: 839
score: 97.3025894165039
patch: float continue ;
rank: 839
score: 96.27328491210938
patch: end ;
rank: 840
score: 97.98636474609376
patch: throw $NUMBER$ * /
rank: 840
score: 97.93720703125
patch: VAR . continue ;
rank: 840
score: 97.30211639404297
patch: and continue ;
rank: 840
score: 96.25205485026042
patch: sb ;
rank: 841
score: 97.98444213867188
patch: break : continue ;
rank: 841
score: 97.97655639648437
patch: receiver . continue ;
rank: 841
score: 97.889111328125
patch: found = false ;
rank: 841
score: 97.80384521484375
patch: continue throw null ;
rank: 841
score: 97.73349609375
patch: continue ; ++ ;
rank: 841
score: 97.30011749267578
patch: remove continue ;
rank: 841
score: 96.25054931640625
patch: value ;
rank: 842
score: 97.98334350585938
patch: return true ) {
rank: 842
score: 97.97650146484375
patch: continue { return ;
rank: 842
score: 97.73112182617187
patch: this . * ;
rank: 842
score: 97.604736328125
patch: return err ;
rank: 842
score: 97.29004669189453
patch: enable continue ;
rank: 842
score: 96.22513834635417
patch: code ;
rank: 843
score: 97.72505950927734
patch: super . ;
rank: 843
score: 97.6039810180664
patch: else break ;
rank: 843
score: 97.28611755371094
patch: loop continue ;
rank: 843
score: 96.22390747070312
patch: continue else
rank: 844
score: 97.97557373046875
patch: tree . continue ;
rank: 844
score: 97.86459350585938
patch: exception = true ;
rank: 844
score: 97.70610046386719
patch: continue ; .
rank: 844
score: 97.28579711914062
patch: initialize continue ;
rank: 844
score: 96.204833984375
patch: / *
rank: 845
score: 97.97669067382813
patch: activate ( ) ;
rank: 845
score: 97.970361328125
patch: count { continue ;
rank: 845
score: 97.921240234375
patch: . * * /
rank: 845
score: 97.79807739257812
patch: } if false ;
rank: 845
score: 97.69271087646484
patch: return ( ;
rank: 845
score: 97.59514617919922
patch: throw $STRING$ ;
rank: 845
score: 96.15086873372395
patch: error ;
rank: 846
score: 97.96824951171875
patch: add new continue ;
rank: 846
score: 97.59254455566406
patch: throw null .
rank: 846
score: 97.28346252441406
patch: log . ;
rank: 846
score: 96.13643391927083
patch: default ;
rank: 847
score: 97.96821899414063
patch: re . continue ;
rank: 847
score: 97.94685363769531
patch: throw value ;
rank: 847
score: 97.85914306640625
patch: break ; } }
rank: 847
score: 97.79483642578126
patch: if ; return ;
rank: 847
score: 97.622314453125
patch: continue n .
rank: 847
score: 97.27298736572266
patch: continue default :
rank: 847
score: 96.11659749348958
patch: true ;
rank: 848
score: 97.9677490234375
patch: task . continue ;
rank: 848
score: 97.96387939453125
patch: continue : try {
rank: 848
score: 97.9034423828125
patch: This . continue ;
rank: 848
score: 97.8568115234375
patch: . return false ;
rank: 848
score: 97.79456176757813
patch: break return continue ;
rank: 848
score: 97.58008575439453
patch: return TRUE ;
rank: 848
score: 97.27236938476562
patch: match continue ;
rank: 848
score: 96.09297688802083
patch: super ;
rank: 849
score: 97.96771240234375
patch: j { continue ;
rank: 849
score: 97.9626708984375
patch: continue . try {
rank: 849
score: 97.92862548828126
patch: return ! ) ;
rank: 849
score: 97.85643920898437
patch: f . continue ;
rank: 849
score: 97.7941162109375
patch: continue false return ;
rank: 849
score: 97.61905670166016
patch: synchronized ( ;
rank: 849
score: 97.27165222167969
patch: continue call ;
rank: 849
score: 96.08414713541667
patch: Assert ;
rank: 850
score: 97.96708984375
patch: / catch continue ;
rank: 850
score: 97.89387817382813
patch: return = true ;
rank: 850
score: 97.85521240234375
patch: return . continue ;
rank: 850
score: 97.79127807617188
patch: { if ; }
rank: 850
score: 97.26789855957031
patch: Set continue ;
rank: 850
score: 96.0731709798177
patch: ex ;
rank: 851
score: 97.96494750976562
patch: ret { continue ;
rank: 851
score: 97.95408935546875
patch: break ; * /
rank: 851
score: 97.89124755859375
patch: continue + false ;
rank: 851
score: 97.84952392578126
patch: flush ( ) ;
rank: 851
score: 97.61009216308594
patch: continue ; default
rank: 851
score: 97.2674560546875
patch: continue ++ ;
rank: 851
score: 96.07308959960938
patch: type ;
rank: 852
score: 97.96375732421875
patch: continue { } ;
rank: 852
score: 97.94154052734375
patch: continue : break ;
rank: 852
score: 97.60096740722656
patch: logger . ;
rank: 852
score: 97.55620574951172
patch: return VAR ;
rank: 852
score: 97.26531219482422
patch: continue current ;
rank: 852
score: 96.06138102213542
patch: next ;
rank: 853
score: 97.96353759765626
patch: else continue ; *
rank: 853
score: 97.78729248046875
patch: * return continue ;
rank: 853
score: 97.54013061523438
patch: } / /
rank: 853
score: 97.26530456542969
patch: continue get ;
rank: 853
score: 96.0559590657552
patch: java ;
rank: 854
score: 97.96190185546875
patch: continue { try {
rank: 854
score: 97.93780517578125
patch: continue = ret ;
rank: 854
score: 97.88800659179688
patch: for null * /
rank: 854
score: 97.8405029296875
patch: throw ret ; }
rank: 854
score: 97.78629150390626
patch: } throw null ;
rank: 854
score: 97.59793090820312
patch: continue ? ;
rank: 854
score: 97.26510620117188
patch: super continue ;
rank: 854
score: 96.05499267578125
patch: pos ;
rank: 855
score: 97.95987548828126
patch: result continue ; ;
rank: 855
score: 97.8946044921875
patch: ret = ) ;
rank: 855
score: 97.88618774414063
patch: for * * /
rank: 855
score: 97.26333618164062
patch: short continue ;
rank: 855
score: 96.04110717773438
patch: / else
rank: 856
score: 97.87972412109374
patch: / * / /
rank: 856
score: 97.59455871582031
patch: * / /
rank: 856
score: 97.51390075683594
patch: case / /
rank: 856
score: 97.26087951660156
patch: ok continue ;
rank: 856
score: 96.03562418619792
patch: b ;
rank: 857
score: 97.8781005859375
patch: This . * /
rank: 857
score: 97.77922973632812
patch: case null continue ;
rank: 857
score: 97.5859375
patch: continue ; )
rank: 857
score: 97.51278686523438
patch: continue }
rank: 857
score: 97.25764465332031
patch: ret continue ;
rank: 857
score: 96.0221455891927
patch: return else
rank: 858
score: 97.9580810546875
patch: if null true ;
rank: 858
score: 97.91049194335938
patch: answer = false ;
rank: 858
score: 97.87402954101563
patch: continue ( ) ;
rank: 858
score: 97.83021240234375
patch: pass = false ;
rank: 858
score: 97.77534790039063
patch: if ; } }
rank: 858
score: 97.58293151855469
patch: fail ( ;
rank: 858
score: 97.50233459472656
patch: throw * /
rank: 858
score: 96.01962280273438
patch: return *
rank: 859
score: 97.95789794921875
patch: l { continue ;
rank: 859
score: 97.90363159179688
patch: Debug . continue ;
rank: 859
score: 97.86873779296874
patch: continue : false ;
rank: 859
score: 97.58052062988281
patch: ; * ;
rank: 859
score: 97.50066375732422
patch: return false .
rank: 859
score: 96.00337727864583
patch: log ;
rank: 860
score: 96.00295003255208
patch: ret ;
rank: 861
score: 97.86326904296875
patch: check ( ) ;
rank: 861
score: 97.82467041015624
patch: m . continue ;
rank: 861
score: 97.76541748046876
patch: Set . * /
rank: 861
score: 97.57733917236328
patch: ; / ;
rank: 861
score: 97.47112274169922
patch: continue } }
rank: 861
score: 97.2457987467448
patch: continue null
rank: 861
score: 95.99477132161458
patch: check ;
rank: 862
score: 97.8775390625
patch: ref . break ;
rank: 862
score: 97.86260986328125
patch: Preconditions = false ;
rank: 862
score: 97.7650634765625
patch: } } else {
rank: 862
score: 97.46511840820312
patch: / / }
rank: 862
score: 97.24496459960938
patch: Value continue ;
rank: 862
score: 95.97833251953125
patch: else else
rank: 863
score: 97.56365203857422
patch: * ; ;
rank: 863
score: 97.46043395996094
patch: System . }
rank: 863
score: 97.24459838867188
patch: continue $STRING$ ;
rank: 863
score: 95.97440592447917
patch: continue *
rank: 864
score: 97.94857788085938
patch: ns . continue ;
rank: 864
score: 97.2442626953125
patch: cached continue ;
rank: 865
score: 97.86332397460937
patch: continue false / /
rank: 865
score: 97.81817016601562
patch: throw = true ;
rank: 865
score: 97.759326171875
patch: . if continue ;
rank: 865
score: 97.45451354980469
patch: else ref .
rank: 865
score: 97.24349975585938
patch: Swing continue ;
rank: 865
score: 95.9378662109375
patch: parent ;
rank: 866
score: 97.9427978515625
patch: line { continue ;
rank: 866
score: 97.86920776367188
patch: consume ( ) ;
rank: 866
score: 97.85459594726562
patch: literal . continue ;
rank: 866
score: 97.816162109375
patch: break return true ;
rank: 866
score: 97.7522216796875
patch: return * * ;
rank: 866
score: 97.52406311035156
patch: continue ] ;
rank: 866
score: 97.44711303710938
patch: else { }
rank: 866
score: 97.24229431152344
patch: Error continue ;
rank: 866
score: 95.9356689453125
patch: * ;
rank: 867
score: 97.86815185546875
patch: break ; else {
rank: 867
score: 97.85348510742188
patch: ret = VAR ;
rank: 867
score: 97.5133056640625
patch: final Object ;
rank: 867
score: 97.44651794433594
patch: try { }
rank: 867
score: 97.24043273925781
patch: I continue ;
rank: 867
score: 95.93315124511719
patch: result
rank: 868
score: 97.84017181396484
patch: case * /
rank: 868
score: 97.51229858398438
patch: continue code ;
rank: 868
score: 97.44648742675781
patch: break false ;
rank: 868
score: 97.23957061767578
patch: continue -- ;
rank: 868
score: 95.92482503255208
patch: r ;
rank: 869
score: 97.93441162109374
patch: refs . continue ;
rank: 869
score: 97.84993743896484
patch: return success ;
rank: 869
score: 97.75034790039062
patch: return * * /
rank: 869
score: 97.237548828125
patch: continue match ;
rank: 869
score: 95.92251586914062
patch: String ;
rank: 870
score: 97.86309814453125
patch: return false ) {
rank: 870
score: 97.8496826171875
patch: ret = this ;
rank: 870
score: 97.82413330078126
patch: List ( ) {
rank: 870
score: 97.48475646972656
patch: continue exp ;
rank: 870
score: 95.90804036458333
patch: text ;
rank: 871
score: 97.93157958984375
patch: continue { * ;
rank: 871
score: 97.48369598388672
patch: p . ;
rank: 871
score: 97.23519134521484
patch: continue init ;
rank: 871
score: 95.90218098958333
patch: else /
rank: 872
score: 97.93131103515626
patch: block . continue ;
rank: 872
score: 97.43607330322266
patch: return ref ;
rank: 872
score: 97.23416900634766
patch: process continue ;
rank: 872
score: 95.88668823242188
patch: return }
rank: 873
score: 97.9284423828125
patch: ret ; continue ;
rank: 873
score: 97.84129638671875
patch: continue gramps .
rank: 873
score: 97.4688491821289
patch: y ( ;
rank: 873
score: 97.42469787597656
patch: ret = )
rank: 873
score: 97.23119354248047
patch: target continue ;
rank: 873
score: 95.88358561197917
patch: dim ;
rank: 874
score: 97.83480224609374
patch: return this ) ;
rank: 874
score: 97.80540771484375
patch: return false ; )
rank: 874
score: 97.74304809570313
patch: return ( type ;
rank: 874
score: 97.46624755859375
patch: . ; ;
rank: 874
score: 97.41716766357422
patch: ref != null
rank: 874
score: 97.219970703125
patch: continue return ;
rank: 875
score: 97.92658081054688
patch: Iterator * continue ;
rank: 875
score: 97.82276611328125
patch: return $STRING$ ) ;
rank: 875
score: 97.813037109375
patch: NOTE * * /
rank: 875
score: 97.800244140625
patch: return pass ; }
rank: 875
score: 97.74099731445312
patch: } return ;
rank: 875
score: 97.458984375
patch: . * ;
rank: 875
score: 97.2176284790039
patch: continue false in
rank: 875
score: 95.85523986816406
patch: ;
rank: 876
score: 97.79986572265625
patch: throw gramps ;
rank: 876
score: 97.44745635986328
patch: n . ;
rank: 876
score: 97.40939331054688
patch: = true ;
rank: 876
score: 97.21725463867188
patch: continue match .
rank: 876
score: 95.852783203125
patch: m ;
rank: 877
score: 97.9248046875
patch: builder . continue ;
rank: 877
score: 97.8419189453125
patch: break = true ;
rank: 877
score: 97.799072265625
patch: throw parent ;
rank: 877
score: 97.69634246826172
patch: continue * }
rank: 877
score: 97.44203186035156
patch: throw ; }
rank: 877
score: 97.39064025878906
patch: = false ;
rank: 877
score: 97.21697998046875
patch: T continue ;
rank: 877
score: 95.82330322265625
patch: current ;
rank: 878
score: 97.92442626953125
patch: l . continue ;
rank: 878
score: 97.79873657226562
patch: found = true ;
rank: 878
score: 97.79393310546875
patch: return == null ;
rank: 878
score: 97.6942367553711
patch: } break ;
rank: 878
score: 97.44078063964844
patch: ; return ;
rank: 878
score: 97.38134002685547
patch: return changed ;
rank: 878
score: 95.81829833984375
patch: $STRING$ ;
rank: 879
score: 97.80292358398438
patch: Object . * /
rank: 879
score: 97.79469604492188
patch: return private ) ;
rank: 879
score: 97.79150390625
patch: ret = parent ;
rank: 879
score: 97.78616333007812
patch: break .
rank: 879
score: 97.67212677001953
patch: } finally {
rank: 879
score: 97.43704223632812
patch: } * /
rank: 879
score: 97.36189270019531
patch: result = )
rank: 879
score: 97.21024322509766
patch: Return continue ;
rank: 879
score: 95.77859497070312
patch: do
rank: 880
score: 97.92385864257812
patch: mod . continue ;
rank: 880
score: 97.7992919921875
patch: for ( Reference {
rank: 880
score: 97.64806365966797
patch: * * ;
rank: 880
score: 97.20897674560547
patch: M continue ;
rank: 880
score: 95.56475830078125
patch: System
rank: 881
score: 97.78453369140625
patch: return != null ;
rank: 881
score: 97.34840393066406
patch: return count ;
rank: 881
score: 97.20707702636719
patch: block continue ;
rank: 881
score: 95.50868225097656
patch: throw
rank: 882
score: 97.92271728515625
patch: / ++ continue ;
rank: 882
score: 97.34444427490234
patch: if ( )
rank: 882
score: 97.20521545410156
patch: continue ret ?
rank: 882
score: 95.25636291503906
patch: this
rank: 883
score: 97.922265625
patch: return ( true ;
rank: 883
score: 97.78502807617187
patch: throw 0 ; }
rank: 883
score: 97.71669006347656
patch: for * /
rank: 883
score: 97.66135660807292
patch: break :
rank: 883
score: 97.4086685180664
patch: continue / ;
rank: 883
score: 97.32768249511719
patch: else / /
rank: 883
score: 97.2049789428711
patch: AST continue ;
rank: 883
score: 95.18638610839844
patch: int
rank: 884
score: 97.9212890625
patch: else { * ;
rank: 884
score: 97.65829467773438
patch: exception .
rank: 884
score: 97.20465850830078
patch: Tag continue ;
rank: 884
score: 95.17398071289062
patch: start
rank: 885
score: 97.5718485514323
patch: } }
rank: 885
score: 97.40064239501953
patch: continue ; null
rank: 885
score: 97.32550811767578
patch: return n ;
rank: 885
score: 97.20268249511719
patch: continue true ,
rank: 885
score: 95.14637756347656
patch: finally
rank: 886
score: 97.92015991210937
patch: continue { * /
rank: 886
score: 97.77850341796875
patch: throw ! ret ;
rank: 886
score: 97.5501937866211
patch: case null ;
rank: 886
score: 97.39836120605469
patch: t . ;
rank: 886
score: 97.31864929199219
patch: / finally {
rank: 886
score: 97.19749450683594
patch: state continue ;
rank: 886
score: 95.087646484375
patch: {
rank: 887
score: 97.92006225585938
patch: else continue ; /
rank: 887
score: 97.77718505859374
patch: res = false ;
rank: 887
score: 97.76343383789063
patch: return new ? ;
rank: 887
score: 97.66073608398438
patch: continue ) {
rank: 887
score: 97.37975311279297
patch: AOM . ;
rank: 887
score: 97.31821695963542
patch: this .
rank: 887
score: 97.19457244873047
patch: continue ( )
rank: 887
score: 95.06044006347656
patch: String
rank: 888
score: 97.91834716796875
patch: context . continue ;
rank: 888
score: 97.77154541015625
patch: t = false ;
rank: 888
score: 97.379150390625
patch: check ; ;
rank: 888
score: 97.31527709960938
patch: throw VAR ;
rank: 888
score: 97.1928939819336
patch: If continue ;
rank: 888
score: 94.9524917602539
patch: ret
rank: 889
score: 97.62786865234375
patch: ) {
rank: 889
score: 97.37899017333984
patch: continue code .
rank: 889
score: 97.311767578125
patch: return true .
rank: 889
score: 97.19053141276042
patch: continue finally
rank: 889
score: 94.94368743896484
patch: check
rank: 890
score: 97.6176986694336
patch: This . {
rank: 890
score: 97.5101318359375
patch: result = ;
rank: 890
score: 97.37373352050781
patch: continue block ;
rank: 890
score: 97.18975830078125
patch: incr continue ;
rank: 890
score: 94.85664367675781
patch: *
rank: 891
score: 97.91510620117188
patch: children . continue ;
rank: 891
score: 97.7566162109375
patch: return ret ; else
rank: 891
score: 97.56671142578125
patch: code .
rank: 891
score: 97.36949920654297
patch: x . ;
rank: 891
score: 97.30030822753906
patch: return refs ;
rank: 891
score: 97.17860412597656
patch: continue false false
rank: 891
score: 94.75924682617188
patch: end
rank: 892
score: 97.9136962890625
patch: next true continue ;
rank: 892
score: 97.74869995117187
patch: return true ; )
rank: 892
score: 97.56189727783203
patch: break * /
rank: 892
score: 97.29490661621094
patch: return empty ;
rank: 892
score: 97.17642974853516
patch: continue false :
rank: 892
score: 94.75398254394531
patch: LOG
rank: 893
score: 97.91312255859376
patch: cb . continue ;
rank: 893
score: 97.55443572998047
patch: break ) {
rank: 893
score: 97.36583709716797
patch: continue visit ;
rank: 893
score: 97.29235076904297
patch: System . else
rank: 893
score: 97.17491149902344
patch: continue false else
rank: 893
score: 94.71943664550781
patch: long
rank: 894
score: 97.911767578125
patch: continue { ; }
rank: 894
score: 97.69165802001953
patch: return code ;
rank: 894
score: 97.36526489257812
patch: continue finally {
rank: 894
score: 97.29139709472656
patch: catch ( )
rank: 894
score: 97.16816711425781
patch: Object . .
rank: 894
score: 94.7115478515625
patch: out
rank: 895
score: 97.91138305664063
patch: else { try ;
rank: 895
score: 97.58403778076172
patch: NOTE * /
rank: 895
score: 97.52139282226562
patch: continue : }
rank: 895
score: 97.48539733886719
patch: { return ;
rank: 895
score: 97.36055755615234
patch: return ! ;
rank: 895
score: 97.28771209716797
patch: } } }
rank: 895
score: 97.15857696533203
patch: continue / *
rank: 895
score: 94.70246887207031
patch: set
rank: 896
score: 97.9097900390625
patch: try { continue {
rank: 896
score: 97.28220621744792
patch: System .
rank: 896
score: 94.69256591796875
patch: count
rank: 897
score: 97.90912475585938
patch: location . continue ;
rank: 897
score: 97.51763916015625
patch: return ( parent
rank: 897
score: 97.47402954101562
patch: ? continue ;
rank: 897
score: 97.35501098632812
patch: continue * *
rank: 897
score: 97.27615356445312
patch: return ERROR ;
rank: 897
score: 94.6891860961914
patch: buffer
rank: 898
score: 97.71031188964844
patch: return name ;
rank: 898
score: 97.56877899169922
patch: null * /
rank: 898
score: 97.2743911743164
patch: Preconditions . }
rank: 898
score: 97.1386210123698
patch: continue first
rank: 898
score: 94.68704986572266
patch: default
rank: 899
score: 97.5028305053711
patch: continue : else
rank: 899
score: 97.46623229980469
patch: || continue ;
rank: 899
score: 97.27189636230469
patch: else try {
rank: 899
score: 97.13803100585938
patch: continue false *
rank: 899
score: 94.61071014404297
patch: boolean
rank: 900
score: 97.132568359375
patch: do * /
rank: 900
score: 94.59339141845703
patch: logger
rank: 901
score: 97.54499816894531
patch: if ( {
rank: 901
score: 97.49650573730469
patch: break . ;
rank: 901
score: 97.34403991699219
patch: continue add ;
rank: 901
score: 94.50285339355469
patch: next
rank: 902
score: 97.63706970214844
patch: throw node ;
rank: 902
score: 97.41744995117188
patch: continue * ?
rank: 902
score: 97.34397888183594
patch: finally { ;
rank: 902
score: 97.26859283447266
patch: ref . {
rank: 902
score: 94.48895263671875
patch: current
rank: 903
score: 97.60664876302083
patch: Preconditions .
rank: 903
score: 97.5372314453125
patch: ! * /
rank: 903
score: 97.48793029785156
patch: continue . else
rank: 903
score: 97.4166488647461
patch: } } else
rank: 903
score: 97.34383392333984
patch: cfw . ;
rank: 903
score: 97.26544189453125
patch: continue ?
rank: 903
score: 94.4462890625
patch: public
rank: 904
score: 97.8656997680664
patch: } * ;
rank: 904
score: 97.62064361572266
patch: throw name ;
rank: 904
score: 97.52102661132812
patch: : * /
rank: 904
score: 97.46017456054688
patch: if ( parent
rank: 904
score: 97.33805847167969
patch: continue null ?
rank: 904
score: 94.44268798828125
patch: t
rank: 905
score: 97.61226654052734
patch: throw $NUMBER$ ;
rank: 905
score: 97.5098876953125
patch: if ( }
rank: 905
score: 97.32148742675781
patch: helper . ;
rank: 905
score: 97.25614166259766
patch: / / else
rank: 905
score: 94.41886138916016
patch: break
rank: 906
score: 97.78892517089844
patch: case 0 ;
rank: 906
score: 97.59838104248047
patch: throw n ;
rank: 906
score: 97.32002258300781
patch: L . ;
rank: 906
score: 97.25032043457031
patch: return ( )
rank: 906
score: 97.10765838623047
patch: final int ;
rank: 906
score: 94.3897705078125
patch: super
rank: 907
score: 97.48703002929688
patch: , * /
rank: 907
score: 97.40380859375
patch: && continue ;
rank: 907
score: 97.31329345703125
patch: that . ;
rank: 907
score: 97.24553680419922
patch: / / .
rank: 907
score: 94.33758544921875
patch: display
rank: 908
score: 97.74415588378906
patch: } * *
rank: 908
score: 97.40303802490234
patch: { else {
rank: 908
score: 97.30830383300781
patch: continue err ;
rank: 908
score: 97.24179077148438
patch: ref . }
rank: 908
score: 94.31964874267578
patch: found
rank: 909
score: 97.74303436279297
patch: out . ;
rank: 909
score: 97.5672378540039
patch: continue VAR ;
rank: 909
score: 97.4815673828125
patch: this . {
rank: 909
score: 97.30496215820312
patch: r . ;
rank: 909
score: 97.23832194010417
patch: e .
rank: 909
score: 97.09859466552734
patch: continue parent .
rank: 909
score: 94.31218719482422
patch: register
rank: 910
score: 97.73784637451172
patch: value . ;
rank: 910
score: 97.57791137695312
patch: throw list ;
rank: 910
score: 97.38329315185547
patch: return current ;
rank: 910
score: 94.30534362792969
patch: case
rank: 911
score: 97.30060577392578
patch: continue - 1
rank: 911
score: 97.2288818359375
patch: return / /
rank: 911
score: 97.09699249267578
patch: continue true ?
rank: 911
score: 94.30271911621094
patch: error
rank: 912
score: 97.7261734008789
patch: catch null ;
rank: 912
score: 97.46381378173828
patch: VAR . {
rank: 912
score: 97.3775863647461
patch: } try {
rank: 912
score: 97.077880859375
patch: continue default
rank: 912
score: 94.29789733886719
patch: !
rank: 913
score: 97.7207260131836
patch: next continue ;
rank: 913
score: 97.29989624023438
patch: ; / *
rank: 913
score: 97.17775472005208
patch: parent .
rank: 913
score: 94.27460479736328
patch: last
rank: 914
score: 97.69268798828125
patch: / else {
rank: 914
score: 97.48017883300781
patch: ret = ;
rank: 914
score: 97.40838623046875
patch: state .
rank: 914
score: 97.37098693847656
patch: case null ?
rank: 914
score: 97.1598612467448
patch: assignment .
rank: 914
score: 97.05258178710938
patch: do {
rank: 914
score: 94.25535583496094
patch: true
rank: 915
score: 97.67799377441406
patch: catch false ;
rank: 915
score: 97.47554016113281
patch: continue / ?
rank: 915
score: 97.29737854003906
patch: L $NUMBER$ ;
rank: 915
score: 94.21784973144531
patch: value
rank: 916
score: 97.67243957519531
patch: item continue ;
rank: 916
score: 97.47368621826172
patch: return null )
rank: 916
score: 97.36695098876953
patch: { if ;
rank: 916
score: 97.29689025878906
patch: This . ;
rank: 916
score: 97.14136759440105
patch: LOG .
rank: 916
score: 96.99990844726562
patch: continue 1
rank: 916
score: 94.20320892333984
patch: c
rank: 917
score: 96.97585042317708
patch: final ;
rank: 917
score: 94.19979858398438
patch: _
rank: 918
score: 97.66488647460938
patch: char continue ;
rank: 918
score: 97.40691375732422
patch: $STRING$ * /
rank: 918
score: 97.28004455566406
patch: continue label ;
rank: 918
score: 96.91560872395833
patch: continue do
rank: 918
score: 94.06512451171875
patch: Assert
rank: 919
score: 97.65682983398438
patch: while false ;
rank: 919
score: 97.52978515625
patch: throw next ;
rank: 919
score: 97.40648651123047
patch: { break ;
rank: 919
score: 97.2784423828125
patch: ; finally {
rank: 919
score: 97.0069580078125
patch: finally {
rank: 919
score: 94.06470489501953
patch: to
rank: 920
score: 97.64616394042969
patch: if null false
rank: 920
score: 97.403564453125
patch: Preconditions . {
rank: 920
score: 97.3765869140625
patch: continue : ;
rank: 920
score: 97.34977722167969
patch: System . ;
rank: 920
score: 97.27696228027344
patch: while ; ;
rank: 920
score: 96.9431660970052
patch: out .
rank: 920
score: 94.0602798461914
patch: pos
rank: 921
score: 97.34893035888672
patch: case false ;
rank: 921
score: 97.33917236328125
patch: { try {
rank: 921
score: 96.88523356119792
patch: catch ;
rank: 921
score: 94.0510482788086
patch: val
rank: 922
score: 96.90043131510417
patch: ret (
rank: 922
score: 96.86140950520833
patch: continue value
rank: 922
score: 94.04058074951172
patch: $STRING$
rank: 923
score: 97.34617614746094
patch: , continue ;
rank: 923
score: 97.26780700683594
patch: for ; ;
rank: 923
score: 97.23511759440105
patch: continue (
rank: 923
score: 96.8868408203125
patch: else }
rank: 923
score: 96.80812581380208
patch: x .
rank: 923
score: 94.01807403564453
patch: retval
rank: 924
score: 97.47603607177734
patch: return . ;
rank: 924
score: 97.4102783203125
patch: return .
rank: 924
score: 97.21134440104167
patch: found .
rank: 924
score: 96.87005615234375
patch: warn .
rank: 924
score: 96.80279541015625
patch: t .
rank: 924
score: 94.01647186279297
patch: not
rank: 925
score: 97.61984252929688
patch: else { ;
rank: 925
score: 97.40864562988281
patch: return new ;
rank: 925
score: 94.00852966308594
patch: method
rank: 926
score: 97.16812133789062
patch: break {
rank: 926
score: 96.86665852864583
patch: err .
rank: 926
score: 96.78312174479167
patch: bug .
rank: 926
score: 94.00245666503906
patch: This
rank: 927
score: 96.859375
patch: literal .
rank: 927
score: 96.77292887369792
patch: continue $NUMBER$
rank: 927
score: 93.99600219726562
patch: code
rank: 928
score: 97.6104736328125
patch: } *
rank: 928
score: 97.40930938720703
patch: throw target ;
rank: 928
score: 97.26040649414062
patch: public Object ;
rank: 928
score: 93.97776794433594
patch: final
rank: 929
score: 97.39076232910156
patch: throw ) ;
rank: 929
score: 97.34413146972656
patch: y . {
rank: 929
score: 97.3145751953125
patch: if null {
rank: 929
score: 97.2603530883789
patch: public void ;
rank: 929
score: 96.83524576822917
patch: ex .
rank: 929
score: 96.75923665364583
patch: add ;
rank: 929
score: 93.96012878417969
patch: type
rank: 930
score: 97.33934783935547
patch: } ref .
rank: 930
score: 97.31416320800781
patch: case null }
rank: 930
score: 96.8338623046875
patch: else .
rank: 930
score: 93.94164276123047
patch: scope
rank: 931
score: 97.0308329264323
patch: n .
rank: 931
score: 96.83089192708333
patch: log .
rank: 931
score: 93.92925262451172
patch: thread
rank: 932
score: 97.58624267578125
patch: i continue ;
rank: 932
score: 97.3380126953125
patch: y ++ ;
rank: 932
score: 97.30874633789062
patch: return filter ;
rank: 932
score: 97.25129699707031
patch: continue package .
rank: 932
score: 96.82565307617188
patch: val .
rank: 932
score: 96.7242431640625
patch: frame .
rank: 932
score: 93.92876434326172
patch: first
rank: 933
score: 97.5858383178711
patch: Result continue ;
rank: 933
score: 97.3593978881836
patch: throw break ;
rank: 933
score: 97.2425765991211
patch: this ; }
rank: 933
score: 96.80037434895833
patch: This .
rank: 933
score: 96.70519002278645
patch: z .
rank: 933
score: 93.92774963378906
patch: Throwable
rank: 934
score: 97.581298828125
patch: } continue {
rank: 934
score: 97.37161254882812
patch: break true ;
rank: 934
score: 97.33350626627605
patch: y (
rank: 934
score: 97.29515075683594
patch: return end ;
rank: 934
score: 97.2415771484375
patch: warn . ;
rank: 934
score: 96.76236979166667
patch: / ?
rank: 934
score: 93.92378234863281
patch: Logger
rank: 935
score: 97.37003326416016
patch: return child CaMeL
rank: 935
score: 97.35358428955078
patch: throw TRUE ;
rank: 935
score: 97.24129486083984
patch: add ; ;
rank: 935
score: 96.99810791015625
patch: se .
rank: 935
score: 96.73870849609375
patch: Error CaMeL
rank: 935
score: 96.694580078125
patch: synchronized ;
rank: 935
score: 93.91607666015625
patch: iterator
rank: 936
score: 97.34918212890625
patch: throw default ;
rank: 936
score: 97.28422546386719
patch: return set ;
rank: 936
score: 97.22797393798828
patch: handling * /
rank: 936
score: 96.99385579427083
patch: schema .
rank: 936
score: 96.7271016438802
patch: self .
rank: 936
score: 93.89239501953125
patch: Offset
rank: 937
score: 97.3580322265625
patch: return code .
rank: 937
score: 97.34645080566406
patch: return parent ;
rank: 937
score: 97.28123474121094
patch: } else else
rank: 937
score: 97.2246322631836
patch: This ; ;
rank: 937
score: 96.68726603190105
patch: target .
rank: 937
score: 93.88970947265625
patch: (
rank: 938
score: 97.34375
patch: continue $STRING$
rank: 938
score: 97.22213745117188
patch: n = ;
rank: 938
score: 96.95267740885417
patch: break )
rank: 938
score: 96.67386881510417
patch: fail ;
rank: 938
score: 93.85853576660156
patch: print
rank: 939
score: 97.56204223632812
patch: ++ continue ;
rank: 939
score: 97.25245666503906
patch: continue if ;
rank: 939
score: 96.94580078125
patch: xml .
rank: 939
score: 96.66958618164062
patch: continue in
rank: 939
score: 96.64571126302083
patch: info .
rank: 939
score: 93.85760498046875
patch: @
rank: 940
score: 97.3375244140625
patch: return ALL ;
rank: 940
score: 97.21733093261719
patch: continue Token ;
rank: 940
score: 96.63454182942708
patch: break }
rank: 940
score: 93.84049987792969
patch: --
rank: 941
score: 97.32706451416016
patch: return var ;
rank: 941
score: 96.92345174153645
patch: cfw .
rank: 941
score: 96.61749267578125
patch: logger .
rank: 941
score: 93.83763122558594
patch: false
rank: 942
score: 97.31929779052734
patch: throw key ;
rank: 942
score: 97.21548461914062
patch: s . ;
rank: 942
score: 96.92201741536458
patch: break (
rank: 942
score: 96.61525472005208
patch: f .
rank: 942
score: 93.82707214355469
patch: parent
rank: 943
score: 97.31602478027344
patch: throw size ;
rank: 943
score: 97.20878601074219
patch: warn ( ;
rank: 943
score: 96.91759236653645
patch: break ?
rank: 943
score: 93.82438659667969
patch: m
rank: 944
score: 97.30484771728516
patch: return name .
rank: 944
score: 96.896240234375
patch: throw {
rank: 944
score: 96.64047241210938
patch: continue this
rank: 944
score: 96.60428873697917
patch: value .
rank: 944
score: 93.81838989257812
patch: param
rank: 945
score: 97.30421447753906
patch: return ) )
rank: 945
score: 97.20645904541016
patch: Object ; ;
rank: 945
score: 96.63572184244792
patch: action .
rank: 945
score: 96.60347493489583
patch: / }
rank: 945
score: 93.81685638427734
patch: buf
rank: 946
score: 97.29046630859375
patch: continue VAR
rank: 946
score: 97.23038482666016
patch: return in ;
rank: 946
score: 97.20431518554688
patch: sb . ;
rank: 946
score: 96.86505126953125
patch: return {
rank: 946
score: 96.63364664713542
patch: b .
rank: 946
score: 93.79441833496094
patch: post
rank: 947
score: 97.52810668945312
patch: catch null )
rank: 947
score: 97.30416107177734
patch: . continue ;
rank: 947
score: 97.2292709350586
patch: ? return ;
rank: 947
score: 97.2037353515625
patch: @ * /
rank: 947
score: 96.9834696451823
patch: y .
rank: 947
score: 96.8621826171875
patch: loop .
rank: 947
score: 93.78433227539062
patch: java
rank: 948
score: 97.52571868896484
patch: Node continue ;
rank: 948
score: 97.29931640625
patch: throw iterator ;
rank: 948
score: 97.22816467285156
patch: return get ;
rank: 948
score: 97.2014389038086
patch: z . ;
rank: 948
score: 96.85955810546875
patch: VM }
rank: 948
score: 93.76963806152344
patch: context
rank: 949
score: 97.29911041259766
patch: throw var ;
rank: 949
score: 97.22686767578125
patch: continue * false
rank: 949
score: 97.2222188313802
patch: continue ref
rank: 949
score: 96.97939046223958
patch: it .
rank: 949
score: 96.58760579427083
patch: / .
rank: 949
score: 93.76879119873047
patch: exception
rank: 950
score: 97.50355529785156
patch: next ( ;
rank: 950
score: 97.19532775878906
patch: throw ; ;
rank: 950
score: 96.85036214192708
patch: continue private
rank: 950
score: 93.76407623291016
patch: msg
rank: 951
score: 97.19493103027344
patch: continue name ;
rank: 951
score: 96.81441243489583
patch: break *
rank: 951
score: 96.59591674804688
patch: show ;
rank: 951
score: 93.75458526611328
patch: node
rank: 952
score: 97.50038146972656
patch: catch null false
rank: 952
score: 96.95128377278645
patch: NOTE (
rank: 952
score: 96.81149291992188
patch: att .
rank: 952
score: 96.579833984375
patch: continue &&
rank: 952
score: 93.75239562988281
patch: g
rank: 953
score: 97.49488830566406
patch: if 0 ;
rank: 953
score: 97.27381896972656
patch: throw case ;
rank: 953
score: 97.193115234375
patch: . . ;
rank: 953
score: 96.94551595052083
patch: VAR .
rank: 953
score: 93.74153137207031
patch: virtual
rank: 954
score: 97.19227600097656
patch: http * /
rank: 954
score: 96.90829467773438
patch: for (
rank: 954
score: 96.89369710286458
patch: case null
rank: 954
score: 96.80584716796875
patch: default .
rank: 954
score: 96.55202229817708
patch: re .
rank: 954
score: 96.5518798828125
patch: declarations .
rank: 954
score: 93.73832702636719
patch: r@@
rank: 955
score: 97.491943359375
patch: Element continue ;
rank: 955
score: 97.19183349609375
patch: t ; ;
rank: 955
score: 96.79960123697917
patch: outer .
rank: 955
score: 93.737548828125
patch: ex
rank: 956
score: 97.26123809814453
patch: return size ;
rank: 956
score: 96.7969970703125
patch: case :
rank: 956
score: 96.53397623697917
patch: continue type
rank: 956
score: 96.525390625
patch: throw .
rank: 956
score: 93.72286987304688
patch: owner
rank: 957
score: 96.85479736328125
patch: supported .
rank: 957
score: 96.79266357421875
patch: meth .
rank: 957
score: 96.52911376953125
patch: t ;
rank: 957
score: 96.51690673828125
patch: name .
rank: 957
score: 93.71733093261719
patch: Debug
rank: 958
score: 97.10432942708333
patch: . ;
rank: 958
score: 96.83059692382812
patch: Reference .
rank: 958
score: 96.7914530436198
patch: body .
rank: 958
score: 96.7902323404948
patch: case ;
rank: 958
score: 96.5143534342448
patch: if (
rank: 958
score: 93.71727752685547
patch: n
rank: 959
score: 97.4798583984375
patch: int * /
rank: 959
score: 96.92942301432292
patch: continue prototype
rank: 959
score: 96.75631713867188
patch: binding .
rank: 959
score: 96.72062174479167
patch: } finally
rank: 959
score: 96.49876912434895
patch: continue to
rank: 959
score: 93.71342468261719
patch: log
rank: 960
score: 97.47828674316406
patch: m false ;
rank: 960
score: 96.8911641438802
patch: continue target
rank: 960
score: 96.75545247395833
patch: failed .
rank: 960
score: 96.50684611002605
patch: error .
rank: 960
score: 96.49581909179688
patch: http :
rank: 960
score: 93.71278381347656
patch: offset
rank: 961
score: 96.88489786783855
patch: continue object
rank: 961
score: 96.7964579264323
patch: refs .
rank: 961
score: 96.74825032552083
patch: cached .
rank: 961
score: 96.64476521809895
patch: this {
rank: 961
score: 96.50189208984375
patch: writer .
rank: 961
score: 96.47055053710938
patch: set ;
rank: 961
score: 93.68891906738281
patch: copy
rank: 962
score: 97.46514892578125
patch: for null )
rank: 962
score: 97.2090072631836
patch: gramps .
rank: 962
score: 96.78179931640625
patch: for new
rank: 962
score: 96.73077392578125
patch: params .
rank: 962
score: 96.62369791666667
patch: if null
rank: 962
score: 96.48434448242188
patch: / :
rank: 962
score: 96.44474283854167
patch: continue ,
rank: 962
score: 93.68677520751953
patch: VM
rank: 963
score: 97.4642105102539
patch: TRUE continue ;
rank: 963
score: 96.71999104817708
patch: { {
rank: 963
score: 96.71729532877605
patch: arguments .
rank: 963
score: 96.43253580729167
patch: J ;
rank: 963
score: 93.68255615234375
patch: e
rank: 964
score: 96.71585083007812
patch: impl .
rank: 964
score: 96.58455403645833
patch: break false
rank: 964
score: 96.4756368001302
patch: Log .
rank: 964
score: 93.66928100585938
patch: dim
rank: 965
score: 96.69430541992188
patch: for null
rank: 965
score: 96.47188313802083
patch: m .
rank: 965
score: 93.66606140136719
patch: block
rank: 966
score: 97.45919799804688
patch: Attr continue ;
rank: 966
score: 96.75880940755208
patch: Object ;
rank: 966
score: 96.70187377929688
patch: ch .
rank: 966
score: 96.54923502604167
patch: Set ;
rank: 966
score: 96.40672810872395
patch: continue method
rank: 966
score: 93.66563415527344
patch: before
rank: 967
score: 97.45492553710938
patch: key continue ;
rank: 967
score: 96.6670633951823
patch: cases .
rank: 967
score: 96.45534261067708
patch: result .
rank: 967
score: 96.40242513020833
patch: type .
rank: 967
score: 93.66459655761719
patch: org
rank: 968
score: 96.44967651367188
patch: reference .
rank: 968
score: 93.66433715820312
patch: debug
rank: 969
score: 96.69043986002605
patch: lower .
rank: 969
score: 96.63319905598958
patch: able .
rank: 969
score: 96.4492696126302
patch: simple .
rank: 969
score: 96.39939371744792
patch: continue static
rank: 969
score: 93.64328002929688
patch: h
rank: 970
score: 97.10750325520833
patch: catch null
rank: 970
score: 96.85573323567708
patch: throw (
rank: 970
score: 96.67576090494792
patch: warn ;
rank: 970
score: 96.4917500813802
patch: false {
rank: 970
score: 96.39882405598958
patch: continue not
rank: 970
score: 93.63278198242188
patch: sb
rank: 971
score: 96.68165079752605
patch: match .
rank: 971
score: 96.6240946451823
patch: null .
rank: 971
score: 96.4909159342448
patch: ( ;
rank: 971
score: 96.42333984375
patch: ioe .
rank: 971
score: 96.39713541666667
patch: my .
rank: 971
score: 93.63035583496094
patch: curr
rank: 972
score: 97.0730489095052
patch: catch false
rank: 972
score: 96.67714436848958
patch: scope .
rank: 972
score: 96.41975911458333
patch: result (
rank: 972
score: 96.39335123697917
patch: continue match
rank: 972
score: 93.62992095947266
patch: b
rank: 973
score: 96.60540771484375
patch: . .
rank: 973
score: 96.4183349609375
patch: sb .
rank: 973
score: 93.62062072753906
patch: runnable
rank: 974
score: 96.70399983723958
patch: throw private
rank: 974
score: 96.65892537434895
patch: attribute .
rank: 974
score: 96.6410624186198
patch: while ;
rank: 974
score: 96.4140116373698
patch: synchronized (
rank: 974
score: 96.38873291015625
patch: r .
rank: 974
score: 93.61918640136719
patch: Error
rank: 975
score: 96.54909261067708
patch: { }
rank: 975
score: 96.41171264648438
patch: ret .
rank: 975
score: 96.38820393880208
patch: exc .
rank: 975
score: 93.610107421875
patch: content
rank: 976
score: 96.64070638020833
patch: adapter .
rank: 976
score: 96.59459431966145
patch: continue name
rank: 976
score: 96.58693440755208
patch: ; }
rank: 976
score: 96.54794311523438
patch: x (
rank: 976
score: 96.39981079101562
patch: { else
rank: 976
score: 93.60012817382812
patch: v
rank: 977
score: 96.6322530110677
patch: block .
rank: 977
score: 96.36803181966145
patch: continue label
rank: 977
score: 93.59721374511719
patch: output
rank: 978
score: 96.63009643554688
patch: VM )
rank: 978
score: 96.5472920735677
patch: ret {
rank: 978
score: 96.3865966796875
patch: f ;
rank: 978
score: 93.59539794921875
patch: message
rank: 979
score: 96.62184651692708
patch: head .
rank: 979
score: 96.35952758789062
patch: thread .
rank: 979
score: 93.59442138671875
patch: ctx
rank: 980
score: 96.62088012695312
patch: stack .
rank: 980
score: 96.4957275390625
patch: This ;
rank: 980
score: 96.36971028645833
patch: = ;
rank: 980
score: 96.34619140625
patch: text .
rank: 980
score: 95.54959106445312
patch: )
rank: 980
score: 93.59376525878906
patch: record
rank: 981
score: 96.8320821126302
patch: m false
rank: 981
score: 96.61191813151042
patch: loader .
rank: 981
score: 96.50380452473958
patch: pass .
rank: 981
score: 93.57374572753906
patch: max
rank: 982
score: 96.80269368489583
patch: if false
rank: 982
score: 96.6102294921875
patch: finished .
rank: 982
score: 96.47336832682292
patch: s ;
rank: 982
score: 96.34104410807292
patch: test .
rank: 982
score: 96.31067911783855
patch: list .
rank: 982
score: 93.57315063476562
patch: fail
rank: 983
score: 96.70477294921875
patch: x false
rank: 983
score: 96.60878499348958
patch: } )
rank: 983
score: 96.34051513671875
patch: report ;
rank: 983
score: 95.68161010742188
patch: ?
rank: 983
score: 93.56158447265625
patch: flags
rank: 984
score: 96.69845581054688
patch: m null
rank: 984
score: 96.60643513997395
patch: sent .
rank: 984
score: 96.52650960286458
patch: continue declarations
rank: 984
score: 96.42559814453125
patch: n ;
rank: 984
score: 95.30769348144531
patch: null
rank: 984
score: 93.56138610839844
patch: insert
rank: 985
score: 96.60214233398438
patch: IGNORED .
rank: 985
score: 96.42237345377605
patch: switch ;
rank: 985
score: 96.39884440104167
patch: throw new
rank: 985
score: 95.18798828125
patch: .
rank: 985
score: 93.5531997680664
patch: local
rank: 986
score: 96.5934346516927
patch: Reduction .
rank: 986
score: 96.3788350423177
patch: throw }
rank: 986
score: 96.3319091796875
patch: l .
rank: 986
score: 93.54812622070312
patch: my
rank: 987
score: 96.58793131510417
patch: search .
rank: 987
score: 96.40892537434895
patch: target ;
rank: 987
score: 94.96546936035156
patch: :
rank: 987
score: 93.52548217773438
patch: line
rank: 988
score: 96.6495869954427
patch: * *
rank: 988
score: 96.58571370442708
patch: owner .
rank: 988
score: 96.48215738932292
patch: continue maybe
rank: 988
score: 94.74008178710938
patch: object
rank: 988
score: 93.5240707397461
patch: loop
rank: 989
score: 96.5841064453125
patch: init .
rank: 989
score: 93.52169799804688
patch: arg
rank: 990
score: 96.58383178710938
patch: changed .
rank: 990
score: 94.72242736816406
patch: We
rank: 990
score: 93.52006530761719
patch: cur
rank: 991
score: 96.58298746744792
patch: forward .
rank: 991
score: 93.51202392578125
patch: remaining
rank: 992
score: 96.58155314127605
patch: messages .
rank: 992
score: 96.33870442708333
patch: y ;
rank: 992
score: 93.51136779785156
patch: re@@
rank: 993
score: 96.29897054036458
patch: number ;
rank: 993
score: 94.64939880371094
patch: supported
rank: 993
score: 94.52006530761719
patch: layout
rank: 993
score: 93.51097106933594
patch: expr
rank: 994
score: 94.83783721923828
patch: ++
rank: 994
score: 94.64889526367188
patch: VAR
rank: 994
score: 93.51033020019531
patch: trace
rank: 995
score: 96.26603190104167
patch: that ;
rank: 995
score: 94.64714050292969
patch: Only
rank: 995
score: 94.3705062866211
patch: changed
rank: 995
score: 93.5042495727539
patch: state
rank: 996
score: 96.26173909505208
patch: invoke ;
rank: 996
score: 95.07688903808594
patch: TRUE
rank: 996
score: 94.73328399658203
patch: in
rank: 996
score: 94.618408203125
patch: will
rank: 996
score: 94.31297302246094
patch: filter
rank: 996
score: 93.49955749511719
patch: ok
rank: 997
score: 94.27903747558594
patch: prev
rank: 997
score: 93.4913330078125
patch: expression
rank: 998
score: 94.83792114257812
patch: Object
rank: 998
score: 94.63523864746094
patch: private
rank: 998
score: 93.4913101196289
patch: token
rank: 999
score: 94.47991943359375
patch: assert
rank: 999
score: 93.49022674560547
patch: My@@
rank: 1000
score: 94.09898376464844
patch: list
rank: 1000
score: 93.48933410644531
patch: limit
