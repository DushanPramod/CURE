rank: 1
score: 99.800048828125
patch: return i ;
rank: 1
score: 99.65479125976563
patch: return i ; }
rank: 2
score: 99.62400817871094
patch: return INDEX _ NOT _ FOUND ;
rank: 2
score: 99.56965467664931
patch: return search CaMeL Chars [ j ] ;
rank: 2
score: 99.5557149251302
patch: return i ; } }
rank: 2
score: 99.54008483886719
patch: return 0 ;
rank: 2
score: 99.51264299665179
patch: return i ; return i ;
rank: 3
score: 99.36492919921875
patch: return i ; return - 1 ;
rank: 3
score: 99.29939270019531
patch: return 1 ;
rank: 3
score: 99.214111328125
patch: return i + 1 ; }
rank: 4
score: 99.497314453125
patch: return cs . char CaMeL At ( j ) ;
rank: 4
score: 99.48845757378473
patch: return INDEX _ NOT _ FOUND ; }
rank: 4
score: 99.37207794189453
patch: return i - 1 ; } }
rank: 4
score: 99.35908203125
patch: return i ; ;
rank: 4
score: 99.29875946044922
patch: return i ; } return i ;
rank: 4
score: 99.2088134765625
patch: return 0 ; }
rank: 5
score: 99.3811279296875
patch: return INDEX _ NOT _ FOUND ; } }
rank: 5
score: 99.32467886117789
patch: return search CaMeL Chars . char CaMeL At ( j ) ;
rank: 5
score: 99.296875
patch: return i - 1 ; }
rank: 5
score: 99.28992638221153
patch: return i . index CaMeL Of CaMeL Any ( ch ) ;
rank: 5
score: 99.27219645182292
patch: return 0 ; } }
rank: 5
score: 99.26533726283482
patch: return 0 ; return i ;
rank: 5
score: 99.25311279296875
patch: return search CaMeL Chars [ j ] ; }
rank: 5
score: 99.20692443847656
patch: return i ; ; return i ;
rank: 5
score: 99.19582112630208
patch: return - 1 ; }
rank: 6
score: 99.31693522135417
patch: return search CaMeL Chars [ i ] ;
rank: 6
score: 99.31074662642045
patch: return this . search CaMeL Chars [ j ] ;
rank: 6
score: 99.27339172363281
patch: return i + 1 ; } }
rank: 6
score: 99.25234153053977
patch: return i . char CaMeL At ( j ) ;
rank: 6
score: 99.23447672526042
patch: return i ; } } return i ;
rank: 6
score: 99.22723388671875
patch: return i ; return i ; ;
rank: 6
score: 99.19326782226562
patch: return - 1 ;
rank: 7
score: 99.26880645751953
patch: return i ; break ; } }
rank: 7
score: 99.26158728966347
patch: return cs . index CaMeL Of CaMeL Any ( ch ) ;
rank: 7
score: 99.24086350661058
patch: return ( cs . char CaMeL At ( j ) ) ;
rank: 7
score: 99.180908203125
patch: return i + 1 ;
rank: 7
score: 99.11918640136719
patch: return - 1 ; return i ;
rank: 8
score: 99.27226118607955
patch: return cs . char CaMeL At ( i ) ;
rank: 8
score: 99.24097696940105
patch: if ( Character . is CaMeL Whitespace ( ch ) )
rank: 8
score: 99.23649458451705
patch: return index CaMeL Of CaMeL Any ( ch ) ;
rank: 8
score: 99.21094512939453
patch: return 0 ; } return i ;
rank: 8
score: 99.09722137451172
patch: return 0 ; ; return i ;
rank: 9
score: 99.25809420072116
patch: return this . cs . char CaMeL At ( j ) ;
rank: 9
score: 99.25045166015624
patch: return i + INDEX _ NOT _ FOUND ;
rank: 9
score: 99.22871907552083
patch: return i - 1 ;
rank: 9
score: 99.13128662109375
patch: return i ; break ; }
rank: 10
score: 99.25042169744319
patch: return i + search CaMeL Chars [ j ] ;
rank: 10
score: 99.21832275390625
patch: if ( Character . is CaMeL Digit ( ch ) )
rank: 10
score: 99.19984944661458
patch: return cs . char CaMeL At ( j ) ; }
rank: 10
score: 99.17826080322266
patch: return i ; } return 1 ;
rank: 10
score: 99.17109680175781
patch: return i ; } j ++ ;
rank: 10
score: 99.16506958007812
patch: return i ; if return i ;
rank: 10
score: 99.04757690429688
patch: return - i ; return i ;
rank: 11
score: 99.2375996907552
patch: return cs . char CaMeL At ( j ] ) ;
rank: 11
score: 99.2322665127841
patch: return search CaMeL Chars [ j ] + ch ;
rank: 11
score: 99.18354034423828
patch: return i + i ; } }
rank: 11
score: 99.16429138183594
patch: return i ; return i ; }
rank: 11
score: 99.15127902560764
patch: return 0 ; } } return i ;
rank: 11
score: 99.13052368164062
patch: return ( INDEX _ NOT _ FOUND ) ;
rank: 11
score: 99.12156846788194
patch: return index CaMeL Of ( ch ) ;
rank: 12
score: 99.22044677734375
patch: return i . to CaMeL String ( ) ;
rank: 12
score: 99.18065467247597
patch: return index CaMeL Of CaMeL Any ( cs , ch ) ;
rank: 12
score: 99.17208862304688
patch: return i ; ; }
rank: 12
score: 99.1636962890625
patch: return 0 ; return - 1 ;
rank: 12
score: 99.14575958251953
patch: return i ; } return 0 ;
rank: 12
score: 99.13013805042614
patch: throw new Illegal CaMeL Argument CaMeL Exception ( ) ;
rank: 12
score: 99.11966959635417
patch: character return INDEX _ NOT _ FOUND ;
rank: 13
score: 99.23492986505681
patch: return index CaMeL Of CaMeL Any ( cs ) ;
rank: 13
score: 99.21507679332386
patch: return i . index CaMeL Of ( ch ) ;
rank: 13
score: 99.1329574584961
patch: if return i ; return i ;
rank: 13
score: 99.11421966552734
patch: return 0 ; } return 1 ;
rank: 13
score: 99.09608968098958
patch: return cs CaMeL Len ;
rank: 13
score: 99.09108664772727
patch: return cs . index CaMeL Of ( ch ) ;
rank: 13
score: 99.00472586495536
patch: return - 1 ; break ;
rank: 14
score: 99.22512582632211
patch: return i ; } } return INDEX _ NOT _ FOUND ;
rank: 14
score: 99.19996226917614
patch: return i - search CaMeL Chars [ j ] ;
rank: 14
score: 99.15432739257812
patch: return i - i ; } }
rank: 14
score: 99.11918422154018
patch: return i ; return 0 ;
rank: 14
score: 99.11381530761719
patch: return i [ 0 ] ; }
rank: 14
score: 99.08333042689732
patch: return cs CaMeL Len ; }
rank: 14
score: 99.082373046875
patch: return INDEX _ NOT _ FOUND ; break ;
rank: 14
score: 98.99275207519531
patch: return i ; ; = i ;
rank: 14
score: 98.95578438895089
patch: return 0 ; break ; }
rank: 15
score: 99.21363243689903
patch: return cs . char CaMeL At ( j + 1 ) ;
rank: 15
score: 99.15050397600446
patch: return i ; } else {
rank: 15
score: 99.10404968261719
patch: return i ; } } if ;
rank: 15
score: 99.09577941894531
patch: return i ; return return 1 ;
rank: 15
score: 99.08137650923295
patch: throw new Null CaMeL Pointer CaMeL Exception ( ) ;
rank: 15
score: 98.94557189941406
patch: return - 1 ; break ; }
rank: 16
score: 99.14549763997395
patch: if ( Character . is CaMeL Whitespace ( ch ) ;
rank: 16
score: 99.09201049804688
patch: return i ; return - i ;
rank: 16
score: 99.0790127840909
patch: return INDEX _ NOT _ FOUND ; } } }
rank: 16
score: 99.07244873046875
patch: return 1 ; } }
rank: 16
score: 99.025146484375
patch: return char CaMeL At ( j ) ;
rank: 16
score: 98.97249058314732
patch: return 1 ; return i ;
rank: 16
score: 98.93119303385417
patch: return i ; break ;
rank: 17
score: 99.11015973772321
patch: return i ; } ; }
rank: 17
score: 99.08745574951172
patch: return i ; return return i ;
rank: 17
score: 99.073388671875
patch: return INDEX _ NOT _ FOUND ; } else
rank: 17
score: 99.07221137152777
patch: return i ; } } return 1 ;
rank: 17
score: 99.01465521918402
patch: = search CaMeL Chars [ j ] ;
rank: 17
score: 98.96858215332031
patch: return - 1 ; return 1 ;
rank: 17
score: 98.92951311383929
patch: = i ; break ; }
rank: 18
score: 99.18610088641827
patch: return index CaMeL Of CaMeL Any ( search CaMeL Chars ) ;
rank: 18
score: 99.10446166992188
patch: return index CaMeL Of CaMeL Any ( ch , ; }
rank: 18
score: 99.07970428466797
patch: return i ; else return i ;
rank: 18
score: 99.00028991699219
patch: return 0 ; } j ++ ;
rank: 18
score: 98.96665736607143
patch: return i ; return 1 ;
rank: 19
score: 99.17195951021634
patch: return cs . index CaMeL Of CaMeL Any ( cs ) ;
rank: 19
score: 99.10296630859375
patch: return index CaMeL Of CaMeL Any ( ch ) ; }
rank: 19
score: 99.0790786743164
patch: return i ; return - $STRING$ ;
rank: 19
score: 99.0661112467448
patch: return i ; } ;
rank: 19
score: 99.06385498046875
patch: { return INDEX _ NOT _ FOUND ; }
rank: 19
score: 98.99332275390626
patch: return 1 ; }
rank: 19
score: 98.96200561523438
patch: return i + i ;
rank: 20
score: 99.1687481219952
patch: return i . index CaMeL Of CaMeL Any ( cs ) ;
rank: 20
score: 99.10260009765625
patch: throw new Unsupported CaMeL Operation CaMeL Exception ( $STRING$ ) ;
rank: 20
score: 99.07852172851562
patch: return i ; for return i ;
rank: 20
score: 99.06218719482422
patch: return 0 ; } return 0 ;
rank: 20
score: 98.98586697048611
patch: return return INDEX _ NOT _ FOUND ;
rank: 21
score: 99.14341383713942
patch: return ( i . char CaMeL At ( j ) ) ;
rank: 21
score: 99.06716918945312
patch: return i ; while return i ;
rank: 21
score: 99.06192016601562
patch: return i - 0 ;
rank: 21
score: 99.05905151367188
patch: return cs . index CaMeL Of CaMeL Any ( ) ;
rank: 21
score: 98.9595235188802
patch: return i + 0 ;
rank: 21
score: 98.88307407924107
patch: if ( i == i )
rank: 22
score: 99.1307373046875
patch: return new int [ INDEX _ NOT _ FOUND ] ;
rank: 22
score: 99.10191650390625
patch: return i ; } } } return i ;
rank: 22
score: 99.0607681274414
patch: return i ; return - 0 ;
rank: 22
score: 99.0533447265625
patch: return INDEX _ NOT _ FOUND + i ;
rank: 22
score: 99.05076599121094
patch: return i * i ; } }
rank: 22
score: 98.98297119140625
patch: return cs . length ( ) ; }
rank: 22
score: 98.86814880371094
patch: return 0 ; return 0 ; }
rank: 23
score: 99.04894256591797
patch: return 1 ; } return i ;
rank: 23
score: 99.04795328776042
patch: return i ; ; if return i ;
rank: 23
score: 99.04777388139205
patch: return cs . INDEX _ NOT _ FOUND ; }
rank: 23
score: 98.96492004394531
patch: return cs CaMeL Len ; } }
rank: 23
score: 98.93942260742188
patch: return 1 ; ; return i ;
rank: 24
score: 99.1409160907452
patch: return search CaMeL Chars . char CaMeL At ( i ) ;
rank: 24
score: 99.13109334309895
patch: return i ? INDEX _ NOT _ FOUND : i ;
rank: 24
score: 99.08562469482422
patch: = i ; break ; } }
rank: 24
score: 99.04403686523438
patch: return i ; } else
rank: 24
score: 99.04147338867188
patch: return cs . INDEX _ NOT _ FOUND ;
rank: 24
score: 98.95111083984375
patch: return cs . length ( ) ;
rank: 24
score: 98.93497140066964
patch: return - i ; break ;
rank: 24
score: 98.86051177978516
patch: return i ; i ++ ; }
rank: 25
score: 99.140869140625
patch: return i ; } return INDEX _ NOT _ FOUND ;
rank: 25
score: 99.1291259765625
patch: return i * INDEX _ NOT _ FOUND ;
rank: 25
score: 99.0848388671875
patch: if ( i < search CaMeL Chars . length )
rank: 25
score: 99.0430679321289
patch: return i ; } else if ;
rank: 25
score: 99.02444458007812
patch: return return i ; return i ;
rank: 25
score: 99.01767800071023
patch: return INDEX _ NOT _ FOUND ; } break ;
rank: 25
score: 98.94832356770833
patch: return i ; } j ++ ; }
rank: 25
score: 98.92231750488281
patch: return $NUMBER$ ;
rank: 26
score: 99.12841796875
patch: return search CaMeL Chars [ j ] . length ( ) ;
rank: 26
score: 99.08408610026042
patch: if ( Character . is CaMeL Digit ( ch ) ;
rank: 26
score: 99.01712036132812
patch: return cs . char CaMeL At ( i ) ; }
rank: 26
score: 98.94701470269098
patch: { return INDEX _ NOT _ FOUND ;
rank: 26
score: 98.84483119419643
patch: [ j ] = i ;
rank: 27
score: 99.12797407670455
patch: return $STRING$ + search CaMeL Chars [ j ] ;
rank: 27
score: 99.08272298177083
patch: throw new Unsupported CaMeL Operation CaMeL Exception ( ) ; }
rank: 27
score: 99.03470865885417
patch: return i ; } else return i ;
rank: 27
score: 99.01387786865234
patch: return i ; if return 1 ;
rank: 27
score: 99.0109354654948
patch: return Char CaMeL Sequence . INDEX _ NOT _ FOUND ;
rank: 27
score: 98.9337158203125
patch: += search CaMeL Chars [ j ] ;
rank: 27
score: 98.90650939941406
patch: return i ; ; return 0 ;
rank: 27
score: 98.83909606933594
patch: return i ; return 0 ; }
rank: 28
score: 99.12131569602273
patch: return ( char ) INDEX _ NOT _ FOUND ;
rank: 28
score: 99.10564630681819
patch: return i . search CaMeL Chars [ j ] ;
rank: 28
score: 99.0705337524414
patch: return i ; } break ; }
rank: 28
score: 99.01649693080357
patch: . return i ; } }
rank: 28
score: 99.01036071777344
patch: return return 1 ; return i ;
rank: 28
score: 99.00927734375
patch: return cs . to CaMeL String ( ) ;
rank: 28
score: 98.92648315429688
patch: return new int [ i ] ;
rank: 28
score: 98.90435028076172
patch: return 0 ; ; = i ;
rank: 29
score: 99.06755719866071
patch: return i ; ; } }
rank: 29
score: 99.01252746582031
patch: return 0 ; } } if ;
rank: 29
score: 99.007275390625
patch: return 0 ; ;
rank: 29
score: 99.0001220703125
patch: return Array CaMeL Utils . INDEX _ NOT _ FOUND ;
rank: 29
score: 98.92253766741071
patch: return search CaMeL Len ; }
rank: 29
score: 98.88663482666016
patch: return - i ; return 1 ;
rank: 30
score: 99.12162475585937
patch: return this . INDEX _ NOT _ FOUND ;
rank: 30
score: 99.10303344726563
patch: search CaMeL Chars [ j ] = ch ;
rank: 30
score: 99.01173231336806
patch: return 1 ; } } return i ;
rank: 30
score: 99.00629534040179
patch: = i ; return i ;
rank: 30
score: 98.9990567294034
patch: return INDEX _ NOT _ FOUND ; } else {
rank: 30
score: 98.92060852050781
patch: return new int [ 0 ] ;
rank: 30
score: 98.88284737723214
patch: return 0 ; return 1 ;
rank: 31
score: 99.11995239257813
patch: return i - INDEX _ NOT _ FOUND ;
rank: 31
score: 99.1093037923177
patch: return new char [ INDEX _ NOT _ FOUND ] ;
rank: 31
score: 99.09368896484375
patch: return i ( cs . char CaMeL At ( j ) ) ;
rank: 31
score: 99.05047607421875
patch: return Integer . parse CaMeL Int ( ch ) ; }
rank: 31
score: 98.99424050071023
patch: return INDEX _ NOT _ FOUND ; } } else
rank: 31
score: 98.91805691189236
patch: return is CaMeL Empty ( ch ) ;
rank: 31
score: 98.87804412841797
patch: return 1 ; return - 1 ;
rank: 31
score: 98.81892613002232
patch: return i + i ; }
rank: 32
score: 99.11594460227273
patch: return ch . char CaMeL At ( j ) ;
rank: 32
score: 99.10777698863636
patch: return this . search CaMeL Chars [ i ] ;
rank: 32
score: 99.09363810221355
patch: return ( cs . char CaMeL At ( j ) ;
rank: 32
score: 99.03786399147727
patch: return index CaMeL Of CaMeL Any ( ch , ;
rank: 32
score: 99.00379180908203
patch: return i ; } } else {
rank: 32
score: 98.9939208984375
patch: } } return INDEX _ NOT _ FOUND ;
rank: 32
score: 98.9126205444336
patch: return i ; j ++ ; }
rank: 32
score: 98.81386021205357
patch: [ i ] = i ;
rank: 33
score: 99.111279296875
patch: return i + ch . length ( ) ;
rank: 33
score: 99.08932729867789
patch: return ( Char CaMeL Sequence ) INDEX _ NOT _ FOUND ;
rank: 33
score: 99.03494698660714
patch: return i ; } } ;
rank: 33
score: 99.00120544433594
patch: return i - 0 ; } }
rank: 33
score: 98.99899291992188
patch: return 0 ; return i ; ;
rank: 33
score: 98.99325561523438
patch: return cs . INDEX _ NOT _ FOUND ; } }
rank: 33
score: 98.90234375
patch: return - INDEX _ NOT _ FOUND ;
rank: 33
score: 98.86825561523438
patch: return i ; ; return 1 ;
rank: 33
score: 98.81267438616071
patch: return j + 1 ; }
rank: 34
score: 99.10765662560097
patch: return i - cs . char CaMeL At ( j ) ;
rank: 34
score: 99.10018310546874
patch: return new char [ cs CaMeL Len ] ;
rank: 34
score: 99.08753662109375
patch: return ( search CaMeL Chars [ j ] ;
rank: 34
score: 99.02878639914773
patch: throw new Unsupported CaMeL Operation CaMeL Exception ( ) ;
rank: 34
score: 99.00102233886719
patch: } else { return i ; }
rank: 34
score: 98.99734497070312
patch: return return i ;
rank: 34
score: 98.9891866048177
patch: throw new Illegal CaMeL Argument CaMeL Exception ( ) ; }
rank: 34
score: 98.89713541666667
patch: return search CaMeL Len ;
rank: 34
score: 98.85789489746094
patch: return - 1 ; return 0 ;
rank: 34
score: 98.80366516113281
patch: return j ;
rank: 35
score: 99.10696176382211
patch: return i . index CaMeL Of CaMeL Any ( $STRING$ ) ;
rank: 35
score: 99.02759467230902
patch: if ( i < search CaMeL Len )
rank: 35
score: 98.99820709228516
patch: return 0 ; } else if ;
rank: 35
score: 98.99356079101562
patch: return return 1 ;
rank: 35
score: 98.89450509207589
patch: return i ; } break ;
rank: 36
score: 99.091552734375
patch: return INDEX _ NOT _ FOUND . size ( ) ;
rank: 36
score: 98.9794034090909
patch: return INDEX _ NOT _ FOUND ; break ; }
rank: 36
score: 98.88874816894531
patch: return i ; } i ++ ;
rank: 36
score: 98.79674682617187
patch: return - i ;
rank: 37
score: 99.10286254882813
patch: return $STRING$ . to CaMeL String ( ) ;
rank: 37
score: 98.99354383680556
patch: . * * * / return i ;
rank: 37
score: 98.97835286458333
patch: return cs . to CaMeL Char CaMeL Array ( ) ;
rank: 37
score: 98.88453165690105
patch: return - 0 ; }
rank: 37
score: 98.84724934895833
patch: return i ; ; if i ++ ;
rank: 37
score: 98.79378836495536
patch: if ( i < i )
rank: 38
score: 99.07639723557692
patch: return index CaMeL Of CaMeL Any ( ch , ch ) ;
rank: 38
score: 99.01865641276042
patch: if ( search CaMeL Chars [ j ] == ch )
rank: 38
score: 98.99186488560268
patch: return 0 ; } else {
rank: 38
score: 98.97281901041667
patch: int search CaMeL Len = search CaMeL Chars . length ;
rank: 38
score: 98.88377549913194
patch: return index CaMeL Of ( cs ) ;
rank: 38
score: 98.84443664550781
patch: return i + i ; break ;
rank: 38
score: 98.79167175292969
patch: return ( i + 1 ) ;
rank: 39
score: 99.08247375488281
patch: return new char [ 0 ] ;
rank: 39
score: 99.01652018229167
patch: throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;
rank: 39
score: 98.97369384765625
patch: return i ; } if return i ;
rank: 39
score: 98.88267686631944
patch: = search CaMeL Chars [ i ] ;
rank: 39
score: 98.78214263916016
patch: return 0 ; i ++ ; }
rank: 40
score: 99.0775858561198
patch: return INDEX _ NOT _ FOUND ; } return i ;
rank: 40
score: 99.07374064127605
patch: return ( i . to CaMeL String ( ) ) ;
rank: 40
score: 99.01646205357143
patch: return - 1 ; } }
rank: 40
score: 98.99034881591797
patch: return 1 ; } return 1 ;
rank: 40
score: 98.97175598144531
patch: return i ; for return 1 ;
rank: 40
score: 98.88007269965277
patch: . return INDEX _ NOT _ FOUND ;
rank: 40
score: 98.77507019042969
patch: return 0 ; return 1 ; }
rank: 41
score: 99.0701904296875
patch: return search CaMeL Chars [ j ] == ch ;
rank: 41
score: 99.07014604048295
patch: return search CaMeL Chars [ cs CaMeL Len ] ;
rank: 41
score: 98.98833550347223
patch: return 0 ; } else return i ;
rank: 41
score: 98.86640276227679
patch: return cs . length ; }
rank: 41
score: 98.77249145507812
patch: return 0 ; break ;
rank: 42
score: 99.0683085123698
patch: return cs . char CaMeL At ( i ] ) ;
rank: 42
score: 99.00838216145833
patch: return i ; } else { return i ; } }
rank: 42
score: 98.98430633544922
patch: return 0 * i ; } }
rank: 42
score: 98.96152750651042
patch: return INDEX _ NOT _ FOUND ; } } else {
rank: 42
score: 98.95127868652344
patch: if return i ; return 0 ;
rank: 42
score: 98.86500379774306
patch: ) return INDEX _ NOT _ FOUND ;
rank: 42
score: 98.75922393798828
patch: return - i + 1 ; }
rank: 43
score: 99.09247295673077
patch: return ch . index CaMeL Of CaMeL Any ( ch ) ;
rank: 43
score: 99.067138671875
patch: return index CaMeL Of CaMeL Any ( i ) ;
rank: 43
score: 99.06638746995192
patch: return index CaMeL Of CaMeL Any ( cs , cs ) ;
rank: 43
score: 99.0076904296875
patch: return i ; } else { return i ; }
rank: 43
score: 98.9599276455966
patch: return search CaMeL Chars [ j ] ; } }
rank: 43
score: 98.85859375
patch: return false ; }
rank: 43
score: 98.82984924316406
patch: return 0 ; ; return 0 ;
rank: 43
score: 98.75794219970703
patch: return 1 ; return 1 ; }
rank: 44
score: 99.0913555438702
patch: return search CaMeL Chars [ j ] . size ( ) ;
rank: 44
score: 99.06350708007812
patch: return index CaMeL Of CaMeL Any ( ) ;
rank: 44
score: 99.06055704752605
patch: return ( INDEX _ NOT _ FOUND + ch ) ;
rank: 44
score: 98.9821268717448
patch: return 0 ; } else
rank: 44
score: 98.95897420247395
patch: return cs . index CaMeL Of ( ch ) ; }
rank: 44
score: 98.94702826605902
patch: return i ; i else return i ;
rank: 44
score: 98.85657610212054
patch: return i ; j ++ ;
rank: 44
score: 98.82918548583984
patch: return i + 0 ; break ;
rank: 44
score: 98.75537872314453
patch: return i + i + 1 ;
rank: 45
score: 99.06001790364583
patch: return ( INDEX _ NOT _ FOUND , ch ) ;
rank: 45
score: 98.9819564819336
patch: return i ; } } return ;
rank: 45
score: 98.85400390625
patch: return i ; } } return 0 ;
rank: 46
score: 99.08437875600961
patch: return i . char CaMeL At ( j + 1 ) ;
rank: 46
score: 99.05616455078125
patch: return search CaMeL Chars [ j ) ] ;
rank: 46
score: 98.99967041015626
patch: return index CaMeL Of CaMeL Any ( ; }
rank: 46
score: 98.98179408482143
patch: return i [ 0 ] ;
rank: 46
score: 98.9516268643466
patch: return ( INDEX _ NOT _ FOUND ) ; }
rank: 46
score: 98.94478352864583
patch: return i ; return i ; break ;
rank: 46
score: 98.82349395751953
patch: return 0 ; else return i ;
rank: 47
score: 99.0833740234375
patch: return i + search CaMeL Chars [ i ] ;
rank: 47
score: 99.0545145670573
patch: return ( char ) search CaMeL Chars [ j ] ;
rank: 47
score: 98.9989013671875
patch: if ( is CaMeL Empty ( ch ) )
rank: 47
score: 98.98109436035156
patch: return i [ i ] ; }
rank: 47
score: 98.9458251953125
patch: return INDEX _ NOT _ FOUND : i ;
rank: 47
score: 98.94473266601562
patch: return i ; ; ;
rank: 47
score: 98.84488254123264
patch: ( search CaMeL Chars [ j ] )
rank: 47
score: 98.82322692871094
patch: return new return i ; break ;
rank: 47
score: 98.74955240885417
patch: return j + 1 ;
rank: 48
score: 99.08143107096355
patch: return i . index CaMeL Of CaMeL Any ( ) ;
rank: 48
score: 99.05336507161458
patch: else return cs . char CaMeL At ( j ) ;
rank: 48
score: 99.04606489701705
patch: return cs . search CaMeL Chars [ j ] ;
rank: 48
score: 98.9967928799716
patch: if ( i == search CaMeL Chars . length )
rank: 48
score: 98.94087357954545
patch: return cs . index CaMeL Of ( cs ) ;
rank: 48
score: 98.84455108642578
patch: return cs [ j ] ; }
rank: 48
score: 98.74836730957031
patch: return ~ i + 1 ; }
rank: 49
score: 99.07506306966145
patch: return i . char CaMeL At ( j ] ) ;
rank: 49
score: 99.05140380859375
patch: return new int [ cs CaMeL Len ] ;
rank: 49
score: 99.04158528645833
patch: return } } } return INDEX _ NOT _ FOUND ;
rank: 49
score: 98.99636840820312
patch: return i + $NUMBER$ ; } }
rank: 49
score: 98.93682250976562
patch: result += search CaMeL Chars [ j ] ;
rank: 49
score: 98.84382847377232
patch: return value [ j ] ;
rank: 49
score: 98.82166290283203
patch: return null ;
rank: 50
score: 99.07467041015624
patch: return ch . to CaMeL String ( ) ;
rank: 50
score: 99.04822887073864
patch: return ( int ) INDEX _ NOT _ FOUND ;
rank: 50
score: 99.0412841796875
patch: return ! search CaMeL Chars [ j ] ;
rank: 50
score: 98.99532645089286
patch: return i - i ; }
rank: 50
score: 98.97970145089286
patch: . * * * * /
rank: 50
score: 98.93471950954861
patch: result return INDEX _ NOT _ FOUND ;
rank: 50
score: 98.81478118896484
patch: return - $NUMBER$ ; return i ;
rank: 50
score: 98.73992156982422
patch: return i ; return 1 ; }
rank: 51
score: 99.07435021033653
patch: return i + cs . char CaMeL At ( j ) ;
rank: 51
score: 99.0450948079427
patch: return return cs . char CaMeL At ( j ) ;
rank: 51
score: 98.9949951171875
patch: return i - ; }
rank: 51
score: 98.9299560546875
patch: result return INDEX _ NOT _ FOUND ; }
rank: 51
score: 98.84092881944444
patch: return search CaMeL Chars [ count ] ;
rank: 51
score: 98.80966186523438
patch: i return i ; return i ;
rank: 51
score: 98.73983001708984
patch: = i + 1 ; break ;
rank: 52
score: 99.04143732244319
patch: return cs . char CaMeL At ( 0 ) ;
rank: 52
score: 99.03836059570312
patch: return ++ cs . char CaMeL At ( j ) ;
rank: 52
score: 98.97271050347223
patch: return 0 ; } } return 1 ;
rank: 52
score: 98.9255142211914
patch: = i ; return - 1 ;
rank: 52
score: 98.9249776204427
patch: p = cs . char CaMeL At ( i ) ;
rank: 52
score: 98.83514404296875
patch: return true ; }
rank: 52
score: 98.80961778428819
patch: return i ; ; ; return i ;
rank: 53
score: 99.06920447716347
patch: return cs . index CaMeL Of CaMeL Any ( i ) ;
rank: 53
score: 99.04129464285714
patch: return ( char ) i ;
rank: 53
score: 99.03586050180289
patch: return ( search CaMeL Chars [ j ] == ch ) ;
rank: 53
score: 98.98928833007812
patch: return i . index CaMeL Of ( ch ) ; }
rank: 53
score: 98.97170003255208
patch: return i * i ;
rank: 53
score: 98.92471313476562
patch: return i ; i return i ;
rank: 53
score: 98.91993204752605
patch: throw new Null CaMeL Pointer CaMeL Exception ( ) ; }
rank: 53
score: 98.834716796875
patch: return 1 ; } j ++ ;
rank: 53
score: 98.73773193359375
patch: return i - i ;
rank: 54
score: 99.03903198242188
patch: return i . get CaMeL Name ( ) ;
rank: 54
score: 99.0350341796875
patch: return Integer . length ( search CaMeL Chars [ j ] ) ;
rank: 54
score: 98.98909505208333
patch: return i - 1 ; } else {
rank: 54
score: 98.96696472167969
patch: . * * * * * /
rank: 54
score: 98.92359924316406
patch: return 0 ; if return i ;
rank: 54
score: 98.91672973632812
patch: return INDEX _ NOT _ FOUND + j ;
rank: 54
score: 98.83164978027344
patch: return value [ j ] ; }
rank: 54
score: 98.7369613647461
patch: return 0 ; return i ; }
rank: 55
score: 99.03805541992188
patch: return new char [ search CaMeL Len ] ;
rank: 55
score: 99.03385009765626
patch: result return search CaMeL Chars [ j ] ;
rank: 55
score: 98.98617117745536
patch: return i ; } } }
rank: 55
score: 98.92196044921874
patch: if return i ;
rank: 55
score: 98.91571044921875
patch: return cs . is CaMeL Empty ( ) ;
rank: 55
score: 98.80333709716797
patch: return i ; return ++ i ;
rank: 55
score: 98.73609270368304
patch: return 1 ; break ; }
rank: 56
score: 99.06296608664773
patch: return i . char CaMeL At ( i ) ;
rank: 56
score: 99.03379128196023
patch: return start . char CaMeL At ( j ) ;
rank: 56
score: 98.98135375976562
patch: return i - i - 1 ;
rank: 56
score: 98.96314239501953
patch: return i [ 1 ] ; }
rank: 56
score: 98.9196533203125
patch: return i ; return i ; return i ;
rank: 56
score: 98.91530354817708
patch: p = cs . char CaMeL At ( j ) ;
rank: 56
score: 98.82679966517857
patch: return cs [ j ] ;
rank: 56
score: 98.7317123413086
patch: if ( i == i ) {
rank: 57
score: 98.97755015980114
patch: if ( ! is CaMeL Empty ( ch ) )
rank: 57
score: 98.9626693725586
patch: return i ; } * * /
rank: 57
score: 98.91949462890625
patch: return i ; ; if i ;
rank: 57
score: 98.91249593098958
patch: f = cs . char CaMeL At ( j ) ;
rank: 57
score: 98.7296854654948
patch: return - i ; }
rank: 58
score: 99.05989213423295
patch: return search CaMeL Chars [ j ] . length ;
rank: 58
score: 99.03334554036458
patch: return this . search CaMeL Chars [ j ] ; }
rank: 58
score: 98.97654030539773
patch: return i ; } } this . return i ;
rank: 58
score: 98.96040344238281
patch: return 0 [ 0 ] ; }
rank: 58
score: 98.9185791015625
patch: return return 1 ; return 0 ;
rank: 58
score: 98.91234334309895
patch: name = cs . char CaMeL At ( i ) ;
rank: 59
score: 99.05911254882812
patch: return ( ch . to CaMeL String ( ) ) ;
rank: 59
score: 99.02645874023438
patch: return i ) . char CaMeL At ( j ) ;
rank: 59
score: 98.97479802911931
patch: if ( i >= search CaMeL Chars . length )
rank: 59
score: 98.95922088623047
patch: return i + 0 ; } }
rank: 59
score: 98.91764831542969
patch: return i ; return - $NUMBER$ ;
rank: 59
score: 98.9095791903409
patch: break ; } return INDEX _ NOT _ FOUND ;
rank: 59
score: 98.72467803955078
patch: return 0 ; break ; } }
rank: 60
score: 99.02949662642045
patch: return index CaMeL Of CaMeL Any ( j ) ;
rank: 60
score: 99.02480643136161
patch: return ( INDEX _ NOT _ FOUND ) . size ( ) ;
rank: 60
score: 98.97399291992187
patch: return index CaMeL Of ( ch ) ; }
rank: 60
score: 98.9591064453125
patch: return i ; } return $NUMBER$ ;
rank: 60
score: 98.91671752929688
patch: return 0 ; return - i ;
rank: 60
score: 98.82051086425781
patch: return i ? i : i ;
rank: 60
score: 98.72446986607143
patch: if ( i != i )
rank: 61
score: 99.02501331676136
patch: return search CaMeL Chars [ search CaMeL Len ] ;
rank: 61
score: 99.02314897017045
patch: return ( search CaMeL Chars [ j ] ) ;
rank: 61
score: 98.96302625868056
patch: return index CaMeL Of CaMeL Any ( ;
rank: 61
score: 98.95581926618304
patch: return i ; } * /
rank: 61
score: 98.91434478759766
patch: return i ; while return 1 ;
rank: 61
score: 98.90635172526042
patch: name = cs . char CaMeL At ( j ) ;
rank: 61
score: 98.81944274902344
patch: return new int [ 1 ] ;
rank: 62
score: 99.05416165865384
patch: return search CaMeL Chars [ j ] - search CaMeL Len ;
rank: 62
score: 99.02446954900569
patch: return this . char CaMeL At ( j ) ;
rank: 62
score: 99.0225830078125
patch: return ( i + INDEX _ NOT _ FOUND ) ;
rank: 62
score: 98.96127658420139
patch: return i ; } } } return ;
rank: 62
score: 98.9542236328125
patch: return 0 * i ;
rank: 62
score: 98.81915283203125
patch: return search CaMeL Len [ j ] ;
rank: 63
score: 99.051611328125
patch: return i . INDEX _ NOT _ FOUND ;
rank: 63
score: 99.02197265625
patch: return this . search CaMeL Chars [ j ) ] ;
rank: 63
score: 98.96041259765624
patch: return i ; } } return - 1 ;
rank: 63
score: 98.9529037475586
patch: return i * 0 ; } }
rank: 63
score: 98.90486653645833
patch: val = cs . char CaMeL At ( i ) ;
rank: 63
score: 98.818603515625
patch: return search CaMeL Len ; } }
rank: 63
score: 98.787353515625
patch: return ; = ; return i ;
rank: 64
score: 99.05032348632812
patch: return i ? 0 : INDEX _ NOT _ FOUND ;
rank: 64
score: 99.01797485351562
patch: return search CaMeL Len - search CaMeL Chars . length ;
rank: 64
score: 98.96022727272727
patch: return i ; } } } return - 1 ;
rank: 64
score: 98.94863455636161
patch: return i - 0 ; }
rank: 64
score: 98.90455932617188
patch: return i ; } else { return i ;
rank: 64
score: 98.90106201171875
patch: f = cs . char CaMeL At ( i ) ;
rank: 64
score: 98.81396484375
patch: return ( char ) i ; }
rank: 64
score: 98.7858657836914
patch: return 0 ; ; return 1 ;
rank: 64
score: 98.71018981933594
patch: s = i ; break ; }
rank: 65
score: 99.0479266826923
patch: return cs . char CaMeL At ( j + $NUMBER$ ) ;
rank: 65
score: 99.01676177978516
patch: return i . size ( ) ;
rank: 65
score: 99.01656087239583
patch: return i . char CaMeL At ( j ) ; }
rank: 65
score: 98.96021270751953
patch: = true ; break ; } }
rank: 65
score: 98.90412139892578
patch: if return i ; return 1 ;
rank: 65
score: 98.89930308948864
patch: } } } return INDEX _ NOT _ FOUND ;
rank: 65
score: 98.81018938337054
patch: [ j ] = ch ;
rank: 65
score: 98.78579711914062
patch: return - i ; return 0 ;
rank: 65
score: 98.7100601196289
patch: = i ; return i ; }
rank: 66
score: 98.95916748046875
patch: return Integer . value CaMeL Of ( ch ) ; }
rank: 66
score: 98.90369330512152
patch: int i = i ; return i ;
rank: 66
score: 98.8966776529948
patch: val = cs . char CaMeL At ( j ) ;
rank: 66
score: 98.80982971191406
patch: return size [ j ] ; }
rank: 66
score: 98.77704535590277
patch: return i ; ; if return 1 ;
rank: 66
score: 98.70655822753906
patch: ret = i ; break ; }
rank: 67
score: 99.01491477272727
patch: return cs . char CaMeL At ( ch ) ;
rank: 67
score: 99.01141912286931
patch: return value . index CaMeL Of ( ch ) ;
rank: 67
score: 98.94392395019531
patch: return 0 ; } } else {
rank: 67
score: 98.90352085658482
patch: return 0 ; return 0 ;
rank: 67
score: 98.89445356889205
patch: throw new Illegal CaMeL State CaMeL Exception ( ) ;
rank: 67
score: 98.80599636501736
patch: ; return INDEX _ NOT _ FOUND ;
rank: 67
score: 98.77667846679688
patch: return i ; ; if ; return i ;
rank: 67
score: 98.7061767578125
patch: return j - 1 ;
rank: 68
score: 99.04269409179688
patch: return search CaMeL Chars [ j ] ) ;
rank: 68
score: 99.01051839192708
patch: return ( i - INDEX _ NOT _ FOUND ) ;
rank: 68
score: 98.9556655883789
patch: if ( ; break ; } }
rank: 68
score: 98.94196319580078
patch: return i ; } / * /
rank: 68
score: 98.89712863498264
patch: return i ; i else = i ;
rank: 68
score: 98.88267933238636
patch: return INDEX _ NOT _ FOUND + i ; }
rank: 68
score: 98.80352783203125
patch: return char CaMeL At [ j ] ;
rank: 68
score: 98.76796468098958
patch: return 0 + i ;
rank: 68
score: 98.69921875
patch: return j ; break ; }
rank: 69
score: 99.01445007324219
patch: return i . length ( ) ;
rank: 69
score: 98.95350138346355
patch: return list . index CaMeL Of ( ch ) ; }
rank: 69
score: 98.89250352647569
patch: return i ; try { return i ;
rank: 69
score: 98.69803619384766
patch: if ( i < i ) {
rank: 70
score: 99.03901977539063
patch: return name . to CaMeL String ( ) ;
rank: 70
score: 98.95125579833984
patch: return i - 1 ; } ;
rank: 70
score: 98.8912353515625
patch: = i ; return i ; ;
rank: 70
score: 98.79899088541667
patch: return ( ( char ) ch ) ;
rank: 70
score: 98.69694301060268
patch: return i + $NUMBER$ ; }
rank: 71
score: 99.03846435546875
patch: return i . get CaMeL Value ( ) ;
rank: 71
score: 99.0087139423077
patch: return index CaMeL Of CaMeL Any ( ch , cs ) ;
rank: 71
score: 98.94996134440105
patch: if ( i < search CaMeL Chars . length ) {
rank: 71
score: 98.93910435267857
patch: return i + 0 ; }
rank: 71
score: 98.88210227272727
patch: { return INDEX _ NOT _ FOUND ; } }
rank: 71
score: 98.88202776227679
patch: return i ; ++ i ;
rank: 71
score: 98.79774305555556
patch: return char CaMeL At ( i ) ;
rank: 71
score: 98.76188151041667
patch: return - 1 ; return - 1 ;
rank: 71
score: 98.6954345703125
patch: return j ; }
rank: 72
score: 99.03719388521634
patch: return cs . i . char CaMeL At ( j ) ;
rank: 72
score: 99.00846354166667
patch: return cs . char CaMeL At ( j $STRING$ ) ;
rank: 72
score: 99.0081787109375
patch: return ( Char CaMeL Sequence ) search CaMeL Chars [ j ] ;
rank: 72
score: 98.94927978515625
patch: throw new Null CaMeL Pointer CaMeL Exception ( $STRING$ ) ;
rank: 72
score: 98.88092041015625
patch: return INDEX _ NOT _ FOUND ; } break ; }
rank: 72
score: 98.87774658203125
patch: return i ; return 0 ; ;
rank: 72
score: 98.79741075303819
patch: return INDEX _ NOT _ FOUND ; ;
rank: 72
score: 98.757177734375
patch: i return i ;
rank: 72
score: 98.69459751674107
patch: return j - 1 ; }
rank: 73
score: 99.03379469651442
patch: return search CaMeL Chars [ j ] + ch . length ;
rank: 73
score: 99.00801908052884
patch: return ( cs . char CaMeL At ( i ) ) ;
rank: 73
score: 98.94815063476562
patch: return index CaMeL Of CaMeL Any ( ch , i ;
rank: 73
score: 98.9344711303711
patch: return 1 ; } return 0 ;
rank: 73
score: 98.87435302734374
patch: return i ; ; ; if return i ;
rank: 73
score: 98.79498291015625
patch: return cs CaMeL Len - j ;
rank: 73
score: 98.75650787353516
patch: i ; return i ; break ;
rank: 73
score: 98.69363403320312
patch: value = i ; break ; }
rank: 74
score: 99.0060323079427
patch: return ( int ) search CaMeL Chars [ j ] ;
rank: 74
score: 98.93292236328125
patch: return 0 [ i ] ; }
rank: 74
score: 98.87732950846355
patch: b = cs . char CaMeL At ( i ) ;
rank: 74
score: 98.87295193142361
patch: return i ; ; else return i ;
rank: 74
score: 98.79444037543402
patch: return cs CaMeL Len - i ; }
rank: 74
score: 98.75326538085938
patch: return i + 1 ; break ;
rank: 74
score: 98.69241333007812
patch: return 0 ; } i ++ ;
rank: 75
score: 99.03128756009616
patch: return search CaMeL Chars [ j ] . trim ( ) ;
rank: 75
score: 99.00477091471355
patch: return new String ( INDEX _ NOT _ FOUND ) ;
rank: 75
score: 99.00281372070313
patch: return i . get CaMeL Type ( ) ;
rank: 75
score: 98.93825954861111
patch: return i - 1 ; } } ;
rank: 75
score: 98.93183898925781
patch: . * * / return i ;
rank: 75
score: 98.86802164713542
patch: return i ; return - - i ;
rank: 75
score: 98.7943603515625
patch: return - 0 ;
rank: 75
score: 98.75290352957589
patch: return 1 ; return 1 ;
rank: 75
score: 98.69219970703125
patch: return 0 [ j ] ; }
rank: 76
score: 99.02904334435097
patch: return search CaMeL Chars [ j ] + search CaMeL Len ;
rank: 76
score: 99.00458233173077
patch: return value + cs . char CaMeL At ( j ) ;
rank: 76
score: 99.00218505859375
patch: return return search CaMeL Chars [ j ] ;
rank: 76
score: 98.9303487141927
patch: return 0 ; } ;
rank: 76
score: 98.8716532389323
patch: { return i ; }
rank: 76
score: 98.86775207519531
patch: return i ; else return 0 ;
rank: 76
score: 98.79288736979167
patch: return case INDEX _ NOT _ FOUND ;
rank: 76
score: 98.751953125
patch: return null ; return i ;
rank: 76
score: 98.69150797526042
patch: = i ; break ;
rank: 77
score: 99.0269775390625
patch: return i . index CaMeL Of ( $STRING$ ) ;
rank: 77
score: 99.00380637428977
patch: += cs . char CaMeL At ( j ) ;
rank: 77
score: 98.99990844726562
patch: return INDEX _ NOT _ FOUND ; else return i ;
rank: 77
score: 98.93342590332031
patch: return i - $NUMBER$ ; } }
rank: 77
score: 98.93003336588542
patch: . * * / return i ; }
rank: 77
score: 98.87035369873047
patch: break ; }
rank: 77
score: 98.86618041992188
patch: return return i ; return 0 ;
rank: 77
score: 98.79136657714844
patch: return cs [ i ] ; }
rank: 77
score: 98.75181579589844
patch: return null ; ; return i ;
rank: 77
score: 98.68468475341797
patch: return - 1 ; } break ;
rank: 78
score: 99.02665201822917
patch: return i ? INDEX _ NOT _ FOUND : 0 ;
rank: 78
score: 99.00347900390625
patch: return ++ search CaMeL Chars [ j ] ;
rank: 78
score: 98.93288167317708
patch: if ( Character . is CaMeL Letter ( ch ) )
rank: 78
score: 98.92744954427083
patch: . * * * * * * /
rank: 78
score: 98.87033081054688
patch: c = cs . char CaMeL At ( i ) ;
rank: 78
score: 98.86258697509766
patch: if return 1 ; return i ;
rank: 78
score: 98.7907206217448
patch: return cs . length ;
rank: 78
score: 98.75
patch: return 1 ; ; = i ;
rank: 79
score: 99.02403564453125
patch: return i & INDEX _ NOT _ FOUND ;
rank: 79
score: 98.99857788085937
patch: return INDEX _ NOT _ FOUND . length ;
rank: 79
score: 98.86902872721355
patch: return INDEX _ NOT _ FOUND ; } } } else
rank: 79
score: 98.85873413085938
patch: return i ; i else * ;
rank: 79
score: 98.68199920654297
patch: r = i ; break ; }
rank: 80
score: 99.01708984375
patch: return i . to CaMeL Object ( ) ;
rank: 80
score: 98.9983622233073
patch: return ( String ) search CaMeL Chars [ j ] ;
rank: 80
score: 98.9962627704327
patch: return index CaMeL Of CaMeL Any ( cs , i ) ;
rank: 80
score: 98.93125406901042
patch: if ( i < search CaMeL Len ) return i ;
rank: 80
score: 98.9201151529948
patch: return 0 - i ;
rank: 80
score: 98.86692301432292
patch: b = cs . char CaMeL At ( j ) ;
rank: 80
score: 98.85769653320312
patch: result = i ; return i ;
rank: 80
score: 98.78984917534723
patch: += search CaMeL Chars [ i ] ;
rank: 80
score: 98.74857584635417
patch: return i ; break ; return i ;
rank: 80
score: 98.68004608154297
patch: sb . append ( ch ) ;
rank: 81
score: 98.995361328125
patch: return value + INDEX _ NOT _ FOUND ;
rank: 81
score: 98.99503580729167
patch: return cs . char CaMeL At ( j ) ) ;
rank: 81
score: 98.93018595377605
patch: return index CaMeL Of CaMeL Any ( i , ; }
rank: 81
score: 98.86607776988636
patch: return this . INDEX _ NOT _ FOUND ; }
rank: 81
score: 98.85651397705078
patch: return 0 ; return - $STRING$ ;
rank: 81
score: 98.7894287109375
patch: return [ j ] ; }
rank: 81
score: 98.74640655517578
patch: return - - 1 ; break ;
rank: 81
score: 98.67981828962054
patch: return i ; continue ; }
rank: 82
score: 98.99476036658653
patch: return cs . char CaMeL At ( j ) ; } }
rank: 82
score: 98.994384765625
patch: return new char [ search CaMeL Chars . length ] ;
rank: 82
score: 98.91437530517578
patch: return 0 - 0 ; } }
rank: 82
score: 98.862890625
patch: true return INDEX _ NOT _ FOUND ; }
rank: 82
score: 98.85650634765625
patch: f = i ; return i ;
rank: 82
score: 98.78797064887152
patch: return cs . trim ( ) ; }
rank: 82
score: 98.74573625837054
patch: return $NUMBER$ ; return i ;
rank: 82
score: 98.67813110351562
patch: return ~ i ;
rank: 83
score: 99.01553955078126
patch: return i : INDEX _ NOT _ FOUND ;
rank: 83
score: 98.92200385199652
patch: if ( i >= search CaMeL Len )
rank: 83
score: 98.91114298502605
patch: return 0 - 0 ;
rank: 83
score: 98.8562520345052
patch: c = cs . char CaMeL At ( j ) ;
rank: 83
score: 98.78748914930556
patch: return char CaMeL At ( ch ) ;
rank: 83
score: 98.7448501586914
patch: return - 1 ; throw i ;
rank: 83
score: 98.67526245117188
patch: return i ; return j ; }
rank: 84
score: 99.0140850360577
patch: return cs . char CaMeL At ( j - 1 ) ;
rank: 84
score: 98.99220628004808
patch: return cs . char CaMeL At ( j + 0 ) ;
rank: 84
score: 98.92194158380681
patch: if ( i <= search CaMeL Chars . length )
rank: 84
score: 98.9102783203125
patch: return i ; } if ; }
rank: 84
score: 98.85598754882812
patch: return INDEX _ NOT _ FOUND ; } i ++ ;
rank: 84
score: 98.78717041015625
patch: character return i ; }
rank: 84
score: 98.74115668402777
patch: return i ; return i + i ;
rank: 85
score: 99.0127422626202
patch: return cs . char CaMeL At ( i + 1 ) ;
rank: 85
score: 98.99010120738636
patch: return value . char CaMeL At ( j ) ;
rank: 85
score: 98.92181396484375
patch: if ( Character . is CaMeL Blank ( ch ) )
rank: 85
score: 98.90736083984375
patch: . return i ;
rank: 85
score: 98.85011121961806
patch: return i ; i else if i ;
rank: 85
score: 98.7869873046875
patch: return 0 ; } j ++ ; }
rank: 85
score: 98.73941040039062
patch: return i + ; return i ;
rank: 85
score: 98.67164829799107
patch: if ( ; break ; }
rank: 86
score: 98.98697916666667
patch: return i . to CaMeL Char CaMeL Array ( ) ;
rank: 86
score: 98.90667724609375
patch: return i ; } else return 1 ;
rank: 86
score: 98.852734375
patch: return INDEX _ NOT _ FOUND + 1 ;
rank: 86
score: 98.84959716796875
patch: return i ; ; else { return i ;
rank: 86
score: 98.78659057617188
patch: return cs CaMeL Len + j ;
rank: 87
score: 99.01126802884616
patch: return cs . index CaMeL Of CaMeL Any ( $STRING$ ) ;
rank: 87
score: 98.98793538411458
patch: return ( i & INDEX _ NOT _ FOUND ) ;
rank: 87
score: 98.92075602213542
patch: return Integer . value CaMeL Of ( i ) ; }
rank: 87
score: 98.9020004272461
patch: return 0 - i ; } }
rank: 87
score: 98.84943389892578
patch: return return 1 ; return 1 ;
rank: 87
score: 98.78574044363839
patch: return size [ j ] ;
rank: 87
score: 98.66647338867188
patch: return - i - 1 ; }
rank: 88
score: 99.01056463068181
patch: return i - search CaMeL Chars [ i ] ;
rank: 88
score: 98.98383924696181
patch: else return INDEX _ NOT _ FOUND ;
rank: 88
score: 98.9202880859375
patch: return i ; } } if ( ;
rank: 88
score: 98.89990912543402
patch: . return i ; } return i ;
rank: 88
score: 98.85114080255681
patch: return INDEX _ NOT _ FOUND ; return i ;
rank: 88
score: 98.84452311197917
patch: return return i ; ;
rank: 88
score: 98.73598225911458
patch: return 0 ; ; if i ++ ;
rank: 88
score: 98.66582380022321
patch: = true ; break ; }
rank: 89
score: 98.92021179199219
patch: return i ; } } * /
rank: 89
score: 98.8983154296875
patch: return i * i ; }
rank: 89
score: 98.85107421875
patch: return INDEX _ NOT _ FOUND ; } ) ;
rank: 89
score: 98.84400177001953
patch: return i ; } if i ;
rank: 89
score: 98.78350830078125
patch: return cs CaMeL Len + i ; }
rank: 89
score: 98.7358627319336
patch: return $NUMBER$ ; ; return i ;
rank: 89
score: 98.66182708740234
patch: int i = i + 1 ;
rank: 90
score: 99.0078125
patch: return i . index CaMeL Of CaMeL Any ( i ) ;
rank: 90
score: 98.98227945963542
patch: return ( INDEX _ NOT _ FOUND ) + i ;
rank: 90
score: 98.91964111328124
patch: if ( is CaMeL Empty ( ch ) ;
rank: 90
score: 98.89813910590277
patch: . * / return i ; } }
rank: 90
score: 98.850341796875
patch: e = cs . char CaMeL At ( i ) ;
rank: 90
score: 98.84318033854167
patch: try { return i ;
rank: 90
score: 98.78310139973958
patch: return cs CaMeL Len - j ; }
rank: 90
score: 98.72918701171875
patch: return i + i + i ;
rank: 90
score: 98.66085815429688
patch: return i + 1 ; } ;
rank: 91
score: 99.0068828876202
patch: return this . search CaMeL Chars [ j ] + ch ;
rank: 91
score: 98.98111666165866
patch: return new String ( search CaMeL Chars [ j ] ) ;
rank: 91
score: 98.89552307128906
patch: . * * * return i ;
rank: 91
score: 98.85003662109375
patch: return INDEX _ NOT _ FOUND ; break ; } }
rank: 91
score: 98.84037272135417
patch: return 0 ; ; if return i ;
rank: 91
score: 98.78268093532986
patch: return cs CaMeL Len + j ; }
rank: 92
score: 99.00666947798295
patch: return search CaMeL Chars [ i ] + ch ;
rank: 92
score: 98.97931780133929
patch: return cs . append ( search CaMeL Chars [ j ] ) ;
rank: 92
score: 98.97725053267045
patch: return ( byte ) INDEX _ NOT _ FOUND ;
rank: 92
score: 98.91905517578125
patch: if ( ! is CaMeL Empty ( ch ;
rank: 92
score: 98.84019639756944
patch: return i ; int i = i ;
rank: 92
score: 98.7273661295573
patch: return new return i ;
rank: 93
score: 98.91826171875
patch: return index CaMeL Of ( ch , ; }
rank: 93
score: 98.8453857421875
patch: b return INDEX _ NOT _ FOUND ; }
rank: 93
score: 98.83655395507813
patch: return i ; i else if return i ;
rank: 93
score: 98.72721644810268
patch: return return i ; break ;
rank: 93
score: 98.6551513671875
patch: return - i ; break ; }
rank: 94
score: 99.00619741586539
patch: return start . index CaMeL Of CaMeL Any ( ch ) ;
rank: 94
score: 98.9156005859375
patch: if ( $STRING$ . equals ( ch ) )
rank: 94
score: 98.89285714285714
patch: return 0 - 0 ; }
rank: 94
score: 98.84414672851562
patch: return INDEX _ NOT _ FOUND ; } } break ;
rank: 94
score: 98.83452690972223
patch: return i ; ; return - 1 ;
rank: 94
score: 98.7791748046875
patch: return 0 ; j ++ ; }
rank: 94
score: 98.72708129882812
patch: return - 1 ; return null ;
rank: 94
score: 98.65225219726562
patch: return i [ j ] ; }
rank: 95
score: 99.0055908203125
patch: try { return INDEX _ NOT _ FOUND ;
rank: 95
score: 98.9749755859375
patch: return cs . char CaMeL At ( j ) ; break ;
rank: 95
score: 98.97352091471355
patch: return INDEX _ NOT _ FOUND . length ( ) ;
rank: 95
score: 98.9146728515625
patch: return index CaMeL Of CaMeL Any ( ch ;
rank: 95
score: 98.89219835069444
patch: . * * * * return i ;
rank: 95
score: 98.84317016601562
patch: result = search CaMeL Chars [ j ] ;
rank: 95
score: 98.83426920572917
patch: return i ; else if return i ;
rank: 95
score: 98.77799224853516
patch: return i ? i : 0 ;
rank: 95
score: 98.725537109375
patch: return i ; return - 1 ; break ;
rank: 95
score: 98.65203857421875
patch: return index CaMeL Of ( ch ;
rank: 96
score: 99.0038174715909
patch: return 0 + search CaMeL Chars [ j ] ;
rank: 96
score: 98.97391451322116
patch: return $STRING$ + cs . char CaMeL At ( j ) ;
rank: 96
score: 98.91413709852431
patch: if ( i < search CaMeL Len ;
rank: 96
score: 98.8905029296875
patch: . return i ; }
rank: 96
score: 98.8430684407552
patch: e = cs . char CaMeL At ( j ) ;
rank: 96
score: 98.8330078125
patch: return - 1 ; ;
rank: 96
score: 98.77762603759766
patch: return cs CaMeL Len - i ;
rank: 96
score: 98.72396850585938
patch: return i ; ; += i ;
rank: 96
score: 98.65025329589844
patch: return i + 1 + i ;
rank: 97
score: 98.97188626802884
patch: return i + this . search CaMeL Chars [ j ] ;
rank: 97
score: 98.96981811523438
patch: return i + search CaMeL Chars . length ;
rank: 97
score: 98.91095648871527
patch: return i - i - 1 ; }
rank: 97
score: 98.88966587611607
patch: return 0 - 1 ; }
rank: 97
score: 98.83285183376736
patch: if return i ; ; return i ;
rank: 97
score: 98.77542724609376
patch: return $STRING$ ; }
rank: 97
score: 98.72274441189236
patch: return i ; return - - 1 ;
rank: 97
score: 98.64906311035156
patch: return 0 ; } break ; }
rank: 98
score: 98.97182006835938
patch: character return search CaMeL Chars [ j ] ;
rank: 98
score: 98.96896362304688
patch: search CaMeL Chars [ j ] return i ;
rank: 98
score: 98.91089545355902
patch: return i + i + 1 ; }
rank: 98
score: 98.83988444010417
patch: if ( i == search CaMeL Chars . length ) {
rank: 98
score: 98.83113606770833
patch: return return 1 ; ;
rank: 98
score: 98.77352905273438
patch: return new char [ i ] ;
rank: 98
score: 98.72268676757812
patch: return i + ; = i ;
rank: 98
score: 98.64715576171875
patch: return index CaMeL Of ;
rank: 99
score: 98.99721116286058
patch: return search CaMeL Chars . index CaMeL Of ( ch ) ;
rank: 99
score: 98.97060139973958
patch: return ( i . char CaMeL At ( j ) ;
rank: 99
score: 98.96820068359375
patch: return search CaMeL Chars [ j ] } ;
rank: 99
score: 98.90986772017045
patch: if ( i < search CaMeL Len ) break ;
rank: 99
score: 98.88615417480469
patch: . * / return i ; }
rank: 99
score: 98.83876546223958
patch: result = cs . char CaMeL At ( i ) ;
rank: 99
score: 98.8306884765625
patch: return i ; break ; if i ;
rank: 99
score: 98.77164713541667
patch: return cs . size ( ) ; }
rank: 99
score: 98.64683314732143
patch: * / return i ; }
rank: 100
score: 98.99700317382812
patch: return INDEX _ NOT _ FOUND + ch ;
rank: 100
score: 98.96817016601562
patch: return search CaMeL Chars [ i ] ; }
rank: 100
score: 98.90885416666667
patch: return index CaMeL Of CaMeL Any ( i ) ; }
rank: 100
score: 98.88533020019531
patch: return i ; } catch ; }
rank: 100
score: 98.82945421006944
patch: return i ; } return - 1 ;
rank: 100
score: 98.76889377170139
patch: return cs CaMeL Len [ j ] ;
rank: 100
score: 98.64573669433594
patch: char i = i ; break ;
rank: 101
score: 98.9686767578125
patch: search CaMeL Chars [ j ] == ch ;
rank: 101
score: 98.967041015625
patch: return search CaMeL Chars [ j ++ ] ;
rank: 101
score: 98.90744357638889
patch: return i ; } return i ; }
rank: 101
score: 98.88461642795139
patch: . * * * * / * /
rank: 101
score: 98.8359375
patch: result = INDEX _ NOT _ FOUND ;
rank: 101
score: 98.82841661241319
patch: return i ; try ; return i ;
rank: 101
score: 98.76754324776786
patch: return - 0 ; } }
rank: 101
score: 98.71684265136719
patch: return 0 ; if return 1 ;
rank: 102
score: 98.99655151367188
patch: return i + ch + INDEX _ NOT _ FOUND ;
rank: 102
score: 98.96764264787946
patch: return search CaMeL Chars . char CaMeL At ( j ) ; }
rank: 102
score: 98.96525435014205
patch: return ( String ) INDEX _ NOT _ FOUND ;
rank: 102
score: 98.88147735595703
patch: return i [ $NUMBER$ ] ; }
rank: 102
score: 98.83424886067708
patch: return cs . index CaMeL Of ( cs ) ; }
rank: 102
score: 98.82827758789062
patch: return i ; i else { return i ;
rank: 102
score: 98.71671549479167
patch: i ; return i ;
rank: 103
score: 98.96755746694711
patch: return ( ( int ) INDEX _ NOT _ FOUND ) ;
rank: 103
score: 98.9621073404948
patch: return new int [ search CaMeL Chars . length ] ;
rank: 103
score: 98.88117980957031
patch: return 0 - 1 ; } }
rank: 103
score: 98.82811737060547
patch: return i ; return i ; {
rank: 103
score: 98.76708221435547
patch: return cs . length ; } }
rank: 103
score: 98.7158203125
patch: return - 1 ; break ; ;
rank: 103
score: 98.64093017578125
patch: return i ; i -- ; }
rank: 104
score: 98.99545522836539
patch: return this . index CaMeL Of CaMeL Any ( ch ) ;
rank: 104
score: 98.96200561523438
patch: return INDEX _ NOT _ FOUND ; } j ++ ;
rank: 104
score: 98.90667724609375
patch: return i - ; } }
rank: 104
score: 98.83009847005208
patch: if ( cs . is CaMeL Empty ( ) ) {
rank: 104
score: 98.82757568359375
patch: return 0 ; return - 0 ;
rank: 104
score: 98.64013671875
patch: char i = i + 1 ;
rank: 105
score: 98.99453500600961
patch: return search CaMeL Len - search CaMeL Chars [ j ] ;
rank: 105
score: 98.96711077008929
patch: return index CaMeL Of ( search CaMeL Chars [ j ] ) ;
rank: 105
score: 98.90474076704545
patch: if ( ! is CaMeL Empty ( ch ) ;
rank: 105
score: 98.82999674479167
patch: result += cs . char CaMeL At ( j ) ;
rank: 105
score: 98.76377868652344
patch: return value [ i ] ; }
rank: 105
score: 98.71440887451172
patch: return i ; ; throw i ;
rank: 106
score: 98.95776977539063
patch: return search CaMeL Chars [ j ] 1 ;
rank: 106
score: 98.90227593315973
patch: if ( i <= search CaMeL Len )
rank: 106
score: 98.8296786221591
patch: return cs . to CaMeL String ( ) ; }
rank: 106
score: 98.82178412543402
patch: if return i ; return - 1 ;
rank: 106
score: 98.76170518663194
patch: return Math . length ( ch ) ;
rank: 106
score: 98.71375274658203
patch: return count ;
rank: 107
score: 98.9669189453125
patch: return new char [ search CaMeL Chars . length 1 ] ;
rank: 107
score: 98.90119764539931
patch: return i + 1 ; } else {
rank: 107
score: 98.87455749511719
patch: return 0 ; } return $NUMBER$ ;
rank: 107
score: 98.82960001627605
patch: result = cs . char CaMeL At ( j ) ;
rank: 107
score: 98.7607650756836
patch: return cs CaMeL Len + i ;
rank: 107
score: 98.71167602539063
patch: return i ; ; if ; = i ;
rank: 107
score: 98.63496616908482
patch: += i ; break ; }
rank: 108
score: 98.9928690592448
patch: return i . is CaMeL Empty ( ) + ch ;
rank: 108
score: 98.96546427408855
patch: return ( INDEX _ NOT _ FOUND ) + ch ;
rank: 108
score: 98.89871978759766
patch: return - 1 ; } else {
rank: 108
score: 98.87339952256944
patch: return i ; return i ; } }
rank: 108
score: 98.82068549262152
patch: return i ; return - 1 ; ;
rank: 108
score: 98.75987025669643
patch: return value [ i ] ;
rank: 108
score: 98.71163940429688
patch: return ; return i ;
rank: 108
score: 98.63385009765625
patch: return - 1 [ j ] ;
rank: 109
score: 98.95508829752605
patch: return cs . char CaMeL At ( j 1 ) ;
rank: 109
score: 98.89827104048295
patch: throw new Unsupported CaMeL Operation CaMeL Exception ( $STRING$ ;
rank: 109
score: 98.87016465928819
patch: . * * * return i ; }
rank: 109
score: 98.82026672363281
patch: return 0 ; return return 1 ;
rank: 109
score: 98.75885009765625
patch: return ( int ) i ; }
rank: 109
score: 98.71117553710937
patch: return i ; ; if i * ++ ;
rank: 109
score: 98.6326675415039
patch: if i == i ) break ;
rank: 110
score: 98.99103338068181
patch: return ch . index CaMeL Of ( ch ) ;
rank: 110
score: 98.95455932617188
patch: return index CaMeL Of CaMeL Any ( cs ) ; }
rank: 110
score: 98.89825439453125
patch: if ( Character . is CaMeL Empty ( ch ) )
rank: 110
score: 98.825927734375
patch: entry = cs . char CaMeL At ( j ) ;
rank: 110
score: 98.7586441040039
patch: return i ; } } break ;
rank: 110
score: 98.7110107421875
patch: return - 1 ; break ; return i ;
rank: 111
score: 98.8974100748698
patch: throw new Unsupported CaMeL Operation CaMeL Exception ( $STRING$ ; }
rank: 111
score: 98.86781141493056
patch: . * * * * / } }
rank: 111
score: 98.82567342122395
patch: return INDEX _ NOT _ FOUND + cs CaMeL Len ;
rank: 111
score: 98.8176040649414
patch: return i ; ; return $STRING$ ;
rank: 111
score: 98.75830078125
patch: return cs [ i ] ;
rank: 111
score: 98.63050842285156
patch: sb . append ( $STRING$ ) ;
rank: 112
score: 98.98982238769531
patch: return i + search CaMeL Len ;
rank: 112
score: 98.89739990234375
patch: return i ; ; } } ;
rank: 112
score: 98.86723981584821
patch: return 0 [ 0 ] ;
rank: 112
score: 98.82296752929688
patch: str = cs . char CaMeL At ( i ) ;
rank: 112
score: 98.81598578559027
patch: return i ; } return - i ;
rank: 112
score: 98.75726318359375
patch: return new int [ i ] ; }
rank: 112
score: 98.70842827690973
patch: return i + i ; return i ;
rank: 112
score: 98.6298599243164
patch: m = i ; break ; }
rank: 113
score: 98.95032958984375
patch: return i . get CaMeL Length ( ) ;
rank: 113
score: 98.892578125
patch: return i - 1 ; ; }
rank: 113
score: 98.86695207868304
patch: return 0 * i ; }
rank: 113
score: 98.82219904119319
patch: } else { return INDEX _ NOT _ FOUND ;
rank: 113
score: 98.814453125
patch: return i ; i return 0 ;
rank: 113
score: 98.75582885742188
patch: return false ; } }
rank: 113
score: 98.70835876464844
patch: return i ; if i ++ ;
rank: 113
score: 98.6292953491211
patch: return i + i - 1 ;
rank: 114
score: 98.89253373579545
patch: return i ; } else { break ; } }
rank: 114
score: 98.86550564236111
patch: return i ; } } return $NUMBER$ ;
rank: 114
score: 98.82161088423295
patch: return INDEX _ NOT _ FOUND . length ; }
rank: 114
score: 98.81085205078125
patch: return return i ; return 1 ;
rank: 114
score: 98.70834786551339
patch: i return i ; break ;
rank: 114
score: 98.6271743774414
patch: buffer . append ( ch ) ;
rank: 115
score: 98.98658243815105
patch: return i ? INDEX _ NOT _ FOUND : cs ;
rank: 115
score: 98.9493075284091
patch: return index CaMeL Of ( search CaMeL Chars ) ;
rank: 115
score: 98.89103560014205
patch: return i ; } this . return i ; }
rank: 115
score: 98.86421421595982
patch: return 0 - i ; }
rank: 115
score: 98.80964965820313
patch: return i ; } ; if return i ;
rank: 115
score: 98.75328826904297
patch: return false ; } j ++ ;
rank: 115
score: 98.70813751220703
patch: return new return 0 ; break ;
rank: 115
score: 98.62611389160156
patch: return i ; break ; } ;
rank: 116
score: 98.8904317220052
patch: return i ; } } else { return i ; }
rank: 116
score: 98.8640365600586
patch: return 1 ; } else if ;
rank: 116
score: 98.82037908380681
patch: return INDEX _ NOT _ FOUND ; } i ;
rank: 116
score: 98.8043212890625
patch: return 0 ; while return i ;
rank: 116
score: 98.70791625976562
patch: return 0 ; return ++ i ;
rank: 116
score: 98.62596638997395
patch: = i + 1 ;
rank: 117
score: 98.9822998046875
patch: return super . index CaMeL Of CaMeL Any ( cs ) ;
rank: 117
score: 98.95750843394886
patch: return max . char CaMeL At ( j ) ;
rank: 117
score: 98.94788707386364
patch: return i . char CaMeL At ( 0 ) ;
rank: 117
score: 98.81949191623264
patch: b return INDEX _ NOT _ FOUND ;
rank: 117
score: 98.8034896850586
patch: return 0 ; for return i ;
rank: 117
score: 98.75162506103516
patch: [ j ] return i ; }
rank: 117
score: 98.70758734809027
patch: return 0 ; ; ; return i ;
rank: 117
score: 98.62561798095703
patch: return count [ j ] ; }
rank: 118
score: 98.98045765269886
patch: return i / * INDEX _ NOT _ FOUND ;
rank: 118
score: 98.9556415264423
patch: return 0 ; } } return INDEX _ NOT _ FOUND ;
rank: 118
score: 98.94691772460938
patch: else return search CaMeL Chars [ j ] ;
rank: 118
score: 98.88812255859375
patch: return i ; } if ( ;
rank: 118
score: 98.86180623372395
patch: return 0 - 1 ;
rank: 118
score: 98.81919352213542
patch: res = cs . char CaMeL At ( i ) ;
rank: 118
score: 98.80348205566406
patch: return i ; return return 0 ;
rank: 118
score: 98.7489013671875
patch: return ( char ) ch ; }
rank: 118
score: 98.70462646484376
patch: return i ; ; return i + i ;
rank: 118
score: 98.62375895182292
patch: if ; break ; }
rank: 119
score: 98.97998046875
patch: return replace CaMeL Chars [ j ] ;
rank: 119
score: 98.95533336292614
patch: return value + search CaMeL Chars [ j ] ;
rank: 119
score: 98.94643147786458
patch: return index CaMeL Of CaMeL Any ( cs , ) ;
rank: 119
score: 98.88706276633523
patch: return Integer . parse CaMeL Int ( ch ) ;
rank: 119
score: 98.81801350911458
patch: return cs . search CaMeL Chars [ j ] ; }
rank: 119
score: 98.74842664930556
patch: return search CaMeL Chars [ length ] ;
rank: 119
score: 98.70323181152344
patch: return - ; { return i ;
rank: 120
score: 98.97779259314903
patch: return this . index CaMeL Of CaMeL Any ( cs ) ;
rank: 120
score: 98.95438058035714
patch: return ( i ? INDEX _ NOT _ FOUND : i ) ;
rank: 120
score: 98.9437588778409
patch: return i ( INDEX _ NOT _ FOUND ) ;
rank: 120
score: 98.88690185546875
patch: return i ; } else return i ; }
rank: 120
score: 98.85990397135417
patch: return 1 ; } } return 1 ;
rank: 120
score: 98.81781005859375
patch: return this . INDEX _ NOT _ FOUND ; } }
rank: 120
score: 98.70295715332031
patch: i i return i ; break ;
rank: 120
score: 98.61968994140625
patch: return i + 1 ; ; }
rank: 121
score: 98.943017578125
patch: return new int [ search CaMeL Len ] ;
rank: 121
score: 98.88623809814453
patch: return i ; } ; } ;
rank: 121
score: 98.81749471028645
patch: result += cs . char CaMeL At ( i ) ;
rank: 121
score: 98.79918670654297
patch: return i ; } return $STRING$ ;
rank: 121
score: 98.74433051215277
patch: return new int [ 0 ] ; }
rank: 121
score: 98.69783782958984
patch: return i ; ; ++ i ;
rank: 121
score: 98.61846160888672
patch: return - 1 + i ; }
rank: 122
score: 98.97694749098558
patch: return cs . char CaMeL At ( j ) + ch ;
rank: 122
score: 98.95306865985577
patch: return ( ch . char CaMeL At ( j ) ) ;
rank: 122
score: 98.9423116048177
patch: return i + this . search CaMeL Chars . length ;
rank: 122
score: 98.88218180338542
patch: if ( ! Character . is CaMeL Whitespace ( ch ;
rank: 122
score: 98.85646057128906
patch: return 1 ; } } if ;
rank: 122
score: 98.81672807173295
patch: return cs . char CaMeL At ( } ) ;
rank: 122
score: 98.79838053385417
patch: return i ; } return return i ;
rank: 122
score: 98.7432352701823
patch: return true ; } }
rank: 122
score: 98.61830139160156
patch: [ i ] return i ; }
rank: 123
score: 98.97487386067708
patch: return $STRING$ + ch . to CaMeL String ( ) ;
rank: 123
score: 98.95221502130681
patch: return search CaMeL Chars [ j ] ; break ;
rank: 123
score: 98.94206099076705
patch: return ( Integer ) INDEX _ NOT _ FOUND ;
rank: 123
score: 98.8546371459961
patch: return 0 ; } * * /
rank: 123
score: 98.81642844460227
patch: return i + INDEX _ NOT _ FOUND ; }
rank: 123
score: 98.79726833767361
patch: return i ; ; ; if i ;
rank: 123
score: 98.74267578125
patch: return value CaMeL Of ( ch ) ;
rank: 123
score: 98.69640502929687
patch: return i ; ; return i ; break ;
rank: 123
score: 98.61683654785156
patch: return 1 ; return 0 ; }
rank: 124
score: 98.97428894042969
patch: return true ;
rank: 124
score: 98.880029296875
patch: return Integer . value CaMeL Of ( ; }
rank: 124
score: 98.85421752929688
patch: . * * * * / }
rank: 124
score: 98.81632080078126
patch: return - INDEX _ NOT _ FOUND ; }
rank: 124
score: 98.79374694824219
patch: return i ; i = i ;
rank: 124
score: 98.7419662475586
patch: return new int [ j ] ;
rank: 124
score: 98.69569396972656
patch: return i ; public return i ;
rank: 124
score: 98.61489432198661
patch: return - i - 1 ;
rank: 125
score: 98.9736083984375
patch: return i + ch . size ( ) ;
rank: 125
score: 98.93874104817708
patch: return INDEX _ NOT _ FOUND ; } return 0 ;
rank: 125
score: 98.87631225585938
patch: if ( search CaMeL Chars [ j ] == i )
rank: 125
score: 98.8538818359375
patch: return i * $NUMBER$ ; } }
rank: 125
score: 98.81622314453125
patch: r = cs . char CaMeL At ( i ) ;
rank: 125
score: 98.74183654785156
patch: return true ; } j ++ ;
rank: 125
score: 98.693212890625
patch: return i ; ; if i = i ;
rank: 125
score: 98.61463274274554
patch: [ i ] = ch ;
rank: 126
score: 98.97214918870192
patch: return ch . index CaMeL Of CaMeL Any ( $STRING$ ) ;
rank: 126
score: 98.85376654730902
patch: return 0 ; } else return 1 ;
rank: 126
score: 98.81592814127605
patch: switch ( cs . char CaMeL At ( j ) )
rank: 126
score: 98.79154205322266
patch: int return i ; return i ;
rank: 126
score: 98.69232855902777
patch: return 0 ; return i ; break ;
rank: 126
score: 98.61441802978516
patch: return j ; return i ; }
rank: 127
score: 98.9490079012784
patch: return } } return INDEX _ NOT _ FOUND ;
rank: 127
score: 98.87374877929688
patch: if ( i < search CaMeL Chars . length ) ;
rank: 127
score: 98.85245090060764
patch: . * * * * / } /
rank: 127
score: 98.81477864583333
patch: buf = cs . char CaMeL At ( i ) ;
rank: 127
score: 98.79035949707031
patch: } return i ; return i ;
rank: 127
score: 98.73987688337054
patch: return - i ; } }
rank: 127
score: 98.69229465060764
patch: return i ; for i = i ;
rank: 127
score: 98.61405181884766
patch: p = i ; break ; }
rank: 128
score: 98.94882436899039
patch: return new int [ search CaMeL Chars . length 1 ] ;
rank: 128
score: 98.93250528971355
patch: return i ( search CaMeL Chars [ j ] ) ;
rank: 128
score: 98.81408081054687
patch: ! return INDEX _ NOT _ FOUND ; }
rank: 128
score: 98.78799777560764
patch: return i ; ; return - i ;
rank: 128
score: 98.73864067925348
patch: return ( ( int ) ch ) ;
rank: 128
score: 98.69132690429687
patch: return i ; ; return i + 1 ;
rank: 129
score: 98.87285822088069
patch: while ( i < search CaMeL Chars . length )
rank: 129
score: 98.78308868408203
patch: return i ; else = i ;
rank: 129
score: 98.73796251085069
patch: return cs CaMeL Len ; j ++ ;
rank: 129
score: 98.69091796875
patch: return i ; return ++ 1 ;
rank: 129
score: 98.61246490478516
patch: result = i ; break ; }
rank: 130
score: 98.96832744891827
patch: return i . char CaMeL At ( i + 1 ) ;
rank: 130
score: 98.94678606305804
patch: return Math . length ( search CaMeL Chars [ j ] ) ;
rank: 130
score: 98.84961809430804
patch: return 0 ; } } ;
rank: 130
score: 98.81368001302083
patch: result += INDEX _ NOT _ FOUND ;
rank: 130
score: 98.78284563337054
patch: if i ; return i ;
rank: 130
score: 98.73721313476562
patch: return cs . size ( ) ;
rank: 130
score: 98.69068603515625
patch: return 0 ; ; if ; return i ;
rank: 130
score: 98.61175537109375
patch: return 1 [ j ] ; }
rank: 131
score: 98.96813025841347
patch: return index CaMeL Of CaMeL Any ( i , ch ) ;
rank: 131
score: 98.94578334263393
patch: return ( ( int ) search CaMeL Chars [ j ] ) ;
rank: 131
score: 98.9270731608073
patch: return cs . char CaMeL At ( j ) 1 ;
rank: 131
score: 98.848388671875
patch: return 1 ; } else {
rank: 131
score: 98.81317749023438
patch: switch ( search CaMeL Chars [ j ] )
rank: 131
score: 98.7823257446289
patch: return 0 ; return return i ;
rank: 131
score: 98.69056532118056
patch: return - 1 ; ; return i ;
rank: 132
score: 98.9666239420573
patch: return i . get CaMeL Name ( ) + ch ;
rank: 132
score: 98.945654296875
patch: return value . to CaMeL String ( ) ;
rank: 132
score: 98.86635335286458
patch: if ( search CaMeL Chars [ i ] == ch )
rank: 132
score: 98.81204223632812
patch: return cs . char CaMeL At ( ) ;
rank: 132
score: 98.77943115234375
patch: return i ; } else if return i ;
rank: 132
score: 98.68968963623047
patch: return * i ; return i ;
rank: 132
score: 98.61049979073661
patch: return - i + 1 ;
rank: 133
score: 98.9456075032552
patch: return i ) . index CaMeL Of ( ch ) ;
rank: 133
score: 98.86517333984375
patch: if ( ! Character . is CaMeL Digit ( ch ;
rank: 133
score: 98.84505462646484
patch: return $NUMBER$ ; } return i ;
rank: 133
score: 98.81115112304687
patch: return INDEX _ NOT _ FOUND - 1 ;
rank: 133
score: 98.68870035807292
patch: return i + 0 ; return i ;
rank: 133
score: 98.61018371582031
patch: if ( i != i ) {
rank: 134
score: 98.84442138671875
patch: return i ; * * * /
rank: 134
score: 98.81004842122395
patch: str = cs . char CaMeL At ( j ) ;
rank: 134
score: 98.77896881103516
patch: return i ; return i i ;
rank: 135
score: 98.95955716646634
patch: return count . index CaMeL Of CaMeL Any ( ch ) ;
rank: 135
score: 98.92108154296875
patch: return INDEX _ NOT _ FOUND + search CaMeL Len ;
rank: 135
score: 98.84282684326172
patch: return 0 ; } } return ;
rank: 135
score: 98.80951538085938
patch: f = search CaMeL Chars [ j ] ;
rank: 135
score: 98.77863905164931
patch: return i ; / / return i ;
rank: 135
score: 98.73319498697917
patch: return search CaMeL Chars [ 1 ] ;
rank: 135
score: 98.68810272216797
patch: return 1 ; ; return 0 ;
rank: 135
score: 98.60608673095703
patch: result [ i ] = i ;
rank: 136
score: 98.9583028157552
patch: return $STRING$ ? INDEX _ NOT _ FOUND : i ;
rank: 136
score: 98.86234537760417
patch: return i - 1 ; } ; }
rank: 136
score: 98.77684326171875
patch: return i ; ; else if return i ;
rank: 136
score: 98.73247612847223
patch: i return INDEX _ NOT _ FOUND ;
rank: 136
score: 98.68791961669922
patch: return 1 ; return - i ;
rank: 136
score: 98.60283660888672
patch: return count [ i ] ; }
rank: 137
score: 98.95616566051136
patch: return i : search CaMeL Chars [ j ] ;
rank: 137
score: 98.94217623197116
patch: return ch + cs . char CaMeL At ( j ) ;
rank: 137
score: 98.86021592881944
patch: return i ; break ; } } ;
rank: 137
score: 98.80853271484375
patch: entry = cs . char CaMeL At ( i ) ;
rank: 137
score: 98.77633231026786
patch: = 0 ; return i ;
rank: 137
score: 98.68643188476562
patch: return 1 ; else return i ;
rank: 137
score: 98.60215541294643
patch: if ( i >= i )
rank: 138
score: 98.95530348557692
patch: return ch . char CaMeL At ( j + 1 ) ;
rank: 138
score: 98.93964233398438
patch: return ch + INDEX _ NOT _ FOUND ;
rank: 138
score: 98.9174560546875
patch: return i . get ( - 1 ) ;
rank: 138
score: 98.85997425426136
patch: return i - 1 ; } } return i ;
rank: 138
score: 98.8394266764323
patch: return i - $NUMBER$ ;
rank: 138
score: 98.80750528971355
patch: int cs CaMeL Len = search CaMeL Chars . length ;
rank: 138
score: 98.776318359375
patch: return i ; ; ; if return 1 ;
rank: 138
score: 98.73200988769531
patch: return i ; } } } }
rank: 138
score: 98.68510437011719
patch: return ( i ; return i ;
rank: 138
score: 98.59886169433594
patch: return index CaMeL Of ( i ;
rank: 139
score: 98.91734822591145
patch: return ( Integer ) search CaMeL Chars [ j ] ;
rank: 139
score: 98.85945638020833
patch: = Character . to CaMeL Lower CaMeL Case ( ch ;
rank: 139
score: 98.83835177951389
patch: return 0 ; } } return 0 ;
rank: 139
score: 98.73041449652777
patch: return cs . equals ( ch ) ;
rank: 139
score: 98.68214416503906
patch: return - i ; throw i ;
rank: 139
score: 98.59844970703125
patch: [ j ] return - 1 ;
rank: 140
score: 98.91723022460937
patch: return char CaMeL At ( j ] ) ;
rank: 140
score: 98.85816539417614
patch: if ( i != search CaMeL Chars . length )
rank: 140
score: 98.80565185546875
patch: return ( INDEX _ NOT _ FOUND ; }
rank: 140
score: 98.77221001519098
patch: return 0 ; } if return i ;
rank: 140
score: 98.68191867404514
patch: return 0 ; ; if return 1 ;
rank: 141
score: 98.91713460286458
patch: return INDEX _ NOT _ FOUND ? i : 0 ;
rank: 141
score: 98.85646565755208
patch: if ( Character . is CaMeL Digit ( ; ) )
rank: 141
score: 98.83753967285156
patch: return 0 ; } / * /
rank: 141
score: 98.80523681640625
patch: res = cs . char CaMeL At ( j ) ;
rank: 141
score: 98.77174886067708
patch: char i = i ; return i ;
rank: 141
score: 98.72712707519531
patch: return false ;
rank: 141
score: 98.59757232666016
patch: sb . append ( i ) ;
rank: 142
score: 98.95281427556819
patch: return name . index CaMeL Of ( ch ) ;
rank: 142
score: 98.93853290264423
patch: return super . index CaMeL Of CaMeL Any ( ch ) ;
rank: 142
score: 98.8375244140625
patch: return 0 + i ; } }
rank: 142
score: 98.80464477539063
patch: return INDEX _ NOT _ FOUND ? i ;
rank: 142
score: 98.59730529785156
patch: return i + 1 + 1 ;
rank: 143
score: 98.93802315848214
patch: return value ( cs . char CaMeL At ( j ) ) ;
rank: 143
score: 98.91512044270833
patch: return ( cs . char CaMeL At ( i ) ;
rank: 143
score: 98.83700900607639
patch: return i ; } / * * /
rank: 143
score: 98.803564453125
patch: name return INDEX _ NOT _ FOUND ; }
rank: 143
score: 98.76976013183594
patch: return i ; return i ; else
rank: 143
score: 98.72533501519098
patch: return Math . length ( i ) ;
rank: 143
score: 98.59587860107422
patch: b = i ; break ; }
rank: 144
score: 98.95211087740384
patch: return i . char CaMeL At ( j + $NUMBER$ ) ;
rank: 144
score: 98.93795776367188
patch: return ( INDEX _ NOT _ FOUND ) + 0 ;
rank: 144
score: 98.8542147549716
patch: return index CaMeL Of CaMeL Any ( i , ;
rank: 144
score: 98.8021240234375
patch: return cs . is CaMeL Empty ( ) ; }
rank: 144
score: 98.7239990234375
patch: return cs . trim ( ) ;
rank: 144
score: 98.67849731445312
patch: return start ; ; return i ;
rank: 144
score: 98.59325408935547
patch: if i ++ ; break ; }
rank: 145
score: 98.9508056640625
patch: return $STRING$ + search CaMeL Chars [ i ] ;
rank: 145
score: 98.93668910435268
patch: return cs . index CaMeL Of CaMeL Any ( ch ) ; }
rank: 145
score: 98.85325792100694
patch: return i - 1 ; } } }
rank: 145
score: 98.83108181423611
patch: return i ; } else return 0 ;
rank: 145
score: 98.80148315429688
patch: return ( INDEX _ NOT _ FOUND ) ; } }
rank: 145
score: 98.76934136284723
patch: return i ; j else = i ;
rank: 145
score: 98.59141540527344
patch: += i ; return i ; }
rank: 146
score: 98.95064603365384
patch: return search CaMeL Chars [ i ] . length ( ) ;
rank: 146
score: 98.85323333740234
patch: return Integer . MAX _ VALUE ;
rank: 146
score: 98.82935333251953
patch: return i ; } else return ;
rank: 146
score: 98.80037434895833
patch: Integer search CaMeL Len = search CaMeL Chars . length ;
rank: 146
score: 98.76906331380208
patch: return i ; return - 1 ; }
rank: 146
score: 98.72275797526042
patch: return [ j ] ;
rank: 146
score: 98.59111022949219
patch: [ i ] = - 1 ;
rank: 147
score: 98.9503506747159
patch: return ch . char CaMeL At ( i ) ;
rank: 147
score: 98.91022283380681
patch: return i . index CaMeL Of ( cs ) ;
rank: 147
score: 98.8518575032552
patch: if ( search CaMeL Chars [ j ] == ch ;
rank: 147
score: 98.8003641764323
patch: throw new Illegal CaMeL Argument CaMeL Exception ( , ) ;
rank: 147
score: 98.6772705078125
patch: return 0 ; return i ; return i ;
rank: 147
score: 98.58964538574219
patch: [ i ] return - 1 ;
rank: 148
score: 98.93545096261161
patch: return ( ( char ) search CaMeL Chars [ j ] ) ;
rank: 148
score: 98.90744850852273
patch: return char CaMeL At ( j + 1 ) ;
rank: 148
score: 98.85054524739583
patch: if ( i >= search CaMeL Len ) return i ;
rank: 148
score: 98.82888454861111
patch: . * * * * * / }
rank: 148
score: 98.76578097873264
patch: return return ] . i - i ;
rank: 148
score: 98.71715436662946
patch: character return i ; } }
rank: 148
score: 98.6751480102539
patch: return false ; ; return i ;
rank: 148
score: 98.58909606933594
patch: return 0 ; i -- ; }
rank: 149
score: 98.94943237304688
patch: return $STRING$ . to CaMeL Char CaMeL Array ( ) ;
rank: 149
score: 98.93472994290866
patch: return ( i . char CaMeL At ( i ) ) ;
rank: 149
score: 98.90679931640625
patch: return i . size ( ) - search CaMeL Len ;
rank: 149
score: 98.85000610351562
patch: return i + ; }
rank: 149
score: 98.82886420355902
patch: return 1 ; } else return i ;
rank: 149
score: 98.80019309303977
patch: return INDEX _ NOT _ FOUND : i ; }
rank: 149
score: 98.76543511284723
patch: return return i ; if return i ;
rank: 149
score: 98.71511840820312
patch: return new String ( ch ) ;
rank: 149
score: 98.67425537109375
patch: return i ; for i return i ;
rank: 149
score: 98.58889770507812
patch: * / return - 1 ; }
rank: 150
score: 98.84956498579545
patch: if ( Character . is CaMeL Whitespace ( ch ;
rank: 150
score: 98.82402208116319
patch: . return i ; } return 1 ;
rank: 150
score: 98.79957411024306
patch: true return INDEX _ NOT _ FOUND ;
rank: 150
score: 98.76523844401042
patch: if return i ; return i ; ;
rank: 150
score: 98.71511840820312
patch: return j ; } j ++ ;
rank: 151
score: 98.94870229867789
patch: return ch . index CaMeL Of CaMeL Any ( cs ) ;
rank: 151
score: 98.90479532877605
patch: return INDEX _ NOT _ FOUND ; } else { }
rank: 151
score: 98.84761810302734
patch: return i ; } continue ; }
rank: 151
score: 98.82273646763393
patch: return i [ i ] ;
rank: 151
score: 98.79933860085227
patch: throw new Illegal CaMeL Access CaMeL Exception ( ) ;
rank: 151
score: 98.76448277064732
patch: return value ; return i ;
rank: 151
score: 98.71490478515625
patch: return size [ i ] ; }
rank: 151
score: 98.67342376708984
patch: return i ; ; = 0 ;
rank: 151
score: 98.58843994140625
patch: return count - 1 ;
rank: 152
score: 98.90452067057292
patch: return ( char ) search CaMeL Len ;
rank: 152
score: 98.84758966619319
patch: return index CaMeL Of CaMeL Any ( ; } }
rank: 152
score: 98.8226318359375
patch: return i * 1 ; } }
rank: 152
score: 98.7990214029948
patch: break ;
rank: 152
score: 98.76308186848958
patch: return return 1 ; if return i ;
rank: 152
score: 98.71393694196429
patch: return ( char ) ch ;
rank: 152
score: 98.58777618408203
patch: if ( ! is CaMeL Empty ;
rank: 153
score: 98.94779829545455
patch: return $STRING$ . index CaMeL Of ( ch ) ;
rank: 153
score: 98.92978341238839
patch: return value CaMeL Of ( search CaMeL Chars [ j ] ) ;
rank: 153
score: 98.84700927734374
patch: return index CaMeL Of ( i ) ; }
rank: 153
score: 98.82096354166667
patch: return $NUMBER$ ; } } return i ;
rank: 153
score: 98.7978759765625
patch: System . arraycopy ( search CaMeL Chars ) ;
rank: 153
score: 98.71276177300348
patch: return i ; j ++ ; } }
rank: 153
score: 98.67266845703125
patch: return - i ; break ; return i ;
rank: 154
score: 98.94661771334134
patch: return out . index CaMeL Of CaMeL Any ( ch ) ;
rank: 154
score: 98.90120442708333
patch: return cs . char CaMeL At ( i $STRING$ ) ;
rank: 154
score: 98.84694213867188
patch: return i ; } this . return i ;
rank: 154
score: 98.81987762451172
patch: return 0 [ 1 ] ; }
rank: 154
score: 98.76229095458984
patch: return i ; ; * * /
rank: 154
score: 98.71236419677734
patch: return i ? 0 : 0 ;
rank: 154
score: 98.67220633370536
patch: return - $NUMBER$ ; break ;
rank: 155
score: 98.92751057942708
patch: return search CaMeL Chars char CaMeL At ( j ) ;
rank: 155
score: 98.9010342684659
patch: append ( search CaMeL Chars [ j ] ) ;
rank: 155
score: 98.8468526204427
patch: if ( i <= search CaMeL Len ) return i ;
rank: 155
score: 98.8192138671875
patch: . * / return i ;
rank: 155
score: 98.79569498697917
patch: throw new Illegal CaMeL Argument CaMeL Exception ( ch ) ;
rank: 155
score: 98.76123046875
patch: return i ; break i ;
rank: 155
score: 98.71104213169643
patch: return i ; i ++ ;
rank: 155
score: 98.67072296142578
patch: return count ; ; return i ;
rank: 155
score: 98.58489227294922
patch: is i = i ; break ;
rank: 156
score: 98.92737833658855
patch: return ( cs . to CaMeL String ( ) ) ;
rank: 156
score: 98.84651014539931
patch: return i + 1 ; } } ;
rank: 156
score: 98.81840684678819
patch: return i ; } ; return i ;
rank: 156
score: 98.7947998046875
patch: return cs . to CaMeL String ( ) . length ;
rank: 156
score: 98.76087782118056
patch: return i ; while return return i ;
rank: 156
score: 98.71085611979167
patch: return Math . length ( ) ; }
rank: 156
score: 98.66963026258681
patch: return i ; if ; return i ;
rank: 156
score: 98.58457946777344
patch: [ j ] = - 1 ;
rank: 157
score: 98.94449556790866
patch: return search CaMeL Len + search CaMeL Chars [ j ] ;
rank: 157
score: 98.81813267299107
patch: { return i ; } }
rank: 157
score: 98.79393513997395
patch: r = cs . char CaMeL At ( j ) ;
rank: 157
score: 98.76083984375
patch: return i ; ; / * return i ;
rank: 157
score: 98.66959381103516
patch: return $NUMBER$ ; return - 1 ;
rank: 157
score: 98.583251953125
patch: return i ; break ; default :
rank: 158
score: 98.94410289417614
patch: return search CaMeL Chars [ j ] + null ;
rank: 158
score: 98.92539469401042
patch: return ( INDEX _ NOT _ FOUND ) - 0 ;
rank: 158
score: 98.84422718394886
patch: return Integer . value CaMeL Of ( ch ) ;
rank: 158
score: 98.78999837239583
patch: return INDEX _ NOT _ FOUND . [ i ] ;
rank: 158
score: 98.76083374023438
patch: return i ; return 1 ; ;
rank: 158
score: 98.66920776367188
patch: return i ; ; if i / ++ ;
rank: 158
score: 98.58303397042411
patch: return 0 ; } break ;
rank: 159
score: 98.92499651227679
patch: return i ( i . char CaMeL At ( j ) ) ;
rank: 159
score: 98.89924760298295
patch: return chars . char CaMeL At ( j ) ;
rank: 159
score: 98.84395345052083
patch: if ( i >= search CaMeL Chars . length ) {
rank: 159
score: 98.81735665457589
patch: return i [ 1 ] ;
rank: 159
score: 98.76079644097223
patch: return i ; if return return i ;
rank: 159
score: 98.70870971679688
patch: return j ; } }
rank: 159
score: 98.6686019897461
patch: return - $NUMBER$ ; return 1 ;
rank: 159
score: 98.58053152901786
patch: return ~ i + 1 ;
rank: 160
score: 98.8979248046875
patch: return new String ( search CaMeL Chars ) ;
rank: 160
score: 98.81671820746527
patch: . * * * ; return i ;
rank: 160
score: 98.78765869140625
patch: return INDEX _ NOT _ FOUND ; return i ; }
rank: 160
score: 98.76058959960938
patch: break ; return i ;
rank: 160
score: 98.70845540364583
patch: cs return INDEX _ NOT _ FOUND ;
rank: 160
score: 98.66852484809027
patch: return i ; ; return i ; ;
rank: 161
score: 98.93936861478366
patch: return index CaMeL Of CaMeL Any ( ch , i ) ;
rank: 161
score: 98.92420372596153
patch: return start + cs . char CaMeL At ( j ) ;
rank: 161
score: 98.89682442801339
patch: return ( int ) i ;
rank: 161
score: 98.84272766113281
patch: return i ; count ++ ; }
rank: 161
score: 98.81623670789931
patch: } else { return i ; } }
rank: 161
score: 98.7875467936198
patch: } else { return INDEX _ NOT _ FOUND ; }
rank: 161
score: 98.75957489013672
patch: return i ; while i -- ;
rank: 161
score: 98.70790608723958
patch: return is CaMeL Empty ( j ) ;
rank: 161
score: 98.66817801339286
patch: return false ; return i ;
rank: 161
score: 98.57840728759766
patch: return ( j + 1 ) ;
rank: 162
score: 98.93886155348558
patch: return i + search CaMeL Chars [ j ] . length ;
rank: 162
score: 98.8949483235677
patch: += cs . char CaMeL At ( j ) ; }
rank: 162
score: 98.84239612926136
patch: return list . index CaMeL Of ( ch ) ;
rank: 162
score: 98.81536865234375
patch: . * * * * / /
rank: 162
score: 98.75933837890625
patch: if return 1 ; return 0 ;
rank: 162
score: 98.707275390625
patch: return search CaMeL Len + j ; }
rank: 162
score: 98.66771104600694
patch: return 0 ; ; else return i ;
rank: 162
score: 98.5753173828125
patch: j = i ; break ; }
rank: 163
score: 98.84121704101562
patch: return Integer . parse CaMeL Int ( ; }
rank: 163
score: 98.78610229492188
patch: return return INDEX _ NOT _ FOUND ; }
rank: 163
score: 98.75929565429688
patch: return i ; j else { return i ;
rank: 163
score: 98.7069091796875
patch: return $STRING$ ; } j ++ ;
rank: 163
score: 98.66761016845703
patch: return ( return i ; break ;
rank: 163
score: 98.57463836669922
patch: if ( i ; break ; }
rank: 164
score: 98.92317417689732
patch: return ( INDEX _ NOT _ FOUND && ch == ch ) ;
rank: 164
score: 98.84026544744319
patch: if ( i < search CaMeL Chars . length ;
rank: 164
score: 98.81504603794643
patch: return 0 ; } * /
rank: 164
score: 98.75914849175348
patch: return i ; j else return i ;
rank: 165
score: 98.92265973772321
patch: return new ( cs . char CaMeL At ( j ) ) ;
rank: 165
score: 98.89093627929688
patch: return search CaMeL Chars . size ( ) ;
rank: 165
score: 98.83969116210938
patch: if ( Character . ends CaMeL With ( ch ) )
rank: 165
score: 98.81418863932292
patch: . return i ; } } else {
rank: 165
score: 98.75899658203124
patch: return i ; return i ; return 1 ;
rank: 165
score: 98.70460340711806
patch: return i . size ( ) ; }
rank: 165
score: 98.57334899902344
patch: if ( i == ~ 1 )
rank: 166
score: 98.93529163707386
patch: return search CaMeL Chars [ j ] . i ;
rank: 166
score: 98.890869140625
patch: return this . index CaMeL Of ( ch ) ;
rank: 166
score: 98.83873901367187
patch: return i ; ; } } return i ;
rank: 166
score: 98.81385803222656
patch: return i * 0 + i ;
rank: 166
score: 98.78367919921875
patch: default return INDEX _ NOT _ FOUND ; }
rank: 166
score: 98.75806342230902
patch: return i ; i if return i ;
rank: 166
score: 98.70376247829861
patch: return search CaMeL Len [ i ] ;
rank: 166
score: 98.66534423828125
patch: return i ; ; -- i ;
rank: 166
score: 98.57272338867188
patch: return super . return - 1 ;
rank: 167
score: 98.93475341796875
patch: return i . char CaMeL At ( i ] ) ;
rank: 167
score: 98.89084879557292
patch: return ( i - search CaMeL Chars . length ) ;
rank: 167
score: 98.83791775173611
patch: return i ; } else if ( ;
rank: 167
score: 98.78323364257812
patch: buf = cs . char CaMeL At ( j ) ;
rank: 167
score: 98.75795491536458
patch: return i ; ; else if i ;
rank: 167
score: 98.57243129185268
patch: return - 1 ; } ;
rank: 168
score: 98.93465576171874
patch: return search CaMeL Chars [ j ] ? ch
rank: 168
score: 98.91887958233173
patch: return ( i . index CaMeL Of ( ch ) ) ;
rank: 168
score: 98.83772583007813
patch: return index CaMeL Of ( ch , i ;
rank: 168
score: 98.81121826171875
patch: . return i ; return 1 ;
rank: 168
score: 98.70252336774554
patch: return 0 ; j ++ ;
rank: 168
score: 98.66448974609375
patch: return i ; return i + 1 ;
rank: 168
score: 98.56831359863281
patch: f = i ; break ; }
rank: 169
score: 98.93450927734375
patch: return count . to CaMeL String ( ) ;
rank: 169
score: 98.8871358235677
patch: return cs . char CaMeL At ( int [ ] ;
rank: 169
score: 98.837646484375
patch: if ( is CaMeL Empty ( ch ) ) continue ;
rank: 169
score: 98.81077745225694
patch: return i ; } catch return 1 ;
rank: 169
score: 98.78275553385417
patch: { search CaMeL Len = search CaMeL Chars . length ;
rank: 169
score: 98.70159912109375
patch: return search CaMeL Len + j ;
rank: 169
score: 98.66251918247768
patch: return count ; return i ;
rank: 169
score: 98.56577845982143
patch: return count - 1 ; }
rank: 170
score: 98.93405983664773
patch: return Integer . to CaMeL String ( ch ) ;
rank: 170
score: 98.91842886117789
patch: return ( cs . index CaMeL Of ( ch ) ) ;
rank: 170
score: 98.83563232421875
patch: return i + i + ; }
rank: 170
score: 98.81050618489583
patch: return i ; } * * * /
rank: 170
score: 98.78257242838542
patch: } return INDEX _ NOT _ FOUND ;
rank: 170
score: 98.75666046142578
patch: return i ; return i ; int
rank: 170
score: 98.70113796657986
patch: return i ; } i ++ ; }
rank: 170
score: 98.66250610351562
patch: return 0 ; return - 1 ; break ;
rank: 170
score: 98.56565638950893
patch: return length - 1 ; }
rank: 171
score: 98.9340108235677
patch: return ch . char CaMeL At ( j ] ) ;
rank: 171
score: 98.88495427911931
patch: return search CaMeL Chars [ char CaMeL At ] ;
rank: 171
score: 98.83550470525569
patch: if ( i >= search CaMeL Len ) break ;
rank: 171
score: 98.78228204900569
patch: return search CaMeL Chars [ j + 1 ] ;
rank: 171
score: 98.75596110026042
patch: return i ; else { return i ;
rank: 171
score: 98.6622085571289
patch: return i ; break ; break ;
rank: 171
score: 98.5630874633789
patch: return i ; case - 1 :
rank: 172
score: 98.93308327414773
patch: return search CaMeL Chars [ j ] : i ;
rank: 172
score: 98.91725667317708
patch: if ( INDEX _ NOT _ FOUND ) return i ;
rank: 172
score: 98.8345235188802
patch: = Character . to CaMeL Upper CaMeL Case ( ch ;
rank: 172
score: 98.81006622314453
patch: return 0 * 0 ; } }
rank: 172
score: 98.7821553548177
patch: if ( search CaMeL Len <= cs CaMeL Len ) {
rank: 172
score: 98.75562879774306
patch: if return i ; if return i ;
rank: 172
score: 98.69870431082589
patch: return - - 0 ; }
rank: 172
score: 98.66217803955078
patch: return i ; ; return null ;
rank: 172
score: 98.56123352050781
patch: return 1 ; return i ; }
rank: 173
score: 98.93132990056819
patch: return i * search CaMeL Chars [ j ] ;
rank: 173
score: 98.91666085379464
patch: return Integer . equals ( search CaMeL Chars [ j ] ) ;
rank: 173
score: 98.83420817057292
patch: throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ; }
rank: 173
score: 98.80908203125
patch: . * * * * * / /
rank: 173
score: 98.78201904296876
patch: if ( INDEX _ NOT _ FOUND ) {
rank: 173
score: 98.75299072265625
patch: } else { return i ;
rank: 173
score: 98.69605848524306
patch: ch return INDEX _ NOT _ FOUND ;
rank: 173
score: 98.56016322544643
patch: return - 1 + i ;
rank: 174
score: 98.93117268880208
patch: return search CaMeL Chars [ j ] . length ; }
rank: 174
score: 98.88406711154514
patch: return new INDEX _ NOT _ FOUND ;
rank: 174
score: 98.83409627278645
patch: if ( ! search CaMeL Chars [ j ] . ;
rank: 174
score: 98.80826144748264
patch: return i ; } if return 1 ;
rank: 174
score: 98.69581434461806
patch: return new char [ 0 ] ; }
rank: 174
score: 98.56001281738281
patch: throw new Error ( $STRING$ ) ;
rank: 175
score: 98.93023681640625
patch: return i + search CaMeL Chars . size ( ) ;
rank: 175
score: 98.91578020368304
patch: return is CaMeL Empty ( search CaMeL Chars [ j ] ) ;
rank: 175
score: 98.88313802083333
patch: return this . i ;
rank: 175
score: 98.83394622802734
patch: return i ; continue ; } }
rank: 175
score: 98.80734252929688
patch: return i * 0 ;
rank: 175
score: 98.780029296875
patch: throw new Illegal CaMeL Argument CaMeL Exception ( i ) ;
rank: 175
score: 98.75090026855469
patch: ret = i ; return i ;
rank: 175
score: 98.69566514756944
patch: return is CaMeL Empty ( ) ; }
rank: 175
score: 98.55878448486328
patch: result [ j ] = i ;
rank: 176
score: 98.92985026041667
patch: return i + ch ;
rank: 176
score: 98.91511753627232
patch: return substring ( cs . char CaMeL At ( j ) ) ;
rank: 176
score: 98.831494140625
patch: return i ; } else if ( ; }
rank: 176
score: 98.80669487847223
patch: . / * * / return i ;
rank: 176
score: 98.69559478759766
patch: return [ j ] ; } }
rank: 176
score: 98.65950012207031
patch: return 0 + i ; break ;
rank: 176
score: 98.55722045898438
patch: return 1 ; break ; } }
rank: 177
score: 98.92957652698864
patch: return i . to CaMeL String ( ) ; }
rank: 177
score: 98.9136962890625
patch: return ( cs . char CaMeL At ( j ) ) ; }
rank: 177
score: 98.83026733398438
patch: if ( search CaMeL Chars [ j ] ;
rank: 177
score: 98.80543518066406
patch: . return i ; return i ;
rank: 177
score: 98.7793477376302
patch: if ( search CaMeL Len <= search CaMeL Len ) {
rank: 177
score: 98.74845668247768
patch: return i ; ; break ;
rank: 177
score: 98.65876600477431
patch: return - i ; return - 1 ;
rank: 178
score: 98.92955525716145
patch: return i . to CaMeL String ( ) + ch ;
rank: 178
score: 98.91335824819711
patch: return ( ( char ) INDEX _ NOT _ FOUND ) ;
rank: 178
score: 98.82975630326705
patch: if ( i <= search CaMeL Len ) break ;
rank: 178
score: 98.80530463324652
patch: [ 0 ] = i ; break ;
rank: 178
score: 98.779296875
patch: if ( ch == INDEX _ NOT _ FOUND ) {
rank: 178
score: 98.74841986762152
patch: return i ; i catch return i ;
rank: 178
score: 98.69293891059027
patch: return is CaMeL Empty ( cs ) ;
rank: 178
score: 98.6583251953125
patch: return i ; } = i ;
rank: 178
score: 98.55655670166016
patch: return - 1 [ i ] ;
rank: 179
score: 98.92933146158855
patch: return i + ch . to CaMeL String ( ) ;
rank: 179
score: 98.91002807617187
patch: return += search CaMeL Chars [ j ] ;
rank: 179
score: 98.80170355902777
patch: . return i ; } } if ;
rank: 179
score: 98.77666015625
patch: b = search CaMeL Chars [ j ] ;
rank: 179
score: 98.74784342447917
patch: return 0 ; i else return i ;
rank: 179
score: 98.65799289279514
patch: return - 1 ; if i ++ ;
rank: 179
score: 98.55515543619792
patch: return i + $NUMBER$ ;
rank: 180
score: 98.82792358398437
patch: return i . index CaMeL Of ( ; }
rank: 180
score: 98.80043247767857
patch: . return 0 ; } }
rank: 180
score: 98.77562459309895
patch: pos = cs . char CaMeL At ( i ) ;
rank: 180
score: 98.65788269042969
patch: if i return i ; break ;
rank: 181
score: 98.92677815755208
patch: return i - cs . to CaMeL String ( ) ;
rank: 181
score: 98.90961565290179
patch: return index CaMeL Of CaMeL Any ( ( char ) ch ) ;
rank: 181
score: 98.87171427408855
patch: return ( char ) search CaMeL Chars [ i ] ;
rank: 181
score: 98.8277587890625
patch: return - 1 ; } } ;
rank: 181
score: 98.79686737060547
patch: } else if return i ; }
rank: 181
score: 98.7749532063802
patch: if ( j == search CaMeL Chars . length ) {
rank: 181
score: 98.74754503038194
patch: if i return i ; return i ;
rank: 181
score: 98.68641493055556
patch: return cs CaMeL Len ; } break ;
rank: 181
score: 98.5488052368164
patch: = i + i ; break ;
rank: 182
score: 98.90951772836539
patch: return i ; } } return search CaMeL Chars . length ;
rank: 182
score: 98.82749938964844
patch: if ; ; break ; } }
rank: 182
score: 98.77479044596355
patch: if ( search CaMeL Len >= search CaMeL Len ) {
rank: 182
score: 98.68531145368304
patch: return i . length ; }
rank: 182
score: 98.65689849853516
patch: return name ; ; return i ;
rank: 182
score: 98.54735565185547
patch: if i -- ; break ; }
rank: 183
score: 98.92600319602273
patch: return this + search CaMeL Chars [ j ] ;
rank: 183
score: 98.8713623046875
patch: return new search CaMeL Chars [ j ] ;
rank: 183
score: 98.82693481445312
patch: return i ; ; } else {
rank: 183
score: 98.79402669270833
patch: return 1 ; } else
rank: 183
score: 98.77305094401042
patch: if ( j >= search CaMeL Chars . length ) {
rank: 183
score: 98.74533081054688
patch: return 0 ; i return i ;
rank: 183
score: 98.68468475341797
patch: [ j ] = ch ; }
rank: 183
score: 98.6556396484375
patch: return i ; ; ; ;
rank: 183
score: 98.54717254638672
patch: return j ; break ; } }
rank: 184
score: 98.86996459960938
patch: return $STRING$ ;
rank: 184
score: 98.79302978515625
patch: . * * * * / break ;
rank: 184
score: 98.7728515625
patch: result = INDEX _ NOT _ FOUND ; }
rank: 184
score: 98.74518585205078
patch: return i ; if return 0 ;
rank: 184
score: 98.68396759033203
patch: [ j ] = i ; }
rank: 184
score: 98.655517578125
patch: return i ; return count ;
rank: 184
score: 98.54707336425781
patch: if ( i >= i ) {
rank: 185
score: 98.92587280273438
patch: break INDEX _ NOT _ FOUND ;
rank: 185
score: 98.90732828776042
patch: return cs . trim ( ) . length ( ) ;
rank: 185
score: 98.86847478693181
patch: return ( cs . char CaMeL At ( j )
rank: 185
score: 98.82594299316406
patch: return i - i + 1 ;
rank: 185
score: 98.79137505425348
patch: . ; * * * * * /
rank: 185
score: 98.77283732096355
patch: return INDEX _ NOT _ FOUND . length ; } }
rank: 185
score: 98.74385288783482
patch: return j ; return i ;
rank: 185
score: 98.68326822916667
patch: return i . length ( ) ; }
rank: 185
score: 98.65396118164062
patch: return i + - - 1 ;
rank: 186
score: 98.92437189275569
patch: return search CaMeL Chars [ j ] + $STRING$ ;
rank: 186
score: 98.8257168856534
patch: throw new Unsupported CaMeL Operation CaMeL Exception ( ; }
rank: 186
score: 98.79108428955078
patch: return i ; } else { }
rank: 186
score: 98.77205403645833
patch: default return INDEX _ NOT _ FOUND ;
rank: 186
score: 98.74359809027777
patch: return i ; return - - 0 ;
rank: 186
score: 98.68246895926339
patch: return i [ j ] ;
rank: 186
score: 98.65366617838542
patch: return - - 1 ;
rank: 187
score: 98.78956821986607
patch: return 0 + i ; }
rank: 187
score: 98.771240234375
patch: tmp = cs . char CaMeL At ( i ) ;
rank: 187
score: 98.743408203125
patch: return i ; i else * /
rank: 187
score: 98.6812032063802
patch: return $STRING$ ; } }
rank: 187
score: 98.65359933035714
patch: return i ; return $NUMBER$ ;
rank: 187
score: 98.54611206054688
patch: if ; return - 1 ; }
rank: 188
score: 98.9223403930664
patch: return i + ch . length ;
rank: 188
score: 98.90384615384616
patch: return ( INDEX _ NOT _ FOUND . length 1 ) ;
rank: 188
score: 98.86464621803977
patch: return i . search CaMeL Chars [ i ] ;
rank: 188
score: 98.82175699869792
patch: if ( i == search CaMeL Len )
rank: 188
score: 98.78921072823661
patch: return i ; } if ;
rank: 188
score: 98.77115885416667
patch: if ( i != search CaMeL Chars . length ) {
rank: 188
score: 98.74323272705078
patch: return i ; else return 1 ;
rank: 188
score: 98.68090209960937
patch: character return i ;
rank: 188
score: 98.54314422607422
patch: [ i ] return 0 ; }
rank: 189
score: 98.86439098011364
patch: return Integer . index CaMeL Of ( ch ) ;
rank: 189
score: 98.8214111328125
patch: return i ; } else { return ; } }
rank: 189
score: 98.7890396118164
patch: return 0 ; } if ; }
rank: 189
score: 98.7707010904948
patch: if ( search CaMeL Len >= cs CaMeL Len ) {
rank: 189
score: 98.68086073133681
patch: return is CaMeL Empty ( i ) ;
rank: 189
score: 98.65313720703125
patch: return i ; ; return i ; }
rank: 189
score: 98.54244232177734
patch: int i = i - 1 ;
rank: 190
score: 98.9210205078125
patch: return ch ? INDEX _ NOT _ FOUND : i ;
rank: 190
score: 98.82086859809027
patch: if ( i >= search CaMeL Len ;
rank: 190
score: 98.78782435825893
patch: return 0 [ i ] ;
rank: 190
score: 98.65303802490234
patch: return ( return i - 1 ;
rank: 190
score: 98.5423812866211
patch: t = i ; break ; }
rank: 191
score: 98.86355251736111
patch: return ( int ) search CaMeL Len ;
rank: 191
score: 98.7701924641927
patch: throw new Illegal CaMeL State CaMeL Exception ( ) ; }
rank: 191
score: 98.74224853515625
patch: return i ; ; return return i ;
rank: 191
score: 98.6802978515625
patch: return get CaMeL Value ( j ) ;
rank: 191
score: 98.65297444661458
patch: return 0 ; return i + i ;
rank: 191
score: 98.54124450683594
patch: return ~ i ; break ; }
rank: 192
score: 98.76974487304688
patch: break ; } return INDEX _ NOT _ FOUND ; }
rank: 192
score: 98.74150848388672
patch: return i ; return * 1 ;
rank: 192
score: 98.67945692274306
patch: return i ? i : i ; }
rank: 192
score: 98.64949798583984
patch: return - i ; return null ;
rank: 192
score: 98.54054260253906
patch: ret = 0 ; break ; }
rank: 193
score: 98.91907755533855
patch: return search CaMeL Chars [ j ] . length 1 ;
rank: 193
score: 98.78475516183036
patch: . return 1 ; } }
rank: 193
score: 98.76920942826705
patch: return super . index CaMeL Of ( ch ) ;
rank: 193
score: 98.74122450086806
patch: return i ; return return - i ;
rank: 193
score: 98.64944458007812
patch: return 0 ; ; ;
rank: 193
score: 98.5386962890625
patch: int i = i ; break ;
rank: 194
score: 98.91904518821023
patch: return count . char CaMeL At ( j ) ;
rank: 194
score: 98.89993051382211
patch: return new byte [ search CaMeL Chars . length 1 ] ;
rank: 194
score: 98.86091752485795
patch: return search CaMeL Chars [ i ] == ch ;
rank: 194
score: 98.81720525568181
patch: if ( search CaMeL Chars [ j ] == ;
rank: 194
score: 98.78394426618304
patch: return 0 i ; } }
rank: 194
score: 98.76889038085938
patch: result += INDEX _ NOT _ FOUND ; }
rank: 194
score: 98.74062771267361
patch: if ( return i ; return i ;
rank: 194
score: 98.67914496527777
patch: = search CaMeL Len [ j ] ;
rank: 194
score: 98.5382308959961
patch: buffer = i ; break ; }
rank: 195
score: 98.86060587565105
patch: return new char [ search CaMeL Chars . length - 1
rank: 195
score: 98.81587049696181
patch: return i + search CaMeL Len ; }
rank: 195
score: 98.78373209635417
patch: return $NUMBER$ ; } }
rank: 195
score: 98.67852105034723
patch: return Math . size ( ) ; }
rank: 195
score: 98.53804016113281
patch: [ j ++ ] = i ;
rank: 196
score: 98.86037190755208
patch: return ( Character ) search CaMeL Chars [ j ] ;
rank: 196
score: 98.81390380859375
patch: return i ; } System . arraycopy ( ;
rank: 196
score: 98.78125762939453
patch: return i ; } else * /
rank: 196
score: 98.74007161458333
patch: return return 1 ; return - 1 ;
rank: 196
score: 98.64750453404018
patch: return i ; break ; ;
rank: 196
score: 98.53671264648438
patch: return ~ i - 1 ; }
rank: 197
score: 98.91187540690105
patch: return i . get CaMeL Class CaMeL Name ( ) ;
rank: 197
score: 98.86018880208333
patch: return ( char ) INDEX _ NOT _ FOUND ; }
rank: 197
score: 98.81324114118304
patch: return index CaMeL Of ; }
rank: 197
score: 98.7798080444336
patch: . * * * ; * /
rank: 197
score: 98.7686279296875
patch: break ; } }
rank: 197
score: 98.7394027709961
patch: return i ; i return 1 ;
rank: 197
score: 98.53591918945312
patch: if ( ! i == i )
rank: 198
score: 98.91160888671875
patch: return out . to CaMeL String ( ) ;
rank: 198
score: 98.77961730957031
patch: . ; * * * * /
rank: 198
score: 98.7678731282552
patch: prefix = cs . char CaMeL At ( i ) ;
rank: 198
score: 98.73550075954861
patch: return i ; } else if i ;
rank: 198
score: 98.6734619140625
patch: return ( char ) cs CaMeL Len ;
rank: 198
score: 98.64637756347656
patch: return - i ; break ; ;
rank: 198
score: 98.53549194335938
patch: return Math . max ( i ;
rank: 199
score: 98.91104888916016
patch: return i ? 0 : i ;
rank: 199
score: 98.85872025923295
patch: return search CaMeL Chars . get ( j ) ;
rank: 199
score: 98.77857971191406
patch: } else { return 1 ; }
rank: 199
score: 98.73532104492188
patch: list = i ; return i ;
rank: 199
score: 98.67116001674107
patch: return size [ i ] ;
rank: 199
score: 98.64474826388889
patch: return - i ; ; return i ;
rank: 200
score: 98.91101684570313
patch: return i | INDEX _ NOT _ FOUND ;
rank: 200
score: 98.89583646334134
patch: return ( i ? INDEX _ NOT _ FOUND : i ;
rank: 200
score: 98.85801188151042
patch: return this . search CaMeL Chars [ i ] ; }
rank: 200
score: 98.81184605189732
patch: return i - $NUMBER$ ; }
rank: 200
score: 98.77693006727431
patch: return 0 ; } } return $NUMBER$ ;
rank: 200
score: 98.76467895507812
patch: tmp = cs . char CaMeL At ( j ) ;
rank: 200
score: 98.73462785993304
patch: return i ; i -- ;
rank: 200
score: 98.671142578125
patch: return new char [ 1 ] ;
rank: 200
score: 98.64408111572266
patch: i i * / return i ;
rank: 200
score: 98.5326919555664
patch: return 1 [ i ] ; }
rank: 201
score: 98.91002308238636
patch: return i . get CaMeL Property ( ch ) ;
rank: 201
score: 98.8955411044034
patch: return count + search CaMeL Chars [ j ] ;
rank: 201
score: 98.85788981119792
patch: return search CaMeL Chars [ j ] ( ch ) ;
rank: 201
score: 98.81093139648438
patch: return i ; } } } return 0 ;
rank: 201
score: 98.7645263671875
patch: new = cs . char CaMeL At ( i ) ;
rank: 201
score: 98.73454284667969
patch: for return i ; return i ;
rank: 201
score: 98.67062038845486
patch: return search CaMeL Chars . length ; }
rank: 202
score: 98.89545232599431
patch: return Math . is CaMeL Empty ( ch ) ;
rank: 202
score: 98.81019897460938
patch: return i ; } } this . return ;
rank: 202
score: 98.764501953125
patch: return INDEX _ NOT _ FOUND || i ;
rank: 202
score: 98.73450927734375
patch: return i ; } return - - 1 ;
rank: 202
score: 98.66838073730469
patch: return 1 ; j ++ ; }
rank: 202
score: 98.64279513888889
patch: if i = i ; return i ;
rank: 203
score: 98.80691189236111
patch: if ( ; else break ; } }
rank: 203
score: 98.77558135986328
patch: return i * 0 * i ;
rank: 203
score: 98.76414659288194
patch: name return INDEX _ NOT _ FOUND ;
rank: 203
score: 98.66763305664062
patch: return is CaMeL Empty ( ) ;
rank: 203
score: 98.53111049107143
patch: = 1 ; break ; }
rank: 204
score: 98.909423828125
patch: return i . substring ( 0 , j ) ;
rank: 204
score: 98.8942159016927
patch: return ( INDEX _ NOT _ FOUND , i ) ;
rank: 204
score: 98.854833984375
patch: return search CaMeL Chars [ j i ] ;
rank: 204
score: 98.8061767578125
patch: return i ; } } else return i ;
rank: 204
score: 98.77533637152777
patch: . return i * i ; } }
rank: 204
score: 98.76260036892361
patch: ret = INDEX _ NOT _ FOUND ;
rank: 204
score: 98.73399135044643
patch: int i = return i ;
rank: 204
score: 98.66650390625
patch: return index CaMeL Of ( $STRING$ ) ;
rank: 204
score: 98.64134216308594
patch: return 1 ; ; return 1 ;
rank: 204
score: 98.53053283691406
patch: = i ; return 0 ; }
rank: 205
score: 98.90925736860795
patch: return * / search CaMeL Chars [ j ] ;
rank: 205
score: 98.89412841796874
patch: search CaMeL Chars [ j ] = i ;
rank: 205
score: 98.80609809027777
patch: return i ; ; } } else {
rank: 205
score: 98.77530670166016
patch: return $NUMBER$ ; } return 1 ;
rank: 205
score: 98.76259543678977
patch: return INDEX _ NOT _ FOUND + j ; }
rank: 205
score: 98.73387993706598
patch: return i ; return i ; } ;
rank: 205
score: 98.666259765625
patch: return name [ j ] ; }
rank: 205
score: 98.52984619140625
patch: return 0 [ j ] ;
rank: 206
score: 98.90691583806819
patch: return count . index CaMeL Of ( ch ) ;
rank: 206
score: 98.85392456054687
patch: return search CaMeL Chars [ i ) ] ;
rank: 206
score: 98.80584716796875
patch: return i - i + 1 ; }
rank: 206
score: 98.77457004123264
patch: . = i ; break ; } }
rank: 206
score: 98.75900268554688
patch: pos = cs . char CaMeL At ( j ) ;
rank: 206
score: 98.73368835449219
patch: return i ; return - name ;
rank: 206
score: 98.66545758928571
patch: return - - i ; }
rank: 206
score: 98.64102935791016
patch: return 0 ; while return 1 ;
rank: 206
score: 98.52967834472656
patch: return 1 ; i ++ ; }
rank: 207
score: 98.90540660511364
patch: return search CaMeL Chars [ j ] - ch ;
rank: 207
score: 98.89288799579327
patch: return ( ( Char CaMeL Sequence ) cs ) . length ;
rank: 207
score: 98.8516133626302
patch: return ( / * INDEX _ NOT _ FOUND ) ;
rank: 207
score: 98.80578002929687
patch: = i - 1 ; break ; } }
rank: 207
score: 98.7734375
patch: return i ; } catch return i ;
rank: 207
score: 98.73356628417969
patch: if i ; return i ; ;
rank: 207
score: 98.64055633544922
patch: return i ; ; return count ;
rank: 207
score: 98.52941022600446
patch: return i + 1 ; ;
rank: 208
score: 98.90383911132812
patch: return i . get CaMeL Chars ( ) . length ;
rank: 208
score: 98.89128875732422
patch: return value . size ( ) ;
rank: 208
score: 98.8505859375
patch: return i - search CaMeL Chars . length ;
rank: 208
score: 98.80565643310547
patch: return i ; } ++ i ;
rank: 208
score: 98.77334158761161
patch: return i * 0 ; }
rank: 208
score: 98.7586669921875
patch: prefix = cs . char CaMeL At ( j ) ;
rank: 208
score: 98.73184204101562
patch: return i ; ; return - - 1 ;
rank: 208
score: 98.6610107421875
patch: ( search CaMeL Chars [ i ] )
rank: 208
score: 98.639404296875
patch: return ( return i ; return i ;
rank: 208
score: 98.52884674072266
patch: for i = i + 1 ;
rank: 209
score: 98.90226606889205
patch: return ch + search CaMeL Chars [ j ] ;
rank: 209
score: 98.89087853064903
patch: return new int [ INDEX _ NOT _ FOUND ] ; }
rank: 209
score: 98.85008544921875
patch: return new int INDEX _ NOT _ FOUND ;
rank: 209
score: 98.80507590553977
patch: if ( Character . is CaMeL Digit ( ch ;
rank: 209
score: 98.75849066840277
patch: return ( INDEX _ NOT _ FOUND ;
rank: 209
score: 98.66080050998264
patch: return INDEX _ NOT _ FOUND 1 ;
rank: 209
score: 98.63805541992187
patch: return i ; ; = i + i ;
rank: 209
score: 98.52765655517578
patch: if ( ! i . equals ;
rank: 210
score: 98.77324676513672
patch: } else * * * * /
rank: 210
score: 98.75787353515625
patch: v = cs . char CaMeL At ( i ) ;
rank: 210
score: 98.66038682725694
patch: return new char [ i ] ; }
rank: 210
score: 98.63748779296876
patch: return i ; ; return i + 0 ;
rank: 210
score: 98.52720642089844
patch: pos = i ; break ; }
rank: 211
score: 98.89910888671875
patch: return i . int CaMeL Value ( ) ;
rank: 211
score: 98.89066938920455
patch: return start . index CaMeL Of ( ch ) ;
rank: 211
score: 98.8499755859375
patch: return i ; } } INDEX _ NOT _ FOUND ;
rank: 211
score: 98.80277099609376
patch: return i ; } ; } return i ;
rank: 211
score: 98.77323404947917
patch: return i ; * /
rank: 211
score: 98.75746663411458
patch: if ( search CaMeL Len < search CaMeL Len ) {
rank: 211
score: 98.72970581054688
patch: return i ; i += i ;
rank: 211
score: 98.65944417317708
patch: return cs . [ j ] ; }
rank: 211
score: 98.63702392578125
patch: return ; = i ;
rank: 212
score: 98.84816672585227
patch: return index CaMeL Of ( ch , ch ) ;
rank: 212
score: 98.80166286892361
patch: return i ; } break ; } }
rank: 212
score: 98.77013397216797
patch: return i * i + 1 ;
rank: 212
score: 98.75667572021484
patch: return index CaMeL Of CaMeL Any ;
rank: 212
score: 98.72952706473214
patch: return i ; return value ;
rank: 212
score: 98.65884060329861
patch: return Math . length [ j ] ;
rank: 212
score: 98.63554551866319
patch: return i ; while ; return i ;
rank: 213
score: 98.84798177083333
patch: return ch . char CaMeL At ( j ) ; }
rank: 213
score: 98.8014892578125
patch: return index CaMeL Of ( i , ; }
rank: 213
score: 98.76970672607422
patch: return 1 ; } } else {
rank: 213
score: 98.72950744628906
patch: return 0 ; for return 1 ;
rank: 213
score: 98.63341522216797
patch: return 0 ; ; += i ;
rank: 213
score: 98.52079010009766
patch: return i - 1 + i ;
rank: 214
score: 98.89589436848958
patch: return i + cs . to CaMeL String ( ) ;
rank: 214
score: 98.88844651442308
patch: return ( ( byte ) INDEX _ NOT _ FOUND ) ;
rank: 214
score: 98.84749755859374
patch: start return search CaMeL Chars [ j ] ;
rank: 214
score: 98.80147705078124
patch: return i + i + 1 ; } }
rank: 214
score: 98.76909044053819
patch: . * * * i * * /
rank: 214
score: 98.75656127929688
patch: b += search CaMeL Chars [ j ] ;
rank: 214
score: 98.72932264539931
patch: if return i ; return - i ;
rank: 214
score: 98.6539306640625
patch: return search CaMeL Len - j ; }
rank: 215
score: 98.894775390625
patch: return i * 0 + search CaMeL Chars . length ;
rank: 215
score: 98.72896321614583
patch: return i ; for return return i ;
rank: 215
score: 98.63252766927083
patch: return 0 ; return - - 1 ;
rank: 215
score: 98.51986694335938
patch: [ j ] return 0 ; }
rank: 216
score: 98.88758341471355
patch: return ( search CaMeL Len - cs CaMeL Len ) ;
rank: 216
score: 98.84593709309895
patch: return ( int ) ( INDEX _ NOT _ FOUND ;
rank: 216
score: 98.79940032958984
patch: return i - count ; } }
rank: 216
score: 98.7684326171875
patch: . * * * * ; * /
rank: 216
score: 98.75526936848958
patch: ret = cs . char CaMeL At ( i ) ;
rank: 216
score: 98.72824096679688
patch: return 1 ; return i ; ;
rank: 216
score: 98.6518783569336
patch: return Math . length ( ) ;
rank: 216
score: 98.51800537109375
patch: += i ; break ; } }
rank: 217
score: 98.84551391601562
patch: b return search CaMeL Chars [ j ] ;
rank: 217
score: 98.79921653053977
patch: return i ; } else { if ( ; }
rank: 217
score: 98.76817321777344
patch: . * * * / * /
rank: 217
score: 98.7542391690341
patch: += cs . char CaMeL At ( i ) ;
rank: 217
score: 98.7278060913086
patch: return i ; i * * /
rank: 217
score: 98.65155707465277
patch: return cs CaMeL Len . length ; }
rank: 217
score: 98.63143157958984
patch: return - 0 ; return i ;
rank: 217
score: 98.51670837402344
patch: return i - 1 ; break ;
rank: 218
score: 98.89164595170455
patch: return search CaMeL Chars [ j ] - 1 ;
rank: 218
score: 98.8452481356534
patch: return Math . index CaMeL Of ( ch ) ;
rank: 218
score: 98.79850769042969
patch: return i % i ; } }
rank: 218
score: 98.76802062988281
patch: return 0 * 0 + i ;
rank: 218
score: 98.75413818359375
patch: return INDEX _ NOT _ FOUND + count ;
rank: 218
score: 98.72771453857422
patch: = 0 ; return - 1 ;
rank: 218
score: 98.63090515136719
patch: return i ; ; = 1 ;
rank: 218
score: 98.51564025878906
patch: buf [ j ] = i ;
rank: 219
score: 98.8905029296875
patch: return i + cs . length ( ) ;
rank: 219
score: 98.84507242838542
patch: return ( byte ) search CaMeL Chars [ j ] ;
rank: 219
score: 98.79673073508523
patch: = ch . char CaMeL At ( i ) ;
rank: 219
score: 98.76763916015625
patch: return 0 i * i ;
rank: 219
score: 98.7271957397461
patch: = i ; return - 0 ;
rank: 219
score: 98.63037109375
patch: return i ; ; = i + 1 ;
rank: 219
score: 98.5149154663086
patch: result = 0 ; break ; }
rank: 220
score: 98.89044744318181
patch: return search CaMeL Chars [ j ] + i ;
rank: 220
score: 98.88479614257812
patch: return ( INDEX _ NOT _ FOUND + i ) ;
rank: 220
score: 98.84482828776042
patch: return index CaMeL Of CaMeL Any ( search CaMeL Chars [
rank: 220
score: 98.79473266601562
patch: if ( $STRING$ . equals ( ch ) ;
rank: 220
score: 98.76740180121527
patch: return 1 ; } else return 1 ;
rank: 220
score: 98.75299627130681
patch: return INDEX _ NOT _ FOUND ; case 1 :
rank: 220
score: 98.72718505859375
patch: throw new Runtime CaMeL Exception ( $STRING$ ) ;
rank: 220
score: 98.65031127929687
patch: return count ; }
rank: 220
score: 98.63029261997768
patch: return i ; return null ;
rank: 220
score: 98.51422119140625
patch: if ; return i ; }
rank: 221
score: 98.76529693603516
patch: return 0 ; } catch ; }
rank: 221
score: 98.75287543402777
patch: ! return INDEX _ NOT _ FOUND ;
rank: 221
score: 98.72700500488281
patch: return i ; try return i ;
rank: 221
score: 98.64947509765625
patch: return i ? i : 0 ; }
rank: 221
score: 98.51182556152344
patch: = i ; return 1 ; }
rank: 222
score: 98.8879061612216
patch: return search CaMeL Chars [ j ] : ch ;
rank: 222
score: 98.88270060221355
patch: return ( search CaMeL Chars [ j ] == ch )
rank: 222
score: 98.84443803267045
patch: return index CaMeL Of ( search CaMeL Len ) ;
rank: 222
score: 98.75196329752605
patch: v = cs . char CaMeL At ( j ) ;
rank: 222
score: 98.64862823486328
patch: return search CaMeL Len - j ;
rank: 222
score: 98.62959798177083
patch: return i ; return i - i ;
rank: 222
score: 98.51103973388672
patch: += ( i + 1 ) ;
rank: 223
score: 98.88725142045455
patch: return 0 - search CaMeL Chars [ j ] ;
rank: 223
score: 98.8811504657452
patch: return cs . char CaMeL At ( j ) == ch ;
rank: 223
score: 98.84355333116319
patch: start return INDEX _ NOT _ FOUND ;
rank: 223
score: 98.75122680664063
patch: p = search CaMeL Chars [ j ] ;
rank: 223
score: 98.72548130580357
patch: return i + i ; ;
rank: 223
score: 98.64733123779297
patch: return chars [ j ] ; }
rank: 223
score: 98.51080322265625
patch: return ( i - 1 ) ;
rank: 224
score: 98.88604181463069
patch: return search CaMeL Chars [ j ] . start ;
rank: 224
score: 98.88023963341347
patch: return search CaMeL Chars [ search CaMeL Chars [ j ] ;
rank: 224
score: 98.84310913085938
patch: return search CaMeL Chars [ cs CaMeL Len ] ; }
rank: 224
score: 98.79053844105114
patch: if ( i == search CaMeL Len ) break ;
rank: 224
score: 98.76376342773438
patch: * * * / return i ;
rank: 224
score: 98.750732421875
patch: sb = cs . char CaMeL At ( i ) ;
rank: 224
score: 98.72459581163194
patch: return i ; return i ; * /
rank: 224
score: 98.62890014648437
patch: return 0 ; ; return i + i ;
rank: 224
score: 98.5102310180664
patch: return - 1 - 1 ; }
rank: 225
score: 98.88001505533855
patch: return i . search CaMeL Chars [ j ] ; }
rank: 225
score: 98.84285278320313
patch: return char CaMeL At ( j ) ; }
rank: 225
score: 98.79026576450893
patch: return i + ; } }
rank: 225
score: 98.76321072048611
patch: . if ; * * * * /
rank: 225
score: 98.74937947591145
patch: o = cs . char CaMeL At ( j ) ;
rank: 225
score: 98.72403293185764
patch: return i ; / * return i ;
rank: 225
score: 98.64546034071181
patch: return Integer . size ( ) ; }
rank: 225
score: 98.62691243489583
patch: return i ; ; = i ; ;
rank: 225
score: 98.51005554199219
patch: m = true ; break ; }
rank: 226
score: 98.88524280894886
patch: return count - search CaMeL Chars [ j ] ;
rank: 226
score: 98.8425625887784
patch: return cs . search CaMeL Chars [ i ] ;
rank: 226
score: 98.7894287109375
patch: throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ;
rank: 226
score: 98.72366333007812
patch: int return return i ;
rank: 226
score: 98.64443630642361
patch: return char CaMeL At [ i ] ;
rank: 226
score: 98.62674560546876
patch: return i ; ; / / return i ;
rank: 226
score: 98.50948333740234
patch: if ( is CaMeL Empty ( ;
rank: 227
score: 98.7882080078125
patch: if ( ; else break ; }
rank: 227
score: 98.76189422607422
patch: return 0 + 0 ; } }
rank: 227
score: 98.74864612926136
patch: result return INDEX _ NOT _ FOUND ; } }
rank: 227
score: 98.7235616048177
patch: int i return i ;
rank: 227
score: 98.64394124348958
patch: return cs CaMeL Len [ i ] ;
rank: 227
score: 98.6263198852539
patch: return ( 1 ; return i ;
rank: 227
score: 98.50912475585938
patch: * / return i ;
rank: 228
score: 98.88444010416667
patch: return i . get CaMeL Type ( ) + ch ;
rank: 228
score: 98.84119415283203
patch: return i . trim ( ) ;
rank: 228
score: 98.78739420572917
patch: if ( i <= search CaMeL Len ;
rank: 228
score: 98.76164245605469
patch: return 1 ; } return $NUMBER$ ;
rank: 228
score: 98.74818929036458
patch: buffer = cs . char CaMeL At ( i ) ;
rank: 228
score: 98.72332000732422
patch: i = i ; return i ;
rank: 228
score: 98.62604522705078
patch: i return - 1 ; break ;
rank: 228
score: 98.50829060872395
patch: return length - 1 ;
rank: 229
score: 98.88374633789063
patch: return - search CaMeL Chars [ j ] ;
rank: 229
score: 98.78696695963542
patch: return index CaMeL Of ( ch , ;
rank: 229
score: 98.76160539899554
patch: return i ; } else ;
rank: 229
score: 98.74793497721355
patch: ret = cs . char CaMeL At ( j ) ;
rank: 229
score: 98.72318522135417
patch: if return i ; while return i ;
rank: 229
score: 98.62599690755208
patch: return i + 1 ; return i ;
rank: 229
score: 98.50806427001953
patch: return j ; } return i ;
rank: 230
score: 98.78683810763889
patch: if ( is CaMeL Empty ( ch ;
rank: 230
score: 98.76151275634766
patch: return 0 i * i ; }
rank: 230
score: 98.72211456298828
patch: return i ; return - j ;
rank: 230
score: 98.64331732855902
patch: return i ; } j = 0 ;
rank: 230
score: 98.62530517578125
patch: return - - 1 ; return i ;
rank: 231
score: 98.8769198330966
patch: return INDEX _ NOT _ FOUND ( ch ) ;
rank: 231
score: 98.8396329012784
patch: return index CaMeL Of ( cs , ch ) ;
rank: 231
score: 98.78666856553819
patch: return i - search CaMeL Len ; }
rank: 231
score: 98.7475830078125
patch: } return INDEX _ NOT _ FOUND ; }
rank: 231
score: 98.7210205078125
patch: } return i ;
rank: 231
score: 98.62514919704861
patch: return - 1 ; if return 1 ;
rank: 231
score: 98.50778198242188
patch: return index CaMeL Of ( ; }
rank: 232
score: 98.87421123798077
patch: return ( ( String ) INDEX _ NOT _ FOUND ) ;
rank: 232
score: 98.83720703125
patch: return i char CaMeL At ( j ) ;
rank: 232
score: 98.78582208806819
patch: return i ; } } else { return i ;
rank: 232
score: 98.76041957310268
patch: return i i ; } }
rank: 232
score: 98.74662272135417
patch: return index CaMeL Of CaMeL Any ; }
rank: 232
score: 98.72080688476562
patch: return i ; ; } if return i ;
rank: 232
score: 98.64163208007812
patch: return new int [ ] { i
rank: 232
score: 98.62457953559027
patch: return i ; ; return i ; else
rank: 232
score: 98.50753784179688
patch: if i ++ ;
rank: 233
score: 98.88095925071023
patch: return i | search CaMeL Chars [ j ] ;
rank: 233
score: 98.87267127403847
patch: return cs . char CaMeL At ( j + i ) ;
rank: 233
score: 98.78579372829861
patch: return i ; } ++ i ; }
rank: 233
score: 98.75881618923611
patch: . if ; return i ; } }
rank: 233
score: 98.72029113769531
patch: return i ; else if i ;
rank: 233
score: 98.6232681274414
patch: if i = i ; break ;
rank: 234
score: 98.78567165798611
patch: return - 1 ; break ; } }
rank: 234
score: 98.75870090060764
patch: return 0 ; } else return 0 ;
rank: 234
score: 98.74591064453125
patch: o = cs . char CaMeL At ( i ) ;
rank: 234
score: 98.72016143798828
patch: return i ; ; ; * /
rank: 234
score: 98.63965715680804
patch: return name [ j ] ;
rank: 234
score: 98.62213134765625
patch: return i ; ; / ; = i ;
rank: 234
score: 98.5059585571289
patch: if i < i ) break ;
rank: 235
score: 98.83572998046876
patch: return new byte [ cs CaMeL Len ] ;
rank: 235
score: 98.78525612571023
patch: return index CaMeL Of ( ch ) ; } }
rank: 235
score: 98.75831604003906
patch: . / * * return i ;
rank: 235
score: 98.7457763671875
patch: return INDEX _ NOT _ FOUND + 0 ;
rank: 235
score: 98.7200927734375
patch: return i ; / else { return i ;
rank: 235
score: 98.62206353081598
patch: return - 1 ; if return i ;
rank: 236
score: 98.87646484375
patch: return new int [ ++ cs CaMeL Len ] ;
rank: 236
score: 98.835400390625
patch: return search CaMeL Chars . length ( ) ;
rank: 236
score: 98.78477783203125
patch: return i ; } } } return - ;
rank: 236
score: 98.75830756293402
patch: return 0 ; } / * * /
rank: 236
score: 98.745458984375
patch: ret = search CaMeL Chars [ j ] ;
rank: 236
score: 98.63787163628473
patch: return index CaMeL Of CaMeL Any 1 ;
rank: 236
score: 98.62201605902777
patch: return 1 ; ; if i ++ ;
rank: 236
score: 98.50530242919922
patch: char ch = i + 1 ;
rank: 237
score: 98.8757553100586
patch: return i - search CaMeL Len ;
rank: 237
score: 98.83344116210938
patch: return i . get CaMeL Class ( ) ;
rank: 237
score: 98.78331756591797
patch: return Math . min ( ; }
rank: 237
score: 98.75822448730469
patch: . * * * i * /
rank: 237
score: 98.74301486545139
patch: break INDEX _ NOT _ FOUND ; }
rank: 237
score: 98.71958618164062
patch: return i ; i else if return 1 ;
rank: 237
score: 98.63725934709821
patch: [ j ] return i ;
rank: 237
score: 98.62190246582031
patch: return - - 0 ; break ;
rank: 238
score: 98.87397904829545
patch: return System . to CaMeL String ( ch ) ;
rank: 238
score: 98.87066650390625
patch: i return search CaMeL Chars [ j ] ;
rank: 238
score: 98.78196885850694
patch: return i + i + i ; }
rank: 238
score: 98.75795200892857
patch: return 0 ; } } }
rank: 238
score: 98.74207652698864
patch: return INDEX _ NOT _ FOUND . i ; }
rank: 238
score: 98.71908569335938
patch: result return i ; return i ;
rank: 238
score: 98.63664245605469
patch: return ( i + 0 ) ;
rank: 238
score: 98.62188042534723
patch: return 0 ; break ; return i ;
rank: 238
score: 98.50386047363281
patch: * / return i + 1 ;
rank: 239
score: 98.8732666015625
patch: return ch . to CaMeL Object ( ) ;
rank: 239
score: 98.8329745205966
patch: return char CaMeL At ( j + 0 ) ;
rank: 239
score: 98.75738525390625
patch: return 0 ; * * * /
rank: 239
score: 98.74127197265625
patch: return INDEX _ NOT _ FOUND && i ;
rank: 239
score: 98.71890597873264
patch: if return i ; return - 0 ;
rank: 239
score: 98.62169647216797
patch: return ; return i ; break ;
rank: 239
score: 98.50250244140625
patch: name = i ; break ; }
rank: 240
score: 98.8712491122159
patch: return search CaMeL Chars [ j ] / 1 ;
rank: 240
score: 98.86982421875
patch: return / * INDEX _ NOT _ FOUND ;
rank: 240
score: 98.83196411132812
patch: return this . cs . length ( ) ;
rank: 240
score: 98.7811767578125
patch: = i + 1 ; break ; } }
rank: 240
score: 98.75705973307292
patch: return 0 ; return i ; } }
rank: 240
score: 98.74097900390625
patch: return INDEX _ NOT _ FOUND . i ;
rank: 240
score: 98.71739959716797
patch: return i ; if i -- ;
rank: 240
score: 98.63513861762152
patch: return 1 ; } j ++ ; }
rank: 240
score: 98.62035260881696
patch: return name ; return i ;
rank: 241
score: 98.83187866210938
patch: return new int length = search CaMeL Chars . length ;
rank: 241
score: 98.7806640625
patch: return i ; break ; } break ; }
rank: 241
score: 98.7408935546875
patch: { return i ;
rank: 241
score: 98.71661376953125
patch: return return i ; return - 1 ;
rank: 241
score: 98.63416883680556
patch: return search CaMeL Len + i ; }
rank: 241
score: 98.62014770507812
patch: return i ; ; / / ;
rank: 241
score: 98.50213623046875
patch: return matches [ j ] ; }
rank: 242
score: 98.82942030164931
patch: return to CaMeL Chars [ j ] ;
rank: 242
score: 98.78063286675348
patch: return i ; } else { break ;
rank: 242
score: 98.74073282877605
patch: result = INDEX _ NOT _ FOUND ; return i ;
rank: 242
score: 98.71517944335938
patch: return 0 ; } else { return i ;
rank: 242
score: 98.61840057373047
patch: return null ; } return i ;
rank: 242
score: 98.49993024553571
patch: if ( i <= i )
rank: 243
score: 98.87033913352273
patch: return ch - search CaMeL Chars [ j ] ;
rank: 243
score: 98.82901000976562
patch: return INDEX _ NOT _ FOUND : 0 ;
rank: 243
score: 98.78059525923295
patch: if ( ; } else { return i ; }
rank: 243
score: 98.75388009207589
patch: return value [ 0 ] ;
rank: 243
score: 98.74052124023437
patch: return cs . index CaMeL Of ( ) ;
rank: 243
score: 98.71502685546875
patch: return i ; int i return i ;
rank: 243
score: 98.63396538628473
patch: return new int [ - 0 ] ;
rank: 243
score: 98.61833844866071
patch: return start ; return i ;
rank: 243
score: 98.4906717936198
patch: int i = i ;
rank: 244
score: 98.87014770507812
patch: return + search CaMeL Chars [ j ] ;
rank: 244
score: 98.77976684570312
patch: if ( ! is CaMeL Empty ( ; }
rank: 244
score: 98.75281633649554
patch: } else if return i ;
rank: 244
score: 98.63353729248047
patch: return search CaMeL Chars . length ;
rank: 244
score: 98.617626953125
patch: return 0 ; ; if ; = i ;
rank: 244
score: 98.48785400390625
patch: s = i ; break ;
rank: 245
score: 98.87012329101563
patch: return i && INDEX _ NOT _ FOUND ;
rank: 245
score: 98.75077989366319
patch: . = i ; return i ; }
rank: 245
score: 98.73987833658855
patch: path = cs . char CaMeL At ( i ) ;
rank: 245
score: 98.71375274658203
patch: return j ; return - 1 ;
rank: 245
score: 98.63262939453125
patch: return new int [ - 1 ] ;
rank: 245
score: 98.61654324001736
patch: return - 1 ; else return i ;
rank: 246
score: 98.86997680664062
patch: return $STRING$ . to CaMeL Object ( ) ;
rank: 246
score: 98.82785373263889
patch: return search CaMeL Chars [ 0 ] ;
rank: 246
score: 98.75016021728516
patch: . if ( i == i ;
rank: 246
score: 98.73966841264205
patch: return cs . index CaMeL Of CaMeL Any ; }
rank: 246
score: 98.7123779296875
patch: return i ; return i ; return 0 ;
rank: 246
score: 98.63197835286458
patch: return search CaMeL Len ; j ++ ;
rank: 246
score: 98.61634063720703
patch: return i ; while i ++ ;
rank: 246
score: 98.48207310267857
patch: * / return 0 ; }
rank: 247
score: 98.867919921875
patch: return System . char CaMeL At ( j ) ;
rank: 247
score: 98.71094428168402
patch: if return i ; for return i ;
rank: 247
score: 98.6319580078125
patch: return cs . length - i ; }
rank: 247
score: 98.48142787388393
patch: = false ; break ; }
rank: 248
score: 98.86748657226562
patch: buf return search CaMeL Chars [ j ] ;
rank: 248
score: 98.86182579627403
patch: return cs . char CaMeL At ( j ] ) ; }
rank: 248
score: 98.82593451605902
patch: return get CaMeL Chars [ j ] ;
rank: 248
score: 98.74777221679688
patch: . if ; return i ; }
rank: 248
score: 98.73891775948661
patch: return cs . i ; }
rank: 248
score: 98.71092224121094
patch: return i ; return i ; *
rank: 248
score: 98.61393432617187
patch: return 0 ; ; return i ; break ;
rank: 249
score: 98.77523193359374
patch: throw new Unsupported CaMeL Operation CaMeL Exception ( ;
rank: 249
score: 98.74752807617188
patch: return i ; } return length ;
rank: 249
score: 98.73854573567708
patch: new = cs . char CaMeL At ( j ) ;
rank: 249
score: 98.71085357666016
patch: return i ; } return value ;
rank: 249
score: 98.61358642578125
patch: return ; = ; = i ;
rank: 249
score: 98.47728474934895
patch: return ~ i ; }
rank: 250
score: 98.86069946289062
patch: return -- search CaMeL Chars [ j ] ;
rank: 250
score: 98.82410777698864
patch: return char CaMeL At ( j , ch ) ;
rank: 250
score: 98.7748690518466
patch: if ( i < search CaMeL Len ) return ;
rank: 250
score: 98.74713134765625
patch: return i - length ;
rank: 250
score: 98.71070014105902
patch: return i ; / else return i ;
rank: 250
score: 98.62997436523438
patch: return cs . [ j ] ;
rank: 250
score: 98.61270141601562
patch: return - i ; ;
rank: 251
score: 98.86517944335938
patch: return cs . to CaMeL Object ( ) ;
rank: 251
score: 98.86019193209134
patch: if ( INDEX _ NOT _ FOUND ) { return i ;
rank: 251
score: 98.8228759765625
patch: return return search CaMeL Chars [ i ] ;
rank: 251
score: 98.7470194498698
patch: return 0 i ; }
rank: 251
score: 98.7384765625
patch: return INDEX _ NOT _ FOUND + ) ;
rank: 251
score: 98.70868791852679
patch: return i ; return $STRING$ ;
rank: 251
score: 98.61186218261719
patch: return true ; ; return i ;
rank: 252
score: 98.86470947265624
patch: return err . to CaMeL String ( ) ;
rank: 252
score: 98.82236938476562
patch: return ( 0 - search CaMeL Len ) ;
rank: 252
score: 98.7743252840909
patch: = Character . to CaMeL Lower CaMeL Case ( ;
rank: 252
score: 98.74688720703125
patch: . return i ; } } }
rank: 252
score: 98.70831298828125
patch: return i ; return / 1 ;
rank: 252
score: 98.6290283203125
patch: return Math . size ( ) ;
rank: 252
score: 98.47347005208333
patch: return 1 ; break ;
rank: 253
score: 98.82205200195312
patch: += search CaMeL Chars [ j ] ; }
rank: 253
score: 98.774169921875
patch: return i + i - 1 ; }
rank: 253
score: 98.74686431884766
patch: break ; } } return i ;
rank: 253
score: 98.73822021484375
patch: addr = cs . char CaMeL At ( i ) ;
rank: 253
score: 98.70793151855469
patch: if return 1 ; return 1 ;
rank: 253
score: 98.47312709263393
patch: return index CaMeL Of ( ;
rank: 254
score: 98.77398681640625
patch: if ; ; return i ; }
rank: 254
score: 98.74678802490234
patch: return i * 0 + 0 ;
rank: 254
score: 98.7379862467448
patch: addr = cs . char CaMeL At ( j ) ;
rank: 254
score: 98.7078857421875
patch: if return i ; return i ; }
rank: 254
score: 98.6273193359375
patch: return i ; cs CaMeL Len ++ ;
rank: 254
score: 98.60997425426136
patch: return i ; return - 1 ; return i ;
rank: 255
score: 98.86243785511364
patch: return search CaMeL Chars [ j ] - 0 ;
rank: 255
score: 98.85796649639423
patch: return new char [ search CaMeL Chars . length 0 ] ;
rank: 255
score: 98.74628448486328
patch: return 1 - i ; } }
rank: 255
score: 98.7379150390625
patch: return cs . INDEX _ NOT _ FOUND ; } else
rank: 255
score: 98.70786743164062
patch: return i ; for i { return i ;
rank: 255
score: 98.60958523220486
patch: return i ; return i + 0 ;
rank: 255
score: 98.47111293247768
patch: [ i ] return i ;
rank: 256
score: 98.86223687065973
patch: buf return INDEX _ NOT _ FOUND ;
rank: 256
score: 98.85718994140625
patch: ( search CaMeL Chars [ j ] ) ;
rank: 256
score: 98.81784057617188
patch: return i + this . search CaMeL Len ;
rank: 256
score: 98.74612862723214
patch: . if return i ; }
rank: 256
score: 98.62601143973214
patch: return - - 1 ; }
rank: 256
score: 98.60955047607422
patch: return - 1 ; return $NUMBER$ ;
rank: 256
score: 98.46969168526786
patch: if ( j < i )
rank: 257
score: 98.86123657226562
patch: String ch = cs . char CaMeL At ( j )
rank: 257
score: 98.77172173394098
patch: if ( i > search CaMeL Len )
rank: 257
score: 98.6258316040039
patch: is [ j ] = ch ;
rank: 257
score: 98.60946219308036
patch: return i + - 1 ;
rank: 258
score: 98.76997514204545
patch: return i + 1 ; } } return i ;
rank: 258
score: 98.7452392578125
patch: return 0 ; } else * /
rank: 258
score: 98.73526611328126
patch: ret = INDEX _ NOT _ FOUND ; }
rank: 258
score: 98.70557996961806
patch: return i ; } ; if i ;
rank: 258
score: 98.62578667534723
patch: return INDEX _ NOT _ FOUND ) ;
rank: 258
score: 98.60887315538194
patch: return 0 ; for i = i ;
rank: 258
score: 98.46542794363839
patch: if ( ch == $STRING$ )
rank: 259
score: 98.859375
patch: return new Char CaMeL Sequence ( ch ) ;
rank: 259
score: 98.81594848632812
patch: return this . search CaMeL Len ;
rank: 259
score: 98.74470350477431
patch: return i [ 0 ] ; } else
rank: 259
score: 98.70397186279297
patch: return i ; / return i ;
rank: 259
score: 98.60696411132812
patch: i return i ; return 1 ;
rank: 259
score: 98.46535818917411
patch: |= i ; break ; }
rank: 260
score: 98.85936390269886
patch: return ch . index CaMeL Of ( $STRING$ ) ;
rank: 260
score: 98.85028545673077
patch: return new char [ INDEX _ NOT _ FOUND ] ; }
rank: 260
score: 98.76950412326389
patch: return i ; } } this . ;
rank: 260
score: 98.74457550048828
patch: return i * i ; break ;
rank: 260
score: 98.73453776041667
patch: { return INDEX _ NOT _ FOUND ; } } }
rank: 260
score: 98.70393202039931
patch: if return i ; return return i ;
rank: 260
score: 98.62498474121094
patch: return i ; / * * /
rank: 260
score: 98.60653347439236
patch: return 0 ; ; return - 1 ;
rank: 260
score: 98.46451241629464
patch: += 1 ; break ; }
rank: 261
score: 98.81338500976562
patch: return i + $STRING$ . length ( ) ;
rank: 261
score: 98.76915893554687
patch: return i - i - 1 ; } }
rank: 261
score: 98.7441635131836
patch: } else if ; return i ;
rank: 261
score: 98.73441569010417
patch: return INDEX _ NOT _ FOUND ; case - 1 :
rank: 261
score: 98.70353698730469
patch: return i ; return * i ;
rank: 261
score: 98.62400987413194
patch: return search CaMeL Len - i ; }
rank: 261
score: 98.60640462239583
patch: return i ; return i / i ;
rank: 261
score: 98.46437290736607
patch: if ( is CaMeL Empty ;
rank: 262
score: 98.85900115966797
patch: return i + cs CaMeL Len ;
rank: 262
score: 98.8497647372159
patch: return start + search CaMeL Chars [ j ] ;
rank: 262
score: 98.81181640625
patch: return ( i - search CaMeL Len ) ;
rank: 262
score: 98.76853637695312
patch: return i ; } else { break ; }
rank: 262
score: 98.74369049072266
patch: return i - 0 ; break ;
rank: 262
score: 98.73224487304688
patch: name = search CaMeL Chars [ j ] ;
rank: 262
score: 98.70288696289063
patch: return i ; ; if return - 1 ;
rank: 262
score: 98.622802734375
patch: return name . length ( ) ; }
rank: 262
score: 98.46414620535714
patch: r = i ; break ;
rank: 263
score: 98.85878499348958
patch: return search CaMeL Chars [ j ] . length ( )
rank: 263
score: 98.84959998497597
patch: return new char [ search CaMeL Chars . length $NUMBER$ ] ;
rank: 263
score: 98.81101296164773
patch: return i ( cs , search CaMeL Chars ) ;
rank: 263
score: 98.76804809570312
patch: return i . index CaMeL Of ( ch ;
rank: 263
score: 98.74327596028645
patch: return i * $NUMBER$ ;
rank: 263
score: 98.73068237304688
patch: return cs . i ;
rank: 263
score: 98.70237731933594
patch: return i ; ; / * /
rank: 263
score: 98.62202453613281
patch: is [ j ] return i ;
rank: 263
score: 98.46168736049107
patch: final int i = i ;
rank: 264
score: 98.85767822265625
patch: return start . to CaMeL String ( ) ;
rank: 264
score: 98.80842729048295
patch: return index CaMeL Of ( cs , cs ) ;
rank: 264
score: 98.76760525173611
patch: = i ; ; break ; } }
rank: 264
score: 98.7432632446289
patch: . = i ; return i ;
rank: 264
score: 98.7012227376302
patch: return count - i ;
rank: 264
score: 98.62104034423828
patch: return i . length ; } }
rank: 264
score: 98.60595703125
patch: i if return i ; break ;
rank: 264
score: 98.45996965680804
patch: * / return - 1 ;
rank: 265
score: 98.76743386008523
patch: throw new Illegal CaMeL Argument CaMeL Exception ( ; }
rank: 265
score: 98.74227142333984
patch: return 0 i ; } else {
rank: 265
score: 98.70108032226562
patch: return i ; start return i ;
rank: 265
score: 98.62078179253473
patch: return i ; i ++ ; } }
rank: 265
score: 98.60593087332589
patch: return 1 ; return 0 ;
rank: 265
score: 98.45896693638393
patch: return true ; break ; }
rank: 266
score: 98.76729329427083
patch: return i ; } else break ; }
rank: 266
score: 98.741455078125
patch: break * * * return i ;
rank: 266
score: 98.72951931423611
patch: break + INDEX _ NOT _ FOUND ;
rank: 266
score: 98.62068006727431
patch: return to CaMeL String ( ch ) ;
rank: 266
score: 98.60561794704861
patch: return ; = i ; return i ;
rank: 266
score: 98.45667375837054
patch: return - 1 ; ; }
rank: 267
score: 98.85617897727273
patch: return out . index CaMeL Of ( ch ) ;
rank: 267
score: 98.84505521334134
patch: return index CaMeL Of CaMeL Any ( cs , name ) ;
rank: 267
score: 98.76723904079861
patch: return i + 1 ; } } }
rank: 267
score: 98.74130249023438
patch: . return i ; } else {
rank: 267
score: 98.70077514648438
patch: return i + i + 0 ;
rank: 267
score: 98.60511779785156
patch: return 0 ; return ++ 1 ;
rank: 267
score: 98.45636858258929
patch: return ~ i - 1 ;
rank: 268
score: 98.85596812855114
patch: return length + search CaMeL Chars [ j ] ;
rank: 268
score: 98.76464165581598
patch: return i ; count ++ ; } }
rank: 268
score: 98.73967827690973
patch: return 0 ; } if return 1 ;
rank: 268
score: 98.72658081054688
patch: return cs ; }
rank: 268
score: 98.70065743582589
patch: return $STRING$ ; return i ;
rank: 268
score: 98.62027994791667
patch: return search CaMeL Chars [ ] ; }
rank: 268
score: 98.60503595525569
patch: return i ; ; = i ; return i ;
rank: 268
score: 98.45356968470982
patch: if ( i == i ;
rank: 269
score: 98.85543823242188
patch: return search CaMeL Chars [ j ] + ch ; }
rank: 269
score: 98.84454900568181
patch: return ( i . append ( ch ) ) ;
rank: 269
score: 98.76450417258523
patch: return index CaMeL Of CaMeL Any ( ch ; }
rank: 269
score: 98.73809814453125
patch: return 1 ; } ;
rank: 269
score: 98.70028347439236
patch: return i ; ; } return i ;
rank: 269
score: 98.61964416503906
patch: character [ j ] = ch ;
rank: 269
score: 98.60502319335937
patch: return i ; ; ; if i ++ ;
rank: 270
score: 98.803466796875
patch: return search CaMeL Chars [ ch ] ;
rank: 270
score: 98.76442260742188
patch: if ( i < search CaMeL Len ; }
rank: 270
score: 98.737548828125
patch: return i ; } i -- ;
rank: 270
score: 98.7258544921875
patch: buf return INDEX _ NOT _ FOUND ; }
rank: 270
score: 98.6989517211914
patch: return i ; ; return value ;
rank: 270
score: 98.61947631835938
patch: return - - 0 ; } }
rank: 270
score: 98.6048355102539
patch: return ; = i ; break ;
rank: 270
score: 98.45189557756696
patch: return count + 1 ; }
rank: 271
score: 98.84384390024039
patch: return this . search CaMeL Chars [ j ] == ch ;
rank: 271
score: 98.80242309570312
patch: return i . size ( ) ( ) ;
rank: 271
score: 98.76426866319444
patch: return i ; break ; } } }
rank: 271
score: 98.72568969726562
patch: break + INDEX _ NOT _ FOUND ; }
rank: 271
score: 98.61902727399554
patch: return [ i ] ; }
rank: 271
score: 98.60340118408203
patch: return 0 ; ; ++ i ;
rank: 271
score: 98.45082310267857
patch: *= i ; break ; }
rank: 272
score: 98.8022128018466
patch: return new int search CaMeL Chars [ j ] ;
rank: 272
score: 98.76361083984375
patch: return i ; ++ i ; }
rank: 272
score: 98.72469075520833
patch: throw new Runtime CaMeL Exception ( ) ;
rank: 272
score: 98.69873046875
patch: return i ; return i ; ; ;
rank: 272
score: 98.61697998046876
patch: return ch ; }
rank: 272
score: 98.60272216796875
patch: return i ; ; if i * ;
rank: 272
score: 98.44947160993304
patch: return count [ i ] ;
rank: 273
score: 98.8525390625
patch: return search CaMeL Chars [ j ] + 0 ;
rank: 273
score: 98.80081176757812
patch: return search CaMeL Chars [ i ] ) ;
rank: 273
score: 98.73680114746094
patch: return i / i ; } }
rank: 273
score: 98.724169921875
patch: return index CaMeL Of CaMeL Any ; } }
rank: 273
score: 98.61691284179688
patch: return length ; } j ++ ;
rank: 273
score: 98.60244140625
patch: return 0 ; ; if i * ++ ;
rank: 273
score: 98.44907924107143
patch: return 0 ; i ++ ;
rank: 274
score: 98.84227405894886
patch: return cs . index CaMeL Of ( $STRING$ ) ;
rank: 274
score: 98.80079234730114
patch: search CaMeL Chars [ j ] = ch ; }
rank: 274
score: 98.76264953613281
patch: return i ; ; } ; }
rank: 274
score: 98.73600006103516
patch: return 0 * 0 * i ;
rank: 274
score: 98.69838460286458
patch: return i ; else return - 1 ;
rank: 274
score: 98.61528862847223
patch: return new int [ 1 ] ; }
rank: 274
score: 98.601904296875
patch: return 0 ; ; if i = i ;
rank: 274
score: 98.44900948660714
patch: s = i + 1 ;
rank: 275
score: 98.85211181640625
patch: return cs . to CaMeL Char ( ) ;
rank: 275
score: 98.84177809495192
patch: return ( ( Char CaMeL Sequence ) cs ) . index CaMeL
rank: 275
score: 98.76231384277344
patch: return i ; else break ; }
rank: 275
score: 98.73566351996527
patch: return i [ 0 ] ; } }
rank: 275
score: 98.7227450284091
patch: return INDEX _ NOT _ FOUND ; } * /
rank: 275
score: 98.69765218098958
patch: if i < i ; return i ;
rank: 275
score: 98.61473083496094
patch: return ( int ) ch ; }
rank: 275
score: 98.60182698567708
patch: i return i ; return - 1 ;
rank: 275
score: 98.44798932756696
patch: return count [ j ] ;
rank: 276
score: 98.73553466796875
patch: return i / 0 ; } }
rank: 276
score: 98.7208740234375
patch: return INDEX _ NOT _ FOUND + true ;
rank: 276
score: 98.69706217447917
patch: return i ; return i ; ; *
rank: 276
score: 98.61465793185764
patch: return ( int ) cs CaMeL Len ;
rank: 276
score: 98.60133192274306
patch: return i ; / ; return i ;
rank: 277
score: 98.84097900390626
patch: return ( i . trim ( ) ) ;
rank: 277
score: 98.79877263849431
patch: return search CaMeL Chars [ j - 1 ] ;
rank: 277
score: 98.76179643110795
patch: if ( i < search CaMeL Len ) continue ;
rank: 277
score: 98.73433430989583
patch: throw new Runtime CaMeL Exception ( $STRING$ ;
rank: 277
score: 98.7198486328125
patch: return INDEX _ NOT _ FOUND + ( i ;
rank: 277
score: 98.69583129882812
patch: return i ; for i -- ;
rank: 277
score: 98.61383056640625
patch: return list [ j ] ; }
rank: 277
score: 98.60052490234375
patch: return 0 ; ; throw i ;
rank: 277
score: 98.44641985212054
patch: value = i + 1 ;
rank: 278
score: 98.8502197265625
patch: return i + search CaMeL Chars [ j ] ; }
rank: 278
score: 98.76128472222223
patch: . return i ; break ; } }
rank: 278
score: 98.73388671875
patch: . / * * * return i ;
rank: 278
score: 98.71907182173295
patch: System . arraycopy ( search CaMeL Chars , ) ;
rank: 278
score: 98.6956558227539
patch: return i ; ; i * /
rank: 278
score: 98.61362033420139
patch: return index CaMeL Of ( i ) ;
rank: 278
score: 98.59923206676136
patch: return i ; return i ; } return i ;
rank: 279
score: 98.84892134232955
patch: return i & search CaMeL Chars [ j ] ;
rank: 279
score: 98.7609130859375
patch: return i - 1 ; break ; } }
rank: 279
score: 98.73287200927734
patch: return i * 0 + 1 ;
rank: 279
score: 98.71903076171876
patch: val = search CaMeL Chars [ j ] ;
rank: 279
score: 98.69554901123047
patch: return 0 ; return - $NUMBER$ ;
rank: 279
score: 98.61343383789062
patch: return length ; }
rank: 279
score: 98.59832085503473
patch: return i ; return i - 1 ;
rank: 279
score: 98.44266764322917
patch: return i ; continue ;
rank: 280
score: 98.83960899939903
patch: return search CaMeL Chars [ j ] + cs . length ;
rank: 280
score: 98.7971435546875
patch: return ( int ) ( search CaMeL Len ;
rank: 280
score: 98.76021999782986
patch: return i ; else break ; } }
rank: 280
score: 98.73272026909723
patch: return 0 ; } catch return 1 ;
rank: 280
score: 98.71653053977273
patch: return INDEX _ NOT _ FOUND ; } continue ;
rank: 280
score: 98.69550432477679
patch: return i ; -- i ;
rank: 280
score: 98.6130599975586
patch: return - - i ; } }
rank: 280
score: 98.59818267822266
patch: return 1 ; if return 1 ;
rank: 280
score: 98.44240315755208
patch: return i 1 ; }
rank: 281
score: 98.83929912860577
patch: return new int [ search CaMeL Chars . length 0 ] ;
rank: 281
score: 98.75984191894531
patch: return - 1 ; } ; }
rank: 281
score: 98.73260498046875
patch: return 1 ; } } return 0 ;
rank: 281
score: 98.716259765625
patch: res += search CaMeL Chars [ j ] ;
rank: 281
score: 98.59774017333984
patch: return 1 ; return ++ i ;
rank: 281
score: 98.4422607421875
patch: if ( i == 1 )
rank: 282
score: 98.84626908735795
patch: return search CaMeL Chars [ i ] . length ;
rank: 282
score: 98.79598236083984
patch: return i . get ( ) ;
rank: 282
score: 98.75975452769886
patch: return i ; ; } } } return i ;
rank: 282
score: 98.73175726996527
patch: . / * * return i ; }
rank: 282
score: 98.69451293945312
patch: return 0 ; ; ; if return i ;
rank: 282
score: 98.61159261067708
patch: return - - 0 ;
rank: 282
score: 98.44171142578125
patch: return ++ i ; }
rank: 283
score: 98.83862915039063
patch: return -= search CaMeL Chars [ j ] ;
rank: 283
score: 98.73161485460069
patch: . * * * ; * * /
rank: 283
score: 98.71477661132812
patch: break INDEX _ NOT _ FOUND ; } }
rank: 283
score: 98.69385986328125
patch: return i ; / * * return i ;
rank: 283
score: 98.61151994977679
patch: return chars [ j ] ;
rank: 283
score: 98.59715440538194
patch: return new return i ; return i ;
rank: 283
score: 98.44110107421875
patch: return i == i ;
rank: 284
score: 98.84427490234376
patch: return i . to CaMeL Char ( ) ;
rank: 284
score: 98.7945556640625
patch: return search CaMeL Chars [ j ] ( ) ;
rank: 284
score: 98.73124694824219
patch: return ; = i ; } }
rank: 284
score: 98.69341278076172
patch: return i ; ++ i ; ;
rank: 284
score: 98.61046600341797
patch: return i ; } return j ;
rank: 284
score: 98.5971450805664
patch: return ++ i ; return i ;
rank: 284
score: 98.44033203125
patch: if i -- ;
rank: 285
score: 98.84413840553977
patch: return i && search CaMeL Chars [ j ] ;
rank: 285
score: 98.8381817157452
patch: return ( ( cs . char CaMeL At ( j ) ;
rank: 285
score: 98.73119439019098
patch: return i ; return 1 ; } }
rank: 285
score: 98.7119140625
patch: retval = search CaMeL Chars [ j ] ;
rank: 285
score: 98.69307250976563
patch: return i ; j else if return i ;
rank: 285
score: 98.60877990722656
patch: is [ j ] = i ;
rank: 285
score: 98.596728515625
patch: return i ; if return i ; break ;
rank: 285
score: 98.43929617745536
patch: return i & 1 ; }
rank: 286
score: 98.793798828125
patch: return search CaMeL Chars . trim ( ) ;
rank: 286
score: 98.75719105113636
patch: return INDEX _ NOT _ FOUND ; } ; }
rank: 286
score: 98.72996520996094
patch: } else if return 1 ; }
rank: 286
score: 98.71169607979911
patch: return i ; } } else
rank: 286
score: 98.69147406684027
patch: return i ; else return return i ;
rank: 286
score: 98.60867648654514
patch: return - 0 ; } j ++ ;
rank: 286
score: 98.5958984375
patch: return - 1 ; / / return i ;
rank: 286
score: 98.4354248046875
patch: if ( i > i )
rank: 287
score: 98.78829616970486
patch: return i INDEX _ NOT _ FOUND ;
rank: 287
score: 98.7296371459961
patch: * * * * * * /
rank: 287
score: 98.71124822443181
patch: if ( cs . is CaMeL Empty ( ) )
rank: 287
score: 98.69116973876953
patch: return i ; i * * ;
rank: 287
score: 98.59514617919922
patch: return i + 0 + i ;
rank: 287
score: 98.43157087053571
patch: value = i ; break ;
rank: 288
score: 98.84059651692708
patch: return i . append ( ch ) ;
rank: 288
score: 98.83604079026442
patch: return i + cs . char CaMeL At ( i ) ;
rank: 288
score: 98.78823852539062
patch: return i + $STRING$ + search CaMeL Len ;
rank: 288
score: 98.72914123535156
patch: return 1 ; } } return ;
rank: 288
score: 98.70946155894886
patch: return INDEX _ NOT _ FOUND + 1 ; }
rank: 288
score: 98.69089965820312
patch: return i ; return i ; if i ;
rank: 288
score: 98.60769653320312
patch: return count ; } j ++ ;
rank: 288
score: 98.59420340401786
patch: return return 1 ; break ;
rank: 288
score: 98.43035016741071
patch: return 1 [ j ] ;
rank: 289
score: 98.83986594460227
patch: return search CaMeL Chars [ j ] * 1 ;
rank: 289
score: 98.83518981933594
patch: return value . length ( ) ;
rank: 289
score: 98.78755493164063
patch: return i . is CaMeL Empty ( ) ;
rank: 289
score: 98.75557084517045
patch: return index CaMeL Of ( ch , i ) ;
rank: 289
score: 98.72885470920139
patch: * * * * / return i ;
rank: 289
score: 98.70897827148437
patch: return cs . index CaMeL Of CaMeL Any ;
rank: 289
score: 98.68916151258681
patch: return i ; int return ( i ;
rank: 289
score: 98.60568237304688
patch: return Integer . size ( ) ;
rank: 289
score: 98.59419468470982
patch: return true ; return i ;
rank: 289
score: 98.42665318080357
patch: [ i ] = 1 ;
rank: 290
score: 98.8392001065341
patch: return search CaMeL Chars [ j ] . value ;
rank: 290
score: 98.7871426669034
patch: return ( ( int ) search CaMeL Len ) ;
rank: 290
score: 98.75513373480902
patch: if ( ! is CaMeL Empty ( ;
rank: 290
score: 98.72807312011719
patch: return i ; } else break ;
rank: 290
score: 98.7081298828125
patch: return ( INDEX _ NOT _ FOUND ) i ;
rank: 290
score: 98.593798828125
patch: return i ; ; int i = i ;
rank: 290
score: 98.42463902064732
patch: return 0 return 0 ; }
rank: 291
score: 98.8379150390625
patch: return i + ch + ch . length ;
rank: 291
score: 98.83420138888889
patch: return cs . append ( ch ) ;
rank: 291
score: 98.75408257378473
patch: return i ; break ; } ; }
rank: 291
score: 98.72806222098214
patch: return i ; } catch ;
rank: 291
score: 98.70750843394886
patch: while ( j < search CaMeL Chars . length )
rank: 291
score: 98.68788452148438
patch: return return i ; ; if return i ;
rank: 291
score: 98.60316975911458
patch: return Math . length ( 1 ) ;
rank: 291
score: 98.42386881510417
patch: return j ; break ;
rank: 292
score: 98.83665882457386
patch: return $STRING$ - search CaMeL Chars [ j ] ;
rank: 292
score: 98.72767469618056
patch: . * * * * i * /
rank: 292
score: 98.70686340332031
patch: return cs . i ; } }
rank: 292
score: 98.68768988715277
patch: return i ; } return - 0 ;
rank: 292
score: 98.59254455566406
patch: return - 1 ; return count ;
rank: 292
score: 98.4237060546875
patch: if i ; break ; }
rank: 293
score: 98.83646647135417
patch: return search CaMeL Chars [ j ] . size ( )
rank: 293
score: 98.7530517578125
patch: return i ; } else { return 0 ; }
rank: 293
score: 98.72747802734375
patch: return value [ 0 ] ; }
rank: 293
score: 98.70581665039063
patch: return INDEX _ NOT _ FOUND - i ;
rank: 293
score: 98.68744574652777
patch: return i ; ; for return i ;
rank: 293
score: 98.60078125
patch: return null ; }
rank: 293
score: 98.59185180664062
patch: return 0 ; ; return i + 1 ;
rank: 294
score: 98.7510986328125
patch: return Integer . value CaMeL Of ( i ) ;
rank: 294
score: 98.70527954101563
patch: ret += search CaMeL Chars [ j ] ;
rank: 294
score: 98.6874267578125
patch: if return i ; ; if return i ;
rank: 294
score: 98.42216273716518
patch: return index CaMeL Of ; ;
rank: 295
score: 98.83118614783653
patch: return i && search CaMeL Chars [ j ] == ch ;
rank: 295
score: 98.78054809570312
patch: return new String ( search CaMeL Len ) ;
rank: 295
score: 98.7508544921875
patch: return Integer . value CaMeL Of ( ; } }
rank: 295
score: 98.68739318847656
patch: return i ; ; return false ;
rank: 295
score: 98.59733751085069
patch: return cs CaMeL Len ; return i ;
rank: 295
score: 98.59068714488636
patch: return i ; return i ; if i ++ ;
rank: 295
score: 98.42087227957589
patch: if ; break ; } }
rank: 296
score: 98.78028106689453
patch: return $STRING$ . length ( ) ;
rank: 296
score: 98.75022379557292
patch: char ch = ; break ; } }
rank: 296
score: 98.59683663504464
patch: return 1 ; j ++ ;
rank: 296
score: 98.59023030598958
patch: return i ; ; if i ++ ; return i ;
rank: 296
score: 98.41994803292411
patch: return - 1 ; } else
rank: 297
score: 98.83307495117188
patch: return i . get CaMeL Id ( ) ;
rank: 297
score: 98.83095974392361
patch: return ! INDEX _ NOT _ FOUND ;
rank: 297
score: 98.78021850585938
patch: return search CaMeL Len - search CaMeL Len ;
rank: 297
score: 98.74967041015626
patch: return Character . MAX _ VALUE ; } }
rank: 297
score: 98.72591400146484
patch: return 0 ; } else { }
rank: 297
score: 98.59648786272321
patch: return i ; / * /
rank: 297
score: 98.58967895507813
patch: return i ; ; return ; = i ;
rank: 297
score: 98.41911969866071
patch: if ( i == j )
rank: 298
score: 98.8326748934659
patch: break search CaMeL Chars [ j ] = ch ;
rank: 298
score: 98.77992553710938
patch: return search CaMeL Chars . next ( ) ;
rank: 298
score: 98.74897596571181
patch: return i + 1 ; } ; }
rank: 298
score: 98.7242202758789
patch: . if return i ; } }
rank: 298
score: 98.68536376953125
patch: if return i ; ;
rank: 298
score: 98.59622192382812
patch: return search CaMeL Len + i ;
rank: 298
score: 98.58851623535156
patch: return false ; return - 1 ;
rank: 298
score: 98.41888427734375
patch: [ j ] -- ;
rank: 299
score: 98.77936401367188
patch: return this . search CaMeL Chars . length ;
rank: 299
score: 98.7484130859375
patch: return i ; } } else if ( ;
rank: 299
score: 98.72403971354167
patch: return 0 ; } * * * /
rank: 299
score: 98.70155164930556
patch: throw new Interrupted CaMeL Exception ( ) ;
rank: 299
score: 98.68522135416667
patch: return 0 ; try { return i ;
rank: 299
score: 98.59530978732639
patch: return get CaMeL Length ( j ) ;
rank: 299
score: 98.58828735351562
patch: return 0 ; ; = 0 ;
rank: 299
score: 98.4188232421875
patch: = j ; break ; }
rank: 300
score: 98.83168723366477
patch: return search CaMeL Chars [ j ] : 0 ;
rank: 300
score: 98.83006702769886
patch: return ( ! INDEX _ NOT _ FOUND ) ;
rank: 300
score: 98.77904663085937
patch: return search CaMeL Chars [ i ] 1 ;
rank: 300
score: 98.7469482421875
patch: return i ; } } ) ;
rank: 300
score: 98.72376251220703
patch: return 1 * i ; } }
rank: 300
score: 98.69806463068181
patch: throw new Runtime CaMeL Exception ( , $STRING$ ) ;
rank: 300
score: 98.58775329589844
patch: return null ; return - 1 ;
rank: 300
score: 98.41701834542411
patch: [ j ] = 1 ;
rank: 301
score: 98.82976740056819
patch: return value - search CaMeL Chars [ j ] ;
rank: 301
score: 98.7228775024414
patch: return i ; } / * ;
rank: 301
score: 98.69737548828125
patch: return INDEX _ NOT _ FOUND = i ;
rank: 301
score: 98.59333801269531
patch: return i ? 1 : 0 ;
rank: 301
score: 98.58755493164062
patch: return 0 ; if i ++ ;
rank: 301
score: 98.41632952008929
patch: ret = i ; break ;
rank: 302
score: 98.8305419921875
patch: return i . to CaMeL Integer ( ) ;
rank: 302
score: 98.82965557391827
patch: return ( ( Char CaMeL Sequence ) cs ) . i ;
rank: 302
score: 98.74578857421875
patch: return i - 1 ; } } else {
rank: 302
score: 98.72218540736607
patch: return 0 ; } else ;
rank: 302
score: 98.69721013849431
patch: return search CaMeL Chars [ j ] + 1 ;
rank: 302
score: 98.6843505859375
patch: = i ; return i ; return i ;
rank: 302
score: 98.59308624267578
patch: return cs CaMeL Len . length ;
rank: 302
score: 98.58660125732422
patch: return - return i ; break ;
rank: 303
score: 98.8302510579427
patch: return $STRING$ + ch ;
rank: 303
score: 98.8289794921875
patch: throw ( String ) search CaMeL Chars [ j ] ;
rank: 303
score: 98.74451361762152
patch: return i - 1 ; } * /
rank: 303
score: 98.69563598632813
patch: { return search CaMeL Chars [ j ] ;
rank: 303
score: 98.68428257533482
patch: return i ; return j ;
rank: 303
score: 98.58621215820312
patch: return 0 ; ; = i + i ;
rank: 303
score: 98.41515241350446
patch: if ( j == i )
rank: 304
score: 98.77678833007812
patch: return ( i - cs CaMeL Len ) ;
rank: 304
score: 98.74433898925781
patch: return j - 1 ; } }
rank: 304
score: 98.72210693359375
patch: return i [ length ++ ] ;
rank: 304
score: 98.69477982954545
patch: return index CaMeL Of CaMeL Any ( ) ; }
rank: 304
score: 98.68376922607422
patch: return 0 ; ; if i ;
rank: 304
score: 98.59153917100694
patch: return Integer . length ( ) ; }
rank: 304
score: 98.58609008789062
patch: return i ; ; if i + 1 ;
rank: 304
score: 98.41502162388393
patch: return i & i ; }
rank: 305
score: 98.83006702769886
patch: return cs . substring ( 0 , j ) ;
rank: 305
score: 98.82796536959134
patch: return i . char CaMeL At ( j ) ; } }
rank: 305
score: 98.74420844184027
patch: return i ; } if ( ; }
rank: 305
score: 98.72206624348958
patch: return i ; } else return $NUMBER$ ;
rank: 305
score: 98.68321228027344
patch: return i ; } return true ;
rank: 305
score: 98.5859375
patch: return - 1 ; break ; break ;
rank: 305
score: 98.41473388671875
patch: p = i ; break ;
rank: 306
score: 98.827880859375
patch: return new int [ search CaMeL Chars . length $NUMBER$ ] ;
rank: 306
score: 98.77642211914062
patch: return new byte [ search CaMeL Len ] ;
rank: 306
score: 98.74376220703125
patch: return i - 1 ; } } return ;
rank: 306
score: 98.72107696533203
patch: return 0 / i ; } }
rank: 306
score: 98.68313937717014
patch: return 0 ; return - - i ;
rank: 306
score: 98.59039984809027
patch: return i ; } j = i ;
rank: 307
score: 98.82924397786458
patch: return i . char CaMeL At ( i ) ; }
rank: 307
score: 98.77407836914062
patch: search CaMeL Chars [ j ] return 0 ;
rank: 307
score: 98.74285278320312
patch: return i ; } return - 1 ; }
rank: 307
score: 98.6924715909091
patch: true return INDEX _ NOT _ FOUND ; } }
rank: 307
score: 98.68284098307292
patch: return i ; return return return i ;
rank: 307
score: 98.58999633789062
patch: return null ; } j ++ ;
rank: 307
score: 98.58455657958984
patch: return i ; ; if ; ;
rank: 307
score: 98.41335623604911
patch: m = i ; break ;
rank: 308
score: 98.82889811197917
patch: char ch = cs . char CaMeL At ( j )
rank: 308
score: 98.82666015625
patch: return value . index CaMeL Of ( $STRING$ ) ;
rank: 308
score: 98.72083875868056
patch: . = i ; return 1 ; }
rank: 308
score: 98.6900634765625
patch: return INDEX _ NOT _ FOUND false ; }
rank: 308
score: 98.68173828125
patch: return i ; / / * return i ;
rank: 308
score: 98.58995056152344
patch: return search CaMeL Len - i ;
rank: 308
score: 98.58436802455357
patch: return i ; return name ;
rank: 308
score: 98.41251918247768
patch: = 0 ; break ; }
rank: 309
score: 98.82588334517045
patch: return i . index CaMeL Of ( null ) ;
rank: 309
score: 98.77210083007813
patch: search CaMeL Chars [ i ] return i ;
rank: 309
score: 98.74066772460938
patch: return i ; } } else { return ;
rank: 309
score: 98.68987482244319
patch: return cs . char CaMeL At ( ) ; }
rank: 309
score: 98.58988444010417
patch: return return i ; }
rank: 310
score: 98.73876953125
patch: = i - 1 ; break ;
rank: 310
score: 98.71981048583984
patch: return i * i - 1 ;
rank: 310
score: 98.68128967285156
patch: return 0 ; return 0 ; ;
rank: 310
score: 98.58903503417969
patch: return i ? i : 1 ;
rank: 310
score: 98.58292846679687
patch: return i ; } return i ; break ;
rank: 310
score: 98.410400390625
patch: return i - 1 ; ;
rank: 311
score: 98.82564603365384
patch: return index CaMeL Of CaMeL Any ( cs , value ) ;
rank: 311
score: 98.82481800426136
patch: try { return search CaMeL Chars [ j ] ;
rank: 311
score: 98.77100219726563
patch: return search CaMeL Len - cs CaMeL Len ;
rank: 311
score: 98.73869323730469
patch: return i ; } } ; ;
rank: 311
score: 98.71968078613281
patch: return i + 0 ; } else
rank: 311
score: 98.6806396484375
patch: return i ; } ; if return 1 ;
rank: 311
score: 98.58869934082031
patch: return - [ j ] ; }
rank: 311
score: 98.40845598493304
patch: return 0 ; continue ; }
rank: 312
score: 98.82464599609375
patch: return new int [ ] { INDEX _ NOT _ FOUND
rank: 312
score: 98.77041965060764
patch: return index CaMeL Of ( j ) ;
rank: 312
score: 98.71959092881944
patch: return 0 ; } return - 1 ;
rank: 312
score: 98.68646240234375
patch: return INDEX _ NOT _ FOUND - j ;
rank: 312
score: 98.67999945746527
patch: if return i ; else return i ;
rank: 312
score: 98.58832465277777
patch: return new String ( ch ) ; }
rank: 312
score: 98.5823641690341
patch: return i ; ; if i ; return i ;
rank: 312
score: 98.40767124720982
patch: [ i ] = true ;
rank: 313
score: 98.82358127170139
patch: return i . add ( ch ) ;
rank: 313
score: 98.7703524502841
patch: return index CaMeL Of ( ch , cs ) ;
rank: 313
score: 98.73697916666667
patch: return i + i ; } } ;
rank: 313
score: 98.67987823486328
patch: return i ; return return $STRING$ ;
rank: 313
score: 98.58778381347656
patch: return 0 ; } } break ;
rank: 313
score: 98.40735735212054
patch: if ( i < i ;
rank: 314
score: 98.82325328480114
patch: return j + search CaMeL Chars [ j ] ;
rank: 314
score: 98.77019653320312
patch: return i . get CaMeL Method ( ) ;
rank: 314
score: 98.73612213134766
patch: return i - i ; } ;
rank: 314
score: 98.71880340576172
patch: return 1 ; } i ++ ;
rank: 314
score: 98.67951965332031
patch: return i ; return return $NUMBER$ ;
rank: 314
score: 98.5875956217448
patch: return count ; } }
rank: 314
score: 98.58038330078125
patch: return i + j ;
rank: 314
score: 98.40434919084821
patch: return i ; case $STRING$ :
rank: 315
score: 98.76906516335227
patch: return i + char CaMeL At ( j ) ;
rank: 315
score: 98.73582628038194
patch: return i - 1 ; ; } }
rank: 315
score: 98.67916870117188
patch: return i ; try ; if return i ;
rank: 315
score: 98.58708190917969
patch: return ch ; } j ++ ;
rank: 315
score: 98.58029174804688
patch: return 1 + i ;
rank: 316
score: 98.73550415039062
patch: return i ; } else { return ; }
rank: 316
score: 98.71736653645833
patch: . * * * * / } else
rank: 316
score: 98.68290571732955
patch: return INDEX _ NOT _ FOUND - 1 ; }
rank: 316
score: 98.67908732096355
patch: return return - 1 ;
rank: 316
score: 98.5799560546875
patch: return - 1 ; / / ;
rank: 316
score: 98.40379115513393
patch: return j + i ; }
rank: 317
score: 98.76876831054688
patch: return i . size ( ) - 1 ;
rank: 317
score: 98.7354965209961
patch: return i ; } count ++ ;
rank: 317
score: 98.68223266601562
patch: r = search CaMeL Chars [ j ] ;
rank: 317
score: 98.67901611328125
patch: return i ; if i ; return i ;
rank: 317
score: 98.58617146809895
patch: return i . length ;
rank: 317
score: 98.57981567382812
patch: return i ; } return i + i ;
rank: 317
score: 98.40369524274554
patch: return - 1 ) ; }
rank: 318
score: 98.76854359019886
patch: return i + search CaMeL Chars . length ; }
rank: 318
score: 98.73548719618056
patch: if ( i ; break ; } }
rank: 318
score: 98.71626790364583
patch: return i ; else return i ; }
rank: 318
score: 98.67936401367187
patch: return INDEX _ NOT _ FOUND + cs ;
rank: 318
score: 98.67871856689453
patch: return i ; ; return true ;
rank: 318
score: 98.585693359375
patch: return search CaMeL Chars [ ] ;
rank: 318
score: 98.57962799072266
patch: return start ;
rank: 319
score: 98.81798206676136
patch: return search CaMeL Chars [ j ] = ch ;
rank: 319
score: 98.76834716796876
patch: return Math . is CaMeL Empty ( ) ;
rank: 319
score: 98.73531494140624
patch: return Integer . MAX _ VALUE ; } }
rank: 319
score: 98.71554129464286
patch: return i [ $NUMBER$ ] ;
rank: 319
score: 98.67810821533203
patch: return $STRING$ ; return - 1 ;
rank: 319
score: 98.58551025390625
patch: return i + - 0 ; }
rank: 319
score: 98.57878112792969
patch: return i ; ; return $NUMBER$ ;
rank: 319
score: 98.39760044642857
patch: return - 1 - 1 ;
rank: 320
score: 98.81993689903847
patch: return cs . char CaMeL At ( j ) ; * /
rank: 320
score: 98.81658380681819
patch: return ch . substring ( 0 , j ) ;
rank: 320
score: 98.7349520596591
patch: if ( i < Character . MAX _ VALUE )
rank: 320
score: 98.67790222167969
patch: return 1 ; if return i ;
rank: 320
score: 98.57875061035156
patch: return count ; return - 1 ;
rank: 321
score: 98.81888521634616
patch: return ( search CaMeL Chars [ j ] , ch ) ;
rank: 321
score: 98.81588134765624
patch: return new Char CaMeL Sequence ( i ) ;
rank: 321
score: 98.7665283203125
patch: return cs . char CaMeL Count ( ) ;
rank: 321
score: 98.73297119140625
patch: while ( i < search CaMeL Len )
rank: 321
score: 98.67758178710938
patch: res = search CaMeL Chars [ j ] ;
rank: 321
score: 98.67748260498047
patch: return next ( ; return i ;
rank: 321
score: 98.58314732142857
patch: return return i ; } }
rank: 321
score: 98.57861328125
patch: return - i ; / / return i ;
rank: 321
score: 98.39572579520089
patch: char return i + 1 ;
rank: 322
score: 98.81561279296875
patch: return ch . get CaMeL Name ( ) ;
rank: 322
score: 98.73150634765625
patch: if ( i < search CaMeL Len ; ;
rank: 322
score: 98.71525743272569
patch: return 0 ; } ; return i ;
rank: 322
score: 98.67704772949219
patch: return i ; return case 1 ;
rank: 322
score: 98.6747334798177
patch: return ( i ; }
rank: 322
score: 98.5779141512784
patch: return - 1 ; return i ; return i ;
rank: 323
score: 98.81552956321023
patch: return null + search CaMeL Chars [ j ] ;
rank: 323
score: 98.73123508029514
patch: return Integer . MAX _ VALUE ; }
rank: 323
score: 98.71475982666016
patch: return 1 ; } * * /
rank: 323
score: 98.67621721540179
patch: return i ; return true ;
rank: 323
score: 98.67421653053977
patch: result += search CaMeL Chars [ j ] ; }
rank: 323
score: 98.5804443359375
patch: return ( ch ) ; }
rank: 323
score: 98.57687038845486
patch: return 0 ; for i return i ;
rank: 323
score: 98.39383370535714
patch: -- ; return i ; }
rank: 324
score: 98.81332397460938
patch: return $STRING$ . get CaMeL Value ( ) ;
rank: 324
score: 98.76350911458333
patch: return ( String ) search CaMeL Len ;
rank: 324
score: 98.67560424804688
patch: return i ; break ; if return i ;
rank: 324
score: 98.5801493326823
patch: return - - i ;
rank: 324
score: 98.5762451171875
patch: return i ; ; if i - ++ ;
rank: 325
score: 98.81296608664773
patch: return i * - search CaMeL Chars . length ;
rank: 325
score: 98.76317249644886
patch: return ( search CaMeL Chars [ i ] ) ;
rank: 325
score: 98.73082275390625
patch: return i + i + i ; } }
rank: 325
score: 98.71348571777344
patch: break * * * * * /
rank: 325
score: 98.67543334960938
patch: return return 1 ; ; if return i ;
rank: 325
score: 98.67385031960227
patch: b return INDEX _ NOT _ FOUND ; } }
rank: 325
score: 98.5759989420573
patch: return new return 0 ;
rank: 325
score: 98.39263044084821
patch: return count - i ; }
rank: 326
score: 98.8173828125
patch: char ch = cs . char CaMeL At ( j ) ;
rank: 326
score: 98.81285511363636
patch: return i || search CaMeL Chars [ j ] ;
rank: 326
score: 98.76243896484375
patch: return search CaMeL Chars [ i ] } ;
rank: 326
score: 98.73060438368056
patch: return i - i ; } } ;
rank: 326
score: 98.71344757080078
patch: return i * i + 0 ;
rank: 326
score: 98.67512512207031
patch: return i ; i = 0 ;
rank: 326
score: 98.57731628417969
patch: cs [ j ] = ch ;
rank: 326
score: 98.57555541992187
patch: return i ; ; if i return i ;
rank: 326
score: 98.39189801897321
patch: [ i ] = j ;
rank: 327
score: 98.76231079101562
patch: return cs . char CaMeL At ( j ;
rank: 327
score: 98.73036887428977
patch: return ; } else { return i ; } }
rank: 327
score: 98.71312713623047
patch: / * * / return i ;
rank: 327
score: 98.67342529296874
patch: c = search CaMeL Chars [ j ] ;
rank: 327
score: 98.57628522600446
patch: return list [ j ] ;
rank: 327
score: 98.39181082589286
patch: = ch ; break ; }
rank: 328
score: 98.81617149939903
patch: return index CaMeL Of CaMeL Any ( cs , j ) ;
rank: 328
score: 98.81167602539062
patch: return i || search CaMeL Chars [ j ]
rank: 328
score: 98.73018022017045
patch: return - 1 ; } } } return i ;
rank: 328
score: 98.71285247802734
patch: return i ; } return start ;
rank: 328
score: 98.67497253417969
patch: return i ; / - 1 ;
rank: 328
score: 98.57462310791016
patch: return cs . length - i ;
rank: 328
score: 98.39090983072917
patch: return j + i ;
rank: 329
score: 98.81046752929687
patch: return i - cs . length ( ) ;
rank: 329
score: 98.76148570667614
patch: return index CaMeL Of ( cs , i ) ;
rank: 329
score: 98.67481994628906
patch: return i ; break - 0 ;
rank: 329
score: 98.671533203125
patch: pos = search CaMeL Chars [ j ] ;
rank: 329
score: 98.57352905273437
patch: return - 1 ; if ; return i ;
rank: 329
score: 98.39085170200893
patch: return false ; break ; }
rank: 330
score: 98.81529744466145
patch: return start . char CaMeL At ( j ) ; }
rank: 330
score: 98.75921630859375
patch: return search CaMeL Chars [ j ] i ;
rank: 330
score: 98.72982788085938
patch: char ch = ; break ; }
rank: 330
score: 98.71244812011719
patch: return 1 [ 0 ] ; }
rank: 330
score: 98.67447662353516
patch: return i ; if i ; ;
rank: 330
score: 98.67120361328125
patch: if ( search CaMeL Len >= 0 ) {
rank: 330
score: 98.57271321614583
patch: return 1 ; return i ; break ;
rank: 331
score: 98.80987548828125
patch: return ch . get CaMeL Value ( ) ;
rank: 331
score: 98.758984375
patch: return ( search CaMeL Chars [ i ] ;
rank: 331
score: 98.72962782118056
patch: return i ; } else { return ;
rank: 331
score: 98.67412567138672
patch: = 0 ; return i ; ;
rank: 331
score: 98.67106489701705
patch: return INDEX _ NOT _ FOUND ? i ; }
rank: 331
score: 98.57195366753473
patch: return - i ; if i ++ ;
rank: 331
score: 98.38963826497395
patch: [ i ] -- ;
rank: 332
score: 98.80974731445312
patch: return i . get CaMeL Message ( ) ;
rank: 332
score: 98.72931671142578
patch: if ; return i ; } }
rank: 332
score: 98.71214294433594
patch: return i ; } ; if ;
rank: 332
score: 98.6741231282552
patch: return start - i ;
rank: 332
score: 98.66962224786931
patch: return super . index CaMeL Of ( cs ) ;
rank: 332
score: 98.57145385742187
patch: return i ; ; if i * ; /
rank: 332
score: 98.56838989257812
patch: return new int ( i ) ;
rank: 332
score: 98.38912527901786
patch: return - 1 - i ;
rank: 333
score: 98.808984375
patch: return name . to CaMeL Object ( ) ;
rank: 333
score: 98.75787908380681
patch: return char CaMeL At ( i , ch ) ;
rank: 333
score: 98.7282485961914
patch: return i + i ; } ;
rank: 333
score: 98.71141052246094
patch: . if ; * * * /
rank: 333
score: 98.67411295572917
patch: return i ; if return i ; ;
rank: 333
score: 98.66852361505681
patch: return INDEX _ NOT _ FOUND + - 1 ;
rank: 333
score: 98.57081434461806
patch: return i ; ; if i -- ;
rank: 334
score: 98.81345621744792
patch: return value . index CaMeL Of ( ch ) ; }
rank: 334
score: 98.8087491122159
patch: return ch . to CaMeL String ( ) ; }
rank: 334
score: 98.727783203125
patch: if ( i >= search CaMeL Chars . length ;
rank: 334
score: 98.71127755301339
patch: return i ; } return ;
rank: 334
score: 98.67410278320312
patch: return i ; break - 1 ;
rank: 334
score: 98.6679354580966
patch: if ( j == search CaMeL Chars . length )
rank: 334
score: 98.57063598632813
patch: return - 1 ; return i ; break ;
rank: 334
score: 98.38484700520833
patch: return - $NUMBER$ ; }
rank: 335
score: 98.72705756293402
patch: = i ; return i ; } }
rank: 335
score: 98.71084933810764
patch: [ i ] = i ; break ;
rank: 335
score: 98.67401801215277
patch: log . next ( ; return i ;
rank: 335
score: 98.66754150390625
patch: return INDEX _ NOT _ FOUND ; continue ;
rank: 335
score: 98.57039388020833
patch: return 0 + i ; return i ;
rank: 336
score: 98.806640625
patch: return 0 + search CaMeL Chars [ i ] ;
rank: 336
score: 98.75431060791016
patch: return new String ( cs ) ;
rank: 336
score: 98.67378234863281
patch: char return i ; return i ;
rank: 336
score: 98.66685791015625
patch: return INDEX _ NOT _ FOUND ] ; }
rank: 336
score: 98.57030378069196
patch: return 0 ; return $NUMBER$ ;
rank: 336
score: 98.56338500976562
patch: return name [ i ] ; }
rank: 336
score: 98.3822530110677
patch: char i = i ;
rank: 337
score: 98.80645197088069
patch: return $STRING$ . to CaMeL String ( ) ; }
rank: 337
score: 98.72683715820312
patch: return i ; ; ; } }
rank: 337
score: 98.7103042602539
patch: return i * i ; } else
rank: 337
score: 98.67307739257812
patch: int i = i ; i return i ;
rank: 337
score: 98.66670365767045
patch: if ( j >= search CaMeL Chars . length )
rank: 337
score: 98.38190569196429
patch: *= 1 ; break ; }
rank: 338
score: 98.80640411376953
patch: return i - cs CaMeL Len ;
rank: 338
score: 98.7520263671875
patch: return ( ( int ) search CaMeL Len ;
rank: 338
score: 98.72650701349431
patch: return i ; ; } } return - 1 ;
rank: 338
score: 98.71029663085938
patch: . = i ; return 1 ;
rank: 338
score: 98.67279052734375
patch: return i ; return i ; / /
rank: 338
score: 98.6633633700284
patch: return INDEX _ NOT _ FOUND [ i ] ;
rank: 338
score: 98.57006225585937
patch: return 1 ; return - 1 ; break ;
rank: 338
score: 98.38185337611607
patch: return matches [ j ] ;
rank: 339
score: 98.75194091796875
patch: return i . size ( ) - 0 ;
rank: 339
score: 98.72607421875
patch: return index CaMeL Of CaMeL Any ( ; } ;
rank: 339
score: 98.71010916573661
patch: return 0 [ 1 ] ;
rank: 339
score: 98.67225341796875
patch: if ( i != i ; return i ;
rank: 339
score: 98.6630859375
patch: return INDEX _ NOT _ FOUND | i ;
rank: 339
score: 98.56983032226563
patch: return i ; ; / ; return i ;
rank: 339
score: 98.56198120117188
patch: character * / return i ; }
rank: 340
score: 98.80100708007812
patch: return i + ch . length - 1 ;
rank: 340
score: 98.75075073242188
patch: return search CaMeL Chars [ j ] ] ;
rank: 340
score: 98.72601996527777
patch: if ( i != search CaMeL Len )
rank: 340
score: 98.70880805121527
patch: . * * * * * / ;
rank: 340
score: 98.6716552734375
patch: if return i ; ; ; return i ;
rank: 340
score: 98.66298828125
patch: e = search CaMeL Chars [ j ] ;
rank: 340
score: 98.56825474330357
patch: return i ; return start ;
rank: 340
score: 98.37978690011161
patch: return 1 ; } break ;
rank: 341
score: 98.80081176757812
patch: return i % search CaMeL Chars . length ;
rank: 341
score: 98.72594105113636
patch: return i ; } ; } } return i ;
rank: 341
score: 98.67119750976562
patch: return i ; ; if return i ; ;
rank: 341
score: 98.56728293678977
patch: return i ; ; return i ; return i ;
rank: 341
score: 98.55985260009766
patch: return name . length ( ) ;
rank: 341
score: 98.37965611049107
patch: return i ; case 1 :
rank: 342
score: 98.79795143821023
patch: return search CaMeL Chars [ j ] / $NUMBER$ ;
rank: 342
score: 98.72514512803819
patch: if ( $STRING$ . equals ( ch ;
rank: 342
score: 98.70829010009766
patch: return 0 ; } else return ;
rank: 342
score: 98.67118617466518
patch: if i { return i ;
rank: 342
score: 98.5671142578125
patch: return i ; ; = i + 0 ;
rank: 342
score: 98.55819702148438
patch: return length [ j ] ; }
rank: 342
score: 98.37928118024554
patch: return i ; case i :
rank: 343
score: 98.7978515625
patch: return i + ch . length 1 ;
rank: 343
score: 98.74829711914063
patch: return i . get CaMeL Bytes ( ) ;
rank: 343
score: 98.72512478298611
patch: return i * i + 1 ; }
rank: 343
score: 98.7082290649414
patch: return i - 1 ; } else
rank: 343
score: 98.67078993055556
patch: return i ; if i = i ;
rank: 343
score: 98.66206868489583
patch: result return i ; }
rank: 343
score: 98.56681993272569
patch: return - 1 ; } return i ;
rank: 343
score: 98.37672642299107
patch: [ j ] = j ;
rank: 344
score: 98.79742431640625
patch: return i + cs . length ;
rank: 344
score: 98.72413635253906
patch: return i ; ; } } }
rank: 344
score: 98.70810953776042
patch: return i [ 0 ++ ++ ] ;
rank: 344
score: 98.67017822265625
patch: return i ; ; * / return i ;
rank: 344
score: 98.6616923014323
patch: return cs ; } }
rank: 344
score: 98.56660291883681
patch: return 1 ; ; if return 1 ;
rank: 344
score: 98.55626678466797
patch: return - - 1 ; } }
rank: 344
score: 98.37581961495536
patch: if ( i == 0 )
rank: 345
score: 98.7979403409091
patch: throw 0 + search CaMeL Chars [ j ] ;
rank: 345
score: 98.74490966796876
patch: return cs . get CaMeL Type ( ) ;
rank: 345
score: 98.7225008877841
patch: if ( i > search CaMeL Len ) break ;
rank: 345
score: 98.70762634277344
patch: return i - 0 ; } else
rank: 345
score: 98.66097412109374
patch: return INDEX _ NOT _ FOUND true ; }
rank: 345
score: 98.56547407670455
patch: return i ; return i ; else return i ;
rank: 346
score: 98.744384765625
patch: index CaMeL Of CaMeL Any ( cs ) ;
rank: 346
score: 98.72219509548611
patch: return i - 1 ; break ; }
rank: 346
score: 98.70700509207589
patch: return i ; * * /
rank: 346
score: 98.66978624131944
patch: return i ; return i ; } *
rank: 346
score: 98.56535200639205
patch: return i ; ; if i * return i ;
rank: 346
score: 98.55549621582031
patch: search CaMeL Len return i ; }
rank: 346
score: 98.37472534179688
patch: return i & i ;
rank: 347
score: 98.79544677734376
patch: return $STRING$ . get CaMeL Name ( ) ;
rank: 347
score: 98.72208658854167
patch: return Character . MAX _ VALUE ; }
rank: 347
score: 98.70699310302734
patch: return i ; } += i ;
rank: 347
score: 98.66977267795139
patch: return 0 ; i else = i ;
rank: 347
score: 98.56511094835069
patch: return 0 ; if ; return i ;
rank: 347
score: 98.55423736572266
patch: return this [ j ] ; }
rank: 347
score: 98.37353515625
patch: return 1 [ i ] ;
rank: 348
score: 98.74367850167411
patch: return ( byte ) i ;
rank: 348
score: 98.72069091796875
patch: return - 1 ; } } return i ;
rank: 348
score: 98.70616997612848
patch: return i ; * * * * /
rank: 348
score: 98.66975911458333
patch: return i ; if i return i ;
rank: 348
score: 98.655810546875
patch: if ( search CaMeL Len > 0 ) {
rank: 348
score: 98.56455485026042
patch: i if return i ; return i ;
rank: 349
score: 98.7936279296875
patch: return search CaMeL Chars [ j ] ? i
rank: 349
score: 98.74348280164931
patch: return char CaMeL At ( 0 ) ;
rank: 349
score: 98.70597839355469
patch: } * * * * * /
rank: 349
score: 98.66907416449652
patch: return i ; return return - 1 ;
rank: 349
score: 98.65433959960937
patch: result -= search CaMeL Chars [ j ] ;
rank: 349
score: 98.56414116753473
patch: return 0 ; ; return i ; ;
rank: 349
score: 98.55329895019531
patch: return new char [ j ] ;
rank: 349
score: 98.37175641741071
patch: if ( i == matches )
rank: 350
score: 98.79430042613636
patch: return ( i . to CaMeL String ( ) ;
rank: 350
score: 98.74169921875
patch: return ( i + search CaMeL Len ) ;
rank: 350
score: 98.71834564208984
patch: return i + count ; } }
rank: 350
score: 98.70423889160156
patch: return i ; } catch ; ;
rank: 350
score: 98.65391845703125
patch: return INDEX _ NOT _ FOUND + $NUMBER$ ;
rank: 350
score: 98.5636962890625
patch: return 0 ; ; if i / ++ ;
rank: 350
score: 98.55321502685547
patch: return new int [ ] { ch
rank: 351
score: 98.79322509765625
patch: return i + cs . size ( ) ;
rank: 351
score: 98.79271240234375
patch: return i && search CaMeL Chars [ j ]
rank: 351
score: 98.74166870117188
patch: return cs . char CaMeL At ( j )
rank: 351
score: 98.7181729403409
patch: return i ; break ; } } return i ;
rank: 351
score: 98.70275115966797
patch: return i - i + 0 ;
rank: 351
score: 98.66808471679687
patch: return i ; } else { return 1 ;
rank: 351
score: 98.6533203125
patch: if ( search CaMeL Len <= cs CaMeL Len )
rank: 351
score: 98.5627685546875
patch: return 1 ; ; if ; return i ;
rank: 351
score: 98.3699951171875
patch: [ j ] = 0 ;
rank: 352
score: 98.79081895616319
patch: return * INDEX _ NOT _ FOUND ;
rank: 352
score: 98.73707580566406
patch: return $STRING$ + search CaMeL Len ;
rank: 352
score: 98.70244683159723
patch: . } * * * * * /
rank: 352
score: 98.66729058159723
patch: return i ; else return - i ;
rank: 352
score: 98.65285034179688
patch: name += search CaMeL Chars [ j ] ;
rank: 352
score: 98.56188286675348
patch: return - i ; if return i ;
rank: 352
score: 98.55155436197917
patch: return ch ; } }
rank: 352
score: 98.36962890625
patch: return i / $NUMBER$ ; }
rank: 353
score: 98.79256439208984
patch: return ( i + ch ) ;
rank: 353
score: 98.79022979736328
patch: return i + ch + ch ;
rank: 353
score: 98.7172119140625
patch: return i ; ; } } this . ;
rank: 353
score: 98.70225306919643
patch: return 0 ; } if ;
rank: 353
score: 98.6669921875
patch: try { return return i ;
rank: 353
score: 98.56149291992188
patch: return i ; if return 1 ; break ;
rank: 353
score: 98.36955043247768
patch: return ] ; break ; }
rank: 354
score: 98.7891357421875
patch: return i * search CaMeL Chars . length ;
rank: 354
score: 98.73513793945312
patch: return ! search CaMeL Chars [ i ] ;
rank: 354
score: 98.70186614990234
patch: return $NUMBER$ ; } return 0 ;
rank: 354
score: 98.66692437065973
patch: return i ; return return - 0 ;
rank: 354
score: 98.6501131924716
patch: return search CaMeL Chars [ j ] ; } else
rank: 354
score: 98.56072998046875
patch: return 1 ; return i ; return i ;
rank: 354
score: 98.55134582519531
patch: return chars [ i ] ; }
rank: 354
score: 98.36909702845982
patch: [ j ] = true ;
rank: 355
score: 98.78867409446023
patch: return search CaMeL Chars [ j ] - i ;
rank: 355
score: 98.71693929036458
patch: return i ; } } return - ;
rank: 355
score: 98.70182291666667
patch: return i ; } if return 0 ;
rank: 355
score: 98.66522216796875
patch: return i ; ; return j ;
rank: 355
score: 98.64898126775569
patch: if ( ch == INDEX _ NOT _ FOUND )
rank: 355
score: 98.56061345880681
patch: return i ; return i ; return - 1 ;
rank: 355
score: 98.5510482788086
patch: / * / return i ; }
rank: 355
score: 98.36658586774554
patch: = ( char ) i ;
rank: 356
score: 98.78858531605114
patch: return search CaMeL Chars [ j ] - $NUMBER$ ;
rank: 356
score: 98.73482259114583
patch: sb return INDEX _ NOT _ FOUND ;
rank: 356
score: 98.71672905815973
patch: return i + i ; } else {
rank: 356
score: 98.66517639160156
patch: return 0 ; else return 0 ;
rank: 356
score: 98.56005859375
patch: return - i ; if return 1 ;
rank: 356
score: 98.55073547363281
patch: return 0 ; } } } }
rank: 356
score: 98.36508178710938
patch: = true ; break ;
rank: 357
score: 98.73292541503906
patch: return new byte [ 0 ] ;
rank: 357
score: 98.70104108537946
patch: return 0 + 0 ; }
rank: 357
score: 98.66515350341797
patch: return - 1 ; return $STRING$ ;
rank: 357
score: 98.55898215553977
patch: return - 1 ; break ; if i ++ ;
rank: 357
score: 98.5506362915039
patch: return [ i ] ; } }
rank: 357
score: 98.36448974609375
patch: return i 1 ;
rank: 358
score: 98.78767533735795
patch: return search CaMeL Chars [ j ] * $NUMBER$ ;
rank: 358
score: 98.73262329101563
patch: else return INDEX _ NOT _ FOUND ; }
rank: 358
score: 98.71373748779297
patch: return i ; ; } break ;
rank: 358
score: 98.70095486111111
patch: return i ; } } return false ;
rank: 358
score: 98.66510772705078
patch: return i ; while return 0 ;
rank: 358
score: 98.64801580255681
patch: return - INDEX _ NOT _ FOUND ; } }
rank: 358
score: 98.55892508370536
patch: return i ; ; / ;
rank: 358
score: 98.55028533935547
patch: return new int [ $NUMBER$ ] ;
rank: 358
score: 98.36422293526786
patch: if ; i ++ ; }
rank: 359
score: 98.71245659722223
patch: if ( ; ; break ; } }
rank: 359
score: 98.70016043526786
patch: return [ 1 ] ; }
rank: 359
score: 98.66447448730469
patch: return i ; j else * ;
rank: 359
score: 98.64776000976562
patch: state += search CaMeL Chars [ j ] ;
rank: 359
score: 98.55890502929688
patch: return 0 ; ; = i + 1 ;
rank: 359
score: 98.55018615722656
patch: return ( char ) 0 ; }
rank: 359
score: 98.36397879464286
patch: return this . i ; }
rank: 360
score: 98.7846346768466
patch: return i ; } } return cs . length ;
rank: 360
score: 98.78432395241477
patch: return search CaMeL Chars [ j ] + $NUMBER$ ;
rank: 360
score: 98.7282470703125
patch: return search CaMeL Chars [ j ] ; ;
rank: 360
score: 98.71244673295455
patch: throw new Null CaMeL Pointer CaMeL Exception ( $STRING$ ;
rank: 360
score: 98.64702814275569
patch: return INDEX _ NOT _ FOUND ; continue ; }
rank: 360
score: 98.55868530273438
patch: return i ; break ; if i ++ ;
rank: 360
score: 98.5499267578125
patch: return INDEX _ NOT _ FOUND }
rank: 361
score: 98.78322143554688
patch: return new int [ ] { ch } ;
rank: 361
score: 98.72720336914062
patch: return i . next ( ) ;
rank: 361
score: 98.71211242675781
patch: return Character . MAX _ VALUE ;
rank: 361
score: 98.6636734008789
patch: if i -- ; return i ;
rank: 361
score: 98.64681667751736
patch: f = INDEX _ NOT _ FOUND ;
rank: 361
score: 98.54941813151042
patch: return length ; } }
rank: 361
score: 98.36102294921875
patch: [ i ] += i ;
rank: 362
score: 98.72620985243056
patch: text return INDEX _ NOT _ FOUND ;
rank: 362
score: 98.71202256944444
patch: = i - 1 ; break ; }
rank: 362
score: 98.69900173611111
patch: return i ; } else if ; }
rank: 362
score: 98.66303253173828
patch: return return 1 ; return $STRING$ ;
rank: 362
score: 98.64622913707386
patch: return INDEX _ NOT _ FOUND || i ; }
rank: 362
score: 98.55726928710938
patch: return i ; i / ; = i ;
rank: 362
score: 98.54838053385417
patch: character return 0 ; }
rank: 362
score: 98.36037772042411
patch: [ j ] = $STRING$ ;
rank: 363
score: 98.7825594815341
patch: return new int [ cs CaMeL Len ] ; }
rank: 363
score: 98.66236707899306
patch: return return 1 ; if return 1 ;
rank: 363
score: 98.64567427201705
patch: if ( search CaMeL Len >= cs CaMeL Len )
rank: 363
score: 98.55722045898438
patch: return i ; return - i ; break ;
rank: 363
score: 98.5473403930664
patch: Chars [ j ] = ch ;
rank: 363
score: 98.35954066685268
patch: return ; i ++ ; }
rank: 364
score: 98.72523498535156
patch: return ( $STRING$ + ch ) ;
rank: 364
score: 98.711669921875
patch: return i - 1 ; } this . ;
rank: 364
score: 98.69862196180556
patch: . * * * * * * ;
rank: 364
score: 98.55720520019531
patch: return name ;
rank: 364
score: 98.54677908761161
patch: return ( int ) ch ;
rank: 364
score: 98.35911342075893
patch: return 1 + i ; }
rank: 365
score: 98.72463650173611
patch: return cs [ search CaMeL Len ] ;
rank: 365
score: 98.71104431152344
patch: if ( ! ; break ; }
rank: 365
score: 98.69854736328125
patch: return 0 * i ; break ;
rank: 365
score: 98.6612548828125
patch: return i ; i else { return 1 ;
rank: 365
score: 98.64468383789062
patch: return cs ;
rank: 365
score: 98.55708143446181
patch: return 0 ; ; return i ; }
rank: 365
score: 98.54439544677734
patch: return i ; ch = i ;
rank: 365
score: 98.35780639648438
patch: return $NUMBER$ ; }
rank: 366
score: 98.69828287760417
patch: . * * * /
rank: 366
score: 98.66124877929687
patch: return i ; return 0 ; return i ;
rank: 366
score: 98.6446200284091
patch: } } return INDEX _ NOT _ FOUND ; }
rank: 366
score: 98.55562337239583
patch: i i = i ; return i ;
rank: 366
score: 98.5433578491211
patch: return $NUMBER$ ; } j ++ ;
rank: 366
score: 98.35541643415179
patch: / * / return i ;
rank: 367
score: 98.72367350260417
patch: return new String CaMeL Buffer ( ) ;
rank: 367
score: 98.69796752929688
patch: return i [ 0 ] ; ;
rank: 367
score: 98.660888671875
patch: return i ; ; ; * ;
rank: 367
score: 98.64417613636364
patch: ! return INDEX _ NOT _ FOUND ; } }
rank: 367
score: 98.55496215820312
patch: return i ; i * / return i ;
rank: 367
score: 98.35513741629464
patch: if ; return - 1 ;
rank: 368
score: 98.7778564453125
patch: return i + index CaMeL Of CaMeL Any ;
rank: 368
score: 98.70947265625
patch: return i ; } ; } }
rank: 368
score: 98.69757843017578
patch: return 0 - $NUMBER$ ; } }
rank: 368
score: 98.66061401367188
patch: return i ; if - 1 ;
rank: 368
score: 98.6414794921875
patch: throw new Illegal CaMeL Argument CaMeL Exception ( ,
rank: 368
score: 98.55419921875
patch: return i + i ; return 1 ;
rank: 368
score: 98.5389404296875
patch: return ( i + i ) ;
rank: 368
score: 98.35482352120536
patch: [ i ] = 0 ;
rank: 369
score: 98.77962646484374
patch: return new Char CaMeL Sequence ( cs ) ;
rank: 369
score: 98.72120361328125
patch: return ( 0 - cs CaMeL Len ) ;
rank: 369
score: 98.70938873291016
patch: = ch ; break ; } }
rank: 369
score: 98.66046905517578
patch: if i ; return - 1 ;
rank: 369
score: 98.553515625
patch: return i ; ; ; ; = i ;
rank: 369
score: 98.53765869140625
patch: return char [ j ] ; }
rank: 369
score: 98.35387166341145
patch: [ j ] ++ ;
rank: 370
score: 98.77704412286931
patch: return i % search CaMeL Chars [ j ] ;
rank: 370
score: 98.72111002604167
patch: return cs [ cs CaMeL Len ] ;
rank: 370
score: 98.70918782552083
patch: = i ; break ; } } ;
rank: 370
score: 98.6966552734375
patch: return 1 ; } / * /
rank: 370
score: 98.66044616699219
patch: = i ; ; return i ;
rank: 370
score: 98.55340576171875
patch: return 0 ; ; = i ; ;
rank: 370
score: 98.35376848493304
patch: if ( i != 0 )
rank: 371
score: 98.70793914794922
patch: return i + j ; } }
rank: 371
score: 98.69573296440973
patch: . return i ; } else if ;
rank: 371
score: 98.64003684303977
patch: return ( INDEX _ NOT _ FOUND ; } }
rank: 371
score: 98.55340021306819
patch: return i ; ; if i + i ++ ;
rank: 371
score: 98.5369364420573
patch: return ++ j ; }
rank: 371
score: 98.35321916852679
patch: return $NUMBER$ ; break ; }
rank: 372
score: 98.77813165838069
patch: return search CaMeL Chars [ j ] ; * /
rank: 372
score: 98.7203369140625
patch: return i [ cs CaMeL Len ] ;
rank: 372
score: 98.70731977982955
patch: return i ; } else { throw new ; }
rank: 372
score: 98.69554901123047
patch: . * * * / } }
rank: 372
score: 98.6602783203125
patch: if i return i ;
rank: 372
score: 98.639892578125
patch: { search CaMeL Chars [ j ] = ch ;
rank: 372
score: 98.55310668945313
patch: return i ; return 1 ; return i ;
rank: 372
score: 98.35068184988839
patch: = i + 1 ; }
rank: 373
score: 98.77450561523438
patch: return i . size ( ) : 0 ;
rank: 373
score: 98.71806335449219
patch: return search CaMeL Len - 1 ;
rank: 373
score: 98.70586480034723
patch: return - 1 ; } } else {
rank: 373
score: 98.69533962673611
patch: . return i ; return 1 ; }
rank: 373
score: 98.66007232666016
patch: return i ; return case i ;
rank: 373
score: 98.63939319957386
patch: name return INDEX _ NOT _ FOUND ; } }
rank: 373
score: 98.53526306152344
patch: return cs CaMeL Len ; break ;
rank: 373
score: 98.35014125279018
patch: return i + 1 ) ;
rank: 374
score: 98.70555419921875
patch: return i + search CaMeL Len ; } }
rank: 374
score: 98.69523620605469
patch: break * * / return i ;
rank: 374
score: 98.65981038411458
patch: return i ; try ; if i ;
rank: 374
score: 98.63837224786931
patch: return INDEX _ NOT _ FOUND && i ; }
rank: 374
score: 98.55258517795139
patch: return i ; } if i ++ ;
rank: 374
score: 98.34725952148438
patch: [ i ] ++ ;
rank: 375
score: 98.7769775390625
patch: search CaMeL Chars [ j ] = $STRING$ ;
rank: 375
score: 98.705078125
patch: = Character . to CaMeL Upper CaMeL Case ( ;
rank: 375
score: 98.69357299804688
patch: return i - length ; } }
rank: 375
score: 98.65972900390625
patch: int return return return i ;
rank: 375
score: 98.55235460069444
patch: return - i ; break ; break ;
rank: 375
score: 98.53318786621094
patch: return i - - 0 ; }
rank: 375
score: 98.3462626139323
patch: return - 1 ) ;
rank: 376
score: 98.77350408380681
patch: return i * search CaMeL Chars [ i ] ;
rank: 376
score: 98.71585693359376
patch: return ( 0 + search CaMeL Len ) ;
rank: 376
score: 98.70485617897727
patch: return Integer . parse CaMeL Int ( ; } }
rank: 376
score: 98.69329833984375
patch: return i - i + i ;
rank: 376
score: 98.63782416449652
patch: return INDEX _ NOT _ FOUND ] ;
rank: 376
score: 98.53071594238281
patch: return substring [ j ] ; }
rank: 376
score: 98.34599958147321
patch: return - 1 + j ;
rank: 377
score: 98.77574573863636
patch: return ( i . add ( ch ) ) ;
rank: 377
score: 98.77307739257813
patch: return search CaMeL Chars [ j ] false ;
rank: 377
score: 98.6927719116211
patch: } else * / return i ;
rank: 377
score: 98.65959167480469
patch: return i ; / / i ;
rank: 377
score: 98.637109375
patch: result return i ;
rank: 377
score: 98.55172119140624
patch: return i ; ; ; ; return i ;
rank: 377
score: 98.52890014648438
patch: return byte [ j ] ; }
rank: 377
score: 98.34573364257812
patch: return count + 1 ;
rank: 378
score: 98.77523803710938
patch: return value . get CaMeL Value ( ) ;
rank: 378
score: 98.77243874289773
patch: return search CaMeL Chars [ j ] - } ;
rank: 378
score: 98.7042236328125
patch: if ( i == search CaMeL Chars . length ;
rank: 378
score: 98.69120570591518
patch: return i * $NUMBER$ ; }
rank: 378
score: 98.65933227539062
patch: return return 1 ; } if return i ;
rank: 378
score: 98.6361083984375
patch: return INDEX _ NOT _ FOUND . ; }
rank: 378
score: 98.5515625
patch: return i ; for return i ; break ;
rank: 378
score: 98.52758026123047
patch: return size ; } j ++ ;
rank: 378
score: 98.34551130022321
patch: += i ; return i ;
rank: 379
score: 98.7713955965909
patch: return i . get CaMeL Name ( ) ; }
rank: 379
score: 98.71361626519098
patch: return this . search CaMeL Chars [ j
rank: 379
score: 98.70411987304688
patch: if ( i < search CaMeL Len ) {
rank: 379
score: 98.69094848632812
patch: return i * i + i ;
rank: 379
score: 98.65873718261719
patch: return i ; } return name ;
rank: 379
score: 98.55147094726563
patch: return i ; ; if ; return 0 ;
rank: 379
score: 98.5270767211914
patch: return j ; j ++ ; }
rank: 380
score: 98.76927490234375
patch: search CaMeL Chars [ i ] = ch ;
rank: 380
score: 98.6587158203125
patch: return i ; return - - - 1 ;
rank: 380
score: 98.63482055664062
patch: return INDEX _ NOT _ FOUND ; * /
rank: 380
score: 98.34456089564732
patch: if ( i < count )
rank: 381
score: 98.76987526633523
patch: return search CaMeL Chars [ j ] . index CaMeL
rank: 381
score: 98.76659393310547
patch: return ( ( int ) i ;
rank: 381
score: 98.69014195033482
patch: . / * * * /
rank: 381
score: 98.6340576171875
patch: true += search CaMeL Chars [ j ] ;
rank: 381
score: 98.55139838324652
patch: return i ; return 1 ; break ;
rank: 381
score: 98.52590506417411
patch: return - [ j ] ;
rank: 381
score: 98.3445536295573
patch: += i ; break ;
rank: 382
score: 98.76876491970486
patch: ret return INDEX _ NOT _ FOUND ;
rank: 382
score: 98.709228515625
patch: return get CaMeL Type ( ch ) ;
rank: 382
score: 98.65840911865234
patch: if return i ; ++ i ;
rank: 382
score: 98.63353271484375
patch: if ( search CaMeL Len <= 0 ) {
rank: 382
score: 98.55127825055804
patch: return i ; throw i ;
rank: 382
score: 98.52527727399554
patch: return i + - 0 ;
rank: 382
score: 98.34206717354911
patch: return - i + i ;
rank: 383
score: 98.75705788352273
patch: return search CaMeL Chars [ i ] ; } }
rank: 383
score: 98.70692443847656
patch: return search CaMeL Chars [ j ]
rank: 383
score: 98.7017578125
patch: if ( i >= search CaMeL Len ; }
rank: 383
score: 98.68960571289062
patch: return i i * i ; }
rank: 383
score: 98.65839301215277
patch: return i ; ; return - 0 ;
rank: 383
score: 98.34049769810268
patch: b = i ; break ;
rank: 384
score: 98.75674438476562
patch: return value ;
rank: 384
score: 98.7052001953125
patch: return ( char ) - 1 ;
rank: 384
score: 98.70167236328125
patch: return index CaMeL Of ( i , i ;
rank: 384
score: 98.6895751953125
patch: return i i ; }
rank: 384
score: 98.65830078125
patch: return i ; } i if return i ;
rank: 384
score: 98.63266823508523
patch: return INDEX _ NOT _ FOUND [ j ] ;
rank: 384
score: 98.52391706194196
patch: return i : i ; }
rank: 384
score: 98.34010532924107
patch: f = i ; break ;
rank: 385
score: 98.704833984375
patch: return $STRING$ . size ( ) ;
rank: 385
score: 98.70026245117188
patch: return i - 1 ; } break ; }
rank: 385
score: 98.68949890136719
patch: . if ( 0 == i ;
rank: 385
score: 98.65776062011719
patch: return i ; return - value ;
rank: 385
score: 98.63250177556819
patch: if ( search CaMeL Len >= search CaMeL Len )
rank: 385
score: 98.54899379185268
patch: return 0 ; return count ;
rank: 385
score: 98.33998616536458
patch: if i == i )
rank: 386
score: 98.76484375
patch: return INDEX _ NOT _ FOUND * 1 ;
rank: 386
score: 98.75435014204545
patch: is search CaMeL Chars [ j ] = ch ;
rank: 386
score: 98.70002885298295
patch: if ( i != search CaMeL Len ) break ;
rank: 386
score: 98.68937683105469
patch: return i ; length ++ ; }
rank: 386
score: 98.65744018554688
patch: int i = i ; return - 1 ;
rank: 386
score: 98.54830322265624
patch: return i ; ; if i ++ ; ;
rank: 386
score: 98.52262660435268
patch: return ++ j ; } }
rank: 386
score: 98.33919270833333
patch: return i ) ; }
rank: 387
score: 98.76410466974431
patch: return i : search CaMeL Chars [ i ] ;
rank: 387
score: 98.75223117404514
patch: return ++ INDEX _ NOT _ FOUND ;
rank: 387
score: 98.69961886935764
patch: . return i - 1 ; } }
rank: 387
score: 98.65693664550781
patch: return i ; ; return name ;
rank: 387
score: 98.62916870117188
patch: buf += search CaMeL Chars [ j ] ;
rank: 387
score: 98.33893694196429
patch: [ i ] = $STRING$ ;
rank: 388
score: 98.70172797309027
patch: return Integer . length ( ch ) ;
rank: 388
score: 98.69900512695312
patch: return i - i - ; }
rank: 388
score: 98.6885986328125
patch: return 0 [ $NUMBER$ ] ; }
rank: 388
score: 98.65655517578125
patch: try { return i ; } return i ;
rank: 388
score: 98.6275390625
patch: return INDEX _ NOT _ FOUND ; ; }
rank: 388
score: 98.54806857638889
patch: return - 1 ; return - i ;
rank: 388
score: 98.5208511352539
patch: return search CaMeL Len . length ;
rank: 389
score: 98.75035511363636
patch: return ( cs . append ( ch ) ) ;
rank: 389
score: 98.69861602783203
patch: if ; i ++ ; } }
rank: 389
score: 98.68851470947266
patch: return i - 0 ; } ;
rank: 389
score: 98.54767717633929
patch: return 0 ; ; ; ;
rank: 389
score: 98.52080535888672
patch: return i ? 1 : i ;
rank: 389
score: 98.33699544270833
patch: return i - count ;
rank: 390
score: 98.76238403320312
patch: return search CaMeL Chars char [ j ] ;
rank: 390
score: 98.75019975142045
patch: return value + search CaMeL Chars [ i ] ;
rank: 390
score: 98.69800914417614
patch: return i ; } } } return - i ;
rank: 390
score: 98.69709014892578
patch: return search CaMeL Len - 0 ;
rank: 390
score: 98.68806457519531
patch: return 0 ; } } * /
rank: 390
score: 98.65638427734375
patch: return i ; ; if return i ; }
rank: 390
score: 98.52066040039062
patch: return ( j + 0 ) ;
rank: 391
score: 98.74974907769098
patch: return . INDEX _ NOT _ FOUND ;
rank: 391
score: 98.69748757102273
patch: if ( i >= search CaMeL Len ) continue ;
rank: 391
score: 98.69576687282986
patch: return to CaMeL Chars [ i ] ;
rank: 391
score: 98.65618218315973
patch: return i ; return i ; * *
rank: 391
score: 98.62086486816406
patch: return search CaMeL Chars [ j ;
rank: 391
score: 98.54675903320313
patch: return i ; } return i + 1 ;
rank: 391
score: 98.5206069946289
patch: return Integer . length ( ) ;
rank: 391
score: 98.33552769252232
patch: [ j ] += i ;
rank: 392
score: 98.76160278320313
patch: return i . get CaMeL Instance ( ) ;
rank: 392
score: 98.74962768554687
patch: return cs . get CaMeL Length ( ) ;
rank: 392
score: 98.69660034179688
patch: if ( i < search CaMeL Len ) ;
rank: 392
score: 98.6878662109375
patch: return 0 ; } catch return i ;
rank: 392
score: 98.65604858398437
patch: return i ; int i { return i ;
rank: 392
score: 98.62056477864583
patch: return INDEX _ NOT _ FOUND false ;
rank: 392
score: 98.54574245876736
patch: return i ; return - 1 ; else
rank: 392
score: 98.51959991455078
patch: return - - - 0 ; }
rank: 393
score: 98.74945068359375
patch: return + INDEX _ NOT _ FOUND ;
rank: 393
score: 98.69622802734375
patch: return ~ i ; } }
rank: 393
score: 98.68756103515625
patch: . ; return i ; } }
rank: 393
score: 98.61991373697917
patch: true return i ; }
rank: 393
score: 98.54503038194444
patch: return 1 ; ; ; return i ;
rank: 393
score: 98.33447265625
patch: return i ; if ( ;
rank: 394
score: 98.75948079427083
patch: return & INDEX _ NOT _ FOUND ;
rank: 394
score: 98.68904876708984
patch: return new long [ 0 ] ;
rank: 394
score: 98.68739827473958
patch: . return i ; return i ; }
rank: 394
score: 98.65567626953126
patch: return i ; / ; if return i ;
rank: 394
score: 98.61988525390625
patch: buf = search CaMeL Chars [ j ] ;
rank: 394
score: 98.54481811523438
patch: return 0 ; return i ; return 1 ;
rank: 394
score: 98.51908111572266
patch: return i + - 1 ; }
rank: 394
score: 98.3343505859375
patch: return i ) - 1 ;
rank: 395
score: 98.69512939453125
patch: return i - ; } } ;
rank: 395
score: 98.68891737196181
patch: return i ( search CaMeL Chars ) ;
rank: 395
score: 98.65519883897569
patch: return i ; j else if i ;
rank: 395
score: 98.61796875
patch: str = search CaMeL Chars [ j ] ;
rank: 395
score: 98.544384765625
patch: return 0 ; ; / ; = i ;
rank: 395
score: 98.51851399739583
patch: return [ i ] ;
rank: 395
score: 98.33370535714286
patch: return i ( i ) ;
rank: 396
score: 98.75878295898437
patch: return i . get CaMeL Exception ( ) ;
rank: 396
score: 98.7448397549716
patch: return new char [ cs CaMeL Len ] ; }
rank: 396
score: 98.69451293945312
patch: if ( is CaMeL Empty ( ; ) )
rank: 396
score: 98.68882921006944
patch: return i . size ( ) 1 ;
rank: 396
score: 98.68616739908855
patch: return 0 + 0 ;
rank: 396
score: 98.65464782714844
patch: = i ; while return i ;
rank: 396
score: 98.61699676513672
patch: return cs . return i ; }
rank: 396
score: 98.54422607421876
patch: return i ; ; = i ; break ;
rank: 396
score: 98.51769147600446
patch: return name [ i ] ;
rank: 396
score: 98.33317347935268
patch: if ( i == $NUMBER$ )
rank: 397
score: 98.69426727294922
patch: return Math . max ( ; }
rank: 397
score: 98.6858139038086
patch: return $NUMBER$ - i ; } }
rank: 397
score: 98.6545654296875
patch: return i ; ; else if return 1 ;
rank: 397
score: 98.54420166015625
patch: return 0 ; ; return i + 0 ;
rank: 397
score: 98.51747131347656
patch: return ( [ j ] ) ;
rank: 397
score: 98.33244977678571
patch: value return - 1 ; }
rank: 398
score: 98.75270385742188
patch: return i + ch + search CaMeL Len ;
rank: 398
score: 98.6939697265625
patch: if ( i > 0 ) return i ; }
rank: 398
score: 98.68626403808594
patch: return new Object [ 0 ] ;
rank: 398
score: 98.61634318033855
patch: return ( i ) ;
rank: 398
score: 98.33156040736607
patch: return ; } return i ;
rank: 399
score: 98.69317072088069
patch: if ( i == Character . MAX _ VALUE )
rank: 399
score: 98.68540445963542
patch: return 1 ; } else return 0 ;
rank: 399
score: 98.68378363715277
patch: return ( Integer ) search CaMeL Len ;
rank: 399
score: 98.65321180555556
patch: if return return i ; return i ;
rank: 399
score: 98.61617431640624
patch: return INDEX _ NOT _ FOUND : ; }
rank: 399
score: 98.54353162977431
patch: return i + 0 ; return 1 ;
rank: 399
score: 98.33148193359375
patch: if ( i != j )
rank: 400
score: 98.74107530381944
patch: -= search CaMeL Chars [ j ] ;
rank: 400
score: 98.6925048828125
patch: return i . index CaMeL Of ( ch ; }
rank: 400
score: 98.68536376953125
patch: return i * i ; } ;
rank: 400
score: 98.68318939208984
patch: return i - [ j ] ;
rank: 400
score: 98.65298122829861
patch: return i ; ; while return i ;
rank: 400
score: 98.51551055908203
patch: character [ j ] = i ;
rank: 400
score: 98.33140055338542
patch: = i - 1 ;
rank: 401
score: 98.6923828125
patch: return i & i ; } }
rank: 401
score: 98.6525634765625
patch: return i ; i / * return i ;
rank: 401
score: 98.61178927951389
patch: throw new Illegal CaMeL Argument CaMeL Exception (
rank: 401
score: 98.540966796875
patch: return - 1 ; / ; return i ;
rank: 401
score: 98.32826450892857
patch: return ~ i ; break ;
rank: 402
score: 98.7405517578125
patch: return value index CaMeL Of ( ch ) ;
rank: 402
score: 98.6922940340909
patch: return 0 ; } else { return i ; }
rank: 402
score: 98.68391418457031
patch: return i * 0 ; } else
rank: 402
score: 98.67977142333984
patch: return ( int ) ( i ;
rank: 402
score: 98.65250651041667
patch: = i ; i else return i ;
rank: 402
score: 98.6112060546875
patch: return INDEX _ NOT _ FOUND ; } ;
rank: 402
score: 98.54035101996527
patch: return i ; ; { return i ;
rank: 402
score: 98.5118408203125
patch: return null ; } }
rank: 402
score: 98.32741873604911
patch: return j + $NUMBER$ ; }
rank: 403
score: 98.74896240234375
patch: return i + name . length ( ) ;
rank: 403
score: 98.69111772017045
patch: return i ; } ; } return - 1 ;
rank: 403
score: 98.67945692274306
patch: return replace CaMeL Chars [ i ] ;
rank: 403
score: 98.60912475585937
patch: buffer += search CaMeL Chars [ j ] ;
rank: 403
score: 98.50835418701172
patch: return ( ch ) ; } }
rank: 403
score: 98.32512555803571
patch: result = i ; break ;
rank: 404
score: 98.6910888671875
patch: return i + i - 1 ; } }
rank: 404
score: 98.68320041232639
patch: . * * * / * * /
rank: 404
score: 98.67847357855902
patch: return cs . get ( j ) ;
rank: 404
score: 98.65184936523437
patch: if return i ; ; else return i ;
rank: 404
score: 98.60778198242187
patch: result = i ;
rank: 404
score: 98.53962846235795
patch: return i ; ; if i ++ ; break ;
rank: 404
score: 98.50825500488281
patch: return 0 ; } return j ;
rank: 404
score: 98.32472446986607
patch: return length - i ; }
rank: 405
score: 98.748779296875
patch: return i . i ;
rank: 405
score: 98.69100189208984
patch: return - 1 ; } } }
rank: 405
score: 98.68270111083984
patch: return i ; } } catch ;
rank: 405
score: 98.65153672960069
patch: return i ; return i ; / *
rank: 405
score: 98.50773402622768
patch: return i + j ; }
rank: 406
score: 98.69085693359375
patch: return i - i ; } else {
rank: 406
score: 98.68244171142578
patch: return 0 * $NUMBER$ ; } }
rank: 406
score: 98.65093383789062
patch: return 0 ; ; else { return i ;
rank: 406
score: 98.60425482855902
patch: switch ( INDEX _ NOT _ FOUND )
rank: 406
score: 98.5387295809659
patch: return - i ; return i ; return i ;
rank: 406
score: 98.50737762451172
patch: return cs CaMeL Len : i ;
rank: 406
score: 98.32400076729911
patch: return i ( j ) ;
rank: 407
score: 98.74658881293402
patch: return i . get ( $STRING$ ) ;
rank: 407
score: 98.73402709960938
patch: return ( search CaMeL Chars [ j ) ;
rank: 407
score: 98.69078480113636
patch: return i ; } } System . arraycopy ( ;
rank: 407
score: 98.68222045898438
patch: return 0 [ length ++ ] ;
rank: 407
score: 98.65058898925781
patch: = i ; return - i ;
rank: 407
score: 98.59912787543402
patch: switch ( search CaMeL Chars . length )
rank: 407
score: 98.53865966796874
patch: return - 1 ; * / return i ;
rank: 407
score: 98.5067367553711
patch: return ( j + i ) ;
rank: 407
score: 98.32317243303571
patch: return i ; return ; }
rank: 408
score: 98.74608764648437
patch: return i ? INDEX _ NOT _ FOUND ;
rank: 408
score: 98.6904296875
patch: return i ; } } return - i ;
rank: 408
score: 98.65045776367188
patch: if ( i == i ; return i ;
rank: 408
score: 98.59695095486111
patch: return INDEX _ NOT _ FOUND true ;
rank: 408
score: 98.50590515136719
patch: [ j ] = 0 ; }
rank: 408
score: 98.32251848493304
patch: j = i ; break ;
rank: 409
score: 98.74603881835938
patch: return i + 0 + search CaMeL Len ;
rank: 409
score: 98.72849527994792
patch: return ( ( int ) i ) ;
rank: 409
score: 98.69027709960938
patch: return i - ; } ; }
rank: 409
score: 98.68132781982422
patch: return i ; } ; ; }
rank: 409
score: 98.67385525173611
patch: return cs [ char CaMeL At ] ;
rank: 409
score: 98.6498779296875
patch: return i ; ; / * return 1 ;
rank: 409
score: 98.59455023871527
patch: return INDEX _ NOT _ FOUND . ;
rank: 409
score: 98.50304303850446
patch: return this [ j ] ;
rank: 409
score: 98.32013811383929
patch: return ( i ) ; }
rank: 410
score: 98.743603515625
patch: return search CaMeL Chars [ j ] $NUMBER$ ;
rank: 410
score: 98.69019664417614
patch: return i - ; } } } return i ;
rank: 410
score: 98.68131801060268
patch: return 1 ; } } ;
rank: 410
score: 98.67344835069444
patch: return i ( search CaMeL Len ) ;
rank: 410
score: 98.64971313476562
patch: return i ; / * / return i ;
rank: 410
score: 98.53790283203125
patch: return 0 ; return i + 1 ;
rank: 410
score: 98.50289154052734
patch: return i ; ch ++ ; }
rank: 410
score: 98.31919352213542
patch: = i + i ;
rank: 411
score: 98.68938654119319
patch: if ( i <= search CaMeL Len ) continue ;
rank: 411
score: 98.68122863769531
patch: return 0 ; } i -- ;
rank: 411
score: 98.64951578776042
patch: } return i ; if return i ;
rank: 411
score: 98.58658854166667
patch: b return i ; }
rank: 411
score: 98.53736461292614
patch: return i ; ; if return i ; break ;
rank: 411
score: 98.50086975097656
patch: return iterator [ j ] ; }
rank: 412
score: 98.68927680121527
patch: return i ; } } } else {
rank: 412
score: 98.68106842041016
patch: return i * return 1 ; }
rank: 412
score: 98.64921264648437
patch: return i ; return i ; ++ i ;
rank: 412
score: 98.58557739257813
patch: return ( i ;
rank: 412
score: 98.53700086805556
patch: return 1 ; return - - 1 ;
rank: 412
score: 98.315673828125
patch: return i / $NUMBER$ ;
rank: 413
score: 98.7423583984375
patch: return i . get CaMeL Field ( ) ;
rank: 413
score: 98.68906471946023
patch: if ( is CaMeL Empty ( ch ) ; }
rank: 413
score: 98.67997741699219
patch: } else / * * * /
rank: 413
score: 98.64881896972656
patch: = i ; return - $STRING$ ;
rank: 413
score: 98.5845235188802
patch: break ; break ; }
rank: 413
score: 98.53659889914773
patch: return 0 ; return - 1 ; return i ;
rank: 413
score: 98.50041198730469
patch: return cs . length - 0 ;
rank: 413
score: 98.3143539428711
patch: = i ;
rank: 414
score: 98.74216918945312
patch: return i . index CaMeL Of ( ) ;
rank: 414
score: 98.68882921006944
patch: return i ; } ; } else {
rank: 414
score: 98.679931640625
patch: . ; * * * /
rank: 414
score: 98.5823974609375
patch: += INDEX _ NOT _ FOUND ;
rank: 414
score: 98.53515625
patch: return i + 0 ; ;
rank: 414
score: 98.49987030029297
patch: { return i ; } } }
rank: 415
score: 98.74024793836806
patch: return $STRING$ . append ( ch ) ;
rank: 415
score: 98.72022162543402
patch: return i . equals ( ch ) ;
rank: 415
score: 98.67981719970703
patch: . / * * * * /
rank: 415
score: 98.66766357421875
patch: return ( char ) ( i ;
rank: 415
score: 98.64765625
patch: return 0 ; i else if return i ;
rank: 415
score: 98.58055284288194
patch: += INDEX _ NOT _ FOUND ; }
rank: 415
score: 98.53441026475694
patch: return 1 ; ; if return i ;
rank: 415
score: 98.49908447265625
patch: return chars [ i ] ;
rank: 416
score: 98.68858506944444
patch: if ( ; return - 1 ; }
rank: 416
score: 98.67854139539931
patch: . return 0 ; } } else {
rank: 416
score: 98.64736938476562
patch: return - 1 ; ; if return i ;
rank: 416
score: 98.57884385850694
patch: return cs . search CaMeL Len ; }
rank: 416
score: 98.53440551757812
patch: return 0 ; ; return ; = i ;
rank: 417
score: 98.71962280273438
patch: return ( i + cs CaMeL Len ) ;
rank: 417
score: 98.68839808872768
patch: if ( i > 0 )
rank: 417
score: 98.67845153808594
patch: / * * * return i ;
rank: 417
score: 98.57577853732639
patch: return INDEX _ NOT _ FOUND + ;
rank: 417
score: 98.53389485677083
patch: return 1 ; return i + i ;
rank: 417
score: 98.49882507324219
patch: [ i ] = ch ; }
rank: 417
score: 98.31099155970982
patch: return j - i ; }
rank: 418
score: 98.71911010742187
patch: return value . size ( ) ( ) ;
rank: 418
score: 98.687841796875
patch: return i - i + 1 ; } }
rank: 418
score: 98.67822265625
patch: . * / } return i ;
rank: 418
score: 98.64732530381944
patch: return i ; ; } if i ;
rank: 418
score: 98.57566324869792
patch: return INDEX _ NOT _ FOUND : ;
rank: 418
score: 98.53354317801339
patch: return i ; return false ;
rank: 418
score: 98.49879455566406
patch: return cs . length - 1 ;
rank: 418
score: 98.31019810267857
patch: return 0 i - 1 ;
rank: 419
score: 98.71633911132812
patch: return i . [ j ] ;
rank: 419
score: 98.68726695667614
patch: return Character . to CaMeL Lower CaMeL Case ( ;
rank: 419
score: 98.67627631293402
patch: . / * * * / * /
rank: 419
score: 98.66343180338542
patch: return i . get ( ch ) ;
rank: 419
score: 98.64695231119792
patch: return 0 ; } return - i ;
rank: 419
score: 98.53312174479167
patch: if i = 0 ; return i ;
rank: 419
score: 98.49838256835938
patch: return - [ i ] ; }
rank: 419
score: 98.31019810267857
patch: scanner . return - 1 ;
rank: 420
score: 98.7329345703125
patch: return i . size ( ) * 1 ;
rank: 420
score: 98.68650817871094
patch: return i - ; } else {
rank: 420
score: 98.675537109375
patch: * * * * * /
rank: 420
score: 98.66079711914062
patch: return new String ( i ) ;
rank: 420
score: 98.53202989366319
patch: return i ; ; ; = i ;
rank: 420
score: 98.49772644042969
patch: return i ? 0 : 1 ;
rank: 420
score: 98.30958775111607
patch: if ( i != i ;
rank: 421
score: 98.73265380859375
patch: return i + ch . length * 1 ;
rank: 421
score: 98.68593528053977
patch: return i - i ; } } return i ;
rank: 421
score: 98.67528279622395
patch: return i * 1 ;
rank: 421
score: 98.64514923095703
patch: return i ; ; break ; }
rank: 421
score: 98.49668884277344
patch: return ch ;
rank: 421
score: 98.30905151367188
patch: return ++ i ;
rank: 422
score: 98.71335177951389
patch: return ( ( char ) i ) ;
rank: 422
score: 98.67520141601562
patch: return 1 ; } catch ; }
rank: 422
score: 98.65878634982639
patch: return search CaMeL Chars ( j ) ;
rank: 422
score: 98.64502716064453
patch: = - 1 ; return i ;
rank: 422
score: 98.53184291294643
patch: return size ; return i ;
rank: 422
score: 98.49640655517578
patch: return false ; j ++ ; }
rank: 422
score: 98.30844552176339
patch: [ i ] -- ; }
rank: 423
score: 98.72317165798611
patch: return i . get [ j ] ;
rank: 423
score: 98.68546549479167
patch: return i ; ; } break ; }
rank: 423
score: 98.67472330729167
patch: return $NUMBER$ ; } } return 1 ;
rank: 423
score: 98.65741644965277
patch: return Integer . length ( i ) ;
rank: 423
score: 98.64459228515625
patch: return i ; return i ; return $STRING$ ;
rank: 423
score: 98.5313720703125
patch: return i ; ; ; if ; return i ;
rank: 423
score: 98.49592590332031
patch: return cs CaMeL Len / i ;
rank: 423
score: 98.30585588727679
patch: buffer = i + 1 ;
rank: 424
score: 98.71119995117188
patch: search CaMeL Chars [ j ] = null ;
rank: 424
score: 98.68519897460938
patch: throw new Illegal CaMeL Argument CaMeL Exception ( ;
rank: 424
score: 98.67457580566406
patch: * * * * return i ;
rank: 424
score: 98.65672956194196
patch: return ( char ) $STRING$ ;
rank: 424
score: 98.53117540147569
patch: return i ; if i - ++ ;
rank: 424
score: 98.4930419921875
patch: return true ; j ++ ; }
rank: 424
score: 98.30514962332589
patch: return this ; break ; }
rank: 425
score: 98.71713256835938
patch: continue INDEX _ NOT _ FOUND ;
rank: 425
score: 98.68519287109375
patch: return ; } else { return i ; }
rank: 425
score: 98.67439270019531
patch: return 0 + 1 ; } }
rank: 425
score: 98.64241790771484
patch: return i ; ; break ; ;
rank: 425
score: 98.56856282552083
patch: System . arraycopy ( search CaMeL Chars ,
rank: 425
score: 98.53101942274306
patch: return i ; ; = - 1 ;
rank: 425
score: 98.49237932477679
patch: return length [ j ] ;
rank: 425
score: 98.30427769252232
patch: p = i + 1 ;
rank: 426
score: 98.68326144748264
patch: if ( j < search CaMeL Len )
rank: 426
score: 98.53055419921876
patch: return 0 ; } return i + i ;
rank: 426
score: 98.49214172363281
patch: return length [ i ] ; }
rank: 426
score: 98.30355398995536
patch: final char i = i ;
rank: 427
score: 98.67411804199219
patch: return 0 ; } else break ;
rank: 427
score: 98.53037719726562
patch: return - i ; return i ; break ;
rank: 427
score: 98.49195098876953
patch: return list [ i ] ; }
rank: 427
score: 98.30291748046875
patch: char return i - 1 ;
rank: 428
score: 98.68294525146484
patch: return - 1 ; ; } }
rank: 428
score: 98.65397644042969
patch: throw new char [ 0 ] ;
rank: 428
score: 98.5571060180664
patch: if ( ch == ch ) {
rank: 428
score: 98.52979736328125
patch: return - $NUMBER$ ;
rank: 428
score: 98.30264718191964
patch: ret = i + 1 ;
rank: 429
score: 98.6828125
patch: return i + 1 ; } } return ;
rank: 429
score: 98.67327202690973
patch: return i - 0 ; } else {
rank: 429
score: 98.55552673339844
patch: return search CaMeL Len ; break ;
rank: 429
score: 98.52922712053571
patch: return 0 ; return null ;
rank: 429
score: 98.30223737444196
patch: return i & - 1 ;
rank: 430
score: 98.7032958984375
patch: = search CaMeL Chars [ j ] ; }
rank: 430
score: 98.67325168185764
patch: return i * i ; } else {
rank: 430
score: 98.65314398871527
patch: return search CaMeL Chars [ j ) ;
rank: 430
score: 98.64018419053819
patch: return i ; return i ; int *
rank: 430
score: 98.55422634548611
patch: return INDEX _ NOT _ FOUND ; else
rank: 430
score: 98.52888319227431
patch: return i ; return i - 0 ;
rank: 430
score: 98.4897232055664
patch: return - 0 ; } break ;
rank: 431
score: 98.68191867404514
patch: return i ; } ; } * /
rank: 431
score: 98.67324829101562
patch: . = 0 ; return i ;
rank: 431
score: 98.65264892578125
patch: return get CaMeL Name ( ch ) ;
rank: 431
score: 98.63922991071429
patch: = i ; return 0 ;
rank: 431
score: 98.52868041992187
patch: return - i ; * / return i ;
rank: 431
score: 98.48942565917969
patch: return cs CaMeL Len 1 ; }
rank: 431
score: 98.29957798549107
patch: if ; return 0 ; }
rank: 432
score: 98.70335388183594
patch: return $STRING$ . trim ( ) ;
rank: 432
score: 98.68162027994792
patch: while ( j < search CaMeL Len )
rank: 432
score: 98.67322455512152
patch: return i [ length ++ ++ ] ;
rank: 432
score: 98.65125868055556
patch: return ( char ) i + 0 ;
rank: 432
score: 98.63916015625
patch: return i ; i else return 0 ;
rank: 432
score: 98.52841186523438
patch: return i ; ; if i * ; return i ;
rank: 432
score: 98.29912458147321
patch: return length + 1 ; }
rank: 433
score: 98.69766235351562
patch: return ch . size ( ) ;
rank: 433
score: 98.6812744140625
patch: if ( i > search CaMeL Len ;
rank: 433
score: 98.67316436767578
patch: . return i ; } * /
rank: 433
score: 98.65061732700893
patch: return i ( cs ) ;
rank: 433
score: 98.63824462890625
patch: int i = 0 ; return i ;
rank: 433
score: 98.52837524414062
patch: return ( i != i ; return i ;
rank: 433
score: 98.48920440673828
patch: character [ j ] return i ;
rank: 433
score: 98.29891531808036
patch: [ i ] break ; }
rank: 434
score: 98.70097351074219
patch: return i - cs . length ;
rank: 434
score: 98.68096923828125
patch: if ( i <= search CaMeL Len ; }
rank: 434
score: 98.67314995659723
patch: return i ; return 0 ; } }
rank: 434
score: 98.65049913194444
patch: return get CaMeL Length ( i ) ;
rank: 434
score: 98.54820251464844
patch: return i ; } } } else
rank: 434
score: 98.528369140625
patch: return return i ; break ; return i ;
rank: 434
score: 98.29807826450893
patch: = $STRING$ ; break ; }
rank: 435
score: 98.69608306884766
patch: return ( i + $NUMBER$ ) ;
rank: 435
score: 98.6807861328125
patch: return i ; } System . arraycopy ( ; }
rank: 435
score: 98.67282443576389
patch: return i ; } else = i ;
rank: 435
score: 98.63777465820313
patch: return return i ; } if return i ;
rank: 435
score: 98.54820251464844
patch: return cs . [ i ] ;
rank: 435
score: 98.48881530761719
patch: return - - - 1 ; }
rank: 436
score: 98.67939588758681
patch: return i ; ; break ; } }
rank: 436
score: 98.63774108886719
patch: ( return i ; return i ;
rank: 436
score: 98.5450439453125
patch: return int [ ] search CaMeL Len ;
rank: 436
score: 98.52672661675348
patch: return i ; ; if i * /
rank: 436
score: 98.48880767822266
patch: return i ; } ++ j ;
rank: 436
score: 98.29707554408482
patch: return i ; count -- ;
rank: 437
score: 98.69056532118056
patch: return name . append ( ch ) ;
rank: 437
score: 98.67911529541016
patch: return i - j ; } }
rank: 437
score: 98.67210388183594
patch: return i ; } if ; ;
rank: 437
score: 98.63752746582031
patch: throw new Exception ( $STRING$ ) ;
rank: 437
score: 98.54169379340277
patch: if ( INDEX _ NOT _ FOUND )
rank: 437
score: 98.5264180501302
patch: i i return i ;
rank: 437
score: 98.48856026785714
patch: return char [ j ] ;
rank: 437
score: 98.29588099888393
patch: return ch ; break ; }
rank: 438
score: 98.67189025878906
patch: return i * 0 + $NUMBER$ ;
rank: 438
score: 98.52557927911931
patch: return 0 ; ; = i ; return i ;
rank: 438
score: 98.29326520647321
patch: value return i + 1 ;
rank: 439
score: 98.6893081665039
patch: return i + ch + $STRING$ ;
rank: 439
score: 98.67854817708333
patch: return i ; ; } } * /
rank: 439
score: 98.67171223958333
patch: return i ; return i ; } else
rank: 439
score: 98.64302571614583
patch: return ( $STRING$ . length ( ) ;
rank: 439
score: 98.539501953125
patch: b return i ;
rank: 439
score: 98.525439453125
patch: return - 1 ; break ; return 1 ;
rank: 439
score: 98.48705182756696
patch: character return 0 ; } }
rank: 439
score: 98.29244995117188
patch: return length - i ;
rank: 440
score: 98.68430582682292
patch: return value . size ( ) ; }
rank: 440
score: 98.67841131036931
patch: if ( i <= search CaMeL Chars . length ;
rank: 440
score: 98.67159695095486
patch: . / * * * * * /
rank: 440
score: 98.64181857638889
patch: return ( search CaMeL Chars [ j ]
rank: 440
score: 98.52536010742188
patch: return i + i ; ; return i ;
rank: 440
score: 98.48622131347656
patch: return ( char ) - 0 ;
rank: 441
score: 98.67127482096355
patch: return i / i ;
rank: 441
score: 98.6358642578125
patch: return i ; char i = i ;
rank: 441
score: 98.4857406616211
patch: return is [ j ] ; }
rank: 441
score: 98.29203578404018
patch: &= i ; break ; }
rank: 442
score: 98.68334089006696
patch: return cs . return i ;
rank: 442
score: 98.6708984375
patch: . * * * * * ; /
rank: 442
score: 98.63525390625
patch: return i ; ; else { return 1 ;
rank: 442
score: 98.48479461669922
patch: ++ ; return i ; } }
rank: 442
score: 98.29168701171875
patch: if ( j >= i )
rank: 443
score: 98.67723999023437
patch: if ( i < ; break ; } }
rank: 443
score: 98.66932896205357
patch: { return 1 ; } }
rank: 443
score: 98.64068603515625
patch: if ( search CaMeL Chars [ j ]
rank: 443
score: 98.63435194227431
patch: if return 1 ; return - 1 ;
rank: 443
score: 98.52419704861111
patch: return 0 ; ; return i ; else
rank: 443
score: 98.48446219308036
patch: character { return i ; }
rank: 443
score: 98.29083251953125
patch: if ( ; break ;
rank: 444
score: 98.67692427201705
patch: return i - 1 ; } } return 0 ;
rank: 444
score: 98.66923522949219
patch: return 0 * i ; } else
rank: 444
score: 98.64019775390625
patch: return get CaMeL Chars [ i ] ;
rank: 444
score: 98.53050401475694
patch: return Array CaMeL Utils . length ; }
rank: 444
score: 98.52352566189236
patch: return 0 ; return i - i ;
rank: 444
score: 98.48295593261719
patch: return 1 ; } break ; }
rank: 444
score: 98.29073660714286
patch: if ( count < i )
rank: 445
score: 98.68128797743056
patch: return $STRING$ . add ( ch ) ;
rank: 445
score: 98.676025390625
patch: if ( i == search CaMeL Len ) continue ;
rank: 445
score: 98.67302788628473
patch: return cs . add ( ch ) ;
rank: 445
score: 98.63947211371527
patch: return i . get ( i ) ;
rank: 445
score: 98.63396538628473
patch: return 0 ; i else if i ;
rank: 445
score: 98.53006998697917
patch: return ( ) ; }
rank: 445
score: 98.52335205078126
patch: return i ; ; if ; return 1 ;
rank: 445
score: 98.482666015625
patch: return ( ch ) ;
rank: 445
score: 98.28943743024554
patch: if i ++ ; break ;
rank: 446
score: 98.67539978027344
patch: return i ; ; } * /
rank: 446
score: 98.63934326171875
patch: return cs . next ( ) ;
rank: 446
score: 98.63350423177083
patch: return i ; } for return i ;
rank: 446
score: 98.52323404947917
patch: return ( i ; : return i ;
rank: 446
score: 98.48213704427083
patch: return - true ; }
rank: 446
score: 98.28932407924107
patch: if ( j != i )
rank: 447
score: 98.67533111572266
patch: return i + i ; ; }
rank: 447
score: 98.67034149169922
patch: return name . size ( ) ;
rank: 447
score: 98.66832139756944
patch: . / * / return i ; }
rank: 447
score: 98.52292702414773
patch: return i ; if i / ; return i ;
rank: 447
score: 98.28891427176339
patch: [ i ] ++ ; }
rank: 448
score: 98.67494895241477
patch: return i - 1 ; } } } return ;
rank: 448
score: 98.66817474365234
patch: . * * * return 1 ;
rank: 448
score: 98.63797760009766
patch: return i . start ( ) ;
rank: 448
score: 98.63309936523437
patch: return i ; } / * return i ;
rank: 448
score: 98.52292306082589
patch: return - ; return i ;
rank: 448
score: 98.48161969866071
patch: return byte [ j ] ;
rank: 448
score: 98.28863525390625
patch: return super . i ;
rank: 449
score: 98.66776529947917
patch: return i ; } / / * /
rank: 449
score: 98.63308376736111
patch: return i ; } return * i ;
rank: 449
score: 98.52269287109375
patch: return i ; ; if i ++ ; }
rank: 449
score: 98.48126983642578
patch: [ j ] = $STRING$ ; }
rank: 449
score: 98.28843470982143
patch: return - 1 ; continue ;
rank: 450
score: 98.6676025390625
patch: return $NUMBER$ * i ; } }
rank: 450
score: 98.66634114583333
patch: return new Char CaMeL Sequence ( ) ;
rank: 450
score: 98.63186645507812
patch: return i ; try = i ;
rank: 451
score: 98.67447916666667
patch: return i + i + ; } }
rank: 451
score: 98.66743469238281
patch: return i ; } * * ;
rank: 451
score: 98.66566975911458
patch: throw search CaMeL Chars [ j ] ;
rank: 451
score: 98.63118286132813
patch: return i ; ; ; { return i ;
rank: 451
score: 98.62870788574219
patch: return i + [ j ] ;
rank: 451
score: 98.52482604980469
patch: return cs . length - j ;
rank: 451
score: 98.52192826704545
patch: return 0 ; return i ; } return i ;
rank: 451
score: 98.28778076171875
patch: if i ++ ; }
rank: 452
score: 98.67350938585069
patch: if ( i < ; break ; }
rank: 452
score: 98.67056613498264
patch: return count . append ( ch ) ;
rank: 452
score: 98.63050537109375
patch: return i i ;
rank: 452
score: 98.62652587890625
patch: return search CaMeL Chars [ j
rank: 452
score: 98.5218505859375
patch: return i ; return i ; / - 1 ;
rank: 452
score: 98.28758748372395
patch: return ~ 1 ; }
rank: 453
score: 98.67337036132812
patch: return i ; } * / ;
rank: 453
score: 98.66693878173828
patch: } if ( i == i ;
rank: 453
score: 98.63050537109375
patch: return 0 ; i else { return i ;
rank: 453
score: 98.52153184678819
patch: return i ; ; = i ; else
rank: 453
score: 98.28699602399554
patch: * / return j ; }
rank: 454
score: 98.67304992675781
patch: = $STRING$ ; break ; } }
rank: 454
score: 98.66897583007812
patch: return new int [ ] { 0
rank: 454
score: 98.66659206814236
patch: return i [ i ] ; } }
rank: 454
score: 98.66242980957031
patch: return new int [ count ] ;
rank: 454
score: 98.52129255022321
patch: return $NUMBER$ ; return 1 ;
rank: 454
score: 98.47848510742188
patch: return ( char ) 1 ; }
rank: 454
score: 98.28614153180804
patch: r = i + 1 ;
rank: 455
score: 98.66617160373264
patch: return 1 ; } } return $NUMBER$ ;
rank: 455
score: 98.61428397042411
patch: return ( char ) 0 ;
rank: 455
score: 98.52067735460069
patch: return i ; } return i ; else
rank: 455
score: 98.51678466796875
patch: return cs . i ; break ;
rank: 455
score: 98.28440638950893
patch: [ j ] -- ; }
rank: 456
score: 98.67291814630681
patch: return i ; } else return - 1 ; }
rank: 456
score: 98.66580539279514
patch: . * ; * * * * /
rank: 456
score: 98.62981567382812
patch: return i ; try { if return i ;
rank: 456
score: 98.6133041381836
patch: return get CaMeL Length ( ) ;
rank: 456
score: 98.5192138671875
patch: return - i ; / ; return i ;
rank: 456
score: 98.47585042317708
patch: return - false ; }
rank: 456
score: 98.28335135323661
patch: return - i - i ;
rank: 457
score: 98.6728515625
patch: if ( i > $NUMBER$ ) return i ; }
rank: 457
score: 98.66781955295139
patch: return ( Char CaMeL Sequence ) ch ;
rank: 457
score: 98.66580539279514
patch: return i ; } ; return 1 ;
rank: 457
score: 98.62966918945312
patch: return i ; return - next ;
rank: 457
score: 98.61300998263889
patch: return i ; } } return $STRING$ ;
rank: 457
score: 98.51898193359375
patch: return 0 ; } return i ; break ;
rank: 457
score: 98.51175944010417
patch: break ; } break ;
rank: 457
score: 98.47324916294643
patch: return substring [ j ] ;
rank: 457
score: 98.28246198381696
patch: result = i + 1 ;
rank: 458
score: 98.67263793945312
patch: return i | i ; } }
rank: 458
score: 98.65138753255208
patch: return ( i . trim ( ) ;
rank: 458
score: 98.62955474853516
patch: return i ; return value ; ;
rank: 458
score: 98.5185546875
patch: return - ; = i ;
rank: 458
score: 98.28236897786458
patch: += i + 1 ;
rank: 459
score: 98.67252197265626
patch: return i ; ; } return i ; }
rank: 459
score: 98.66753387451172
patch: return $STRING$ + ch + $STRING$ ;
rank: 459
score: 98.66553497314453
patch: return i ; } } else ;
rank: 459
score: 98.65107727050781
patch: return value . trim ( ) ;
rank: 459
score: 98.6290283203125
patch: return i ; } else if return 1 ;
rank: 459
score: 98.4703125
patch: return size ; }
rank: 459
score: 98.28141566685268
patch: b = i + 1 ;
rank: 460
score: 98.66717529296875
patch: return i + ( 0 ) ;
rank: 460
score: 98.62889862060547
patch: return return i ; if i ;
rank: 460
score: 98.60589599609375
patch: return i . read ( ) ;
rank: 460
score: 98.51824273003473
patch: return ( 1 ; : return i ;
rank: 460
score: 98.50707329644098
patch: new [ INDEX _ NOT _ FOUND ;
rank: 460
score: 98.46992710658482
patch: return is [ j ] ;
rank: 460
score: 98.28070940290179
patch: pos = i ; break ;
rank: 461
score: 98.67136637369792
patch: byte ch = ; break ; } }
rank: 461
score: 98.66503143310547
patch: return i ; } return count ;
rank: 461
score: 98.66216362847223
patch: return ch . append ( ch ) ;
rank: 461
score: 98.62847900390625
patch: return 0 ; return - 1 ; ;
rank: 461
score: 98.60124376085069
patch: return new char [ - 1 ] ;
rank: 461
score: 98.51805962456598
patch: return i ; if i / ++ ;
rank: 461
score: 98.46865408761161
patch: return left [ j ] ;
rank: 462
score: 98.67129855685764
patch: return - i - 1 ; } }
rank: 462
score: 98.66500854492188
patch: return 0 * 1 ; } }
rank: 462
score: 98.62825520833333
patch: return i ; ; catch return i ;
rank: 462
score: 98.59965515136719
patch: if ( search CaMeL Chars [ j
rank: 462
score: 98.51800537109375
patch: return 0 ; ; ; if i ++ ;
rank: 462
score: 98.5045166015625
patch: return search CaMeL Len ; break ; }
rank: 462
score: 98.46307373046875
patch: ++ ; return i ; }
rank: 462
score: 98.27921549479167
patch: return j - i ;
rank: 463
score: 98.67118326822917
patch: return i ; ++ i ; } }
rank: 463
score: 98.664306640625
patch: return 0 i ; } return i ;
rank: 463
score: 98.64930725097656
patch: throw INDEX _ NOT _ FOUND ;
rank: 463
score: 98.62825317382813
patch: return i ; ; if return return i ;
rank: 463
score: 98.27908761160714
patch: return i ; count ++ ;
rank: 464
score: 98.6708984375
patch: return i ] ; }
rank: 464
score: 98.66397094726562
patch: return 0 - 0 ; break ;
rank: 464
score: 98.65494113498264
patch: return i . append ( $STRING$ ) ;
rank: 464
score: 98.62808566623264
patch: return i ; if i < i ;
rank: 464
score: 98.51729736328124
patch: return 0 ; ; / / return i ;
rank: 464
score: 98.50335693359375
patch: result [ j ] return i ;
rank: 464
score: 98.27882603236607
patch: if ( i >= i ;
rank: 465
score: 98.66779920789931
patch: return i + i ; } } }
rank: 465
score: 98.66326226128473
patch: return 0 i * i ; } }
rank: 465
score: 98.65482330322266
patch: return i . length - 1 ;
rank: 465
score: 98.51655717329545
patch: return - i ; break ; if i ++ ;
rank: 465
score: 98.50283377511161
patch: break ; } return i ;
rank: 465
score: 98.45891462053571
patch: return i - - 0 ;
rank: 465
score: 98.27831013997395
patch: if i += i ;
rank: 466
score: 98.66778009588069
patch: if ( search CaMeL Chars [ i ] == ;
rank: 466
score: 98.66326141357422
patch: if ; * * * * /
rank: 466
score: 98.62739562988281
patch: return i ; i else break ;
rank: 466
score: 98.50185818142361
patch: return search CaMeL Chars [ j ; }
rank: 466
score: 98.45754568917411
patch: return i + true ; }
rank: 466
score: 98.27781459263393
patch: t = i ; break ;
rank: 467
score: 98.66318088107639
patch: return i ; } catch ; * /
rank: 467
score: 98.6270263671875
patch: for return i ;
rank: 467
score: 98.5144375887784
patch: return i ; return i ; ; return i ;
rank: 467
score: 98.45682198660714
patch: return - - - 0 ;
rank: 467
score: 98.27779715401786
patch: break ; return i ; }
rank: 468
score: 98.6675137606534
patch: if ( i == i ) return i ; }
rank: 468
score: 98.65007781982422
patch: return $STRING$ + ch + ch ;
rank: 468
score: 98.6434097290039
patch: return ch . length ( ) ;
rank: 468
score: 98.59558868408203
patch: return new char [ ] { ch
rank: 468
score: 98.51434326171875
patch: return 0 ; return - 1 ; }
rank: 468
score: 98.49578179253473
patch: throw new Null CaMeL Pointer CaMeL Exception (
rank: 468
score: 98.27637590680804
patch: [ i ] return 0 ;
rank: 469
score: 98.66737365722656
patch: return i + $STRING$ ; } }
rank: 469
score: 98.66169738769531
patch: return i i ; } else {
rank: 469
score: 98.64336480034723
patch: return Integer . equals ( ch ) ;
rank: 469
score: 98.62668185763889
patch: return i ; return next - i ;
rank: 469
score: 98.514208984375
patch: return 0 ; ; int i = i ;
rank: 469
score: 98.45514787946429
patch: search CaMeL Len return i ;
rank: 469
score: 98.27409144810268
patch: ret = 0 ; break ;
rank: 470
score: 98.66728210449219
patch: char ; return i ; } }
rank: 470
score: 98.66166687011719
patch: return i ; } else { ;
rank: 470
score: 98.62642996651786
patch: try { return i ; }
rank: 470
score: 98.51390491832386
patch: return i ; return i ; if return i ;
rank: 470
score: 98.4949951171875
patch: result += search CaMeL Len ; }
rank: 470
score: 98.45475551060268
patch: return i + false ; }
rank: 470
score: 98.27388218470982
patch: if ( ch != $STRING$ )
rank: 471
score: 98.62615966796875
patch: if new return i ; return i ;
rank: 471
score: 98.51366077769886
patch: return i ; if i * ; return i ;
rank: 471
score: 98.4941650390625
patch: true return i ;
rank: 471
score: 98.45273844401042
patch: return i : i ;
rank: 471
score: 98.27371651785714
patch: return i - 1 ) ;
rank: 472
score: 98.6663330078125
patch: return 0 ; } } } return i ;
rank: 472
score: 98.66061062282986
patch: return 0 ; } else return $NUMBER$ ;
rank: 472
score: 98.6451644897461
patch: return i . count ( ) ;
rank: 472
score: 98.62500762939453
patch: return i ; ; * * ;
rank: 472
score: 98.58649553571429
patch: return ( short ) i ;
rank: 472
score: 98.51335991753473
patch: return i ; return i ; / ;
rank: 472
score: 98.49235534667969
patch: return cs . search CaMeL Len ;
rank: 472
score: 98.45055280412946
patch: return 1 ; i ++ ;
rank: 473
score: 98.66593794389205
patch: if ( i < i ) return i ; }
rank: 473
score: 98.62490505642361
patch: return i ; i return - 1 ;
rank: 473
score: 98.5830078125
patch: return new int search CaMeL Len ;
rank: 473
score: 98.51334228515626
patch: return i ; return - 1 + i ;
rank: 473
score: 98.27322823660714
patch: return ( i + 1 ;
rank: 474
score: 98.6656161221591
patch: return i + i ; } } return i ;
rank: 474
score: 98.66036224365234
patch: . return 1 ; return 1 ;
rank: 474
score: 98.64165581597223
patch: return ( Char CaMeL Sequence ) i ;
rank: 474
score: 98.62459564208984
patch: if i int i = i ;
rank: 474
score: 98.5126065340909
patch: return i ; if i ++ ; return i ;
rank: 474
score: 98.44934953962054
patch: character * / return i ;
rank: 474
score: 98.27233014787946
patch: name = i + 1 ;
rank: 475
score: 98.66557173295455
patch: if ( i < search CaMeL Len - 1 )
rank: 475
score: 98.6602783203125
patch: return 0 ; } return length ;
rank: 475
score: 98.63976372612848
patch: return i . get ( 0 ) ;
rank: 475
score: 98.62459106445313
patch: return i ; i else return - 1 ;
rank: 475
score: 98.58246612548828
patch: return ( char ) i 1 ;
rank: 475
score: 98.51245727539063
patch: return i ; while return i ; break ;
rank: 475
score: 98.49055989583333
patch: break ; } } }
rank: 475
score: 98.27191162109375
patch: result = 0 ; break ;
rank: 476
score: 98.66486150568181
patch: return index CaMeL Of ( i ) ; } }
rank: 476
score: 98.6602554321289
patch: return 1 + i ; } }
rank: 476
score: 98.63319905598958
patch: return byte CaMeL Value ( ch ) ;
rank: 476
score: 98.6241455078125
patch: return i ; ; i * * /
rank: 476
score: 98.51219685872395
patch: return ; return 0 ;
rank: 476
score: 98.49029541015625
patch: break + 1 ; }
rank: 476
score: 98.44471086774554
patch: return - - - 1 ;
rank: 476
score: 98.27158028738839
patch: if ( count > 1 )
rank: 477
score: 98.63269721137152
patch: return int CaMeL Value ( ch ) ;
rank: 477
score: 98.62387424045139
patch: return i ; return 0 ; break ;
rank: 477
score: 98.5770034790039
patch: return cs CaMeL Len - 1 ;
rank: 477
score: 98.444091796875
patch: return this ; }
rank: 478
score: 98.66414018110795
patch: if ( i >= search CaMeL Len ) return ;
rank: 478
score: 98.65966033935547
patch: return ; * * * * /
rank: 478
score: 98.6326675415039
patch: return search CaMeL Chars [ } ;
rank: 478
score: 98.62373860677083
patch: int i = i ; return 0 ;
rank: 478
score: 98.51151123046876
patch: return 0 ; return - i ; break ;
rank: 478
score: 98.48999786376953
patch: synchronized ( search CaMeL Chars ) {
rank: 478
score: 98.44129180908203
patch: return length ;
rank: 479
score: 98.66379801432292
patch: return i ; break ; } * /
rank: 479
score: 98.63249969482422
patch: return new boolean [ 0 ] ;
rank: 479
score: 98.62356567382812
patch: return i ; / ; { return i ;
rank: 479
score: 98.51109730113636
patch: return i ; ; if i : return i ;
rank: 479
score: 98.48311360677083
patch: return ( i + 1 ) ; }
rank: 480
score: 98.6637954711914
patch: if ( ; ; break ; }
rank: 480
score: 98.6594950358073
patch: return 0 - $NUMBER$ ;
rank: 480
score: 98.62939453125
patch: return value . equals ( ch ) ;
rank: 480
score: 98.62179226345486
patch: return i ; ; else = i ;
rank: 480
score: 98.57523345947266
patch: return ( 0 - ch ) ;
rank: 480
score: 98.51099853515625
patch: return i ; ; = ; = i ;
rank: 480
score: 98.44115339006696
patch: [ j ] return 0 ;
rank: 480
score: 98.26902553013393
patch: if i -- ; break ;
rank: 481
score: 98.6636962890625
patch: = i + 1 ; break ; }
rank: 481
score: 98.6594009399414
patch: return i [ i ++ ] ;
rank: 481
score: 98.62116834852431
patch: return i ; } return i ; ;
rank: 481
score: 98.57460239955357
patch: return ( long ) i ;
rank: 481
score: 98.50992257254464
patch: if return i ; break ;
rank: 481
score: 98.44048200334821
patch: return ++ i ; } }
rank: 481
score: 98.26876395089286
patch: return null ; break ; }
rank: 482
score: 98.66356312144886
patch: return i ; } else { return - ; }
rank: 482
score: 98.65910508897569
patch: . * * ; return i ; }
rank: 482
score: 98.62114800347223
patch: return i ; i else * i ;
rank: 482
score: 98.57408905029297
patch: return ( char ) return i ;
rank: 482
score: 98.50989990234375
patch: return i ; return i ; = i ;
rank: 482
score: 98.48148600260417
patch: if ( search CaMeL Len >= 0 )
rank: 482
score: 98.43834577287946
patch: return - true ; } }
rank: 482
score: 98.26863316127232
patch: return ~ - 1 ; }
rank: 483
score: 98.663232421875
patch: return i - search CaMeL Len ; } }
rank: 483
score: 98.62029351128473
patch: try { return i ; return i ;
rank: 483
score: 98.57276916503906
patch: return get CaMeL Type ( ) ;
rank: 483
score: 98.509375
patch: return - i ; if ; return i ;
rank: 483
score: 98.47849527994792
patch: return INDEX _ NOT _ FOUND + }
rank: 483
score: 98.26710728236607
patch: . return - 1 ; }
rank: 484
score: 98.66227722167969
patch: return i ; } } * ;
rank: 484
score: 98.65887451171875
patch: return i [ 0 ] ; } ;
rank: 484
score: 98.62029351128473
patch: return i ; while return - i ;
rank: 484
score: 98.61834716796875
patch: return ch . trim ( ) ;
rank: 484
score: 98.50841175426136
patch: return i ; if return i ; return i ;
rank: 484
score: 98.43587820870536
patch: return cs CaMeL Len 1 ;
rank: 484
score: 98.26597377232143
patch: if ( i == $STRING$ )
rank: 485
score: 98.66194291548295
patch: if ( i <= search CaMeL Len ) return ;
rank: 485
score: 98.65818786621094
patch: return 0 - 0 ; } else
rank: 485
score: 98.61983642578124
patch: int i = i ; while return i ;
rank: 485
score: 98.61790466308594
patch: return i ? 0 : j ;
rank: 485
score: 98.56620279947917
patch: return i ( ) ;
rank: 485
score: 98.507568359375
patch: return i + 0 ; ; return i ;
rank: 485
score: 98.47689819335938
patch: name return i ; }
rank: 485
score: 98.43569510323661
patch: return Math . length ; }
rank: 486
score: 98.66116943359376
patch: if ( is CaMeL Empty ( i ) )
rank: 486
score: 98.6581802368164
patch: . * * * * * ;
rank: 486
score: 98.61983235677083
patch: return i i ; if return i ;
rank: 486
score: 98.47355821397569
patch: return search CaMeL Len ; } } }
rank: 486
score: 98.43382917131696
patch: return iterator [ j ] ;
rank: 487
score: 98.66060014204545
patch: if ( i >= Character . MAX _ VALUE )
rank: 487
score: 98.65706961495536
patch: return i i * i ;
rank: 487
score: 98.61929757254464
patch: return i ; for i {
rank: 487
score: 98.61560821533203
patch: return 0 + search CaMeL Len ;
rank: 487
score: 98.5064453125
patch: return i ; return i ; throw i ;
rank: 487
score: 98.47262912326389
patch: return cs . i ; break ; }
rank: 487
score: 98.43362426757812
patch: return size ; } }
rank: 487
score: 98.26325334821429
patch: return ch + 1 ; }
rank: 488
score: 98.66060014204545
patch: return i ; } } else return - 1 ;
rank: 488
score: 98.65630340576172
patch: . * * ; return i ;
rank: 488
score: 98.61885375976563
patch: if i ; return i ; return i ;
rank: 488
score: 98.50560302734375
patch: return i ; return i + - 1 ;
rank: 488
score: 98.47220865885417
patch: switch ( j ) { case 1 :
rank: 488
score: 98.43194580078125
patch: return false ; } break ;
rank: 488
score: 98.26261683872768
patch: return - 1 + 1 ;
rank: 489
score: 98.66045464409723
patch: if ( ; else return i ; }
rank: 489
score: 98.65615844726562
patch: . = 0 ; return 1 ;
rank: 489
score: 98.61858258928571
patch: try { return i ; ;
rank: 489
score: 98.61836242675781
patch: return ( ( char ) i ;
rank: 489
score: 98.61418999565973
patch: return search CaMeL Chars [ start ] ;
rank: 489
score: 98.50540771484376
patch: return i ; ; if i ++ ; else
rank: 489
score: 98.47182210286458
patch: switch ( ch ) { case 1 :
rank: 489
score: 98.43183244977679
patch: return - ++ j ; }
rank: 490
score: 98.66033172607422
patch: return Character . MIN _ VALUE ;
rank: 490
score: 98.65599822998047
patch: return i - 0 + i ;
rank: 490
score: 98.61820678710937
patch: return i ; } if return - 1 ;
rank: 490
score: 98.50522682883523
patch: return 0 ; return i ; if i ++ ;
rank: 490
score: 98.26148332868304
patch: if ( ch != null )
rank: 491
score: 98.65974564985795
patch: return i ; break ; } } } return ;
rank: 491
score: 98.65567016601562
patch: return 0 [ i ++ ] ;
rank: 491
score: 98.61809624565973
patch: return return 1 ; return - i ;
rank: 491
score: 98.50508626302083
patch: return 0 ; ; if i ++ ; return i ;
rank: 491
score: 98.42878069196429
patch: return list [ i ] ;
rank: 491
score: 98.26051548549107
patch: if ( i == count )
rank: 492
score: 98.65956809303977
patch: . return i ; } } } return i ;
rank: 492
score: 98.65514373779297
patch: return i ; } return max ;
rank: 492
score: 98.61747233072917
patch: if return i ; return 0 ; ;
rank: 492
score: 98.61178927951389
patch: return - new char [ 0 ] ;
rank: 492
score: 98.6104736328125
patch: return value . length ( ) ; }
rank: 492
score: 98.5594482421875
patch: return char [ 0 ] ;
rank: 492
score: 98.50438343394886
patch: return 0 ; ; if i ; return i ;
rank: 492
score: 98.4702860514323
patch: result = i ; }
rank: 492
score: 98.42715018136161
patch: return - false ; } }
rank: 492
score: 98.25887625558036
patch: m = true ; break ;
rank: 493
score: 98.6590243252841
patch: return i ; } } return i + 1 ;
rank: 493
score: 98.6551284790039
patch: . return i * i ; }
rank: 493
score: 98.50419921875
patch: return 1 ; ; if ; = i ;
rank: 493
score: 98.25815255301339
patch: a = i ; break ;
rank: 494
score: 98.65899658203125
patch: return i ; ; } } } return ;
rank: 494
score: 98.65494210379464
patch: return 0 - $NUMBER$ ; }
rank: 494
score: 98.61690063476563
patch: return 0 ; ; ; if return 1 ;
rank: 494
score: 98.55903625488281
patch: return new int [ length ] ;
rank: 494
score: 98.50283203125
patch: return 0 ; ; = i + 0 ;
rank: 494
score: 98.46916198730469
patch: return Array CaMeL Utils . length ;
rank: 494
score: 98.42307826450893
patch: return double [ i ] ;
rank: 494
score: 98.25765555245536
patch: return i ) + 1 ;
rank: 495
score: 98.6585922241211
patch: return - i ; } } ;
rank: 495
score: 98.61685943603516
patch: return 0 ; i else * ;
rank: 495
score: 98.55885314941406
patch: return index CaMeL Of CaMeL Any (
rank: 495
score: 98.42269461495536
patch: return j ; j ++ ;
rank: 495
score: 98.257568359375
patch: if ( i == null )
rank: 496
score: 98.65857611762152
patch: return i + $NUMBER$ ; } else {
rank: 496
score: 98.65480550130208
patch: return 1 ; } catch return 1 ;
rank: 496
score: 98.61652967664931
patch: return return i ; for return i ;
rank: 496
score: 98.60697937011719
patch: throw new String ( ch ) ;
rank: 496
score: 98.50200805664062
patch: return i ; ; / / = i ;
rank: 496
score: 98.2574462890625
patch: value return i ;
rank: 497
score: 98.65477752685547
patch: return i + 0 ; } ;
rank: 497
score: 98.61573621961806
patch: return 0 ; int i = i ;
rank: 497
score: 98.60659450954861
patch: return Integer . contains ( ch ) ;
rank: 497
score: 98.60010528564453
patch: return System . size ( ) ;
rank: 497
score: 98.50193568638393
patch: return - 1 ; / ;
rank: 497
score: 98.46202850341797
patch: return cs . length ; break ;
rank: 497
score: 98.42143031529018
patch: return double [ j ] ;
rank: 497
score: 98.2574462890625
patch: return 1 ; continue ; }
rank: 498
score: 98.65698920355902
patch: return i . index CaMeL Of ( ;
rank: 498
score: 98.65474446614583
patch: return 1 - i ;
rank: 498
score: 98.61454942491319
patch: return i ; i return - i ;
rank: 498
score: 98.5999526977539
patch: return i . value ( ) ;
rank: 498
score: 98.55735778808594
patch: return ( int ) ( ch ;
rank: 498
score: 98.50172119140625
patch: return i ; ; if i + ++ ;
rank: 498
score: 98.42108154296875
patch: return value return i ; }
rank: 498
score: 98.25734165736607
patch: if ( count == 1 )
rank: 499
score: 98.65678267045455
patch: return i ; ; } else return i ; }
rank: 499
score: 98.65433756510417
patch: return i ; } } } if ;
rank: 499
score: 98.61405944824219
patch: return i ; } ; * /
rank: 499
score: 98.55422973632812
patch: return cs . char CaMeL At (
rank: 499
score: 98.50164794921875
patch: return 1 ; ; if i = i ;
rank: 499
score: 98.25689697265625
patch: return super . return i ;
rank: 500
score: 98.6562271118164
patch: byte ch = ; break ; }
rank: 500
score: 98.65430559430804
patch: return return 1 ; } }
rank: 500
score: 98.61394653320312
patch: return i ; try { return return i ;
rank: 500
score: 98.5535659790039
patch: return ( int ) - 1 ;
rank: 500
score: 98.45841064453126
patch: return ( ) ;
rank: 500
score: 98.25631277901786
patch: return i ; else break ;
rank: 501
score: 98.65614624023438
patch: if ( search CaMeL Chars [ i ] ;
rank: 501
score: 98.65399169921875
patch: return 1 ; } if ; }
rank: 501
score: 98.61307779947917
patch: if return i ; return - $STRING$ ;
rank: 501
score: 98.5948486328125
patch: return i : 0 ;
rank: 501
score: 98.50095912388393
patch: return 0 ; break ; ;
rank: 501
score: 98.45598493303571
patch: result += search CaMeL Len ;
rank: 501
score: 98.25375366210938
patch: return i ) ;
rank: 502
score: 98.6560302734375
patch: if ( i ; else break ; } }
rank: 502
score: 98.65395100911458
patch: . * / / return i ; }
rank: 502
score: 98.61243896484375
patch: return 0 ; } ; if return i ;
rank: 502
score: 98.59467315673828
patch: return i - ( 0 ) ;
rank: 502
score: 98.50087280273438
patch: return i ; ; if i * -- ;
rank: 502
score: 98.41759381975446
patch: return - [ i ] ;
rank: 502
score: 98.25346156529018
patch: return this [ i ] ;
rank: 503
score: 98.65574340820312
patch: if ( i == i ) return i ;
rank: 503
score: 98.65383911132812
patch: return 0 / i ;
rank: 503
score: 98.61153157552083
patch: return i ; return * - i ;
rank: 503
score: 98.60057576497395
patch: return value . length ;
rank: 503
score: 98.59281921386719
patch: return i + $STRING$ + ch ;
rank: 503
score: 98.45490112304688
patch: ret = i ;
rank: 503
score: 98.25306919642857
patch: this . return i ; }
rank: 504
score: 98.65553977272727
patch: return i ; } } else { return ; }
rank: 504
score: 98.6535873413086
patch: . { return i ; } }
rank: 504
score: 98.5914306640625
patch: return i + ch + i ;
rank: 504
score: 98.49988403320313
patch: return - 1 ; / / return 1 ;
rank: 504
score: 98.45253295898438
patch: break + 1 ;
rank: 504
score: 98.41664341517857
patch: return true ; } break ;
rank: 505
score: 98.65519714355469
patch: return - 1 ; } * /
rank: 505
score: 98.6108154296875
patch: if return i ; try { return i ;
rank: 505
score: 98.59381781684027
patch: return ( i - cs CaMeL Len ;
rank: 505
score: 98.59123229980469
patch: return i * 0 . 1 ;
rank: 505
score: 98.49879760742188
patch: return 0 ; if return i ; break ;
rank: 505
score: 98.41339983258929
patch: return Integer . length ; }
rank: 505
score: 98.25022670200893
patch: buffer = i ; break ;
rank: 506
score: 98.65486450195313
patch: return i ; } } } if ( ;
rank: 506
score: 98.65311008029514
patch: return 0 [ length ++ ++ ] ;
rank: 506
score: 98.61018676757813
patch: return i ; / * if return i ;
rank: 506
score: 98.58879852294922
patch: return name . trim ( ) ;
rank: 506
score: 98.45166015625
patch: return true ; break ;
rank: 506
score: 98.41066196986607
patch: return length [ i ] ;
rank: 506
score: 98.24847412109375
patch: value return - 1 ;
rank: 507
score: 98.65439278738839
patch: if ( i > $NUMBER$ )
rank: 507
score: 98.65254041883681
patch: return i ; } if ; * /
rank: 507
score: 98.60995144314236
patch: return i ; j catch return i ;
rank: 507
score: 98.59221055772569
patch: return i + cs CaMeL Len ; }
rank: 507
score: 98.58587646484375
patch: return i && ch == ch ;
rank: 507
score: 98.5485610961914
patch: return new char [ $NUMBER$ ] ;
rank: 507
score: 98.49788818359374
patch: return i ; ; if i = 1 ;
rank: 508
score: 98.65429077148437
patch: if ( ch == $STRING$ ) return i ;
rank: 508
score: 98.651611328125
patch: } else if ( i == i ;
rank: 508
score: 98.58395385742188
patch: return i + ch - 1 ;
rank: 508
score: 98.54751586914062
patch: return ( char ) ( ch ;
rank: 508
score: 98.49745483398438
patch: return 1 ; ; return i + i ;
rank: 509
score: 98.65403747558594
patch: = $NUMBER$ ; break ; } }
rank: 509
score: 98.65152740478516
patch: . / * / return i ;
rank: 509
score: 98.60836181640624
patch: return i ; i else * return i ;
rank: 509
score: 98.59128824869792
patch: return ( cs [ j ] ) ;
rank: 509
score: 98.4954833984375
patch: i if i = i ; return i ;
rank: 509
score: 98.40917096819196
patch: return i - - 1 ;
rank: 510
score: 98.65336608886719
patch: return Short . MAX _ VALUE ;
rank: 510
score: 98.65126037597656
patch: . } * * * * /
rank: 510
score: 98.60831027560764
patch: return 0 ; ; ; if i ;
rank: 510
score: 98.54034423828125
patch: return this . search CaMeL Chars ;
rank: 510
score: 98.49545288085938
patch: return i ; ; return i - i ;
rank: 510
score: 98.40760149274554
patch: return i ? i ; }
rank: 510
score: 98.24261474609375
patch: value return i ; }
rank: 511
score: 98.65232849121094
patch: return i ; ++ count ; }
rank: 511
score: 98.65087890625
patch: return i - i ; break ;
rank: 511
score: 98.60761176215277
patch: return 0 ; ; return - i ;
rank: 511
score: 98.49509974888393
patch: i return i + i ;
rank: 511
score: 98.40447998046875
patch: return i false ; }
rank: 512
score: 98.65216064453125
patch: return i % $NUMBER$ ; } }
rank: 512
score: 98.65087212456598
patch: . = 0 ; return i ; }
rank: 512
score: 98.60711669921875
patch: return i ; i else = 0 ;
rank: 512
score: 98.58651733398438
patch: return ( i - count ) ;
rank: 512
score: 98.57716878255208
patch: return * / i ;
rank: 512
score: 98.5385971069336
patch: return ( int ) return i ;
rank: 512
score: 98.49321899414062
patch: return 1 ; ; if i * ++ ;
rank: 512
score: 98.23952229817708
patch: = j + 1 ;
rank: 513
score: 98.6517333984375
patch: return i + i + $NUMBER$ ;
rank: 513
score: 98.65066528320312
patch: . * * * * i /
rank: 513
score: 98.60670979817708
patch: return i ; i * * * /
rank: 513
score: 98.53787994384766
patch: return search CaMeL Chars . char CaMeL
rank: 513
score: 98.4929532137784
patch: return i ; return i ; if return 1 ;
rank: 513
score: 98.44565836588542
patch: -- ; return i ;
rank: 513
score: 98.2393798828125
patch: value return 0 ; }
rank: 514
score: 98.65116743607955
patch: if ( is CaMeL Empty ( ch , i ;
rank: 514
score: 98.65037706163194
patch: return i ; } } return value ;
rank: 514
score: 98.60653250558036
patch: return i ; ; else {
rank: 514
score: 98.580322265625
patch: return ( ( byte ) i ) ;
rank: 514
score: 98.57463836669922
patch: return i ? false : i ;
rank: 514
score: 98.49282004616477
patch: return i ; ; if i * return 1 ;
rank: 514
score: 98.40286690848214
patch: return count + i ; }
rank: 514
score: 98.2349853515625
patch: char return i ;
rank: 515
score: 98.65115966796876
patch: return i + 1 ; } } else {
rank: 515
score: 98.65022277832031
patch: return 0 - 1 ; break ;
rank: 515
score: 98.60649956597223
patch: return i ; i for return i ;
rank: 515
score: 98.57449340820312
patch: return i + ch + null ;
rank: 515
score: 98.53606305803571
patch: return i ( ch ) ;
rank: 515
score: 98.49235395951705
patch: return i ; ; if return 1 ; break ;
rank: 515
score: 98.44100952148438
patch: return this . i ; } }
rank: 515
score: 98.40050252278645
patch: return this ; } }
rank: 515
score: 98.2332763671875
patch: return i ^ i ;
rank: 516
score: 98.65005057198661
patch: return i * 1 ; }
rank: 516
score: 98.57924397786458
patch: return ( ( byte ) ch ) ;
rank: 516
score: 98.5732192993164
patch: return i ? null : i ;
rank: 516
score: 98.53372192382812
patch: return get CaMeL Name ( ) ;
rank: 516
score: 98.49149780273437
patch: return i ; for return i - 1 ;
rank: 516
score: 98.43936157226562
patch: return cs . ( ) ; }
rank: 516
score: 98.40044294084821
patch: return max [ j ] ;
rank: 517
score: 98.64984130859375
patch: return i [ 0 ++ ] ;
rank: 517
score: 98.64961547851563
patch: if ( ; i < search CaMeL Len )
rank: 517
score: 98.60542805989583
patch: return i ; ; if return 0 ;
rank: 517
score: 98.578369140625
patch: return ( i / 1 ) ;
rank: 517
score: 98.57231794084821
patch: return this . return i ;
rank: 517
score: 98.49131081321023
patch: return i ; if return 1 ; return i ;
rank: 517
score: 98.43923950195312
patch: buf [ j ] return i ;
rank: 517
score: 98.39983258928571
patch: return ( char ) 1 ;
rank: 518
score: 98.64978790283203
patch: return i * i ; * /
rank: 518
score: 98.64935980902777
patch: if ( i == search CaMeL Len ;
rank: 518
score: 98.60431586371527
patch: return return 1 ; for return i ;
rank: 518
score: 98.49119349888393
patch: return 0 ; ; break ;
rank: 518
score: 98.39915248325893
patch: return iterator [ i ] ;
rank: 518
score: 98.22787475585938
patch: return 0 ; ; }
rank: 519
score: 98.64965057373047
patch: return 0 + 0 + i ;
rank: 519
score: 98.64935913085938
patch: if ( is CaMeL Empty ( ch ; }
rank: 519
score: 98.60284423828125
patch: return i ; ; * * * /
rank: 519
score: 98.53262329101562
patch: return ( 0 + ch ) ;
rank: 519
score: 98.49110107421875
patch: return i + i ; return - 1 ;
rank: 519
score: 98.43660736083984
patch: { search CaMeL Len ++ ; }
rank: 519
score: 98.39704241071429
patch: return E [ j ] ;
rank: 519
score: 98.22584025065105
patch: if ( i == ;
rank: 520
score: 98.6489590731534
patch: if ( ! is CaMeL Empty ( ch ; }
rank: 520
score: 98.64795793805804
patch: return 0 ; } ; }
rank: 520
score: 98.60283813476562
patch: return i ; } else { return 0 ;
rank: 520
score: 98.57154846191406
patch: return start . size ( ) ;
rank: 520
score: 98.49041748046875
patch: return i ; ; if return i ; return i ;
rank: 520
score: 98.43653215680804
patch: return ( i ; } }
rank: 520
score: 98.39688546316964
patch: return size . length ; }
rank: 520
score: 98.22545166015625
patch: return count i ;
rank: 521
score: 98.64893256293402
patch: if ( ! ; break ; } }
rank: 521
score: 98.60236952039931
patch: return 0 ; else if return i ;
rank: 521
score: 98.56568908691406
patch: return i + ch : 0 ;
rank: 521
score: 98.5317153930664
patch: return new byte [ i ] ;
rank: 521
score: 98.3958740234375
patch: return - - true ; }
rank: 522
score: 98.64837646484375
patch: return i + i + $NUMBER$ ; }
rank: 522
score: 98.64708116319444
patch: . * * * * * i /
rank: 522
score: 98.60202365451389
patch: return i ; i * * ++ ;
rank: 522
score: 98.5677261352539
patch: return new int cs CaMeL Len ;
rank: 522
score: 98.48939819335938
patch: return i + - 1 ; return i ;
rank: 522
score: 98.39492361886161
patch: return native [ j ] ;
rank: 522
score: 98.22216796875
patch: if ; return i ;
rank: 523
score: 98.64789373224431
patch: if ( $STRING$ . equals ( ch ) ) {
rank: 523
score: 98.64684295654297
patch: return i ; } else ; }
rank: 523
score: 98.60048421223958
patch: return i ; while i = i ;
rank: 523
score: 98.56770324707031
patch: return ( 0 int ) i ;
rank: 523
score: 98.48920288085938
patch: return i ; return ++ i ; break ;
rank: 523
score: 98.43526204427083
patch: ret = i ; }
rank: 523
score: 98.39473179408482
patch: [ j ] = false ;
rank: 523
score: 98.22191365559895
patch: . return - 1 ;
rank: 524
score: 98.6478271484375
patch: if ( i != search CaMeL Chars . length ;
rank: 524
score: 98.64605034722223
patch: / * * * / return i ;
rank: 524
score: 98.53032575334821
patch: return ( Integer ) i ;
rank: 524
score: 98.48802601207386
patch: return i ; if i - ; return i ;
rank: 525
score: 98.64743381076389
patch: return i + 1 ; ; } }
rank: 525
score: 98.64596557617188
patch: return i / 0 ;
rank: 525
score: 98.59969075520833
patch: return - 1 ; for return i ;
rank: 525
score: 98.56353759765625
patch: return count . size ( ) ;
rank: 525
score: 98.55659484863281
patch: return i + i . length ;
rank: 525
score: 98.52877807617188
patch: return cs CaMeL Len - 0 ;
rank: 525
score: 98.48729248046875
patch: return i ; if return i - 1 ;
rank: 525
score: 98.433935546875
patch: break ; break ;
rank: 525
score: 98.39256068638393
patch: return in [ j ] ;
rank: 525
score: 98.21836344401042
patch: is i = i ;
rank: 526
score: 98.64719460227273
patch: return i ; } ; } else return i ;
rank: 526
score: 98.64592827690973
patch: . * * * * / if ;
rank: 526
score: 98.59954833984375
patch: return i ; ; * if return i ;
rank: 526
score: 98.52758026123047
patch: return i ? $STRING$ : i ;
rank: 526
score: 98.48727416992188
patch: return 0 ; ; ; ; = i ;
rank: 526
score: 98.38962227957589
patch: return float [ i ] ;
rank: 526
score: 98.21824137369792
patch: = i + $NUMBER$ ;
rank: 527
score: 98.6470947265625
patch: return i ; ; } } else return i ;
rank: 527
score: 98.52539934430804
patch: return ( String ) i ;
rank: 527
score: 98.48682657877605
patch: return i ; return i ; if i - 1 ;
rank: 527
score: 98.43218994140625
patch: v [ j ] return i ;
rank: 527
score: 98.3887939453125
patch: { return 0 ; }
rank: 528
score: 98.64703369140625
patch: return index CaMeL Of ( i , ;
rank: 528
score: 98.64558919270833
patch: return i + 0 ; } else {
rank: 528
score: 98.48679421164773
patch: return - 1 ; return - 1 ; break ;
rank: 528
score: 98.43210856119792
patch: res return i ; }
rank: 528
score: 98.38798304966518
patch: return - - false ; }
rank: 529
score: 98.64702814275569
patch: return i - 1 ; } } if ( ;
rank: 529
score: 98.64542643229167
patch: return 0 ; * /
rank: 529
score: 98.59703233506944
patch: return i + i ; if i ;
rank: 529
score: 98.486474609375
patch: return i ; ; ; return i ; }
rank: 529
score: 98.2158711751302
patch: return 0 ; continue ;
rank: 530
score: 98.64699485085227
patch: if ( ! Character . is CaMeL Whitespace ( ;
rank: 530
score: 98.64487033420139
patch: return 0 ; * * * * /
rank: 530
score: 98.59671359592014
patch: int i = i ; return 1 ;
rank: 530
score: 98.48625837053571
patch: return * i ; break ;
rank: 530
score: 98.21556599934895
patch: * / break ; }
rank: 531
score: 98.64697265625
patch: return i ; break ; } } break ;
rank: 531
score: 98.64471435546875
patch: return 1 ; } * /
rank: 531
score: 98.596533203125
patch: if return i ; return - - 1 ;
rank: 531
score: 98.54173278808594
patch: return i ? 0 : ch ;
rank: 531
score: 98.48625044389205
patch: return i ; } return i ; return i ;
rank: 531
score: 98.38552420479911
patch: return i false ; } }
rank: 531
score: 98.21309407552083
patch: return count + i ;
rank: 532
score: 98.64693196614583
patch: if ( i ; else break ; }
rank: 532
score: 98.64466857910156
patch: return i ; } return ; }
rank: 532
score: 98.59625244140625
patch: return i ; if i ;
rank: 532
score: 98.54045867919922
patch: return i + ch : i ;
rank: 532
score: 98.43032836914062
patch: return count ; break ;
rank: 532
score: 98.21048990885417
patch: = 1 ; break ;
rank: 533
score: 98.64619584517045
patch: = i ; break ; } } return i ;
rank: 533
score: 98.64339870876736
patch: return 0 ; } else = i ;
rank: 533
score: 98.59573703342014
patch: result = i ; return - 1 ;
rank: 533
score: 98.53804016113281
patch: return i + 0 . 1 ;
rank: 533
score: 98.48576216264205
patch: return i ; for i = i ; break ;
rank: 533
score: 98.42694854736328
patch: b [ j ] return i ;
rank: 533
score: 98.38514055524554
patch: return j ; } break ;
rank: 533
score: 98.208251953125
patch: return i ++ ; }
rank: 534
score: 98.64565022786458
patch: return i ; ; } } return ;
rank: 534
score: 98.64322335379464
patch: return 0 * 0 ; }
rank: 534
score: 98.595068359375
patch: return i ; ; if return return 1 ;
rank: 534
score: 98.53533935546875
patch: return 0 . 0 : i ;
rank: 534
score: 98.48546253551136
patch: return i ; ; / / * return i ;
rank: 534
score: 98.42506626674107
patch: switch ( j ) { }
rank: 534
score: 98.38331821986607
patch: return start [ j ] ;
rank: 535
score: 98.64478302001953
patch: return i - i + ; }
rank: 535
score: 98.64290618896484
patch: return i * 0 ; break ;
rank: 535
score: 98.51439557756696
patch: return ( char ) true ;
rank: 535
score: 98.48480224609375
patch: return ( return i ; : return i ;
rank: 535
score: 98.19840698242187
patch: if ( i ;
rank: 536
score: 98.64422052556819
patch: return i ; } else { return 1 ; }
rank: 536
score: 98.64283970424107
patch: return i ; } ; ;
rank: 536
score: 98.59474012586806
patch: return i ; return - * i ;
rank: 536
score: 98.53376007080078
patch: return i . search CaMeL Len ;
rank: 536
score: 98.48416748046876
patch: return ( i == i ; return i ;
rank: 536
score: 98.19838256835938
patch: in return i ;
rank: 537
score: 98.64402262369792
patch: return i + 1 ; } * /
rank: 537
score: 98.64183044433594
patch: return i * i * i /
rank: 537
score: 98.59468383789063
patch: return i ; return i ; -- i ;
rank: 537
score: 98.53235880533855
patch: return this + ch ;
rank: 537
score: 98.51344517299107
patch: return search CaMeL Len 1 ;
rank: 537
score: 98.48407537286931
patch: return ( return i - 1 ; return i ;
rank: 537
score: 98.42298235212054
patch: switch ( search CaMeL Len )
rank: 537
score: 98.38208879743304
patch: return false ; j ++ ;
rank: 537
score: 98.19708251953125
patch: s return 0 ; }
rank: 538
score: 98.64393199573864
patch: return index CaMeL Of ( ch , ; } }
rank: 538
score: 98.64169311523438
patch: return i - i - 0 ;
rank: 538
score: 98.59417114257812
patch: if return i ; i else return i ;
rank: 538
score: 98.42215401785714
patch: switch ( ch ) { }
rank: 538
score: 98.38169642857143
patch: return return 0 ; } }
rank: 538
score: 98.19549560546875
patch: return i - j ;
rank: 539
score: 98.64343939887152
patch: return Integer . parse CaMeL Int ( ;
rank: 539
score: 98.64165496826172
patch: return i ; if ; } }
rank: 539
score: 98.59412977430556
patch: return i ; return i ; i ;
rank: 539
score: 98.50990295410156
patch: return ( cs [ j ] ;
rank: 539
score: 98.48369140625
patch: return i ; break ; if return 1 ;
rank: 539
score: 98.38080705915179
patch: return byte [ i ] ;
rank: 539
score: 98.19325764973958
patch: char return - 1 ;
rank: 540
score: 98.6427001953125
patch: return i ; } } } return count ;
rank: 540
score: 98.59285481770833
patch: return 0 ; i if return i ;
rank: 540
score: 98.50833129882812
patch: return search CaMeL Len - $NUMBER$ ;
rank: 540
score: 98.48284912109375
patch: return 0 ; if return 1 ; break ;
rank: 540
score: 98.37962123325893
patch: return i 1 ; } }
rank: 540
score: 98.19158935546875
patch: return 0 + j ;
rank: 541
score: 98.64125569661458
patch: c = i ; break ; } }
rank: 541
score: 98.59273071289063
patch: return i ; } else { return $STRING$ ;
rank: 541
score: 98.50728607177734
patch: return this . this . i ;
rank: 541
score: 98.37874930245536
patch: return true ; j ++ ;
rank: 541
score: 98.19112141927083
patch: *= i ; break ;
rank: 542
score: 98.64097595214844
patch: return - i ; } else {
rank: 542
score: 98.59250217013889
patch: return i ; int i = 0 ;
rank: 542
score: 98.50636291503906
patch: return new char [ ] { i
rank: 542
score: 98.48160400390626
patch: return 0 ; ; if i + 1 ;
rank: 542
score: 98.37831333705357
patch: return - - - i ;
rank: 542
score: 98.1900634765625
patch: * / return 0 ;
rank: 543
score: 98.64088657924107
patch: . return i * i ;
rank: 543
score: 98.64050971137152
patch: return i - i ; } } }
rank: 543
score: 98.59248182508681
patch: return i ; j else * i ;
rank: 543
score: 98.41586303710938
patch: old [ j ] return i ;
rank: 543
score: 98.37679443359374
patch: return ++ j ;
rank: 543
score: 98.1888427734375
patch: scanner . return i ;
rank: 544
score: 98.64073181152344
patch: return 0 ; else return 1 ;
rank: 544
score: 98.64045715332031
patch: return Integer . MIN _ VALUE ;
rank: 544
score: 98.59170193142361
patch: return return i ; ; if i ;
rank: 544
score: 98.50497436523438
patch: return start + search CaMeL Len ;
rank: 544
score: 98.48106079101562
patch: return - 1 ; if i / ++ ;
rank: 544
score: 98.41485595703125
patch: return - ) ; }
rank: 545
score: 98.64067925347223
patch: return i [ i ] ; } else
rank: 545
score: 98.63978794642857
patch: return i ; ; ; }
rank: 545
score: 98.59108479817708
patch: throw new Exception i ;
rank: 545
score: 98.48075561523437
patch: return i ; ; * / = i ;
rank: 545
score: 98.1865743001302
patch: if i -- ; }
rank: 546
score: 98.6405029296875
patch: } else * * * * * /
rank: 546
score: 98.63963317871094
patch: return i + 1 + ; }
rank: 546
score: 98.5908203125
patch: return return i ; return i ; ;
rank: 546
score: 98.50433349609375
patch: return i ( i 1 ) ;
rank: 546
score: 98.47953287760417
patch: return i ; ; if i * / return i ;
rank: 546
score: 98.41359165736607
patch: result return i ; } }
rank: 546
score: 98.37558419363839
patch: return is [ i ] ;
rank: 546
score: 98.185986328125
patch: return ] ; }
rank: 547
score: 98.64033338758681
patch: . * * * return 1 ; }
rank: 547
score: 98.63956705729167
patch: if ; ; return i ; } }
rank: 547
score: 98.59075927734375
patch: if i < i ? return i ;
rank: 547
score: 98.50379943847656
patch: return ( int ) ! i ;
rank: 547
score: 98.47895951704545
patch: return 0 ; return i ; return - 1 ;
rank: 547
score: 98.18544514973958
patch: float i = i ;
rank: 548
score: 98.59034423828125
patch: return i ; else return - - 1 ;
rank: 548
score: 98.49943542480469
patch: return cs [ j ) ] ;
rank: 548
score: 98.3745625813802
patch: return return 0 ; }
rank: 548
score: 98.18541463216145
patch: / * return i ;
rank: 549
score: 98.64007568359375
patch: return i ; if ; * /
rank: 549
score: 98.63721313476563
patch: if ; i ++ ; break ; } }
rank: 549
score: 98.51787567138672
patch: return i + cs . i ;
rank: 549
score: 98.49931335449219
patch: return ( int ) - 0 ;
rank: 549
score: 98.47831508091518
patch: return 0 ; return name ;
rank: 549
score: 98.37394496372768
patch: return value . length ; }
rank: 549
score: 98.1842041015625
patch: char return 0 ; }
rank: 550
score: 98.6360855102539
patch: c ; return i ; } }
rank: 550
score: 98.5893310546875
patch: return i ; ; } if return 1 ;
rank: 550
score: 98.51502990722656
patch: return ch + ch + ch ;
rank: 550
score: 98.47723999023438
patch: return 0 ; i / ; = i ;
rank: 550
score: 98.39967854817708
patch: ! return i ; }
rank: 550
score: 98.37209647042411
patch: return char [ i ] ;
rank: 551
score: 98.63541870117187
patch: return i + 1 ; break ; } }
rank: 551
score: 98.58932156032986
patch: return i ; } i if i ;
rank: 551
score: 98.52874755859375
patch: return new boolean [ 1 ] ;
rank: 551
score: 98.4769287109375
patch: return i ; return i ; if i 1 ;
rank: 551
score: 98.18197631835938
patch: -- ; break ; }
rank: 552
score: 98.63899230957031
patch: [ 0 ] = i ; }
rank: 552
score: 98.63517930772569
patch: = true ; ; break ; } }
rank: 552
score: 98.5892333984375
patch: return length ; return i ;
rank: 552
score: 98.52651977539062
patch: return ( 0 . 1 ) ;
rank: 552
score: 98.49449920654297
patch: return ( char ) ( $STRING$ ;
rank: 552
score: 98.4767333984375
patch: return i ; ; if i * i /
rank: 552
score: 98.3975601196289
patch: return ( ch == ch ) ;
rank: 552
score: 98.36964634486607
patch: return i ; false ; }
rank: 552
score: 98.18174235026042
patch: this . return i ;
rank: 553
score: 98.63895961216518
patch: . if return 0 ; }
rank: 553
score: 98.63512311662946
patch: return i ; ; } ;
rank: 553
score: 98.5206069946289
patch: throw new byte [ 0 ] ;
rank: 553
score: 98.51355997721355
patch: return $STRING$ - i ;
rank: 553
score: 98.49403599330357
patch: return ( int ) 0 ;
rank: 553
score: 98.47604370117188
patch: return 0 ; ; if i return i ;
rank: 553
score: 98.39603424072266
patch: search CaMeL Chars [ j ] ;
rank: 553
score: 98.36933244977679
patch: return $STRING$ ; } break ;
rank: 553
score: 98.17498779296875
patch: if ( i < ;
rank: 554
score: 98.63488006591797
patch: return i - i ; ; }
rank: 554
score: 98.58639187282986
patch: return 0 ; break ; if i ;
rank: 554
score: 98.51969909667969
patch: return ( i - ch ) ;
rank: 554
score: 98.50782775878906
patch: return $STRING$ * * / ch ;
rank: 554
score: 98.49222564697266
patch: return get CaMeL Class ( ) ;
rank: 554
score: 98.47603934151786
patch: i i ; return i ;
rank: 554
score: 98.39311872209821
patch: break ; break ; } }
rank: 554
score: 98.3692626953125
patch: [ j ] = null ;
rank: 554
score: 98.17317708333333
patch: return i $NUMBER$ ; }
rank: 555
score: 98.63462524414062
patch: if ( ; break ; } break ; }
rank: 555
score: 98.58637346540179
patch: return i + return i ;
rank: 555
score: 98.4759521484375
patch: return - 1 ; break ; ; return i ;
rank: 555
score: 98.39058685302734
patch: new [ j ] return i ;
rank: 556
score: 98.63762664794922
patch: . return i ; return 0 ;
rank: 556
score: 98.63459014892578
patch: return i - 1 + ; }
rank: 556
score: 98.58599175347223
patch: return i ; ; / * * /
rank: 556
score: 98.51679992675781
patch: return Long . size ( ) ;
rank: 556
score: 98.38999430338542
patch: return i & 1 ;
rank: 556
score: 98.36806815011161
patch: return i + - i ;
rank: 556
score: 98.1689453125
patch: if ; break ;
rank: 557
score: 98.63735961914062
patch: return 0 * 0 ;
rank: 557
score: 98.63438585069444
patch: if ( ; } else if ( ;
rank: 557
score: 98.58440483940973
patch: return next ( i ; return i ;
rank: 557
score: 98.51676940917969
patch: return value + search CaMeL Len ;
rank: 557
score: 98.50466918945312
patch: return i && ch != ch ;
rank: 557
score: 98.48870086669922
patch: Buffer [ i ] return i ;
rank: 557
score: 98.47534790039063
patch: return i ; for return 1 ; break ;
rank: 557
score: 98.36572265625
patch: return - $NUMBER$ ; } }
rank: 557
score: 98.16715087890626
patch: for i ++ ;
rank: 558
score: 98.63707624162946
patch: . if ; return i ;
rank: 558
score: 98.63403930664063
patch: if ( i < search CaMeL Len && ;
rank: 558
score: 98.5843994140625
patch: return i ; i else * return 1 ;
rank: 558
score: 98.47356622869319
patch: return i ; ; if i * i ++ ;
rank: 558
score: 98.3871358235677
patch: return cs ; break ;
rank: 558
score: 98.36299351283482
patch: return class [ j ] ;
rank: 558
score: 98.1665267944336
patch: return ; }
rank: 559
score: 98.63642713758681
patch: return i ; } } else if ;
rank: 559
score: 98.58333129882813
patch: return 0 ; } else if return i ;
rank: 559
score: 98.50133514404297
patch: return i * search CaMeL Len ;
rank: 559
score: 98.47325550426136
patch: return 0 ; ; if i + i ++ ;
rank: 559
score: 98.38630894252232
patch: return true ; } } }
rank: 559
score: 98.36283656529018
patch: return i . i ; }
rank: 560
score: 98.63642035590277
patch: return 0 ; } if return 0 ;
rank: 560
score: 98.58282470703125
patch: return value + i ;
rank: 560
score: 98.51367950439453
patch: return new char [ count ] ;
rank: 560
score: 98.5010274251302
patch: return ch + ch ;
rank: 560
score: 98.486083984375
patch: return cs . char CaMeL
rank: 560
score: 98.36258370535714
patch: { return 0 ; } }
rank: 561
score: 98.63630022321429
patch: return i ; } else }
rank: 561
score: 98.63292100694444
patch: if i ++ ; break ; } }
rank: 561
score: 98.58272705078124
patch: return i ; i * * return i ;
rank: 561
score: 98.50023542131696
patch: return i . length 1 ;
rank: 561
score: 98.47273559570313
patch: return i ; if i * return i ;
rank: 561
score: 98.36182861328125
patch: character return 0 ;
rank: 561
score: 98.1593729654948
patch: = false ; break ;
rank: 562
score: 98.63627794053819
patch: . * * * * / } ;
rank: 562
score: 98.58251274956598
patch: if ( return 0 ; return i ;
rank: 562
score: 98.4810282389323
patch: return i + $STRING$ ;
rank: 562
score: 98.47256469726562
patch: return ; = 0 ;
rank: 562
score: 98.36177280970982
patch: return 0 ; / * /
rank: 562
score: 98.15760294596355
patch: double i = i ;
rank: 563
score: 98.63595581054688
patch: . return 0 ; }
rank: 563
score: 98.6324462890625
patch: if ( ; return i ; }
rank: 563
score: 98.58247884114583
patch: return start + i ;
rank: 563
score: 98.49856567382812
patch: return i + 0 . 0 ;
rank: 563
score: 98.48065795898438
patch: else return i ;
rank: 563
score: 98.47251586914062
patch: return i + 0 ; if i ++ ;
rank: 563
score: 98.38286481584821
patch: true return i ; } }
rank: 564
score: 98.63566080729167
patch: return [ 1 ] ;
rank: 564
score: 98.58114284939236
patch: return i ; return i ; i *
rank: 564
score: 98.49810791015625
patch: return $STRING$ + i ;
rank: 564
score: 98.47230224609375
patch: return i + i ; if i ++ ;
rank: 564
score: 98.36036900111607
patch: return - cs CaMeL Len ;
rank: 564
score: 98.15591430664062
patch: return i + count ;
rank: 565
score: 98.634521484375
patch: return 0 i ;
rank: 565
score: 98.63201904296875
patch: return i + 1 ; } break ; }
rank: 565
score: 98.580810546875
patch: return i ; int i = - 1 ;
rank: 565
score: 98.49776458740234
patch: return i . length * 1 ;
rank: 565
score: 98.47313581194196
patch: return i ( 0 ) ;
rank: 565
score: 98.47212357954545
patch: return - 1 ; if i ; return i ;
rank: 565
score: 98.38036346435547
patch: if ( i == 0 ) {
rank: 565
score: 98.35856410435268
patch: return left [ i ] ;
rank: 566
score: 98.634521484375
patch: return 0 ; } catch ;
rank: 566
score: 98.63123168945313
patch: return i - 1 ; } else if ;
rank: 566
score: 98.58072509765626
patch: if i int return i ; return i ;
rank: 566
score: 98.50250244140625
patch: return ( i & ch ) ;
rank: 566
score: 98.47169078480114
patch: return i ; return - 1 ; return 1 ;
rank: 566
score: 98.46782575334821
patch: return ( int ) $STRING$ ;
rank: 566
score: 98.3795166015625
patch: break ; } } else
rank: 566
score: 98.35636683872768
patch: return this + i ; }
rank: 567
score: 98.63423665364583
patch: return i ; } catch return 0 ;
rank: 567
score: 98.6310791015625
patch: return i ; ; } } if ( ;
rank: 567
score: 98.5798583984375
patch: return i ; } return return - 1 ;
rank: 567
score: 98.5010986328125
patch: return count + search CaMeL Len ;
rank: 567
score: 98.49609375
patch: return new Object [ ] { ch
rank: 567
score: 98.47102494673295
patch: return i ; ; = i ; return 1 ;
rank: 567
score: 98.35569545200893
patch: return i - true ; }
rank: 567
score: 98.14693196614583
patch: default return i ; }
rank: 568
score: 98.6336669921875
patch: . * * * i /
rank: 568
score: 98.63090684678819
patch: return - i + 1 ; } }
rank: 568
score: 98.5796142578125
patch: return i ; / / if return i ;
rank: 568
score: 98.5004653930664
patch: ( ( char ) ch ) ;
rank: 568
score: 98.49579620361328
patch: return i ? null : ch ;
rank: 568
score: 98.47095836292614
patch: return 0 ; ; return i ; return i ;
rank: 569
score: 98.63347516741071
patch: } * * * * /
rank: 569
score: 98.63079833984375
patch: if ( ch == $STRING$ || ;
rank: 569
score: 98.57940673828125
patch: return i ; i return - - 1 ;
rank: 569
score: 98.49688720703125
patch: return value . length - i ;
rank: 569
score: 98.470849609375
patch: return 0 ; if i ; return i ;
rank: 569
score: 98.37555694580078
patch: return i ; } case 1 :
rank: 569
score: 98.353515625
patch: return static [ j ] ;
rank: 570
score: 98.63319227430556
patch: return 0 ; else return i ; }
rank: 570
score: 98.63045043945313
patch: if ( is CaMeL Empty ( i ) ;
rank: 570
score: 98.57906494140624
patch: int i = i ; while return 1 ;
rank: 570
score: 98.49522399902344
patch: return new int [ ] { $STRING$
rank: 570
score: 98.47077287946429
patch: i ; ; return i ;
rank: 570
score: 98.35151890345982
patch: return i ; ch ++ ;
rank: 570
score: 98.14554850260417
patch: return j + $NUMBER$ ;
rank: 571
score: 98.63224962022569
patch: return i ; if return i ; }
rank: 571
score: 98.62989501953125
patch: return i ; } System . out . ;
rank: 571
score: 98.5789306640625
patch: int i = i ; if return i ;
rank: 571
score: 98.47012329101562
patch: return 0 ; ; if i - ++ ;
rank: 571
score: 98.45945521763393
patch: return new String ( ) ;
rank: 571
score: 98.37112426757812
patch: return search CaMeL Len ; } else
rank: 571
score: 98.35142299107143
patch: return i / i ; }
rank: 571
score: 98.14551798502605
patch: if i < i )
rank: 572
score: 98.62941284179688
patch: if ( i >= search CaMeL Len ) ;
rank: 572
score: 98.578466796875
patch: return 1 ; ;
rank: 572
score: 98.4940185546875
patch: buf [ j ] = ch ;
rank: 572
score: 98.4698486328125
patch: return Math + i ;
rank: 572
score: 98.3709945678711
patch: p . return i ; } }
rank: 572
score: 98.35001046316964
patch: return i + count ; }
rank: 572
score: 98.14508056640625
patch: return ; break ; }
rank: 573
score: 98.6300048828125
patch: return 0 * i ; } else {
rank: 573
score: 98.62894439697266
patch: if ( ; } else if ;
rank: 573
score: 98.578271484375
patch: return i ; } return - - i ;
rank: 573
score: 98.49415588378906
patch: return search CaMeL Len + ch ;
rank: 573
score: 98.46943359375
patch: return i ; ; if i += i ;
rank: 573
score: 98.45668538411458
patch: return i + true ;
rank: 573
score: 98.34987967354911
patch: return size ( ) ; }
rank: 573
score: 98.14351399739583
patch: synchronized ( this ) {
rank: 574
score: 98.62935093470982
patch: . return i ; } else
rank: 574
score: 98.62841796875
patch: return i ; } } break ; }
rank: 574
score: 98.57786865234375
patch: return i ; i else return i ; }
rank: 574
score: 98.4938735961914
patch: return i / * / i ;
rank: 574
score: 98.4681640625
patch: return i ; ; if i + 0 ;
rank: 574
score: 98.45352172851562
patch: return i . start ;
rank: 574
score: 98.3689676920573
patch: false return i ; }
rank: 574
score: 98.34549386160714
patch: return i - false ; }
rank: 574
score: 98.1411844889323
patch: += 1 ; break ;
rank: 575
score: 98.62925211588542
patch: . return 1 ; }
rank: 575
score: 98.6283187866211
patch: return i - start ; } }
rank: 575
score: 98.57786729600694
patch: return i ; return i ; ; /
rank: 575
score: 98.49270629882812
patch: return ( cs , ch ) ;
rank: 575
score: 98.49256134033203
patch: return $STRING$ + ch + null ;
rank: 575
score: 98.36732788085938
patch: name return i ;
rank: 575
score: 98.34530203683036
patch: return min [ j ] ;
rank: 575
score: 98.13932291666667
patch: is return 0 ; }
rank: 576
score: 98.62808663504464
patch: return i ] ; } }
rank: 576
score: 98.62724473741319
patch: return 1 ; } if return 1 ;
rank: 576
score: 98.57786254882812
patch: return i ; i ; if return i ;
rank: 576
score: 98.49237060546875
patch: return ( ( byte ) i ;
rank: 576
score: 98.4673739346591
patch: return i ; return i ; return ++ i ;
rank: 576
score: 98.36732700892857
patch: p . return i ; }
rank: 576
score: 98.34522356305804
patch: return int [ i ] ;
rank: 576
score: 98.13887532552083
patch: return -- i ; }
rank: 577
score: 98.62687852647569
patch: . ; * * * * / }
rank: 577
score: 98.57742309570312
patch: return i ; / else if return i ;
rank: 577
score: 98.49120076497395
patch: return i + null ;
rank: 577
score: 98.48971121651786
patch: return i + ch ) ;
rank: 577
score: 98.46636352539062
patch: return i ; ; if i 1 ++ ;
rank: 577
score: 98.3667500813802
patch: return char ) i ;
rank: 577
score: 98.3438720703125
patch: return i ; * / }
rank: 577
score: 98.13875325520833
patch: |= i ; break ;
rank: 578
score: 98.62657335069444
patch: return 1 ; } / * * /
rank: 578
score: 98.6265625
patch: if ( is CaMeL Empty ( ; ) ;
rank: 578
score: 98.57737901475694
patch: return i ; if return - i ;
rank: 578
score: 98.4901351928711
patch: return ( i / $NUMBER$ ) ;
rank: 578
score: 98.48954772949219
patch: return i + ch + 0 ;
rank: 578
score: 98.46600341796875
patch: return i + i ; while i ++ ;
rank: 578
score: 98.36553955078125
patch: return ( int ) cs ;
rank: 579
score: 98.62629045758929
patch: return 0 + 1 ; }
rank: 579
score: 98.62574005126953
patch: = false ; break ; } }
rank: 579
score: 98.57664794921875
patch: return i ; } if return i ; ;
rank: 579
score: 98.48995208740234
patch: throw new ] { ch } ;
rank: 579
score: 98.465869140625
patch: return i ; if return i + 1 ;
rank: 579
score: 98.43950544084821
patch: return ( double ) i ;
rank: 579
score: 98.36505126953125
patch: c return i ; }
rank: 579
score: 98.34273274739583
patch: ) return i ; }
rank: 580
score: 98.62624782986111
patch: return i [ i ++ ++ ] ;
rank: 580
score: 98.6230239868164
patch: = i ; ; break ; }
rank: 580
score: 98.48209054129464
patch: return byte [ 0 ] ;
rank: 580
score: 98.4655029296875
patch: return 0 ; ; if i * ; /
rank: 580
score: 98.43856811523438
patch: return search CaMeL Chars ;
rank: 580
score: 98.36502838134766
patch: t [ j ] return i ;
rank: 580
score: 98.34130859375
patch: character return cs CaMeL Len ;
rank: 580
score: 98.13729248046874
patch: return ~ 1 ;
rank: 581
score: 98.62288665771484
patch: = true ; return i ; }
rank: 581
score: 98.57645961216518
patch: return i ; ; * /
rank: 581
score: 98.46533203125
patch: return i ; ; if i / - ++ ;
rank: 581
score: 98.36403111049107
patch: return count ; break ; }
rank: 581
score: 98.34108189174107
patch: return ( j ) ; }
rank: 581
score: 98.1363525390625
patch: return i / 1 ;
rank: 582
score: 98.62532552083333
patch: return 1 ; return i ; } }
rank: 582
score: 98.62271881103516
patch: return i ; } } } ;
rank: 582
score: 98.48570033482143
patch: return next [ j ] ;
rank: 582
score: 98.46491088867188
patch: return i + 0 ; while i ++ ;
rank: 582
score: 98.36186218261719
patch: tmp [ j ] return i ;
rank: 582
score: 98.34001813616071
patch: ) return i ; } }
rank: 582
score: 98.13557942708333
patch: final return i ; }
rank: 583
score: 98.62504747178819
patch: return i ; } return ++ i ;
rank: 583
score: 98.62253146701389
patch: if ; ; return - 1 ; }
rank: 583
score: 98.48509979248047
patch: return new Object [ 1 ] ;
rank: 583
score: 98.47709655761719
patch: return search CaMeL Chars [ i ]
rank: 583
score: 98.46476440429687
patch: return i ; for return i + 1 ;
rank: 583
score: 98.43122209821429
patch: return ( float ) i ;
rank: 583
score: 98.36109270368304
patch: return ( char ) cs ;
rank: 583
score: 98.13431803385417
patch: if i -= i ;
rank: 584
score: 98.62485080295139
patch: . * * * * / / }
rank: 584
score: 98.62246704101562
patch: return i ; } ; } } return ;
rank: 584
score: 98.57521565755208
patch: return return 1 ; }
rank: 584
score: 98.48223114013672
patch: return ( i + count ) ;
rank: 584
score: 98.4643798828125
patch: return i ; while return i - 1 ;
rank: 584
score: 98.42892892020089
patch: return search CaMeL Chars [ i
rank: 584
score: 98.33546665736607
patch: return - i + 0 ;
rank: 584
score: 98.1331787109375
patch: in return - 1 ;
rank: 585
score: 98.62407769097223
patch: return 0 ; return 1 ; } }
rank: 585
score: 98.62223510742187
patch: return i - 1 ; } } break ;
rank: 585
score: 98.57503051757813
patch: return i + i ; if return i ;
rank: 585
score: 98.482177734375
patch: return ( i + j ) ;
rank: 585
score: 98.36074829101562
patch: return int ) i ;
rank: 585
score: 98.13072713216145
patch: return i - true ;
rank: 586
score: 98.62247721354167
patch: return i ; } i += i ;
rank: 586
score: 98.62220458984375
patch: if ( i < i ) return i ;
rank: 586
score: 98.57485525948661
patch: try { return - i ;
rank: 586
score: 98.47113037109375
patch: return ch [ j ] ;
rank: 586
score: 98.4632568359375
patch: return i ; if i * / return i ;
rank: 586
score: 98.41996256510417
patch: return new int [ 0
rank: 586
score: 98.33449009486607
patch: return ( char ) false ;
rank: 586
score: 98.12975056966145
patch: s return i ; }
rank: 587
score: 98.62198893229167
patch: return i * ; }
rank: 587
score: 98.62135145399306
patch: return 0 [ i ] ; } }
rank: 587
score: 98.5745849609375
patch: return - 1 ; } if return i ;
rank: 587
score: 98.47882080078125
patch: return value + ch ;
rank: 587
score: 98.4630126953125
patch: return 1 ; ; = i + i ;
rank: 587
score: 98.41797746930804
patch: return ( int ) 1 ;
rank: 587
score: 98.36034284319196
patch: { search CaMeL Len ++ ;
rank: 587
score: 98.33173479352679
patch: return i ; true ; }
rank: 588
score: 98.6219711303711
patch: return i ; } ++ count ;
rank: 588
score: 98.62035454644098
patch: return i i ; } return i ;
rank: 588
score: 98.57400851779514
patch: = i ; return i ; break ;
rank: 588
score: 98.46292550223214
patch: return 0 ; return $STRING$ ;
rank: 588
score: 98.4606221516927
patch: return i . value ;
rank: 588
score: 98.33083089192708
patch: character return 1 ; }
rank: 588
score: 98.12952677408855
patch: if ( i ; }
rank: 589
score: 98.62165069580078
patch: return i >= search CaMeL Len ;
rank: 589
score: 98.62010362413194
patch: return i i * i ; } }
rank: 589
score: 98.47407531738281
patch: return i . length - i ;
rank: 589
score: 98.41356549944196
patch: return ( - 1 ) ;
rank: 589
score: 98.12913004557292
patch: char return i ; }
rank: 590
score: 98.62133178710937
patch: if ( $STRING$ . equals ( i ) )
rank: 590
score: 98.6197509765625
patch: return 0 ; } else if ; }
rank: 590
score: 98.57262573242187
patch: return i ; j else { return 1 ;
rank: 590
score: 98.33003452845982
patch: return equals ( ch ) ;
rank: 590
score: 98.1280517578125
patch: string return 0 ; }
rank: 591
score: 98.62128295898438
patch: return i ; break ; } } return ;
rank: 591
score: 98.61964634486607
patch: } else if return 1 ;
rank: 591
score: 98.57229953342014
patch: return return 1 ; ; if i ;
rank: 591
score: 98.4615478515625
patch: return - 0 ; break ;
rank: 591
score: 98.4553451538086
patch: return new int [ ] { j
rank: 591
score: 98.40958949497768
patch: return return i + 0 ;
rank: 591
score: 98.35487874348958
patch: v return i ; }
rank: 591
score: 98.32988630022321
patch: ; return i ; } }
rank: 591
score: 98.12685139973958
patch: return i ; case ;
rank: 592
score: 98.62081570095486
patch: return i ; } break ; } ;
rank: 592
score: 98.61874825613839
patch: return 1 - i ; }
rank: 592
score: 98.572021484375
patch: return - 1 ; return i ; ;
rank: 592
score: 98.46128151633523
patch: return i ; return i ; while i 1 ;
rank: 592
score: 98.40891520182292
patch: return / - 1 ;
rank: 592
score: 98.3527587890625
patch: res return i ;
rank: 592
score: 98.12664794921875
patch: string return - 1 ;
rank: 593
score: 98.61781819661458
patch: . * / * * * * /
rank: 593
score: 98.57197265625
patch: return i ; return i ; int i {
rank: 593
score: 98.46092529296875
patch: return i ; i * / = i ;
rank: 593
score: 98.4543965657552
patch: return 0 . 0 ;
rank: 593
score: 98.40802873883929
patch: return ( char ) value ;
rank: 593
score: 98.35060628255208
patch: break + - 1 ;
rank: 593
score: 98.32952880859375
patch: return - $STRING$ ; }
rank: 593
score: 98.1263936360677
patch: for i = i ;
rank: 594
score: 98.62069702148438
patch: return i ; } } } return false ;
rank: 594
score: 98.61726209852431
patch: . if return i ; } else {
rank: 594
score: 98.46082652698864
patch: return 0 ; ; if i * return i ;
rank: 594
score: 98.40713936941964
patch: return i ; } ) ;
rank: 594
score: 98.35009765625
patch: break ; } else {
rank: 594
score: 98.12577311197917
patch: / * / break ;
rank: 595
score: 98.62064208984376
patch: return - 1 ; } } if ( ;
rank: 595
score: 98.61659749348958
patch: } else return i ;
rank: 595
score: 98.57148088727679
patch: return 0 ; ++ i ;
rank: 595
score: 98.46054077148438
patch: return i ; ; if i = 0 ;
rank: 595
score: 98.45028686523438
patch: return new int [ ] { )
rank: 595
score: 98.4053955078125
patch: return ( byte ) 0 ;
rank: 595
score: 98.32813371930804
patch: return i + $STRING$ ; }
rank: 595
score: 98.12539672851562
patch: is return - 1 ;
rank: 596
score: 98.62015380859376
patch: return i ; break ; } count ++ ;
rank: 596
score: 98.616455078125
patch: return 0 [ 0 ] ; } else
rank: 596
score: 98.57139756944444
patch: return i ; try { if i ;
rank: 596
score: 98.46028442382813
patch: return 0 ; break ; if i ++ ;
rank: 596
score: 98.34922572544643
patch: b return i ; } }
rank: 596
score: 98.324462890625
patch: character return - i ; }
rank: 596
score: 98.12342325846355
patch: = 0 ; break ;
rank: 597
score: 98.61968994140625
patch: return index CaMeL Of ; } }
rank: 597
score: 98.61625453404018
patch: . if return 1 ; }
rank: 597
score: 98.57118055555556
patch: return return 1 ; return i ; ;
rank: 597
score: 98.46334838867188
patch: return ( INDEX _ NOT _ FOUND
rank: 597
score: 98.45944213867188
patch: return i ; ; if return 1 ; return i ;
rank: 597
score: 98.40380859375
patch: return new int [ } ;
rank: 597
score: 98.32315499441964
patch: return $STRING$ ; j ++ ;
rank: 597
score: 98.12019856770833
patch: char ch = i ;
rank: 598
score: 98.61961534288194
patch: return i ; break ; } break ;
rank: 598
score: 98.57117919921875
patch: return i ; } ; { return i ;
rank: 598
score: 98.46290588378906
patch: return this . cs . length ;
rank: 598
score: 98.45878295898437
patch: return i + ; = i + i ;
rank: 598
score: 98.4032694498698
patch: return i + false ;
rank: 598
score: 98.346142578125
patch: switch ( ch )
rank: 598
score: 98.32245744977679
patch: return ++ cs CaMeL Len ;
rank: 598
score: 98.11949666341145
patch: ret return 0 ; }
rank: 599
score: 98.61956024169922
patch: return count - 1 ; } }
rank: 599
score: 98.61614990234375
patch: * * * / return i ; }
rank: 599
score: 98.57107543945312
patch: return i ; / / / return i ;
rank: 599
score: 98.458740234375
patch: return - 1 ; / / ; return i ;
rank: 599
score: 98.44183349609375
patch: return * / ch ;
rank: 599
score: 98.3453369140625
patch: break ; } break ; }
rank: 599
score: 98.11905517578126
patch: string return i ;
rank: 600
score: 98.61606174045139
patch: return 0 [ 0 ] ; } }
rank: 600
score: 98.46141052246094
patch: return new boolean [ i ] ;
rank: 600
score: 98.45860944475446
patch: return - i ; / ;
rank: 600
score: 98.39894321986607
patch: return search CaMeL Chars [ }
rank: 600
score: 98.34457397460938
patch: break - 1 ; }
rank: 600
score: 98.32008579799107
patch: return i ? i ] ;
rank: 600
score: 98.11753845214844
patch: += i ;
rank: 601
score: 98.61458333333333
patch: return 0 - 0 ; } else {
rank: 601
score: 98.56983100043402
patch: return i ; ; ; * * *
rank: 601
score: 98.4583407315341
patch: return 0 ; ; ; if ; return i ;
rank: 601
score: 98.31532505580357
patch: return i + ch ; }
rank: 602
score: 98.61886596679688
patch: = i ; break ; } ;
rank: 602
score: 98.6119384765625
patch: return 0 + 1 ;
rank: 602
score: 98.56898193359375
patch: return 0 ; ; else if return i ;
rank: 602
score: 98.45927429199219
patch: return new Object [ i ] ;
rank: 602
score: 98.458251953125
patch: return 0 ; return i ; / - 1 ;
rank: 602
score: 98.39856828962054
patch: return cs [ 0 ] ;
rank: 602
score: 98.34312220982143
patch: break ; } } else {
rank: 602
score: 98.11632283528645
patch: long i = i ;
rank: 603
score: 98.56832546657986
patch: return i ; for return i ; ;
rank: 603
score: 98.45758611505681
patch: return - 1 ; break ; return - 1 ;
rank: 603
score: 98.42869349888393
patch: return new char [ j ]
rank: 603
score: 98.34203084309895
patch: state return i ; }
rank: 603
score: 98.31461879185268
patch: return Integer . 0 ; }
rank: 603
score: 98.11583455403645
patch: if ( i != ;
rank: 604
score: 98.61826578776042
patch: return i + i ; } ; }
rank: 604
score: 98.56760660807292
patch: if return i ; return 1 ; ;
rank: 604
score: 98.45713297526042
patch: return - 1 ; if i ++ ; return i ;
rank: 604
score: 98.31453857421874
patch: return - true ;
rank: 604
score: 98.11534627278645
patch: return i - left ;
rank: 605
score: 98.61796061197917
patch: return i ; } ; } return ;
rank: 605
score: 98.56732177734375
patch: return return 1 ; ; if return 1 ;
rank: 605
score: 98.45648748224431
patch: return i ; ; if i - i ++ ;
rank: 605
score: 98.45587158203125
patch: return value . length 1 ;
rank: 605
score: 98.3397928873698
patch: new return i ; }
rank: 606
score: 98.56679280598958
patch: return i ; return - $STRING$ ; ;
rank: 606
score: 98.45624651227679
patch: return max ; return i ;
rank: 606
score: 98.38853236607143
patch: return ( ) - 1 ;
rank: 606
score: 98.33875383649554
patch: return cs . ( ) ;
rank: 606
score: 98.31184605189732
patch: return cs return i ; }
rank: 606
score: 98.1119384765625
patch: return ~ - 1 ;
rank: 607
score: 98.61751302083333
patch: = i ; break ; } ; }
rank: 607
score: 98.60764857700893
patch: return 0 ; * * /
rank: 607
score: 98.56631469726562
patch: return i ; ; if i < i ;
rank: 607
score: 98.45570678710938
patch: return i ; while return i + 1 ;
rank: 607
score: 98.33864135742188
patch: result += i ;
rank: 607
score: 98.31121826171875
patch: return i - - i ;
rank: 607
score: 98.10982259114583
patch: s return - 1 ;
rank: 608
score: 98.61714680989583
patch: if ( i != search CaMeL Len ;
rank: 608
score: 98.60623604910714
patch: [ 0 ] = i ;
rank: 608
score: 98.56605360243056
patch: return i ; boolean i = i ;
rank: 608
score: 98.45556030273437
patch: return - i ; / / return 1 ;
rank: 608
score: 98.38214111328125
patch: return ( char ) ( ;
rank: 608
score: 98.337890625
patch: return char ; }
rank: 608
score: 98.10744222005208
patch: = ch ; break ;
rank: 609
score: 98.61671278211806
patch: return i ; } } ++ i ;
rank: 609
score: 98.60220772879464
patch: / * * * * /
rank: 609
score: 98.56598510742188
patch: return i ; i else = - 1 ;
rank: 609
score: 98.45517403738839
patch: return 0 ; return start ;
rank: 609
score: 98.41240583147321
patch: return i * / i ;
rank: 609
score: 98.33644612630208
patch: else return i ; }
rank: 609
score: 98.3104248046875
patch: return j - 0 ; }
rank: 610
score: 98.61639404296875
patch: if ; ; ; break ; } }
rank: 610
score: 98.60204206194196
patch: return $NUMBER$ ; } else {
rank: 610
score: 98.45441228693181
patch: return i ; return i ; / ++ i ;
rank: 610
score: 98.33482666015625
patch: return - ) ;
rank: 610
score: 98.31040736607143
patch: return i - j ; }
rank: 610
score: 98.10581461588542
patch: string return i ; }
rank: 611
score: 98.61612955729167
patch: if ( j >= search CaMeL Len )
rank: 611
score: 98.60151890345982
patch: break * * * * /
rank: 611
score: 98.56563313802083
patch: return i ; return i ; System ;
rank: 611
score: 98.45409138997395
patch: return i ; return i ; break ; return i ;
rank: 611
score: 98.38111223493304
patch: return ( ] ) i ;
rank: 611
score: 98.30943952287946
patch: return ( search CaMeL Len ;
rank: 611
score: 98.105517578125
patch: return i ; default
rank: 612
score: 98.61592864990234
patch: return i - ; ; } }
rank: 612
score: 98.60125732421875
patch: return 1 * i ;
rank: 612
score: 98.56463623046875
patch: return i ; return - i ; ;
rank: 612
score: 98.45365767045455
patch: return i ; break ; if i + 1 ;
rank: 612
score: 98.40050252278645
patch: return $STRING$ : i ;
rank: 612
score: 98.37946428571429
patch: return search CaMeL Len - }
rank: 612
score: 98.33242797851562
patch: return ( } ) ;
rank: 612
score: 98.30903843470982
patch: character return - 0 ; }
rank: 612
score: 98.10480346679688
patch: s return i ;
rank: 613
score: 98.61463758680556
patch: return i - $NUMBER$ ; } else {
rank: 613
score: 98.59925188337054
patch: . if ; * * /
rank: 613
score: 98.56453857421874
patch: return 0 ; } return - - 1 ;
rank: 613
score: 98.45329938616071
patch: return ; { return i ;
rank: 613
score: 98.45036315917969
patch: return ( i - j ) ;
rank: 613
score: 98.39883422851562
patch: return this + i ;
rank: 613
score: 98.37867954799107
patch: return ( char ) $NUMBER$ ;
rank: 613
score: 98.33216349283855
patch: return char ; } }
rank: 613
score: 98.30636160714286
patch: return new int ch ; }
rank: 613
score: 98.10472869873047
patch: return this ;
rank: 614
score: 98.61445448133681
patch: return i - i ; } ; }
rank: 614
score: 98.598388671875
patch: return ; = i ; }
rank: 614
score: 98.37676130022321
patch: return i : - 1 ;
rank: 614
score: 98.33191935221355
patch: retval return i ; }
rank: 614
score: 98.30604771205357
patch: -- * / return i ;
rank: 614
score: 98.10316975911458
patch: return length + 1 ;
rank: 615
score: 98.61424424913194
patch: return i ; } } i ++ ;
rank: 615
score: 98.59688895089286
patch: . * * * / /
rank: 615
score: 98.56420220269098
patch: return i ; if i >= i ;
rank: 615
score: 98.37615966796875
patch: return ( byte ) $STRING$ ;
rank: 615
score: 98.30020141601562
patch: return - ++ j ;
rank: 616
score: 98.59647914341518
patch: return 1 [ 0 ] ;
rank: 616
score: 98.56412963867187
patch: return i ; return return - - 1 ;
rank: 616
score: 98.4529541015625
patch: return - 1 ; for i = i ;
rank: 616
score: 98.37350899832589
patch: return ( char ) null ;
rank: 616
score: 98.32920619419643
patch: return cs ; break ; }
rank: 616
score: 98.30008951822917
patch: return Math . length ;
rank: 616
score: 98.102294921875
patch: return int CaMeL Value ;
rank: 617
score: 98.6136474609375
patch: return i + ; } ; }
rank: 617
score: 98.59206717354911
patch: return 0 ; } return ;
rank: 617
score: 98.4527920809659
patch: return i ; ; / / ; return i ;
rank: 617
score: 98.44725036621094
patch: p [ j ] = ch ;
rank: 617
score: 98.39156494140624
patch: return i + }
rank: 617
score: 98.2975565592448
patch: return - j ; }
rank: 617
score: 98.10116577148438
patch: if ( ! i )
rank: 618
score: 98.61331939697266
patch: return i ; break ; ; }
rank: 618
score: 98.59133475167411
patch: . * * * * ;
rank: 618
score: 98.56349487304688
patch: return 0 ; i else if return 1 ;
rank: 618
score: 98.45222611860795
patch: return i ; for i * / return i ;
rank: 618
score: 98.32706996372768
patch: if ( ch == ch )
rank: 618
score: 98.29722900390625
patch: return - false ;
rank: 618
score: 98.10069783528645
patch: return j ; ; }
rank: 619
score: 98.61243353949652
patch: return i + $NUMBER$ ; } } ;
rank: 619
score: 98.59127197265624
patch: . return 0 ;
rank: 619
score: 98.56128540039063
patch: return i ; } if return return i ;
rank: 619
score: 98.45160466974431
patch: return i ; ; if ; ; return i ;
rank: 619
score: 98.38484700520833
patch: return this - 0 ;
rank: 619
score: 98.29491170247395
patch: ; return i ; }
rank: 619
score: 98.10060119628906
patch: if ( ;
rank: 620
score: 98.61200629340277
patch: if ( ch == $STRING$ ) break ;
rank: 620
score: 98.59011840820312
patch: . return 1 ;
rank: 620
score: 98.45103759765625
patch: return i ; ; if return 1 ; }
rank: 620
score: 98.44317626953125
patch: return new boolean [ ] { i
rank: 620
score: 98.2931416829427
patch: return Integer . length ;
rank: 620
score: 98.10048421223958
patch: *= 1 ; break ;
rank: 621
score: 98.61190032958984
patch: return count - i ; } }
rank: 621
score: 98.55905490451389
patch: return i ; if return 1 ; ;
rank: 621
score: 98.38104248046875
patch: return i . ( ) ;
rank: 621
score: 98.35868326822917
patch: return $STRING$ return i ;
rank: 621
score: 98.0982157389323
patch: if i != i ;
rank: 622
score: 98.58857073102679
patch: return 0 / i ; }
rank: 622
score: 98.55860731336806
patch: int i = i ; i -- ;
rank: 622
score: 98.44921875
patch: return - 1 ; return 1 ; return i ;
rank: 622
score: 98.35716901506696
patch: return ( int ) true ;
rank: 622
score: 98.3233133951823
patch: return i ? i ;
rank: 622
score: 98.28848266601562
patch: ++ ; return i ;
rank: 623
score: 98.6103515625
patch: return i ; } else return ; }
rank: 623
score: 98.55829467773438
patch: return i ; try { return i ; }
rank: 623
score: 98.44871826171875
patch: return i ; ; else return i ; }
rank: 623
score: 98.37081909179688
patch: return this - 1 ;
rank: 623
score: 98.35401262555804
patch: return i ) + 0 ;
rank: 623
score: 98.32093302408855
patch: buffer return i ; }
rank: 623
score: 98.287841796875
patch: return case - 1 ;
rank: 624
score: 98.60992431640625
patch: ( ; return i ; } }
rank: 624
score: 98.44849650065105
patch: return i ; ; return i ; else return i ;
rank: 624
score: 98.37015787760417
patch: return this . ch ;
rank: 624
score: 98.32083565848214
patch: return cs . ) ; }
rank: 624
score: 98.09361775716145
patch: = j ; break ;
rank: 625
score: 98.60911729600694
patch: if ( search CaMeL Len > 0 )
rank: 625
score: 98.58260091145833
patch: . if return i ;
rank: 625
score: 98.55770874023438
patch: return i ; ; if return - i ;
rank: 625
score: 98.44805908203125
patch: return 1 ; return $NUMBER$ ;
rank: 625
score: 98.3682149251302
patch: return i * true ;
rank: 625
score: 98.35163225446429
patch: result return i + 0 ;
rank: 625
score: 98.32049560546875
patch: return i ; } i ;
rank: 625
score: 98.09299723307292
patch: return ch + 1 ;
rank: 626
score: 98.6090087890625
patch: if ( ; break ; } ; }
rank: 626
score: 98.58159528459821
patch: } else * * * /
rank: 626
score: 98.55758666992188
patch: if int i = i ; return i ;
rank: 626
score: 98.44804077148437
patch: return 0 ; ; if i ++ ; ;
rank: 626
score: 98.36510213216145
patch: return new int i ;
rank: 626
score: 98.31819661458333
patch: return - ; } }
rank: 626
score: 98.28469848632812
patch: return size ;
rank: 627
score: 98.58037458147321
patch: . ; return i ; }
rank: 627
score: 98.55730590820312
patch: return i ; return i ; int * /
rank: 627
score: 98.44800821940105
patch: return i ; return i ; if i + 1 ;
rank: 627
score: 98.35951450892857
patch: return i * / ch ;
rank: 627
score: 98.34633091517857
patch: return ( int ) ( ;
rank: 627
score: 98.27611287434895
patch: return + i ; }
rank: 627
score: 98.09189860026042
patch: ret return i ; }
rank: 628
score: 98.60802544487848
patch: return i ; break ; } else {
rank: 628
score: 98.57987758091518
patch: return 0 i / i ;
rank: 628
score: 98.55689832899306
patch: return i ; while i < i ;
rank: 628
score: 98.44776611328125
patch: return i ; ; if i * 1 /
rank: 628
score: 98.35910470145089
patch: return i ? i + }
rank: 628
score: 98.09182739257812
patch: ++ ; break ; }
rank: 629
score: 98.57980782645089
patch: . return i ; } ;
rank: 629
score: 98.55681694878473
patch: return i ; return i ; for (
rank: 629
score: 98.44722123579545
patch: return i ; ; if i ? return i ;
rank: 629
score: 98.35764567057292
patch: return i - ch ;
rank: 629
score: 98.34426879882812
patch: return search CaMeL Chars [
rank: 629
score: 98.30842808314732
patch: return i ; } continue ;
rank: 629
score: 98.27078247070312
patch: return value return i ;
rank: 629
score: 98.08633422851562
patch: assert i < i ;
rank: 630
score: 98.60725620814732
patch: return i - count ; }
rank: 630
score: 98.57918875558036
patch: . = i ; break ;
rank: 630
score: 98.55623168945313
patch: char i = i ; return - 1 ;
rank: 630
score: 98.44706217447917
patch: return i ; ; if i / ; return i ;
rank: 630
score: 98.35746547154018
patch: return i . return i ;
rank: 630
score: 98.30814906529018
patch: return j ; } } }
rank: 630
score: 98.08632405598958
patch: return i = i ;
rank: 631
score: 98.60702514648438
patch: return i ^ i ; } }
rank: 631
score: 98.57870919363839
patch: return 0 i i ; }
rank: 631
score: 98.55547223772321
patch: return 0 + return i ;
rank: 631
score: 98.44605102539063
patch: return i ; ; if i * ++ /
rank: 631
score: 98.35526529947917
patch: return 0 + ch ;
rank: 631
score: 98.337646484375
patch: return i + start ;
rank: 631
score: 98.30767211914062
patch: return - ; }
rank: 632
score: 98.60628509521484
patch: return length - 1 ; } }
rank: 632
score: 98.57656424386161
patch: return i - length ; }
rank: 632
score: 98.5551025390625
patch: return i ; ; else { return 0 ;
rank: 632
score: 98.44512384588069
patch: return - i ; / / ; return i ;
rank: 632
score: 98.41312953404018
patch: return default [ i ] ;
rank: 632
score: 98.08225504557292
patch: return 0 ) ; }
rank: 633
score: 98.5765380859375
patch: return i ; } * ;
rank: 633
score: 98.55500623914931
patch: return i ; i * * i /
rank: 633
score: 98.44508870442708
patch: return i ; ; if i ++ ; return 1 ;
rank: 633
score: 98.35165405273438
patch: buf return i ;
rank: 633
score: 98.30227225167411
patch: return cs . ; } }
rank: 633
score: 98.081298828125
patch: return 1 + j ;
rank: 634
score: 98.5755615234375
patch: } } return i ;
rank: 634
score: 98.55499267578125
patch: return super . i ( i ; {
rank: 634
score: 98.44480202414773
patch: return 0 ; ; if i ++ ; break ;
rank: 634
score: 98.30194963727679
patch: throw new Exception ( ) ;
rank: 634
score: 98.2628173828125
patch: return - - true ;
rank: 634
score: 98.07843017578125
patch: return false ; break ;
rank: 635
score: 98.60431586371527
patch: return i ; } count ++ ; }
rank: 635
score: 98.5753173828125
patch: . * * / * /
rank: 635
score: 98.44457135881696
patch: return i ; ; else ;
rank: 635
score: 98.41018240792411
patch: return default [ j ] ;
rank: 636
score: 98.60347493489583
patch: if ( ; } } return i ;
rank: 636
score: 98.57524762834821
patch: return i / 0 ; }
rank: 636
score: 98.3311258951823
patch: return new char [ 0
rank: 636
score: 98.30043538411458
patch: return ( true ) ;
rank: 636
score: 98.26050821940105
patch: return size . length ;
rank: 637
score: 98.60262298583984
patch: return i ; } } while ;
rank: 637
score: 98.57431466238839
patch: return i ; } / ;
rank: 637
score: 98.55421956380208
patch: return i ; / ; if i ;
rank: 637
score: 98.44448852539062
patch: return 0 ; ; if i * ; return i ;
rank: 637
score: 98.07608642578126
patch: return 0 ) ;
rank: 638
score: 98.55368041992188
patch: return i ; ; ; if i -- ;
rank: 638
score: 98.44424874441964
patch: return 0 ; ; / ;
rank: 638
score: 98.32538713727679
patch: return new int [ - 1
rank: 639
score: 98.6022720336914
patch: return ; } } return i ;
rank: 639
score: 98.57337297712054
patch: return 1 ; } } }
rank: 639
score: 98.5533935546875
patch: return i ; i / * return 1 ;
rank: 639
score: 98.44329279119319
patch: return i ; return - i ; return i ;
rank: 639
score: 98.32513427734375
patch: return ( Character ) i ;
rank: 639
score: 98.29701450892857
patch: v . return i ; }
rank: 640
score: 98.4430264559659
patch: return i ; ; if return i + 1 ;
rank: 640
score: 98.34113420758929
patch: return * * / ch ;
rank: 640
score: 98.32128034319196
patch: return ( String ) ch ;
rank: 640
score: 98.29650006975446
patch: break ; } j ++ ;
rank: 640
score: 98.074462890625
patch: in return i ; }
rank: 641
score: 98.60202026367188
patch: return i * i + ; }
rank: 641
score: 98.57233537946429
patch: if ; * * * /
rank: 641
score: 98.55292426215277
patch: return i ; break ; int i ;
rank: 641
score: 98.44285074869792
patch: return i ; ; else
rank: 641
score: 98.33854166666667
patch: append ( ch ) ;
rank: 641
score: 98.31981404622395
patch: return char CaMeL At ;
rank: 641
score: 98.29605712890626
patch: return ) ; }
rank: 641
score: 98.2442626953125
patch: return - - false ;
rank: 641
score: 98.07444254557292
patch: return MIN _ VALUE ;
rank: 642
score: 98.571044921875
patch: return 0 ; } else }
rank: 642
score: 98.55237426757813
patch: return i ; ; return - - i ;
rank: 642
score: 98.44211832682292
patch: return - return i ;
rank: 642
score: 98.0732421875
patch: return i % i ;
rank: 643
score: 98.60103352864583
patch: if ( i < i ) break ;
rank: 643
score: 98.552001953125
patch: return i ; j else if return 1 ;
rank: 643
score: 98.44163004557292
patch: return 1 ; ; ;
rank: 643
score: 98.33307756696429
patch: return i ? i + 0
rank: 643
score: 98.3165283203125
patch: return return search CaMeL Len ;
rank: 643
score: 98.2951904296875
patch: default return i ;
rank: 643
score: 98.24090576171875
patch: return i true ; }
rank: 643
score: 98.07275390625
patch: return count i ; }
rank: 644
score: 98.59921603732639
patch: return i ; } } else return ;
rank: 644
score: 98.5514892578125
patch: return i ; else
rank: 644
score: 98.4411954012784
patch: return 0 ; ; if return i ; break ;
rank: 644
score: 98.38515218098958
patch: / / return i ;
rank: 644
score: 98.29315185546875
patch: p . return i ;
rank: 645
score: 98.5989990234375
patch: = true ; break ; } } ;
rank: 645
score: 98.56971086774554
patch: return i - 0 ; ;
rank: 645
score: 98.43996360085227
patch: return i ; break ; if i * ++ ;
rank: 645
score: 98.33086286272321
patch: return i ) + ch ;
rank: 645
score: 98.2362569173177
patch: return - length ; }
rank: 645
score: 98.07120768229167
patch: if ( ! i ;
rank: 646
score: 98.59806993272569
patch: return - 1 ; } break ; }
rank: 646
score: 98.56781005859375
patch: return i * return 1 ;
rank: 646
score: 98.55030653211806
patch: return i ; return return 1 ; ;
rank: 646
score: 98.31075032552083
patch: return i + value ;
rank: 646
score: 98.28928048270089
patch: return ( ) ; } }
rank: 646
score: 98.07082112630208
patch: return i - start ;
rank: 647
score: 98.5977554321289
patch: return i ; * / ; }
rank: 647
score: 98.56643240792411
patch: . } * * * /
rank: 647
score: 98.54932512555804
patch: int i = - 1 ;
rank: 647
score: 98.43865411931819
patch: return i ; return - - 1 ; break ;
rank: 647
score: 98.32976422991071
patch: return i + ( } ;
rank: 647
score: 98.28589884440105
patch: return ) ; } }
rank: 647
score: 98.06911214192708
patch: return 1 ; ; }
rank: 648
score: 98.59628731863839
patch: if ( i >= $NUMBER$ )
rank: 648
score: 98.54929809570312
patch: if return i ; return - - i ;
rank: 648
score: 98.4383877840909
patch: return i ; return i ; return i ; }
rank: 648
score: 98.32743326822917
patch: return 0 : i ;
rank: 648
score: 98.30712890625
patch: += search CaMeL Len ;
rank: 648
score: 98.28431193033855
patch: return ] ; } }
rank: 648
score: 98.23356119791667
patch: character return false ; }
rank: 649
score: 98.54924926757812
patch: return 0 ; ; return - - 1 ;
rank: 649
score: 98.43760463169643
patch: return 0 ; return false ;
rank: 649
score: 98.32631429036458
patch: return i + } }
rank: 649
score: 98.28413609095982
patch: -- j ; return i ;
rank: 650
score: 98.59531656901042
patch: return i - 1 + 1 ; }
rank: 650
score: 98.56290980747768
patch: return 1 ; } else ;
rank: 650
score: 98.54916042751736
patch: return i ; i else * i *
rank: 650
score: 98.32313028971355
patch: return ch + $STRING$ ;
rank: 650
score: 98.30336507161458
patch: return [ 0 ] ;
rank: 650
score: 98.28209431966145
patch: return cs . ; }
rank: 650
score: 98.23162841796875
patch: return - count ; }
rank: 651
score: 98.59368218315973
patch: return i + i + j ; }
rank: 651
score: 98.56181117466518
patch: . return i + i ;
rank: 651
score: 98.54892403738839
patch: = false ; return i ;
rank: 651
score: 98.43471457741477
patch: return 0 ; if i / ; return i ;
rank: 651
score: 98.3226318359375
patch: return * * / i ;
rank: 651
score: 98.28193359375
patch: switch ( j )
rank: 651
score: 98.06648763020833
patch: loop return i ; }
rank: 652
score: 98.59328206380208
patch: return ; } } } return i ;
rank: 652
score: 98.54820556640625
patch: return i ; int i if return i ;
rank: 652
score: 98.434326171875
patch: return i ; ; if i + ; return i ;
rank: 652
score: 98.32030232747395
patch: return i ? ch ;
rank: 652
score: 98.30214146205357
patch: return ( char ) start ;
rank: 652
score: 98.06638590494792
patch: return 1 + 1 ;
rank: 653
score: 98.59322781032986
patch: return i - ; } } else {
rank: 653
score: 98.55645751953125
patch: return 0 [ $NUMBER$ ] ;
rank: 653
score: 98.3157958984375
patch: return i - cs ;
rank: 653
score: 98.22373453776042
patch: return - null ; }
rank: 653
score: 98.06608072916667
patch: return super . ; }
rank: 654
score: 98.54786987304688
patch: return i ; ++ i ; return i ;
rank: 654
score: 98.43245442708333
patch: return i ; ; return i ; } return i ;
rank: 654
score: 98.30154854910714
patch: return search CaMeL Chars ) ;
rank: 654
score: 98.22222900390625
patch: character { return i ;
rank: 655
score: 98.58617292131696
patch: if ( i > $NUMBER$ ;
rank: 655
score: 98.55437360491071
patch: return i * i ; ;
rank: 655
score: 98.5478006998698
patch: if new return i ;
rank: 655
score: 98.42872203480114
patch: return i ; ; return i + - 1 ;
rank: 655
score: 98.36726888020833
patch: return ch . length ;
rank: 655
score: 98.30106898716518
patch: return - 0 . 0 ;
rank: 655
score: 98.06345621744792
patch: if ( i >= ;
rank: 656
score: 98.54750279017857
patch: } int i = i ;
rank: 656
score: 98.42769368489583
patch: return i ; ; if i = i - 1 ;
rank: 656
score: 98.31360880533855
patch: return ( 0 ) ;
rank: 656
score: 98.28048270089286
patch: else { return i ; }
rank: 656
score: 98.2210184733073
patch: character return true ; }
rank: 657
score: 98.58490862165179
patch: if ( i ; } }
rank: 657
score: 98.42693536931819
patch: return 0 ; if i * ; return i ;
rank: 657
score: 98.29793875558036
patch: return ( char ) char ;
rank: 657
score: 98.06143188476562
patch: return ~ i 1 ;
rank: 658
score: 98.54862758091518
patch: throw new Runtime CaMeL Exception ;
rank: 658
score: 98.54663764105902
patch: int i = i ; i ++ ;
rank: 658
score: 98.42667061941964
patch: return this ; return i ;
rank: 658
score: 98.30916922433036
patch: return - 0 + ch ;
rank: 658
score: 98.21605428059895
patch: ) return 0 ; }
rank: 658
score: 98.06107584635417
patch: short i = i ;
rank: 659
score: 98.58411516462054
patch: if ( i < $NUMBER$ )
rank: 659
score: 98.54841831752232
patch: return 1 ; } if ;
rank: 659
score: 98.54647216796874
patch: return i ; ; return return - 1 ;
rank: 659
score: 98.42598100142045
patch: return i ; for return i ; return i ;
rank: 659
score: 98.30535888671875
patch: return i . j ;
rank: 659
score: 98.27400425502232
patch: return true ; } } else
rank: 659
score: 98.21262613932292
patch: i return i ; }
rank: 659
score: 98.06057739257812
patch: return i >= i ;
rank: 660
score: 98.58400181361607
patch: = ; break ; } }
rank: 660
score: 98.54739815848214
patch: return count [ 0 ] ;
rank: 660
score: 98.42578125
patch: return i ; for i = i + 1 ;
rank: 660
score: 98.27295793805804
patch: -- i ; return i ;
rank: 660
score: 98.06028238932292
patch: search CaMeL Len ++ ;
rank: 661
score: 98.57651192801339
patch: ? return i ; } }
rank: 661
score: 98.54600306919643
patch: return i = 0 ; }
rank: 661
score: 98.42556762695312
patch: return i ; ; if i + i - 1 ;
rank: 661
score: 98.3568115234375
patch: throw ( int ) i ;
rank: 661
score: 98.2768046061198
patch: return i ( i ;
rank: 661
score: 98.27283325195313
patch: retval = i ;
rank: 661
score: 98.20948486328125
patch: return i false ;
rank: 661
score: 98.05848999023438
patch: s = i ;
rank: 662
score: 98.54590454101563
patch: return return i ; ; if return 1 ;
rank: 662
score: 98.54567173549107
patch: { * * * * /
rank: 662
score: 98.4252421061198
patch: return i ; ; return i ; while i 1 ;
rank: 662
score: 98.35314069475446
patch: return new ( ch ) ;
rank: 662
score: 98.3001200358073
patch: return i + cs ;
rank: 662
score: 98.27652994791667
patch: return $STRING$ - 0 ;
rank: 662
score: 98.05575561523438
patch: [ i ] break ;
rank: 663
score: 98.54540143694196
patch: int i return return i ;
rank: 663
score: 98.54531424386161
patch: return i = i ; }
rank: 663
score: 98.4234286221591
patch: return i ; ; / / / return i ;
rank: 663
score: 98.35185895647321
patch: return value ( ch ) ;
rank: 663
score: 98.27186802455357
patch: return cs ; } } }
rank: 663
score: 98.20351155598958
patch: return break ; } }
rank: 663
score: 98.05560302734375
patch: return 1 ) ; }
rank: 664
score: 98.54506225585938
patch: if ( i < i ; return i ;
rank: 664
score: 98.42314009232955
patch: return 0 ; ; if i * return 1 ;
rank: 664
score: 98.29688517252605
patch: return $STRING$ - ch ;
rank: 664
score: 98.269775390625
patch: return i + length ;
rank: 664
score: 98.05560302734375
patch: return j ; } ;
rank: 665
score: 98.54505266462054
patch: } int return return i ;
rank: 665
score: 98.54459635416667
patch: return 0 * $NUMBER$ ;
rank: 665
score: 98.42191938920455
patch: return 0 ; return i ; if return i ;
rank: 665
score: 98.2705078125
patch: break ; } i ++ ;
rank: 665
score: 98.05497233072917
patch: return - 1 ; default
rank: 666
score: 98.54480590820313
patch: if return i ; return - - 0 ;
rank: 666
score: 98.54304722377232
patch: return 0 ; } } else
rank: 666
score: 98.42165305397727
patch: return i ; ; if i + 1 ++ ;
rank: 666
score: 98.35002790178571
patch: return / * / i ;
rank: 666
score: 98.26707153320312
patch: start return i ;
rank: 666
score: 98.05429077148438
patch: = i == i ;
rank: 667
score: 98.57065255301339
patch: if ( i > 1 )
rank: 667
score: 98.54469807942708
patch: return value - i ;
rank: 667
score: 98.54163469587054
patch: return 1 ; } catch ;
rank: 667
score: 98.41924493963069
patch: return 0 ; ; if i : return i ;
rank: 667
score: 98.28858439127605
patch: return count - 0 ;
rank: 667
score: 98.26969401041667
patch: else { return i ;
rank: 667
score: 98.0535176595052
patch: return j - $NUMBER$ ;
rank: 668
score: 98.54437934027777
patch: return i ; return i ; int i
rank: 668
score: 98.41873168945312
patch: return - 1 ; return - 1 ; return i ;
rank: 668
score: 98.34566824776786
patch: return ( i ? i ;
rank: 668
score: 98.28776332310268
patch: return i * 0 . 0
rank: 668
score: 98.0524190266927
patch: return length ( ) ;
rank: 669
score: 98.543896484375
patch: return 0 ; ; / * return i ;
rank: 669
score: 98.5399169921875
patch: ( return i * i ;
rank: 669
score: 98.41761271158855
patch: return i ; / ;
rank: 669
score: 98.28551374162946
patch: return $STRING$ ? i + 0
rank: 669
score: 98.26817975725446
patch: break + 1 ; } }
rank: 669
score: 98.25979614257812
patch: return ( $STRING$ ) ;
rank: 669
score: 98.1939697265625
patch: return i ; false ;
rank: 669
score: 98.0521748860677
patch: buffer return 0 ; }
rank: 670
score: 98.56561279296875
patch: return i % i ; }
rank: 670
score: 98.54375610351562
patch: return i ; i else = i ; ;
rank: 670
score: 98.4171651204427
patch: if i = i ;
rank: 670
score: 98.26536342075893
patch: switch ( i ) { }
rank: 670
score: 98.05166625976562
patch: is return i ;
rank: 671
score: 98.56025913783482
patch: if ( i > 0 ;
rank: 671
score: 98.54358588324652
patch: if return i ; return 0 ; }
rank: 671
score: 98.4163106282552
patch: return - 1 ; if i / ; return i ;
rank: 672
score: 98.55970982142857
patch: if ( i < ; }
rank: 672
score: 98.54342651367188
patch: return return return i ;
rank: 672
score: 98.53920200892857
patch: . * * ; * /
rank: 672
score: 98.41596013849431
patch: return - 1 ; if return i ; break ;
rank: 672
score: 98.2842508951823
patch: return ch + i ;
rank: 672
score: 98.24167887369792
patch: return i + size ;
rank: 672
score: 98.18922932942708
patch: return i - false ;
rank: 672
score: 98.05151977539063
patch: value = i ;
rank: 673
score: 98.54342041015624
patch: return i ; ; / * i * /
rank: 673
score: 98.53888811383929
patch: . * ; * * /
rank: 673
score: 98.41469319661458
patch: / ; return i ;
rank: 673
score: 98.33714076450893
patch: return i / * ch ;
rank: 673
score: 98.28380330403645
patch: return ch + null ;
rank: 673
score: 98.18670654296875
patch: return ( j ) ;
rank: 674
score: 98.55585588727679
patch: if ( i >= ; }
rank: 674
score: 98.54278564453125
patch: } return i ; ;
rank: 674
score: 98.4144287109375
patch: return i ; ; / - * return i ;
rank: 674
score: 98.28177490234376
patch: return i - }
rank: 674
score: 98.26318969726563
patch: b = i ;
rank: 674
score: 98.05057779947917
patch: is return i ; }
rank: 675
score: 98.55557250976562
patch: if ( ! ; }
rank: 675
score: 98.54197387695312
patch: return return i ; return - - 1 ;
rank: 675
score: 98.53786795479911
patch: return 1 * i ; }
rank: 675
score: 98.41400701349431
patch: return 0 ; ; if return 1 ; break ;
rank: 675
score: 98.26243082682292
patch: result += i ; }
rank: 675
score: 98.18581136067708
patch: return * * * /
rank: 675
score: 98.05027262369792
patch: return $NUMBER$ ; break ;
rank: 676
score: 98.55449567522321
patch: if ( i >= $NUMBER$ ;
rank: 676
score: 98.53716169084821
patch: } / * * * /
rank: 676
score: 98.41339666193181
patch: return i ; ; ; int i = i ;
rank: 676
score: 98.33128865559895
patch: return size ( ) ;
rank: 676
score: 98.18520100911458
patch: return Integer . 1 ;
rank: 676
score: 98.04966227213542
patch: return ~ ~ i ;
rank: 677
score: 98.54171413845486
patch: return - 1 ; return i ; }
rank: 677
score: 98.53542073567708
patch: return $NUMBER$ - i ;
rank: 677
score: 98.41321910511364
patch: return i ; break ; if i - 1 ;
rank: 677
score: 98.27603149414062
patch: return i * false ;
rank: 677
score: 98.25908551897321
patch: name return i ; } }
rank: 677
score: 98.0472900390625
patch: * / break ;
rank: 678
score: 98.550927734375
patch: if ( ; }
rank: 678
score: 98.54140625
patch: return i ; ; if i ; break ;
rank: 678
score: 98.53504289899554
patch: return i ; return length ;
rank: 678
score: 98.41246448863636
patch: return 0 ; if i - ; return i ;
rank: 678
score: 98.25764973958333
patch: p return i ; }
rank: 678
score: 98.18357340494792
patch: int i = 0 ;
rank: 678
score: 98.04628499348958
patch: if i != i )
rank: 679
score: 98.55086844308036
patch: char ; return i ; }
rank: 679
score: 98.5347188313802
patch: return $NUMBER$ * i ;
rank: 679
score: 98.4121981534091
patch: return - 1 ; if i : return i ;
rank: 679
score: 98.27142333984375
patch: return i int [ ]
rank: 679
score: 98.21780395507812
patch: return / * * /
rank: 679
score: 98.1820068359375
patch: -- return i ; }
rank: 679
score: 98.04610188802083
patch: next return i ; }
rank: 680
score: 98.53444126674107
patch: . * * * ; /
rank: 680
score: 98.41112263997395
patch: return i ; ; = i ; ; return i ;
rank: 680
score: 98.25726318359375
patch: pos return i ; }
rank: 680
score: 98.17655436197917
patch: return * i ; }
rank: 680
score: 98.04442342122395
patch: return ~ i ; ;
rank: 681
score: 98.54085083007813
patch: return i ; for i { return 1 ;
rank: 681
score: 98.41075550426136
patch: return - 1 ; break ; if return i ;
rank: 681
score: 98.32162039620536
patch: return Integer . length 1 ;
rank: 681
score: 98.26753743489583
patch: return i + ) ;
rank: 681
score: 98.04342651367188
patch: return 0 return 0 ;
rank: 682
score: 98.53243582589286
patch: return 0 ; } ; ;
rank: 682
score: 98.41060014204545
patch: return - i ; return - 1 ; break ;
rank: 682
score: 98.2664082845052
patch: return is CaMeL Empty ;
rank: 682
score: 98.25551350911458
patch: return - - ) ;
rank: 682
score: 98.17514038085938
patch: return new int ch ;
rank: 682
score: 98.04322306315105
patch: return ++ 0 ; }
rank: 683
score: 98.54011840820313
patch: return i ; i else return i ; ;
rank: 683
score: 98.53238351004464
patch: [ 0 ] return i ;
rank: 683
score: 98.4078877766927
patch: return 1 ; ; if i ++ ; return i ;
rank: 683
score: 98.26626586914062
patch: return start : i ;
rank: 683
score: 98.2538350423177
patch: buf return i ; }
rank: 683
score: 98.17486572265625
patch: return -- j ; }
rank: 683
score: 98.0428466796875
patch: return 1 - 1 ;
rank: 684
score: 98.53992571149554
patch: return i ; / i ;
rank: 684
score: 98.40735880533855
patch: return i ; ; = i ; return - 1 ;
rank: 684
score: 98.252197265625
patch: return ; } }
rank: 684
score: 98.042724609375
patch: = i - i ;
rank: 685
score: 98.53968505859375
patch: return i ; * / if return i ;
rank: 685
score: 98.5357666015625
patch: if ( ch == $STRING$ ;
rank: 685
score: 98.53220912388393
patch: } } if return i ;
rank: 685
score: 98.40724875710227
patch: return i ; ; if i - 1 ++ ;
rank: 685
score: 98.25099690755208
patch: { return true ; }
rank: 685
score: 98.20961303710938
patch: return return 0 ;
rank: 685
score: 98.17355346679688
patch: character return $STRING$ ; }
rank: 685
score: 98.04209899902344
patch: return ] ;
rank: 686
score: 98.53887939453125
patch: return i ; return i ; * ;
rank: 686
score: 98.53279331752232
patch: if ; ; break ; }
rank: 686
score: 98.40559895833333
patch: return 0 ; return i ; if i - 1 ;
rank: 686
score: 98.30858764648437
patch: return value ; }
rank: 686
score: 98.17268880208333
patch: cs return i ; }
rank: 686
score: 98.03774007161458
patch: default return - 1 ;
rank: 687
score: 98.53830295138889
patch: throw new $STRING$ ; return i ; }
rank: 687
score: 98.53046526227679
patch: . * * * / }
rank: 687
score: 98.40559525923295
patch: return i ; ; ; if i * ++ ;
rank: 687
score: 98.30399169921876
patch: ch return i ;
rank: 687
score: 98.25
patch: return char ) i ; }
rank: 687
score: 98.03722127278645
patch: return count - j ;
rank: 688
score: 98.53804321289063
patch: return i ; } if i < i ;
rank: 688
score: 98.40390846946023
patch: return i ; return i + i + i ;
rank: 688
score: 98.24812825520833
patch: byte return i ; }
rank: 688
score: 98.20167032877605
patch: return $STRING$ - 1 ;
rank: 688
score: 98.03702799479167
patch: * / return j ;
rank: 689
score: 98.537890625
patch: return i ; ; i else = i ;
rank: 689
score: 98.52959333147321
patch: return ; * * * /
rank: 689
score: 98.40269978841145
patch: return i ; return - 1 ; } return i ;
rank: 689
score: 98.24810791015625
patch: state return i ;
rank: 689
score: 98.19303385416667
patch: return this . value ;
rank: 689
score: 98.16806030273438
patch: return i ; true ;
rank: 689
score: 98.03525797526042
patch: |= i + 1 ;
rank: 690
score: 98.5377197265625
patch: return i ; return i ; for i {
rank: 690
score: 98.52859933035714
patch: if ( i != ; }
rank: 690
score: 98.4024149576823
patch: i return i ; ;
rank: 690
score: 98.24901326497395
patch: return i - } }
rank: 690
score: 98.24684651692708
patch: result { return i ;
rank: 690
score: 98.19212849934895
patch: return i . char CaMeL
rank: 690
score: 98.16611735026042
patch: { return 1 ; }
rank: 690
score: 98.03517659505208
patch: * /
rank: 691
score: 98.5371337890625
patch: return i ; ; / * return 0 ;
rank: 691
score: 98.52869524274554
patch: return ; = 0 ; }
rank: 691
score: 98.40154474431819
patch: return - i ; / / / return i ;
rank: 691
score: 98.24422607421874
patch: ! return i ;
rank: 691
score: 98.2413330078125
patch: return name . length ;
rank: 692
score: 98.5359619140625
patch: return i ; / * * return 1 ;
rank: 692
score: 98.52573939732143
patch: . return i - i ;
rank: 692
score: 98.40000221946023
patch: return 0 ; return i ; if i 1 ;
rank: 692
score: 98.28608049665179
patch: return int CaMeL Value 1 ;
rank: 692
score: 98.244140625
patch: retval return i ;
rank: 692
score: 98.03492228190105
patch: if i >= i ;
rank: 693
score: 98.53578491210938
patch: return i ; return i ; break ; }
rank: 693
score: 98.52338518415179
patch: } if ; return i ;
rank: 693
score: 98.51974923270089
patch: return i * ; } }
rank: 693
score: 98.3994649251302
patch: return i ; ; if i - ; return i ;
rank: 693
score: 98.2436279296875
patch: return i ] ;
rank: 693
score: 98.187255859375
patch: return ch . i ;
rank: 693
score: 98.16344197591145
patch: character return - i ;
rank: 693
score: 98.03371175130208
patch: return - 1 i ;
rank: 694
score: 98.53539428710937
patch: return i ; ; if return - 0 ;
rank: 694
score: 98.52230834960938
patch: return 0 + $NUMBER$ ;
rank: 694
score: 98.39905894886364
patch: return - 1 ; if return 1 ; break ;
rank: 694
score: 98.28524344308036
patch: return name . length 1 ;
rank: 694
score: 98.24289376395089
patch: return true ; } else {
rank: 694
score: 98.2349344889323
patch: return this : i ;
rank: 694
score: 98.16134643554688
patch: ch return i ; }
rank: 695
score: 98.53513009207589
patch: = i ; return 1 ;
rank: 695
score: 98.39813232421875
patch: return 0 ; ; if return i ; return i ;
rank: 695
score: 98.01304321289062
patch: return -- i ;
rank: 696
score: 98.535009765625
patch: return i ; if i ; return 1 ;
rank: 696
score: 98.3944091796875
patch: return i ; ; if i + return i ;
rank: 696
score: 98.23152669270833
patch: return true + i ;
rank: 697
score: 98.5345458984375
patch: return i + i ; if return 1 ;
rank: 697
score: 98.51738630022321
patch: return 0 ; ; } }
rank: 697
score: 98.39427601207386
patch: return 0 ; ; if i * i ++ ;
rank: 697
score: 98.27755301339286
patch: return i ) . length ;
rank: 697
score: 98.24142892020089
patch: return cs ; } break ;
rank: 698
score: 98.53441162109375
patch: return - 1 ; ; if return 1 ;
rank: 698
score: 98.39407348632812
patch: return i ; return - 1 ; else return i ;
rank: 698
score: 98.24138532366071
patch: pos = search CaMeL Len ;
rank: 698
score: 98.22622680664062
patch: return 0 . 1 ;
rank: 698
score: 98.1829121907552
patch: switch ( ch ) {
rank: 698
score: 98.157275390625
patch: throw null ; }
rank: 699
score: 98.53399658203125
patch: throw new Exception ( $STRING$ ; return i ;
rank: 699
score: 98.51461791992188
patch: ? return i ; }
rank: 699
score: 98.39377663352273
patch: return - 1 ; / / / return i ;
rank: 699
score: 98.2400614420573
patch: return ( ch ; }
rank: 699
score: 98.2196756998698
patch: return i * ch ;
rank: 699
score: 98.15570678710938
patch: character return 1 ;
rank: 700
score: 98.51340157645089
patch: if ( i < $NUMBER$ ;
rank: 700
score: 98.5133565266927
patch: return 0 | i ;
rank: 700
score: 98.39222208658855
patch: return - 1 ; break ; if i - 1 ;
rank: 700
score: 98.23904854910714
patch: { return i ; break ;
rank: 700
score: 98.1554667154948
patch: return - - j ;
rank: 700
score: 97.98892822265626
patch: return 0 ; default
rank: 701
score: 98.51267787388393
patch: return i ; return max ;
rank: 701
score: 98.39194557883523
patch: return i ; ; if i + return 1 ;
rank: 701
score: 98.23817661830357
patch: result = i ; } }
rank: 701
score: 98.21828206380208
patch: return System . length ;
rank: 701
score: 97.98236694335938
patch: return i $NUMBER$ ;
rank: 702
score: 98.53291625976563
patch: if i { return i ; return i ;
rank: 702
score: 98.51266043526786
patch: . * / * * /
rank: 702
score: 98.51262555803571
patch: c ; return i ; }
rank: 702
score: 98.39164595170455
patch: return - 1 ; if i ++ ; break ;
rank: 702
score: 98.23658970424107
patch: return int ) i ; }
rank: 702
score: 98.21685028076172
patch: return break ;
rank: 703
score: 98.53254530164931
patch: return 0 ; return i ; } ;
rank: 703
score: 98.51079450334821
patch: if ( ! ; } }
rank: 703
score: 98.39161265980114
patch: return i ; ; if i ? return 1 ;
rank: 703
score: 98.21290079752605
patch: return i | i ;
rank: 703
score: 98.17078653971355
patch: return ( cs ) ;
rank: 703
score: 98.15150960286458
patch: return j - 0 ;
rank: 704
score: 98.53238351004464
patch: = true ; return i ;
rank: 704
score: 98.50844029017857
patch: if ( i > ; }
rank: 704
score: 98.39134724934895
patch: return - i ; if i ++ ; return i ;
rank: 704
score: 98.26395263671876
patch: ret return i ;
rank: 704
score: 98.212158203125
patch: return length + ch ;
rank: 704
score: 98.15048828125
patch: return case 1 ;
rank: 705
score: 98.53221638997395
patch: if ( return i ;
rank: 705
score: 98.51104736328125
patch: . * * return i ;
rank: 705
score: 98.39097086588542
patch: return - 1 ; if i * ; return i ;
rank: 705
score: 98.2334696451823
patch: return true ; } else
rank: 705
score: 98.21199544270833
patch: return i . name ;
rank: 705
score: 98.15018717447917
patch: { ch = ch ;
rank: 706
score: 98.53213161892361
patch: return return 1 ; } if i ;
rank: 706
score: 98.51001848493304
patch: ( ; * * * /
rank: 706
score: 98.39077758789062
patch: i ; return 0 ;
rank: 706
score: 98.23283168247768
patch: return count ; } } }
rank: 706
score: 98.14864095052083
patch: return i && j ;
rank: 706
score: 97.96064758300781
patch: / * /
rank: 707
score: 98.53082275390625
patch: } if return i ;
rank: 707
score: 98.50879778180804
patch: return 0 * $NUMBER$ ; }
rank: 707
score: 98.39028098366477
patch: return i ; for i / / return i ;
rank: 707
score: 98.25980834960937
patch: result return 0 ;
rank: 707
score: 98.1474609375
patch: return Integer . 0 ;
rank: 708
score: 98.50101143973214
patch: if ( i < ; ;
rank: 708
score: 98.3895263671875
patch: return i ; ; return i ; return - 1 ;
rank: 708
score: 98.23067016601563
patch: break - 1 ;
rank: 708
score: 98.16693115234375
patch: return ( char ) ;
rank: 708
score: 98.14720662434895
patch: { ch = i ;
rank: 708
score: 97.9490234375
patch: value return 0 ;
rank: 709
score: 98.16680908203125
patch: return this . $STRING$ ;
rank: 709
score: 97.9422607421875
patch: return i ++ ;
rank: 710
score: 98.52786690848214
patch: return i ; ; ; *
rank: 710
score: 98.50690569196429
patch: return 0 * i ; ;
rank: 710
score: 98.38786177201705
patch: return i ; ; if i ; = i ;
rank: 710
score: 98.22858537946429
patch: result { return i ; }
rank: 710
score: 98.197265625
patch: return null + ch ;
rank: 710
score: 97.94180908203126
patch: is i ++ ;
rank: 711
score: 98.50313023158482
patch: / * * return i ;
rank: 711
score: 98.38712935014205
patch: return i ; ; if i / return i ;
rank: 711
score: 98.22848946707589
patch: result = search CaMeL Len ;
rank: 711
score: 98.16504923502605
patch: return i - size ;
rank: 711
score: 98.14488728841145
patch: return TRUE ; } }
rank: 711
score: 97.93224487304687
patch: r = i ;
rank: 712
score: 98.52573939732143
patch: try { return - 1 ;
rank: 712
score: 98.50274658203125
patch: return i ; length ++ ;
rank: 712
score: 98.38660777698864
patch: return i ; ; = i + - 1 ;
rank: 712
score: 98.22809448242188
patch: c return i ;
rank: 712
score: 98.16074625651042
patch: return this . start ;
rank: 713
score: 98.525634765625
patch: break ; ; return i ;
rank: 713
score: 98.19270833333333
patch: return false + i ;
rank: 713
score: 98.15438842773438
patch: return this . true ;
rank: 713
score: 98.14420572916667
patch: return - - $NUMBER$ ;
rank: 713
score: 97.93052368164062
patch: return i + ;
rank: 714
score: 98.5233154296875
patch: return i ; i break ;
rank: 714
score: 98.50062779017857
patch: return start [ i ] ;
rank: 714
score: 98.49029541015625
patch: return -- i ; } }
rank: 714
score: 98.38629705255681
patch: return i ; ; if i * ; break ;
rank: 714
score: 98.22533307756696
patch: switch ( j + 1 )
rank: 714
score: 98.19047037760417
patch: return i . ) ;
rank: 714
score: 98.1439208984375
patch: return length + i ;
rank: 714
score: 97.93041381835937
patch: char return 0 ;
rank: 715
score: 98.38615278764205
patch: return i ; return - 1 ; break ; ;
rank: 715
score: 98.22471110026042
patch: return cs . count ;
rank: 715
score: 98.18876139322917
patch: throw 0 + ch ;
rank: 715
score: 98.1426025390625
patch: return TRUE ; }
rank: 715
score: 97.92954711914062
patch: return 1 ) ;
rank: 716
score: 98.49818638392857
patch: return i i i ; }
rank: 716
score: 98.38585408528645
patch: return 0 ; ; if return 1 ; return i ;
rank: 716
score: 98.22435651506696
patch: result return i ; break ;
rank: 716
score: 98.14676920572917
patch: return ! return i ;
rank: 716
score: 97.9261474609375
patch: buffer return i ;
rank: 717
score: 98.49815877278645
patch: return 0 * 1 ;
rank: 717
score: 98.38447709517045
patch: return i ; ; if ; return i ; ;
rank: 717
score: 98.23563639322917
patch: return Boolean . length ;
rank: 717
score: 98.22208658854167
patch: return ch ; break ;
rank: 717
score: 98.14599609375
patch: return i : $STRING$ ;
rank: 717
score: 98.14075724283855
patch: throw null ; } }
rank: 717
score: 97.9261474609375
patch: return j ; ;
rank: 718
score: 98.49815877278645
patch: return 0 - length ;
rank: 718
score: 98.38417561848958
patch: return i ; ; if i * ; return 1 ;
rank: 718
score: 98.1451904296875
patch: return new int [
rank: 719
score: 98.49763706752232
patch: return * * i ; }
rank: 719
score: 98.48457554408482
patch: if ( ch != $STRING$ ;
rank: 719
score: 98.3836337002841
patch: return ( i - 1 ; : return i ;
rank: 719
score: 98.18388366699219
patch: return ) ;
rank: 719
score: 98.13939208984375
patch: return - $STRING$ ;
rank: 719
score: 97.9250244140625
patch: return length i ;
rank: 720
score: 98.5165506998698
patch: return return - 0 ;
rank: 720
score: 98.49742780412946
patch: return 0 + $NUMBER$ ; }
rank: 720
score: 98.38341175426136
patch: return - 1 ; if i * return i ;
rank: 720
score: 98.228759765625
patch: result return - 1 ;
rank: 720
score: 98.22019449869792
patch: val return i ; }
rank: 720
score: 98.1795654296875
patch: return i : ch ;
rank: 720
score: 98.14005533854167
patch: return Boolean . 0 ;
rank: 720
score: 98.13693237304688
patch: return - j ;
rank: 720
score: 97.92386627197266
patch: = true ;
rank: 721
score: 98.51648821149554
patch: return next ( i ) ;
rank: 721
score: 98.49656459263393
patch: return 0 * 1 ; }
rank: 721
score: 98.48338099888393
patch: ( ; return i ; }
rank: 721
score: 98.38169352213542
patch: return - 1 ; break ; if i + 1 ;
rank: 721
score: 98.2283223470052
patch: return Long . length ;
rank: 721
score: 98.22012765066964
patch: switch ( cs CaMeL Len )
rank: 721
score: 98.17922973632812
patch: return count : i ;
rank: 721
score: 97.91301879882812
patch: skip return i ;
rank: 722
score: 98.49468122209821
patch: . = i ; * /
rank: 722
score: 98.38168334960938
patch: return - 1 ; return i ; return - 1 ;
rank: 722
score: 98.13505045572917
patch: return / i ; }
rank: 722
score: 97.90460205078125
patch: next return i ;
rank: 723
score: 98.49431501116071
patch: . return $NUMBER$ ; } }
rank: 723
score: 98.47995431082589
patch: if ( i == ; }
rank: 723
score: 98.3812255859375
patch: return 0 ; ; if i ++ ; return 1 ;
rank: 723
score: 98.21663120814732
patch: res return i ; } }
rank: 723
score: 98.13646443684895
patch: return new int 1 ;
rank: 723
score: 97.900634765625
patch: s return 0 ;
rank: 724
score: 98.51522827148438
patch: } return i ; }
rank: 724
score: 98.47906494140625
patch: return i % ; }
rank: 724
score: 98.3805264559659
patch: return - 1 ; / / i / ++ ;
rank: 724
score: 98.21614583333333
patch: break [ j ] ;
rank: 724
score: 98.17683919270833
patch: return j + ch ;
rank: 724
score: 98.13541666666667
patch: -= search CaMeL Len ;
rank: 724
score: 98.13240559895833
patch: return list . length ;
rank: 724
score: 97.89942169189453
patch: return max ;
rank: 725
score: 98.51239013671875
patch: return i return i ;
rank: 725
score: 98.49161202566964
patch: return 0 i ; } ;
rank: 725
score: 98.47867257254464
patch: if ( i ; break ;
rank: 725
score: 98.38043767755681
patch: return i ; if i / * return i ;
rank: 725
score: 98.17212931315105
patch: return ch + 0 ;
rank: 725
score: 98.13317260742187
patch: return $STRING$ ) ;
rank: 725
score: 98.13108317057292
patch: return j + 0 ;
rank: 726
score: 98.5098876953125
patch: return return - 1 ; ;
rank: 726
score: 98.49131266276042
patch: return start ; } }
rank: 726
score: 98.47760881696429
patch: return i % $NUMBER$ ; }
rank: 726
score: 98.37827370383523
patch: return ( return i - i ; return i ;
rank: 726
score: 98.22074584960937
patch: pos return i ;
rank: 726
score: 98.21527099609375
patch: v return i ;
rank: 726
score: 98.17078857421875
patch: return i true ;
rank: 726
score: 98.1305643717448
patch: return return i 1 ;
rank: 726
score: 97.89173583984375
patch: if ( ! ;
rank: 727
score: 98.50712076822917
patch: return return - i ;
rank: 727
score: 98.49074009486607
patch: return 1 + 0 ; }
rank: 727
score: 98.47438267299107
patch: return i ++ ; } }
rank: 727
score: 98.37807210286458
patch: return 0 ; ; if i + i - 1 ;
rank: 727
score: 98.21457926432292
patch: break + 0 ; }
rank: 727
score: 98.17045084635417
patch: return $STRING$ : ch ;
rank: 727
score: 98.13004557291667
patch: character return - 0 ;
rank: 727
score: 97.88897705078125
patch: j = i ;
rank: 728
score: 98.5047098795573
patch: } return return i ;
rank: 728
score: 98.47408040364583
patch: return i >= ; }
rank: 728
score: 98.37693093039773
patch: return - i ; break ; if return i ;
rank: 728
score: 98.2137451171875
patch: return char ) ; }
rank: 728
score: 98.20912679036458
patch: return default = i ;
rank: 728
score: 98.1697998046875
patch: return length - 0 ;
rank: 728
score: 98.12992350260417
patch: static return i ; }
rank: 728
score: 98.12952677408855
patch: return new int [ i
rank: 728
score: 97.88740234375
patch: -- ; break ;
rank: 729
score: 98.48033650716145
patch: . ; return i ;
rank: 729
score: 98.3765869140625
patch: return i ; ; if i -- ; return i ;
rank: 729
score: 98.16953531901042
patch: return 0 - ch ;
rank: 729
score: 98.12682088216145
patch: return i = 0 ;
rank: 730
score: 98.50425502232143
patch: char i = return i ;
rank: 730
score: 98.37607828776042
patch: return i ; for i
rank: 730
score: 98.16946411132812
patch: return ch : i ;
rank: 730
score: 98.1275634765625
patch: return value ; } }
rank: 730
score: 97.88086547851563
patch: value i ++ ;
rank: 731
score: 98.47902425130208
patch: * * * * /
rank: 731
score: 98.3758544921875
patch: return 1 ; ; if i + i ++ ;
rank: 731
score: 98.2096923828125
patch: pos = i ;
rank: 731
score: 98.20684814453125
patch: return index CaMeL Of CaMeL
rank: 731
score: 98.16904703776042
patch: return length - j ;
rank: 731
score: 97.87833862304687
patch: is return 0 ;
rank: 732
score: 98.50217110770089
patch: return i ; break ; *
rank: 732
score: 98.37490844726562
patch: return i ; ; return i + i - 1 ;
rank: 732
score: 98.20925903320312
patch: return ( j ; }
rank: 732
score: 98.20554606119792
patch: return cs . start ;
rank: 732
score: 98.16526285807292
patch: return ch - i ;
rank: 732
score: 97.87711181640626
patch: and return i ;
rank: 733
score: 98.50150553385417
patch: for return i ; ;
rank: 733
score: 98.47269694010417
patch: return $NUMBER$ ; } else
rank: 733
score: 98.46616908482143
patch: c . return i ; }
rank: 733
score: 98.374267578125
patch: return i ; return i ; if i / 1 ;
rank: 733
score: 98.20902506510417
patch: modifiers return i ; }
rank: 733
score: 98.1649881998698
patch: return start : 0 ;
rank: 733
score: 98.12598673502605
patch: return 1 ; * /
rank: 733
score: 98.11288452148438
patch: return this . 0 ;
rank: 733
score: 97.87682495117187
patch: synchronized ( this )
rank: 734
score: 98.46595255533855
patch: return $NUMBER$ ; } ;
rank: 734
score: 98.3741122159091
patch: return i ; ; if return i + i ;
rank: 734
score: 98.2019287109375
patch: tmp return i ;
rank: 734
score: 98.12387084960938
patch: return ! i ; }
rank: 734
score: 98.11251220703124
patch: text return i ;
rank: 734
score: 97.87569580078124
patch: token return i ;
rank: 735
score: 98.49805559430804
patch: = null ; return i ;
rank: 735
score: 98.46395438058036
patch: return i - ; ; }
rank: 735
score: 98.3732577237216
patch: return 0 ; ; if i - i ++ ;
rank: 735
score: 98.16072591145833
patch: return start . i ;
rank: 735
score: 98.123779296875
patch: return - size ; }
rank: 736
score: 98.46010335286458
patch: return * * i ;
rank: 736
score: 98.20279947916667
patch: impl return i ; }
rank: 736
score: 98.1930440266927
patch: return next = i ;
rank: 736
score: 98.15810139973958
patch: return i | ch ;
rank: 736
score: 98.11041259765625
patch: return new char ch ;
rank: 737
score: 98.4923095703125
patch: if return return i ;
rank: 737
score: 98.4600830078125
patch: return 0 / 0 ;
rank: 737
score: 98.37285822088069
patch: return - 1 ; if i * return 1 ;
rank: 737
score: 98.11913045247395
patch: return - - $STRING$ ;
rank: 737
score: 97.866845703125
patch: return >= 1 ;
rank: 738
score: 98.4583028157552
patch: . if return 0 ;
rank: 738
score: 98.37162272135417
patch: return 0 ; ; if i / ; return i ;
rank: 738
score: 98.20213826497395
patch: return cs . ) ;
rank: 738
score: 98.11843872070312
patch: ++ return i ; }
rank: 738
score: 98.10549926757812
patch: return i - max ;
rank: 738
score: 97.8637939453125
patch: return 1 i ;
rank: 739
score: 98.48893519810268
patch: return i ; i else {
rank: 739
score: 98.37135823567708
patch: return i ; ; if return i ; return 1 ;
rank: 739
score: 98.18068440755208
patch: return value + 0 ;
rank: 739
score: 98.15672810872395
patch: return count + ch ;
rank: 739
score: 98.11757405598958
patch: return - ++ i ;
rank: 739
score: 97.86329345703125
patch: s i ++ ;
rank: 740
score: 98.4608642578125
patch: return i - ;
rank: 740
score: 98.37109375
patch: return - 1 ; return i ; while i 1 ;
rank: 740
score: 98.18034057617187
patch: o return i ;
rank: 740
score: 98.15659586588542
patch: return ch . value ;
rank: 740
score: 98.11754353841145
patch: return cs return i ;
rank: 740
score: 97.86246948242187
patch: m = i ;
rank: 741
score: 98.48671177455357
patch: return ch ; return i ;
rank: 741
score: 98.46083286830357
patch: if ( i > 1 ;
rank: 741
score: 98.37095133463542
patch: return i ; return - - 1 ; return i ;
rank: 741
score: 98.09334309895833
patch: return new char [ i
rank: 741
score: 97.86243896484375
patch: item return i ;
rank: 742
score: 98.48597935267857
patch: int i return i ; ;
rank: 742
score: 98.46062360491071
patch: this ; return i ; }
rank: 742
score: 98.37082926432292
patch: return i ; } if i ++ ; return i ;
rank: 742
score: 97.855859375
patch: tag return i ;
rank: 743
score: 98.48556082589286
patch: return i + i i ;
rank: 743
score: 98.46034458705357
patch: } else return i ; }
rank: 743
score: 98.43433634440105
patch: return 1 + 0 ;
rank: 743
score: 98.17564900716145
patch: return i . ch ;
rank: 743
score: 98.1448974609375
patch: return ch - 0 ;
rank: 744
score: 98.48487200055804
patch: / * ; return i ;
rank: 744
score: 98.43162027994792
patch: . return i ; ;
rank: 744
score: 98.36812337239583
patch: return 0 ; ; if i * / return i ;
rank: 744
score: 98.19424438476562
patch: f return i ; }
rank: 745
score: 98.48345947265625
patch: return 0 ; return value ;
rank: 745
score: 98.4278564453125
patch: return 0 i i ;
rank: 745
score: 98.3681131998698
patch: return ( return i ;
rank: 745
score: 98.11147054036458
patch: return i 0 ; }
rank: 745
score: 98.08563232421875
patch: return i . size ;
rank: 745
score: 97.84969482421874
patch: of return i ;
rank: 746
score: 98.4827880859375
patch: } return i ; break ;
rank: 746
score: 98.45853969029018
patch: if ( i <= $NUMBER$ )
rank: 746
score: 98.36634318033855
patch: return i ; ; if i * ; = i ;
rank: 746
score: 98.1713358561198
patch: return max = i ;
rank: 746
score: 98.13812866210938
patch: str return i ;
rank: 746
score: 98.11116536458333
patch: ; return 0 ; }
rank: 746
score: 97.84878540039062
patch: = - 1 ;
rank: 747
score: 98.48224748883929
patch: return 0 + i ; ;
rank: 747
score: 98.45830426897321
patch: if ( ch != ; }
rank: 747
score: 98.427490234375
patch: return $NUMBER$ + i ;
rank: 747
score: 98.3648173014323
patch: return i ; return i ; / * return i ;
rank: 747
score: 98.18606567382812
patch: entry return i ; }
rank: 747
score: 98.11072387695313
patch: ) return i ;
rank: 747
score: 98.07961018880208
patch: return i + this ;
rank: 747
score: 97.84617614746094
patch: break false ;
rank: 748
score: 98.4569091796875
patch: return i ; / * ;
rank: 748
score: 98.426513671875
patch: . if ; * /
rank: 748
score: 98.36265055338542
patch: return i ; ; if i = i ; break ;
rank: 748
score: 98.1859639485677
patch: add ( ch ) ;
rank: 748
score: 98.11636962890626
patch: return i ? 0
rank: 749
score: 98.48004150390625
patch: return 0 ; i -- ;
rank: 749
score: 98.42284138997395
patch: . ; * * /
rank: 749
score: 98.36171468098958
patch: return i ; ; return i + i / 1 ;
rank: 749
score: 98.18150838216145
patch: true ; return i ;
rank: 749
score: 98.11526489257812
patch: return i + 0 }
rank: 749
score: 97.84147338867187
patch: so return i ;
rank: 750
score: 98.47908238002232
patch: return i ; ; * *
rank: 750
score: 98.41949462890625
patch: if return i ; }
rank: 750
score: 98.36065673828125
patch: return - 1 ; return i ; return ++ i ;
rank: 750
score: 98.18020629882812
patch: retval = i ; }
rank: 750
score: 98.16182861328124
patch: return ! i ;
rank: 750
score: 98.1072265625
patch: return case i ;
rank: 750
score: 98.05999755859375
patch: return start ; }
rank: 750
score: 97.84111938476562
patch: right return i ;
rank: 751
score: 98.47849818638393
patch: return return i + i ;
rank: 751
score: 98.41811116536458
patch: . if return 1 ;
rank: 751
score: 98.180078125
patch: false return i ;
rank: 751
score: 98.05656127929687
patch: else return 0 ;
rank: 751
score: 97.83826293945313
patch: return >= i ;
rank: 752
score: 98.41769409179688
patch: return 0 / $NUMBER$ ;
rank: 752
score: 98.36037190755208
patch: return i ; ; if i + i / 1 ;
rank: 752
score: 98.10535685221355
patch: return ! ch ; }
rank: 752
score: 98.10211944580078
patch: throw 1 ;
rank: 752
score: 98.05574544270833
patch: return i . index CaMeL
rank: 752
score: 97.83282470703125
patch: substring i ++ ;
rank: 753
score: 98.44684709821429
patch: return i | i ; }
rank: 753
score: 98.41505940755208
patch: . / * * /
rank: 753
score: 98.35939534505208
patch: return - i ; if i / ; return i ;
rank: 753
score: 98.10164794921874
patch: sb return i ;
rank: 753
score: 98.05139770507813
patch: return $STRING$ 1 ;
rank: 753
score: 97.83250732421875
patch: final return i ;
rank: 754
score: 98.47706821986607
patch: } else ; return i ;
rank: 754
score: 98.17889404296875
patch: new ch return i ;
rank: 754
score: 98.10050455729167
patch: return i ; / /
rank: 754
score: 98.04000854492188
patch: return ( ;
rank: 754
score: 97.83076171875
patch: match return i ;
rank: 755
score: 98.4761250813802
patch: return count return i ;
rank: 755
score: 98.44481404622395
patch: if ( ; ; }
rank: 755
score: 98.35855102539062
patch: return i ; ; if ; = i - 1 ;
rank: 755
score: 98.17867024739583
patch: return - ( i ;
rank: 755
score: 98.09890747070312
patch: CaMeL Number return i ;
rank: 755
score: 97.83076171875
patch: n return i ;
rank: 756
score: 98.47525460379464
patch: break ; return i ; ;
rank: 756
score: 98.35851033528645
patch: return 0 ; return i ; if i + 1 ;
rank: 756
score: 98.17848714192708
patch: file return i ; }
rank: 756
score: 98.09419759114583
patch: return * ch ; }
rank: 756
score: 98.08510335286458
patch: return i + ( 0
rank: 756
score: 97.8306884765625
patch: scanner return i ;
rank: 757
score: 98.47059122721355
patch: return next ( i ;
rank: 757
score: 98.3584493001302
patch: return i ; ; if ; = i + 1 ;
rank: 757
score: 98.17601521809895
patch: v . return i ;
rank: 757
score: 98.15561930338542
patch: return char CaMeL Count ;
rank: 757
score: 98.09397379557292
patch: character ] return i ;
rank: 758
score: 98.47029622395833
patch: char i return i ;
rank: 758
score: 98.4085693359375
patch: if return 1 ; }
rank: 758
score: 98.3584493001302
patch: return i ; ; if i * / return 1 ;
rank: 758
score: 98.1737772623698
patch: return i && i ;
rank: 758
score: 98.09312947591145
patch: return FALSE ; } }
rank: 758
score: 97.83039093017578
patch: |= i ;
rank: 759
score: 98.44259207589286
patch: return i >= ; } }
rank: 759
score: 98.35821533203125
patch: return i ; if i 1 ; return i 1 ;
rank: 759
score: 98.17299194335938
patch: f = i ;
rank: 759
score: 98.09290568033855
patch: return - - count ;
rank: 759
score: 98.07485961914062
patch: return count 1 ;
rank: 759
score: 98.02024536132812
patch: return i ? ;
rank: 760
score: 98.40774536132812
patch: return ; ; } }
rank: 760
score: 98.35780843098958
patch: return i ; ; = i ; return ++ i ;
rank: 760
score: 98.16896565755208
patch: return ( ) i ;
rank: 760
score: 98.0652587890625
patch: return ch ) ;
rank: 760
score: 97.82503051757813
patch: substring return i ;
rank: 761
score: 98.09208170572917
patch: return count + j ;
rank: 762
score: 98.4578857421875
patch: if return 1 ;
rank: 762
score: 98.44032505580357
patch: if ( i < 0 )
rank: 762
score: 98.3575948079427
patch: return i ; return - 1 ; return - 1 ;
rank: 762
score: 98.16864013671875
patch: return char ;
rank: 762
score: 98.14795532226563
patch: f return i ;
rank: 762
score: 98.09168497721355
patch: return * * / }
rank: 762
score: 97.82193603515626
patch: loop return i ;
rank: 763
score: 98.45070393880208
patch: return size - i ;
rank: 763
score: 98.43976702008929
patch: return i - ; } ;
rank: 763
score: 98.40126546223958
patch: return * - 1 ;
rank: 763
score: 98.35611979166667
patch: return i ; ; if return 1 ; return 1 ;
rank: 763
score: 98.14718627929688
patch: return in = i ;
rank: 763
score: 98.09038696289062
patch: return break ; }
rank: 763
score: 98.00391845703125
patch: return value 1 ;
rank: 763
score: 97.8213134765625
patch: return compare i ;
rank: 764
score: 98.40086873372395
patch: return 1 - 0 ;
rank: 764
score: 98.3557840983073
patch: return - i ; return - 1 ; return i ;
rank: 764
score: 98.03076782226563
patch: return + i ;
rank: 764
score: 98.00218505859375
patch: return new int ;
rank: 764
score: 97.81982421875
patch: left return i ;
rank: 765
score: 98.44603474934895
patch: return i ; i else
rank: 765
score: 98.43818882533482
patch: if ( i >= 0 )
rank: 765
score: 98.35422770182292
patch: return - 1 ; if return i ; return i ;
rank: 765
score: 98.15995279947917
patch: return i . ] ;
rank: 765
score: 98.08461507161458
patch: return size return i ;
rank: 765
score: 97.81924438476562
patch: in return 0 ;
rank: 766
score: 98.44542236328125
patch: int return i ;
rank: 766
score: 98.35257975260417
patch: return new = i ;
rank: 766
score: 98.13755289713542
patch: return i + name ;
rank: 766
score: 97.81920166015625
patch: buffer = i ;
rank: 767
score: 98.43714250837054
patch: is ; return i ; }
rank: 767
score: 98.39674886067708
patch: return 0 1 ; }
rank: 767
score: 98.35249837239583
patch: return 0 ; ; if i + ; return i ;
rank: 767
score: 98.15850830078125
patch: return - + i ;
rank: 767
score: 98.08406575520833
patch: return i == ch ;
rank: 767
score: 97.99295043945312
patch: return ( $STRING$ ;
rank: 767
score: 97.81690673828125
patch: , return i ;
rank: 768
score: 98.43819173177083
patch: return name + i ;
rank: 768
score: 98.43549455915179
patch: if ( ch == i )
rank: 768
score: 98.39635213216145
patch: . } return i ;
rank: 768
score: 98.35235595703125
patch: return i ; return - 1 ; if i ++ ;
rank: 768
score: 98.15758260091145
patch: if ( true ) {
rank: 768
score: 98.0104736328125
patch: return i ? }
rank: 768
score: 97.99095662434895
patch: return ;
rank: 769
score: 98.43594360351562
patch: } int return i ;
rank: 769
score: 98.43391636439732
patch: if ( i ; ; }
rank: 769
score: 98.3958231608073
patch: / * * * /
rank: 769
score: 98.3521016438802
patch: return i ; ; if i = i / 1 ;
rank: 769
score: 98.15723876953125
patch: new return i ;
rank: 769
score: 98.1332499186198
patch: return count ( ) ;
rank: 769
score: 98.083056640625
patch: return FALSE ; }
rank: 769
score: 97.98984985351562
patch: return i char ;
rank: 769
score: 97.81517944335937
patch: p = i ;
rank: 770
score: 98.43585205078125
patch: f { return i ;
rank: 770
score: 98.39479573567708
patch: return 0 + length ;
rank: 770
score: 98.35101318359375
patch: return 0 ; ; return i ; while i 1 ;
rank: 770
score: 98.1315205891927
patch: return value : i ;
rank: 770
score: 98.0815938313802
patch: return Math . TRUE ;
rank: 770
score: 97.81448974609376
patch: version return i ;
rank: 771
score: 98.43545532226562
patch: i if return i ;
rank: 771
score: 98.43110874720982
patch: = i - 1 ; ;
rank: 771
score: 98.39129638671875
patch: return max ; } }
rank: 771
score: 98.35062662760417
patch: return i ; return i ; if i / ++ ;
rank: 771
score: 98.15572102864583
patch: return cs . ch ;
rank: 771
score: 97.97978515625
patch: return new char [
rank: 771
score: 97.81195068359375
patch: t return i ;
rank: 772
score: 98.43031529017857
patch: if ( ; } else {
rank: 772
score: 98.38868204752605
patch: = i ; * /
rank: 772
score: 98.34996541341145
patch: return i ; ; if i * ; ++ i ;
rank: 772
score: 98.15535278320313
patch: break ; } else
rank: 772
score: 98.07888793945312
patch: return Integer . true ;
rank: 773
score: 98.42891148158482
patch: return i % ; } }
rank: 773
score: 98.42366536458333
patch: int return i ; ;
rank: 773
score: 98.34984334309895
patch: return - return 1 ;
rank: 773
score: 98.12930297851562
patch: return value + $STRING$ ;
rank: 773
score: 98.07869466145833
patch: return Boolean . 1 ;
rank: 773
score: 97.80756225585938
patch: result = 0 ;
rank: 774
score: 98.42800467354911
patch: s ; return i ; }
rank: 774
score: 98.384521484375
patch: . * /
rank: 774
score: 98.34942626953125
patch: return i ; return i ; if i * 1 ;
rank: 774
score: 98.15456136067708
patch: return cs . next ;
rank: 774
score: 98.12908935546875
patch: return byte CaMeL Value ;
rank: 774
score: 97.80411376953126
patch: select i ++ ;
rank: 775
score: 98.4181620279948
patch: return start return i ;
rank: 775
score: 98.38259887695312
patch: return value - 0 ;
rank: 775
score: 98.34930419921875
patch: return 0 ; ; if i = i - 1 ;
rank: 775
score: 98.153564453125
patch: count return i ; }
rank: 775
score: 98.07835896809895
patch: return length + j ;
rank: 775
score: 97.8030517578125
patch: string return 0 ;
rank: 776
score: 98.42524065290179
patch: return i - start ; }
rank: 776
score: 98.4180908203125
patch: int return - i ;
rank: 776
score: 98.3810526529948
patch: . * * * ;
rank: 776
score: 98.3492431640625
patch: return i ; ; /
rank: 776
score: 98.0775390625
patch: ; return i ;
rank: 776
score: 97.97770385742187
patch: return count ) ;
rank: 777
score: 98.37888590494792
patch: return length * i ;
rank: 777
score: 98.34745279947917
patch: return - 1 ; if return 1 ; return i ;
rank: 777
score: 98.15279134114583
patch: return cs + i ;
rank: 777
score: 97.97706909179688
patch: return i ? i
rank: 778
score: 98.41074625651042
patch: return - 0 ; ;
rank: 778
score: 98.34691365559895
patch: return i ; ; if i / ; ++ i ;
rank: 778
score: 98.15266927083333
patch: pos = i ; }
rank: 778
score: 97.9730712890625
patch: return i . ;
rank: 778
score: 97.7991455078125
patch: filter return i ;
rank: 779
score: 98.42113385881696
patch: if ( i <= ; }
rank: 779
score: 98.40901692708333
patch: } ; return i ;
rank: 779
score: 98.37781778971355
patch: return i ; if ;
rank: 779
score: 98.3461201985677
patch: return i ; ; if i ++ ; = i ;
rank: 779
score: 98.1218973795573
patch: return / * ch ;
rank: 779
score: 97.79793701171874
patch: t = i ;
rank: 780
score: 98.34142049153645
patch: return i ; ; if i + ; = i ;
rank: 780
score: 97.96798706054688
patch: return new int value
rank: 780
score: 97.939990234375
patch: return start 1 ;
rank: 780
score: 97.79563598632812
patch: if ( is ;
rank: 781
score: 98.3773905436198
patch: return i ; * ;
rank: 781
score: 98.3407694498698
patch: if i = i ; return i ; return i ;
rank: 781
score: 98.0724853515625
patch: return * * /
rank: 781
score: 97.93438720703125
patch: return } }
rank: 781
score: 97.79383544921875
patch: symbol return i ;
rank: 782
score: 98.4204345703125
patch: if ( ; ;
rank: 782
score: 98.34036254882812
patch: return i ; ; if i / ; = i ;
rank: 782
score: 98.1488545735677
patch: { ch return i ;
rank: 782
score: 97.96438598632812
patch: return int [ ]
rank: 783
score: 98.41989571707589
patch: = i - 1 ; }
rank: 783
score: 98.39623006184895
patch: return i ; ; *
rank: 783
score: 98.33888753255208
patch: return - 1 ; return i ; / - 1 ;
rank: 783
score: 98.14633178710938
patch: color return i ; }
rank: 783
score: 97.7918212890625
patch: def return i ;
rank: 784
score: 98.41932024274554
patch: return >> i ; } }
rank: 784
score: 98.33817545572917
patch: return i ; ; return i ; if i ++ ;
rank: 784
score: 98.04861450195312
patch: return - count ;
rank: 784
score: 97.93021240234376
patch: set return i ;
rank: 784
score: 97.78932495117188
patch: byte return i ;
rank: 785
score: 98.3865458170573
patch: } return - 1 ;
rank: 785
score: 98.33786010742188
patch: return 1 ; ; if i * ; return i ;
rank: 785
score: 98.14525349934895
patch: match ( ch ) ;
rank: 785
score: 97.78753051757812
patch: file return i ;
rank: 786
score: 98.41678292410714
patch: if i ++ ; } }
rank: 786
score: 98.38345336914062
patch: result return i ; ;
rank: 786
score: 98.36688232421875
patch: return 0 / 1 ;
rank: 786
score: 98.33689371744792
patch: return i ; return i ; / / return i ;
rank: 786
score: 98.1451416015625
patch: { return j ; }
rank: 786
score: 97.94426879882812
patch: return $STRING$ ? 0
rank: 786
score: 97.92567138671875
patch: return search CaMeL Chars
rank: 786
score: 97.78253173828125
patch: more return i ;
rank: 787
score: 98.33681233723958
patch: return Integer + i ;
rank: 787
score: 98.14499918619792
patch: return j ; } else
rank: 787
score: 98.03983764648437
patch: return name ; }
rank: 787
score: 97.78016967773438
patch: return & i ;
rank: 788
score: 98.3781026204427
patch: char return i ; ;
rank: 788
score: 98.36400349934895
patch: return [ $NUMBER$ ] ;
rank: 788
score: 98.33634440104167
patch: if i return 0 ;
rank: 788
score: 98.14467366536458
patch: return $STRING$ ; break ;
rank: 788
score: 98.03067016601562
patch: return - length ;
rank: 788
score: 97.9408935546875
patch: return cs ) ;
rank: 788
score: 97.77904052734375
patch: at return i ;
rank: 789
score: 98.37640380859375
patch: throw new $STRING$ ;
rank: 789
score: 98.3359375
patch: return i ; if i - 1 ; return i ;
rank: 789
score: 98.14308675130208
patch: result ; return i ;
rank: 789
score: 98.11177571614583
patch: return start + ch ;
rank: 789
score: 98.02584228515624
patch: return max ; }
rank: 789
score: 97.93955688476562
patch: return ( ch ;
rank: 789
score: 97.91569213867187
patch: return / 1 ;
rank: 789
score: 97.77777709960938
patch: * return i ;
rank: 790
score: 98.33357747395833
patch: return i ; ; if i = i + 1 ;
rank: 790
score: 98.14283243815105
patch: case : return i ;
rank: 790
score: 97.77737426757812
patch: result i ++ ;
rank: 791
score: 98.41299874441964
patch: return i -- ; } }
rank: 791
score: 98.3703104654948
patch: for return return i ;
rank: 791
score: 98.3596903483073
patch: . break ; } }
rank: 791
score: 98.33321126302083
patch: i else return i ;
rank: 791
score: 97.93667602539062
patch: throw $NUMBER$ ;
rank: 792
score: 98.41185651506696
patch: return i - $STRING$ ; }
rank: 792
score: 98.13557739257813
patch: val return i ;
rank: 792
score: 98.00050048828125
patch: return * / }
rank: 792
score: 97.93573608398438
patch: append return i ;
rank: 792
score: 97.898779296875
patch: return return $STRING$ ;
rank: 792
score: 97.7769775390625
patch: return 0 1 ;
rank: 793
score: 98.41018676757812
patch: return i > ; }
rank: 793
score: 98.3682352701823
patch: set new return i ;
rank: 793
score: 98.3566385904948
patch: } * * * /
rank: 793
score: 98.131640625
patch: switch ( cs )
rank: 793
score: 97.99872436523438
patch: character += i ;
rank: 793
score: 97.93084716796875
patch: break + i ;
rank: 793
score: 97.89609375
patch: x return i ;
rank: 793
score: 97.77682495117188
patch: ret return 0 ;
rank: 794
score: 98.36773681640625
patch: for i return i ;
rank: 794
score: 98.33223470052083
patch: return i ; return i ; return i ; break ;
rank: 794
score: 97.7729736328125
patch: fg return i ;
rank: 795
score: 98.40842982700893
patch: byte ; return i ; }
rank: 795
score: 98.36573282877605
patch: return return return 1 ;
rank: 795
score: 98.35153198242188
patch: return i return 0 ;
rank: 795
score: 98.33200073242188
patch: return i ; ; if i * return - 1 ;
rank: 795
score: 98.12760009765626
patch: p return i ;
rank: 795
score: 97.98638916015625
patch: return INDEX _ NOT
rank: 795
score: 97.76673583984375
patch: image return i ;
rank: 796
score: 98.40537516276042
patch: return i -- ; }
rank: 796
score: 98.36342366536458
patch: super . return i ;
rank: 796
score: 98.33094278971355
patch: return i ; return i ; if i * ++ ;
rank: 796
score: 97.98358154296875
patch: return - null ;
rank: 796
score: 97.92128295898438
patch: return i / *
rank: 796
score: 97.890771484375
patch: return new int }
rank: 796
score: 97.76456298828126
patch: if return 0 ;
rank: 797
score: 98.34498087565105
patch: return value i ; }
rank: 797
score: 98.33074951171875
patch: return - i ; if i * ; return i ;
rank: 797
score: 98.12474365234375
patch: return cs . ;
rank: 797
score: 97.9811767578125
patch: return -- j ;
rank: 797
score: 97.88295288085938
patch: return name 1 ;
rank: 797
score: 97.76317749023437
patch: : return i ;
rank: 798
score: 98.3436787923177
patch: if ; * * /
rank: 798
score: 98.33038330078125
patch: return i + i ; return i ; return i ;
rank: 798
score: 98.12470092773438
patch: switch ( i )
rank: 798
score: 97.98007202148438
patch: return * i ;
rank: 798
score: 97.75995483398438
patch: namespace return i ;
rank: 799
score: 98.35707600911458
patch: add new return i ;
rank: 799
score: 98.3271484375
patch: return i ; } return i ; while i 1 ;
rank: 799
score: 97.97852172851563
patch: { return 0 ;
rank: 799
score: 97.90846557617188
patch: return i * ;
rank: 799
score: 97.87529296875
patch: return new ) ;
rank: 800
score: 98.35420735677083
patch: } catch return i ;
rank: 800
score: 98.32664998372395
patch: return - i ; return i ; while i 1 ;
rank: 800
score: 98.117333984375
patch: res = i ;
rank: 800
score: 97.9768798828125
patch: / * * /
rank: 800
score: 97.90599365234375
patch: return i . }
rank: 800
score: 97.75834655761719
patch: += 1 ;
rank: 801
score: 98.338330078125
patch: . * * /
rank: 801
score: 98.3244120279948
patch: return * return i ;
rank: 801
score: 97.974267578125
patch: character return false ;
rank: 801
score: 97.901806640625
patch: return ++ 0 ;
rank: 801
score: 97.75335083007812
patch: is i -- ;
rank: 802
score: 98.34938557942708
patch: return i ; i ;
rank: 802
score: 98.33721923828125
patch: return i i i ;
rank: 802
score: 98.32423909505208
patch: return i ; ; if i = i - 0 ;
rank: 802
score: 97.97340087890625
patch: return left ; }
rank: 802
score: 97.8970947265625
patch: return i * }
rank: 802
score: 97.858935546875
patch: return return true ;
rank: 802
score: 97.75330810546875
patch: full return i ;
rank: 803
score: 98.34857177734375
patch: return return i i ;
rank: 803
score: 98.32362874348958
patch: return i ; return - 1 ; / - 1 ;
rank: 803
score: 98.08858489990234
patch: return - ;
rank: 803
score: 98.08365885416667
patch: return ( false ) ;
rank: 803
score: 97.89622802734375
patch: return + ch ;
rank: 803
score: 97.75330810546875
patch: return super . ;
rank: 804
score: 98.33650716145833
patch: return i * i /
rank: 804
score: 98.32159423828125
patch: return i ; ; if i ++ ; break ; ;
rank: 804
score: 98.0832763671875
patch: end return i ;
rank: 804
score: 97.96800994873047
patch: return * /
rank: 804
score: 97.89143371582031
patch: result break ;
rank: 804
score: 97.85363159179687
patch: return length 1 ;
rank: 804
score: 97.75320434570312
patch: value return 1 ;
rank: 805
score: 98.34053548177083
patch: i * return i ;
rank: 805
score: 98.3207295735677
patch: return i ; ; if i * ++ ; break ;
rank: 805
score: 98.0861572265625
patch: break + 0 ;
rank: 805
score: 97.7524169921875
patch: if ( true )
rank: 806
score: 98.37890625
patch: return i == ; }
rank: 806
score: 98.32044474283855
patch: return i ; ; if i + i - ++ ;
rank: 806
score: 98.07987467447917
patch: return cs . value ;
rank: 806
score: 97.96512451171876
patch: character return true ;
rank: 806
score: 97.75045166015624
patch: return j 1 ;
rank: 807
score: 98.33951822916667
patch: f . return i ;
rank: 807
score: 98.3341776529948
patch: return i ; } finally
rank: 807
score: 98.31996663411458
patch: return 1 ; return i ; if i - 1 ;
rank: 807
score: 98.07955932617188
patch: impl return i ;
rank: 807
score: 98.07925415039062
patch: return cs . index CaMeL
rank: 807
score: 97.96287231445312
patch: return / i ;
rank: 807
score: 97.85679626464844
patch: return i }
rank: 808
score: 98.37501017252605
patch: return ; } ; }
rank: 808
score: 98.3358866373698
patch: -- * return i ;
rank: 808
score: 98.33315022786458
patch: return 0 - j ;
rank: 808
score: 98.31857299804688
patch: return i ; ; return i ; if i 1 ;
rank: 808
score: 98.07625732421874
patch: c = i ;
rank: 808
score: 97.9561767578125
patch: ch = i ;
rank: 808
score: 97.85243530273438
patch: prefix return i ;
rank: 809
score: 98.3330586751302
patch: return count * i ;
rank: 809
score: 98.31688435872395
patch: return i ; return i + i ; return i ;
rank: 809
score: 97.85099487304687
patch: return -- 0 ;
rank: 809
score: 97.7463623046875
patch: name = i ;
rank: 810
score: 98.3326416015625
patch: ( ; return i ;
rank: 810
score: 98.33016967773438
patch: list { return i ;
rank: 810
score: 98.3163350423177
patch: return - i ; break ; if i + 1 ;
rank: 810
score: 97.94459533691406
patch: return left ;
rank: 810
score: 97.83143310546875
patch: tary return i ;
rank: 810
score: 97.743994140625
patch: ret = 0 ;
rank: 811
score: 98.32859293619792
patch: return i i ; ;
rank: 811
score: 98.31490071614583
patch: return - 1 ; / / return i ; break ;
rank: 811
score: 98.07294921875
patch: result = j ;
rank: 811
score: 97.7435791015625
patch: ok = true ;
rank: 812
score: 98.33022054036458
patch: return i * j ;
rank: 812
score: 98.32667032877605
patch: ret { return i ;
rank: 812
score: 98.3145751953125
patch: return 0 ; ; if i + i / 1 ;
rank: 812
score: 97.94232788085938
patch: return i * /
rank: 812
score: 97.74190673828124
patch: = i ; }
rank: 813
score: 98.3574727376302
patch: if ( ; } }
rank: 813
score: 98.32634887695312
patch: return return $NUMBER$ ;
rank: 813
score: 98.32611083984375
patch: return i * length ;
rank: 813
score: 98.31325276692708
patch: return - 1 ; if i * / return i ;
rank: 813
score: 97.94189453125
patch: return ! ch ;
rank: 813
score: 97.84256591796876
patch: return this ) ;
rank: 813
score: 97.74005737304688
patch: ok return i ;
rank: 814
score: 98.34602864583333
patch: if ; i ++ ;
rank: 814
score: 98.32609049479167
patch: return value * i ;
rank: 814
score: 98.30894978841145
patch: return ; return 1 ;
rank: 814
score: 97.82821044921874
patch: b return 0 ;
rank: 814
score: 97.73963623046875
patch: ret i ++ ;
rank: 815
score: 98.32130940755208
patch: break ; return 1 ;
rank: 815
score: 98.30867513020833
patch: return - 1 ; else
rank: 815
score: 98.05557861328126
patch: return char ) ;
rank: 815
score: 97.73695068359375
patch: ? return i ;
rank: 816
score: 98.33811442057292
patch: : return i ; }
rank: 816
score: 98.3221435546875
patch: ( ; * * /
rank: 816
score: 98.3204345703125
patch: return value i ;
rank: 816
score: 98.05437622070312
patch: result -- i ;
rank: 816
score: 97.93289184570312
patch: return / * /
rank: 816
score: 97.73665771484374
patch: select return i ;
rank: 817
score: 98.33416748046875
patch: if ( ch == ;
rank: 817
score: 98.31729736328126
patch: for return 1 ;
rank: 817
score: 98.05413818359375
patch: return = i ;
rank: 817
score: 98.050390625
patch: result += j ;
rank: 817
score: 97.8337646484375
patch: return ( cs ;
rank: 818
score: 98.32806396484375
patch: return ; } else {
rank: 818
score: 98.3201192220052
patch: return 1 - $NUMBER$ ;
rank: 818
score: 97.83286743164062
patch: return ch 1 ;
rank: 818
score: 97.81502075195313
patch: return i int ;
rank: 818
score: 97.73387451171875
patch: return count ; ;
rank: 819
score: 98.31888834635417
patch: = i ; } }
rank: 819
score: 98.31686401367188
patch: i int return i ;
rank: 819
score: 98.0482666015625
patch: modifiers return i ;
rank: 819
score: 97.811767578125
patch: start return 0 ;
rank: 819
score: 97.73195190429688
patch: return j ) ;
rank: 820
score: 97.92235717773437
patch: ) return 0 ;
rank: 820
score: 97.73132934570313
patch: virtual return i ;
rank: 821
score: 98.31195831298828
patch: break ; ;
rank: 821
score: 98.0438944498698
patch: return Double . length ;
rank: 821
score: 98.03438110351563
patch: end = i ;
rank: 821
score: 97.92146606445313
patch: -- return i ;
rank: 821
score: 97.82933349609375
patch: break return i ;
rank: 821
score: 97.80925903320312
patch: return return false ;
rank: 821
score: 97.73006591796874
patch: CaMeL return i ;
rank: 822
score: 98.31559244791667
patch: } else * * /
rank: 822
score: 98.28908284505208
patch: i i return 0 ;
rank: 822
score: 97.809130859375
patch: warn return i ;
rank: 822
score: 97.72987060546875
patch: add i ++ ;
rank: 823
score: 98.31960042317708
patch: = ; break ; }
rank: 823
score: 98.3082275390625
patch: CaMeL ] return i ;
rank: 823
score: 98.2890380859375
patch: i return 1 ;
rank: 823
score: 98.0263671875
patch: entry return i ;
rank: 823
score: 97.82591552734375
patch: break + ch ;
rank: 823
score: 97.72913818359375
patch: ; break ; }
rank: 824
score: 98.3077392578125
patch: int i return 0 ;
rank: 824
score: 98.02463989257812
patch: result -- j ;
rank: 824
score: 97.91246948242187
patch: character return $STRING$ ;
rank: 824
score: 97.82579956054687
patch: return i } }
rank: 824
score: 97.80903930664063
patch: error return i ;
rank: 824
score: 97.72877197265625
patch: key return i ;
rank: 825
score: 98.31416829427083
patch: . = i ; }
rank: 825
score: 98.30712280273437
patch: ( return i ;
rank: 825
score: 98.2882588704427
patch: return 0 ; ; else
rank: 825
score: 98.02386474609375
patch: e = i ;
rank: 825
score: 97.91196899414062
patch: character break ; }
rank: 825
score: 97.7287368774414
patch: break true ;
rank: 826
score: 98.31400553385417
patch: return i ? 0 ;
rank: 826
score: 98.30772908528645
patch: if ( ; } ;
rank: 826
score: 98.28293863932292
patch: i return - 1 ;
rank: 826
score: 98.02032470703125
patch: { break ; }
rank: 826
score: 97.90906982421875
patch: return - size ;
rank: 826
score: 97.72587280273437
patch: return ; break ;
rank: 827
score: 98.2813720703125
patch: return - $NUMBER$ ; ;
rank: 827
score: 97.9084716796875
patch: return * ch ;
rank: 827
score: 97.72579345703124
patch: scanner = i ;
rank: 828
score: 98.31103515625
patch: return i ; while ;
rank: 828
score: 98.30389404296875
patch: = i ; ; }
rank: 828
score: 98.00787963867188
patch: result += ch ;
rank: 828
score: 97.79405212402344
patch: buf break ;
rank: 829
score: 98.30971272786458
patch: } else return 0 ;
rank: 829
score: 98.3015848795573
patch: if ( i > ;
rank: 829
score: 98.30074055989583
patch: / i return i ;
rank: 829
score: 98.00569458007813
patch: return ( j ;
rank: 829
score: 98.00279541015625
patch: path return i ;
rank: 829
score: 97.90106201171875
patch: return TRUE ;
rank: 829
score: 97.76525115966797
patch: return continue ;
rank: 829
score: 97.7243896484375
patch: length return i ;
rank: 830
score: 98.30762736002605
patch: return 1 / i ;
rank: 830
score: 98.30064900716145
patch: return count ; ; }
rank: 830
score: 98.27229817708333
patch: if i = 0 ;
rank: 830
score: 98.00101928710937
patch: color return i ;
rank: 830
score: 97.8994873046875
patch: return continue ; }
rank: 830
score: 97.78982543945312
patch: out return i ;
rank: 830
score: 97.7607192993164
patch: return right ;
rank: 831
score: 98.30741373697917
patch: return size - 0 ;
rank: 831
score: 98.26890055338542
patch: return ; = 1 ;
rank: 831
score: 98.000146484375
patch: throw new ch ;
rank: 831
score: 97.99745483398438
patch: args return i ;
rank: 831
score: 97.78507080078126
patch: temp return i ;
rank: 831
score: 97.75340270996094
patch: } break ;
rank: 831
score: 97.72286376953124
patch: if ( matches ;
rank: 832
score: 98.29754638671875
patch: return list . i ;
rank: 832
score: 98.26652018229167
patch: return new return 1 ;
rank: 832
score: 97.99893188476562
patch: pos = j ;
rank: 832
score: 97.7839599609375
patch: Array CaMeL Utils .
rank: 832
score: 97.72246704101562
patch: break false ; }
rank: 833
score: 98.26045735677083
patch: return - + 1 ;
rank: 833
score: 97.72090454101563
patch: return ] i ;
rank: 834
score: 98.30393473307292
patch: return i ; else }
rank: 834
score: 97.98599853515626
patch: count return i ;
rank: 834
score: 97.9849609375
patch: result return j ;
rank: 834
score: 97.72003173828125
patch: return 0 ; else
rank: 834
score: 97.69876098632812
patch: continue ;
rank: 835
score: 98.30298868815105
patch: return start * i ;
rank: 835
score: 97.98394775390625
patch: break i ; }
rank: 835
score: 97.88232421875
patch: cs return i ;
rank: 835
score: 97.76945495605469
patch: throw 0 ;
rank: 835
score: 97.7166259765625
patch: found return i ;
rank: 836
score: 98.25748291015626
patch: i return 0 ;
rank: 836
score: 97.87343139648438
patch: character * * /
rank: 836
score: 97.7162841796875
patch: default i ++ ;
rank: 837
score: 98.28887939453125
patch: int return ( i ;
rank: 837
score: 98.28134155273438
patch: return i % $NUMBER$ ;
rank: 837
score: 98.2558085123698
patch: return start ; break ;
rank: 837
score: 97.98087158203126
patch: val = i ;
rank: 837
score: 97.86685791015626
patch: character / * /
rank: 837
score: 97.71593627929687
patch: ++ ; break ;
rank: 837
score: 97.64729817708333
patch: return }
rank: 838
score: 98.30094401041667
patch: return ; * * /
rank: 838
score: 98.28887939453125
patch: } while return i ;
rank: 838
score: 98.27095540364583
patch: return i > i ;
rank: 838
score: 98.25321451822917
patch: return null ; break ;
rank: 838
score: 97.7147445678711
patch: value * /
rank: 839
score: 98.28790283203125
patch: return return 0 ; ;
rank: 839
score: 98.26828002929688
patch: return i - ; ;
rank: 839
score: 98.25205485026042
patch: return name return i ;
rank: 839
score: 97.975537109375
patch: return + 1 ;
rank: 839
score: 97.75556640625
patch: label return i ;
rank: 839
score: 97.71356811523438
patch: m = true ;
rank: 839
score: 97.63513946533203
patch: return new ;
rank: 840
score: 98.30059814453125
patch: . * ; * /
rank: 840
score: 98.28338623046875
patch: } return - i ;
rank: 840
score: 98.25049845377605
patch: return * return 1 ;
rank: 840
score: 97.9750244140625
patch: b += i ;
rank: 840
score: 97.75234375
patch: return return null ;
rank: 841
score: 98.2829833984375
patch: list return i ;
rank: 841
score: 98.2486572265625
patch: i ; return 1 ;
rank: 841
score: 97.96964111328126
patch: ret += i ;
rank: 841
score: 97.8572509765625
patch: ch = ch ;
rank: 841
score: 97.71324462890625
patch: return % i ;
rank: 842
score: 98.30021158854167
patch: return 0 i ++ ;
rank: 842
score: 98.28269449869792
patch: return return $NUMBER$ ; ;
rank: 842
score: 98.2479248046875
patch: return next return i ;
rank: 842
score: 97.96143798828125
patch: return int j ;
rank: 842
score: 97.85364379882813
patch: return - ] ;
rank: 842
score: 97.69560241699219
patch: = 1 ;
rank: 842
score: 97.56024169921875
patch: return format ;
rank: 843
score: 98.29581705729167
patch: return i i length ;
rank: 843
score: 98.28197631835937
patch: return value ; ;
rank: 843
score: 98.24774169921875
patch: return - 1 ; try
rank: 843
score: 97.9669677734375
patch: static return i ;
rank: 843
score: 97.95325317382813
patch: table return i ;
rank: 843
score: 97.67150115966797
patch: result * /
rank: 843
score: 97.55066680908203
patch: return 0 }
rank: 844
score: 98.28153483072917
patch: f = return i ;
rank: 844
score: 97.9522216796875
patch: r return i ;
rank: 844
score: 97.85052490234375
patch: return i 0 ;
rank: 844
score: 97.70447540283203
patch: return FALSE ;
rank: 844
score: 97.66267395019531
patch: is * /
rank: 845
score: 98.24501546223958
patch: return max ; break ;
rank: 845
score: 97.95150146484374
patch: answer return i ;
rank: 845
score: 97.84741973876953
patch: throw null ;
rank: 845
score: 97.65504455566406
patch: break i ;
rank: 845
score: 97.53324127197266
patch: return ( (
rank: 846
score: 98.2923583984375
patch: } if return 0 ;
rank: 846
score: 98.24366251627605
patch: return i + ; ;
rank: 846
score: 97.95921630859375
patch: return } break ;
rank: 846
score: 97.949609375
patch: result ++ i ;
rank: 846
score: 97.84652099609374
patch: return case 0 ;
rank: 846
score: 97.65350341796875
patch: -- ;
rank: 846
score: 97.53276824951172
patch: j ++ ;
rank: 847
score: 98.27696736653645
patch: result if return i ;
rank: 847
score: 97.95478515625
patch: j return i ;
rank: 847
score: 97.84614868164063
patch: character = i ;
rank: 847
score: 97.6429443359375
patch: *= i ;
rank: 847
score: 97.51605224609375
patch: return i *
rank: 848
score: 98.27681477864583
patch: return - $STRING$ ; ;
rank: 848
score: 97.94556884765625
patch: break + $NUMBER$ ;
rank: 848
score: 97.64716339111328
patch: return $STRING$ }
rank: 848
score: 97.6279067993164
patch: return min ;
rank: 848
score: 97.5124282836914
patch: return * ;
rank: 849
score: 98.2907002766927
patch: . * / * /
rank: 849
score: 97.948681640625
patch: a return i ;
rank: 849
score: 97.62763214111328
patch: = false ;
rank: 849
score: 97.50199890136719
patch: return i +
rank: 850
score: 98.28890991210938
patch: . * return i ;
rank: 850
score: 98.23506673177083
patch: return ; } * /
rank: 850
score: 97.94183349609375
patch: expr return i ;
rank: 850
score: 97.94031524658203
patch: continue ; }
rank: 850
score: 97.833203125
patch: return case true ;
rank: 850
score: 97.6279067993164
patch: return char CaMeL
rank: 850
score: 97.48491668701172
patch: break * /
rank: 851
score: 98.28849283854167
patch: return 0 = i ;
rank: 851
score: 98.22681681315105
patch: if ( ch ; }
rank: 851
score: 97.82562255859375
patch: character return j ;
rank: 851
score: 97.61894226074219
patch: return index CaMeL
rank: 851
score: 97.48374938964844
patch: throw * /
rank: 852
score: 98.2864278157552
patch: return 0 i ; ;
rank: 852
score: 98.27384440104167
patch: throw new Error i ;
rank: 852
score: 98.23682657877605
patch: return - 1 ; /
rank: 852
score: 97.81911010742188
patch: += i ; }
rank: 852
score: 97.59947204589844
patch: is -- ;
rank: 852
score: 97.4383773803711
patch: += ch ;
rank: 853
score: 98.27335611979167
patch: return i ; else ;
rank: 853
score: 97.93304443359375
patch: len return i ;
rank: 853
score: 97.92884521484375
patch: y return i ;
rank: 853
score: 97.81727294921875
patch: return - start ;
rank: 853
score: 97.57958221435547
patch: loop * /
rank: 854
score: 98.28577677408855
patch: ( return 0 ) ;
rank: 854
score: 98.22195434570312
patch: if ( ; * /
rank: 854
score: 97.8157958984375
patch: / return i ;
rank: 854
score: 97.57592010498047
patch: string * /
rank: 854
score: 97.39491271972656
patch: return i .
rank: 855
score: 98.28564453125
patch: return $NUMBER$ + 0 ;
rank: 855
score: 98.273193359375
patch: String i return i ;
rank: 855
score: 97.91849365234376
patch: ] return i ;
rank: 855
score: 97.81423950195312
patch: ++ return i ;
rank: 855
score: 97.56777954101562
patch: s * /
rank: 855
score: 97.39443969726562
patch: ch break ;
rank: 856
score: 98.2834981282552
patch: return 0 return i ;
rank: 856
score: 98.27163696289062
patch: { return i ; ;
rank: 856
score: 98.22871907552083
patch: return 0 ; / ;
rank: 856
score: 97.8124267578125
patch: ; return 0 ;
rank: 856
score: 97.53240966796875
patch: *= 1 ;
rank: 856
score: 97.39238739013672
patch: return / *
rank: 857
score: 98.283203125
patch: return 1 i ; }
rank: 857
score: 98.27135213216145
patch: return i ; try {
rank: 857
score: 98.22726440429688
patch: return ( return 1 ;
rank: 857
score: 97.91926879882813
patch: state = i ;
rank: 857
score: 97.91365356445313
patch: return + 0 ;
rank: 857
score: 97.8118408203125
patch: return right ; }
rank: 857
score: 97.53105926513672
patch: return err ;
rank: 857
score: 97.52754974365234
patch: ret * /
rank: 857
score: 97.39056396484375
patch: s break ;
rank: 858
score: 98.28163655598958
patch: return i i ++ ;
rank: 858
score: 98.26957194010417
patch: if ( return 0 ;
rank: 858
score: 98.21551513671875
patch: if ( ch != ;
rank: 858
score: 97.9182373046875
patch: this return i ;
rank: 858
score: 97.91248779296875
patch: return == ch ;
rank: 858
score: 97.81151123046875
patch: is * * /
rank: 858
score: 97.3903579711914
patch: return i ?
rank: 859
score: 98.28159586588542
patch: . = 0 ; }
rank: 859
score: 98.26943969726562
patch: break ; return 0 ;
rank: 859
score: 97.91787719726562
patch: entry = i ;
rank: 859
score: 97.38157145182292
patch: return i
rank: 860
score: 98.22194417317708
patch: return 0 ; for i
rank: 860
score: 98.2118631998698
patch: if ( i ; ;
rank: 860
score: 97.80934448242188
patch: return + j ;
rank: 860
score: 97.49429321289062
patch: n * /
rank: 860
score: 97.375732421875
patch: return count $NUMBER$
rank: 861
score: 98.27938842773438
patch: = 0 ; * /
rank: 861
score: 98.26761881510417
patch: finally { return i ;
rank: 861
score: 98.2113545735677
patch: return count - ; }
rank: 861
score: 97.9161865234375
patch: l = i ;
rank: 861
score: 97.49224853515625
patch: value break ;
rank: 861
score: 97.36849975585938
patch: else break ;
rank: 862
score: 98.27840169270833
patch: return 0 & i ;
rank: 862
score: 98.21787516276042
patch: return - return 0 ;
rank: 862
score: 98.21126708984374
patch: = i ; ;
rank: 862
score: 97.9134033203125
patch: new = i ;
rank: 862
score: 97.9072998046875
patch: prev return i ;
rank: 862
score: 97.80690307617188
patch: return int ; }
rank: 862
score: 97.48287963867188
patch: return T ;
rank: 863
score: 98.27789306640625
patch: return 0 ; if ;
rank: 863
score: 98.21665445963542
patch: i i = i ;
rank: 863
score: 97.91239624023437
patch: resource return i ;
rank: 863
score: 97.47914123535156
patch: buffer * /
rank: 863
score: 97.34819030761719
patch: ++ ; }
rank: 864
score: 98.277587890625
patch: return 0 i length ;
rank: 864
score: 98.20667521158855
patch: return this . ; }
rank: 864
score: 97.9117919921875
patch: read return i ;
rank: 864
score: 97.80399169921876
patch: return case false ;
rank: 864
score: 97.47495524088542
patch: return (
rank: 864
score: 97.34371948242188
patch: return $STRING$ *
rank: 865
score: 98.27743530273438
patch: return 0 i j ;
rank: 865
score: 98.20155843098958
patch: return >> i ; }
rank: 865
score: 97.910546875
patch: match = i ;
rank: 865
score: 97.46701049804688
patch: item * /
rank: 865
score: 97.32954406738281
patch: return out ;
rank: 866
score: 97.9025390625
patch: return max 1 ;
rank: 866
score: 97.79220581054688
patch: character ++ ;
rank: 866
score: 97.45386505126953
patch: return get ;
rank: 866
score: 97.32888793945312
patch: ret break ;
rank: 867
score: 98.20416259765625
patch: return null + i ;
rank: 867
score: 98.19635009765625
patch: return i / ; }
rank: 867
score: 97.8998291015625
patch: return case ch ;
rank: 867
score: 97.78570556640625
patch: { return 1 ;
rank: 867
score: 97.44965362548828
patch: = j ;
rank: 868
score: 98.26207275390625
patch: . return $NUMBER$ ;
rank: 868
score: 98.22896728515624
patch: synchronized return i ;
rank: 868
score: 98.2040303548177
patch: return max return i ;
rank: 868
score: 98.19527180989583
patch: return i >= $NUMBER$ ;
rank: 868
score: 97.89520874023438
patch: return } } }
rank: 868
score: 97.32093811035156
patch: result continue ;
rank: 869
score: 98.19521077473958
patch: return hash CaMeL Code ;
rank: 869
score: 97.90281372070312
patch: return -- ; }
rank: 869
score: 97.89384155273437
patch: result return value ;
rank: 869
score: 97.43695068359375
patch: j * /
rank: 869
score: 97.31918334960938
patch: return Integer ;
rank: 870
score: 98.19425455729167
patch: if ( ! ; ;
rank: 870
score: 97.43608093261719
patch: return matches ;
rank: 870
score: 97.31836700439453
patch: pos break ;
rank: 871
score: 98.1922098795573
patch: return ; } } ;
rank: 871
score: 97.89435424804688
patch: o = i ;
rank: 871
score: 97.76702880859375
patch: return case * /
rank: 871
score: 97.43405151367188
patch: char break ;
rank: 872
score: 98.2102783203125
patch: return $STRING$ ; ;
rank: 872
score: 98.19500732421875
patch: return get return i ;
rank: 872
score: 98.19016520182292
patch: return i - $STRING$ ;
rank: 872
score: 97.89418334960938
patch: answer = i ;
rank: 872
score: 97.8818115234375
patch: info return i ;
rank: 872
score: 97.4307861328125
patch: assert true ;
rank: 873
score: 98.20047607421876
patch: return name ; ;
rank: 873
score: 97.89307250976563
patch: target return i ;
rank: 873
score: 97.7626220703125
patch: character ++ i ;
rank: 873
score: 97.43018341064453
patch: -= i ;
rank: 873
score: 97.30956268310547
patch: throw i ;
rank: 874
score: 98.20831909179688
patch: } return 1 ;
rank: 874
score: 98.1948974609375
patch: m return i ;
rank: 874
score: 97.88970947265625
patch: return - ch ;
rank: 874
score: 97.42662048339844
patch: += j ;
rank: 874
score: 97.40348815917969
patch: return / ;
rank: 874
score: 97.30857849121094
patch: if ( }
rank: 875
score: 98.19407958984375
patch: = return i ;
rank: 875
score: 97.88867797851563
patch: state += i ;
rank: 875
score: 97.87130737304688
patch: return . i ;
rank: 875
score: 97.40191650390625
patch: return ( 0
rank: 875
score: 97.27360026041667
patch: break .
rank: 876
score: 98.18693033854167
patch: return 0 ; ; /
rank: 876
score: 98.17624918619792
patch: if ; ; break ;
rank: 876
score: 97.7586181640625
patch: character return count ;
rank: 876
score: 97.2696533203125
patch: ++ ;
rank: 877
score: 98.18575032552083
patch: return ( i 0 ;
rank: 877
score: 98.17600504557292
patch: return i * / ;
rank: 877
score: 97.8860107421875
patch: start = i ;
rank: 877
score: 97.39490509033203
patch: return / /
rank: 877
score: 97.18198649088542
patch: break ?
rank: 878
score: 98.19583740234376
patch: } else * /
rank: 878
score: 98.17538452148438
patch: return true ; ; }
rank: 878
score: 97.8846923828125
patch: throw ch ; }
rank: 878
score: 97.86648559570312
patch: column return i ;
rank: 878
score: 97.41543579101562
patch: break 1 ;
rank: 878
score: 97.39350891113281
patch: return byte CaMeL
rank: 878
score: 97.0279541015625
patch: return
rank: 879
score: 98.19532470703125
patch: return ; * /
rank: 879
score: 98.17523193359375
patch: return next ) ;
rank: 879
score: 97.88197021484375
patch: result ++ j ;
rank: 879
score: 97.74806213378906
patch: character * /
rank: 879
score: 97.40573120117188
patch: found * /
rank: 879
score: 97.39186604817708
patch: try {
rank: 879
score: 97.01382446289062
patch: break }
rank: 880
score: 98.18856201171874
patch: return * 1 ;
rank: 880
score: 98.17190551757812
patch: return i > $NUMBER$ ;
rank: 880
score: 97.88070068359374
patch: { return true ;
rank: 880
score: 97.4052963256836
patch: j -- ;
rank: 881
score: 98.17024739583333
patch: char ; i ++ ;
rank: 881
score: 98.16062622070312
patch: return start ; ;
rank: 881
score: 98.13763427734375
patch: return $NUMBER$ ; ;
rank: 881
score: 97.40159606933594
patch: return CR ;
rank: 881
score: 97.34850311279297
patch: return cs [
rank: 881
score: 96.95819091796875
patch: } }
rank: 882
score: 98.17835693359375
patch: . ; * /
rank: 882
score: 98.16795857747395
patch: return i < ; }
rank: 882
score: 97.88004150390626
patch: res += i ;
rank: 882
score: 97.85606079101562
patch: param return i ;
rank: 882
score: 97.39865112304688
patch: char -- ;
rank: 882
score: 97.3406753540039
patch: b break ;
rank: 882
score: 96.79081217447917
patch: if (
rank: 883
score: 97.65831756591797
patch: character break ;
rank: 883
score: 97.3981704711914
patch: * * /
rank: 883
score: 96.7688496907552
patch: buf ;
rank: 884
score: 98.16600545247395
patch: char ch = ; }
rank: 884
score: 98.139990234375
patch: ( return 1 ;
rank: 884
score: 97.87850952148438
patch: continue ; } }
rank: 884
score: 97.39289855957031
patch: default * /
rank: 884
score: 97.33139038085938
patch: return substring ;
rank: 884
score: 96.74409993489583
patch: -- .
rank: 885
score: 98.16591389973958
patch: return i & ; }
rank: 885
score: 98.13856201171875
patch: return size i ;
rank: 885
score: 97.38778686523438
patch: ^= i ;
rank: 885
score: 96.71041870117188
patch: }
rank: 886
score: 98.1637451171875
patch: return ; } ;
rank: 886
score: 98.13604125976562
patch: return i ; try
rank: 886
score: 97.87664794921875
patch: return - - ;
rank: 886
score: 97.84656982421875
patch: return } j ;
rank: 886
score: 97.3809585571289
patch: return ; ;
rank: 886
score: 96.70277913411458
patch: result ;
rank: 887
score: 98.09462890625
patch: return null ; ;
rank: 887
score: 97.8761474609375
patch: result = true ;
rank: 887
score: 97.84404296875
patch: result return $STRING$ ;
rank: 887
score: 97.37870025634766
patch: matches * /
rank: 887
score: 96.66260782877605
patch: return this
rank: 888
score: 98.15335693359376
patch: } else if ;
rank: 888
score: 98.1317138671875
patch: return i ; i
rank: 888
score: 98.08260345458984
patch: return Math ;
rank: 888
score: 97.87529296875
patch: tmp = i ;
rank: 888
score: 97.36946105957031
patch: &= i ;
rank: 888
score: 96.64628092447917
patch: break )
rank: 889
score: 98.14999389648438
patch: . break ;
rank: 889
score: 97.87110595703125
patch: idx = i ;
rank: 889
score: 97.56214904785156
patch: -- * /
rank: 889
score: 97.36305236816406
patch: } else {
rank: 889
score: 96.63638305664062
patch: result
rank: 890
score: 98.15962727864583
patch: = true ; ; }
rank: 890
score: 97.8686279296875
patch: peer return i ;
rank: 890
score: 97.5546875
patch: = ch ;
rank: 890
score: 97.36003112792969
patch: return split ;
rank: 890
score: 97.29627227783203
patch: break } }
rank: 890
score: 96.61740112304688
patch: return $STRING$
rank: 891
score: 97.84054565429688
patch: return += ch ;
rank: 891
score: 97.29593658447266
patch: start break ;
rank: 891
score: 96.59814453125
patch: break i
rank: 892
score: 98.15877278645833
patch: return count ; } ;
rank: 892
score: 98.123193359375
patch: case return i ;
rank: 892
score: 97.83924560546875
patch: result return 1 ;
rank: 892
score: 97.35807037353516
patch: * / }
rank: 892
score: 97.28343963623047
patch: -- ; }
rank: 892
score: 96.58746337890625
patch: buf
rank: 893
score: 97.9957763671875
patch: return false ; ;
rank: 893
score: 97.867138671875
patch: i = i ;
rank: 893
score: 97.83765869140625
patch: l return i ;
rank: 893
score: 97.53186798095703
patch: character -- ;
rank: 893
score: 97.35480499267578
patch: substring * /
rank: 893
score: 97.28124237060547
patch: case * /
rank: 893
score: 96.58673095703125
patch: append ;
rank: 894
score: 98.15652465820312
patch: return i && ; }
rank: 894
score: 98.12118530273438
patch: return return j ;
rank: 894
score: 97.86411743164062
patch: { return count ;
rank: 894
score: 97.83650512695313
patch: method return i ;
rank: 894
score: 97.50987243652344
patch: return int ;
rank: 894
score: 97.34867858886719
patch: ok * /
rank: 894
score: 96.5576883951823
patch: break :
rank: 895
score: 98.15523274739583
patch: return i <= ; }
rank: 895
score: 98.131298828125
patch: = 0 ; }
rank: 895
score: 97.86075439453126
patch: break + ) ;
rank: 895
score: 97.48953247070312
patch: ch ++ ;
rank: 895
score: 97.33859252929688
patch: more * /
rank: 895
score: 96.540283203125
patch: return 0
rank: 896
score: 98.1549072265625
patch: return $STRING$ ; ; }
rank: 896
score: 98.12182006835937
patch: } return 0 ;
rank: 896
score: 98.10953369140626
patch: catch return i ;
rank: 896
score: 97.857275390625
patch: true break ; }
rank: 896
score: 97.48307800292969
patch: ++ i ;
rank: 896
score: 97.3362808227539
patch: length * /
rank: 896
score: 97.270751953125
patch: return new int
rank: 896
score: 96.53450520833333
patch: LOG .
rank: 897
score: 98.11522216796875
patch: return * $NUMBER$ ;
rank: 897
score: 97.85638427734375
patch: true += i ;
rank: 897
score: 97.827392578125
patch: src return i ;
rank: 897
score: 96.5240987141927
patch: return else
rank: 898
score: 97.85581665039062
patch: found = i ;
rank: 898
score: 97.33294677734375
patch: retval * /
rank: 898
score: 96.51588948567708
patch: append $NUMBER$
rank: 899
score: 97.82311401367187
patch: k return i ;
rank: 899
score: 97.32410430908203
patch: is continue ;
rank: 899
score: 96.49303181966145
patch: return ch
rank: 900
score: 98.079150390625
patch: return start ) ;
rank: 900
score: 97.94735107421874
patch: i return $NUMBER$ ;
rank: 900
score: 97.81716918945312
patch: result return true ;
rank: 900
score: 97.32386779785156
patch: static * /
rank: 901
score: 97.85187377929688
patch: return & 1 ;
rank: 901
score: 97.81643676757812
patch: max return i ;
rank: 901
score: 97.32350667317708
patch: if ;
rank: 901
score: 96.4650370279948
patch: ++ .
rank: 902
score: 98.10953979492187
patch: char ch = ;
rank: 902
score: 98.06666259765625
patch: throw return i ;
rank: 902
score: 97.8518310546875
patch: { return j ;
rank: 902
score: 97.36894226074219
patch: character
rank: 902
score: 97.32217407226562
patch: token * /
rank: 902
score: 96.45159912109375
patch: return cs
rank: 903
score: 98.1049072265625
patch: return ( ; }
rank: 903
score: 98.07774658203125
patch: . break ; }
rank: 903
score: 98.06583862304687
patch: while return i ;
rank: 903
score: 97.85128784179688
patch: addr return i ;
rank: 903
score: 97.81435546875
patch: d return i ;
rank: 903
score: 97.3631362915039
patch: return case ;
rank: 903
score: 97.32012939453125
patch: default break ;
rank: 903
score: 96.45010375976562
patch: -- ?
rank: 904
score: 98.0767333984375
patch: return 1 ; else
rank: 904
score: 98.05452880859374
patch: break i ; ;
rank: 904
score: 97.848876953125
patch: break . ; }
rank: 904
score: 97.81111450195313
patch: result return null ;
rank: 904
score: 97.31932067871094
patch: &= true ;
rank: 904
score: 96.77311197916667
patch: return new
rank: 904
score: 96.44896443684895
patch: sb ;
rank: 905
score: 97.8448974609375
patch: ret = j ;
rank: 905
score: 97.35671997070312
patch: return 1 }
rank: 905
score: 96.43961588541667
patch: return -
rank: 906
score: 98.061279296875
patch: if ( ch ;
rank: 906
score: 98.03955688476563
patch: = return 1 ;
rank: 906
score: 97.31779479980469
patch: ret -- ;
rank: 906
score: 96.71549479166667
patch: logger .
rank: 906
score: 96.35945638020833
patch: -- }
rank: 907
score: 98.06016235351562
patch: . throw null ;
rank: 907
score: 97.84166259765625
patch: return { i ;
rank: 907
score: 97.80578002929687
patch: position return i ;
rank: 907
score: 97.3134765625
patch: = 0 ;
rank: 907
score: 96.6587422688802
patch: log .
rank: 908
score: 98.05660400390624
patch: return 0 ] ;
rank: 908
score: 98.0310791015625
patch: return start i ;
rank: 908
score: 97.34027099609375
patch: i ++ ;
rank: 908
score: 97.31258392333984
patch: return compare ;
rank: 908
score: 96.31099446614583
patch: result }
rank: 909
score: 98.0441650390625
patch: } } if ;
rank: 909
score: 97.87655029296874
patch: return true ; ;
rank: 909
score: 97.84046020507813
patch: len = i ;
rank: 909
score: 97.31192016601562
patch: used * /
rank: 909
score: 96.63505045572917
patch: System .
rank: 909
score: 96.0011978149414
patch: else
rank: 910
score: 98.04224243164063
patch: return 0 $NUMBER$ ;
rank: 910
score: 98.02813110351562
patch: String return i ;
rank: 910
score: 98.02482299804687
patch: return ; ; }
rank: 910
score: 97.87210083007812
patch: return next ;
rank: 910
score: 97.29837036132812
patch: tag * /
rank: 910
score: 95.85625457763672
patch: sb
rank: 911
score: 98.04024658203124
patch: * * * /
rank: 911
score: 98.02396850585937
patch: break ; ; ;
rank: 911
score: 97.83954467773438
patch: true = i ;
rank: 911
score: 97.32288360595703
patch: return this }
rank: 911
score: 96.54292805989583
patch: return [
rank: 911
score: 95.63177490234375
patch: s
rank: 912
score: 98.03924560546875
patch: += 0 ; }
rank: 912
score: 97.83656005859375
patch: result ++ ; }
rank: 912
score: 97.79599609375
patch: result return false ;
rank: 912
score: 97.3106460571289
patch: { * /
rank: 912
score: 97.2939453125
patch: if ; }
rank: 912
score: 95.56005859375
patch: ret
rank: 913
score: 98.03878173828124
patch: if ; * /
rank: 913
score: 98.01453857421875
patch: = true ; ;
rank: 913
score: 97.30622863769531
patch: return double ;
rank: 913
score: 97.29092407226562
patch: pos ++ ;
rank: 913
score: 96.53274536132812
patch: Buffer [
rank: 913
score: 95.49591064453125
patch: b
rank: 914
score: 98.01026611328125
patch: return length ; ;
rank: 914
score: 98.00414428710937
patch: return >= ; }
rank: 914
score: 97.836376953125
patch: break + j ;
rank: 914
score: 97.28653717041016
patch: tree * /
rank: 914
score: 95.36245727539062
patch: text
rank: 915
score: 98.03680419921875
patch: return value $NUMBER$ ;
rank: 915
score: 98.00188598632812
patch: byte ch = ;
rank: 915
score: 97.83629150390625
patch: throw ( $STRING$ ;
rank: 915
score: 97.59423828125
patch: return super ;
rank: 915
score: 97.28355407714844
patch: name * /
rank: 915
score: 96.49198404947917
patch: else }
rank: 915
score: 95.35987854003906
patch: str
rank: 916
score: 97.83390502929687
patch: pos = 0 ;
rank: 916
score: 97.57292175292969
patch: return Character ;
rank: 916
score: 97.28345489501953
patch: ch -- ;
rank: 916
score: 97.28215789794922
patch: += $NUMBER$ ;
rank: 916
score: 95.3500747680664
patch: f
rank: 917
score: 97.828955078125
patch: result , break ;
rank: 917
score: 97.7876953125
patch: return += i ;
rank: 917
score: 97.53388977050781
patch: i ; ;
rank: 917
score: 97.2805404663086
patch: in * /
rank: 917
score: 97.28044128417969
patch: c ++ ;
rank: 917
score: 96.45154825846355
patch: b ;
rank: 917
score: 95.32340240478516
patch: i
rank: 918
score: 97.82852172851562
patch: v = i ;
rank: 918
score: 97.51637268066406
patch: return ; {
rank: 918
score: 97.2801513671875
patch: ( ch )
rank: 918
score: 97.27804565429688
patch: match * /
rank: 918
score: 96.42397054036458
patch: else ;
rank: 918
score: 95.31661224365234
patch: n
rank: 919
score: 97.9905029296875
patch: finally return i ;
rank: 919
score: 97.82636108398438
patch: found = true ;
rank: 919
score: 97.783349609375
patch: array return i ;
rank: 919
score: 97.27782440185547
patch: throw new ;
rank: 919
score: 97.27511596679688
patch: return static ;
rank: 919
score: 96.34147135416667
patch: log ;
rank: 920
score: 97.9892333984375
patch: return next i ;
rank: 920
score: 97.82446899414063
patch: folder return i ;
rank: 920
score: 97.2734375
patch: ; break ;
rank: 920
score: 97.27102661132812
patch: return ( }
rank: 920
score: 96.32769775390625
patch: return return
rank: 920
score: 95.2596206665039
patch: start
rank: 921
score: 97.98739624023438
patch: cached return i ;
rank: 921
score: 97.9580322265625
patch: throw new ; }
rank: 921
score: 97.27268981933594
patch: version * /
rank: 921
score: 96.32703653971355
patch: return !
rank: 921
score: 95.24842834472656
patch: ch
rank: 922
score: 98.01043701171875
patch: ( ; * /
rank: 922
score: 97.95574340820312
patch: return ~ ; }
rank: 922
score: 97.27140808105469
patch: result -- ;
rank: 922
score: 96.3111572265625
patch: Asserts .
rank: 922
score: 95.22307586669922
patch: tmp
rank: 923
score: 97.8090591430664
patch: throw ch ;
rank: 923
score: 97.27106475830078
patch: right * /
rank: 923
score: 97.26203155517578
patch: i -- ;
rank: 923
score: 95.17741394042969
patch: pos
rank: 924
score: 97.77637939453125
patch: result return ch ;
rank: 924
score: 97.77598571777344
patch: result ++ ;
rank: 924
score: 97.43849182128906
patch: return Double ;
rank: 924
score: 97.26512908935547
patch: char continue ;
rank: 924
score: 96.25047810872395
patch: for ;
rank: 924
score: 95.16482543945312
patch: end
rank: 925
score: 97.26486206054688
patch: cached * /
rank: 925
score: 97.25851440429688
patch: return NULL ;
rank: 925
score: 95.11201477050781
patch: final
rank: 926
score: 97.94120483398437
patch: return read ; }
rank: 926
score: 97.77391357421875
patch: ch return 0 ;
rank: 926
score: 97.26457977294922
patch: parser * /
rank: 926
score: 97.25387573242188
patch: return capacity ;
rank: 926
score: 96.24634806315105
patch: buf .
rank: 926
score: 95.10527038574219
patch: name
rank: 927
score: 97.98038330078126
patch: assert return i ;
rank: 927
score: 97.26451110839844
patch: &= false ;
rank: 927
score: 96.24123128255208
patch: throw new
rank: 927
score: 95.08938598632812
patch: string
rank: 928
score: 97.93375244140626
patch: return i >= ;
rank: 928
score: 97.7678466796875
patch: msg return i ;
rank: 928
score: 97.32787322998047
patch: return list ;
rank: 928
score: 97.26339721679688
patch: += $STRING$ ;
rank: 928
score: 95.04878234863281
patch: line
rank: 929
score: 97.9919189453125
patch: return ++ 1 ;
rank: 929
score: 97.31263732910156
patch: return chars ;
rank: 929
score: 97.25879669189453
patch: key * /
rank: 929
score: 94.99700164794922
patch: buffer
rank: 930
score: 97.26553344726562
patch: return Number ;
rank: 930
score: 97.2559814453125
patch: else * /
rank: 930
score: 94.9698486328125
patch: x
rank: 931
score: 97.9683837890625
patch: Integer return i ;
rank: 931
score: 97.90767822265624
patch: return i % ;
rank: 931
score: 97.76722412109375
patch: return case $NUMBER$ ;
rank: 931
score: 97.60385131835938
patch: -- i ;
rank: 931
score: 97.25518798828125
patch: pos -- ;
rank: 931
score: 94.95789337158203
patch: value
rank: 932
score: 97.89705810546874
patch: return i -- ;
rank: 932
score: 97.763623046875
patch: stream return i ;
rank: 932
score: 97.24760437011719
patch: text * /
rank: 932
score: 97.2125473022461
patch: return default ;
rank: 932
score: 96.70009358723958
patch: return INDEX
rank: 932
score: 94.94849395751953
patch: type
rank: 933
score: 97.97916259765626
patch: break * * /
rank: 933
score: 97.59782409667969
patch: { break ;
rank: 933
score: 97.23625183105469
patch: assert false ;
rank: 933
score: 97.20629119873047
patch: return String ;
rank: 933
score: 96.6116943359375
patch: character }
rank: 933
score: 94.9224624633789
patch: r
rank: 934
score: 97.76194458007812
patch: prop return i ;
rank: 934
score: 97.23590087890625
patch: field * /
rank: 934
score: 97.1962661743164
patch: i else ;
rank: 934
score: 95.4345474243164
patch: {
rank: 934
score: 94.9005126953125
patch: c
rank: 935
score: 97.97244262695312
patch: is return 1 ;
rank: 935
score: 97.9599853515625
patch: list = i ;
rank: 935
score: 97.23577117919922
patch: , break ;
rank: 935
score: 97.18942260742188
patch: return byte ;
rank: 935
score: 94.87583923339844
patch: break
rank: 936
score: 97.96390380859376
patch: . return value ;
rank: 936
score: 97.23336791992188
patch: cmp * /
rank: 936
score: 95.3280258178711
patch: set
rank: 936
score: 94.86766052246094
patch: out
rank: 937
score: 97.955810546875
patch: try return i ;
rank: 937
score: 97.57911682128906
patch: return -- ;
rank: 937
score: 97.23332214355469
patch: at * /
rank: 937
score: 96.46708170572917
patch: { }
rank: 938
score: 97.95421142578125
patch: return i ; /
rank: 938
score: 97.86742553710937
patch: return ++ ; }
rank: 938
score: 97.55877685546875
patch: break . ;
rank: 938
score: 97.22418212890625
patch: s -- ;
rank: 938
score: 96.40304565429688
patch: ++ }
rank: 938
score: 94.82321166992188
patch: do
rank: 939
score: 97.95341796875
patch: . / * /
rank: 939
score: 97.752880859375
patch: it return i ;
rank: 939
score: 97.2220687866211
patch: int -- ;
rank: 939
score: 94.7978286743164
patch: prefix
rank: 940
score: 97.21940612792969
patch: return package ;
rank: 940
score: 97.14540100097656
patch: i i ;
rank: 940
score: 94.79147338867188
patch: o
rank: 941
score: 97.85758056640626
patch: return i > ;
rank: 941
score: 97.75066528320312
patch: throw 0 ; }
rank: 941
score: 97.21076965332031
patch: = $NUMBER$ ;
rank: 941
score: 96.35025024414062
patch: ; }
rank: 941
score: 94.79004669189453
patch: peer
rank: 942
score: 97.94567260742187
patch: . } * /
rank: 942
score: 97.9430908203125
patch: throw i ; ;
rank: 942
score: 97.21026611328125
patch: if i ;
rank: 942
score: 97.0692850748698
patch: i ;
rank: 942
score: 96.30054728190105
patch: character :
rank: 942
score: 94.98036193847656
patch: a
rank: 942
score: 94.78054809570312
patch: z
rank: 943
score: 97.8447998046875
patch: return i == ;
rank: 943
score: 97.5101547241211
patch: true break ;
rank: 943
score: 97.20915222167969
patch: -= 1 ;
rank: 943
score: 94.77803039550781
patch: total
rank: 944
score: 97.9408203125
patch: . break i ;
rank: 944
score: 97.94012451171875
patch: handle return i ;
rank: 944
score: 97.20361328125
patch: s ++ ;
rank: 944
score: 96.57279459635417
patch: i i
rank: 944
score: 96.26705169677734
patch: index
rank: 944
score: 94.77513122558594
patch: default
rank: 945
score: 97.93543701171875
patch: . return length ;
rank: 945
score: 97.19332122802734
patch: n -- ;
rank: 945
score: 96.33551025390625
patch: i else
rank: 945
score: 94.77517700195312
patch: t
rank: 945
score: 94.75204467773438
patch: !
rank: 946
score: 97.81488647460938
patch: return BYTES ; }
rank: 946
score: 97.49679565429688
patch: -- j ;
rank: 946
score: 96.31486002604167
patch: / ;
rank: 946
score: 96.22628784179688
patch: .
rank: 946
score: 94.7237319946289
patch: ;
rank: 947
score: 97.92745361328124
patch: Object return i ;
rank: 947
score: 97.480712890625
patch: continue i ;
rank: 947
score: 97.19316101074219
patch: removed * /
rank: 947
score: 94.75071716308594
patch: prev
rank: 947
score: 94.70578002929688
patch: file
rank: 948
score: 97.47461700439453
patch: break j ;
rank: 948
score: 97.19071960449219
patch: *= $NUMBER$ ;
rank: 948
score: 95.95886993408203
patch: )
rank: 948
score: 94.72118377685547
patch: bytes
rank: 948
score: 94.70355987548828
patch: off
rank: 949
score: 97.78858032226563
patch: return >> ; }
rank: 949
score: 97.18966674804688
patch: |= 1 ;
rank: 949
score: 95.86678059895833
patch: } ;
rank: 949
score: 94.69499969482422
patch: list
rank: 950
score: 97.18888854980469
patch: done * /
rank: 950
score: 94.69692993164062
patch: err
rank: 950
score: 94.64279174804688
patch: case
rank: 951
score: 96.6525166829427
patch: ( ;
rank: 951
score: 95.8367411295573
patch: ; ;
rank: 951
score: 94.66703796386719
patch: first
rank: 951
score: 94.62175750732422
patch: d
rank: 952
score: 97.91304931640624
patch: return i ; *
rank: 952
score: 97.77511596679688
patch: return reverse ; }
rank: 952
score: 96.58218383789062
patch: char ;
rank: 952
score: 95.8363545735677
patch: } i
rank: 952
score: 94.61454772949219
patch: addr
rank: 953
score: 97.911865234375
patch: id return i ;
rank: 953
score: 97.76998291015624
patch: return >> i ;
rank: 953
score: 96.54048665364583
patch: * ;
rank: 953
score: 95.30914306640625
patch: static
rank: 953
score: 94.61237335205078
patch: val
rank: 954
score: 97.3976058959961
patch: byte [ ;
rank: 954
score: 96.37923177083333
patch: default ;
rank: 954
score: 95.72352600097656
patch: /
rank: 954
score: 94.61665344238281
patch: and
rank: 954
score: 94.6084213256836
patch: count
rank: 955
score: 97.37791442871094
patch: switch ( )
rank: 955
score: 94.60419464111328
patch: y
rank: 956
score: 96.3563741048177
patch: ret ;
rank: 956
score: 94.60066986083984
patch: output
rank: 956
score: 94.57603454589844
patch: names
rank: 957
score: 97.90289306640625
patch: List return i ;
rank: 957
score: 97.62440999348958
patch: } else
rank: 957
score: 97.36637115478516
patch: count ++ ;
rank: 957
score: 95.05226135253906
patch: try
rank: 957
score: 94.57180786132812
patch: os
rank: 958
score: 97.61398315429688
patch: . } else
rank: 958
score: 97.36603546142578
patch: } ) {
rank: 958
score: 96.31571451822917
patch: in default
rank: 958
score: 94.89144897460938
patch: --
rank: 958
score: 94.55780792236328
patch: stream
rank: 959
score: 96.31447347005208
patch: . ;
rank: 959
score: 94.82786560058594
patch: cs
rank: 959
score: 94.62167358398438
patch: *
rank: 959
score: 94.52525329589844
patch: l
rank: 960
score: 97.89952392578125
patch: throw new ; ;
rank: 960
score: 97.59538269042969
patch: . } }
rank: 960
score: 97.33880615234375
patch: count -- ;
rank: 960
score: 96.30853271484375
patch: value ;
rank: 960
score: 94.794189453125
patch: j
rank: 960
score: 94.57416534423828
patch: 
rank: 960
score: 94.52830505371094
patch: doc
rank: 960
score: 94.5200424194336
patch: array
rank: 961
score: 97.56741333007812
patch: return abs ;
rank: 961
score: 97.5205307006836
patch: return >= ;
rank: 961
score: 96.30600992838542
patch: this .
rank: 961
score: 94.5135498046875
patch: label
rank: 962
score: 97.51557922363281
patch: if ; ;
rank: 962
score: 96.28265380859375
patch: final ;
rank: 962
score: 94.77454376220703
patch: ]
rank: 962
score: 94.5037841796875
patch: number
rank: 962
score: 94.50228881835938
patch: handle
rank: 963
score: 97.4817123413086
patch: return BYTES ;
rank: 963
score: 97.304931640625
patch: break ) ;
rank: 963
score: 96.26551310221355
patch: next ;
rank: 963
score: 94.49256896972656
patch: flags
rank: 964
score: 94.48928833007812
patch: p
rank: 965
score: 95.39366912841797
patch: loop
rank: 965
score: 94.47186279296875
patch: row
rank: 965
score: 94.45228576660156
patch: ,
rank: 966
score: 94.68077087402344
patch: Chars
rank: 967
score: 97.35118103027344
patch: i break ;
rank: 967
score: 97.33707427978516
patch: return read ;
rank: 967
score: 95.37464904785156
patch: in
rank: 967
score: 94.46755981445312
patch: String
rank: 967
score: 94.40890502929688
patch: writer
rank: 968
score: 97.477294921875
patch: } * /
rank: 968
score: 96.89735921223958
patch: true }
rank: 968
score: 94.64067077636719
patch: temp
rank: 968
score: 94.46127319335938
patch: chars
rank: 969
score: 97.46859741210938
patch: . * ;
rank: 969
score: 97.3184585571289
patch: return ceil ;
rank: 969
score: 94.6314468383789
patch: info
rank: 969
score: 94.45714569091797
patch: entry
rank: 969
score: 93.31721496582031
patch: check
rank: 970
score: 97.507568359375
patch: throw false ;
rank: 970
score: 97.31245422363281
patch: return ( i
rank: 970
score: 94.43701934814453
patch: path
rank: 970
score: 94.36978912353516
patch: arg
rank: 970
score: 93.27449035644531
patch: System
rank: 971
score: 97.27714538574219
patch: return ~ ;
rank: 971
score: 94.62443542480469
patch: length
rank: 971
score: 94.43247985839844
patch: image
rank: 972
score: 95.1135482788086
patch: ?
rank: 972
score: 94.42618560791016
patch: m
rank: 972
score: 94.36154174804688
patch: code
rank: 972
score: 93.25641632080078
patch: skip
rank: 973
score: 94.35530090332031
patch: bad
rank: 973
score: 93.24169921875
patch: LOG
rank: 974
score: 96.64320882161458
patch: / /
rank: 974
score: 94.54421997070312
patch: expr
rank: 974
score: 94.4210205078125
patch: input
rank: 974
score: 94.35128784179688
patch: encoding
rank: 975
score: 97.40805053710938
patch: += 0 ;
rank: 975
score: 95.0391845703125
patch: parser
rank: 975
score: 94.5408935546875
patch: :
rank: 975
score: 94.4124755859375
patch: error
rank: 976
score: 97.38005828857422
patch: = null ;
rank: 976
score: 94.40022277832031
patch: int
rank: 976
score: 94.34375762939453
patch: stack
rank: 976
score: 93.18362426757812
patch: finally
rank: 977
score: 94.39543151855469
patch: cached
rank: 978
score: 97.36813354492188
patch: throw true ;
rank: 978
score: 97.18814849853516
patch: return padding ;
rank: 978
score: 97.10159301757812
patch: . }
rank: 978
score: 96.5830078125
patch: break {
rank: 978
score: 94.86032104492188
patch: token
rank: 978
score: 94.5124282836914
patch: is
rank: 979
score: 97.3559799194336
patch: continue ; ;
rank: 979
score: 94.86018371582031
patch: this
rank: 979
score: 94.47171020507812
patch: method
rank: 979
score: 94.39407348632812
patch: node
rank: 979
score: 94.31130981445312
patch: added
rank: 980
score: 96.5396728515625
patch: true ;
rank: 980
score: 94.83412170410156
patch: item
rank: 980
score: 94.38148498535156
patch: res
rank: 980
score: 93.140380859375
patch: next
rank: 981
score: 97.34008026123047
patch: -- * ;
rank: 981
score: 96.56463623046875
patch: throw ;
rank: 981
score: 96.4869384765625
patch: } )
rank: 981
score: 94.37788391113281
patch: byte
rank: 981
score: 94.30005645751953
patch: msg
rank: 982
score: 97.32361602783203
patch: i * ;
rank: 982
score: 97.21478271484375
patch: return iterator ;
rank: 982
score: 96.4546610514323
patch: else {
rank: 982
score: 94.81551361083984
patch: tag
rank: 982
score: 94.3742446899414
patch: position
rank: 984
score: 96.32791137695312
patch: true
rank: 984
score: 94.79141235351562
patch: to
rank: 984
score: 94.27401733398438
patch: before
rank: 985
score: 94.77284240722656
patch: filter
rank: 985
score: 93.04512023925781
patch: logger
rank: 986
score: 94.76675415039062
patch: version
rank: 986
score: 94.24110412597656
patch: offset
rank: 987
score: 96.46866861979167
patch: = ;
rank: 987
score: 94.231689453125
patch: warn
rank: 988
score: 94.7405014038086
patch: def
rank: 988
score: 94.21913146972656
patch: e
rank: 988
score: 92.99635314941406
patch: Offset
rank: 989
score: 96.51341756184895
patch: / i
rank: 989
score: 95.47395324707031
patch: false
rank: 989
score: 94.7113265991211
patch: used
rank: 989
score: 94.35060119628906
patch: key
rank: 989
score: 94.335693359375
patch: ex
rank: 989
score: 92.9937744140625
patch: iterator
rank: 990
score: 96.46193440755208
patch: for i
rank: 990
score: 94.73841857910156
patch: parent
rank: 990
score: 94.71089172363281
patch: scanner
rank: 990
score: 94.211669921875
patch: v
rank: 991
score: 96.41490681966145
patch: / *
rank: 991
score: 94.73796081542969
patch: state
rank: 991
score: 94.7071762084961
patch: ok
rank: 991
score: 94.32743835449219
patch: reader
rank: 991
score: 94.32020568847656
patch: len
rank: 991
score: 94.20672607421875
patch: connection
rank: 992
score: 96.37876383463542
patch: -- *
rank: 993
score: 94.29727172851562
patch: INDEX
rank: 993
score: 94.18928527832031
patch: source
rank: 993
score: 92.87921905517578
patch: public
rank: 994
score: 94.65693664550781
patch: match
rank: 994
score: 94.59548950195312
patch: iter
rank: 994
score: 94.29380798339844
patch: retval
rank: 994
score: 94.17571258544922
patch: children
rank: 994
score: 92.861328125
patch: last
rank: 995
score: 96.14729817708333
patch: http :
rank: 995
score: 94.94318389892578
patch: impl
rank: 995
score: 94.29188537597656
patch: symbol
rank: 995
score: 94.17146301269531
patch: child
rank: 996
score: 96.14053344726562
patch: ? ;
rank: 996
score: 94.6036376953125
patch: so
rank: 996
score: 94.57429504394531
patch: map
rank: 996
score: 94.16683959960938
patch: table
rank: 997
score: 96.1196797688802
patch: c ;
rank: 997
score: 94.5999526977539
patch: substring
rank: 997
score: 94.52487182617188
patch: layout
rank: 998
score: 92.75692749023438
patch: max
rank: 999
score: 94.82228088378906
patch: modifiers
rank: 999
score: 94.58369445800781
patch: fg
rank: 999
score: 94.239990234375
patch: status
rank: 999
score: 94.19762420654297
patch: new
rank: 1000
score: 94.57921600341797
patch: right
rank: 1000
score: 94.43521118164062
patch: manager
rank: 1000
score: 93.86552429199219
patch: throw
