rank: 1
score: 99.8992587002841
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 1
score: 99.8461383322011
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / (
rank: 1
score: 99.78671264648438
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean )
rank: 1
score: 99.777626953125
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) /
rank: 1
score: 99.75490993923611
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation *
rank: 1
score: 99.66439016241776
patch: return ( ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 2
score: 99.82113826976104
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) /
rank: 2
score: 99.725634765625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 2
score: 99.7196044921875
patch: return 0 . 0 * Erf . erf ( ( x - mean )
rank: 2
score: 99.6937725360577
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 /
rank: 2
score: 99.65147489659927
patch: return ( 0 . 0 + Erf . erf ( ( x - mean )
rank: 3
score: 99.79581705729167
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 3
score: 99.77507414641204
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) /
rank: 3
score: 99.75328233506944
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 3
score: 99.71031996783088
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean )
rank: 3
score: 99.68128380408653
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 +
rank: 3
score: 99.65001085069444
patch: return ( 0 . 0 + Erf . erf ( ( x - mean ) /
rank: 4
score: 99.79494406960227
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 4
score: 99.77205033735795
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) ;
rank: 4
score: 99.74759043817934
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / (
rank: 4
score: 99.73374430338542
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean (
rank: 4
score: 99.70728352864583
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 5
score: 99.75925514914773
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 5
score: 99.73387610394022
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / (
rank: 5
score: 99.72805918817934
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / /
rank: 5
score: 99.69246673583984
patch: return 0 . 0 + Erf . erf ( ( x - mean )
rank: 5
score: 99.665234375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0
rank: 5
score: 99.63863525390624
patch: return 0 . $NUMBER$ * ( 1 . - Erf . erf ( ( x - mean )
rank: 6
score: 99.747880859375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf ) /
rank: 6
score: 99.74242054332386
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) /
rank: 6
score: 99.735048828125
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ ) /
rank: 6
score: 99.7255795127467
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / (
rank: 6
score: 99.71554565429688
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean )
rank: 6
score: 99.704638671875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( $NUMBER$ . 0 ) ) ) ;
rank: 6
score: 99.64789177389706
patch: return 0 . 0 * ( Erf . erf ( ( x - mean )
rank: 6
score: 99.63857134650735
patch: return ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 7
score: 99.73564009232955
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) /
rank: 7
score: 99.73390480324075
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) /
rank: 7
score: 99.72340990149456
patch: return 0 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) / (
rank: 7
score: 99.714140625
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) /
rank: 7
score: 99.70034903067129
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation *
rank: 7
score: 99.6500244140625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0
rank: 7
score: 99.63412814670139
patch: return ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 8
score: 99.73059953962054
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) ) /
rank: 8
score: 99.72813349184783
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) ) /
rank: 8
score: 99.71929376775569
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) )
rank: 8
score: 99.69767252604167
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 8
score: 99.64685997596153
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 /
rank: 8
score: 99.61626233552632
patch: return ( ( 0 . 0 + Erf . erf ( ( x - mean ) /
rank: 9
score: 99.72782759232955
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 0 . 0 ) /
rank: 9
score: 99.72540642233456
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) ;
rank: 9
score: 99.71829356317934
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) / (
rank: 9
score: 99.71103341238839
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / /
rank: 9
score: 99.69656937210648
patch: return 0 . $NUMBER$ * ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 9
score: 99.63238166360294
patch: return 0 . 0 * Erf . erf ( ( x - mean ) /
rank: 9
score: 99.61593467310855
patch: if ( ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 10
score: 99.72551935369319
patch: return 0 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 10
score: 99.72328879616477
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) *
rank: 10
score: 99.72021484375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) ) ;
rank: 10
score: 99.7132059733073
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) ) ) ;
rank: 10
score: 99.71055772569444
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) / mean )
rank: 10
score: 99.69601876395089
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) ) ;
rank: 10
score: 99.60724235983456
patch: return ( 0 . $NUMBER$ + Erf . erf ( ( x - mean )
rank: 11
score: 99.72263671875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ) ) /
rank: 11
score: 99.71542697482639
patch: return ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) /
rank: 11
score: 99.7131580171131
patch: return 0 . $NUMBER$ * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 11
score: 99.69986979166667
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / Erf . erf (
rank: 11
score: 99.68322265625
patch: return 0 . $NUMBER$ * ( 1 . 0 + standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 11
score: 99.63776104266827
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 /
rank: 11
score: 99.62529754638672
patch: return 0 . $NUMBER$ + Erf . erf ( ( x - mean )
rank: 11
score: 99.60248480902777
patch: return ( 0 . $NUMBER$ + Erf . erf ( ( x - mean ) /
rank: 12
score: 99.72239176432292
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ) /
rank: 12
score: 99.7179706280048
patch: return 0 . $NUMBER$ * 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 12
score: 99.70762567934783
patch: return 0 . $NUMBER$ * ( $NUMBER$ . 0 + Erf . erf ( ( x - mean ) / (
rank: 12
score: 99.69899338942308
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) / /
rank: 12
score: 99.67672526041666
patch: return 0 . 0 * ( 1 . 0 + Erf / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 12
score: 99.59844970703125
patch: return cumulative CaMeL Probability ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 13
score: 99.71037153764205
patch: return 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 13
score: 99.70812270220588
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( x - mean ) /
rank: 13
score: 99.7049051920573
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( (
rank: 13
score: 99.69764122596153
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) / double
rank: 13
score: 99.67606476814517
patch: return 0 . $NUMBER$ * ( 1 . 0 + standard CaMeL Deviation * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 13
score: 99.59694213867188
patch: return ( ( 1 . 0 + Erf . erf ( ( x - mean ) / (
rank: 14
score: 99.70471722146739
patch: return 0 . 1 * ( 1 . 0 + Erf . erf ( ( x - mean ) / (
rank: 14
score: 99.67038399832589
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( x - mean ) / ( $NUMBER$ . 0 ) ) ;
rank: 14
score: 99.6328457919034
patch: return 0 . $NUMBER$ / ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 14
score: 99.6103874655331
patch: return 0 . 0 + Erf . erf ( ( x - mean ) /
rank: 14
score: 99.59279497931985
patch: return ( 1 . $NUMBER$ + Erf . erf ( ( x - mean )
rank: 15
score: 99.70957594651442
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . get CaMeL
rank: 15
score: 99.70411095252403
patch: return 0 . $NUMBER$ * 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 15
score: 99.70228643002717
patch: return 0 . $NUMBER$ * ( 0 . 0 + Erf . erf ( ( x - mean ) / (
rank: 15
score: 99.66969517299107
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * (
rank: 16
score: 99.707763671875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) - mean ) /
rank: 16
score: 99.70289195667614
patch: return 0 . $NUMBER$ * Erf . erf ( Erf . erf ( ( x - mean ) /
rank: 16
score: 99.69355119977679
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / Erf . erf ( (
rank: 16
score: 99.66891043526786
patch: return cumulative CaMeL Probability ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 16
score: 99.63103778545673
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 )
rank: 16
score: 99.60525851779514
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) /
rank: 17
score: 99.70718149038461
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / / mean ) /
rank: 17
score: 99.69242350260417
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / / /
rank: 17
score: 99.68650599888393
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) ) /
rank: 17
score: 99.66781850961539
patch: return ( 0 . 0 + Erf . erf ( ( x - mean ) / ( $NUMBER$ . 0 ) ) ) ;
rank: 17
score: 99.63001598011364
patch: return 0 . $NUMBER$ * ( 1 . 0 / Erf . erf ( ( x - mean ) /
rank: 17
score: 99.59784698486328
patch: return cumulative CaMeL Probability ( Erf . erf ( ( x - mean )
rank: 17
score: 99.58502875434027
patch: return ( ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 18
score: 99.69203920717592
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / Erf . erf (
rank: 18
score: 99.69104585193452
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 18
score: 99.6855801669034
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) /
rank: 18
score: 99.62920673076923
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 +
rank: 18
score: 99.59479118795956
patch: return 0 . 0 + ( Erf . erf ( ( x - mean )
rank: 19
score: 99.70033772786458
patch: try { return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 19
score: 99.6913592998798
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ ) / /
rank: 19
score: 99.69030230978261
patch: return 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / (
rank: 19
score: 99.68023212139423
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 19
score: 99.66443241003788
patch: return 0 . 0 * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 19
score: 99.6273193359375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 +
rank: 19
score: 99.5764095908717
patch: return ( 0 . 0 + Erf . erf ( ( x - mean ) / (
rank: 19
score: 99.57449340820312
patch: return 0 . $NUMBER$ * ( ( double ) Erf . erf ( ( x - mean )
rank: 20
score: 99.69429072627315
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . $NUMBER$ ) /
rank: 20
score: 99.6775535300926
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) )
rank: 20
score: 99.66403377757354
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 20
score: 99.62488606770833
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 / $NUMBER$ . 0 /
rank: 20
score: 99.5690185546875
patch: return cumulative CaMeL Probability ( ( double ) Erf . erf ( ( x - mean ) /
rank: 20
score: 99.55487060546875
patch: return ( ( 0 . 0 + Erf . erf ( ( x - mean ) / (
rank: 21
score: 99.697998046875
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 1 . 0 ) /
rank: 21
score: 99.68845533288044
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) + (
rank: 21
score: 99.68812391493056
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 21
score: 99.68472403067129
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) /
rank: 21
score: 99.67739035866477
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ * Erf . erf ( ( x - mean ) /
rank: 21
score: 99.660693359375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / ( $NUMBER$ . 0 ) ) ;
rank: 21
score: 99.6197509765625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( int ) Erf . erf ( ( x - mean ) /
rank: 21
score: 99.55474532277961
patch: return ( ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) /
rank: 22
score: 99.6880215731534
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) +
rank: 22
score: 99.6859375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / mean ) /
rank: 22
score: 99.6604248046875
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ) / ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 22
score: 99.5527279502467
patch: return ( 1 . 0 + Erf . erf ( ( x - mean ) / (
rank: 23
score: 99.67958803530092
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . $NUMBER$ ) /
rank: 23
score: 99.678818359375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) )
rank: 23
score: 99.65983072916667
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( $NUMBER$ . 0 ) ) ) ;
rank: 23
score: 99.61841607862904
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 / Erf . 0 /
rank: 23
score: 99.55117958470395
patch: if ( ( 0 . 0 + Erf . erf ( ( x - mean ) /
rank: 24
score: 99.67894789751838
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) *
rank: 24
score: 99.67701134314903
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) ) /
rank: 24
score: 99.65849777747844
patch: return Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 24
score: 99.61837670110887
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 /
rank: 24
score: 99.55276150173611
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / (
rank: 24
score: 99.54991149902344
patch: return 0 . $NUMBER$ * ( 1 . 0 + x - mean ) ;
rank: 25
score: 99.69325608473558
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 +
rank: 25
score: 99.66865596064815
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 1 ) /
rank: 25
score: 99.65776715959821
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) ) ;
rank: 25
score: 99.61630483774039
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) / $NUMBER$ . 0 /
rank: 25
score: 99.55044073807566
patch: return cumulative CaMeL Probability ( ( double ) Erf . erf ( ( x - mean )
rank: 25
score: 99.54882134331598
patch: return ( 0 . $NUMBER$ * Erf . erf ( ( x - mean ) /
rank: 26
score: 99.691806640625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / x ) /
rank: 26
score: 99.68251255580357
patch: return 0 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 26
score: 99.67556326729911
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) / mean ) /
rank: 26
score: 99.66501193576389
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / 0 . 0 ) /
rank: 26
score: 99.65382543103448
patch: return 0 . $NUMBER$ * ( ( 1 . 0 ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 26
score: 99.614970703125
patch: return 0 . $NUMBER$ * ( double ) ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 26
score: 99.5475212545956
patch: return 0 . $NUMBER$ + Erf . erf ( ( x - mean ) /
rank: 27
score: 99.69166015625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $STRING$ ) /
rank: 27
score: 99.68204398777173
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) * (
rank: 27
score: 99.67523193359375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / mean )
rank: 27
score: 99.67366536458333
patch: return 0 . $NUMBER$ * Erf . erf ( Erf . erf ( ( x - mean ) / 0 . 0 ) /
rank: 27
score: 99.6501043911638
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . 0 + standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 27
score: 99.54801025390626
patch: if ( ( 1 . 0 + Erf . erf ( ( x - mean ) / (
rank: 27
score: 99.5467170266544
patch: return ( ( double ) Erf . erf ( ( x - mean ) /
rank: 28
score: 99.67442830403645
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean (
rank: 28
score: 99.64946919102823
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 28
score: 99.61287109375
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0
rank: 29
score: 99.6911954012784
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double - mean ) /
rank: 29
score: 99.67972237723214
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 29
score: 99.67127403846153
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) / )
rank: 29
score: 99.66315569196429
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) / mean
rank: 29
score: 99.64460972377232
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ;
rank: 29
score: 99.61250361689815
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 / $NUMBER$
rank: 29
score: 99.54212036132813
patch: return 0 . $NUMBER$ * ( 1 . == Erf . erf ( ( x - mean )
rank: 30
score: 99.68968665081522
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( x - mean ) /
rank: 30
score: 99.67019653320312
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf (
rank: 30
score: 99.66245339133523
patch: return 0 . $NUMBER$ * ( 0 . 0 + Erf . erf ( ( x - mean ) /
rank: 30
score: 99.64302119502315
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation *
rank: 30
score: 99.61197603665866
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 /
rank: 30
score: 99.54414447985198
patch: return 0 . $NUMBER$ * Erf . Erf . erf ( ( x - mean )
rank: 30
score: 99.54081420898437
patch: 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 31
score: 99.687861328125
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) /
rank: 31
score: 99.66952950613839
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf $NUMBER$ . 0 ) /
rank: 31
score: 99.66799094460227
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation *
rank: 31
score: 99.66703739872685
patch: return 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) /
rank: 31
score: 99.6618884858631
patch: return 0 . $NUMBER$ * 1 . $NUMBER$ * Erf . erf ( ( x - mean ) /
rank: 31
score: 99.611962890625
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0
rank: 31
score: 99.54358520507813
patch: return cumulative CaMeL Probability ( 0 . 0 + Erf . erf ( ( x - mean )
rank: 32
score: 99.6872049967448
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) ) / (
rank: 32
score: 99.66523670014881
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean )
rank: 32
score: 99.66493918678977
patch: return 0 . $NUMBER$ * ( 1 . 0 ? Erf . erf ( ( x - mean ) /
rank: 32
score: 99.6608135516827
patch: return 0 . $NUMBER$ * 1 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 32
score: 99.64267403738839
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) ) ;
rank: 32
score: 99.6108154296875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 / $NUMBER$ . 0 +
rank: 32
score: 99.54128848805146
patch: return 0 . $NUMBER$ + ( Erf . erf ( ( x - mean )
rank: 32
score: 99.53738064236111
patch: if ( 0 . 0 + Erf . erf ( ( x - mean ) /
rank: 33
score: 99.66837284482759
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / Erf . erf ( ) /
rank: 33
score: 99.6648582175926
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . $NUMBER$ ) /
rank: 33
score: 99.66091086647727
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) ?
rank: 33
score: 99.65928819444444
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / 0 . 0 ) /
rank: 33
score: 99.60838268649194
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 +
rank: 33
score: 99.54108743106617
patch: return cumulative CaMeL Probability ( Erf . erf ( ( x - mean ) /
rank: 33
score: 99.53592722039474
patch: return ( ( 0 . $NUMBER$ + Erf . erf ( ( x - mean ) /
rank: 34
score: 99.67850748697917
patch: return 0 . $NUMBER$ * Erf ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 34
score: 99.65926106770833
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 34
score: 99.65842507102273
patch: return 0 . $NUMBER$ * ( $NUMBER$ . 0 + Erf . erf ( ( x - mean ) /
rank: 34
score: 99.64025457974138
patch: return 0 . $NUMBER$ * ( 1 . 0 + x / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 34
score: 99.60801344651442
patch: return 0 . $NUMBER$ / ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 /
rank: 34
score: 99.53995090060764
patch: return 0 . 0 * ( Erf . erf ( ( x - mean ) /
rank: 34
score: 99.53447129991319
patch: return ( ( 0 . 0 + Erf . erf ( ( x - mean )
rank: 35
score: 99.66480334051724
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / Erf . erf ( ) )
rank: 35
score: 99.65787406589673
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / -
rank: 35
score: 99.63982522898706
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( 1 . 0 ) / ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 35
score: 99.606806640625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0
rank: 35
score: 99.53994140625
patch: return 0 . $NUMBER$ * 1 . 0 + Erf . erf ( ( x - mean )
rank: 35
score: 99.53380737304687
patch: return ( 1 . 0 + ( 1 == Erf . erf ( ( x - mean )
rank: 36
score: 99.677138671875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / } ) /
rank: 36
score: 99.6636962890625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf ( double )
rank: 36
score: 99.66017578125
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) << 0 ) /
rank: 36
score: 99.65619574652777
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / 0 . 0 ) ;
rank: 36
score: 99.65559525923295
patch: return 0 . 1 * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 36
score: 99.63440362338362
patch: return 0 . $NUMBER$ * ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 36
score: 99.53953721788194
patch: return $STRING$ . cumulative CaMeL Probability ( Erf . erf ( ( x - mean )
rank: 37
score: 99.65990149456522
patch: return ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / 0 . 0 ) /
rank: 37
score: 99.65541770241477
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) ;
rank: 37
score: 99.65506114130434
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / *
rank: 37
score: 99.63401285807292
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( 1 . 0 ) / ( $NUMBER$ . 0 ) ) ;
rank: 37
score: 99.60511192908653
patch: return 0 . $NUMBER$ * 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 37
score: 99.53907534950658
patch: return ( double ) 0 . $NUMBER$ * Erf . erf ( ( x - mean )
rank: 37
score: 99.53194173177083
patch: return 0 . $NUMBER$ * ( 1 . 0 + x - mean )
rank: 38
score: 99.67383751502403
patch: return 0 . $NUMBER$ * 1 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 38
score: 99.66163853236607
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / / $NUMBER$ . 0 ) /
rank: 38
score: 99.65978064903847
patch: return 0 . $NUMBER$ * Erf . erf ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 38
score: 99.65416124131944
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) / 0 . 0 ) /
rank: 38
score: 99.63359917534723
patch: return 0 . 0 * ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 38
score: 99.53727213541667
patch: return 0 . 0 + ( Erf . erf ( ( x - mean ) /
rank: 38
score: 99.52864583333333
patch: return 0 . $NUMBER$ * ( 1 . min . erf ( ( x - mean )
rank: 39
score: 99.66871178668478
patch: return 0 . $NUMBER$ * ( ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 39
score: 99.65993019386575
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / $NUMBER$ . 0 ) /
rank: 39
score: 99.6582668138587
patch: return ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) /
rank: 39
score: 99.65093703497024
patch: return 0 . $NUMBER$ * 0 . $NUMBER$ * Erf . erf ( ( x - mean ) /
rank: 39
score: 99.6509021577381
patch: return 0 . 1 * ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 39
score: 99.6333516438802
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( $NUMBER$ . 0 ) ) ;
rank: 39
score: 99.52774850945724
patch: return ( 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / (
rank: 39
score: 99.52620239257813
patch: return 0 . 0 * ( ( double ) Erf . erf ( ( x - mean )
rank: 40
score: 99.6673075358073
patch: return 0 . $NUMBER$ * ( x - 0 . 0 + Erf . erf ( ( x - mean ) /
rank: 40
score: 99.65965892650463
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . get ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 40
score: 99.65634042245371
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) /
rank: 40
score: 99.65042246942934
patch: return 0 . $NUMBER$ + ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / (
rank: 40
score: 99.631982421875
patch: return 0 . 0 * ( 1 . 0 + standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 40
score: 99.60349527994792
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - 0 . 0 ) /
rank: 40
score: 99.52736529181985
patch: if ( 0 . 0 + Erf . erf ( ( x - mean )
rank: 40
score: 99.52587890625
patch: return ( 0 . $NUMBER$ * Erf . erf ( ( x - mean )
rank: 41
score: 99.66640061598558
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 )
rank: 41
score: 99.658447265625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) /
rank: 41
score: 99.65047781808036
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) ) /
rank: 41
score: 99.6489894701087
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) ? (
rank: 41
score: 99.63076319839016
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 41
score: 99.602294921875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 / $NUMBER$ /
rank: 41
score: 99.52728881835938
patch: return 0 . 0 * ( 1 . - Erf . erf ( ( x - mean )
rank: 41
score: 99.52581787109375
patch: return 0 . $NUMBER$ * Erf . erf ( ( x + mean )
rank: 42
score: 99.66639293323864
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 0 . $NUMBER$ ) /
rank: 42
score: 99.658271484375
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) / mean ) /
rank: 42
score: 99.65511971932871
patch: return 0 . $NUMBER$ * Erf . erf ( Erf . erf ( ( x - mean ) / 1 . 0 ) /
rank: 42
score: 99.65027965198864
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 0 . 0 ) ;
rank: 42
score: 99.63072858537946
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 42
score: 99.52548828125
patch: return 0 . 0 * 1 . 0 + Erf . erf ( ( x - mean )
rank: 43
score: 99.66409067007211
patch: return 0 . $NUMBER$ * 0 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 43
score: 99.6572898582176
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) / mean )
rank: 43
score: 99.63053624770221
patch: return 0 . $NUMBER$ * ( 1 . 0 + standard CaMeL Deviation * Math . sqrt ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 43
score: 99.52490234375
patch: return 0 . $NUMBER$ * ( 1 . max . erf ( ( x - mean )
rank: 44
score: 99.663330078125
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / / ) ) /
rank: 44
score: 99.6566162109375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ /
rank: 44
score: 99.64942762586806
patch: return ( 1 . $NUMBER$ * Erf . erf ( ( x - mean ) /
rank: 44
score: 99.64639136904762
patch: return 0 . $NUMBER$ * ( $NUMBER$ . 0 + Erf . erf ( ( x - mean )
rank: 44
score: 99.62978663589016
patch: return 0 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 44
score: 99.59900716145833
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) / $NUMBER$ . 0
rank: 44
score: 99.52472887541118
patch: return 0 . $NUMBER$ * ( 1 . max . erf ( ( x - mean ) /
rank: 45
score: 99.65572554976852
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / $NUMBER$ . 0 ) ;
rank: 45
score: 99.64990234375
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ ) /
rank: 45
score: 99.64905802408855
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - double ) mean ) /
rank: 45
score: 99.64631453804348
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x + mean ) / (
rank: 45
score: 99.62688739483173
patch: return ( 1 . 0 + Erf . erf ( ( x - mean ) / ( $NUMBER$ . 0 ) ) ) ;
rank: 45
score: 99.51922248391544
patch: return ( ( int ) Erf . erf ( ( x - mean ) /
rank: 46
score: 99.653486328125
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / mean ) ;
rank: 46
score: 99.649140625
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) . erf ( ( x - mean ) /
rank: 46
score: 99.64881727430556
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( Erf . erf ( ( x - mean ) /
rank: 46
score: 99.64579634232955
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) ==
rank: 46
score: 99.62497780539773
patch: return 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 46
score: 99.5957275390625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / 1 . 0
rank: 46
score: 99.522705078125
patch: return 0 . $NUMBER$ * ( 1 == Erf . erf ( ( x - mean )
rank: 46
score: 99.5191650390625
patch: return 0 . $NUMBER$ * Erf . cumulative CaMeL Probability ( ( x - mean )
rank: 47
score: 99.65905180431548
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / mean ) /
rank: 47
score: 99.65243765024039
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ( double )
rank: 47
score: 99.64495849609375
patch: return 0 . 0 + Erf . erf ( ( x - mean ) / (
rank: 47
score: 99.62385777064732
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( x - mean ) / ( $NUMBER$ . 0 ) ) ;
rank: 47
score: 99.59531075613839
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / Erf . erf ( ( x - mean ) /
rank: 47
score: 99.518798828125
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( byte ) 0
rank: 48
score: 99.65220424107143
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) / /
rank: 48
score: 99.64822823660714
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) ) ;
rank: 48
score: 99.646689453125
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / true ) /
rank: 48
score: 99.62313106142241
patch: return ( 0 . 0 + ( 1 . 0 ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 48
score: 99.59402231069711
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 +
rank: 48
score: 99.52188913445724
patch: return 0 . $NUMBER$ * ( 1 . min . erf ( ( x - mean ) /
rank: 48
score: 99.51826557360198
patch: return 0 . $NUMBER$ * ( ( Erf . erf ( ( x - mean ) /
rank: 49
score: 99.6517803485577
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ( ) /
rank: 49
score: 99.6472676595052
patch: return 0 . $NUMBER$ . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 49
score: 99.6462109375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) << 1 ) /
rank: 49
score: 99.64478648792614
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) ,
rank: 49
score: 99.62251499720982
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * 0 . 0 ) ) ;
rank: 49
score: 99.5936767578125
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 / $NUMBER$ . 0 /
rank: 49
score: 99.52083740234374
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( 1 . 0
rank: 50
score: 99.65609975961539
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . get CaMeL
rank: 50
score: 99.65060546875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) *
rank: 50
score: 99.64707253196023
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) ;
rank: 50
score: 99.6460593894676
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) * 1 . 0 ) /
rank: 50
score: 99.6447521391369
patch: return 0 . $NUMBER$ * ( 0 . 0 + Erf . erf ( ( x - mean )
rank: 50
score: 99.61955915178571
patch: return ( 0 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 50
score: 99.51602172851562
patch: return 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 50
score: 99.5141665810033
patch: return $STRING$ . cumulative CaMeL Probability ( Erf . erf ( ( x - mean ) /
rank: 51
score: 99.65537109375
patch: return 0 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) /
rank: 51
score: 99.65032087053571
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / /
rank: 51
score: 99.61916934742646
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 51
score: 99.51021118164063
patch: return ( 0 . 0 + ( 1 == Erf . erf ( ( x - mean )
rank: 52
score: 99.65486328125
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / mean ) /
rank: 52
score: 99.6486107610887
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 + Erf . erf (
rank: 52
score: 99.64573072350544
patch: return ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 52
score: 99.64412788722827
patch: return 0 . 0 + ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / (
rank: 52
score: 99.6181640625
patch: return ( 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / ( $NUMBER$ . 0 ) ) ) ;
rank: 52
score: 99.59194841056035
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / double . MIN _ VALUE ) /
rank: 52
score: 99.51065866570724
patch: return 0 . $NUMBER$ * ( 1 < Erf . erf ( ( x - mean )
rank: 53
score: 99.65463256835938
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / ( x - mean ) /
rank: 53
score: 99.64845433728448
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / Erf . erf ( double )
rank: 53
score: 99.64349365234375
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / 0 . 0 ) / 0 . 0 ) ;
rank: 53
score: 99.64216752485795
patch: return 0 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation *
rank: 53
score: 99.61746531519397
patch: return 0 . $NUMBER$ * ( x . mean ( ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 53
score: 99.59188138521634
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 /
rank: 53
score: 99.50858989514802
patch: if ( ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) /
rank: 53
score: 99.50765380859374
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( x - mean )
rank: 54
score: 99.654169921875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / / ) /
rank: 54
score: 99.64778958834134
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf ) / /
rank: 54
score: 99.64507378472223
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) /
rank: 54
score: 99.64301091974431
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) -
rank: 54
score: 99.64059315557066
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) , (
rank: 54
score: 99.61700439453125
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * (
rank: 54
score: 99.59116908482143
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ ) / $NUMBER$ . 0
rank: 54
score: 99.50798882378473
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( x - mean ) / (
rank: 54
score: 99.50504760742187
patch: return ( double ) 0 . $NUMBER$ * ( Erf . erf ( ( x - mean )
rank: 55
score: 99.65355506310097
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / - mean ) /
rank: 55
score: 99.64694552951389
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double - mean ) / $NUMBER$ . 0 ) /
rank: 55
score: 99.64400679976852
patch: return 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 55
score: 99.63931129092262
patch: return 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 55
score: 99.61656452047414
patch: return 0 . $NUMBER$ * ( 1 . 0 + x - ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 55
score: 99.59080456149194
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 / Erf . 0 /
rank: 55
score: 99.50617980957031
patch: return 0 . $NUMBER$ * ( 1 . get ( ( x - mean )
rank: 56
score: 99.65341796875
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf ) /
rank: 56
score: 99.64689127604167
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) )
rank: 56
score: 99.64395254629629
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) << 0 . 0 ) /
rank: 56
score: 99.64174623842592
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . mean ) /
rank: 56
score: 99.61618041992188
patch: return 0 . - Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 56
score: 99.50523681640625
patch: return ( ( ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 56
score: 99.50402221679687
patch: return 0 . $NUMBER$ * ( ( int ) Erf . erf ( ( x - mean )
rank: 57
score: 99.64671875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / ( double )
rank: 57
score: 99.64367145040761
patch: return ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 57
score: 99.6417236328125
patch: return 0 . $NUMBER$ * 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) ;
rank: 57
score: 99.63765285326087
patch: return 0 . 1 + ( 1 . 0 + Erf . erf ( ( x - mean ) / (
rank: 57
score: 99.61614793346774
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; }
rank: 57
score: 99.58978678385417
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) / 1 . 0
rank: 57
score: 99.50499810112848
patch: if ( ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 58
score: 99.65168108258929
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 0 . 0 )
rank: 58
score: 99.64572975852273
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . get ( ( x - mean ) /
rank: 58
score: 99.643623046875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 ) /
rank: 58
score: 99.64034469039352
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . null ) /
rank: 58
score: 99.6354343580163
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) || (
rank: 58
score: 99.61527054398148
patch: return 0 . $NUMBER$ * ( 1 . 0 ) * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 58
score: 99.5897265625
patch: return 0 . $NUMBER$ * Erf . erf ( ( int ) Erf . erf ( ( x - mean ) /
rank: 58
score: 99.5023193359375
patch: return ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / (
rank: 58
score: 99.49600380345395
patch: return 0 . 0 * Erf . Erf . erf ( ( x - mean )
rank: 59
score: 99.65068359375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / null ) /
rank: 59
score: 99.6453857421875
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean )
rank: 59
score: 99.63972611860795
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) ;
rank: 59
score: 99.63422185724431
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) >
rank: 59
score: 99.61475451239224
patch: return 0 . $NUMBER$ * ( x . erf ( ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 59
score: 99.50216674804688
patch: return 0 . $NUMBER$ * ( ( 1 == Erf . erf ( ( x - mean )
rank: 59
score: 99.49590386284723
patch: return 0 . 0 * Erf . erf ( ( x - mean ) / (
rank: 60
score: 99.64902907151442
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / x ) ) /
rank: 60
score: 99.64502857349537
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / double . 0 ) /
rank: 60
score: 99.63292347301136
patch: return 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation *
rank: 60
score: 99.61455221737133
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * 0 . 0 ) ) ) ;
rank: 60
score: 99.50072021484375
patch: return ( ( double ) 0 . 0 + Erf . erf ( ( x - mean )
rank: 60
score: 99.49545769942434
patch: return 0 . ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 61
score: 99.64473783052884
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / erf ( double )
rank: 61
score: 99.64056640625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) << $NUMBER$ ) /
rank: 61
score: 99.63750348772321
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double - mean ) / 0 . 0 ) ) /
rank: 61
score: 99.63268512228261
patch: return $NUMBER$ . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / (
rank: 61
score: 99.61429537259616
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / ( $NUMBER$ . 0 ) ) ) ;
rank: 61
score: 99.49845581054687
patch: return 0 . $NUMBER$ * ( 1 == Erf . erf ( ( x - mean ) /
rank: 62
score: 99.64860733695652
patch: return ( 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 62
score: 99.64470703125
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) * mean ) /
rank: 62
score: 99.64010799632354
patch: return 1 . $NUMBER$ * Erf . erf ( ( x - mean ) /
rank: 62
score: 99.63703522858796
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) - 0 . 0 ) /
rank: 62
score: 99.63203260633681
patch: return 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / (
rank: 62
score: 99.61400495256696
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( $NUMBER$ . 0 ) / ( $NUMBER$ . 0 ) ) ;
rank: 62
score: 99.58507428850446
patch: try { return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 /
rank: 62
score: 99.4968017578125
patch: return 0 . $NUMBER$ * ( 1 + Erf . erf ( ( x - mean ) /
rank: 63
score: 99.64805094401042
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / /
rank: 63
score: 99.64400442023026
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / /
rank: 63
score: 99.63688151041667
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - 0 . 0 ) / mean ) /
rank: 63
score: 99.63181470788044
patch: return 0 . 0 * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / (
rank: 63
score: 99.61326549899194
patch: return 0 . $NUMBER$ * Erf . erf ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 63
score: 99.49656372070312
patch: return 0 . $NUMBER$ * ( 1 . * Erf . erf ( ( x - mean )
rank: 63
score: 99.49300537109374
patch: return ( double ) ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 64
score: 99.64791015625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 ) /
rank: 64
score: 99.64283854166666
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) / Erf . erf (
rank: 64
score: 99.63676313920455
patch: return 0 . $NUMBER$ ? ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 64
score: 99.6303074048913
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) > (
rank: 64
score: 99.58455757472827
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) ) /
rank: 64
score: 99.49201049804688
patch: return ( ( double ) 1 . 0 + Erf . erf ( ( x - mean )
rank: 65
score: 99.6461651141827
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . mean (
rank: 65
score: 99.64224008413461
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) / erf
rank: 65
score: 99.61169827368951
patch: return Erf . cumulative CaMeL Probability ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 65
score: 99.584521484375
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 / $NUMBER$ . 0 +
rank: 65
score: 99.49185791015626
patch: 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 65
score: 99.49169921875
patch: return ( ( double ) Erf . erf ( ( x - mean )
rank: 66
score: 99.64197716346153
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) / double
rank: 66
score: 99.63807024274554
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) ) /
rank: 66
score: 99.63636192908653
patch: return 0 . $NUMBER$ * 1 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 66
score: 99.62681995738636
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) &
rank: 66
score: 99.61066804108796
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( ) ) ) ;
rank: 66
score: 99.584345703125
patch: return ( double ) 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 66
score: 99.48983154296874
patch: return cumulative CaMeL Probability ( 1 . $NUMBER$ + Erf . erf ( ( x - mean )
rank: 67
score: 99.64197716346153
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf ) ) /
rank: 67
score: 99.63762297453704
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) * 0 . 0 ) /
rank: 67
score: 99.63625863882211
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 (
rank: 67
score: 99.62607209578805
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) << (
rank: 67
score: 99.60989945023148
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 67
score: 99.5841533954327
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 /
rank: 67
score: 99.48975287543402
patch: return 0 . $NUMBER$ + ( Erf . erf ( ( x - mean ) /
rank: 68
score: 99.6417926290761
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / /
rank: 68
score: 99.63974831321023
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 0 . mean ) /
rank: 68
score: 99.637548828125
patch: return 0 . $NUMBER$ * Erf . erf ( Erf . erf ( ( x - mean ) / $NUMBER$ ) /
rank: 68
score: 99.62544582201087
patch: return 0 . $NUMBER$ * ( 1 . 1 + Erf . erf ( ( x - mean ) / (
rank: 68
score: 99.60770218460648
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation *
rank: 68
score: 99.4908447265625
patch: if ( ( 0 . 0 + Erf . erf ( ( x - mean ) / (
rank: 68
score: 99.4890200966283
patch: return 0 . $NUMBER$ * Erf . cumulative CaMeL Probability ( ( x - mean ) /
rank: 69
score: 99.64159252025463
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / Erf . erf (
rank: 69
score: 99.63905400815217
patch: return ( 0 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 69
score: 99.6373291015625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - 0 ) /
rank: 69
score: 99.63472316576087
patch: return ( 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 69
score: 99.6241455078125
patch: return 0 . $NUMBER$ * ( ( 1 . 0 + Erf . erf ( ( x - mean ) / (
rank: 69
score: 99.60564453125
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ) / ( $NUMBER$ . 0 ) ) ;
rank: 69
score: 99.58353365384616
patch: return 0 . $NUMBER$ / ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 +
rank: 69
score: 99.49029541015625
patch: return ( ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / (
rank: 69
score: 99.4866455078125
patch: return 0 . $NUMBER$ * Erf . Erf . erf ( ( x - mean ) /
rank: 70
score: 99.640625
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / Erf . erf ( (
rank: 70
score: 99.63408868963069
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x + mean ) /
rank: 70
score: 99.62381114130434
patch: return 0 . $NUMBER$ * 1 * ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 70
score: 99.60540364583333
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / ( $NUMBER$ . 0 ) ) ) ;
rank: 70
score: 99.58185369318181
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - 1 ) /
rank: 70
score: 99.490234375
patch: return 0 * ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 70
score: 99.48617892795139
patch: return 0 . $NUMBER$ * ( ( 1 . 0 + Erf . erf ( (
rank: 71
score: 99.64037109375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . get ( ( x - mean ) / mean ) /
rank: 71
score: 99.63613100405092
patch: return 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) /
rank: 71
score: 99.6353069802989
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / 0 . 0 ) /
rank: 71
score: 99.63351004464286
patch: return 0 . $NUMBER$ * ( 1 . 0 ) / ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 71
score: 99.62346085258152
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) - (
rank: 71
score: 99.605224609375
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) ) ;
rank: 71
score: 99.58121431790866
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 (
rank: 71
score: 99.48900756835937
patch: return 0 . $NUMBER$ * ( 1 . <= Erf . erf ( ( x - mean )
rank: 71
score: 99.48372156479779
patch: return ( 1 . $NUMBER$ * Erf . erf ( ( x - mean )
rank: 72
score: 99.640322265625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / erf ) /
rank: 72
score: 99.6352871981534
patch: return 0 . $NUMBER$ * ( 1 . 0 ? Erf . erf ( ( x - mean ) ;
rank: 72
score: 99.6351318359375
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 72
score: 99.63298430266204
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double - mean ) / 0 . 0 ) /
rank: 72
score: 99.62333170572917
patch: return 0 . $NUMBER$ * 1 * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 72
score: 99.60500572467673
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math .
rank: 72
score: 99.58097839355469
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 ) ;
rank: 72
score: 99.48134765625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( int ) 1
rank: 73
score: 99.64023774245689
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ / $NUMBER$ . 0 ) /
rank: 73
score: 99.63451538085937
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / mean ) /
rank: 73
score: 99.6229248046875
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( 1 . 0 ) ) ;
rank: 73
score: 99.60429164341518
patch: return 0 . 0 * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ;
rank: 73
score: 99.4853759765625
patch: if ( ( ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 73
score: 99.48062133789062
patch: return ( double ) 0 . $NUMBER$ * Erf . erf ( ( x - mean ) /
rank: 74
score: 99.63236667798913
patch: return ( 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 74
score: 99.63064236111111
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) ;
rank: 74
score: 99.62046747622283
patch: return 0 . $NUMBER$ * ( 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / (
rank: 74
score: 99.60400390625
patch: return ( cumulative CaMeL Probability ( x ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 74
score: 99.48460693359375
patch: return 0 . $NUMBER$ * ( 1 . max . erf ( ( x - mean ) / (
rank: 74
score: 99.47825927734375
patch: return 0 . 0 + 1 . 0 + Erf . erf ( ( x - mean )
rank: 75
score: 99.6399395282452
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ / $NUMBER$ )
rank: 75
score: 99.6337890625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( int - mean ) /
rank: 75
score: 99.63130519701087
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf
rank: 75
score: 99.61912027994792
patch: return ( 1 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) / (
rank: 75
score: 99.60264850484914
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf $NUMBER$ ( x - mean ) / ( $NUMBER$ . 0 ) ) ;
rank: 75
score: 99.58031322337963
patch: return 0 . $NUMBER$ * ( 1 . 0 / ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 75
score: 99.48343698601974
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( $STRING$ -
rank: 75
score: 99.47738647460938
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( x - mean )
rank: 76
score: 99.639716796875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ) / /
rank: 76
score: 99.63376193576389
patch: return 0 . $NUMBER$ * Erf . erf ( Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 76
score: 99.6312839673913
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / 1 . 0 ) /
rank: 76
score: 99.6171162923177
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) ) ) ;
rank: 76
score: 99.60209599247685
patch: return $NUMBER$ . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation *
rank: 76
score: 99.580078125
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ,
rank: 76
score: 99.48227267795139
patch: return ( 0 . 0 * Erf . erf ( ( x - mean ) /
rank: 76
score: 99.47723709909539
patch: return Erf . cumulative CaMeL Probability ( Erf . erf ( ( x - mean )
rank: 77
score: 99.63124593098958
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( x - mean ) ) /
rank: 77
score: 99.60101909022177
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ; }
rank: 77
score: 99.57966752485795
patch: return 0 . 0 * ( 1 . 0 * Erf . erf ( ( x - mean ) /
rank: 77
score: 99.48065185546875
patch: return 0 . $NUMBER$ * ( 1 . min . erf ( ( x - mean ) / (
rank: 78
score: 99.63758263221153
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) / /
rank: 78
score: 99.6332674893466
patch: return 0 . $NUMBER$ * Erf . erf ( Erf . erf ( ( x - mean ) ;
rank: 78
score: 99.6310702237216
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( float - mean ) /
rank: 78
score: 99.62832205636161
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . $NUMBER$ ) ) /
rank: 78
score: 99.60085824819711
patch: return ( 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( $NUMBER$ . 0 ) ) ) ;
rank: 78
score: 99.5795662172379
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 / Erf . 0 +
rank: 78
score: 99.48033447265625
patch: return 0 >= ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 79
score: 99.63699106069711
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf ( ) /
rank: 79
score: 99.6330096905048
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ ) ) /
rank: 79
score: 99.6307421875
patch: return 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) /
rank: 79
score: 99.62813626802884
patch: return 0 . $NUMBER$ * 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) ;
rank: 79
score: 99.61586400082237
patch: return 0 . 0 * ( Erf . erf ( ( x - mean ) / (
rank: 79
score: 99.60073061342592
patch: return 0 . $NUMBER$ * ( 0 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation *
rank: 79
score: 99.47472426470588
patch: return 0 . $NUMBER$ * Erf . erf ( ( x + mean ) /
rank: 80
score: 99.632861328125
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) - min ) /
rank: 80
score: 99.63028617527173
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / return
rank: 80
score: 99.61553400213069
patch: return 0 . $NUMBER$ + ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) /
rank: 80
score: 99.60071221713362
patch: return ( 0 . $NUMBER$ * ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 80
score: 99.57834201388889
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) +
rank: 80
score: 99.48007202148438
patch: return ( 1 . $NUMBER$ + ( 1 == Erf . erf ( ( x - mean )
rank: 80
score: 99.47394120065789
patch: return 0 . $NUMBER$ * ( 1 + Erf . erf ( ( x - mean )
rank: 81
score: 99.636650390625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf $NUMBER$ /
rank: 81
score: 99.62940562855114
patch: return Double . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 81
score: 99.6266338641827
patch: return 0 . $NUMBER$ * 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 81
score: 99.61534627278645
patch: return 0 . $NUMBER$ * 1 + ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 81
score: 99.59993227066532
patch: return 0 . $NUMBER$ * ( 1 . ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 81
score: 99.57803109975961
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 )
rank: 81
score: 99.47994656032986
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 == Erf . erf (
rank: 81
score: 99.47366943359376
patch: return ( ( double ) 0 . $NUMBER$ * Erf . erf ( ( x - mean )
rank: 82
score: 99.635400390625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / Erf . erf ( ) ) /
rank: 82
score: 99.63097692418981
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 82
score: 99.6290625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double - mean ) / mean ) /
rank: 82
score: 99.62663051060268
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / / 1 . 0 ) /
rank: 82
score: 99.61503269361413
patch: return 0 . $NUMBER$ * ( Math . sqrt ( Erf . erf ( ( x - mean ) / (
rank: 82
score: 99.599853515625
patch: return 0 . $NUMBER$ * ( - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 82
score: 99.57783034752156
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 / $NUMBER$ . 0
rank: 82
score: 99.47947998046875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( 0 . 0
rank: 82
score: 99.47337510850694
patch: return 0 . $NUMBER$ * ( ( Erf . erf ( ( x - mean )
rank: 83
score: 99.63044921875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / false ) /
rank: 83
score: 99.62891734730114
patch: return 0 . 0 * Erf . erf ( ( x - mean ) / 0 . 0 ) /
rank: 83
score: 99.61485224184783
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) & (
rank: 83
score: 99.5985619329637
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt (
rank: 83
score: 99.5776836688702
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 )
rank: 83
score: 99.47311580882354
patch: return return 0 . $NUMBER$ * Erf . erf ( ( x - mean )
rank: 84
score: 99.63467520254629
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ / $NUMBER$ ) /
rank: 84
score: 99.63023792613636
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 1 . 0 ) ;
rank: 84
score: 99.62882486979167
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / ) /
rank: 84
score: 99.62639508928571
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) ) /
rank: 84
score: 99.61398315429688
patch: return 0 . $NUMBER$ * ( 1 . 0 0 + Erf . erf ( ( x - mean ) / (
rank: 84
score: 99.5984637920673
patch: return 0 . $NUMBER$ * ( 1 . 0 + standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ; }
rank: 84
score: 99.577529296875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . $NUMBER$
rank: 84
score: 99.47557983398437
patch: return ( ( 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / (
rank: 84
score: 99.47311401367188
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( int ) Erf . erf (
rank: 85
score: 99.62977430555556
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) *
rank: 85
score: 99.62625558035714
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / / 0 . 0 ) /
rank: 85
score: 99.597900390625
patch: return ( 0 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation *
rank: 85
score: 99.57718098958334
patch: return 0 . $NUMBER$ * 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 /
rank: 85
score: 99.47549599095395
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / (
rank: 85
score: 99.47306518554687
patch: return 0 . ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 86
score: 99.6337890625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) / mean /
rank: 86
score: 99.629306640625
patch: return 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ ) /
rank: 86
score: 99.627275390625
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / ) ) /
rank: 86
score: 99.62582833426339
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / 0 . 0 ) ) /
rank: 86
score: 99.59737273185483
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( $NUMBER$ . 0 ) ) ) ; }
rank: 86
score: 99.57684326171875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) ) / $NUMBER$ . 0 ) ;
rank: 86
score: 99.47467651367188
patch: return 0 . $NUMBER$ * ( 1 < Erf . erf ( ( x - mean ) /
rank: 87
score: 99.63360595703125
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / erf (
rank: 87
score: 99.62917258522727
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( int ) mean ) /
rank: 87
score: 99.62698364257812
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ) )
rank: 87
score: 99.61371404474431
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) )
rank: 87
score: 99.59598094019397
patch: return ( 0 . 0 + ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 87
score: 99.57650553385416
patch: return 0 . $NUMBER$ * 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 /
rank: 87
score: 99.47407362196181
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( this
rank: 88
score: 99.62844981317934
patch: return ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) /
rank: 88
score: 99.61362092391305
patch: return 0 . $NUMBER$ * 1 + ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 88
score: 99.595302734375
patch: return 0 . $NUMBER$ * ( ( 1 . 0 ) / ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 88
score: 99.47276395909927
patch: return 0 . $NUMBER$ * ( 1 . get 1 ( ( x - mean )
rank: 88
score: 99.4720458984375
patch: return - ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 89
score: 99.63303786057692
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / ( double ) /
rank: 89
score: 99.6260274251302
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / / ( x - mean ) /
rank: 89
score: 99.6246337890625
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) / 0 . 0 ) ) /
rank: 89
score: 99.61290486653645
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( (
rank: 89
score: 99.59432220458984
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( this . $NUMBER$ . 0 ) ) ) ;
rank: 89
score: 99.5763408954327
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . get ( ( x - mean ) / $NUMBER$ . 0 /
rank: 89
score: 99.47194417317708
patch: if ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 89
score: 99.47102436266448
patch: return 0 . $NUMBER$ * ( 1 , Erf . erf ( ( x - mean )
rank: 90
score: 99.6283542798913
patch: return ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / 1 . 0 ) /
rank: 90
score: 99.61288452148438
patch: return 0 . 0 + Erf . erf ( ( x - mean ) / ( $NUMBER$ . 0 ) ) ;
rank: 90
score: 99.59401292067308
patch: return cumulative CaMeL Probability ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation *
rank: 90
score: 99.57614370492789
patch: return 0 . $NUMBER$ * ( 0 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 /
rank: 90
score: 99.47066243489583
patch: return 0 . $NUMBER$ * Erf . cumulative CaMeL Probability ( x - mean ) ;
rank: 90
score: 99.46995239257812
patch: return ( 0 . $NUMBER$ * ( 1 == Erf . erf ( ( x - mean )
rank: 91
score: 99.63257897418478
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . get ( ( x - mean ) / /
rank: 91
score: 99.62576293945312
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) . erf (
rank: 91
score: 99.62374441964286
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) / (
rank: 91
score: 99.61097547743056
patch: return cumulative CaMeL Probability ( Erf . erf ( ( x - mean ) / (
rank: 91
score: 99.59396597055289
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / ( $NUMBER$ . 0 ) ) ; }
rank: 91
score: 99.57606858473558
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . get ( ( x - mean ) / $NUMBER$ . 0 +
rank: 91
score: 99.46987433182566
patch: return ( 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / (
rank: 91
score: 99.46966193704044
patch: return ( 0 . 0 * Erf . erf ( ( x - mean )
rank: 92
score: 99.6324609375
patch: double 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) /
rank: 92
score: 99.62655526620371
patch: return 0 . $NUMBER$ * ( 1 . 0 ? ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 92
score: 99.61075492527173
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) && (
rank: 92
score: 99.59344951923077
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf ( x - mean ) / ( $NUMBER$ . 0 ) ) ;
rank: 92
score: 99.57562725360577
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( int ) mean ) / $NUMBER$ . 0 /
rank: 92
score: 99.46724853515624
patch: return 0 . $NUMBER$ * 0 . 0 + Erf . erf ( ( x - mean )
rank: 93
score: 99.63217954282408
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( double ) mean ) / Erf . erf (
rank: 93
score: 99.62544389204545
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / Erf . erf (
rank: 93
score: 99.62254920372597
patch: return 0 . 0 * 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 93
score: 99.61068062160327
patch: return 1 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / (
rank: 93
score: 99.59326171875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ;
rank: 93
score: 99.57512872869319
patch: return 0 . 0 * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) /
rank: 93
score: 99.46806504991319
patch: return ( ( 1 . $NUMBER$ + Erf . erf ( ( x - mean )
rank: 93
score: 99.46694946289062
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( byte ) 0
rank: 94
score: 99.63201434795673
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ( ) )
rank: 94
score: 99.62638346354167
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 1 ) /
rank: 94
score: 99.60986328125
patch: return 0 . $NUMBER$ * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) .
rank: 94
score: 99.5930859375
patch: return 0 . $NUMBER$ * ( 1 . 0 * standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 94
score: 99.4669189453125
patch: return 0 . $NUMBER$ * Erf . erf ( ( int ) Erf . erf (
rank: 95
score: 99.62485758463542
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf *
rank: 95
score: 99.62201248972039
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( $STRING$ ) /
rank: 95
score: 99.60982082201087
patch: return 0 . $NUMBER$ * ( 1 . 0 ) + Erf . erf ( ( x - mean ) /
rank: 95
score: 99.59294359611742
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( 1 . 0 ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 95
score: 99.57491629464286
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / double . MIN _ VALUE /
rank: 95
score: 99.46678161621094
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf (
rank: 96
score: 99.631494140625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / / / /
rank: 96
score: 99.62467817826705
patch: return 0 . $NUMBER$ * Erf . erf ( Erf . erf ( ( x - mean ) *
rank: 96
score: 99.6243184407552
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / / (
rank: 96
score: 99.62197440011161
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . - mean ) /
rank: 96
score: 99.59268188476562
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; }
rank: 96
score: 99.57476215977823
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / 1 . 0 /
rank: 96
score: 99.46636962890625
patch: return cumulative CaMeL Probability ( 1 . 0 + Erf . erf ( ( x - 1 )
rank: 96
score: 99.46578979492188
patch: return 0 . $NUMBER$ * ( 1 . / Erf . erf ( ( x - mean )
rank: 97
score: 99.6314227764423
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ / / /
rank: 97
score: 99.62433416193181
patch: return 1 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 97
score: 99.60762532552083
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) ) ;
rank: 97
score: 99.59220064603366
patch: return ( 0 . 0 * Erf . erf ( ( x - mean ) / ( $NUMBER$ . 0 ) ) ) ;
rank: 97
score: 99.57473958333334
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 / double . 0 /
rank: 97
score: 99.46473999023438
patch: return ( 1 . 0 + ( 1 > Erf . erf ( ( x - mean )
rank: 98
score: 99.63101196289062
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / mean (
rank: 98
score: 99.623369140625
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) / erf ) /
rank: 98
score: 99.62083152488425
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) )
rank: 98
score: 99.60575534986413
patch: return 0 . $NUMBER$ * 1 * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 98
score: 99.59060329861111
patch: return 0 . ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 98
score: 99.46558973524306
patch: return 0 . 0 * Erf . cumulative CaMeL Probability ( ( x - mean )
rank: 98
score: 99.46320543791118
patch: return 0 / ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 99
score: 99.62986472800925
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) *
rank: 99
score: 99.62330264136905
patch: return 0 . $NUMBER$ * 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 99
score: 99.62258572048611
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) /
rank: 99
score: 99.60555013020833
patch: return 0 . $NUMBER$ * ( 1 . 0 ) + ( 1 . 0 ) ;
rank: 99
score: 99.58999399038461
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf < Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 99
score: 99.57419057992789
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) * $NUMBER$ . 0 /
rank: 99
score: 99.46513061523437
patch: return 0 . 0 + ( ( double ) Erf . erf ( ( x - mean )
rank: 99
score: 99.46292274876645
patch: if ( 0 . 0 + Erf . erf ( ( x - mean ) / (
rank: 100
score: 99.62919398716518
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf 1 . 0 ) /
rank: 100
score: 99.622431640625
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) - mean ) /
rank: 100
score: 99.62214006696429
patch: return 0 . $NUMBER$ * 1 . 0 * Erf . erf ( ( x - mean ) /
rank: 100
score: 99.61907489483173
patch: return 0 . 0 * 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 100
score: 99.6055399576823
patch: return 0 . $NUMBER$ * ( 1 . 0 ) + Erf . erf ( ( x - mean ) / (
rank: 100
score: 99.58957248263889
patch: return 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation *
rank: 100
score: 99.57386067708333
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0
rank: 100
score: 99.46207275390626
patch: return 0 == ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 101
score: 99.62896728515625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean /
rank: 101
score: 99.62171427408855
patch: return 0 . $NUMBER$ * ( ( x - mean ) / Erf . erf ( ( x - mean ) /
rank: 101
score: 99.621318359375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) - $NUMBER$ ) /
rank: 101
score: 99.60512473366477
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) )
rank: 101
score: 99.5894775390625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) ) ;
rank: 101
score: 99.5734375
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0
rank: 101
score: 99.4638427734375
patch: return 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 101
score: 99.46128934972427
patch: if ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 102
score: 99.62892578125
patch: return 0 . $NUMBER$ / ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) /
rank: 102
score: 99.61774553571429
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . $NUMBER$ ) ) ;
rank: 102
score: 99.60410563151042
patch: return 0 . 0 + Erf . erf ( ( x - mean ) / ( 1 . 0 ) ) ;
rank: 102
score: 99.58904670266544
patch: return cumulative CaMeL Probability ( Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 102
score: 99.57332066127232
patch: try { return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 +
rank: 102
score: 99.46121826171876
patch: return ( ( double ) 0 . $NUMBER$ + Erf . erf ( ( x - mean )
rank: 103
score: 99.628515625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / / $NUMBER$ /
rank: 103
score: 99.62111594460227
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) *
rank: 103
score: 99.61958821614583
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / 0 . 0 ) ) /
rank: 103
score: 99.6177288552989
patch: return return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 103
score: 99.58902994791667
patch: return 0 . 0 * Erf . erf ( ( x - mean ) / ( $NUMBER$ . 0 ) ) ;
rank: 103
score: 99.46280067845395
patch: return 0 . 0 * ( 1 < Erf . erf ( ( x - mean )
rank: 104
score: 99.62840857872597
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / x ) / /
rank: 104
score: 99.62069702148438
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf . erf ( ( x - mean ) /
rank: 104
score: 99.61928923233695
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / / 1 . 0 ) /
rank: 104
score: 99.6171875
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / 0 . 0 ) ) ;
rank: 104
score: 99.6032184103261
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) / (
rank: 104
score: 99.5888250942888
patch: return cumulative CaMeL Probability ( 1 . 0 + Erf . erf ( ( x - mean ) / ( $NUMBER$ . 0 ) ) ) ;
rank: 104
score: 99.57269877772177
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) / 1 . 0 /
rank: 104
score: 99.4624755859375
patch: return 0 . 0 * ( ( int ) Erf . erf ( ( x - mean )
rank: 104
score: 99.460400390625
patch: return ( 0 . $NUMBER$ + ( 1 == Erf . erf ( ( x - mean )
rank: 105
score: 99.62831333705357
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ( double )
rank: 105
score: 99.62003226902173
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) ) ;
rank: 105
score: 99.6185546875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( x -
rank: 105
score: 99.60292271205357
patch: return 0 . $NUMBER$ * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . $NUMBER$ ) ) ;
rank: 105
score: 99.58844168526785
patch: return ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 105
score: 99.46077688116776
patch: return 0 + ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 106
score: 99.62688078703704
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) / erf )
rank: 106
score: 99.61748712713069
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 1 . $NUMBER$ ) /
rank: 106
score: 99.61687677556819
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( new x - mean ) /
rank: 106
score: 99.60288783482143
patch: return 0 . 0 * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 106
score: 99.58761393229166
patch: return x . cumulative CaMeL Probability ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 106
score: 99.57242024739584
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 / 1 . 0 /
rank: 107
score: 99.62681000808189
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / / /
rank: 107
score: 99.60283868963069
patch: return 0 . 1 + ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 107
score: 99.587607421875
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 107
score: 99.57213416466347
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 +
rank: 107
score: 99.46016845703124
patch: return cumulative CaMeL Probability ( 1 . 0 * Erf . erf ( ( x - mean )
rank: 107
score: 99.45865478515626
patch: return 0 . $NUMBER$ * ( 1 . >= Erf . erf ( ( x - mean )
rank: 108
score: 99.62650101273148
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 108
score: 99.60257393973214
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x + mean )
rank: 108
score: 99.58718532986111
patch: return 0 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation *
rank: 108
score: 99.57211449032738
patch: return 0 . $NUMBER$ * ( double ) ( Erf . erf ( ( x - mean ) /
rank: 109
score: 99.619404296875
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ ) /
rank: 109
score: 99.61628524116848
patch: return ( 1 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 109
score: 99.60240681966145
patch: return 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / ( $NUMBER$ . 0 ) ) ;
rank: 109
score: 99.5870361328125
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( x - mean ) / ( $NUMBER$ . 0 ) ) ;
rank: 109
score: 99.57200520833334
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) Erf . erf ( ( x - mean ) /
rank: 109
score: 99.45933227539062
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( standard CaMeL Deviation *
rank: 109
score: 99.45525159333882
patch: return 0 . $NUMBER$ * ( 1 <= Erf . erf ( ( x - mean )
rank: 110
score: 99.61500040690105
patch: return 0 . $NUMBER$ * ( x - 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 110
score: 99.60186767578125
patch: return 0 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) ) ) ;
rank: 110
score: 99.58702256944444
patch: return 0 . $NUMBER$ * ( 1 . 0 ) + ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 110
score: 99.459228515625
patch: return ( ( int ) Erf . erf ( ( x - mean )
rank: 110
score: 99.45453491210938
patch: return 0 , ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 111
score: 99.62537493024554
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( 1 . 0 ) /
rank: 111
score: 99.61838600852273
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) ;
rank: 111
score: 99.61408600983796
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) (
rank: 111
score: 99.59999778053977
patch: return 0 . 0 + ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) /
rank: 111
score: 99.58683829471983
patch: return ( 0 . 0 + Erf . erf ( ( x - mean ) / Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 111
score: 99.57159016927083
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( int ) Erf . erf ( ( x - mean ) /
rank: 111
score: 99.45435180664063
patch: return 0 . $NUMBER$ * ( 1 / Erf . erf ( ( x - mean ) /
rank: 112
score: 99.61388708043981
patch: return 0 . $NUMBER$ * ( 1 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 112
score: 99.6138407389323
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) ) / /
rank: 112
score: 99.59912109375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / * (
rank: 112
score: 99.58561662946428
patch: return ( 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 112
score: 99.45421142578125
patch: return ( 1 . $NUMBER$ * ( 1 == Erf . erf ( ( x - mean )
rank: 113
score: 99.62501878004808
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ / $NUMBER$ /
rank: 113
score: 99.61338588169643
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) ) ;
rank: 113
score: 99.59837757457386
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) !=
rank: 113
score: 99.58528926454741
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) ) ; }
rank: 113
score: 99.57126193576389
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) ) / $NUMBER$ . 0 /
rank: 113
score: 99.45854949951172
patch: return $STRING$ . $NUMBER$ * Erf . erf ( ( x - mean )
rank: 114
score: 99.62474646935097
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $STRING$ ) / /
rank: 114
score: 99.61338588169643
patch: return 0 . $NUMBER$ * ( 1 . 0 ) * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 114
score: 99.61335555366848
patch: final return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 114
score: 99.58526204427083
patch: return ( 0 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * 0 . 0 ) ) ) ;
rank: 114
score: 99.458251953125
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x == 0
rank: 114
score: 99.45295795641448
patch: return 0 >= ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 115
score: 99.62471829927884
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) / mean
rank: 115
score: 99.6170987215909
patch: return ( 1 . $NUMBER$ + 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 115
score: 99.61327107747395
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / 1 . 0 ) ) /
rank: 115
score: 99.5971923828125
patch: return 0 . $NUMBER$ * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) /
rank: 115
score: 99.58506422776442
patch: return ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / ( $NUMBER$ . 0 ) ) ) ;
rank: 115
score: 99.57061767578125
patch: return 0 . $NUMBER$ * ( double ) Erf . erf ( ( x - mean ) /
rank: 115
score: 99.45824432373047
patch: return 0 . 0 * Erf . erf ( ( x + mean )
rank: 115
score: 99.45237972861842
patch: return 0 . 0 * ( 1 == Erf . erf ( ( x - mean )
rank: 116
score: 99.6246925636574
patch: double 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 116
score: 99.6164217862216
patch: return 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) ;
rank: 116
score: 99.61286530671296
patch: return 0 . $NUMBER$ * ( 0 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) /
rank: 116
score: 99.61220915421195
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) ) /
rank: 116
score: 99.596923828125
patch: return ( 1 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) / (
rank: 116
score: 99.58449485085227
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 116
score: 99.57054876512096
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 / Erf . 0 /
rank: 116
score: 99.449853515625
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( 1 . 0
rank: 117
score: 99.61634657118056
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) - 1 . 0 ) /
rank: 117
score: 99.61219853940217
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / Erf . erf (
rank: 117
score: 99.59664916992188
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) ) ) ;
rank: 117
score: 99.5843994140625
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) / ( $NUMBER$ . 0 ) ) ) ;
rank: 117
score: 99.57041579026442
patch: return 0 . 0 * ( 1 . 0 * Erf . erf ( ( x - mean ) / $NUMBER$ . 0 /
rank: 117
score: 99.44967990451389
patch: return ( 1 . 0 * Erf . erf ( ( x - mean ) /
rank: 118
score: 99.61244032118056
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . $STRING$ ) /
rank: 118
score: 99.59657796223958
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) ) ) ;
rank: 118
score: 99.584228515625
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; }
rank: 118
score: 99.57032359730114
patch: return 0 . 0 * ( 1 . 0 / Erf . erf ( ( x - mean ) /
rank: 118
score: 99.45794318704044
patch: return 0 . 0 * ( 1 . 0 + ( x - mean ) /
rank: 118
score: 99.44964278371711
patch: return 0 ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 119
score: 99.62446925951087
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / )
rank: 119
score: 99.6116796875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) - x ) /
rank: 119
score: 99.59623386548913
patch: return 0 . 0 * ( $NUMBER$ . 0 + Erf . erf ( ( x - mean ) / (
rank: 119
score: 99.58250269396552
patch: return 0 . 0 * ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 119
score: 99.57000325520833
patch: return 0 . $NUMBER$ * 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 +
rank: 119
score: 99.4576171875
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( x - mean )
rank: 120
score: 99.623876953125
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - 1 ) / mean ) /
rank: 120
score: 99.61122349330357
patch: return 0 . $NUMBER$ * ( 1 . 0 ( Erf . erf ( ( x - mean ) / 0 . 0 ) ) /
rank: 120
score: 99.61109508167614
patch: return $NUMBER$ . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 120
score: 99.59592603600544
patch: return 1 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) / (
rank: 120
score: 99.58231608072917
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) ) / ( $NUMBER$ . 0 ) ) ;
rank: 120
score: 99.56968336838942
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) * $NUMBER$ . 0 +
rank: 120
score: 99.45736694335938
patch: return 0 . $NUMBER$ * Erf . erf [ ( x - mean )
rank: 120
score: 99.44952392578125
patch: return 0 != ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 121
score: 99.61552211216518
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) * Erf . erf ( ( x - mean ) /
rank: 121
score: 99.61077880859375
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / erf ) /
rank: 121
score: 99.59586588541667
patch: return 0 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) / ( (
rank: 121
score: 99.58110809326172
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation . 0 ) ) ) ;
rank: 121
score: 99.56946982106855
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 /
rank: 121
score: 99.45724326685855
patch: return 0 . 0 * ( ( Erf . erf ( ( x - mean ) /
rank: 121
score: 99.44923159950658
patch: if ( ( 0 . $NUMBER$ + Erf . erf ( ( x - mean ) /
rank: 122
score: 99.62358566810344
patch: return 0 . $NUMBER$ . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 122
score: 99.61057350852273
patch: return 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / 0 . 0 ) /
rank: 122
score: 99.59579865828805
patch: return 0 . 1 * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / (
rank: 122
score: 99.56939106602823
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) / $NUMBER$ . 0 /
rank: 122
score: 99.45709549753289
patch: return ( double ) 0 . 0 * Erf . erf ( ( x - mean )
rank: 122
score: 99.44866943359375
patch: return ( ( 0 . $NUMBER$ + Erf . erf ( ( x - mean )
rank: 123
score: 99.6229296875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ / /
rank: 123
score: 99.610224609375
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / Erf . erf ( ) ) /
rank: 123
score: 99.61008522727273
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) .
rank: 123
score: 99.5953369140625
patch: return 0 . 0 + ( Erf . erf ( ( x - mean ) / (
rank: 123
score: 99.57974008413461
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf / ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 123
score: 99.56917317708333
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 / $NUMBER$
rank: 123
score: 99.44820556640624
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . 0 + Erf . erf (
rank: 124
score: 99.60943603515625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / - 1 . 0 ) /
rank: 124
score: 99.59232761548913
patch: return 0 . 0 * ( 0 . 0 + Erf . erf ( ( x - mean ) / (
rank: 124
score: 99.57946356411638
patch: return ( 1 . $NUMBER$ * ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 124
score: 99.4472900390625
patch: return 0 ( ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 125
score: 99.62270171066811
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / Erf . erf ( ) /
rank: 125
score: 99.59160822088069
patch: return 0 . $NUMBER$ * ( 1 . 0 + this . erf ( ( x - mean ) / (
rank: 125
score: 99.57867072610294
patch: if ( 0 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) )
rank: 125
score: 99.56809645432692
patch: return ( 0 . 0 + Erf . erf ( ( int ) Erf . erf ( ( x - mean ) /
rank: 126
score: 99.62266710069444
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / 1 . 0 ) ;
rank: 126
score: 99.60906110491071
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) / 0 . 0 ) ) ;
rank: 126
score: 99.59107462565105
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / ( (
rank: 126
score: 99.5680519386574
patch: return 0 . $NUMBER$ * ( ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 +
rank: 126
score: 99.4559326171875
patch: return ( double ) 0 . 0 + Erf . erf ( ( x - mean )
rank: 126
score: 99.447119140625
patch: return 0 / ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 127
score: 99.62254050925925
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) / mean (
rank: 127
score: 99.61300094039352
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) << 0 . $NUMBER$ ) /
rank: 127
score: 99.609853515625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ) / (
rank: 127
score: 99.59028957201087
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) | (
rank: 127
score: 99.57718912760417
patch: return null . cumulative CaMeL Probability ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 127
score: 99.56781684027777
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) ,
rank: 127
score: 99.4558837890625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - (
rank: 127
score: 99.44691226356908
patch: return 0 , ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 128
score: 99.62228919719827
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / Erf . erf ( ) )
rank: 128
score: 99.6129738136574
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 128
score: 99.60931687127976
patch: return 0 . $NUMBER$ * 0 . 0 + Erf . erf ( ( x - mean ) /
rank: 128
score: 99.60741315569196
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) ) *
rank: 128
score: 99.59024047851562
patch: return 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / ( 1 . 0 ) ) ;
rank: 128
score: 99.56721742691532
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( int ) Erf . erf ( ( x - mean ) ) /
rank: 128
score: 99.45501349954044
patch: return ( 1 . 0 * Erf . erf ( ( x - mean )
rank: 129
score: 99.62190193965517
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / Erf . erf ( double )
rank: 129
score: 99.61288686899039
patch: return 0 . $NUMBER$ * Erf . erf ( 0 . 0 + Erf . erf ( ( x - mean ) /
rank: 129
score: 99.60898659446023
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( x - mean ) / 0 . 0 ) /
rank: 129
score: 99.60703822544643
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) ) /
rank: 129
score: 99.58973760190217
patch: return 0 . $NUMBER$ * Erf . erf ( Erf . erf ( ( x - mean ) / (
rank: 129
score: 99.57573993389423
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( 1 . 0 + mean ) / ( $NUMBER$ . 0 ) ) ;
rank: 129
score: 99.56710716985887
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 +
rank: 129
score: 99.45429077148438
patch: return cumulative CaMeL Probability ( ( int ) Erf . erf ( ( x - mean ) /
rank: 129
score: 99.4453594501202
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf
rank: 130
score: 99.62181712962963
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 / /
rank: 130
score: 99.60688920454545
patch: return 0 . $NUMBER$ * ( 1 . 1 + Erf . erf ( ( x - mean ) /
rank: 130
score: 99.58958798363095
patch: return 0 . $NUMBER$ * ( 1 . 0 + this . erf ( ( x - mean ) /
rank: 130
score: 99.57528525904605
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) ) ;
rank: 130
score: 99.56699916294643
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 / $NUMBER$ )
rank: 130
score: 99.4531982421875
patch: return 0 < ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 130
score: 99.44509887695312
patch: return 0 . $NUMBER$ * ( 1 . != Erf . erf ( ( x - mean )
rank: 131
score: 99.621806640625
patch: return 0 . $NUMBER$ * ( 1 . 0 / Erf . erf ( ( x - mean ) / mean ) /
rank: 131
score: 99.61166268807871
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) / 1 . 0 ) /
rank: 131
score: 99.60651189630681
patch: throw 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 131
score: 99.5895487467448
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) / ( (
rank: 131
score: 99.57509765625
patch: return cumulative CaMeL Probability ( ( x . length - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 131
score: 99.56635199652777
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) ) / $NUMBER$ . 0 +
rank: 131
score: 99.45313178168402
patch: return ( $NUMBER$ . 0 + Erf . erf ( ( x - mean ) /
rank: 132
score: 99.62175958806819
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x * mean ) /
rank: 132
score: 99.6087062669837
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / / $NUMBER$ . 0 ) /
rank: 132
score: 99.58908913352273
patch: return 0 . $NUMBER$ * ( ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 132
score: 99.57408405172414
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 132
score: 99.56612454927884
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 /
rank: 132
score: 99.45235443115234
patch: return 1 . $NUMBER$ * Erf . erf ( ( x - mean )
rank: 132
score: 99.44414605034723
patch: if ( ( 0 . 0 + Erf . erf ( ( x - mean )
rank: 133
score: 99.62161959134616
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ ) / /
rank: 133
score: 99.610029296875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) * $NUMBER$ ) /
rank: 133
score: 99.607646484375
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $STRING$ ) /
rank: 133
score: 99.58843439275569
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) )
rank: 133
score: 99.57375266335227
patch: return 0 . 1 * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 133
score: 99.56611328125
patch: return 0 . $NUMBER$ * 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 +
rank: 133
score: 99.4521484375
patch: return ( $NUMBER$ . 0 + Erf . erf ( ( x - mean )
rank: 134
score: 99.62160915798611
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / 1 . 0 ) /
rank: 134
score: 99.60973182091347
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / * mean ) /
rank: 134
score: 99.6052478608631
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 1 . 0 )
rank: 134
score: 99.58834402901786
patch: return 0 . 1 + ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 134
score: 99.57339680989584
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( 0 . 0 ) ) ) ;
rank: 134
score: 99.45174407958984
patch: return 0 . 1 * Erf . erf ( ( x - mean )
rank: 134
score: 99.44364848889802
patch: cumulative CaMeL Probability ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 135
score: 99.62111328125
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . get ( ( x - mean ) / erf ) /
rank: 135
score: 99.60575648716518
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) / /
rank: 135
score: 99.58825102306548
patch: return 0 . $NUMBER$ * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) / (
rank: 135
score: 99.57315826416016
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$
rank: 135
score: 99.56547037760417
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 / 1 . 0 +
rank: 135
score: 99.44981553819444
patch: return - ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 135
score: 99.4432373046875
patch: return 0 . 0 * ( 1 . 0 + x - mean ) ;
rank: 136
score: 99.62103740985577
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / / ( double )
rank: 136
score: 99.60556862571023
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double - mean ) ;
rank: 136
score: 99.6046854654948
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf _
rank: 136
score: 99.58805708451705
patch: return 0 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) )
rank: 136
score: 99.57293526785715
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 136
score: 99.565400390625
patch: return 0 . $NUMBER$ + Erf . erf ( ( int ) Erf . erf ( ( x - mean ) /
rank: 136
score: 99.44320518092105
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf ( ( x - mean )
rank: 137
score: 99.60917445591518
patch: return ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / 0 . 0 ) / 0 . 0 ) ;
rank: 137
score: 99.60535539899554
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double - mean ) / 0 . 0 ) ) ;
rank: 137
score: 99.58805708451705
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / standard CaMeL Deviation *
rank: 137
score: 99.57240397135416
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf 1 . erf ( ( x - mean ) / ( standard CaMeL Deviation *
rank: 137
score: 99.56539601293103
patch: return 0 . $NUMBER$ * Erf . erf ( ( int ) 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 137
score: 99.44925087376645
patch: return 0 . 0 + Erf . Erf . erf ( ( x - mean )
rank: 137
score: 99.44300672743056
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 <= Erf . erf (
rank: 138
score: 99.60904947916667
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . $NUMBER$ ) /
rank: 138
score: 99.60415167557566
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / / /
rank: 138
score: 99.58805124383224
patch: return 0 . $NUMBER$ + ( Erf . erf ( ( x - mean ) / (
rank: 138
score: 99.57143985523896
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * 0 . 0 ) ) ) ;
rank: 138
score: 99.5653827373798
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . $NUMBER$ +
rank: 138
score: 99.44247775607639
patch: return 0 . $NUMBER$ * ( 1 . clone 1 ( ( x - mean ) /
rank: 139
score: 99.62028285435268
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . get ( ( x - mean ) / $NUMBER$ . 0 ) / /
rank: 139
score: 99.60877403846153
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 /
rank: 139
score: 99.60408935546874
patch: return 0 . $NUMBER$ * ( x - Erf . erf ( ( x - mean ) /
rank: 139
score: 99.587646484375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) + mean )
rank: 139
score: 99.57109375
patch: return cumulative CaMeL Probability ( x ] / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 139
score: 99.44818436472039
patch: return 0 . $NUMBER$ * ( Math . Erf . erf ( ( x - mean )
rank: 139
score: 99.44172668457031
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . 0 ) ;
rank: 140
score: 99.60866970486111
patch: return 0 . $NUMBER$ * Erf . erf ( ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 140
score: 99.60407820991848
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / / 0 . 0 ) /
rank: 140
score: 99.58634086277173
patch: return Erf . erf ( ( x - mean ) / Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 140
score: 99.56990814208984
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( this . erf . 0 ) ) ) ;
rank: 140
score: 99.5652386209239
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$
rank: 141
score: 99.61956787109375
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) / mean ) /
rank: 141
score: 99.60845703125
patch: return 0 . $NUMBER$ * ( 1 . 0 ? Erf . erf ( ( x - mean ) / $NUMBER$ ) /
rank: 141
score: 99.6051025390625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 1 ) ) /
rank: 141
score: 99.6040234375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / return ) /
rank: 141
score: 99.58596962376645
patch: return 0 . $NUMBER$ * ( 1 . 0 + erf ( ( x - mean ) /
rank: 141
score: 99.56982421875
patch: return ( 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 141
score: 99.56492332175925
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) ;
rank: 141
score: 99.4472412109375
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( int ) 1
rank: 142
score: 99.60367484714673
patch: if ( 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 142
score: 99.58586774553571
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean )
rank: 142
score: 99.569462890625
patch: return ( 0 . 0 + ( 1 . 0 ) / ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 142
score: 99.564921875
patch: return 0 . $NUMBER$ * Erf . erf ( ( double ) Erf . erf ( ( x - mean ) /
rank: 142
score: 99.44685363769531
patch: return $NUMBER$ . $NUMBER$ * Erf . erf ( ( x - mean )
rank: 142
score: 99.44093627929688
patch: return 0 . $NUMBER$ * ( 1 <= Erf . erf ( ( x - mean ) /
rank: 143
score: 99.61886596679688
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf )
rank: 143
score: 99.6048114483173
patch: return 0 . $NUMBER$ * 1 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) /
rank: 143
score: 99.60355808423913
patch: return 0 . $NUMBER$ * ( x - mean ) / Erf . erf ( ( x - mean ) /
rank: 143
score: 99.58551580255681
patch: return cumulative CaMeL Probability ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / (
rank: 143
score: 99.56874408143939
patch: return ( 0 . 0 + Erf . erf ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 143
score: 99.5648662860577
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 +
rank: 143
score: 99.4467041015625
patch: return 0 . 0 ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 143
score: 99.44078911675348
patch: return / ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 144
score: 99.61786760602679
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) / erf ) /
rank: 144
score: 99.60780552455357
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) ) /
rank: 144
score: 99.60433255709134
patch: return 0 . $NUMBER$ * $NUMBER$ . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 144
score: 99.6026944247159
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - $NUMBER$ ) /
rank: 144
score: 99.58465866815476
patch: return 0 . $NUMBER$ + ( 1 . $NUMBER$ + Erf . erf ( ( x - mean )
rank: 144
score: 99.56809895833334
patch: return ( 0 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ;
rank: 144
score: 99.56461275540866
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) ) / $NUMBER$ . 0
rank: 144
score: 99.44564658717105
patch: return 0 . $NUMBER$ * Erf . erf ( ( double ) Erf . erf (
rank: 144
score: 99.44053344726562
patch: return 0 . $NUMBER$ * ( 1 . ? Erf . erf ( ( x - mean )
rank: 145
score: 99.61762237548828
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / Erf . erf (
rank: 145
score: 99.60770847486413
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) , ( x - mean ) /
rank: 145
score: 99.60211181640625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean + mean ) /
rank: 145
score: 99.58451538085937
patch: return 0 . $NUMBER$ * ( 1 . 0 + erf ( ( x - mean ) / (
rank: 145
score: 99.56806244721284
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( standard CaMeL Deviation * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 145
score: 99.56427873883929
patch: return ( double ) ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 145
score: 99.4400634765625
patch: if ( ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / (
rank: 146
score: 99.603837890625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) ;
rank: 146
score: 99.60118611653645
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) ) / (
rank: 146
score: 99.58396314538044
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) + (
rank: 146
score: 99.5679219563802
patch: return 0 . 0 * ( 1 . 0 + ( 1 . 0 ) / ( $NUMBER$ . 0 ) ) ;
rank: 146
score: 99.56415201822917
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 / $NUMBER$ . 0 )
rank: 146
score: 99.44461059570312
patch: return ( ( int ) 1 . 0 + Erf . erf ( ( x - mean )
rank: 147
score: 99.61712176983173
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / / ) / /
rank: 147
score: 99.58375084918478
patch: return 1 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / (
rank: 147
score: 99.56791294642858
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; }
rank: 147
score: 99.44403686523438
patch: return 0 . 0 * 0 . 0 + Erf . erf ( ( x - mean )
rank: 148
score: 99.61690266927083
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) * mean (
rank: 148
score: 99.60728870738636
patch: return ( 1 . 0 + 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 148
score: 99.60376848493304
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 1 ) /
rank: 148
score: 99.58220880681819
patch: return ( 1 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 148
score: 99.56786346435547
patch: return ( cumulative CaMeL Probability . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 148
score: 99.56365497295673
patch: return ( 0 . $NUMBER$ + Erf . erf ( ( int ) Erf . erf ( ( x - mean ) /
rank: 148
score: 99.44384087456598
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( !
rank: 148
score: 99.43927612304688
patch: return 0 . $NUMBER$ * ( 1 * Erf . erf ( ( x - mean ) /
rank: 149
score: 99.61656842912946
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / / Erf . erf (
rank: 149
score: 99.60655381944444
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / 1 . 0 ) /
rank: 149
score: 99.59942072088069
patch: return 0 . 0 * Erf . erf ( ( x - mean ) / 1 . 0 ) /
rank: 149
score: 99.58181762695312
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / ( $NUMBER$ . 0 ) )
rank: 149
score: 99.56782531738281
patch: return 0 . $NUMBER$ * ( 1 . 0 + standard CaMeL Deviation * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; }
rank: 149
score: 99.56310583043981
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( int ) mean ) / $NUMBER$ . 0 ) ;
rank: 149
score: 99.4390625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf ( ( x - mean ) /
rank: 150
score: 99.616025390625
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) )
rank: 150
score: 99.6034268465909
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - max ) /
rank: 150
score: 99.5990234375
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / x ) /
rank: 150
score: 99.56736706149194
patch: return 0 < Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 150
score: 99.56309442934783
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . get ( ( x - mean ) ) /
rank: 150
score: 99.43887939453126
patch: return ( 1 . 0 + ( 1 <= Erf . erf ( ( x - mean )
rank: 151
score: 99.61584078881049
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 + Erf . erf (
rank: 151
score: 99.6058203125
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) - max ) /
rank: 151
score: 99.5811434659091
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) +
rank: 151
score: 99.56629943847656
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation > 0 . 0 ) )
rank: 151
score: 99.56306404903017
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / Double . MIN _ VALUE ) /
rank: 151
score: 99.44267578125
patch: return 0 . 0 * Erf . Erf . erf ( ( x - mean ) /
rank: 151
score: 99.4387939453125
patch: return 0 . 0 * ( 1 . == Erf . erf ( ( x - mean )
rank: 152
score: 99.61571361400463
patch: return 0 . $NUMBER$ . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) /
rank: 152
score: 99.598271484375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . (
rank: 152
score: 99.5811183763587
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) * (
rank: 152
score: 99.56629231770833
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf $NUMBER$ . erf ( ( x - mean ) / ( standard CaMeL Deviation *
rank: 152
score: 99.56299732349537
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / Erf . erf ( ( x - mean )
rank: 152
score: 99.43762885199652
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ) /
rank: 153
score: 99.615673828125
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( double ) mean ) / mean ) /
rank: 153
score: 99.60456452546296
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( 1 . 0 * Erf . erf ( ( x - mean ) /
rank: 153
score: 99.60259331597223
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ * Erf . erf ( ( x - mean ) / 0 . 0 ) /
rank: 153
score: 99.5810038248698
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / standard CaMeL Deviation ) ) ;
rank: 153
score: 99.56598097278226
patch: return 0 . 0 * ( 1 . 0 + Erf / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; }
rank: 153
score: 99.4422607421875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - :
rank: 153
score: 99.43757934570313
patch: return 0 <= ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 154
score: 99.615654296875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / erf ) ;
rank: 154
score: 99.60253228081598
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) ;
rank: 154
score: 99.59722345525569
patch: return 0 . $NUMBER$ * ( x . 0 + Erf . erf ( ( x - mean ) /
rank: 154
score: 99.58094278971355
patch: return 0 . $NUMBER$ * ( 0 . 0 + Erf . erf ( ( x - mean ) ) ) ;
rank: 154
score: 99.56573079427083
patch: return $NUMBER$ . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( $NUMBER$ . 0 ) ) ) ;
rank: 154
score: 99.562431640625
patch: return 0 . $NUMBER$ / ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0
rank: 154
score: 99.44155544704861
patch: return this . cumulative CaMeL Probability ( Erf . erf ( ( x - mean )
rank: 154
score: 99.43728976779514
patch: return 0 . $NUMBER$ * ( 1 . get 1 ( ( x - mean ) /
rank: 155
score: 99.61492450420673
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / . 0 ) /
rank: 155
score: 99.60235595703125
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) / mean
rank: 155
score: 99.58046025815217
patch: return 0 . $NUMBER$ * ( 1 . 0 - Erf . erf ( ( x - mean ) / (
rank: 155
score: 99.56505977746212
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( 1 . 0 ) ) ) ;
rank: 155
score: 99.5623291015625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 / $NUMBER$ . 0 /
rank: 155
score: 99.44130987870066
patch: return 0 . $NUMBER$ * ( 1 > Erf . erf ( ( x - mean )
rank: 155
score: 99.43695389597039
patch: return / ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 156
score: 99.61480712890625
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / / /
rank: 156
score: 99.6019287109375
patch: return 0 . $NUMBER$ | ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 156
score: 99.59640625
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / erf ) /
rank: 156
score: 99.58043902853261
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation *
rank: 156
score: 99.56458740234375
patch: return 0 . $NUMBER$ * ( ( 1 . 0 ) / ( $NUMBER$ . 0 ) ) ;
rank: 156
score: 99.56193773674242
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / $NUMBER$ . 0 + Erf . erf ( ) / $NUMBER$ . 0 +
rank: 156
score: 99.44110717773438
patch: return ( double ) ( 0 . 0 + Erf . erf ( ( x - mean )
rank: 156
score: 99.43505859375
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 == Erf . erf ( )
rank: 157
score: 99.61448511584052
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / Erf . erf ( ) )
rank: 157
score: 99.603857421875
patch: return 0 . $NUMBER$ * Erf . erf ( Erf . erf ( ( x - mean ) - mean ) /
rank: 157
score: 99.57842726934524
patch: return 0 . 0 + ( 1 . $NUMBER$ + Erf . erf ( ( x - mean )
rank: 157
score: 99.56454763104838
patch: return ( 0 . $NUMBER$ * ( x . 0 + mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 157
score: 99.44099506578948
patch: return 0 . 0 + ( ( Erf . erf ( ( x - mean ) /
rank: 157
score: 99.43493041992187
patch: return ( 1 . 0 + ( 1 / Erf . erf ( ( x - mean )
rank: 158
score: 99.61444561298077
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / $NUMBER$ . 0 )
rank: 158
score: 99.6035789207176
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) + 0 . 0 ) /
rank: 158
score: 99.60089580829327
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 (
rank: 158
score: 99.57809287623355
patch: return 0 . $NUMBER$ * 1 + Erf . erf ( ( x - mean ) /
rank: 158
score: 99.56447265625
patch: return 0 . $NUMBER$ * ( 1 . 0 + x / ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 158
score: 99.56183492726294
patch: return 0 . $NUMBER$ * 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0
rank: 158
score: 99.43965454101563
patch: return 0 . 0 + 1 . 0 * Erf . erf ( ( x - mean )
rank: 158
score: 99.43448486328126
patch: return 0 . $NUMBER$ * ( 1 . & Erf . erf ( ( x - mean )
rank: 159
score: 99.59587890625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean - mean ) ) /
rank: 159
score: 99.5770847486413
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) ) /
rank: 159
score: 99.5642977627841
patch: return $NUMBER$ . $NUMBER$ * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 159
score: 99.56153971354166
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) / $NUMBER$ . 0
rank: 159
score: 99.439453125
patch: return ( ( double ) 1 . $NUMBER$ * Erf . erf ( ( x - mean )
rank: 159
score: 99.43438110351562
patch: return 0 . 0 * ( ( 1 == Erf . erf ( ( x - mean )
rank: 160
score: 99.61385995370371
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) / x /
rank: 160
score: 99.60306351273148
patch: return ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / 0 . 0 ) / 0 . 0 )
rank: 160
score: 99.59569251019022
patch: return ( 1 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 160
score: 99.57700805664062
patch: return 0 . $NUMBER$ * 1 + Erf . erf ( ( x - mean ) / (
rank: 160
score: 99.56394264914773
patch: return 0 . ( Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 160
score: 99.43918971011513
patch: return 0 . 0 * Erf . cumulative CaMeL Probability ( ( x - mean ) /
rank: 161
score: 99.61373465401786
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf $NUMBER$ . 0 ) /
rank: 161
score: 99.60271661931819
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) ;
rank: 161
score: 99.599765625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) . erf ( (
rank: 161
score: 99.57525079900569
patch: return 0 . 1 * ( 1 . 0 + Erf . erf ( ( x - mean ) )
rank: 161
score: 99.56146709735577
patch: return 0 . $NUMBER$ / ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 /
rank: 161
score: 99.437255859375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( *
rank: 161
score: 99.4339599609375
patch: return 0 == ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 162
score: 99.61325599407327
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / Erf . erf ( ) /
rank: 162
score: 99.60250289351852
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 1 ) /
rank: 162
score: 99.59447224934895
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) / ) /
rank: 162
score: 99.5749178799716
patch: return 0 . $NUMBER$ * ( $NUMBER$ . 0 + Erf . erf ( ( x - mean ) )
rank: 162
score: 99.562216796875
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( $NUMBER$ . 0 ) ) ; }
rank: 162
score: 99.43723658511513
patch: return cumulative CaMeL Probability ( ( int ) Erf . erf ( ( x - mean )
rank: 162
score: 99.43377685546875
patch: return 0 ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 163
score: 99.61313883463542
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double - mean ) / mean (
rank: 163
score: 99.59964554398148
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / null . 0 ) /
rank: 163
score: 99.594423828125
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) - mean ) /
rank: 163
score: 99.5620849609375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( $STRING$ - mean ) / ( $NUMBER$ . 0 ) ) ) ;
rank: 163
score: 99.56092122395833
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / 1 . 0
rank: 163
score: 99.4367611533717
patch: return ( return 0 . 0 + Erf . erf ( ( x - mean ) /
rank: 163
score: 99.4337517233456
patch: return 0 . $NUMBER$ * ( 1 . 0 + x - mean ) / (
rank: 164
score: 99.612509765625
patch: return 0 . $NUMBER$ * ( 1 . 0 - Erf . erf ( ( x - mean ) / mean ) /
rank: 164
score: 99.6023282137784
patch: return 0 . 0 * Erf . erf ( Erf . erf ( ( x - mean ) /
rank: 164
score: 99.57447398792614
patch: return 0 . $NUMBER$ * ( 0 . $NUMBER$ + Erf . erf ( ( x - mean ) /
rank: 164
score: 99.56208147321429
patch: return ( 0 . 0 * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 164
score: 99.560869140625
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / $NUMBER$ . 0
rank: 164
score: 99.43362426757812
patch: return 0 . ( ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 165
score: 99.61224609375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / Erf . erf ( ) /
rank: 165
score: 99.59885817307692
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 165
score: 99.57414444633152
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) == (
rank: 165
score: 99.56106665826613
patch: return 0 . $NUMBER$ * ( 1 . 0 + x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 165
score: 99.43553466796875
patch: double x = ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 165
score: 99.43345240542763
patch: return 0 != ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 166
score: 99.59853690011161
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / - 0 . 0 ) /
rank: 166
score: 99.59237007472827
patch: return 0 . 0 * Erf . erf ( ( x - mean ) / ( x - mean ) /
rank: 166
score: 99.57386363636364
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / mean ) ) ;
rank: 166
score: 99.56102701822917
patch: return 0 . $NUMBER$ * ( 0 . 0 + Erf . erf ( ( x - mean ) / ( $NUMBER$ . 0 ) ) ) ;
rank: 166
score: 99.56052734375
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) / $NUMBER$ . 0
rank: 166
score: 99.433056640625
patch: return ( 0 . 0 + ( 1 > Erf . erf ( ( x - mean )
rank: 167
score: 99.61142403738839
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) / mean ) ;
rank: 167
score: 99.59229532877605
patch: return 0 . $NUMBER$ * ( ( 1 . 0 + Erf . erf ( ( x - mean ) ) /
rank: 167
score: 99.57362432065217
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) + (
rank: 167
score: 99.56046268857759
patch: return 0 . $NUMBER$ * 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0
rank: 167
score: 99.55980747767858
patch: return ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 167
score: 99.43474378083882
patch: return $STRING$ . ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 168
score: 99.61136300223214
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 + double )
rank: 168
score: 99.601806640625
patch: return 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) *
rank: 168
score: 99.59203125
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - $NUMBER$ ) / mean ) /
rank: 168
score: 99.56008676382211
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) / $NUMBER$ . 0 +
rank: 168
score: 99.55884602864583
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( 1 . 0 ) ) ) ;
rank: 168
score: 99.43471950954861
patch: return ( return 0 . 0 + Erf . erf ( ( x - mean )
rank: 168
score: 99.43292846679688
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . 0 + $NUMBER$ . 0 ) ;
rank: 169
score: 99.61126919450432
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf ( 1 . 0 ) /
rank: 169
score: 99.59830078125
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / max ) /
rank: 169
score: 99.55999124461206
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ ) / $NUMBER$ . 0 /
rank: 169
score: 99.55823771158855
patch: return 0 . $NUMBER$ * ( 1 . 0 standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 169
score: 99.43436889648437
patch: return Erf . cumulative CaMeL Probability ( Erf . erf ( ( x - mean ) /
rank: 169
score: 99.43236083984375
patch: 0 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 170
score: 99.60057237413194
patch: return ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) ;
rank: 170
score: 99.59829824942129
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . get ( ( x - mean ) / 0 . 0 ) /
rank: 170
score: 99.59126790364583
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 .
rank: 170
score: 99.57288128396739
patch: return 0 . $NUMBER$ * ( 1 . 0 / Erf . erf ( ( x - mean ) / (
rank: 170
score: 99.55995279947916
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 / double . 0 +
rank: 170
score: 99.5578849546371
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * standard CaMeL Deviation *
rank: 170
score: 99.43367919921874
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - Erf . erf ( (
rank: 170
score: 99.43206787109375
patch: return 0 . $NUMBER$ * ( ( 1 > Erf . erf ( ( x - mean )
rank: 171
score: 99.61068612557871
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf ) / erf )
rank: 171
score: 99.60017225477431
patch: return ( 1 . 0 + Erf . erf ( ( x - mean ) ;
rank: 171
score: 99.5722019361413
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . get ( ( x - mean ) / (
rank: 171
score: 99.55970177283653
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) / 1 . 0 /
rank: 171
score: 99.5574609375
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( 1 . 0 ) / ( $NUMBER$ . 0 ) ) ; }
rank: 171
score: 99.43323471966912
patch: return 0 . 0 + ( 1 . 0 + ( x - mean ) /
rank: 171
score: 99.43099365234374
patch: return 0 . 0 * ( 1 == Erf . erf ( ( x - mean ) /
rank: 172
score: 99.610498046875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( int ) mean ) / mean ) /
rank: 172
score: 99.59979607077206
patch: return 0 . 0 * Erf . erf ( ( x - mean ) ;
rank: 172
score: 99.59791782924107
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 1 ) ) ;
rank: 172
score: 99.590810546875
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) / $STRING$ ) /
rank: 172
score: 99.57125721807066
patch: return 0 . $NUMBER$ * 0 + ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 172
score: 99.55955222800925
patch: return ( 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 +
rank: 172
score: 99.5572842684659
patch: return 1 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 172
score: 99.43301552220395
patch: return ( ( 1 . 0 * Erf . erf ( ( x - mean ) /
rank: 173
score: 99.60977172851562
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( double ) mean ) / mean )
rank: 173
score: 99.59932454427083
patch: try { return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 173
score: 99.5972430889423
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . $NUMBER$ + Erf . erf ( ( x - mean ) /
rank: 173
score: 99.59033203125
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / erf ) /
rank: 173
score: 99.5712557705966
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( $NUMBER$ . 0 )
rank: 173
score: 99.55947989004629
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) * $NUMBER$ . 0 ) /
rank: 173
score: 99.556640625
patch: if ( 0 . 0 + Erf . erf ( ( x - mean ) / ( $NUMBER$ . 0 ) ) )
rank: 173
score: 99.43268899356617
patch: return new double [ 0 + Erf . erf ( ( x - mean )
rank: 173
score: 99.43045383029514
patch: return ( 0 . $NUMBER$ / Erf . erf ( ( x - mean ) /
rank: 174
score: 99.60948350694444
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf $NUMBER$ . 0 +
rank: 174
score: 99.55931640625
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / $NUMBER$ . $NUMBER$
rank: 174
score: 99.55638860887096
patch: return 0 . 0 * ( 1 . ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 174
score: 99.43218122209821
patch: return 0 , Erf . erf ( ( x - mean )
rank: 174
score: 99.43025716145833
patch: if ( x == 0 + Erf . erf ( ( x - mean ) /
rank: 175
score: 99.609130859375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) / (
rank: 175
score: 99.59926060267857
patch: return ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) / 0 . 0 ) ;
rank: 175
score: 99.59649658203125
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / 0 . 0 ) / 0 . 0 ) /
rank: 175
score: 99.589794921875
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / } ) /
rank: 175
score: 99.5592792217548
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( int ) Erf . erf ( ( x - mean ) /
rank: 175
score: 99.43176879882813
patch: return 0 . $NUMBER$ * Math . sqrt ( Erf . erf ( ( x - mean )
rank: 175
score: 99.42982177734375
patch: return 0 . $NUMBER$ * ( 1 . 0 + standard CaMeL Deviation * Math . sqrt ( $NUMBER$
rank: 176
score: 99.60858623798077
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) ) /
rank: 176
score: 99.59898546006944
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) ;
rank: 176
score: 99.58955522017045
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 0 . 0 ) *
rank: 176
score: 99.5707370923913
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) ) +
rank: 176
score: 99.55909107349537
patch: return ( 0 . 0 + Erf . erf ( ( int ) Erf . erf ( ( x - mean ) ) /
rank: 176
score: 99.5555752840909
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 176
score: 99.43133903952206
patch: return ( ( Integer ) Erf . erf ( ( x - mean ) /
rank: 177
score: 99.6083351417824
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf ( ) ) /
rank: 177
score: 99.59616427951389
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) ;
rank: 177
score: 99.58950660342262
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / mean ) /
rank: 177
score: 99.5704012784091
patch: return 0 . $NUMBER$ * ( 0 . 0 + Erf . erf ( ( x - mean ) )
rank: 177
score: 99.55897739955357
patch: return ( double ) ( 0 . 0 + Erf . erf ( ( x - mean ) /
rank: 177
score: 99.5550048828125
patch: return 0 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) / ( $NUMBER$ . 0 ) ) ) ;
rank: 177
score: 99.43080444335938
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( - mean )
rank: 177
score: 99.4293212890625
patch: return 0 . $NUMBER$ * ( ( 1 + Erf . erf ( ( x - mean )
rank: 178
score: 99.60828167459239
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) / /
rank: 178
score: 99.59864342730978
patch: return ( 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / 0 . 0 ) /
rank: 178
score: 99.59614780970982
patch: return 0 . $NUMBER$ * ( 1 . 0 ) / ( 1 . 0 + Erf . erf ( ( x - mean ) ;
rank: 178
score: 99.57000177556819
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) +
rank: 178
score: 99.55888671875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) + 1 ) /
rank: 178
score: 99.5546142578125
patch: return Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; }
rank: 178
score: 99.43046300551471
patch: return 0 . 0 * Erf . erf ( ( x - mean ) *
rank: 178
score: 99.42877197265625
patch: return 0 . $NUMBER$ * ( 1 . abs ( ( x - mean )
rank: 179
score: 99.608271484375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - 0 ) / mean ) /
rank: 179
score: 99.59598795572917
patch: return 0 . $NUMBER$ * ( ( x - mean ) / 0 . 0 ) /
rank: 179
score: 99.55871975806451
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) / $NUMBER$ . 0 +
rank: 179
score: 99.55391438802083
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( $NUMBER$ . $NUMBER$ ) ) ) ;
rank: 179
score: 99.42873247931985
patch: return 0 . $NUMBER$ * ( 1 . abs ( ( x - mean ) /
rank: 180
score: 99.6080322265625
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) / )
rank: 180
score: 99.59843388310185
patch: return 1 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) /
rank: 180
score: 99.588857421875
patch: return 0 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) / erf ) /
rank: 180
score: 99.56955884850544
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x , mean ) / (
rank: 180
score: 99.55868417245371
patch: return 0 . $NUMBER$ * ( ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 /
rank: 180
score: 99.55350748697917
patch: return 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( $NUMBER$ . 0 ) ) ) ;
rank: 180
score: 99.43004608154297
patch: return 1 . 0 * Erf . erf ( ( x - mean )
rank: 180
score: 99.42871704101563
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . 0 + 1 . 0 ) ;
rank: 181
score: 99.60802770543981
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf $NUMBER$ . 0 /
rank: 181
score: 99.58883666992188
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / ( x - mean ) /
rank: 181
score: 99.56950577445652
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) + (
rank: 181
score: 99.55318450927734
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( x - mean ) / ( standard CaMeL Deviation * 0 . 0 ) ) ;
rank: 181
score: 99.42962176983173
patch: return 0 . $NUMBER$ * ( ( x - mean ) /
rank: 181
score: 99.42835693359375
patch: return 0 . $NUMBER$ * ( 1 . < Erf . erf ( ( x - mean )
rank: 182
score: 99.6079852764423
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) * mean ( ) /
rank: 182
score: 99.597802734375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) - 1 ) /
rank: 182
score: 99.5887451171875
patch: return 0 . 0 / ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 182
score: 99.56889011548913
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) * (
rank: 182
score: 99.55850655691964
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 / $NUMBER$ +
rank: 182
score: 99.552734375
patch: return 0 . 0 * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / ( $NUMBER$ . 0 ) ) ) ;
rank: 182
score: 99.42911987304687
patch: return 0 . 0 * ( 1 + Erf . erf ( ( x - mean ) /
rank: 182
score: 99.42806203741776
patch: return 0 . $NUMBER$ * ( 1 . get 1 1 ( ( x - mean ) /
rank: 183
score: 99.60786494502315
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ( ) ) /
rank: 183
score: 99.56855912642045
patch: return 0 . 0 * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation *
rank: 183
score: 99.558349609375
patch: return 0 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 /
rank: 183
score: 99.55250598538306
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ) / ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ; }
rank: 183
score: 99.42728271484376
patch: return ( 1 . 0 + ( 1 < Erf . erf ( ( x - mean )
rank: 184
score: 99.6077168782552
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / $NUMBER$ /
rank: 184
score: 99.59649188701923
patch: return 0 . $NUMBER$ * Erf . erf ( 1 . 0 + Erf . erf ( ( x - mean ) ;
rank: 184
score: 99.58833451704545
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( x - mean ) / 0 . $NUMBER$ ) /
rank: 184
score: 99.5685398267663
patch: return 0 . $NUMBER$ * ( $NUMBER$ . $NUMBER$ + Erf . erf ( ( x - mean ) / (
rank: 184
score: 99.55823692908653
patch: return 0 . $NUMBER$ * ( 0 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 +
rank: 184
score: 99.55243326822917
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * ( $NUMBER$ . 0 ) ) ) ;
rank: 184
score: 99.42814127604167
patch: return ( ( double ) ( Erf . erf ( ( x - mean ) /
rank: 184
score: 99.42593994140626
patch: if ( 0 == ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 185
score: 99.60760967548077
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / $NUMBER$ . 0 /
rank: 185
score: 99.59595703125
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / $NUMBER$ ) /
rank: 185
score: 99.59435017903645
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ( ) ) /
rank: 185
score: 99.56831691576087
patch: return 0 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) + (
rank: 185
score: 99.5581787109375
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0
rank: 185
score: 99.55202985491071
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( x ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 185
score: 99.42752685546876
patch: return 0 . $NUMBER$ * 1 . $NUMBER$ + Erf . erf ( ( x - mean )
rank: 186
score: 99.6075439453125
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / Erf . erf ( ) /
rank: 186
score: 99.59589301215277
patch: return 0 . 0 * Erf . erf ( Erf . erf ( ( x - mean ) / 0 . 0 ) /
rank: 186
score: 99.59416852678571
patch: return 0 . $NUMBER$ * 1 . $NUMBER$ + Erf . erf ( ( x - mean ) /
rank: 186
score: 99.58802734375
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) / ) ) /
rank: 186
score: 99.56804547991071
patch: return 0 . $NUMBER$ * ( standard CaMeL Deviation * Math . sqrt ( 1 . 0 ) ) ;
rank: 186
score: 99.55791364397321
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ / $NUMBER$ . 0 +
rank: 186
score: 99.5519783266129
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( $NUMBER$ . 0 ) ) ) ; }
rank: 186
score: 99.42720754523026
patch: return 0 . 0 * ( 1 + Erf . erf ( ( x - mean )
rank: 186
score: 99.42563990542763
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . 0 + standard CaMeL Deviation *
rank: 187
score: 99.60723198784723
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double - mean ) / Erf . erf (
rank: 187
score: 99.59568434495192
patch: return 0 . $NUMBER$ * ( 1 . 0 + $NUMBER$ . 0 + Erf . erf ( ( x - mean ) /
rank: 187
score: 99.59398509837963
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) )
rank: 187
score: 99.58775390625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0
rank: 187
score: 99.56777556046195
patch: return 0 . $NUMBER$ * ( Integer . 0 + Erf . erf ( ( x - mean ) / (
rank: 187
score: 99.55789388020834
patch: return 0 . $NUMBER$ / ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0
rank: 187
score: 99.55170440673828
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( x - mean ) / ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ;
rank: 187
score: 99.42711724175348
patch: return x . cumulative CaMeL Probability ( Erf . erf ( ( x - mean )
rank: 188
score: 99.59565815172698
patch: try { return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) /
rank: 188
score: 99.5930508700284
patch: return 0 . $NUMBER$ * ( Double . 0 + Erf . erf ( ( x - mean ) /
rank: 188
score: 99.587509765625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . $NUMBER$
rank: 188
score: 99.56742350260417
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) )
rank: 188
score: 99.55788748604911
patch: return 0 . 0 * Erf . erf ( ( x - mean ) / Erf . erf ( ( x - mean ) /
rank: 188
score: 99.5514605978261
patch: return ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation *
rank: 188
score: 99.42709689670139
patch: return return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean )
rank: 188
score: 99.425048828125
patch: double ( ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 189
score: 99.59298828125
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / length ) /
rank: 189
score: 99.56652250744048
patch: return $NUMBER$ . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 189
score: 99.5509617017663
patch: return 0 . $NUMBER$ * ( 1 . 0 + mean * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 189
score: 99.42695055509868
patch: return 0 < ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 189
score: 99.42453484786184
patch: if ( x == 0 . 0 + Erf . erf ( ( x - mean )
rank: 190
score: 99.60625348772321
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ / $NUMBER$ . 0 /
rank: 190
score: 99.59468410326087
patch: return 0 . $NUMBER$ * Erf . erf ( Erf . erf ( ( x - mean ) ) /
rank: 190
score: 99.58705832741477
patch: return 0 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) /
rank: 190
score: 99.56622635690789
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) ) /
rank: 190
score: 99.55067354090073
patch: return 0 . 0 * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; }
rank: 190
score: 99.42684775904605
patch: return ( ( $NUMBER$ . 0 + Erf . erf ( ( x - mean ) /
rank: 190
score: 99.42424774169922
patch: return 0 . $NUMBER$ * ( 1 . get ( x - mean ) /
rank: 191
score: 99.60599459134616
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 ) / /
rank: 191
score: 99.59434678819444
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . $NUMBER$ ) /
rank: 191
score: 99.59232875279018
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / 1 . 0 ) / 0 . 0 ) ;
rank: 191
score: 99.58695652173913
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / 0 . $NUMBER$ ) /
rank: 191
score: 99.56550428602431
patch: return 0 . 0 + Erf . erf ( ( x - mean ) ) ;
rank: 191
score: 99.55711315524194
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) / $NUMBER$ . 0 / Erf . 0 /
rank: 191
score: 99.54966292842742
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt (
rank: 191
score: 99.42674560546875
patch: return 0 . 0 + ( 1 . - Erf . erf ( ( x - mean )
rank: 191
score: 99.42348225911458
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf $NUMBER$ ) ;
rank: 192
score: 99.60592086226852
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf $NUMBER$ . 0 (
rank: 192
score: 99.59393988715277
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) *
rank: 192
score: 99.59171919389205
patch: return 0 . $NUMBER$ : ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 192
score: 99.58689283288044
patch: return 0 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) ) /
rank: 192
score: 99.5634765625
patch: return Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation *
rank: 192
score: 99.5566875751202
patch: return 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 /
rank: 192
score: 99.54899088541667
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) / ( $NUMBER$ . 0 ) ) ) ;
rank: 192
score: 99.426708984375
patch: return 0 . $NUMBER$ * ( Erf . Erf . erf ( ( x - mean )
rank: 192
score: 99.42338256835937
patch: if ( x == 0 . 0 + Erf . erf ( ( x - mean ) /
rank: 193
score: 99.60569254557292
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf (
rank: 193
score: 99.59142578125
patch: return 0 . $NUMBER$ * ( ( double ) 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 193
score: 99.56283908420139
patch: return 0 . $NUMBER$ * 1 + Erf . erf ( ( x - mean )
rank: 193
score: 99.548681640625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( this . erf ) ) ) ;
rank: 193
score: 99.42666965060764
patch: return 0 . 0 * ( ( 1 . 0 + Erf . erf ( (
rank: 194
score: 99.60545066550925
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( double ) mean )
rank: 194
score: 99.59109061104911
patch: return return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) /
rank: 194
score: 99.5866190592448
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean - mean ) /
rank: 194
score: 99.56125806725544
patch: return 0 . $NUMBER$ * ( 1 . 0 0 + Erf . erf ( ( x - mean ) /
rank: 194
score: 99.55618286132812
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ )
rank: 194
score: 99.54865373883929
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 194
score: 99.42583151424633
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( (
rank: 194
score: 99.42247924804687
patch: return ( 1 . 0 + ( 1 + Erf . erf ( ( x - mean )
rank: 195
score: 99.6054217998798
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) / mean ) / /
rank: 195
score: 99.5932421875
patch: return 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) - mean ) /
rank: 195
score: 99.59102828414352
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - 0 . 0 ) - mean ) /
rank: 195
score: 99.56123490767045
patch: return cumulative CaMeL Probability ( 1 . 0 + Erf . erf ( ( x - mean ) / (
rank: 195
score: 99.54839728860294
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ;
rank: 195
score: 99.42561645507813
patch: return 0 . 0 * ( Erf . erf ( ( int ) Erf . erf (
rank: 195
score: 99.4224494485294
patch: return 0 . $NUMBER$ * ( 1 . get ( ( x - mean ) /
rank: 196
score: 99.60489908854167
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / / $NUMBER$ . 0 /
rank: 196
score: 99.5930706521739
patch: return 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) ) /
rank: 196
score: 99.5908954326923
patch: return 0 . $NUMBER$ * 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) /
rank: 196
score: 99.56107761548913
patch: return 0 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) * (
rank: 196
score: 99.55602088341347
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 ;
rank: 196
score: 99.547705078125
patch: return ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * 0 . 0 ) ) ) ;
rank: 196
score: 99.42547928659539
patch: return 0 . $NUMBER$ * ( - Erf . erf ( ( x - mean ) /
rank: 196
score: 99.42239990234376
patch: return ( 1 . $NUMBER$ + ( 1 > Erf . erf ( ( x - mean )
rank: 197
score: 99.59283447265625
patch: try { return 0 . $NUMBER$ * 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 197
score: 99.58577473958333
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / / mean ) /
rank: 197
score: 99.5559765625
patch: return 0 . 0 * ( double ) ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 197
score: 99.42515869140625
patch: return ( double ) 0 . 0 * ( Erf . erf ( ( x - mean )
rank: 197
score: 99.42214965820312
patch: 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 198
score: 99.6044413248698
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $STRING$ )
rank: 198
score: 99.58512739701705
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( double - mean ) /
rank: 198
score: 99.56062455610795
patch: return 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) )
rank: 198
score: 99.54757612179488
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 198
score: 99.42484130859376
patch: return cumulative CaMeL Probability ( $NUMBER$ . 0 + Erf . erf ( ( x - mean )
rank: 198
score: 99.42103271484375
patch: return ( 1 . 0 * ( 1 == Erf . erf ( ( x - mean )
rank: 199
score: 99.60443987165179
patch: double 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / /
rank: 199
score: 99.5921630859375
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) *
rank: 199
score: 99.58504585597827
patch: return ( 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 199
score: 99.5605999490489
patch: return 1 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) / (
rank: 199
score: 99.54702463457662
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; ;
rank: 199
score: 99.42468872070313
patch: return 0 . $NUMBER$ * ( ( long ) Erf . erf ( ( x - mean )
rank: 199
score: 99.41997680664062
patch: cumulative CaMeL Probability ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 200
score: 99.60400390625
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf ( double )
rank: 200
score: 99.58949631911058
patch: return 0 . $NUMBER$ * 1 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) ;
rank: 200
score: 99.584951171875
patch: return 0 . $NUMBER$ * Erf * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 200
score: 99.56047712053571
patch: return 0 . $NUMBER$ * ( 1 . 1 + Erf . erf ( ( x - mean )
rank: 200
score: 99.54683314732142
patch: return 0 . $NUMBER$ * Erf . cumulative CaMeL Probability ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 200
score: 99.42465209960938
patch: return cumulative CaMeL Probability ( 0 . $NUMBER$ + Erf . erf ( ( x - mean )
rank: 201
score: 99.60390444155092
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) x ) / Erf . erf (
rank: 201
score: 99.59208622685185
patch: return 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . $NUMBER$ ) /
rank: 201
score: 99.56037703804348
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) * (
rank: 201
score: 99.5465576171875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( 0 - mean ) / ( $NUMBER$ . 0 ) ) ) ;
rank: 201
score: 99.4244873046875
patch: return 0 . 0 + 0 . 0 + Erf . erf ( ( x - mean )
rank: 201
score: 99.41886596679687
patch: return ( 1 . 0 + ( 1 >= Erf . erf ( ( x - mean )
rank: 202
score: 99.603427734375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf ( (
rank: 202
score: 99.58889770507812
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - 0 . 0 ) ;
rank: 202
score: 99.5840374490489
patch: return 0 . $NUMBER$ * ( ( x - mean ) / 0 . 0 + ( x - mean ) /
rank: 202
score: 99.56016474184783
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / -
rank: 202
score: 99.55479213169643
patch: return 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / Erf . erf ( ( x - mean ) /
rank: 202
score: 99.54641927083334
patch: return 0 . 1 * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( $NUMBER$ . 0 ) ) ) ;
rank: 202
score: 99.41849975585937
patch: return - ( ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 203
score: 99.60308247227823
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / $NUMBER$ . 0 + Erf . erf (
rank: 203
score: 99.59144422743056
patch: return 0 . $NUMBER$ * Erf . erf ( 1 . 0 + Erf . erf ( ( x - mean ) ) /
rank: 203
score: 99.5888439360119
patch: return 0 . $NUMBER$ * 0 . 0 * Erf . erf ( ( x - mean ) /
rank: 203
score: 99.5836893717448
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf /
rank: 203
score: 99.55452998991936
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 )
rank: 203
score: 99.5453857421875
patch: if ( Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) )
rank: 203
score: 99.42349853515626
patch: return 0 . $NUMBER$ * ( 1 , Erf . erf ( ( x - mean ) /
rank: 203
score: 99.4184506064967
patch: return 0 . $NUMBER$ * ( 1 >= Erf . erf ( ( x - mean )
rank: 204
score: 99.59126953125
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) . erf ( ( x - mean ) ;
rank: 204
score: 99.58877724095395
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( 0 ) /
rank: 204
score: 99.58220880681819
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 1 . mean ) /
rank: 204
score: 99.5595703125
patch: return 0 . $NUMBER$ + Erf . erf ( ( x - mean ) ) ;
rank: 204
score: 99.54511088709677
patch: return ( Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 204
score: 99.42327270507812
patch: return 0 . 0 + ( 1 . 0 + Erf . erf ( ( byte ) 0
rank: 204
score: 99.4181640625
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( 0 . 0
rank: 205
score: 99.60286771334134
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double - mean ) / erf ( double )
rank: 205
score: 99.59126499720982
patch: return 0 . $NUMBER$ * ( ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) /
rank: 205
score: 99.5870830829327
patch: return 0 . $NUMBER$ * 0 . 1 * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 205
score: 99.5820645419034
patch: return Double . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 205
score: 99.5592730978261
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / &
rank: 205
score: 99.553837890625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( double )
rank: 205
score: 99.5448486328125
patch: return 0 . $NUMBER$ * ( $NUMBER$ . 0 + Erf . erf ( ( x - mean ) / ( $NUMBER$ . 0 ) ) ) ;
rank: 205
score: 99.42305072985198
patch: return ( ( 1 . 0 + Erf . erf ( ( x - mean ) )
rank: 205
score: 99.41785278320313
patch: return ( ( double ) 1 . $NUMBER$ + Erf . erf ( ( x - mean )
rank: 206
score: 99.602724609375
patch: return 0 . 0 * ( 1 . 0 * Erf . erf ( ( x - mean ) / mean ) /
rank: 206
score: 99.586669921875
patch: return 0 . $NUMBER$ * ( 1 . 0 . 0 + Erf . erf ( ( x - mean ) /
rank: 206
score: 99.5820079985119
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 0 . 0 +
rank: 206
score: 99.55909559461806
patch: return 0 . $NUMBER$ * ( 1 . 0 ) / ( 1 . 0 ) ;
rank: 206
score: 99.55359758649554
patch: return 0 . $NUMBER$ * ( double ) ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0
rank: 206
score: 99.54452912703805
patch: return ( 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation *
rank: 206
score: 99.42301025390626
patch: return ( ( int ) 0 . 0 + Erf . erf ( ( x - mean )
rank: 206
score: 99.417578125
patch: return 0 . $NUMBER$ * ( 1 . + Erf . erf ( ( x - mean )
rank: 207
score: 99.60256723257211
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / $NUMBER$ . 0 +
rank: 207
score: 99.581181640625
patch: return 0 . $NUMBER$ * ( x - 0 . 0 + Erf . erf ( ( x - mean ) ) /
rank: 207
score: 99.55908203125
patch: return 0 . $NUMBER$ + ( 1 . 0 * Erf . erf ( ( x - mean ) /
rank: 207
score: 99.55344871238425
patch: return ( 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 /
rank: 207
score: 99.54441139914773
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( x - mean ) ) ;
rank: 207
score: 99.42242431640625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - MAX
rank: 207
score: 99.41719135485198
patch: return - ( 0 . 0 + Erf . erf ( ( x - mean ) /
rank: 208
score: 99.60233248197116
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf ) / )
rank: 208
score: 99.5907421875
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) / $NUMBER$ ) /
rank: 208
score: 99.58415083451705
patch: return 0 . $NUMBER$ - ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 208
score: 99.5808817545573
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) - ) /
rank: 208
score: 99.55341796875
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) / 1 . 0
rank: 208
score: 99.54419732862904
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 208
score: 99.42230834960938
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( byte ) 1
rank: 208
score: 99.41641845703126
patch: return 0 += ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 209
score: 99.60220449942129
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . get ( ( x - mean ) / 1 . 0 ) /
rank: 209
score: 99.59053257533482
patch: return 0 . $NUMBER$ * Erf . erf ( Erf . erf ( ( x - mean ) / 0 . 0 ) ) /
rank: 209
score: 99.58407827524039
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . 0 + Erf . erf ( ( x - mean ) ;
rank: 209
score: 99.58069957386364
patch: return 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / 1 . 0 ) /
rank: 209
score: 99.42216796875
patch: return 0 . 0 + ( 1 < Erf . erf ( ( x - mean ) /
rank: 209
score: 99.41611328125
patch: return ( ( 1 . 0 + Erf . erf ( ( x - mean ) ) /
rank: 210
score: 99.59051983173077
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) [ 0 ] ) /
rank: 210
score: 99.5840234375
patch: return 0 . $NUMBER$ * ( 1 . 0 + mean ( ( x - mean ) / 0 . 0 ) ) /
rank: 210
score: 99.580322265625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( Double - mean ) /
rank: 210
score: 99.5579250169837
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / *
rank: 210
score: 99.55312815020162
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / 1 . 0 +
rank: 210
score: 99.54344889322917
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) ) / ( $NUMBER$ . 0 ) ) ;
rank: 210
score: 99.42213745117188
patch: return 0 . 0 + ( 1 . 0 + Erf . erf ( ( int ) 1
rank: 210
score: 99.41605417351974
patch: return 0 . $NUMBER$ * ( 1 . get 1 ( ( x - mean ) / (
rank: 211
score: 99.59030386117789
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ ) ) ;
rank: 211
score: 99.58378462357955
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ * Erf . erf ( ( x - mean ) ;
rank: 211
score: 99.57986328125
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double - mean ) / erf ) /
rank: 211
score: 99.5578845796131
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x <= mean )
rank: 211
score: 99.5529548891129
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 / Erf . 0 /
rank: 211
score: 99.54287257339016
patch: return 0 . $NUMBER$ * Erf . erf ( ( x + mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 211
score: 99.42157946134868
patch: return 0 . 0 * Erf . erf ( ( int ) Erf . erf (
rank: 211
score: 99.41580810546876
patch: return 0 . $NUMBER$ * ( ( 1 <= Erf . erf ( ( x - mean )
rank: 212
score: 99.6019874855324
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / double . $NUMBER$ ) /
rank: 212
score: 99.59029134114583
patch: try { return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) ;
rank: 212
score: 99.58375133167614
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) ;
rank: 212
score: 99.579453125
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / ( x - mean ) ) /
rank: 212
score: 99.55779474431819
patch: return ( 1 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 212
score: 99.55287388392857
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) ) / 1 . 0 ) ;
rank: 212
score: 99.54259860131049
patch: return 0 . $NUMBER$ * ( 1 . 0 + mean ( ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 212
score: 99.42111206054688
patch: return $STRING$ . ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 212
score: 99.41579182942708
patch: return 0 . $NUMBER$ * ( 1 . this . erf ( ( x - mean )
rank: 213
score: 99.60191999162946
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / *
rank: 213
score: 99.58988683363971
patch: return 0 . $NUMBER$ + Erf . erf ( ( x - mean ) ;
rank: 213
score: 99.57937622070312
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) ) / (
rank: 213
score: 99.55775035511364
patch: return 1 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 213
score: 99.5528094951923
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 *
rank: 213
score: 99.54248046875
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 213
score: 99.42088317871094
patch: return 0 . 0 + Erf . erf ( ( x + mean )
rank: 214
score: 99.589599609375
patch: return ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) / 0 . 0 )
rank: 214
score: 99.58278245192308
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - double ) 0 . 0 ) /
rank: 214
score: 99.55279296875
patch: return ( double ) 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 214
score: 99.54170619419642
patch: return ( 1 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 214
score: 99.41537314967105
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . ( ( x - mean )
rank: 215
score: 99.58913352272727
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( byte - mean ) /
rank: 215
score: 99.58273550180289
patch: return 0 . $NUMBER$ * 1 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) /
rank: 215
score: 99.57898966471355
patch: return ( 0 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) ) /
rank: 215
score: 99.5576702615489
patch: return 0 . 1 + ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / (
rank: 215
score: 99.552529296875
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0
rank: 215
score: 99.5408706665039
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation == 0 . 0 ) )
rank: 215
score: 99.42036518297698
patch: return 0 . 0 * ( 1 , Erf . erf ( ( x - mean )
rank: 216
score: 99.60150146484375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) * mean )
rank: 216
score: 99.589052734375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) - erf ) /
rank: 216
score: 99.5788671875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean + mean ) ) /
rank: 216
score: 99.55760556175595
patch: return 0 . 0 * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean )
rank: 216
score: 99.552216796875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) * $NUMBER$ . 0
rank: 216
score: 99.54000756048387
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) )
rank: 216
score: 99.42017957899306
patch: return ( 1 . 0 + ( 1 . 0 + Erf . erf ( (
rank: 216
score: 99.41488037109374
patch: return ( 1 . 0 + ( 1 * Erf . erf ( ( x - mean )
rank: 217
score: 99.6011454264323
patch: return 0 . $NUMBER$ * ( 1 . 0 / Erf . erf ( ( x - mean ) / mean )
rank: 217
score: 99.588857421875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) + $NUMBER$ ) /
rank: 217
score: 99.5824444110577
patch: return 0 . $NUMBER$ + 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 217
score: 99.57879638671875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf [
rank: 217
score: 99.55742853338069
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / standard CaMeL Deviation )
rank: 217
score: 99.55221121651786
patch: return 0 . $NUMBER$ * ( 1 . 0 / ( 1 . 0 + Erf . erf ( ( x - mean ) ) /
rank: 217
score: 99.53933536305146
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * standard CaMeL Deviation ) ) ) ;
rank: 217
score: 99.42008056640626
patch: return 0 . 0 + 1 . $NUMBER$ * Erf . erf ( ( x - mean )
rank: 217
score: 99.41481323242188
patch: return ( 0 . 0 + ( 1 <= Erf . erf ( ( x - mean )
rank: 218
score: 99.58881293402777
patch: return 0 . $NUMBER$ * Erf . erf ( Erf . erf ( ( x - mean ) / 0 . $NUMBER$ ) /
rank: 218
score: 99.5823828125
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) + mean ) /
rank: 218
score: 99.57834879557292
patch: return 0 . $NUMBER$ + ( x - 0 . 0 + Erf . erf ( ( x - mean ) /
rank: 218
score: 99.5571056547619
patch: return 0 . 1 * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 218
score: 99.55218098958333
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0
rank: 218
score: 99.53709457859848
patch: return ( 1 . 0 + Erf . erf ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 218
score: 99.41961669921875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( /
rank: 218
score: 99.41434054904514
patch: return 0 . $NUMBER$ * ( 1 . get ( ( x - mean ) / (
rank: 219
score: 99.60086495535714
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / / $NUMBER$ . 0 ) /
rank: 219
score: 99.58141508556548
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( 0 + mean ) /
rank: 219
score: 99.57828422214673
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 219
score: 99.55695134943181
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( 1 . 0 )
rank: 219
score: 99.53533063616071
patch: return 0 . 0 * ( Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 219
score: 99.41958438648896
patch: return 0 . $NUMBER$ double ( Erf . erf ( ( x - mean )
rank: 220
score: 99.60079795435855
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / mean )
rank: 220
score: 99.588359375
patch: return 0 . $NUMBER$ * Erf . erf ( Erf . erf ( ( x - mean ) / mean ) /
rank: 220
score: 99.58137650923295
patch: return 0 . $NUMBER$ * ( 1 . 0 ( Erf . erf ( ( x - mean ) /
rank: 220
score: 99.57774442784927
patch: return 0 . $NUMBER$ * Erf . erf * ( x - mean ) /
rank: 220
score: 99.55143519810268
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 / $NUMBER$ /
rank: 220
score: 99.53520965576172
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation > 0 . 0 ) )
rank: 220
score: 99.41876541940789
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x ,
rank: 221
score: 99.6007549579327
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf ( ) )
rank: 221
score: 99.58823029891305
patch: return ( 1 . $NUMBER$ * Erf . erf ( ( x - mean ) / 0 . 0 ) /
rank: 221
score: 99.58123224431819
patch: return 0 . $NUMBER$ * ( 1 . 0 - Erf . erf ( ( x - mean ) /
rank: 221
score: 99.55605246803977
patch: return 0 . $NUMBER$ * ( 1 . 0 ) + Erf . erf ( ( x - mean )
rank: 221
score: 99.55142106681035
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ ) / $NUMBER$ . 0 +
rank: 221
score: 99.53506961945564
patch: return 0 . $NUMBER$ * 1 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation *
rank: 221
score: 99.41841394761029
patch: return 0 cumulative CaMeL Probability ( Erf . erf ( ( x - mean )
rank: 222
score: 99.60074556790866
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ ) / $NUMBER$
rank: 222
score: 99.57718028192934
patch: } return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 222
score: 99.555908203125
patch: return 0 . $NUMBER$ * 1 + ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 222
score: 99.55141420717592
patch: return ( 0 . $NUMBER$ + Erf . erf ( ( int ) Erf . erf ( ( x - mean ) ) /
rank: 222
score: 99.53457496279762
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf < 0 . 0 ) ;
rank: 222
score: 99.41203002929687
patch: return 0 . $NUMBER$ * ( ( Erf . erf ( ( x - mean ) / (
rank: 223
score: 99.58100818452381
patch: return 0 . $NUMBER$ * 0 . $NUMBER$ + Erf . erf ( ( x - mean ) /
rank: 223
score: 99.5770703125
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( float - mean ) / mean ) /
rank: 223
score: 99.5557528409091
patch: return 0 . $NUMBER$ * ( 1 . 0 ) + 0 . $NUMBER$ * ( 1 . 0 ) ;
rank: 223
score: 99.55130208333334
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / 0 . 0
rank: 223
score: 99.53455636160714
patch: return ( 1 . 0 * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 223
score: 99.4178955078125
patch: return 0 . 0 + ( 1 . 0 + Erf . erf ( x - mean )
rank: 223
score: 99.41190185546876
patch: return ( 0 . 0 + ( 1 < Erf . erf ( ( x - mean )
rank: 224
score: 99.60061306423611
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ ) / / /
rank: 224
score: 99.58076533564815
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . 0 ) / Erf . erf ( ( x - mean ) /
rank: 224
score: 99.57688306725544
patch: return 0 . $NUMBER$ * ( ( x - mean ) / 1 . 0 + ( x - mean ) /
rank: 224
score: 99.5556003736413
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) ) -
rank: 224
score: 99.55126081194196
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 ) ;
rank: 224
score: 99.53389855587122
patch: return cumulative CaMeL Probability ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * 0 . 0 ) ) ) ;
rank: 224
score: 99.41775030838816
patch: return 0 . 0 + ( 1 < Erf . erf ( ( x - mean )
rank: 224
score: 99.41142835115132
patch: return ( 1 . $NUMBER$ * Erf . erf ( ( x - mean ) / (
rank: 225
score: 99.60057751885776
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) * Erf . erf ( ) /
rank: 225
score: 99.587646484375
patch: try { return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) *
rank: 225
score: 99.57681640625
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) / x ) /
rank: 225
score: 99.55557250976562
patch: return Erf . erf ( ( x - mean ) / ( 1 . 0 ) ) ;
rank: 225
score: 99.533203125
patch: return ( 0 . $NUMBER$ + Erf . erf ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 225
score: 99.41142578125
patch: return 0 . $NUMBER$ * ( 1 . ~ Erf . erf ( ( x - mean )
rank: 226
score: 99.60049874441964
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ( ) /
rank: 226
score: 99.58756880326705
patch: if 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 226
score: 99.58060257523148
patch: return 0 . 1 * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) /
rank: 226
score: 99.5554532137784
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) +
rank: 226
score: 99.55106608072917
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - 0 . 0 ) /
rank: 226
score: 99.41731567382813
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( $STRING$ - Erf . erf (
rank: 227
score: 99.600458984375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) ,
rank: 227
score: 99.57619140625
patch: return 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf ) /
rank: 227
score: 99.5552645596591
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) ?
rank: 227
score: 99.55079752604166
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . $NUMBER$ ) / $NUMBER$ . 0
rank: 227
score: 99.53278882575758
patch: return 0 . 0 * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( 1 . 0 ) ) ) ;
rank: 227
score: 99.41682739257813
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( standard CaMeL Deviation *
rank: 228
score: 99.60042671535327
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double - mean ) / /
rank: 228
score: 99.58755859375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ ) )
rank: 228
score: 99.58015046296296
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x + mean ) / 0 . 0 ) /
rank: 228
score: 99.5761188009511
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( x - mean ) / ( x - mean ) /
rank: 228
score: 99.5547207919034
patch: return 0 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) +
rank: 228
score: 99.5503125
patch: return 0 . 0 * Erf . erf ( ( int ) Erf . erf ( ( x - mean ) /
rank: 228
score: 99.53229314630681
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( x - mean ) / ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 228
score: 99.41680586965461
patch: return 0 . $NUMBER$ * ( int ) Erf . erf ( ( x - mean )
rank: 228
score: 99.41031494140626
patch: return ( 0 . 0 * ( 1 == Erf . erf ( ( x - mean )
rank: 229
score: 99.60027444773706
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double - mean ) / Erf . erf ( double )
rank: 229
score: 99.58719437210648
patch: return ( 1 . $NUMBER$ + 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) /
rank: 229
score: 99.58013237847223
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( int ) mean ) / 0 . 0 ) ;
rank: 229
score: 99.5758056640625
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( ( x - mean ) /
rank: 229
score: 99.55030871975806
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 /
rank: 229
score: 99.53203755040323
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( $NUMBER$ . 0 ) ) ) ; ;
rank: 229
score: 99.41030883789062
patch: return 0 & ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 230
score: 99.58707101004464
patch: return ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / 0 . 0 ) / 0 . 0 ) /
rank: 230
score: 99.58009935461956
patch: { return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 230
score: 99.55439685639881
patch: return 1 . $NUMBER$ * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 230
score: 99.55002357219827
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 / $NUMBER$ . 0
rank: 230
score: 99.53181457519531
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 230
score: 99.4097964638158
patch: return ( 0 . 0 * Erf . erf ( ( x - mean ) / (
rank: 231
score: 99.60013834635417
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / erf )
rank: 231
score: 99.57533174402573
patch: return 0 . $NUMBER$ * ( x . erf ( ( x - mean ) /
rank: 231
score: 99.55388077445652
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) >= (
rank: 231
score: 99.53173828125
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation *
rank: 231
score: 99.41526963975694
patch: return 0 . $NUMBER$ * ( - Erf . erf ( ( x - mean )
rank: 231
score: 99.40953304893092
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( $STRING$ -
rank: 232
score: 99.60013521634616
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / / x ) /
rank: 232
score: 99.579990234375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - 0 . 0 ) ) /
rank: 232
score: 99.57525079900569
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( 1 . 0 + ( x - mean ) /
rank: 232
score: 99.5527676669034
patch: return Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt (
rank: 232
score: 99.54923502604167
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) + 1 . 0 ) /
rank: 232
score: 99.41524465460526
patch: double x = ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 232
score: 99.40932210286458
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 < Erf . erf (
rank: 233
score: 99.59945565682871
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $STRING$ . 0 ) /
rank: 233
score: 99.58645762567934
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) * ( x - mean ) /
rank: 233
score: 99.57979642427884
patch: return 0 . $NUMBER$ * 1 . 1 * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 233
score: 99.57520592730978
patch: try { 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 233
score: 99.55266779119319
patch: return 0 . $NUMBER$ * ( 1 . 0 0 + Erf . erf ( ( x - mean )
rank: 233
score: 99.54909842354911
patch: return ( 0 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 ) ;
rank: 233
score: 99.5302734375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( . x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 233
score: 99.41521857766544
patch: return - 0 . $NUMBER$ * Erf . erf ( ( x - mean )
rank: 233
score: 99.40892269736842
patch: return 0 . 0 + ( 1 == Erf . erf ( ( x - mean )
rank: 234
score: 99.59928072415866
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ / / )
rank: 234
score: 99.58620981069711
patch: return 0 . $NUMBER$ * Erf . erf ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) /
rank: 234
score: 99.579794921875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / value ) /
rank: 234
score: 99.57418823242188
patch: try { return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 234
score: 99.55202318274456
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / +
rank: 234
score: 99.549072265625
patch: return 0 . $NUMBER$ x $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 234
score: 99.52970842633928
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) . 0 ) ) ;
rank: 234
score: 99.4150326377467
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( 0 .
rank: 234
score: 99.408349609375
patch: try { return ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 235
score: 99.58614408052884
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 *
rank: 235
score: 99.57947229456019
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . length ) /
rank: 235
score: 99.54889787946429
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / $NUMBER$ . 0 /
rank: 235
score: 99.4144287109375
patch: return 0 . 0 * ( Math . Erf . erf ( ( x - mean )
rank: 236
score: 99.58573857060185
patch: if 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) /
rank: 236
score: 99.57862490699405
patch: return 0 . $NUMBER$ * 1 . $NUMBER$ * Erf . erf ( ( x - mean ) ;
rank: 236
score: 99.57341974431819
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( x - mean ) / 0 . mean ) /
rank: 236
score: 99.5518108865489
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x ] - mean ) /
rank: 236
score: 99.54888509114583
patch: return 0 . $NUMBER$ * 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 /
rank: 236
score: 99.5286865234375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( $NUMBER$ . 0 ) ) ;
rank: 236
score: 99.41417236328125
patch: return 0 . $NUMBER$ * ( ( float ) Erf . erf ( ( x - mean )
rank: 236
score: 99.40781763980263
patch: return ( ( ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 237
score: 99.59854830228366
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ( double )
rank: 237
score: 99.58568226207386
patch: return 1 . $NUMBER$ * Erf . erf ( Erf . erf ( ( x - mean ) /
rank: 237
score: 99.57814453125
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - 0 . ( ) ) /
rank: 237
score: 99.57331194196429
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 0 . $NUMBER$ )
rank: 237
score: 99.55179268973214
patch: return 1 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 237
score: 99.54887537802419
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 (
rank: 237
score: 99.52776022518383
patch: return - 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 237
score: 99.41410522460937
patch: double 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 237
score: 99.40743408203124
patch: return 0 > ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 238
score: 99.5981914813702
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) / *
rank: 238
score: 99.57750108506944
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( Erf . erf ( ( x - mean ) ;
rank: 238
score: 99.57288707386364
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) . erf ( ) /
rank: 238
score: 99.5508045014881
patch: return 0 . $NUMBER$ * ( 0 . $NUMBER$ + Erf . erf ( ( x - mean )
rank: 238
score: 99.5488750751202
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( int ) mean ) / $NUMBER$ . 0 +
rank: 238
score: 99.41399069393383
patch: return cumulative CaMeL Probability ( ( x . erf ( ( x - mean ) /
rank: 238
score: 99.40736083984375
patch: return 0 . $NUMBER$ * ( ( 1 < Erf . erf ( ( x - mean )
rank: 239
score: 99.59799194335938
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / / /
rank: 239
score: 99.58532133556548
patch: return ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / $NUMBER$ ) /
rank: 239
score: 99.57277513586956
patch: return ( 1 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 239
score: 99.55027173913044
patch: return 0 . 1 * ( $NUMBER$ . 0 + Erf . erf ( ( x - mean ) / (
rank: 239
score: 99.54881184895834
patch: return 0 . $NUMBER$ * 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 /
rank: 239
score: 99.52707001657197
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( 0 . 0 ) ) ) ;
rank: 239
score: 99.40714946546052
patch: return 0 . $NUMBER$ * ( 1 . clone 1 ( ( x - mean ) / (
rank: 240
score: 99.59797886439732
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / / Erf . erf (
rank: 240
score: 99.57203125
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / . ) /
rank: 240
score: 99.55011858258929
patch: return Erf . erf ( ( x - mean ) / (
rank: 240
score: 99.54850260416667
patch: return Erf . erf ( ( x - mean ) / Erf . erf ( ( x - mean ) /
rank: 240
score: 99.52646272078805
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / 0 . 0 ) ;
rank: 240
score: 99.41375373391544
patch: return return 0 . 0 * Erf . erf ( ( x - mean )
rank: 241
score: 99.597900390625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) * Erf . erf ( (
rank: 241
score: 99.54827683971774
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 / Erf . 0 +
rank: 241
score: 99.41365559895833
patch: return ( 0 . 0 + ( 1 . 0 + Erf . erf ( (
rank: 242
score: 99.59784146012932
patch: return 0 . 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 242
score: 99.58500453404018
patch: return ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / 0 . 0 ) / 1 . 0 ) ;
rank: 242
score: 99.57689525462963
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( int ) mean ) / 0 . 0 ) /
rank: 242
score: 99.54965608016305
patch: return $NUMBER$ . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / (
rank: 242
score: 99.548095703125
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . get ( ( x - mean ) / $NUMBER$ . 0
rank: 242
score: 99.52602251838235
patch: if ( 0 . 0 * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) )
rank: 242
score: 99.40693664550781
patch: return 0 . $NUMBER$ * ( 1 . 0 + x - mean ) /
rank: 243
score: 99.59781901041667
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / Erf . erf ( ) / /
rank: 243
score: 99.57170758928571
patch: 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 243
score: 99.54935128348214
patch: return 0 . $NUMBER$ + 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 243
score: 99.54786783854166
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . get ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0
rank: 243
score: 99.52595789292279
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * 0 . 0 ) ) ) ;
rank: 243
score: 99.41331722861842
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( 1 .
rank: 243
score: 99.40690307617187
patch: return 1 . $NUMBER$ * ( 1 . - Erf . erf ( ( x - mean )
rank: 244
score: 99.59774344308036
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . get ( ( x - mean ) / / $NUMBER$ . 0 ) /
rank: 244
score: 99.58467029389881
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / $NUMBER$ . 0 )
rank: 244
score: 99.57650052584134
patch: return 0 . $NUMBER$ * 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) ;
rank: 244
score: 99.5713399251302
patch: return ( 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) ) /
rank: 244
score: 99.54918902853261
patch: return 0 . $NUMBER$ * ( $NUMBER$ . 0 + Erf . erf ( ( x - mean ) + (
rank: 244
score: 99.54765973772321
patch: try { return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 /
rank: 244
score: 99.52581612723215
patch: return 0 . $NUMBER$ * ( 1 . 0 + standard CaMeL Deviation * Math . sqrt ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; }
rank: 244
score: 99.4133056640625
patch: return 0 . $NUMBER$ * 1 . 0 * Erf . erf ( ( x - mean )
rank: 244
score: 99.406884765625
patch: return 0 . 0 * ( 1 . 0 + x - mean )
rank: 245
score: 99.597626953125
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x * mean ) / mean ) /
rank: 245
score: 99.54915578741776
patch: return 0 . 1 * ( Erf . erf ( ( x - mean ) / (
rank: 245
score: 99.5473396547379
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) / 1 . 0 +
rank: 245
score: 99.5256865530303
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( this . erf $NUMBER$ . 0 ) ) ) ;
rank: 245
score: 99.41291639539931
patch: return 0 . 0 * ( ( Erf . erf ( ( x - mean )
rank: 245
score: 99.40682983398438
patch: return ( 0 . 0 + ( 1 / Erf . erf ( ( x - mean )
rank: 246
score: 99.59762369791666
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / mean ) /
rank: 246
score: 99.58447265625
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . 0 + Erf . erf ( ( x - mean ) ) /
rank: 246
score: 99.5761249248798
patch: return 0 . $NUMBER$ * 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) /
rank: 246
score: 99.57105553668478
patch: if ( 0 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 246
score: 99.5488048735119
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x > mean )
rank: 246
score: 99.54718424479167
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( int ) Erf . erf ( ( x - mean ) /
rank: 246
score: 99.52545928955078
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$
rank: 246
score: 99.41289319490132
patch: return x . cumulative CaMeL Probability ( Erf . erf ( ( x - mean ) /
rank: 246
score: 99.40632934570313
patch: return 0 . $NUMBER$ * ( 1 >= Erf . erf ( ( x - mean ) /
rank: 247
score: 99.59745732060185
patch: return 0 . $NUMBER$ / ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 247
score: 99.58427734375
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) - mean ) /
rank: 247
score: 99.57607241030092
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( Erf . erf ( ( x - mean ) /
rank: 247
score: 99.54820185122283
patch: return 0 . $NUMBER$ * ( standard CaMeL Deviation * Math . sqrt ( standard CaMeL Deviation * Math . sqrt (
rank: 247
score: 99.52543809678819
patch: return ( 0 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; }
rank: 247
score: 99.41147867838542
patch: return 0 . 0 * Erf . cumulative CaMeL Probability ( x - mean ) ;
rank: 247
score: 99.40564575195313
patch: return ( ( ) ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 248
score: 99.59711162860577
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf $NUMBER$ ) /
rank: 248
score: 99.584248046875
patch: try { return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) ) /
rank: 248
score: 99.57566550925925
patch: return ( 1 . $NUMBER$ * Erf . erf ( ( x - mean ) / 0 . 0 ) / 0 . 0 )
rank: 248
score: 99.57094504616477
patch: return 0 . length * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 248
score: 99.54807447350544
patch: return 0 . $NUMBER$ * ( 1 . 0 + this . Erf . erf ( ( x - mean )
rank: 248
score: 99.54695638020833
patch: try { return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0
rank: 248
score: 99.41095291940789
patch: return 0 . $NUMBER$ * ( * Erf . erf ( ( x - mean ) /
rank: 248
score: 99.40506998697917
patch: return ( 0 . 0 / Erf . erf ( ( x - mean ) /
rank: 249
score: 99.57090250651042
patch: return 0 . 0 * ( Erf . erf ( ( x - mean ) / ( x - mean ) /
rank: 249
score: 99.54792586616848
patch: return 0 . $NUMBER$ * ( 0 . 0 + Erf . erf ( ( x - mean ) + (
rank: 249
score: 99.5468994140625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 / Erf . 0
rank: 249
score: 99.41059313322368
patch: return this . cumulative CaMeL Probability ( Erf . erf ( ( x - mean ) /
rank: 249
score: 99.40397563733552
patch: try { return ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 250
score: 99.59697265625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean / /
rank: 250
score: 99.5479046365489
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * (
rank: 250
score: 99.5248031616211
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * 0 . 0 ) )
rank: 250
score: 99.4105288856908
patch: return ( ( 1 . $NUMBER$ * Erf . erf ( ( x - mean ) /
rank: 251
score: 99.5968359375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ( (
rank: 251
score: 99.58404541015625
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( x - mean ) ) ;
rank: 251
score: 99.57399680397727
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ( (
rank: 251
score: 99.5707295735677
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 0 . mean ( ) ) /
rank: 251
score: 99.54731889204545
patch: return 0 . $NUMBER$ * ( 0 . 0 + Erf . erf ( ( x - mean ) +
rank: 251
score: 99.54667023689517
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 ,
rank: 251
score: 99.52476177793561
patch: return ( 0 . $NUMBER$ * Erf . erf ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 251
score: 99.41041475183823
patch: return $NUMBER$ . $NUMBER$ * ( Erf . erf ( ( x - mean )
rank: 251
score: 99.40329996744792
patch: return 0 . $NUMBER$ * ( 1 . 0 ) ;
rank: 252
score: 99.59648980034723
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ ) / $NUMBER$ /
rank: 252
score: 99.58393205915179
patch: return ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) / 0 . 0 ) /
rank: 252
score: 99.57389108758224
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( null ) /
rank: 252
score: 99.570595703125
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / ) ) /
rank: 252
score: 99.546572265625
patch: double Erf = 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 252
score: 99.5240478515625
patch: return null . cumulative CaMeL Probability ( Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 252
score: 99.41039360894098
patch: return 0 . $NUMBER$ double ( Erf . erf ( ( x - mean ) /
rank: 252
score: 99.40262179904514
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( 1 . 0 ) / (
rank: 253
score: 99.59589301215277
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( double ) mean ) / $NUMBER$ . 0 ) /
rank: 253
score: 99.569951171875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) (
rank: 253
score: 99.54685377038044
patch: return 0 . 1 * ( 1 . 0 + Erf . erf ( ( x - mean ) + (
rank: 253
score: 99.52374267578125
patch: return Erf . cumulative CaMeL Probability ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; }
rank: 253
score: 99.41034899259868
patch: return 0 . $NUMBER$ * ( this . Erf . erf ( ( x - mean )
rank: 253
score: 99.4023796530331
patch: return 0 . $NUMBER$ * ( 1 . get $NUMBER$ ( ( x - mean )
rank: 254
score: 99.59573496942934
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / /
rank: 254
score: 99.58353365384616
patch: return 0 . 0 * ( 1 . 0 + 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 254
score: 99.56990234375
patch: return 0 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) - mean ) /
rank: 254
score: 99.5468517485119
patch: return 0 . $NUMBER$ * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ?
rank: 254
score: 99.54642740885417
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 / 1 . 0 /
rank: 254
score: 99.52281996783088
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; ;
rank: 254
score: 99.4023681640625
patch: return ( 0 . 0 + ( 1 + Erf . erf ( ( x - mean )
rank: 255
score: 99.58352322048611
patch: return 0 . $NUMBER$ * ( 1 . 0 - Erf . erf ( ( x - mean ) / 0 . 0 ) /
rank: 255
score: 99.57352249710648
patch: throw 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) /
rank: 255
score: 99.5697711447011
patch: return 0 . 0 * ( ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 255
score: 99.54669744318181
patch: return 0 . 1 * ( 1 . 0 + Erf . erf ( ( x - mean ) +
rank: 255
score: 99.52257254464286
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; }
rank: 255
score: 99.4099480124081
patch: return - 0 . 0 + Erf . erf ( ( x - mean )
rank: 255
score: 99.40206748560855
patch: if ( ( $NUMBER$ . 0 + Erf . erf ( ( x - mean ) /
rank: 256
score: 99.59537760416667
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf ,
rank: 256
score: 99.58307756696429
patch: return ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ ) /
rank: 256
score: 99.57336877893519
patch: return 0 . $NUMBER$ ? ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) )
rank: 256
score: 99.56912364130434
patch: return 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / ( x - mean ) /
rank: 256
score: 99.5466839334239
patch: return ( 1 . 0 + 1 . 0 + Erf . erf ( ( x - mean ) / (
rank: 256
score: 99.54630796370968
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 / Erf . 0 /
rank: 256
score: 99.52247573390152
patch: return 1 . 0 * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 256
score: 99.40150853207237
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 == Erf . erf ( (
rank: 257
score: 99.59523228236607
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . $NUMBER$ ) / /
rank: 257
score: 99.58296535326087
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) ) /
rank: 257
score: 99.57316984953704
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / 0 . 0 ) / 0 . 0 )
rank: 257
score: 99.5689113451087
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( double - mean ) /
rank: 257
score: 99.54667524857955
patch: return 0 . $NUMBER$ * ( 1 . 0 ) + 1 . $NUMBER$ * ( 1 . 0 ) ;
rank: 257
score: 99.54630533854167
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( long ) Erf . erf ( ( x - mean ) /
rank: 257
score: 99.52156575520833
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf > 0 . 0 ) ;
rank: 257
score: 99.40136040581598
patch: return 0 . 0 * ( 1 . 0 + ( x - mean ) / (
rank: 258
score: 99.59520696824596
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 + Erf . erf (
rank: 258
score: 99.58292643229167
patch: return 0 . $NUMBER$ * ( 1 . 0 / Erf . erf ( ( x - mean ) / 0 . 0 ) /
rank: 258
score: 99.56870524088542
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf $NUMBER$
rank: 258
score: 99.54666270380434
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) ] )
rank: 258
score: 99.54600081905242
patch: return 0 . $NUMBER$ / ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 /
rank: 258
score: 99.52117560891544
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / Math . sqrt ( $NUMBER$ . 0 ) ) ) ; }
rank: 258
score: 99.40910901521382
patch: return 0 . $NUMBER$ * ( / Erf . erf ( ( x - mean ) /
rank: 258
score: 99.40112915039063
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . ( ( x - mean )
rank: 259
score: 99.59519675925925
patch: return 0 . 0 * ( 1 . 0 + Erf . get ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 259
score: 99.58292643229167
patch: return 1 . $NUMBER$ * Erf . erf ( Erf . erf ( ( x - mean ) / 0 . 0 ) /
rank: 259
score: 99.5728759765625
patch: return 0 . $NUMBER$ * ( 1 . 0 * 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 259
score: 99.56849609375
patch: return 0 . $NUMBER$ * ( ( 1 . 0 + Erf . erf ( ( x - mean ) ) / (
rank: 259
score: 99.54650348165761
patch: return 0 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) / -
rank: 259
score: 99.54587318157327
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / double . MIN _ VALUE ) /
rank: 259
score: 99.52095540364583
patch: return $STRING$ . cumulative CaMeL Probability ( Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 259
score: 99.40892791748047
patch: return 0 . 0 * ( 1 . 0 + ( x - mean )
rank: 259
score: 99.40108032226563
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 == Erf . erf ( ) /
rank: 260
score: 99.59515380859375
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) / mean (
rank: 260
score: 99.56823199728261
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / 0 . mean ) /
rank: 260
score: 99.54616477272727
patch: return 0 . $NUMBER$ * ( $NUMBER$ . 0 + Erf . erf ( ( x - mean ) +
rank: 260
score: 99.5458233173077
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 +
rank: 260
score: 99.52094184027777
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 260
score: 99.40889057360198
patch: return 0 . $NUMBER$ * ( double ) Erf . erf ( ( x - mean )
rank: 260
score: 99.40106201171875
patch: return cumulative CaMeL Probability ( 1 . 1 + Erf . erf ( ( x - mean )
rank: 261
score: 99.595107421875
patch: double 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) /
rank: 261
score: 99.58238728841145
patch: try { return 0 . $NUMBER$ * Erf . erf ( Erf . erf ( ( x - mean ) /
rank: 261
score: 99.57238188244048
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . mean ( ( x - mean ) /
rank: 261
score: 99.56802368164062
patch: return ( 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( x - mean ) /
rank: 261
score: 99.54616380774456
patch: return 0 . $NUMBER$ * ( $NUMBER$ . 0 + Erf . erf ( ( x - mean ) ) /
rank: 261
score: 99.54570661272321
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / Double . MIN _ VALUE /
rank: 261
score: 99.52057439630681
patch: return 0 . $NUMBER$ / Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 261
score: 99.40852625229779
patch: return 0 . 0 * Erf . erf ( ( x + mean ) /
rank: 261
score: 99.40029296875
patch: return 0 . $NUMBER$ * ( ( 0 == Erf . erf ( ( x - mean )
rank: 262
score: 99.59506460336539
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) / x
rank: 262
score: 99.58217985733695
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) ) *
rank: 262
score: 99.5717061360677
patch: return 0 . 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 262
score: 99.5680078125
patch: return 0 . 0 * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / mean ) /
rank: 262
score: 99.54613148082386
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) + ( standard CaMeL Deviation *
rank: 262
score: 99.54567307692308
patch: return 0 . 0 * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 /
rank: 262
score: 99.52044862689394
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 1 ) ) ) ;
rank: 262
score: 99.40845404730902
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( this
rank: 263
score: 99.594970703125
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / / . 0 ) /
rank: 263
score: 99.57162362557871
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) (
rank: 263
score: 99.56798785665761
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / 1 . $NUMBER$ ) /
rank: 263
score: 99.54602581521739
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) ? (
rank: 263
score: 99.5202834670608
patch: return 0 . ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 263
score: 99.40825805664062
patch: return 0 . $NUMBER$ * ( 1 . 0
rank: 263
score: 99.40018920898437
patch: return $STRING$ . cumulative CaMeL Probability ( Erf . erf ( ( x - mean ) / (
rank: 264
score: 99.59488619290866
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . get ( ( x - mean ) / $NUMBER$ ) / /
rank: 264
score: 99.57156937210648
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - 1 ) / 0 . 0 ) /
rank: 264
score: 99.54595656622024
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( x - mean ) /
rank: 264
score: 99.5453570822011
patch: return 0 . $NUMBER$ * ( ( 0 . 0 + Erf . erf ( ( x - mean ) /
rank: 264
score: 99.5202404203869
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf >= 0 . 0 ) ;
rank: 264
score: 99.40806749131944
patch: return ( 0 . 0 + Erf . erf ( ( x - mean ) *
rank: 264
score: 99.39994089226974
patch: if ( return 0 . 0 + Erf . erf ( ( x - mean ) /
rank: 265
score: 99.59451059194711
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ( ) /
rank: 265
score: 99.5820645419034
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) %
rank: 265
score: 99.57137357271634
patch: return 0 . $NUMBER$ * ( 1 . 0 + 0 . 0 + Erf . erf ( ( x - mean ) /
rank: 265
score: 99.56725056966145
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / ) /
rank: 265
score: 99.51987156723484
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) / Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 265
score: 99.40750885009766
patch: return 0 . 0 * ( 1 . 0 + Erf . erf (
rank: 265
score: 99.39979954769737
patch: return 0 . $NUMBER$ * ( 1 * Erf . erf ( ( x - mean )
rank: 266
score: 99.59450050636575
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) * Erf . erf (
rank: 266
score: 99.566884765625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . (
rank: 266
score: 99.54570978338069
patch: return 0 . 1 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation *
rank: 266
score: 99.54533203125
patch: return 0 . $NUMBER$ * ( double ) ( 0 . 0 + Erf . erf ( ( x - mean ) /
rank: 266
score: 99.51959043560606
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . $NUMBER$ ) ) ) ;
rank: 266
score: 99.40738254123264
patch: return null . cumulative CaMeL Probability ( Erf . erf ( ( x - mean )
rank: 266
score: 99.39966538373162
patch: return 0 . $NUMBER$ * ( 1 . get 0 ( ( x - mean )
rank: 267
score: 99.59447337962963
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( double ) mean ) / $NUMBER$ . 0 ) ;
rank: 267
score: 99.5667578125
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / null ) /
rank: 267
score: 99.54551630434783
patch: return 0 . $NUMBER$ * ( $NUMBER$ . 0 + Erf . erf ( ( x - mean ) * (
rank: 267
score: 99.51925011837122
patch: return 0 . $NUMBER$ * Erf . erf ( ( int - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 267
score: 99.4073486328125
patch: return 0 . $NUMBER$ * ( ( x . erf ( ( x - mean ) /
rank: 267
score: 99.39960038034539
patch: return 0 > ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 268
score: 99.59421115451389
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 + /
rank: 268
score: 99.57047213040866
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean . erf ( ) ) /
rank: 268
score: 99.56603515625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / start ) /
rank: 268
score: 99.54548445991848
patch: return 0 . 1 * ( 1 . 0 + Erf . erf ( ( x - mean ) * (
rank: 268
score: 99.545166015625
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 /
rank: 268
score: 99.51888020833333
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) . 0 ) ) ;
rank: 268
score: 99.40711805555556
patch: return 0 . 0 + Erf . cumulative CaMeL Probability ( ( x - mean )
rank: 268
score: 99.39959038628473
patch: if ( $STRING$ . equals ( Erf . erf ( ( x - mean ) /
rank: 269
score: 99.58131626674107
patch: return 0 . $NUMBER$ * Erf . erf ( ( 1 . 0 + Erf . erf ( ( x - mean ) ) /
rank: 269
score: 99.565810546875
patch: return 0 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) / $STRING$ ) /
rank: 269
score: 99.5450908954327
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) + 1 . 0 /
rank: 269
score: 99.54494406960227
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x , mean ) /
rank: 269
score: 99.51887063419117
patch: if ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) )
rank: 269
score: 99.40674641927083
patch: return ( ( Erf . erf ( ( x - mean ) /
rank: 269
score: 99.39924701891448
patch: return 0 <= ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 270
score: 99.59411168981481
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf . erf ( (
rank: 270
score: 99.58129010881696
patch: try { return 0 . $NUMBER$ * 1 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 270
score: 99.5702616373698
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - 0 . 1 ) /
rank: 270
score: 99.56565348307292
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / / $NUMBER$ . 0 ) /
rank: 270
score: 99.54505750868056
patch: return ( 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 +
rank: 270
score: 99.5447998046875
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) + (
rank: 270
score: 99.5187100497159
patch: return 0 . length * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 270
score: 99.39911499023438
patch: return ( ( 1 . 0 ) + Erf . erf ( ( x - mean ) /
rank: 271
score: 99.5940450032552
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / / )
rank: 271
score: 99.58118614783653
patch: return 0 . $NUMBER$ * Erf . erf ( 1 . 0 + Erf . erf ( ( x - mean ) *
rank: 271
score: 99.5699462890625
patch: return 0 . $NUMBER$ + 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 271
score: 99.54497821514423
patch: return 0 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 +
rank: 271
score: 99.5446544828869
patch: return 0 . $NUMBER$ * ( this . Erf . erf ( ( x - mean ) / (
rank: 271
score: 99.5186047676282
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( this . erf ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 271
score: 99.40655838815789
patch: return ( ( 1 . 0 + Erf . erf ( ( x - mean ) *
rank: 271
score: 99.39874267578125
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . ( ( x - mean ) /
rank: 272
score: 99.5939453125
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / $NUMBER$ / /
rank: 272
score: 99.56984641335227
patch: return 0 . $NUMBER$ * ( 0 . 0 + Erf . erf ( ( x - mean ) ;
rank: 272
score: 99.565302734375
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / 0 . mean ( ) ) /
rank: 272
score: 99.54459228515626
patch: return 0 . $NUMBER$ * 0 + Erf . erf ( ( x - mean ) / (
rank: 272
score: 99.51701803768383
patch: if ( 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) )
rank: 272
score: 99.39866333007812
patch: return - ( 1 . 0 + Erf . erf ( ( x - mean ) / (
rank: 273
score: 99.59383719308036
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) / /
rank: 273
score: 99.58108181423611
patch: return ( 1 . $NUMBER$ + 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 273
score: 99.56982421875
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 0 . 0 + Erf . erf (
rank: 273
score: 99.56505237926136
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / $NUMBER$ . $NUMBER$ ) /
rank: 273
score: 99.54477163461539
patch: return 0 . $NUMBER$ * ( double ) ( 1 . 0 + Erf . erf ( ( x - mean ) ) /
rank: 273
score: 99.54444521949405
patch: return 0 . $NUMBER$ * ( standard CaMeL Deviation * Math . sqrt ( standard CaMeL Deviation ) ) ;
rank: 273
score: 99.51694623161765
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation > 0 . 0 ) ) ) ;
rank: 273
score: 99.4061638327206
patch: return 0 . 0 + Erf . erf ( ( x - mean ) *
rank: 273
score: 99.39841180098684
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ) / (
rank: 274
score: 99.59383138020833
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) / x )
rank: 274
score: 99.58100043402777
patch: return 0 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) /
rank: 274
score: 99.56978175951087
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / 0 . 0 ) /
rank: 274
score: 99.56494140625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / Erf .
rank: 274
score: 99.54473322088069
patch: return ( 0 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 /
rank: 274
score: 99.54417883831522
patch: return 0 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) / *
rank: 274
score: 99.51676025390626
patch: return 0 . $NUMBER$ * ( ( 1 . 0 ) / ( 1 . 0 ) ) ;
rank: 274
score: 99.40517171223958
patch: return return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) /
rank: 274
score: 99.398388671875
patch: if ( 0 . 0 + ( 1 == Erf . erf ( ( x - mean )
rank: 275
score: 99.59377817007211
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) ) *
rank: 275
score: 99.58093713831019
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . $NUMBER$ ) /
rank: 275
score: 99.56968470982143
patch: return 0 . $NUMBER$ * 0 . $NUMBER$ * Erf . erf ( ( x - mean ) ;
rank: 275
score: 99.56461588541667
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / System .
rank: 275
score: 99.54463704427083
patch: return 0 . $NUMBER$ * ( 1 . 0 / Erf . erf ( ( int ) Erf . erf ( ( x - mean ) /
rank: 275
score: 99.54406207540761
patch: return 0 . $NUMBER$ + ( 1 . 0 * Erf . erf ( ( x - mean ) / (
rank: 275
score: 99.5167236328125
patch: return - 0 . 0 * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 275
score: 99.39835815429687
patch: return 0 . $NUMBER$ * ( ( 1 / Erf . erf ( ( x - mean )
rank: 276
score: 99.59372182992789
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / Erf . erf ( ) / /
rank: 276
score: 99.58084671585648
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) +
rank: 276
score: 99.56948617788461
patch: return 0 . $NUMBER$ * 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) /
rank: 276
score: 99.56444251019022
patch: if ( 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 276
score: 99.54379670516305
patch: return 0 . $NUMBER$ * 1 + ( 1 . $NUMBER$ + Erf . erf ( ( x - mean )
rank: 276
score: 99.51605583639706
patch: return 0 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; }
rank: 276
score: 99.40472733347039
patch: return ( double ) 0 . $NUMBER$ + Erf . erf ( ( x - mean )
rank: 276
score: 99.39820556640625
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . abs ( ( x - mean )
rank: 277
score: 99.59368426983173
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . get ( ( x - mean ) / mean ) / /
rank: 277
score: 99.58072335379464
patch: return 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) ) /
rank: 277
score: 99.5644140625
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) / } ) /
rank: 277
score: 99.54445103236607
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) ) / $NUMBER$ . 0 ) ;
rank: 277
score: 99.54374767485119
patch: return 1 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 277
score: 99.51580132378473
patch: return x . cumulative CaMeL Probability ( Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 277
score: 99.40455537683823
patch: return 1 . $NUMBER$ * ( Erf . erf ( ( x - mean )
rank: 277
score: 99.39818115234375
patch: return 0 . 0 + ( 1 == Erf . erf ( ( x - mean ) /
rank: 278
score: 99.593681640625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) * erf ) /
rank: 278
score: 99.56815962357955
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( double ) mean ) /
rank: 278
score: 99.56430886008523
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / / mean ) /
rank: 278
score: 99.54429889547414
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( Double . MIN _ VALUE /
rank: 278
score: 99.54372240149456
patch: return 0 . 1 * ( 0 . 0 + Erf . erf ( ( x - mean ) / (
rank: 278
score: 99.51548643369932
patch: return 0 . ( 0 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 278
score: 99.40391438802084
patch: return ( cumulative CaMeL Probability . erf ( ( x - mean ) /
rank: 278
score: 99.39787854646382
patch: return 0 . $NUMBER$ * ( 1 / Erf . erf ( ( x - mean )
rank: 279
score: 99.5935567220052
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . get ( ( x - mean ) / / /
rank: 279
score: 99.56409708658855
patch: return 0 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) / ) /
rank: 279
score: 99.54416419719827
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 / $NUMBER$ ) /
rank: 279
score: 99.54343483664773
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) &&
rank: 279
score: 99.51539565577652
patch: return ( 0 . 0 * Erf . erf ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 279
score: 99.40376281738281
patch: return 0 . 0 ( Erf . erf ( ( x - mean )
rank: 280
score: 99.59348060344827
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / Erf . erf ( ( x - mean ) /
rank: 280
score: 99.56802368164062
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) 1 . 0 ) /
rank: 280
score: 99.56400553385417
patch: return ( 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) ) /
rank: 280
score: 99.54415189302884
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) * 1 . 0 /
rank: 280
score: 99.54342518682066
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x + mean ) / (
rank: 280
score: 99.40320542279412
patch: return ( ( long ) Erf . erf ( ( x - mean ) /
rank: 280
score: 99.3975341796875
patch: return 0 . $NUMBER$ * ( ( 1 >= Erf . erf ( ( x - mean )
rank: 281
score: 99.59343352141204
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) / ) /
rank: 281
score: 99.57998259171195
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ;
rank: 281
score: 99.54312797214673
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / *
rank: 281
score: 99.51520453559027
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * standard CaMeL Deviation . 0 ) ) ) ;
rank: 281
score: 99.39722357855902
patch: if ( ( 1 . $NUMBER$ + Erf . erf ( ( x - mean )
rank: 282
score: 99.59330417798913
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean
rank: 282
score: 99.56741465692934
patch: x = 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 282
score: 99.56306596235795
patch: return 0 . $NUMBER$ * Erf . erf * Erf . erf ( ( x - mean ) /
rank: 282
score: 99.54387958233173
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / 1 . 0 /
rank: 282
score: 99.40273708767361
patch: double x = 0 . 0 + Erf . erf ( ( x - mean )
rank: 283
score: 99.59312702047414
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( double ) mean ) / Erf . erf ( double )
rank: 283
score: 99.57996057581019
patch: return ( 1 . 0 + 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) /
rank: 283
score: 99.56295340401786
patch: return 0 . 0 * ( Erf . erf ( ( x - mean ) / mean ) /
rank: 283
score: 99.54383263221153
patch: return 0 . $NUMBER$ * ( 1 . 0 / Erf . erf ( ( x - mean ) / $NUMBER$ . 0 /
rank: 283
score: 99.5426913174716
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) >=
rank: 283
score: 99.51493072509766
patch: return 0 . $NUMBER$ * this . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 283
score: 99.40197075737848
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) *
rank: 283
score: 99.39646606445312
patch: return ( 0 . $NUMBER$ * ( 1 > Erf . erf ( ( x - mean )
rank: 284
score: 99.56284586588542
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / get CaMeL
rank: 284
score: 99.54380696614584
patch: return 0 . $NUMBER$ / ( 1 . 0 + Erf . erf ( ( int ) Erf . erf ( ( x - mean ) /
rank: 284
score: 99.5426913174716
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) ?
rank: 284
score: 99.51348876953125
patch: return ( 0 . 0 + ( 1 . 0 ) / ( $NUMBER$ . 0 ) ) ;
rank: 284
score: 99.40177837171052
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - Erf . erf (
rank: 284
score: 99.39629516601562
patch: if ( 0 , ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 285
score: 99.593017578125
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) / mean )
rank: 285
score: 99.57977849786931
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) *
rank: 285
score: 99.5665283203125
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( 1 . 0 + Erf . erf ( ) ) /
rank: 285
score: 99.56252034505208
patch: return ( 1 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) ) /
rank: 285
score: 99.54375665838069
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / $NUMBER$ . 0 /
rank: 285
score: 99.54237432065217
patch: return 0 . $NUMBER$ * ( Double . sqrt ( Erf . erf ( ( x - mean ) / (
rank: 285
score: 99.5133389559659
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( x - mean ) / (
rank: 285
score: 99.40163845486111
patch: double ( 0 . 0 + Erf . erf ( ( x - mean ) /
rank: 285
score: 99.39628092447917
patch: return 0 . $NUMBER$ * ( 1 . abs ( ( x - mean ) / (
rank: 286
score: 99.5928955078125
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / x /
rank: 286
score: 99.56649667245371
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . null ) /
rank: 286
score: 99.56217447916667
patch: return 0 = 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 286
score: 99.54375
patch: return 0 . $NUMBER$ * 1 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 /
rank: 286
score: 99.54218084161931
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) ,
rank: 286
score: 99.51325539981617
patch: return Math . length ( Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 286
score: 99.40132221422698
patch: return ( 0 . 0 + ( Erf . erf ( ( x - mean ) /
rank: 287
score: 99.5927101417824
patch: return 0 . $NUMBER$ * ( 1 . 0 - Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 287
score: 99.57927734375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) << mean ) /
rank: 287
score: 99.5664774576823
patch: return 0 . $NUMBER$ . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) ;
rank: 287
score: 99.56208939985795
patch: return 0 . $NUMBER$ * Erf . 0 + Erf . erf ( ( x - mean ) /
rank: 287
score: 99.5420558763587
patch: return 0 . $NUMBER$ * ( $STRING$ . 0 + Erf . erf ( ( x - mean ) / (
rank: 287
score: 99.51321318655303
patch: return 0 . - Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; }
rank: 287
score: 99.40122357536765
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - 1 )
rank: 287
score: 99.39600287543402
patch: if ( 0 . $NUMBER$ + Erf . erf ( ( x - mean ) /
rank: 288
score: 99.59251185825893
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / Erf . erf ( )
rank: 288
score: 99.57914677372685
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . $NUMBER$ ) /
rank: 288
score: 99.56612594039352
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 288
score: 99.56196732954545
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - start ) /
rank: 288
score: 99.54369245256696
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ ) / $NUMBER$ . 0
rank: 288
score: 99.5418011209239
patch: return 0 . 1 * ( 1 . 0 + Erf . erf ( ( x - mean ) ) /
rank: 288
score: 99.51267496744792
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf / ( standard CaMeL Deviation * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 288
score: 99.40106964111328
patch: return 0 . 0 + ( 1 . 0 + ( x - mean )
rank: 288
score: 99.39595947265624
patch: return / ( 1 . 0 + Erf . erf ( ( x - mean ) / (
rank: 289
score: 99.59237234933036
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double - mean ) / $NUMBER$ . 0 ) / /
rank: 289
score: 99.57897010216347
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( ) ) /
rank: 289
score: 99.54358331088362
patch: return 0 . $NUMBER$ * ( double ) ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 /
rank: 289
score: 99.54176927649456
patch: return 0 . $NUMBER$ * 0 * ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 289
score: 99.51239691840277
patch: return cumulative CaMeL Probability ( 1 . 0 + Erf . erf ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 289
score: 99.40087127685547
patch: return $NUMBER$ . 0 * Erf . erf ( ( x - mean )
rank: 289
score: 99.3957763671875
patch: return 0 . $NUMBER$ * ( 1 . get ( x - mean )
rank: 290
score: 99.5789462002841
patch: return 1 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) /
rank: 290
score: 99.56604585193452
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 0 . 0 (
rank: 290
score: 99.56162516276042
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( x - mean ) / (
rank: 290
score: 99.54344889322917
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 / $NUMBER$ . 0 +
rank: 290
score: 99.54098378057066
patch: return 0 . $NUMBER$ * ( 0 . 0 + Erf . erf ( ( x - mean ) ) /
rank: 290
score: 99.40054660373264
patch: return ( ( int ) ( Erf . erf ( ( x - mean ) /
rank: 290
score: 99.39549424913194
patch: return 0 . $NUMBER$ * ( 1 . abs 1 ( ( x - mean ) /
rank: 291
score: 99.592275390625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . get ( ( x - mean ) / $NUMBER$ ) /
rank: 291
score: 99.578857421875
patch: return 0 . $NUMBER$ * ( 1 . 0 ? ( 1 . 0 * Erf . erf ( ( x - mean ) /
rank: 291
score: 99.56149291992188
patch: return 0 . $NUMBER$ * ( 1 . 0 + this . Erf . erf ( ( x - mean ) /
rank: 291
score: 99.54337890625
patch: return 0 . $NUMBER$ * ( int ) ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 291
score: 99.54086701766305
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / -
rank: 291
score: 99.51214240579044
patch: return 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; }
rank: 291
score: 99.39939970128677
patch: return return 0 . 0 + Erf . erf ( ( x - mean )
rank: 291
score: 99.39547729492188
patch: return ( 0 . $NUMBER$ * ( 1 + Erf . erf ( ( x - mean )
rank: 292
score: 99.59218052455357
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$
rank: 292
score: 99.56584563078704
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . $STRING$ ) /
rank: 292
score: 99.5613125887784
patch: final 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 292
score: 99.54336983816964
patch: return 0 . $NUMBER$ * ( 1 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) ) /
rank: 292
score: 99.54084578804348
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) <= (
rank: 292
score: 99.5117546530331
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) . ) ) ;
rank: 292
score: 99.3952392578125
patch: return ( ( double - 0 . 0 + Erf . erf ( ( x - mean )
rank: 293
score: 99.59173990885417
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) / Erf . erf (
rank: 293
score: 99.57862267127403
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) - mean ) ) /
rank: 293
score: 99.56583444695724
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( 1 . 0 + mean ) /
rank: 293
score: 99.56123683763587
patch: return 0 . $NUMBER$ * ( x - Erf . erf ( ( x - mean ) / mean ) /
rank: 293
score: 99.54322193287037
patch: return ( 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 /
rank: 293
score: 99.5404940518466
patch: return 0 . $NUMBER$ + 1 . 0 + Erf . erf ( ( x - mean ) / (
rank: 293
score: 99.39464721679687
patch: return ( 0 . 0 + ( 1 >= Erf . erf ( ( x - mean )
rank: 294
score: 99.59139278017241
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / / Erf . erf ( (
rank: 294
score: 99.57851381655092
patch: return 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . $NUMBER$ ) /
rank: 294
score: 99.56579137731481
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / 0 . 0 ) )
rank: 294
score: 99.56109619140625
patch: return 0 . $NUMBER$ * Erf ( 0 . 0 + Erf . erf ( ( x - mean ) /
rank: 294
score: 99.543212890625
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 /
rank: 294
score: 99.54046921502976
patch: return 0 . 0 + 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 294
score: 99.5104118795956
patch: return $STRING$ . equals ( Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 294
score: 99.39870876736111
patch: return ( ( double ) Erf . erf ( ( x - mean ) / (
rank: 294
score: 99.39455279181985
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 == standard CaMeL Deviation *
rank: 295
score: 99.59135219029018
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / /
rank: 295
score: 99.57837975543478
patch: return ( 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 295
score: 99.56575520833333
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - 0 . mean ) /
rank: 295
score: 99.56090291341145
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / 0 . $NUMBER$ ) ) /
rank: 295
score: 99.54043579101562
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / ( (
rank: 295
score: 99.51033761160714
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 295
score: 99.39820861816406
patch: return 0 . $NUMBER$ * Erf . erf ( ( x > mean )
rank: 295
score: 99.39436170789931
patch: if ( x . equals ( Erf . erf ( ( x - mean ) /
rank: 296
score: 99.59111870659723
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / / $NUMBER$ . 0 +
rank: 296
score: 99.57815115792411
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / Erf . mean ) /
rank: 296
score: 99.56552956321023
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( double ) mean ) /
rank: 296
score: 99.56055748980978
patch: if ( 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 296
score: 99.54291178385417
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( int ) Erf . erf ( ( int ) mean ) /
rank: 296
score: 99.54026197350544
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) / -
rank: 296
score: 99.39799669053819
patch: return 0 . 0 + ( ( 1 . 0 + Erf . erf ( (
rank: 296
score: 99.39423828125
patch: return ( 1 . $NUMBER$ + ( 1 <= Erf . erf ( ( x - mean )
rank: 297
score: 99.59105506310097
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) * mean ) / /
rank: 297
score: 99.5779441550926
patch: return 0 . $NUMBER$ * Erf . erf ( Erf . erf ( ( x - mean ) * 1 . 0 ) /
rank: 297
score: 99.56549072265625
patch: return 0 . $NUMBER$ * ( ( x - mean ) / 0 . 0 ) ;
rank: 297
score: 99.56046919389205
patch: return 0 . 0 * Erf . erf ( ( x - mean ) / 0 . $NUMBER$ ) /
rank: 297
score: 99.54011615953948
patch: return 0 . $NUMBER$ * 0 + Erf . erf ( ( x - mean ) /
rank: 297
score: 99.51002086292614
patch: return cumulative CaMeL Probability ( x , standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 297
score: 99.39782036675348
patch: double ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 297
score: 99.39419894748264
patch: return - ( 0 . 0 + Erf . erf ( ( x - mean )
rank: 298
score: 99.590908203125
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( double ) mean ) / mean ) /
rank: 298
score: 99.57789829799107
patch: return 0 . $NUMBER$ * Erf . erf ( Erf . erf ( ( x - mean ) / 0 . 0 ) ) ;
rank: 298
score: 99.56531700721153
patch: return 0 . $NUMBER$ ? 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 298
score: 99.54282052176339
patch: try { return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 /
rank: 298
score: 99.5401027513587
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ * Erf . erf ( ( x - mean ) / (
rank: 298
score: 99.50999540441177
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . 0 ) ; }
rank: 298
score: 99.39395302220395
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . ( x - mean ) /
rank: 299
score: 99.59083984375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x + mean ) / mean ) /
rank: 299
score: 99.57786277488425
patch: return ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / 0 . 0 ) / 1 . 0 )
rank: 299
score: 99.56528501157408
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 1 ) /
rank: 299
score: 99.5599365234375
patch: return 0 . $NUMBER$ * ( x - mean ) / 0 . 0 + ( x - mean ) /
rank: 299
score: 99.54279327392578
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 ) ;
rank: 299
score: 99.53932787024456
patch: return 0 . $NUMBER$ * ( 0 . 0 + Erf . erf ( ( x - mean ) * (
rank: 299
score: 99.50999450683594
patch: return 0 . $NUMBER$ * Erf . erf ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ; }
rank: 299
score: 99.39701843261719
patch: return 1 . 0 + Erf . erf ( ( x - mean )
rank: 299
score: 99.39377312911184
patch: if ( 1 . 0 + Erf . erf ( ( x - mean ) / (
rank: 300
score: 99.59079214242789
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) * /
rank: 300
score: 99.5778175636574
patch: return 0 . 0 * Erf . erf ( Erf . erf ( ( x - mean ) / 1 . 0 ) /
rank: 300
score: 99.56525530133929
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( 0 . 0 ) /
rank: 300
score: 99.559296875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / x ) )
rank: 300
score: 99.54270241477273
patch: return 0 . 0 * ( 0 . 0 + Erf . erf ( ( x - mean ) /
rank: 300
score: 99.53887329101562
patch: return 0 . $NUMBER$ * ( standard CaMeL Deviation * Math . sqrt ( Erf . erf (
rank: 300
score: 99.50980377197266
patch: if ( 0 < Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) )
rank: 300
score: 99.39667711759868
patch: return 0 . $NUMBER$ + Erf . Erf . erf ( ( x - mean )
rank: 301
score: 99.59037724247685
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf ( 1 ) /
rank: 301
score: 99.565185546875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double - mean ) / 1 . 0 ) /
rank: 301
score: 99.54258510044643
patch: return 0 . $NUMBER$ * ( ( double ) Erf . erf ( ( x - mean ) /
rank: 301
score: 99.5388714334239
patch: return 0 . $NUMBER$ * ( false . 0 + Erf . erf ( ( x - mean ) / (
rank: 301
score: 99.509130859375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; ;
rank: 301
score: 99.39613252527573
patch: return - 0 . 0 * Erf . erf ( ( x - mean )
rank: 301
score: 99.39340691817434
patch: return 0 . $NUMBER$ * ( 1 . this . erf ( ( x - mean ) /
rank: 302
score: 99.59029835668103
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / mean )
rank: 302
score: 99.577138671875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) * x ) /
rank: 302
score: 99.559111328125
patch: return Double . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) /
rank: 302
score: 99.54257497479838
patch: return 0 . $NUMBER$ / ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 / Erf . 0 /
rank: 302
score: 99.5386075106534
patch: return 0 . $NUMBER$ * ( 1 . 0 ) + 1 . 0 + ( 1 . 0 ) ;
rank: 302
score: 99.39545641447368
patch: return 0 . 0 * ( 1 > Erf . erf ( ( x - mean )
rank: 302
score: 99.39320678710938
patch: return 0 . 0 * ( 1 < Erf . erf ( ( x - mean ) /
rank: 303
score: 99.58987087673611
patch: return 0 . 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) /
rank: 303
score: 99.57710322627315
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) * 1 . $NUMBER$ ) /
rank: 303
score: 99.53860606317934
patch: return 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) + (
rank: 303
score: 99.50873357599431
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf $NUMBER$ . erf ( ) ) ;
rank: 303
score: 99.39402262369792
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( !
rank: 303
score: 99.39309692382812
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . ( x - mean ) /
rank: 304
score: 99.58975923978366
patch: return 0 . $NUMBER$ * ( 1 . 0 / Erf . erf ( ( x - mean ) / mean ) / /
rank: 304
score: 99.56484194155092
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) x ) / 0 . 0 ) /
rank: 304
score: 99.55868928328805
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / new
rank: 304
score: 99.53854237432066
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) / *
rank: 304
score: 99.5085198818109
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 304
score: 99.39401726973684
patch: return ( 1 . 0 + ( Erf . erf ( ( x - mean ) /
rank: 304
score: 99.39307925575658
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( $STRING$ )
rank: 305
score: 99.58931790865384
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( mean ) /
rank: 305
score: 99.576904296875
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) . erf ( ( x - mean ) ) /
rank: 305
score: 99.564794921875
patch: return 0 . $NUMBER$ * ( 1 . 0 + mean ) / Erf . erf ( ( x - mean ) ;
rank: 305
score: 99.55861409505208
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / / 1 . 0 ) /
rank: 305
score: 99.53779933763587
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x + mean ) / (
rank: 305
score: 99.50846593520221
patch: return Integer . length ( Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 305
score: 99.39376831054688
patch: return 0 . $NUMBER$ ( Erf . erf ( ( x - mean )
rank: 306
score: 99.589150390625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - start ) / mean ) /
rank: 306
score: 99.57686121323529
patch: return 1 . $NUMBER$ * Erf . erf ( ( x - mean ) ;
rank: 306
score: 99.55859375
patch: return 0 . $NUMBER$ * ( 0 . 0 + Erf . erf ( ( x - mean ) / mean ) /
rank: 306
score: 99.541552734375
patch: return 0 . $NUMBER$ * ( 0 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0
rank: 306
score: 99.53742009943181
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / Math . sqrt (
rank: 306
score: 99.50801355698529
patch: return return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 306
score: 99.39358038651316
patch: return new 0 ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 306
score: 99.39276733398438
patch: return 0 ( 1 . 0 + Erf . erf ( ( x - mean ) / (
rank: 307
score: 99.58912941261575
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) / erf (
rank: 307
score: 99.57682582310268
patch: return 0 . $NUMBER$ * ( ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 307
score: 99.5638936360677
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - 1 . 0 ) /
rank: 307
score: 99.5579501065341
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( long - mean ) /
rank: 307
score: 99.541552734375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 / $NUMBER$ . 0 ,
rank: 307
score: 99.53725798233695
patch: return ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation *
rank: 307
score: 99.50778377757354
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ;
rank: 307
score: 99.39284153988487
patch: return 0 . $NUMBER$ + ( ( Erf . erf ( ( x - mean ) /
rank: 307
score: 99.39252471923828
patch: return 0 . $NUMBER$ * ( x . erf ( ( x - mean )
rank: 308
score: 99.5767234519676
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) . length ( ) ) /
rank: 308
score: 99.55767578125
patch: return 0 . $NUMBER$ * Erf ( 1 . 0 + Erf . erf ( ( x - mean ) ) /
rank: 308
score: 99.54152018229166
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( int ) Erf . erf ( ( x - mean ) /
rank: 308
score: 99.53703962053571
patch: return 0 . $NUMBER$ * ( 1 . 0 - Erf . erf ( ( x - mean )
rank: 308
score: 99.50770607972757
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf / ( standard CaMeL Deviation * Math . sqrt ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 308
score: 99.39276444284539
patch: return 0 . 0 + Erf . cumulative CaMeL Probability ( ( x - mean ) /
rank: 309
score: 99.58882649739583
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) * $NUMBER$ /
rank: 309
score: 99.57609375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / min ) /
rank: 309
score: 99.5636574074074
patch: return 0 . 0 * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / 0 . 0 ) /
rank: 309
score: 99.55738414417614
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( double - mean ) /
rank: 309
score: 99.54117257254464
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 / 0 /
rank: 309
score: 99.53701384171195
patch: return 0 . $NUMBER$ * ( 1 . 0 . 0 + Erf . erf ( ( x - mean )
rank: 309
score: 99.50595703125
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ;
rank: 309
score: 99.39239142922794
patch: return ( ( Long ) Erf . erf ( ( x - mean ) /
rank: 309
score: 99.391357421875
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 == ( x - mean ) /
rank: 310
score: 99.58855731670673
patch: double 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) / /
rank: 310
score: 99.575576171875
patch: return 0 . $NUMBER$ * Erf . erf ( Erf . erf ( ( x - mean ) / erf ) /
rank: 310
score: 99.55728515625
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 ) /
rank: 310
score: 99.54105318509616
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) * 1 . 0 +
rank: 310
score: 99.53658621651786
patch: return 0 . $NUMBER$ * 1 + ( Erf . erf ( ( x - mean ) / (
rank: 310
score: 99.50513435132575
patch: return 0 . $NUMBER$ * ( 1 . 0 * ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 310
score: 99.39225046258224
patch: return ( double ) 0 . $NUMBER$ * ( 1 . 0 + Erf . erf (
rank: 311
score: 99.57532190393519
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) ,
rank: 311
score: 99.56361219618056
patch: 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) ) /
rank: 311
score: 99.55724080403645
patch: return this . 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 311
score: 99.54081217447917
patch: return 0 . 0 * 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 311
score: 99.5365680197011
patch: return 0 . $NUMBER$ * ( Double . 0 + Erf . erf ( ( x - mean ) / (
rank: 311
score: 99.5045868844697
patch: return 0 . 0 * ( 1 . 0 + ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 311
score: 99.39118957519531
patch: return cumulative CaMeL Probability ( 1 . 0 + ( x - mean ) /
rank: 311
score: 99.39053505345395
patch: return null . cumulative CaMeL Probability ( Erf . erf ( ( x - mean ) /
rank: 312
score: 99.57516818576389
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) << 0 . 1 ) /
rank: 312
score: 99.5570956143466
patch: return 0 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) /
rank: 312
score: 99.54010479266827
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / $NUMBER$ . $NUMBER$ +
rank: 312
score: 99.53631036931819
patch: return 0 . 1 * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) /
rank: 312
score: 99.50452378216912
patch: return 0 . min ( Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 312
score: 99.39076861213235
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean 1 )
rank: 312
score: 99.38915252685547
patch: if ( 0 == Erf . erf ( ( x - mean ) /
rank: 313
score: 99.5883076985677
patch: return 0 . $NUMBER$ / ( 1 . 0 + Erf . erf ( ( x - mean ) / mean )
rank: 313
score: 99.5751483623798
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf ) ) ;
rank: 313
score: 99.56348560474537
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . mean ) /
rank: 313
score: 99.5569921875
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / / ) /
rank: 313
score: 99.54007161458334
patch: return 0 . $NUMBER$ * ( 1 . 0 / ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0
rank: 313
score: 99.5362215909091
patch: return 0 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) ?
rank: 313
score: 99.50413602941177
patch: return 0 . $NUMBER$ * ( 1 . 0 + x - mean ) ; }
rank: 313
score: 99.39061821831598
patch: return ( 0 . 0 + ( Erf . erf ( ( x - mean )
rank: 313
score: 99.38894314236111
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) )
rank: 314
score: 99.5881640625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / x ) /
rank: 314
score: 99.57504507211539
patch: return 0 . $NUMBER$ * Erf . erf ( Erf . erf ( ( x - mean ) / 0 . 0 )
rank: 314
score: 99.56315104166667
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ,
rank: 314
score: 99.556884765625
patch: return ( 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) ) /
rank: 314
score: 99.53993326822916
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0
rank: 314
score: 99.5360440340909
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) ==
rank: 314
score: 99.50409490411931
patch: return 0 . $NUMBER$ * ( 1 . 0 + x - mean ) / ( $NUMBER$ . 0 ) ;
rank: 314
score: 99.39058191636029
patch: return $STRING$ . $NUMBER$ * ( Erf . erf ( ( x - mean )
rank: 314
score: 99.3878109580592
patch: if ( ( ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 315
score: 99.588046875
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) *
rank: 315
score: 99.56284360532408
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( double ) mean ) / 0 . 0 ) ;
rank: 315
score: 99.55672200520833
patch: return 0 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) ) / (
rank: 315
score: 99.53992571149554
patch: try { return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 +
rank: 315
score: 99.53590029761905
patch: return 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / (
rank: 315
score: 99.50360272381756
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 315
score: 99.39055718315973
patch: return 0 . $NUMBER$ * 1 < Erf . erf ( ( x - mean )
rank: 315
score: 99.38759894120066
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( x ) /
rank: 316
score: 99.58803530092592
patch: double 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 316
score: 99.57475450303819
patch: return ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) *
rank: 316
score: 99.56278659986413
patch: return ( 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) ;
rank: 316
score: 99.50341796875
patch: return 0 . $NUMBER$ * ( 1 . ( x - mean ) / ( $NUMBER$ . 0 ) ) ;
rank: 316
score: 99.39010799632354
patch: return $STRING$ . $NUMBER$ * Erf . erf ( ( x - mean ) /
rank: 316
score: 99.38652487362133
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( ( x - mean )
rank: 317
score: 99.58774594907408
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ) / ( 1 . 0 + Erf . erf )
rank: 317
score: 99.57475142045455
patch: return 0 . $NUMBER$ * ( 1 . 0 ? Erf . erf ( ( x - mean ) *
rank: 317
score: 99.56246948242188
patch: return 0 . $NUMBER$ * ( 1 . 0 . $NUMBER$ + Erf . erf ( ( x - mean ) /
rank: 317
score: 99.53981119791666
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 +
rank: 317
score: 99.5032071200284
patch: return 0 . $NUMBER$ * ( ( 1 . 0 + mean ) / ( $NUMBER$ . 0 ) ) ;
rank: 317
score: 99.38997609991776
patch: double 0 * ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 318
score: 99.58742268880208
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $STRING$ /
rank: 318
score: 99.5558749112216
patch: return 0 . $NUMBER$ * ( ( Erf . erf ( ( x - mean ) / mean ) /
rank: 318
score: 99.53971041165866
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 )
rank: 318
score: 99.53544477982955
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) ?
rank: 318
score: 99.5031970796131
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf == 0 . 0 ) ;
rank: 318
score: 99.38975614659927
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( int - mean )
rank: 318
score: 99.38525390625
patch: else return ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 319
score: 99.58736866918103
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / Erf . length ( ) )
rank: 319
score: 99.57468087332589
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . $NUMBER$ ) ) /
rank: 319
score: 99.55568359375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / Erf /
rank: 319
score: 99.53966796875
patch: return 0 . $NUMBER$ * ( float ) ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 319
score: 99.53523393110795
patch: return 0 . $NUMBER$ * ( 1 . 0 ) + 0 . $NUMBER$ * ( $NUMBER$ . 0 ) ;
rank: 319
score: 99.5030850497159
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf 1 . erf ( ) ) ;
rank: 319
score: 99.38919870476974
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( int ,
rank: 320
score: 99.58732096354167
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) / mean .
rank: 320
score: 99.57459368024554
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( 1 . 0 * Erf . erf ( ( x - mean ) ) /
rank: 320
score: 99.5556640625
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) ) /
rank: 320
score: 99.53521173650569
patch: return 0 . 0 + 1 . 0 + Erf . erf ( ( x - mean ) / (
rank: 320
score: 99.50256696428572
patch: return 0 . 0 * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) . 0 ) ) ;
rank: 320
score: 99.38860724954044
patch: return 0 . $NUMBER$ * Erf . erf ( ( ( x - mean )
rank: 320
score: 99.38480417351974
patch: return 0 . $NUMBER$ * ( 1 . to CaMeL String ( ( x - mean ) /
rank: 321
score: 99.58727606411638
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ /
rank: 321
score: 99.57456235532408
patch: return 1 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 321
score: 99.56215256911058
patch: return 0 . $NUMBER$ * double . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 321
score: 99.555419921875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf 1
rank: 321
score: 99.53502308238636
patch: return 0 . $NUMBER$ * ( 1 . - Erf . erf ( ( x - mean ) / (
rank: 321
score: 99.50191127232142
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * 0 . 0 ) ) ) ; }
rank: 321
score: 99.3884341591283
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( true -
rank: 321
score: 99.38477847450658
patch: return ( return 0 . $NUMBER$ + Erf . erf ( ( x - mean ) /
rank: 322
score: 99.58717628761575
patch: return 0 . $NUMBER$ * 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / /
rank: 322
score: 99.574462890625
patch: return ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) / 1 . 0 ) ;
rank: 322
score: 99.53933376736111
patch: return ( 0 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 /
rank: 322
score: 99.5349454012784
patch: return 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) +
rank: 322
score: 99.5015510110294
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * 1 . 0 ) ) ) ;
rank: 322
score: 99.38841488486842
patch: return return ( 0 . 0 + Erf . erf ( ( x - mean ) /
rank: 322
score: 99.38470780222039
patch: return 0 += ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 323
score: 99.58713107638889
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / erf $NUMBER$ . 0 /
rank: 323
score: 99.5619229403409
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( double ) mean ) /
rank: 323
score: 99.5393310546875
patch: return 0 . $NUMBER$ * ( 0 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0
rank: 323
score: 99.534912109375
patch: return 0 . $NUMBER$ * ( 1 . 0 ) + 1 . $NUMBER$ * ( $NUMBER$ . 0 ) ;
rank: 323
score: 99.50129468513258
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ * ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 323
score: 99.38442813648896
patch: if ( x == 0 + Erf . erf ( ( x - mean )
rank: 324
score: 99.58712890625
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( double ) mean ) / mean ) ;
rank: 324
score: 99.56184895833333
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( double ) mean ) / 0 . 0 ) /
rank: 324
score: 99.53926908052884
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 1 . 0 ) / $NUMBER$ . 0 ;
rank: 324
score: 99.50127096737133
patch: return 0 . $NUMBER$ * ( x . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 324
score: 99.38791073069854
patch: return ( ( x - Erf . erf ( ( x - mean ) /
rank: 324
score: 99.38197236902573
patch: if ( 0 . $NUMBER$ + Erf . erf ( ( x - mean )
rank: 325
score: 99.58711299189815
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( int ) mean ) / $NUMBER$ . 0 ) /
rank: 325
score: 99.56171332465277
patch: return 0 . $NUMBER$ * ( 1 . mean ( ( x - mean ) / 0 . 0 ) / 0 . 0 ) ;
rank: 325
score: 99.555078125
patch: return 0 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) / ) ) /
rank: 325
score: 99.53926142939815
patch: return 0 . $NUMBER$ * 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) ) /
rank: 325
score: 99.53412420099431
patch: return 0 . 0 * ( $NUMBER$ . 0 + Erf . erf ( ( x - mean ) /
rank: 325
score: 99.50099810431985
patch: if ( 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) )
rank: 325
score: 99.38768174913194
patch: return 0 cumulative CaMeL Probability ( Erf . erf ( ( x - mean ) /
rank: 325
score: 99.38191303453948
patch: if ( x < 0 . 0 + Erf . erf ( ( x - mean )
rank: 326
score: 99.56159577546296
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - 1 . 0 ) / mean ) /
rank: 326
score: 99.55472819010417
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / Double .
rank: 326
score: 99.53898111979167
patch: return 0 . $NUMBER$ * 0 . 0 * ( 1 . 0 * Erf . erf ( ( x - mean ) / $NUMBER$ . 0 /
rank: 326
score: 99.53375799005681
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / standard CaMeL Deviation ) ;
rank: 326
score: 99.50093957149622
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) .
rank: 326
score: 99.38737407483552
patch: return 0 . 0 + ( 1 , Erf . erf ( ( x - mean )
rank: 326
score: 99.38190375434027
patch: return ( 1 . $NUMBER$ / Erf . erf ( ( x - mean ) /
rank: 327
score: 99.58683829471983
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf ( $NUMBER$ . 0 ) /
rank: 327
score: 99.56153628700658
patch: return 0 . $NUMBER$ * ( 1 . 0 + mean ( ( x - mean ) /
rank: 327
score: 99.53886357060185
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) ) / 1 . 0 /
rank: 327
score: 99.53319202769886
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / $NUMBER$ ) ) ;
rank: 327
score: 99.50084339488636
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ?
rank: 327
score: 99.3872429342831
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( (
rank: 327
score: 99.38163248697917
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . 0 )
rank: 328
score: 99.58675944010416
patch: return 0 . $NUMBER$ . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / /
rank: 328
score: 99.57364004629629
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) - $NUMBER$ . 0 ) /
rank: 328
score: 99.56128833912037
patch: return ( 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 0 . 0 ) / 0 . 0 )
rank: 328
score: 99.55428059895833
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf -
rank: 328
score: 99.53870810231855
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 +
rank: 328
score: 99.5330120584239
patch: return 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) * (
rank: 328
score: 99.38685366981908
patch: return cumulative CaMeL Probability ( ( double ) 1 . 0 + ( x - mean ) /
rank: 328
score: 99.37997000558036
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . 0
rank: 329
score: 99.49928685238487
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ) ) ;
rank: 329
score: 99.38653243215461
patch: return 0 . 0 * Erf . erf ( ( double ) Erf . erf (
rank: 329
score: 99.37980571546052
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( ) /
rank: 330
score: 99.58653041294643
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / erf $NUMBER$ . 0 ) /
rank: 330
score: 99.56105324074075
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / 0 . 1 ) /
rank: 330
score: 99.55355171535327
patch: if ( 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 330
score: 99.53817983774039
patch: return 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 ;
rank: 330
score: 99.53260869565217
patch: return Double . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / (
rank: 330
score: 99.49915986902573
patch: if ( $NUMBER$ . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) )
rank: 330
score: 99.38639322916667
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( *
rank: 330
score: 99.379345703125
patch: if ( 0 == Erf . erf ( ( x - mean )
rank: 331
score: 99.57345815805289
patch: return 0 . 0 * Erf . erf ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 331
score: 99.55353746916118
patch: return 0 . $NUMBER$ * ( ( x - mean ) / ( x - mean ) /
rank: 331
score: 99.5381591796875
patch: return 0 . $NUMBER$ * 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 )
rank: 331
score: 99.53208856997283
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) , (
rank: 331
score: 99.49884905133929
patch: return cumulative CaMeL Probability ( Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; }
rank: 331
score: 99.38550482855902
patch: double x = 1 . 0 + Erf . erf ( ( x - mean )
rank: 332
score: 99.58631963315217
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) * /
rank: 332
score: 99.55353515625
patch: return ( 0 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) ) / (
rank: 332
score: 99.53779296875
patch: return 0 . $NUMBER$ * 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 )
rank: 332
score: 99.53206734035327
patch: return Math . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / (
rank: 332
score: 99.49873490767045
patch: return cumulative CaMeL Probability ( Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 332
score: 99.38542094983552
patch: return cumulative CaMeL Probability ( Erf . Erf . erf ( ( x - mean )
rank: 332
score: 99.37801361083984
patch: return 0 . $NUMBER$ * ( 1 . read ( ( x - mean )
rank: 333
score: 99.58623395647321
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / Double . POSITIVE _ INFINITY )
rank: 333
score: 99.573388671875
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) << 0 ) /
rank: 333
score: 99.560537109375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) ( x - mean ) /
rank: 333
score: 99.55350748697917
patch: return ( 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 0 . 0 ) ) /
rank: 333
score: 99.53765625
patch: return 0 . $NUMBER$ + ( double ) ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 333
score: 99.4983154296875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) ) ; }
rank: 333
score: 99.38534385279605
patch: return this . ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 333
score: 99.37784616570724
patch: if ( ( 1 . 0 + Erf . erf ( ( x - mean ) )
rank: 334
score: 99.58615451388889
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 + $STRING$
rank: 334
score: 99.560302734375
patch: return 0 . $NUMBER$ / ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) /
rank: 334
score: 99.55347696940105
patch: return ( 0 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) ) /
rank: 334
score: 99.53763382523148
patch: return 0 . 0 * ( ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 +
rank: 334
score: 99.53181258491848
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) ? (
rank: 334
score: 99.49769502527573
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 334
score: 99.38437371504934
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x -
rank: 334
score: 99.3775570518092
patch: return cumulative CaMeL Probability ( 1 . - Erf . erf ( ( x - mean )
rank: 335
score: 99.55340576171875
patch: return 0 . 0 * ( x - 0 . 0 + Erf . erf ( ( x - mean ) /
rank: 335
score: 99.53744802167338
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 / Erf . 0 +
rank: 335
score: 99.53173828125
patch: return 0 . $NUMBER$ + ( 1 . 0 * Erf . erf ( ( x - mean )
rank: 335
score: 99.37739393446181
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf == 0 . 0 )
rank: 336
score: 99.58533245584239
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / /
rank: 336
score: 99.57307038483796
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) / 0 . $NUMBER$ ) /
rank: 336
score: 99.56004955150463
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / 0 . $NUMBER$ ) ;
rank: 336
score: 99.55337890625
patch: return $NUMBER$ . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) /
rank: 336
score: 99.53169389204545
patch: return 0 . $NUMBER$ * ( 1 . 0 ) + 0 . $NUMBER$ + ( 1 . 0 ) ;
rank: 336
score: 99.49649386935764
patch: return ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; }
rank: 336
score: 99.38389756944444
patch: double x = 0 . 0 * Erf . erf ( ( x - mean )
rank: 336
score: 99.37724223889802
patch: return 0 & ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 337
score: 99.58533203125
patch: return 0 . $NUMBER$ . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / /
rank: 337
score: 99.57298932756696
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ) / ( 1 . 0 + Erf . erf ) ;
rank: 337
score: 99.55985062210648
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( Erf . erf ( ( x - mean ) /
rank: 337
score: 99.5315274325284
patch: return 0 . 0 + ( 1 . 0 * Erf . erf ( ( x - mean ) /
rank: 337
score: 99.49637276785714
patch: if ( 0 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) {
rank: 337
score: 99.37712545955883
patch: return 0 . $NUMBER$ * ( 1 . get ( x - mean ) / (
rank: 338
score: 99.58523763020834
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / Erf . erf ( ) ) /
rank: 338
score: 99.55973307291667
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double - mean ) / 0 . 0 ) )
rank: 338
score: 99.55286661783855
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / 0 . mean ) ) /
rank: 338
score: 99.53725405092592
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . $NUMBER$ / $NUMBER$
rank: 338
score: 99.53141645951705
patch: return 1 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) /
rank: 338
score: 99.49580652573529
patch: return 0 . $NUMBER$ * ( 0 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * 0 . 0 ) ) ) ;
rank: 338
score: 99.38376752068015
patch: return ( ( Double ) Erf . erf ( ( x - mean ) /
rank: 338
score: 99.37636431525735
patch: return 0 . $NUMBER$ * ( 1 . read ( ( x - mean ) /
rank: 339
score: 99.58512931034483
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 + mean ) /
rank: 339
score: 99.55954811789773
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ( (
rank: 339
score: 99.5528231534091
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( Float - mean ) /
rank: 339
score: 99.53719889322916
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 / $NUMBER$ . 0 )
rank: 339
score: 99.53114536830357
patch: return 0 . $NUMBER$ * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) +
rank: 339
score: 99.49567727481617
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 339
score: 99.37632242838542
patch: return 0 . $NUMBER$ * ( 1 . get 0 ( ( x - mean ) /
rank: 340
score: 99.58497971754808
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) / erf
rank: 340
score: 99.5726787860577
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf mean ) /
rank: 340
score: 99.55946180555556
patch: return 0 . $NUMBER$ * ( 1 . 1 + Erf . erf ( ( x - mean ) / 0 . 0 ) /
rank: 340
score: 99.5526455965909
patch: return 0 . $NUMBER$ * ( 1 . 0 , Erf . erf ( ( x - mean ) /
rank: 340
score: 99.53110139266305
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) || (
rank: 340
score: 99.49458582261029
patch: return ( 0 . - Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 340
score: 99.3833869485294
patch: return ( ( double ) ( Erf . erf ( ( x - mean )
rank: 340
score: 99.37571207682292
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 * Erf . erf (
rank: 341
score: 99.58473488136575
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / double . 0 ) /
rank: 341
score: 99.57264539930556
patch: return ( 1 . 0 + 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 341
score: 99.55941659432871
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 1 ) )
rank: 341
score: 99.55259765625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) ) / mean )
rank: 341
score: 99.53687633167614
patch: return ( 0 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 +
rank: 341
score: 99.53076171875
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ * Erf . erf ( ( x - mean )
rank: 341
score: 99.49424833409927
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * 0 . 0 ) ) ) ;
rank: 341
score: 99.3833869485294
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x + mean )
rank: 341
score: 99.3753597861842
patch: if ( x > 0 . 0 + Erf . erf ( ( x - mean )
rank: 342
score: 99.57253592354911
patch: return 0 . $NUMBER$ * Erf . erf ( Erf . erf ( ( x - mean ) / 1 . 0 ) ) /
rank: 342
score: 99.55925958806819
patch: return 0 . 0 * Erf . erf ( ( x - mean ) / 0 . 0 ) ;
rank: 342
score: 99.53685735887096
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / 0 . 0 /
rank: 342
score: 99.53038194444444
patch: return 0 . $NUMBER$ * ( 1 . 0 ) + ( 1 . $NUMBER$ ) ;
rank: 342
score: 99.49413344439338
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * standard CaMeL Deviation ) ) ) ;
rank: 342
score: 99.38274787454044
patch: return 1 . 0 * ( Erf . erf ( ( x - mean )
rank: 343
score: 99.58446502685547
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) / Erf . erf (
rank: 343
score: 99.57249168113425
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . $NUMBER$ ) /
rank: 343
score: 99.55922629616477
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - x ) /
rank: 343
score: 99.55250950863487
patch: return 0 . $NUMBER$ * Erf . erf . erf ( ( x - mean ) /
rank: 343
score: 99.536796875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . /
rank: 343
score: 99.53000806725544
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) >> (
rank: 343
score: 99.49373133042279
patch: return $NUMBER$ . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * 0 . 0 ) ) ) ;
rank: 343
score: 99.38270327919408
patch: return 0 . $NUMBER$ * ( short ) Erf . erf ( ( x - mean )
rank: 343
score: 99.37508994654605
patch: return 0 ( 0 . 0 + Erf . erf ( ( x - mean ) /
rank: 344
score: 99.58435510706019
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x + mean ) / $NUMBER$ . 0 ) /
rank: 344
score: 99.5720847800926
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) ) . erf ( ( x - mean ) /
rank: 344
score: 99.55250084918478
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double - mean ) / (
rank: 344
score: 99.53673299153645
patch: return 0 . $NUMBER$ * 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 344
score: 99.52982003348214
patch: return 0 . $NUMBER$ + ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 344
score: 99.4937041311553
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( this . $NUMBER$ . 0 ) ) ) ; }
rank: 344
score: 99.38222369025735
patch: double ( 0 . 0 + Erf . erf ( ( x - mean )
rank: 344
score: 99.37388851768092
patch: return - ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) /
rank: 345
score: 99.584091796875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / $NUMBER$ ) ;
rank: 345
score: 99.57203892299107
patch: return ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / 0 . 0 ) / 1 . 0 ) /
rank: 345
score: 99.55908203125
patch: return ( 1 . $NUMBER$ * 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 345
score: 99.55233101222827
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / / Erf . erf (
rank: 345
score: 99.53659493582589
patch: return ( 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 345
score: 99.52981700067934
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) , (
rank: 345
score: 99.49324079241072
patch: return ( $NUMBER$ . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 345
score: 99.38150185032895
patch: return ( ( double ) Erf . cumulative CaMeL Probability ( ( x - mean ) /
rank: 345
score: 99.37382507324219
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf $NUMBER$
rank: 346
score: 99.5840476707176
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . 0 + Erf . erf ( ( x - mean ) / /
rank: 346
score: 99.57199435763889
patch: return 0 . $NUMBER$ * Erf . erf ( Erf . erf ( ( x - mean ) / 1 . $NUMBER$ ) /
rank: 346
score: 99.55898649796195
patch: else return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 346
score: 99.5521952311198
patch: return ( 1 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( x - mean ) /
rank: 346
score: 99.53653971354167
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( Double . MIN _ VALUE ) /
rank: 346
score: 99.52971085258152
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) : (
rank: 346
score: 99.49293428308823
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * 0 . $NUMBER$ ) ) ) ;
rank: 346
score: 99.38129021139706
patch: return 0 . 1 * Erf . erf ( ( x - mean ) /
rank: 347
score: 99.58374895368304
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / /
rank: 347
score: 99.57186226222827
patch: return ( 0 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) /
rank: 347
score: 99.55881980613425
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) / 0 . 0 ) )
rank: 347
score: 99.53644205729167
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . $NUMBER$
rank: 347
score: 99.52970747514205
patch: return 1 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 347
score: 99.49270368303571
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( standard CaMeL Deviation * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) )
rank: 347
score: 99.38123994715073
patch: double ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 347
score: 99.37318179481908
patch: return ( 1 . 0 * Erf . erf ( ( x - mean ) / (
rank: 348
score: 99.58363694411058
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ / ) /
rank: 348
score: 99.57167405348558
patch: return 1 . $NUMBER$ * Erf . erf ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 348
score: 99.53631998697917
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 * $NUMBER$ . 0 /
rank: 348
score: 99.5296630859375
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) * ( standard CaMeL Deviation *
rank: 348
score: 99.49167209201389
patch: return ( 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; }
rank: 348
score: 99.38115491365132
patch: return 0 . ( 1 . $NUMBER$ + Erf . erf ( ( x - mean )
rank: 348
score: 99.37315609580592
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . 0 + $NUMBER$ . 0 )
rank: 349
score: 99.5835712139423
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / 1 . 0 )
rank: 349
score: 99.5716083233173
patch: return 0 . $NUMBER$ * $NUMBER$ . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 349
score: 99.55837673611111
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . double ( ( x - mean ) / 0 . 0 ) /
rank: 349
score: 99.53617720170455
patch: return 0 . $NUMBER$ + ( 1 . 0 / Erf . erf ( ( x - mean ) /
rank: 349
score: 99.529541015625
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) ==
rank: 349
score: 99.49141322544642
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 349
score: 99.38095092773438
patch: return 0 . 0 * Erf . erf [ ( x - mean )
rank: 349
score: 99.37257893880208
patch: return 0 . $NUMBER$ * ( 1 . get 1 1 ( ( x - mean )
rank: 350
score: 99.55831344039352
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / 0 . $NUMBER$ ) /
rank: 350
score: 99.551923828125
patch: return 1 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) /
rank: 350
score: 99.536025390625
patch: return 0 . $NUMBER$ * ( double ) ( Erf . erf ( ( x - mean ) / $NUMBER$ . 0 /
rank: 350
score: 99.49110736268939
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) )
rank: 350
score: 99.38073012408088
patch: return 0 . 0 + Erf . erf ( ( x + mean ) /
rank: 350
score: 99.37252646998355
patch: return 0 . 0 * ( 1 <= Erf . erf ( ( x - mean )
rank: 351
score: 99.58311631944444
patch: return 0 . $NUMBER$ * ( 1 . 0 / Erf . erf ( ( x - mean ) / mean ) / mean )
rank: 351
score: 99.53576208043981
patch: return 0 . $NUMBER$ * 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) ) /
rank: 351
score: 99.5292736235119
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - $NUMBER$ )
rank: 351
score: 99.49016974954044
patch: return 0 . max ( Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 352
score: 99.58303598257211
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( double ) mean ) / erf ( double )
rank: 352
score: 99.5581805889423
patch: return 0 . $NUMBER$ * double . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 352
score: 99.5515625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( ) /
rank: 352
score: 99.53571319580078
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) / $NUMBER$ . 0 ) ;
rank: 352
score: 99.52919699928977
patch: return 0 . $NUMBER$ * ( 1 . 0 + erf . erf ( ( x - mean ) / (
rank: 352
score: 99.48982508042279
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation != 0 . 0 ) ) ) ;
rank: 352
score: 99.38052029079861
patch: return ( 1 . 0 + Erf . erf ( ( x - mean ) *
rank: 353
score: 99.58292933872768
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) / /
rank: 353
score: 99.57058848505434
patch: return ( 1 . $NUMBER$ * Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 353
score: 99.55808738425925
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - 0 . $NUMBER$ ) / mean ) /
rank: 353
score: 99.55150305706522
patch: return 0 . 0 * ( Erf . erf ( ( x - mean ) / 0 . 0 ) /
rank: 353
score: 99.5355712890625
patch: return 0 . $NUMBER$ * 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) / $NUMBER$ . 0 /
rank: 353
score: 99.52897505326705
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) ,
rank: 353
score: 99.48915728400735
patch: return 0 . 0 * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; ;
rank: 354
score: 99.58290452223558
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ) / / /
rank: 354
score: 99.57049005681819
patch: return 0 . $NUMBER$ + Erf . erf ( Erf . erf ( ( x - mean ) /
rank: 354
score: 99.55796305338542
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / length /
rank: 354
score: 99.55130004882812
patch: return 0 . $NUMBER$ * Erf ( Erf . erf ( ( x - mean ) /
rank: 354
score: 99.53556002103366
patch: return 0 . $NUMBER$ * 0 . 0 * ( 1 . 0 / Erf . erf ( ( x - mean ) /
rank: 354
score: 99.52877674932066
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) ) ?
rank: 354
score: 99.48853278882575
patch: return ( 0 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) )
rank: 355
score: 99.58288153286638
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ / 1 . 0 ) /
rank: 355
score: 99.55785228587963
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . $NUMBER$ ) )
rank: 355
score: 99.55124918619792
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / x ) / mean ) /
rank: 355
score: 99.52867060122283
patch: return 0 . $NUMBER$ * ( 1 . 0 ) / Erf . erf ( ( x - mean ) /
rank: 355
score: 99.48819056919643
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 355
score: 99.37834087171052
patch: return 0 . 0 + ( x - Erf . erf ( ( x - mean )
rank: 355
score: 99.37066650390625
patch: return 0 . 0 * ( 1 . 0 + 1 == Erf . erf (
rank: 356
score: 99.58286696213942
patch: return 0 . $NUMBER$ * Math . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 356
score: 99.57022094726562
patch: try { return 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 356
score: 99.55759006076389
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . 0 ) / Erf . erf ( ( x - mean ) ;
rank: 356
score: 99.53550368088942
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ,
rank: 356
score: 99.52863103693181
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) ==
rank: 356
score: 99.48808361235119
patch: return cumulative CaMeL Probability ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 356
score: 99.37818739149306
patch: return ( $NUMBER$ . $NUMBER$ + Erf . erf ( ( x - mean ) /
rank: 357
score: 99.58270263671875
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 357
score: 99.55758666992188
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - float ) mean ) /
rank: 357
score: 99.55094047214673
patch: if ( 1 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 357
score: 99.52839799360795
patch: return 0 . $NUMBER$ * ( 1 . 0 ) + 1 . $NUMBER$ + ( 1 . 0 ) ;
rank: 357
score: 99.48797052556819
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * 0 . 0 ) ) ;
rank: 357
score: 99.378173828125
patch: return ( $NUMBER$ . $NUMBER$ + Erf . erf ( ( x - mean )
rank: 357
score: 99.37015787760417
patch: if ( x < 0 + Erf . erf ( ( x - mean ) /
rank: 358
score: 99.58261213631465
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / Double . MAX _ VALUE ) /
rank: 358
score: 99.55753580729167
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( double ) mean ) / 0 . 0 ) /
rank: 358
score: 99.55076171875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x < mean ) + mean ) /
rank: 358
score: 99.48738367417279
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * 0 . 1 ) ) ) ;
rank: 358
score: 99.3779296875
patch: return 0 . 0 * ( - Erf . erf ( ( x - mean ) /
rank: 358
score: 99.36995656866776
patch: return 0 . $NUMBER$ * ( 1 . abs 1 1 ( ( x - mean ) /
rank: 359
score: 99.58254478717673
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ / $NUMBER$ . 0 ) /
rank: 359
score: 99.56995985243056
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . $NUMBER$ ) ;
rank: 359
score: 99.55751389723558
patch: return 0 . 0 * 1 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 359
score: 99.55063698508523
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( Integer - mean ) /
rank: 359
score: 99.53530738467262
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / $NUMBER$ . 0 +
rank: 359
score: 99.52819146050348
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( 1 . 0 ) ) ;
rank: 359
score: 99.48701746323529
patch: return ( 0 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 359
score: 99.37788899739583
patch: return 0 . $NUMBER$ * ( 1 . ( ( x - mean )
rank: 359
score: 99.36981201171875
patch: try { return 0 . $NUMBER$ * Erf . erf ( ( x - mean )
rank: 360
score: 99.58252857349537
patch: return 0 . $NUMBER$ * double 1 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 360
score: 99.56967050057871
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - 0 ) / 1 . 0 ) /
rank: 360
score: 99.53513405539773
patch: return 0 . $NUMBER$ / ( 1 . 0 * Erf . erf ( ( x - mean ) /
rank: 360
score: 99.48639993106617
patch: return Integer . max ( Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 360
score: 99.37771426930146
patch: return 0 . 0 ( Erf . erf ( ( x - mean ) /
rank: 361
score: 99.5824609375
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / Erf . erf ( ) / /
rank: 361
score: 99.56944444444444
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) >> 0 . 0 ) /
rank: 361
score: 99.5573260967548
patch: return 1 . $NUMBER$ * 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 361
score: 99.5504150390625
patch: return 0 . 0 * Erf ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 361
score: 99.53511555989583
patch: return 0 . $NUMBER$ * 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 /
rank: 361
score: 99.52815385298295
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) >
rank: 361
score: 99.48591164981617
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation <= 0 . 0 ) ) ) ;
rank: 361
score: 99.37764057360198
patch: return 0 . 0 + Erf . erf ( ( int ) Erf . erf (
rank: 361
score: 99.36973812705592
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . 0 + 1 . 0 )
rank: 362
score: 99.58244077620968
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / 0 . 0 + Erf . erf (
rank: 362
score: 99.56934497974537
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) , 1 . 0 ) /
rank: 362
score: 99.55026245117188
patch: return ( return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 362
score: 99.53506469726562
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - 0 . $NUMBER$ ) /
rank: 362
score: 99.5277789572011
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) ? (
rank: 362
score: 99.48555715460526
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ) ) ;
rank: 362
score: 99.37726907169117
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean 1 .
rank: 362
score: 99.36953555836396
patch: return ( 0 . $NUMBER$ / Erf . erf ( ( x - mean )
rank: 363
score: 99.58236258370536
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 + mean )
rank: 363
score: 99.56931785300925
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) * 1 . 0 ) /
rank: 363
score: 99.55722837094908
patch: return 0 . $NUMBER$ * ( 1 . 0 + ! 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 363
score: 99.550146484375
patch: return 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ) ) /
rank: 363
score: 99.53493088942308
patch: return 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 +
rank: 363
score: 99.52773902529762
patch: return 0 . 0 * ( $NUMBER$ . 0 + Erf . erf ( ( x - mean )
rank: 363
score: 99.48550502232143
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ; }
rank: 363
score: 99.36942331414474
patch: return 0 ( ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 364
score: 99.58235990084134
patch: return 0 . $NUMBER$ * / ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) /
rank: 364
score: 99.56929837740384
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . 0 + Erf . erf ( ( x - mean ) *
rank: 364
score: 99.55716507523148
patch: return 0 . $NUMBER$ ? ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) /
rank: 364
score: 99.55008067255434
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double - mean ) ) /
rank: 364
score: 99.53477260044643
patch: return 0 . $NUMBER$ x $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 /
rank: 364
score: 99.52773215553977
patch: return 0 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) ==
rank: 364
score: 99.37706801470588
patch: return ( ( int ) ( Erf . erf ( ( x - mean )
rank: 365
score: 99.58229417067308
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / / $NUMBER$ ) /
rank: 365
score: 99.56918334960938
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / $NUMBER$ ) /
rank: 365
score: 99.55710177951389
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 365
score: 99.5347412109375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 / Erf . 0
rank: 365
score: 99.5273968240489
patch: return 0 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) ? (
rank: 365
score: 99.48380533854167
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; }
rank: 365
score: 99.3688900596217
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf ( x - mean ) /
rank: 366
score: 99.58197021484375
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / /
rank: 366
score: 99.56917317708333
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) << 0 . 0 ) /
rank: 366
score: 99.55705656828704
patch: return 0 . 0 * ( 1 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 366
score: 99.54975818452381
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) - mean ) /
rank: 366
score: 99.534716796875
patch: return 0 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0
rank: 366
score: 99.52731190557066
patch: return 0 . $NUMBER$ * 1 * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) .
rank: 366
score: 99.48375746783088
patch: return ( 1 . - Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 366
score: 99.3685531616211
patch: return 0 . $NUMBER$ * ( 1 . max ( ( x - mean )
rank: 367
score: 99.58193969726562
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . get ( ( x - mean ) / mean (
rank: 367
score: 99.54957116168478
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / get
rank: 367
score: 99.53461100260417
patch: return 0 . $NUMBER$ * ( 1 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0
rank: 367
score: 99.52726236979167
patch: return 0 . 1 + Erf . erf ( ( x - mean ) / (
rank: 367
score: 99.48370720358456
patch: return x . equals ( Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 367
score: 99.36824544270833
patch: return 0 . 0 * ( 1 . min . erf ( ( x - mean )
rank: 368
score: 99.58189561631944
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( 1 . 0 +
rank: 368
score: 99.55687537560097
patch: return 0 . $NUMBER$ * 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) /
rank: 368
score: 99.53459930419922
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 / $NUMBER$
rank: 368
score: 99.48368908110119
patch: return 0 . $NUMBER$ * ( 1 . 0 * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 368
score: 99.37603438527961
patch: return 0 . ( 0 . 0 + Erf . erf ( ( x - mean )
rank: 369
score: 99.58189039963942
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf ) / (
rank: 369
score: 99.56878662109375
patch: return ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) / 1 . 0 ) /
rank: 369
score: 99.55678982204861
patch: return ( 1 . $NUMBER$ * Erf . erf ( ( x - mean ) ;
rank: 369
score: 99.54908336292614
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 1 . 0 ) *
rank: 369
score: 99.53453650841347
patch: return ( 1 . 0 + Erf . erf ( ( int ) Erf . erf ( ( x - mean ) /
rank: 369
score: 99.48363539751838
patch: return 0 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * 0 . 0 ) ) ) ;
rank: 369
score: 99.37550184461806
patch: return ( 1 . 0 + ( Erf . erf ( ( x - mean )
rank: 369
score: 99.36776572779605
patch: return 0 . $NUMBER$ * ( 1 . abs 1 ( ( x - mean ) / (
rank: 370
score: 99.58188161542338
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / 1 . 0 + Erf . erf (
rank: 370
score: 99.56873668323864
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( float ) mean ) /
rank: 370
score: 99.55647416548295
patch: return 0 . $NUMBER$ * ( 1 . 0 | Erf . erf ( ( x - mean ) /
rank: 370
score: 99.54905192057292
patch: return ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) ) /
rank: 370
score: 99.5344970703125
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 / 1 . 0 +
rank: 370
score: 99.52674932065217
patch: return 0 . $NUMBER$ * ( 1 . 0 , Erf . erf ( ( x - mean ) / (
rank: 370
score: 99.48304268973214
patch: return ( $NUMBER$ . $NUMBER$ + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 370
score: 99.37546793619792
patch: return 0 . 0 + ( ( Erf . erf ( ( x - mean )
rank: 370
score: 99.36720677425987
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 <= Erf . erf ( (
rank: 371
score: 99.58175223214286
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / $NUMBER$ / $NUMBER$ . 0 /
rank: 371
score: 99.56850405092592
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) == 0 . 0 ) /
rank: 371
score: 99.53445095486111
patch: return 0 . $NUMBER$ * ( 1 . 0 / Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 371
score: 99.48298196231617
patch: return 0 . $NUMBER$ * ( erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 371
score: 99.36720275878906
patch: return 0 . 0 * ( 1 . get ( ( x - mean )
rank: 372
score: 99.58170835433468
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / Erf . double CaMeL Value ( ) )
rank: 372
score: 99.55625180844908
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / Double . 0 ) /
rank: 372
score: 99.54898071289062
patch: return ( return 0 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 372
score: 99.53431285511364
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / $NUMBER$ . 0 + Erf . erf ( ) / $NUMBER$ . 0 /
rank: 372
score: 99.5265582540761
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) > (
rank: 372
score: 99.48247931985294
patch: return 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * 0 . 0 ) ) ) ;
rank: 372
score: 99.37533230251736
patch: return return 0 . 0 * ( Erf . erf ( ( x - mean )
rank: 372
score: 99.36701795789931
patch: if ( 0 == 1 + Erf . erf ( ( x - mean ) /
rank: 373
score: 99.58167860243056
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ / $NUMBER$ . 0
rank: 373
score: 99.56831416377315
patch: return 1 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) /
rank: 373
score: 99.54895550271739
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( x - mean ) )
rank: 373
score: 99.52633231026786
patch: return 0 . $NUMBER$ * 1 * ( Erf . erf ( ( x - mean ) / (
rank: 373
score: 99.482421875
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( 1 . 0 ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; }
rank: 373
score: 99.375244140625
patch: return 0 . 0 * ( * Erf . erf ( ( x - mean ) /
rank: 373
score: 99.36676384420956
patch: return ( ( double - Erf . erf ( ( x - mean ) /
rank: 374
score: 99.58157913773148
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( double - mean ) / $NUMBER$ . 0 ) /
rank: 374
score: 99.5682960792824
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) % 0 . 0 ) /
rank: 374
score: 99.55602088341347
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . $NUMBER$ (
rank: 374
score: 99.53423200334821
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ ) / 1 . 0
rank: 374
score: 99.52534816576087
patch: return $NUMBER$ . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / (
rank: 374
score: 99.4823974609375
patch: return 0 . 0 * ( ( 1 . 0 ) / ( $NUMBER$ . 0 ) ) ;
rank: 374
score: 99.36669243706598
patch: return ( return 0 . $NUMBER$ + Erf . erf ( ( x - mean )
rank: 375
score: 99.58154296875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( int ) mean ) / mean )
rank: 375
score: 99.56825608473558
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . $NUMBER$ )
rank: 375
score: 99.54865056818181
patch: return 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / 0 . $NUMBER$ ) /
rank: 375
score: 99.5342041015625
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 / 1 . 0 /
rank: 375
score: 99.52515709918478
patch: return 0 . $NUMBER$ * ( 1 . 0 > Erf . erf ( ( x - mean ) / (
rank: 375
score: 99.48194795496323
patch: return null . equals ( Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 375
score: 99.37510052849265
patch: return 0 . 1 * ( Erf . erf ( ( x - mean )
rank: 375
score: 99.36629909939236
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 / 1 . 0 ) ;
rank: 376
score: 99.58130724676724
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / Erf . erf ( $STRING$ )
rank: 376
score: 99.56815011160714
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / * 1 . 0 ) /
rank: 376
score: 99.55581430288461
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( 0 . 0 ( ( x - mean ) /
rank: 376
score: 99.54856178977273
patch: return 0 . 0 * Erf . erf ( ( x - mean ) / 0 . mean ) /
rank: 376
score: 99.53409517728366
patch: return 0 . 0 * ( 0 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 /
rank: 376
score: 99.52513212316177
patch: return 0 . 1 + Erf . erf ( ( x - mean ) /
rank: 376
score: 99.48192641314338
patch: return return 0 . 0 * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 376
score: 99.36613633897569
patch: return 0 . $NUMBER$ * ( 1 . class . erf ( ( x - mean )
rank: 377
score: 99.58122306034483
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( 1 . 0 ) ) /
rank: 377
score: 99.56808035714286
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . $NUMBER$ ) ) /
rank: 377
score: 99.55578161168981
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean , 0 . 0 ) ) /
rank: 377
score: 99.54854152513587
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( Erf . erf ( ( x - mean ) /
rank: 377
score: 99.52512428977273
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) |
rank: 377
score: 99.4817253561581
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ;
rank: 377
score: 99.37407090928819
patch: return ( return 0 . $NUMBER$ * Erf . erf ( ( x - mean )
rank: 377
score: 99.36583794487848
patch: if ( return 0 . 0 + Erf . erf ( ( x - mean )
rank: 378
score: 99.58119419642857
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / / double . 0 ) /
rank: 378
score: 99.56797724184783
patch: return ( 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / 1 . 0 ) /
rank: 378
score: 99.53404822716347
patch: return 0 . $NUMBER$ / ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 )
rank: 378
score: 99.48130580357143
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf / ( $NUMBER$ . 0 ) ) ;
rank: 378
score: 99.373046875
patch: return cumulative CaMeL Probability ( ( x . erf ( ( x - mean )
rank: 378
score: 99.36581260279605
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 <= Erf . erf ( )
rank: 379
score: 99.58106372974537
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( double ) mean ) / Erf . erf (
rank: 379
score: 99.56788917824075
patch: return 0 . $NUMBER$ * 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) ) /
rank: 379
score: 99.54784094769022
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( x - erf ) /
rank: 379
score: 99.53402596932871
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) +
rank: 379
score: 99.5246249112216
patch: return 0 . 0 + Erf . erf ( ( x - mean ) / ( $NUMBER$ . 0 )
rank: 379
score: 99.48036104090073
patch: return - 0 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 380
score: 99.581015625
patch: return 0 . 0 * ( 1 . 0 + Erf . get ( ( x - mean ) / mean ) /
rank: 380
score: 99.56785365513393
patch: return ( 1 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) /
rank: 380
score: 99.55532949942129
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( 1 . 0 + Erf . erf ( (
rank: 380
score: 99.53399447737068
patch: return 0 . $NUMBER$ * Erf . erf ( ( int ) Erf . erf ( ( x - mean ) / $NUMBER$ . 0 /
rank: 380
score: 99.52445845170455
patch: return 0 . $NUMBER$ * ( . 0 + Erf . erf ( ( x - mean ) / (
rank: 380
score: 99.48014562270221
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * 0 . 0 ) ) ) ;
rank: 380
score: 99.37258911132812
patch: return 0 . $NUMBER$ * Erf . ( ( x - mean ) /
rank: 381
score: 99.58099365234375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) / x ) /
rank: 381
score: 99.56781877790179
patch: return ( 1 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) /
rank: 381
score: 99.5548807779948
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / 0 . 0 ) ) ;
rank: 381
score: 99.54750127377717
patch: return 0 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 381
score: 99.52444458007812
patch: return ( 1 . 0 + Erf . erf ( ( x - mean ) ) ) ;
rank: 381
score: 99.4795150756836
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf ) ; }
rank: 381
score: 99.3724300986842
patch: double x = 0 . 0 + Erf . erf ( ( x - mean ) /
rank: 381
score: 99.36458547491776
patch: return 0 . $NUMBER$ * ( 1 . get 0 1 ( ( x - mean ) /
rank: 382
score: 99.58082798549107
patch: return 0 . $NUMBER$ * / ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 382
score: 99.55474609375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double - mean ) - mean ) /
rank: 382
score: 99.54722528872283
patch: return 0 . 0 * ( Erf . erf ( ( x - mean ) / 1 . 0 ) /
rank: 382
score: 99.52442467730978
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) || (
rank: 382
score: 99.47935084292763
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( standard CaMeL Deviation * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; }
rank: 382
score: 99.36443770559211
patch: return 0 . 0 * ( 1 . min . erf ( ( x - mean ) /
rank: 383
score: 99.54710896809895
patch: return ( 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / 0 . 0 ) ) /
rank: 383
score: 99.53356481481481
patch: return 0 . $NUMBER$ * ( ( 0 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 +
rank: 383
score: 99.52437160326087
patch: return 0 . $NUMBER$ * ( ( 1 . 0 * Erf . erf ( ( x - mean ) /
rank: 383
score: 99.47926958869485
patch: return $STRING$ . append ( Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 383
score: 99.37199964021382
patch: return $STRING$ . cumulative CaMeL Probability ( ( x . erf ( ( x - mean ) /
rank: 384
score: 99.5806884765625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) * /
rank: 384
score: 99.56760886863425
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) - 1 . $NUMBER$ ) /
rank: 384
score: 99.55472366898148
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / 0 . $NUMBER$ ) /
rank: 384
score: 99.54703776041667
patch: return 0 . $NUMBER$ * Erf . erf ( $STRING$ + Erf . erf ( ( x - mean ) /
rank: 384
score: 99.53353515625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 1
rank: 384
score: 99.52437160326087
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ?
rank: 384
score: 99.47903689822635
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) )
rank: 384
score: 99.37192670036765
patch: return $NUMBER$ . $NUMBER$ * Erf . erf ( ( x - mean ) /
rank: 385
score: 99.58066969651442
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / / $NUMBER$ / /
rank: 385
score: 99.53335336538461
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . / $NUMBER$
rank: 385
score: 99.52427455357143
patch: return 0 . $NUMBER$ * ( 1 . 0 + erf . erf ( ( x - mean ) /
rank: 385
score: 99.47892252604167
patch: return ( 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; }
rank: 386
score: 99.58034104567308
patch: return 0 . $NUMBER$ * double ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) /
rank: 386
score: 99.56740500710227
patch: return 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / 0 . 0 ) ;
rank: 386
score: 99.55459112870066
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( mean ) /
rank: 386
score: 99.5465087890625
patch: return 0 . $NUMBER$ * $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 386
score: 99.5333251953125
patch: return 0 . $NUMBER$ * 0 . $NUMBER$ * ( 1 . 0 / Erf . erf ( ( x - mean ) /
rank: 386
score: 99.5240811434659
patch: return 0 . 1 * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation *
rank: 386
score: 99.47886029411765
patch: return 0 . $NUMBER$ * ( $NUMBER$ . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * 0 . 0 ) ) ) ;
rank: 386
score: 99.37174479166667
patch: return return ( 0 . 0 + Erf . erf ( ( x - mean )
rank: 386
score: 99.36024385340073
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( 1 . 0 ) /
rank: 387
score: 99.53324068509616
patch: return 0 . $NUMBER$ / ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 +
rank: 387
score: 99.52396065848214
patch: return 0 . 0 + ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 387
score: 99.47827808277027
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( $STRING$ ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 387
score: 99.37146714154412
patch: return 0 . $NUMBER$ ( Erf . erf ( ( x - mean ) /
rank: 387
score: 99.35999820106908
patch: return 0 . 0 * ( 1 . max . erf ( ( x - mean ) /
rank: 388
score: 99.58015625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf ) *
rank: 388
score: 99.55435293692129
patch: return 0 . $NUMBER$ | ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) /
rank: 388
score: 99.54623413085938
patch: return ( 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / ( x - mean ) /
rank: 388
score: 99.53323567708334
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 / $NUMBER$ . 0 /
rank: 388
score: 99.52392578125
patch: return ( 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 388
score: 99.47786218979779
patch: return 0 . - ( Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 388
score: 99.37094455295139
patch: return 0 . $NUMBER$ * 1 , Erf . erf ( ( x - mean )
rank: 388
score: 99.35997772216797
patch: return 0 . $NUMBER$ * ( 1 . min ( ( x - mean )
rank: 389
score: 99.580078125
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / / ( double )
rank: 389
score: 99.55434348366477
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) x ) /
rank: 389
score: 99.5461758700284
patch: return ( 0 . $NUMBER$ * 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 389
score: 99.5329120342548
patch: return 0 . $NUMBER$ + 1 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 389
score: 99.52382114955357
patch: return 0 . 0 * ( 0 . 0 + Erf . erf ( ( x - mean )
rank: 389
score: 99.4775749655331
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation >= 0 . 0 ) ) ) ;
rank: 389
score: 99.35995965254934
patch: return 0 . $NUMBER$ * Erf . erf ( ( 1 == Erf . erf (
rank: 390
score: 99.57989971454327
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ( ) )
rank: 390
score: 99.56702190896739
patch: return ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / 0 . $NUMBER$ ) /
rank: 390
score: 99.5460140830592
patch: return 0 . $NUMBER$ * ( x - 0 . 0 + ( x - mean ) /
rank: 390
score: 99.53289325420673
patch: return 0 . $NUMBER$ * 0 . 0 * ( 1 . 0 * Erf . erf ( ( x - mean ) /
rank: 390
score: 99.5232821377841
patch: return 0 . 0 + Erf . erf ( ( x - mean ) / ( 1 . 0 )
rank: 390
score: 99.47748325892857
patch: return ( 0 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( 1 . 0 ) ) ) ) ;
rank: 390
score: 99.37068006727431
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean 1 .
rank: 390
score: 99.35940069901316
patch: if ( $STRING$ . equals ( Erf . erf ( ( x - mean ) / (
rank: 391
score: 99.579833984375
patch: double 0 . $NUMBER$ . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 391
score: 99.55419921875
patch: return ( 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) ;
rank: 391
score: 99.54573197798295
patch: return 0 . erf * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 391
score: 99.5328515625
patch: return 0 . $NUMBER$ * ( double ) ( 1 . 0 * Erf . erf ( ( x - mean ) /
rank: 391
score: 99.47735236672794
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; else
rank: 391
score: 99.36998155381944
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( int
rank: 391
score: 99.35923936631944
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf == 0 . 0 +
rank: 392
score: 99.57976825420673
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf ) / /
rank: 392
score: 99.56680961277173
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( mean - mean ) /
rank: 392
score: 99.55418043870192
patch: return 0 . $NUMBER$ * 1 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) ;
rank: 392
score: 99.5456034342448
patch: return ( return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 392
score: 99.52309782608695
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) ) ,
rank: 392
score: 99.47730848524306
patch: return 0 . $NUMBER$ * ( 1 . 0 * ( 1 . 0 ) ) ;
rank: 392
score: 99.35922080592105
patch: return ( ( 1 . 0 ) + Erf . erf ( ( x - mean )
rank: 393
score: 99.579697265625
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( double ) mean ) / ( double )
rank: 393
score: 99.54552641369048
patch: return 0 . 0 * Erf . erf ( ( x - mean ) / 0 . 0 )
rank: 393
score: 99.53270580150463
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( int ) Erf . erf ( ( x - mean ) ) /
rank: 393
score: 99.47715541294643
patch: return 0 . $NUMBER$ * ( 1 . 0 + standard CaMeL Deviation * Math . sqrt ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 393
score: 99.36912027994792
patch: return 0 . $NUMBER$ * ( 1 . Math . erf ( ( x - mean )
rank: 393
score: 99.35906304253473
patch: return ( 1 . 0 / Erf . erf ( ( x - mean ) /
rank: 394
score: 99.57968026620371
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / . 0 ) / /
rank: 394
score: 99.56675502232143
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) ) / $NUMBER$ . 0 ) /
rank: 394
score: 99.5326912172379
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) / 1 . 0 / Erf . 0 /
rank: 394
score: 99.52295983355978
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( new x - mean ) ) ;
rank: 394
score: 99.47714412913604
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0
rank: 394
score: 99.36888292100694
patch: return new double [ 0 + Erf . erf ( ( x - mean ) /
rank: 394
score: 99.35879337086396
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . 0 ) / (
rank: 395
score: 99.57967122395833
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) / mean ) / mean )
rank: 395
score: 99.566591796875
patch: return 0 . $NUMBER$ * Erf . erf ( Erf . erf ( ( x - mean ) << 0 ) /
rank: 395
score: 99.55361147280092
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) -
rank: 395
score: 99.54414876302083
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / / ( x / mean ) /
rank: 395
score: 99.53262532552084
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( int ) Erf . erf ( ( x - mean ) /
rank: 395
score: 99.52271569293478
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x + mean ) / (
rank: 395
score: 99.47710822610294
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ?
rank: 395
score: 99.36870374177632
patch: return 0 . 0 + ( 1 + Erf . erf ( ( x - mean )
rank: 396
score: 99.57965557391827
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf $NUMBER$ / /
rank: 396
score: 99.56658935546875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) ) / 0 . 0 ) /
rank: 396
score: 99.5535888671875
patch: return 0 . 0 * 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 396
score: 99.54408772786458
patch: return 0 . 0 * Erf . erf ( ( x - mean ) / ( x - mean ) ) /
rank: 396
score: 99.53251591435185
patch: return ( 0 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 +
rank: 396
score: 99.52248216711956
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) << (
rank: 396
score: 99.47688598632813
patch: return ( 0 . $NUMBER$ * ( 1 . 0 ) / ( $NUMBER$ . 0 ) ) ;
rank: 396
score: 99.36866670496323
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( byte - mean )
rank: 396
score: 99.35821892233456
patch: return 0 . $NUMBER$ * ( 1 . clone ( ( x - mean ) /
rank: 397
score: 99.57964877424568
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf ( 0 . 0 ) /
rank: 397
score: 99.56653284143519
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) - 0 . $NUMBER$ ) /
rank: 397
score: 99.55337289663461
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - Erf . erf ( ( x - mean ) ) /
rank: 397
score: 99.54393469769022
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 0 . 0 ) ) /
rank: 397
score: 99.52238325639205
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) <=
rank: 397
score: 99.47633763363487
patch: return cumulative CaMeL Probability ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 397
score: 99.36846923828125
patch: return 0 . 0 * ( - Erf . erf ( ( x - mean )
rank: 397
score: 99.35796440972223
patch: return 0 . $NUMBER$ * ( 1 . get $NUMBER$ ( ( x - mean ) /
rank: 398
score: 99.552978515625
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . mean ) /
rank: 398
score: 99.54378255208333
patch: return 0 . $NUMBER$ * ( x - 0 . $NUMBER$ + Erf . erf ( ( x - mean ) /
rank: 398
score: 99.532060546875
patch: return ( double ) ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 /
rank: 398
score: 99.522216796875
patch: return 0 . 0 + ( 1 . 0 + Erf . erf ( ( x + mean ) / (
rank: 398
score: 99.4761603860294
patch: return 0 . 0 * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * 0 . 0 ) ) ) ;
rank: 398
score: 99.36844675164474
patch: return ( return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) /
rank: 398
score: 99.35686577690973
patch: return 0 . $NUMBER$ * ( 1 . get CaMeL Type ( ) - mean ) ;
rank: 399
score: 99.57944742838542
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) / mean (
rank: 399
score: 99.5527734375
patch: return 0 . $NUMBER$ * ( double ) ( 1 . 0 + Erf . erf ( ( x - mean ) ;
rank: 399
score: 99.532021484375
patch: return 0 . $NUMBER$ / ( double ) ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 399
score: 99.52159052309783
patch: return 1 . $NUMBER$ * ( $NUMBER$ . 0 + Erf . erf ( ( x - mean ) / (
rank: 399
score: 99.47594168526786
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) . ) ;
rank: 399
score: 99.36839535361842
patch: return 0 . $NUMBER$ * Erf . erf ( ( $STRING$ - Erf . erf (
rank: 399
score: 99.35565185546875
patch: return 0 . $NUMBER$ * ( 1 . contains ( x - mean ) /
rank: 400
score: 99.57941143329327
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( double ) /
rank: 400
score: 99.552734375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - 0 . 0 ( ) ) /
rank: 400
score: 99.52145253057066
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x += mean ) / (
rank: 400
score: 99.47561465992646
patch: return $NUMBER$ . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ;
rank: 400
score: 99.36809981496711
patch: return ( ( 1 . 0 + Erf . erf ( ( x - 1 ) /
rank: 400
score: 99.35500081380208
patch: return 0 . $NUMBER$ * ( 1 . super . erf ( ( x - mean )
rank: 401
score: 99.57938187210648
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) / Erf . erf (
rank: 401
score: 99.56613393930289
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 0 . 0 ) / 0 . 0 *
rank: 401
score: 99.55272498497597
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 1 (
rank: 401
score: 99.54286887428977
patch: return 0 . length / ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 401
score: 99.5319115423387
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 /
rank: 401
score: 99.52138884171195
patch: return 0 . $NUMBER$ * ( 1 . 0 && Erf . erf ( ( x - mean ) / (
rank: 401
score: 99.47557915581598
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( standard CaMeL Deviation * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 401
score: 99.36783854166667
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( /
rank: 401
score: 99.35451931423611
patch: return 0 . 0 * ( 1 . max . erf ( ( x - mean )
rank: 402
score: 99.54273522418478
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x ) / mean ) /
rank: 402
score: 99.5319073016827
patch: return 0 . $NUMBER$ + 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 402
score: 99.5213290127841
patch: return 0 . $NUMBER$ * ( ( double ) Erf . erf ( ( x - mean ) / (
rank: 402
score: 99.47552131204044
patch: else return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 402
score: 99.36752658420139
patch: return new double cumulative CaMeL Probability ( Erf . erf ( ( x - mean )
rank: 402
score: 99.35386827256944
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf $NUMBER$ / (
rank: 403
score: 99.57923302283653
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / / / / /
rank: 403
score: 99.54269409179688
patch: try { return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) /
rank: 403
score: 99.53189290364584
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( int ) Erf . erf ( ( x - 1 ) /
rank: 403
score: 99.47486787683823
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( $NUMBER$ . 0 + $NUMBER$ . 0 ) ) ) ;
rank: 403
score: 99.36750623914931
patch: return ( ( int ) Erf . erf ( ( x - mean ) / (
rank: 403
score: 99.35373942057292
patch: return 0 ( 0 . 0 + Erf . erf ( ( x - mean )
rank: 404
score: 99.57915581597223
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) )
rank: 404
score: 99.56577329282408
patch: return 0 . $NUMBER$ * 1 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) ) /
rank: 404
score: 99.54269276494566
patch: double return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 404
score: 99.53187913161058
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ * Erf . erf ( ( x - mean ) / $NUMBER$ . 0 /
rank: 404
score: 99.52115531589673
patch: return 0 . 0 + ( 1 . 0 * Erf . erf ( ( x - mean ) / (
rank: 404
score: 99.47471400669643
patch: return 0 . $NUMBER$ * ( 1 . length * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 404
score: 99.35341282894737
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( this )
rank: 405
score: 99.578935546875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / $NUMBER$ ) /
rank: 405
score: 99.565673828125
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) ) /
rank: 405
score: 99.55226440429688
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / mean ) ;
rank: 405
score: 99.54212443033855
patch: return 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ) /
rank: 405
score: 99.53183088631465
patch: double Erf = 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 /
rank: 405
score: 99.52114470108695
patch: return 0 . this * ( 1 . 0 + Erf . erf ( ( x - mean ) / (
rank: 405
score: 99.47466362847223
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * standard CaMeL Deviation . 0 ) ) ) ;
rank: 405
score: 99.36714935302734
patch: return 0 . $NUMBER$ * Erf . erf ( ( int - mean )
rank: 405
score: 99.35272538034539
patch: return ( 0 . $NUMBER$ / Erf . erf ( ( x - mean ) / (
rank: 406
score: 99.5654766376202
patch: return 1 . $NUMBER$ * ( 1 . 0 + 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 406
score: 99.54181463068181
patch: return 0 . $NUMBER$ * ( x - mean ) / 0 . $NUMBER$ * ( x - mean ) /
rank: 406
score: 99.52109596946023
patch: return ( 0 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 406
score: 99.47450884650735
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / Math . sqrt ( $NUMBER$ . 0 ) ) ) ; }
rank: 406
score: 99.36705258018092
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( $STRING$ >
rank: 406
score: 99.35220336914062
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( 1 == Erf
rank: 407
score: 99.5787353515625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / mean ) / /
rank: 407
score: 99.56486906828704
patch: return 0 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 407
score: 99.55225513599537
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . max ) /
rank: 407
score: 99.54160378196023
patch: if 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 407
score: 99.53176978326613
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 / $NUMBER$ . 0 ) /
rank: 407
score: 99.5210597826087
patch: return 0 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * (
rank: 407
score: 99.47399291992187
patch: return 0 . 0 * ( 1 . 0 + 1 . 0 + $NUMBER$ . 0 ) ;
rank: 407
score: 99.36685983758224
patch: return cumulative CaMeL Probability ( ( double ) ( 1 . 0 + Erf . erf (
rank: 407
score: 99.35124206542969
patch: ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 408
score: 99.56483289930556
patch: return 0 . $NUMBER$ * Erf . erf ( Erf . erf ( ( x - mean ) / $NUMBER$ . $NUMBER$ ) /
rank: 408
score: 99.55209748641305
patch: return 0 . $NUMBER$ ] * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 408
score: 99.54123757102273
patch: return 0 . $NUMBER$ * ( 1 . 0 + mean ) . erf ( ( x - mean ) /
rank: 408
score: 99.53173828125
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 / $NUMBER$ /
rank: 408
score: 99.52095170454545
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) &
rank: 408
score: 99.47397711338141
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 408
score: 99.36673134251645
patch: return return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) /
rank: 408
score: 99.35121663411458
patch: return - ( 1 . $NUMBER$ + Erf . erf ( ( x - mean )
rank: 409
score: 99.56479673032408
patch: return 0 . $NUMBER$ * ( $NUMBER$ . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) /
rank: 409
score: 99.5520703125
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ * Erf . erf ( ( x - mean ) / mean ) /
rank: 409
score: 99.5411885579427
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / this .
rank: 409
score: 99.52065207741477
patch: return 0 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) ,
rank: 409
score: 99.36636691623264
patch: return 0 . $NUMBER$ * Math . Erf . erf ( ( x - mean )
rank: 409
score: 99.35072157118056
patch: else return ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 410
score: 99.57789894386575
patch: return 0 . $NUMBER$ * double 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 410
score: 99.564765625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf ) )
rank: 410
score: 99.552001953125
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . 1 + Erf . erf ( ( x - mean ) /
rank: 410
score: 99.54082697088069
patch: return 0 . $NUMBER$ * ( x - mean ) / 0 . 0 * ( x - mean ) /
rank: 410
score: 99.53164438100961
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) ) / 1 . 0
rank: 410
score: 99.5202303799716
patch: return 0 . $NUMBER$ * ( 1 . 0 ) / Erf . erf ( ( x - mean )
rank: 410
score: 99.47358254825367
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation < 0 . 0 ) ) ) ;
rank: 410
score: 99.36632015830592
patch: return 0 . 0 + ( 1 > Erf . erf ( ( x - mean )
rank: 410
score: 99.35051526521382
patch: if ( x == 0 + Erf . erf ( ( x - mean ) / (
rank: 411
score: 99.57788957868304
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf $NUMBER$ . 0 ) )
rank: 411
score: 99.56471470424107
patch: return ( 1 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 411
score: 99.5407077955163
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( x / mean ) /
rank: 411
score: 99.531513671875
patch: return ( double ) ( 0 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 /
rank: 411
score: 99.52020263671875
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) ) ) ;
rank: 411
score: 99.47357536764706
patch: return 0 . 1 * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * 0 . 0 ) ) ) ;
rank: 411
score: 99.36632015830592
patch: return 0 . $NUMBER$ + ( 1 < Erf . erf ( ( x - mean )
rank: 411
score: 99.35010483685662
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 <= standard CaMeL Deviation *
rank: 412
score: 99.57773844401042
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / mean /
rank: 412
score: 99.55196578414352
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ( 0 . 0 ) ) /
rank: 412
score: 99.54063110351562
patch: return 0 . $NUMBER$ * Erf ( ( x - mean ) / 0 . 0 ) /
rank: 412
score: 99.53111853966347
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( int ) mean ) / 1 . 0 /
rank: 412
score: 99.52016379616477
patch: return 0 . 1 + ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) /
rank: 412
score: 99.47329566592262
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x == mean )
rank: 412
score: 99.36594109786184
patch: return cumulative CaMeL Probability ( 1 + Erf . erf ( ( x - mean ) /
rank: 412
score: 99.35002698396382
patch: return 0 . $NUMBER$ * ( 1 . get 0 ( ( x - mean ) / (
rank: 413
score: 99.57765549879808
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double - mean ) / $NUMBER$ . 0 +
rank: 413
score: 99.56468822337963
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) * 0 . $NUMBER$ ) /
rank: 413
score: 99.54022507440476
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 1 . 0 +
rank: 413
score: 99.53107819733796
patch: return ( 0 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 /
rank: 413
score: 99.52014741443452
patch: return 0 . $NUMBER$ * ( 1 . 0 / Erf . erf ( ( x - mean )
rank: 413
score: 99.47299373851104
patch: return 0 . $NUMBER$ * ( 0 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ;
rank: 413
score: 99.36581759982639
patch: return 0 . $NUMBER$ + Erf . cumulative CaMeL Probability ( ( x - mean )
rank: 413
score: 99.35001413445724
patch: return ( ( 0 . 0 + Erf . erf ( ( x - mean ) )
rank: 414
score: 99.57763671875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $STRING$ / / /
rank: 414
score: 99.55189866286058
patch: return 0 . $NUMBER$ return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 414
score: 99.53087439903847
patch: return 0 . $NUMBER$ * ( 0 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 /
rank: 414
score: 99.51935369318181
patch: return 0 . $NUMBER$ + ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) )
rank: 414
score: 99.47258649553571
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf & 0 . 0 ) ;
rank: 414
score: 99.36543354235198
patch: return ( ( 1 . 1 + Erf . erf ( ( x - mean ) /
rank: 414
score: 99.34967719184027
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( 1 == 1 . 0 )
rank: 415
score: 99.577392578125
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ,
rank: 415
score: 99.5646260579427
patch: try { return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) /
rank: 415
score: 99.55173903245192
patch: return 0 . $NUMBER$ * 1 . 0 * ( 1 . 0 * Erf . erf ( ( x - mean ) /
rank: 415
score: 99.53989664713542
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / ( double - mean ) /
rank: 415
score: 99.53087197580645
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . get ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 /
rank: 415
score: 99.51924465013587
patch: return 0 . $NUMBER$ * ( Long . 0 + Erf . erf ( ( x - mean ) / (
rank: 415
score: 99.47249581473214
patch: return 0 . $NUMBER$ * ( 1 . 0 + standard CaMeL Deviation * Math . sqrt ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; ;
rank: 415
score: 99.36521283318015
patch: return 0 . $NUMBER$ + ( 1 . 0 + ( x - mean ) /
rank: 415
score: 99.349462890625
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . 0 +
rank: 416
score: 99.57737574084052
patch: double 0 . 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 416
score: 99.56458458533653
patch: return 0 . $NUMBER$ * 1 . $NUMBER$ * Erf . erf ( Erf . erf ( ( x - mean ) /
rank: 416
score: 99.55166446461396
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + ( x - mean ) /
rank: 416
score: 99.53987260298295
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( x - mean ) / 1 . 0 ) /
rank: 416
score: 99.5308250144676
patch: return ( 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 +
rank: 416
score: 99.51906516335227
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) + mean ) ) ;
rank: 416
score: 99.47215401785714
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 416
score: 99.36504364013672
patch: return $NUMBER$ . 0 + Erf . erf ( ( x - mean )
rank: 416
score: 99.3488705283717
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 < Erf . erf ( (
rank: 417
score: 99.56455641526442
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 )
rank: 417
score: 99.55164930555556
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . mean ( ( x - mean ) / 0 . 0 ) ) /
rank: 417
score: 99.53075384324596
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( 0 . 0 + Erf . erf ( ( x - mean ) /
rank: 417
score: 99.51901112432066
patch: return 0 . 1 * ( 1 . 0 + Erf . erf ( ( x - mean ) / *
rank: 417
score: 99.47140066964286
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf != 0 . 0 ) ;
rank: 417
score: 99.34878700657895
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 / ( x - mean ) /
rank: 418
score: 99.5771484375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / double $NUMBER$ . 0 ) /
rank: 418
score: 99.56453450520833
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) & 0 . $NUMBER$ ) /
rank: 418
score: 99.5516357421875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - ( x - mean ) ) /
rank: 418
score: 99.53961859809027
patch: if ( 0 . $NUMBER$ * Erf . erf ( ( x - mean ) /
rank: 418
score: 99.53068324497768
patch: return ( double ) 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0
rank: 418
score: 99.51893682065217
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) - (
rank: 418
score: 99.47115749782986
patch: return ( 0 . 0 * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; }
rank: 419
score: 99.57700667842742
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) / Erf . erf ( (
rank: 419
score: 99.53957112630208
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double - mean ) / ) /
rank: 419
score: 99.53065842848558
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . get ( ( x - mean ) / 1 . 0 /
rank: 419
score: 99.51868206521739
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - $NUMBER$ ) / (
rank: 419
score: 99.47084446957237
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 419
score: 99.36436703330592
patch: return return ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 420
score: 99.57699819711539
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / / erf ) /
rank: 420
score: 99.53060913085938
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / 1 . 0 ) ;
rank: 420
score: 99.5182217684659
patch: return 0 . 1 * ( 1 . 0 + Erf . erf ( ( x - mean ) ?
rank: 420
score: 99.47080365349265
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( this . erf ( ) . 0 ) ) ) ;
rank: 420
score: 99.34776475694444
patch: throw ( 0 . 0 + Erf . erf ( ( x - mean ) /
rank: 421
score: 99.56436270254629
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) << 0 . 0 ) *
rank: 421
score: 99.51811079545455
patch: return 0 . $NUMBER$ * 1 . 0 + Erf . erf ( ( x - mean ) / (
rank: 421
score: 99.47079613095238
patch: return 0 . $NUMBER$ * ( 1 . 0 + Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 421
score: 99.36414859169408
patch: return 0 . $NUMBER$ * Erf . erf ( ( long ) Erf . erf (
rank: 421
score: 99.3472900390625
patch: return 0 . $NUMBER$ * ( 1 . super . erf ( ( x - mean ) /
rank: 422
score: 99.57688621238425
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( float ) mean ) / Erf . erf (
rank: 422
score: 99.56428328804348
patch: return ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . $NUMBER$ ) /
rank: 422
score: 99.55060686383929
patch: return 0 . $NUMBER$ * 1 . $NUMBER$ * ( 1 . 0 + ( x - mean ) /
rank: 422
score: 99.53913317228618
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / erf )
rank: 422
score: 99.53056640625
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 / 1 . 0 +
rank: 422
score: 99.51811079545455
patch: return 0 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) >
rank: 422
score: 99.46928013392858
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( this . erf ( $NUMBER$ . 0 ) ) ) ) ;
rank: 422
score: 99.364013671875
patch: return * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 422
score: 99.34725791529605
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . 0 + ( 1 . 0
rank: 423
score: 99.57678643588362
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( int ) mean ) / Erf . erf ( ) /
rank: 423
score: 99.56418678977273
patch: return Erf . erf ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 423
score: 99.55058361235119
patch: return 0 . 0 * 0 . $NUMBER$ * Erf . erf ( ( x - mean ) /
rank: 423
score: 99.53903065557066
patch: return 0 . $NUMBER$ * ( ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) /
rank: 423
score: 99.46817801339286
patch: return ( 0 . 1 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 423
score: 99.36390904017857
patch: return 0 * Erf . erf ( ( x - mean )
rank: 423
score: 99.34712727864583
patch: return 0 . $NUMBER$ * ( 1 . read ( ( x - mean ) / (
rank: 424
score: 99.576728515625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( int ) mean ) / mean ) ;
rank: 424
score: 99.53048140914352
patch: return ( 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 /
rank: 424
score: 99.5180331143466
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) >
rank: 424
score: 99.46781412760417
patch: return ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; }
rank: 424
score: 99.36384582519531
patch: return 0 . $NUMBER$ * ( ( 1 . 0 + x - mean )
rank: 424
score: 99.34685315583882
patch: return 0 . 0 * ( 1 . 0 + Erf ( ( x - mean )
rank: 425
score: 99.56396484375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) - length ) /
rank: 425
score: 99.53861490885417
patch: return 0 . $NUMBER$ * Erf ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) /
rank: 425
score: 99.53044524016204
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) ) / $NUMBER$ . 0 +
rank: 425
score: 99.5178753396739
patch: return 0 . $NUMBER$ * 0 * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 425
score: 99.46699793198529
patch: return ( 0 . 0 + Erf . erf ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; }
rank: 425
score: 99.36376274956598
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean 1 )
rank: 425
score: 99.34663660386029
patch: return 0 . $NUMBER$ * ( 1 . max . ( ( x - mean )
rank: 426
score: 99.57658438846983
patch: double . double 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 426
score: 99.5501708984375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean , double ) mean ) /
rank: 426
score: 99.5303955078125
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / $NUMBER$ . $NUMBER$ ) / $NUMBER$ . 0
rank: 426
score: 99.51777787642045
patch: return 0 . $NUMBER$ * ( $NUMBER$ . 0 + Erf . erf ( ( x - mean ) ?
rank: 426
score: 99.46690458409927
patch: return 0 . 0 * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 426
score: 99.36344401041667
patch: return 0 . 0 + ( 1 . 0 + Erf . erf ( ( this
rank: 426
score: 99.3465576171875
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . 0 ) ) ;
rank: 427
score: 99.57652791341145
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( int ) mean ) / $NUMBER$ /
rank: 427
score: 99.5637539950284
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) *
rank: 427
score: 99.51776123046875
patch: return 0 . $NUMBER$ * ( this . erf ( ( x - mean ) / (
rank: 427
score: 99.46611471737133
patch: return 0 . ( Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; }
rank: 427
score: 99.36320944393383
patch: return $NUMBER$ . 0 * ( Erf . erf ( ( x - mean )
rank: 427
score: 99.34585089432566
patch: return 0 . $NUMBER$ * ( 1 . 0 + standard CaMeL Deviation * Math . sqrt (
rank: 428
score: 99.57642618815105
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / Erf . erf ( )
rank: 428
score: 99.53016728940217
patch: return 0 . $NUMBER$ * ( 1 . 0 / Erf . erf ( ( x - mean ) ) /
rank: 428
score: 99.51770550271739
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) , (
rank: 428
score: 99.46563895089285
patch: return 0 . 0 + ( Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 428
score: 99.36265345982143
patch: double x = Erf . erf ( ( x - mean )
rank: 428
score: 99.34575338924633
patch: return 0 . 0 * ( 1 . get 1 ( ( x - mean )
rank: 429
score: 99.5763448079427
patch: return ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / mean ) / mean ) /
rank: 429
score: 99.56354890046296
patch: return ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) / 1 . 0 )
rank: 429
score: 99.53001121238425
patch: return 0 . $NUMBER$ * ( 1 . 0 * ( 1 . 0 / Erf . erf ( ( x - mean ) /
rank: 429
score: 99.51763305664062
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) ) / (
rank: 429
score: 99.46531048943015
patch: return 0 . $NUMBER$ * ( 1 . 0 + standard CaMeL Deviation * Math . sqrt ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ?
rank: 429
score: 99.36264935661765
patch: return ( ( double ) ( 1 . 0 + ( x - mean ) /
rank: 429
score: 99.34571668836806
patch: return 0 . $NUMBER$ * ( 1 . 0 + x - 1 . 0 ) ;
rank: 430
score: 99.57625906808036
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / / $NUMBER$ . 0 / /
rank: 430
score: 99.56354631696429
patch: try { return 0 . $NUMBER$ * Erf . erf ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 430
score: 99.54962890625
patch: return 0 . $NUMBER$ * ( 1 . 0 ? Erf . erf ( ( x - mean ) / mean ) ;
rank: 430
score: 99.5373004415761
patch: return 0 . 0 + Erf . erf ( ( x - mean ) / ( x - mean ) /
rank: 430
score: 99.52996356670673
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 )
rank: 430
score: 99.51750382133152
patch: return Erf . erf ( ( x - mean ) / Math . sqrt ( $NUMBER$ . $NUMBER$ ) ) ;
rank: 430
score: 99.465087890625
patch: return 0 . 1 * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; }
rank: 430
score: 99.36239624023438
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ,
rank: 431
score: 99.57623046875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( float ) mean ) / mean ) /
rank: 431
score: 99.5635398582176
patch: return 1 . $NUMBER$ * Erf . erf ( Erf . erf ( ( x - mean ) / 1 . 0 ) /
rank: 431
score: 99.54958274147727
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) (
rank: 431
score: 99.53726806640626
patch: return 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / mean ) /
rank: 431
score: 99.52995054183468
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 1 . 0 / Erf . 0 / Erf . 0 /
rank: 431
score: 99.51749320652173
patch: return 0 . $STRING$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / (
rank: 431
score: 99.46494140625
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; ;
rank: 431
score: 99.36237649356617
patch: return ( ( float ) Erf . erf ( ( x - mean ) /
rank: 431
score: 99.345263671875
patch: return 0 . $NUMBER$ * ( 1 . max + mean ) / (
rank: 432
score: 99.57618126502403
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf ( ) /
rank: 432
score: 99.53725363991477
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / / 0 . 0 )
rank: 432
score: 99.5298843383789
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( int ) Erf . erf ( ( x - 0 . 0 ) /
rank: 432
score: 99.51746136209239
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) > (
rank: 432
score: 99.46339326746323
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / Math . sqrt ( $NUMBER$ . 0 ) ) ) ; ;
rank: 432
score: 99.36217583550348
patch: double x = 1 . 0 * Erf . erf ( ( x - mean )
rank: 433
score: 99.57614135742188
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / $NUMBER$ )
rank: 433
score: 99.56324114118304
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ) / Erf . erf ( ( x - mean ) /
rank: 433
score: 99.54908203125
patch: return 0 . $NUMBER$ * ( 1 . 0 + mean ( ( x - mean ) / 0 . 0 ) ) ;
rank: 433
score: 99.53706498579545
patch: return Math . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 433
score: 99.52983747209821
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . get ( Erf . erf ( ( x - mean ) ) /
rank: 433
score: 99.51735617897727
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) ,
rank: 433
score: 99.46334591427365
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 433
score: 99.36210801866319
patch: return ( ( 1 . 0 * Erf . erf ( ( x - mean )
rank: 434
score: 99.57605432581019
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x * mean ) / $NUMBER$ . 0 ) /
rank: 434
score: 99.56321022727273
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - min ) /
rank: 434
score: 99.54885031960227
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - 1 ) ;
rank: 434
score: 99.53704833984375
patch: return ( 1 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) ) /
rank: 434
score: 99.51735432942708
patch: return 0 . $NUMBER$ * 0 + Erf . erf ( ( x - mean )
rank: 434
score: 99.46321847098214
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( standard CaMeL Deviation *
rank: 434
score: 99.36173502604167
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( x )
rank: 434
score: 99.34446088005515
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . 0 + ( 1
rank: 435
score: 99.57580114293981
patch: return 0 . 0 * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 435
score: 99.56300571986607
patch: return ( 1 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 435
score: 99.54869666466347
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - 0 . 0 + mean ) /
rank: 435
score: 99.53703507133152
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / else
rank: 435
score: 99.51734459918478
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) || (
rank: 435
score: 99.46255580357143
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 435
score: 99.34431726792279
patch: return 0 . $NUMBER$ * ( 1 . clone 1 ( ( x - mean )
rank: 436
score: 99.57577950613839
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double - mean ) / / $NUMBER$ . 0 ) /
rank: 436
score: 99.56278030960648
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( 1 . 0 ;
rank: 436
score: 99.54868727463942
patch: return 0 . 0 * 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) ;
rank: 436
score: 99.51732235863095
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - 1 )
rank: 436
score: 99.46192842371323
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) +
rank: 436
score: 99.36114501953125
patch: return ( ( x . cumulative CaMeL Probability ( ( x - mean ) /
rank: 436
score: 99.34426540798611
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( 1 == standard CaMeL Deviation *
rank: 437
score: 99.57572880497685
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / this . mean ) /
rank: 437
score: 99.548671875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ( ( ) ) /
rank: 437
score: 99.53684303977273
patch: return 0 . $NUMBER$ , ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 437
score: 99.52922453703704
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . get ( Erf . erf ( ( x - mean ) /
rank: 437
score: 99.5172702955163
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ ) + Erf . erf ( ( x - mean ) /
rank: 437
score: 99.34382459852431
patch: return 0 . $NUMBER$ * ( 1 . clone ( ( x - mean ) / (
rank: 438
score: 99.57570103236607
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf 0 . 0 ) /
rank: 438
score: 99.53680419921875
patch: return ( 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 1 . 0 ) ) /
rank: 438
score: 99.52911376953125
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) / 1 . 0 ) ;
rank: 438
score: 99.51701554008152
patch: return ( 1 . $NUMBER$ + 1 . 0 + Erf . erf ( ( x - mean ) / (
rank: 438
score: 99.46162806919642
patch: return ( 0 . $NUMBER$ / Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 438
score: 99.36092800564236
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf [ 0 ]
rank: 438
score: 99.3436343544408
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( x - mean ) / ( $NUMBER$
rank: 439
score: 99.56240609975961
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / - mean ) /
rank: 439
score: 99.5484110514323
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean - mean ) /
rank: 439
score: 99.53678385416667
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / x )
rank: 439
score: 99.52898700420673
patch: return ( 0 . $NUMBER$ * Erf . erf ( ( int ) Erf . erf ( ( x - mean ) /
rank: 439
score: 99.51700492527173
patch: return 0 . 1 * ( 1 . 0 + Erf . erf ( ( x - mean ) / -
rank: 439
score: 99.46063591452206
patch: return 0 . 0 * ( x . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 439
score: 99.36083984375
patch: return 0 . $NUMBER$ * ( ( x - mean )
rank: 439
score: 99.343505859375
patch: return 0 . 0 + ( 1 . 0 + x - mean ) ;
rank: 440
score: 99.57562934027777
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf . 0 ) /
rank: 440
score: 99.56232421875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) * 1 ) /
rank: 440
score: 99.54806518554688
patch: return 0 . $NUMBER$ * ( double ) 1 . 0 * Erf . erf ( ( x - mean ) /
rank: 440
score: 99.53665161132812
patch: return 0 . 0 * ( ( x - mean ) / Erf . erf ( ( x - mean ) /
rank: 440
score: 99.52898297991071
patch: return ( ( double ) 0 . 0 + Erf . erf ( ( x - mean ) /
rank: 440
score: 99.46019151475694
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; }
rank: 440
score: 99.36064710115132
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x +
rank: 440
score: 99.34345838758681
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( x - mean ) ) ;
rank: 441
score: 99.575615234375
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) * mean ) /
rank: 441
score: 99.56216796875
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / true ) /
rank: 441
score: 99.5480487530048
patch: return 0 . $NUMBER$ * 0 . $NUMBER$ * Erf . erf ( Erf . erf ( ( x - mean ) /
rank: 441
score: 99.5365323153409
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / / 1 . 0 )
rank: 441
score: 99.52888997395833
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) +
rank: 441
score: 99.51674194335938
patch: return 0 . $NUMBER$ + 1 . 0 + Erf . erf ( ( x - mean )
rank: 441
score: 99.45993303571429
patch: return ( $NUMBER$ . $NUMBER$ * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 441
score: 99.34314643012152
patch: if ( ( 0 . $NUMBER$ + Erf . erf ( ( x - mean )
rank: 442
score: 99.56207275390625
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) << $NUMBER$ ) /
rank: 442
score: 99.53641941236413
patch: try { return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 442
score: 99.52878042367789
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 (
rank: 442
score: 99.51667924360795
patch: return ( 1 . 0 + Erf . erf ( ( x - mean ) / standard CaMeL Deviation *
rank: 442
score: 99.45958426339286
patch: return 0 . $NUMBER$ + ( Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 442
score: 99.36041618795956
patch: { return 0 . $NUMBER$ * Erf . erf ( ( x - mean )
rank: 442
score: 99.34283126027961
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 < Erf . erf ( )
rank: 443
score: 99.57559640066964
patch: return 0 . $NUMBER$ * ( 1 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / /
rank: 443
score: 99.56200267650463
patch: return 0 . $NUMBER$ * ( 0 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 443
score: 99.5479403409091
patch: return 0 . 0 * ( 1 . $NUMBER$ * Erf . erf ( ( x - mean ) /
rank: 443
score: 99.53621419270833
patch: return ( 1 . $NUMBER$ * Erf . erf ( ( x - mean ) / 0 . 0 ) ) /
rank: 443
score: 99.52870008680556
patch: return 0 . 0 * ( ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 /
rank: 443
score: 99.51656971807066
patch: return ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 443
score: 99.45952012803819
patch: return ( 0 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; ;
rank: 443
score: 99.35997178819444
patch: return 0 . 0 + ( 1 . 0 + Erf . erf ( ( !
rank: 443
score: 99.3422622680664
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( x > mean )
rank: 444
score: 99.57552734375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) +
rank: 444
score: 99.52857259114583
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) / 0 . 0
rank: 444
score: 99.5165484884511
patch: return 0 . $NUMBER$ * ( $NUMBER$ . 0 + Erf . erf ( ( x - mean ) / -
rank: 444
score: 99.45915670955883
patch: return ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 444
score: 99.35922723067434
patch: return 0 . $NUMBER$ * ( 1 . Math . sqrt ( ( x - mean ) /
rank: 445
score: 99.57530799278847
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) x ) / erf ( double )
rank: 445
score: 99.56145109953704
patch: return 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . $NUMBER$ ) /
rank: 445
score: 99.54727027529762
patch: return 0 . 0 * 1 . $NUMBER$ * Erf . erf ( ( x - mean ) /
rank: 445
score: 99.52845348011364
patch: return 0 . $NUMBER$ / ( 1 . 0 / Erf . erf ( ( x - mean ) /
rank: 445
score: 99.51649541440217
patch: return 0 . $NUMBER$ * 1 * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean )
rank: 445
score: 99.45904541015625
patch: return 0 . $NUMBER$ * ( ( 1 . 0 ) / ( 0 . 0 ) ) ;
rank: 445
score: 99.35902163856908
patch: double x = 0 . 0 * Erf . erf ( ( x - mean ) /
rank: 446
score: 99.57515914351852
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) / mean /
rank: 446
score: 99.5610984519676
patch: return ( 1 . $NUMBER$ + 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) /
rank: 446
score: 99.53607732599431
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / / 1 . 0 +
rank: 446
score: 99.52839906754032
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 / Erf . 0 /
rank: 446
score: 99.51644234035327
patch: return 1 . 0 + ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / (
rank: 446
score: 99.45887276785714
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * 0 . 0 ) ) ) ; }
rank: 446
score: 99.35898951480263
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x ,
rank: 447
score: 99.57514105902777
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / $NUMBER$ . 0 / /
rank: 447
score: 99.56080979567308
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) << 0 ) ) /
rank: 447
score: 99.54721467391305
patch: return - 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 447
score: 99.5358378092448
patch: return 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / ( x - mean ) ) /
rank: 447
score: 99.51611328125
patch: return 0 . $NUMBER$ * ( $NUMBER$ . $NUMBER$ + Erf . erf ( ( x - mean ) /
rank: 447
score: 99.45880485983456
patch: return 0 . $NUMBER$ * ( this . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 447
score: 99.34170193142361
patch: return 0 . $NUMBER$ * ( 1 . Math . sqrt ( x - mean ) /
rank: 448
score: 99.57502350983796
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf ( double ) /
rank: 448
score: 99.53564453125
patch: return $STRING$ . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 448
score: 99.5282958984375
patch: return 0 . $NUMBER$ * 1 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 +
rank: 448
score: 99.51611328125
patch: return 0 . $NUMBER$ * ( 0 . 1 + Erf . erf ( ( x - mean ) / (
rank: 448
score: 99.45855887276785
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; else
rank: 448
score: 99.3586066750919
patch: return 1 . 0 * Erf . erf ( ( x - mean ) /
rank: 449
score: 99.56050931490384
patch: return 0 . $NUMBER$ * 1 . 0 * Erf . erf ( Erf . erf ( ( x - mean ) /
rank: 449
score: 99.54695268110795
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . double ( ( x - mean ) /
rank: 449
score: 99.5355936686198
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) . erf (
rank: 449
score: 99.5282870205966
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ / Erf . erf ( ( x - mean ) /
rank: 449
score: 99.51598011363636
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x + mean ) )
rank: 449
score: 99.45852248733108
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( this . erf ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) )
rank: 449
score: 99.35799367804276
patch: return ( ( 0 . $NUMBER$ * Erf . erf ( ( x - mean ) /
rank: 449
score: 99.341015625
patch: return 0 . $NUMBER$ * ( 1 . contains ( x - mean )
rank: 450
score: 99.57494245256696
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / double . 0 ) / /
rank: 450
score: 99.560458984375
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) << 1 ) /
rank: 450
score: 99.54667331861413
patch: return 0 . $NUMBER$ * * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 450
score: 99.53558640252976
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 0 . get CaMeL
rank: 450
score: 99.52827671595982
patch: return 0 . 0 * 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 /
rank: 450
score: 99.51591159986413
patch: return 0 . $NUMBER$ * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ;
rank: 450
score: 99.45759412977431
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( ) ) ) ) ;
rank: 450
score: 99.35797991071429
patch: return 0 + Erf . erf ( ( x - mean )
rank: 450
score: 99.34076891447368
patch: return 0 . $NUMBER$ * ( 1 . Math . erf ( ( x - mean ) /
rank: 451
score: 99.57491966985887
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / 0 . 0 +
rank: 451
score: 99.56038625616776
patch: return ( 1 . 0 + Erf . erf ( ( x - mean ) ) /
rank: 451
score: 99.53555961277173
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / 0 . 0 ) +
rank: 451
score: 99.52816659432871
patch: return 0 . $NUMBER$ / ( 1 . 0 / ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 451
score: 99.51582668138587
patch: return 0 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) || (
rank: 451
score: 99.45677315848214
patch: return ( 0 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation > Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 451
score: 99.35764674136513
patch: return cumulative CaMeL Probability ( 1 . 0 + Erf . erf ( ( x - :
rank: 451
score: 99.3406918174342
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 != ( x - mean ) /
rank: 452
score: 99.57472278225806
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 + Erf . erf (
rank: 452
score: 99.546416015625
patch: return 0 . $NUMBER$ * ( 1 . 0 + mean ) / Erf . erf ( ( x - mean ) /
rank: 452
score: 99.53544477982955
patch: return 0 . 0 * Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 452
score: 99.51577360733695
patch: return 0 . $NUMBER$ * ( 0 . 0 + Erf . erf ( ( x - mean ) / -
rank: 452
score: 99.45669376148896
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation > 0 . 0 ) ) ) ;
rank: 452
score: 99.35756429036458
patch: return cumulative CaMeL Probability ( 1 + Erf . erf ( ( x - mean )
rank: 453
score: 99.57445447198276
patch: double . return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 453
score: 99.54596416766827
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - double ) 1 . 0 ) /
rank: 453
score: 99.53500366210938
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( x / mean ) ) /
rank: 453
score: 99.5281470514113
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / 1 . 0 /
rank: 453
score: 99.51572053328805
patch: return 0 . $NUMBER$ + ( 1 . 1 + Erf . erf ( ( x - mean ) / (
rank: 453
score: 99.45668658088235
patch: return ( 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 453
score: 99.35692596435547
patch: return ( ( int ) ( 1 . 0 + Erf . erf (
rank: 453
score: 99.33958033511513
patch: return 0 . $NUMBER$ * ( 1 . class . erf ( ( x - mean ) /
rank: 454
score: 99.57435546875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf ( )
rank: 454
score: 99.56027088994566
patch: return ( 1 . 0 * Erf . erf ( ( x - mean ) / 0 . 0 ) /
rank: 454
score: 99.54586659307066
patch: return return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) ;
rank: 454
score: 99.53495279947917
patch: return ( 1 . 0 + Erf . erf ( ( x - mean ) / ( x - mean ) /
rank: 454
score: 99.52804904513889
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) ) / 1 . 0 +
rank: 454
score: 99.45666155133928
patch: return ( ( 0 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) )
rank: 454
score: 99.35684967041016
patch: return 0 . $NUMBER$ * Erf . erf ( ( byte - mean )
rank: 454
score: 99.33943006727431
patch: return 0 . $NUMBER$ * ( ( x - mean ) / ( standard CaMeL Deviation *
rank: 455
score: 99.57423683449075
patch: return 0 . 0 * ( 1 . 0 * Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 455
score: 99.56025834517045
patch: return 0 . 0 * ( 1 . 0 ? Erf . erf ( ( x - mean ) /
rank: 455
score: 99.53487141927083
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / Math .
rank: 455
score: 99.52796349158653
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) ) / $NUMBER$ . 0
rank: 455
score: 99.5154339334239
patch: return 0 . $NUMBER$ * ( 1 . 0 == Erf . erf ( ( x - mean ) / (
rank: 455
score: 99.45621337890626
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf $NUMBER$ . 0 ) ;
rank: 455
score: 99.35679626464844
patch: return 0 . $NUMBER$ * Erf . erf ( ( x < mean )
rank: 455
score: 99.33905993009868
patch: return - ( ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 456
score: 99.57402973790323
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 456
score: 99.560205078125
patch: return 0 . $NUMBER$ * ( 1 . 0 ? Erf . erf ( ( x - mean ) / erf ) /
rank: 456
score: 99.5348612467448
patch: return ( 0 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) ) /
rank: 456
score: 99.52792358398438
patch: return 0 . $NUMBER$ * ( 1 . 0 + double ) Erf . erf ( ( x - mean ) /
rank: 456
score: 99.51540305397727
patch: return 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / ( $NUMBER$ . 0 )
rank: 456
score: 99.45619829963235
patch: return 0 . $NUMBER$ * ( 1 . 0 + x - mean ) ) ;
rank: 456
score: 99.35612657335069
patch: return 0 . $NUMBER$ * ( * Erf . erf ( ( x - mean )
rank: 456
score: 99.33903672960069
patch: return 0 . 0 * ( 1 . 0 + Erf . erf $NUMBER$ ) ;
rank: 457
score: 99.57390485491071
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ( double )
rank: 457
score: 99.55973307291667
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) * 0 . 0 ) /
rank: 457
score: 99.54541015625
patch: return 0 . $NUMBER$ * ( x - Erf . erf ( ( x - mean ) / 0 . 0 ) /
rank: 457
score: 99.5348484205163
patch: return 0 . $NUMBER$ * Erf ( Erf . erf ( ( x - mean ) / mean ) /
rank: 457
score: 99.52784886853448
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 / double . 0
rank: 457
score: 99.51523659446023
patch: return 0 . $NUMBER$ * ( 0 . 0 + Erf . erf ( ( x - mean ) ?
rank: 457
score: 99.45619419642857
patch: return 0 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) . 0 ) ) ;
rank: 457
score: 99.35608628216912
patch: return ( cumulative CaMeL Probability . cumulative CaMeL Probability ( ( x - mean ) /
rank: 457
score: 99.33852810329861
patch: return ( ( double - Erf . erf ( ( x - mean ) / (
rank: 458
score: 99.57388305664062
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) / ) /
rank: 458
score: 99.55963604266827
patch: return 0 . $NUMBER$ * Erf . erf ( 1 . 0 * Erf . erf ( ( x - mean ) /
rank: 458
score: 99.54507211538461
patch: return 0 . 0 * 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) ;
rank: 458
score: 99.5345791903409
patch: return 0 . $NUMBER$ * Erf . $NUMBER$ * Erf . erf ( ( x - mean ) /
rank: 458
score: 99.52743966238839
patch: return ( 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 458
score: 99.51519220525569
patch: return 0 . $NUMBER$ * ( this . erf ( ( x - mean ) / ( standard CaMeL Deviation *
rank: 458
score: 99.45583926930146
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation == 0 . 0 ) ) ) ;
rank: 458
score: 99.3559929342831
patch: return 0 . $NUMBER$ * Erf . erf [ ( x - mean ) /
rank: 458
score: 99.33840044806985
patch: if ( 0 == Erf . erf ( ( x - mean ) / (
rank: 459
score: 99.57379150390625
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) / / /
rank: 459
score: 99.55962890625
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 ) /
rank: 459
score: 99.54498046875
patch: return 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) /
rank: 459
score: 99.5345126065341
patch: return Double . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 459
score: 99.51503057065217
patch: return 1 . $NUMBER$ * ( 0 . 0 + Erf . erf ( ( x - mean ) / (
rank: 459
score: 99.4556023092831
patch: return $NUMBER$ . $NUMBER$ * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; }
rank: 459
score: 99.35598575367646
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( int ) 1 .
rank: 459
score: 99.33802625868056
patch: return ( 0 . 0 + Erf . erf ( ( x - mean ) ==
rank: 460
score: 99.5595070167824
patch: return 0 . $NUMBER$ + Erf . erf ( Erf . erf ( ( x - mean ) / 0 . 0 ) /
rank: 460
score: 99.54489135742188
patch: return 0 . $NUMBER$ * ( 1 . 0 ? Erf . erf ( ( x - mean ) / mean (
rank: 460
score: 99.53449041193181
patch: double 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 460
score: 99.5147705078125
patch: return 0 . $NUMBER$ * ( * Erf . erf ( ( x - mean ) / (
rank: 460
score: 99.45549573396382
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf / 0 . 0 ) ;
rank: 460
score: 99.35586708470395
patch: return 0 . $NUMBER$ * ( + Erf . erf ( ( x - mean ) /
rank: 461
score: 99.57359967912946
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) ) / Erf . erf (
rank: 461
score: 99.55924166165866
patch: return 0 . $NUMBER$ * Erf . erf ( Erf . erf ( ( x - mean ) / 1 . 0 )
rank: 461
score: 99.54463527513587
patch: return double 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 461
score: 99.53433227539062
patch: if ( ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) )
rank: 461
score: 99.527353515625
patch: return 0 . $NUMBER$ * ( double ) ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) /
rank: 461
score: 99.51469089673913
patch: return $NUMBER$ . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) / (
rank: 461
score: 99.45542689732143
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * 0 . 0 ) ) ) ; ;
rank: 461
score: 99.33750813802084
patch: return 0 . $NUMBER$ * ( 1 . equals ( x - mean )
rank: 462
score: 99.55922670717592
patch: return 0 . $NUMBER$ * ( 0 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) /
rank: 462
score: 99.53429066051136
patch: if ( ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) /
rank: 462
score: 99.52732631138393
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / double . MIN _ VALUE /
rank: 462
score: 99.5146151455966
patch: return cumulative CaMeL Probability ( 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / (
rank: 462
score: 99.45510602678571
patch: return ( 0 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ?
rank: 462
score: 99.3553107766544
patch: return 0 . $NUMBER$ * ( ( x . erf ( ( x - mean )
rank: 462
score: 99.33745659722223
patch: return 0 . $NUMBER$ * ( 1 . 0 + mean ( ( x - mean (
rank: 463
score: 99.57342529296875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / / $NUMBER$ . 0 ) )
rank: 463
score: 99.55918149594908
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) *
rank: 463
score: 99.5444103422619
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . 0 ( ( x - mean ) /
rank: 463
score: 99.53416951497395
patch: return ( 0 . 0 + Erf . erf ( ( x - mean ) / ( x - mean ) /
rank: 463
score: 99.52727801983173
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - 0 ) / $NUMBER$ . 0 +
rank: 463
score: 99.51455290421195
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) << (
rank: 463
score: 99.45496651785714
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / Math . sqrt ( $NUMBER$ . 0 ) . 0 ) ) ;
rank: 463
score: 99.35508728027344
patch: return ( ( long ) Erf . erf ( ( x - mean )
rank: 463
score: 99.33713107638889
patch: if ( 0 . 0 * Erf . erf ( ( x - mean ) /
rank: 464
score: 99.57329644097223
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ / / ) /
rank: 464
score: 99.55897588315217
patch: return ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / $NUMBER$ . $NUMBER$ ) /
rank: 464
score: 99.54413311298077
patch: return 0 . 0 * 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 464
score: 99.53416951497395
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / ) )
rank: 464
score: 99.51448197798295
patch: return 0 . 0 * ( ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 464
score: 99.4546257467831
patch: return 0 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; ;
rank: 464
score: 99.35506184895833
patch: return 0 . 0 * 1 < Erf . erf ( ( x - mean )
rank: 464
score: 99.33708190917969
patch: return 0 . 0 * ( 1 . 0 + 1 . 0 ) ;
rank: 465
score: 99.57327835648148
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double - mean ) / mean ) / mean )
rank: 465
score: 99.55880172164352
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) ;
rank: 465
score: 99.54405628551136
patch: return 0 . $NUMBER$ * ( 0 . 0 * Erf . erf ( ( x - mean ) /
rank: 465
score: 99.53415845788044
patch: return 0 . 0 * ( Erf . erf ( ( x - mean ) / Erf . erf (
rank: 465
score: 99.52697301793981
patch: return 0 . $NUMBER$ * ( ( 0 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 /
rank: 465
score: 99.51437245244566
patch: return 0 . $NUMBER$ * ( $NUMBER$ . 0 + Erf . erf ( ( x - mean ) / *
rank: 465
score: 99.45429543887867
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( 1 . 0 ) ) ) ; }
rank: 465
score: 99.33679917279412
patch: return ( 0 . 0 / Erf . erf ( ( x - mean )
rank: 466
score: 99.5731913248698
patch: return ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) / mean ) /
rank: 466
score: 99.54380104758523
patch: return 0 . $NUMBER$ / ( 1 . 0 + Erf . erf ( ( x - mean ) ;
rank: 466
score: 99.526875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( int ) mean ) / $NUMBER$ . 0
rank: 466
score: 99.51433771306819
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) :
rank: 466
score: 99.45402483258928
patch: return ( 0 . 0 + Erf . erf ( ( int - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 466
score: 99.35500759548611
patch: return cumulative CaMeL Probability ( ( Erf . erf ( ( x - mean ) /
rank: 466
score: 99.3367560891544
patch: return 0 . $NUMBER$ * ( 1 . abs 1 ( ( x - mean )
rank: 467
score: 99.57314958243535
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ) / Erf . erf (
rank: 467
score: 99.5339587983631
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / x ) /
rank: 467
score: 99.52686451099537
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) ,
rank: 467
score: 99.51407523777173
patch: return 0 . $NUMBER$ * ( 1 . 0 $NUMBER$ + Erf . erf ( ( x - mean ) /
rank: 467
score: 99.45328543526786
patch: return $NUMBER$ . $NUMBER$ * ( Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 467
score: 99.35468493009868
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf [ 0 ] /
rank: 467
score: 99.33670847039474
patch: return 0 . $NUMBER$ * ( 1 . get $NUMBER$ ( ( x - mean ) / (
rank: 468
score: 99.57310748922414
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / Erf . erf ( ( double ) mean ) /
rank: 468
score: 99.52685546875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 / $NUMBER$
rank: 468
score: 99.51401154891305
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / &&
rank: 468
score: 99.45326741536458
patch: return ( 1 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; }
rank: 468
score: 99.35464477539062
patch: return 0 . $NUMBER$ + Erf . erf ( ( x + mean )
rank: 468
score: 99.336669921875
patch: if ( 0 < Erf . erf ( ( x - mean ) /
rank: 469
score: 99.572978515625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) * erf $NUMBER$ /
rank: 469
score: 99.55840386284723
patch: return 0 . $NUMBER$ * ( 1 . 0 ? Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 469
score: 99.53363037109375
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( x - mean ) / erf ) /
rank: 469
score: 99.51374955610795
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / $NUMBER$ . 0 )
rank: 469
score: 99.45280151367187
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf $NUMBER$ ( ) ) ;
rank: 469
score: 99.35458713107639
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( true
rank: 469
score: 99.33610026041667
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 / $NUMBER$ . 0 ) ;
rank: 470
score: 99.57293504284274
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ) / 0 . $NUMBER$ * ( 1 . 0 + Erf . erf )
rank: 470
score: 99.52664749710648
patch: return ( 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 /
rank: 470
score: 99.51368297230114
patch: return 0 . $NUMBER$ * Erf . erf ( ( 1 . 0 + Erf . erf ( (
rank: 470
score: 99.354248046875
patch: return ( ( byte ) Erf . erf ( ( x - mean ) /
rank: 470
score: 99.33601459703948
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( 1 > Erf . erf (
rank: 471
score: 99.57292570891204
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf ) / $NUMBER$ /
rank: 471
score: 99.55831344039352
patch: return 0 . $NUMBER$ * ( 1 . 0 / Erf . erf ( ( x - mean ) / 1 . 0 ) /
rank: 471
score: 99.53330485026042
patch: return 0 . 0 * ( Erf . erf ( ( x - mean ) / 0 . 0 ) ) /
rank: 471
score: 99.52649864783653
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . $NUMBER$ /
rank: 471
score: 99.51344896399456
patch: return ( 1 . 0 + ( 1 . 0 * Erf . erf ( ( x - mean ) /
rank: 471
score: 99.45254177517361
patch: return 0 . $NUMBER$ * ( 1 . max . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 471
score: 99.3537841796875
patch: return 0 . 0 * ( 1 . ( ( x - mean )
rank: 472
score: 99.57274518694196
patch: double return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 472
score: 99.55831204927884
patch: return 0 . $NUMBER$ * ( ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ ) /
rank: 472
score: 99.54322398792614
patch: return 0 . $NUMBER$ * ( 1 . 0 << Erf . erf ( ( x - mean ) /
rank: 472
score: 99.5331522623698
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) / erf (
rank: 472
score: 99.52643291766827
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 1 /
rank: 472
score: 99.51323908025569
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) >
rank: 472
score: 99.45243443080358
patch: return ( cumulative CaMeL Probability * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 472
score: 99.3535385131836
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean +
rank: 473
score: 99.57269965277777
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) / mean (
rank: 473
score: 99.55829535590277
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - 0 ) / 0 . 0 ) /
rank: 473
score: 99.543212890625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( double ) ( ( x - mean ) /
rank: 473
score: 99.5331394361413
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 0 . - mean ) /
rank: 473
score: 99.51321750217014
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) + (
rank: 473
score: 99.4521484375
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 473
score: 99.35243626644737
patch: 0 . ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 473
score: 99.33576202392578
patch: return 0 . $NUMBER$ * ( 1 . get == ( x - mean )
rank: 474
score: 99.572646484375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( int ) mean ) / erf ) /
rank: 474
score: 99.55824788411458
patch: return ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) ) ;
rank: 474
score: 99.54309800091912
patch: return 0 . $NUMBER$ * ( 1 . 0 * ( x - mean ) /
rank: 474
score: 99.5262109375
patch: return 0 . 0 + Erf . erf ( ( int ) Erf . erf ( ( x - mean ) /
rank: 474
score: 99.5131503018466
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( Erf . erf ( ( x - mean )
rank: 474
score: 99.45206298828126
patch: return 0 . $NUMBER$ * ( ( x - mean ) / ( $NUMBER$ . 0 ) ) ;
rank: 474
score: 99.35199938322368
patch: return 0 . $NUMBER$ * Erf . erf ( ( byte ) Erf . erf (
rank: 474
score: 99.33485322840073
patch: throw ( 0 . 0 + Erf . erf ( ( x - mean )
rank: 475
score: 99.57239190463362
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / / $NUMBER$ . 0 ) / /
rank: 475
score: 99.53293863932292
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / 1 . $NUMBER$ ) ) /
rank: 475
score: 99.52615792410714
patch: try { return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 +
rank: 475
score: 99.45193219866071
patch: return ( 0 . 0 + Erf . erf ( ( $STRING$ - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 475
score: 99.35187088815789
patch: return 0 . $NUMBER$ * Erf . Erf . erf ( ( x + mean )
rank: 475
score: 99.33440483940973
patch: return 0 . 0 + ( 1 . 0 + Erf . erf ( ) /
rank: 476
score: 99.54258661684783
patch: return 0 . $NUMBER$ * ( 1 . mean ( ( x - mean ) / 0 . 0 ) ) /
rank: 476
score: 99.5261328125
patch: return 0 . $NUMBER$ + Erf . erf ( ( double ) Erf . erf ( ( x - mean ) /
rank: 476
score: 99.51198508522727
patch: return 0 . $NUMBER$ * ( double ) ( Erf . erf ( ( x - mean ) / (
rank: 476
score: 99.45185150971284
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ ) ) ) ) ;
rank: 476
score: 99.35186298076923
patch: return 0 . 0 * ( ( x - mean ) /
rank: 476
score: 99.33430311414931
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 > Erf . erf (
rank: 477
score: 99.55807834201389
patch: return 0 . $NUMBER$ * ( 1 . 0 , Erf . erf ( ( x - mean ) / 0 . 0 ) /
rank: 477
score: 99.542509765625
patch: return ( ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) ) /
rank: 477
score: 99.5325927734375
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / 0 . ( ) ) /
rank: 477
score: 99.52601975661058
patch: return ( 1 . $NUMBER$ + Erf . erf ( ( int ) Erf . erf ( ( x - mean ) /
rank: 477
score: 99.51161411830357
patch: return 0 . 1 * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean )
rank: 477
score: 99.35178094161184
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( int )
rank: 477
score: 99.33427877987133
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 == 1 . 0 )
rank: 478
score: 99.572080078125
patch: return 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 478
score: 99.55806790865384
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( 1 . 0 + mean ) ) ;
rank: 478
score: 99.54243977864583
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean , mean ) /
rank: 478
score: 99.53246459960937
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / x ) /
rank: 478
score: 99.52559538810483
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 / Erf . 0 )
rank: 478
score: 99.51085316051136
patch: return 0 . - ( 1 . 0 + Erf . erf ( ( x - mean ) / (
rank: 478
score: 99.45157645089286
patch: return ( 1 . 1 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 478
score: 99.35166422526042
patch: return this . 0 . $NUMBER$ * Erf . erf ( ( x - mean )
rank: 478
score: 99.33390085320724
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( $NUMBER$
rank: 479
score: 99.57197902513587
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( int ) mean ) / /
rank: 479
score: 99.55800600405092
patch: return 0 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) /
rank: 479
score: 99.54213645241477
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x / mean ) /
rank: 479
score: 99.53228438527961
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ) /
rank: 479
score: 99.52542818509616
patch: return 0 . $NUMBER$ * ( ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0
rank: 479
score: 99.51068670099431
patch: return 0 . $NUMBER$ * ( 1 . 0 ) + ( 1 . 0 + 1 . 0 ) ;
rank: 479
score: 99.45076904296874
patch: return ( 1 . 0 + ( 1 . 0 ) / ( $NUMBER$ . 0 ) ) ;
rank: 479
score: 99.35147897820724
patch: return ( double ) 0 . $NUMBER$ * ( 1 . 0 + Erf . erf $NUMBER$
rank: 479
score: 99.33358425564236
patch: return 0 . 0 * ( 1 . 0 + 1 <= Erf . erf (
rank: 480
score: 99.57194301060268
patch: double 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / /
rank: 480
score: 99.531982421875
patch: return 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / 0 . 0 )
rank: 480
score: 99.5106201171875
patch: return 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / ( 1 . 0 )
rank: 480
score: 99.45028109163852
patch: return $STRING$ . cumulative CaMeL Probability ( Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; }
rank: 480
score: 99.3514468544408
patch: return 0 . $NUMBER$ + Erf . cumulative CaMeL Probability ( ( x - mean ) /
rank: 480
score: 99.33259020353618
patch: if ( x . equals ( Erf . erf ( ( x - mean ) / (
rank: 481
score: 99.57187680844908
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . get ( ( x - mean ) / mean ) / mean )
rank: 481
score: 99.5578515625
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) - mean ) /
rank: 481
score: 99.54148356119792
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( int ) 1 . 0 ) /
rank: 481
score: 99.53197132457386
patch: return 0 . null * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 481
score: 99.52524099042338
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) / 1 . 0 /
rank: 481
score: 99.51035766601562
patch: return 0 . $NUMBER$ * ( - Erf . erf ( ( x - mean ) / (
rank: 481
score: 99.45024956597223
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( x ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; }
rank: 481
score: 99.35139973958333
patch: return 0 . $NUMBER$ * ( + Erf . erf ( ( x - mean )
rank: 481
score: 99.33236533717105
patch: return 0 . 0 + ( 1 . 0 + Erf . erf ( ( $STRING$ -
rank: 482
score: 99.57165075231481
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ / $NUMBER$ ) /
rank: 482
score: 99.557841796875
patch: return 1 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ ) /
rank: 482
score: 99.54137602306548
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . 0 + ( x - mean ) /
rank: 482
score: 99.5317615327381
patch: return ( 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / mean ) /
rank: 482
score: 99.51033528645833
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( new x - mean )
rank: 482
score: 99.45020926339286
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 482
score: 99.35124969482422
patch: return ( ( x - Erf . erf ( ( x - mean )
rank: 482
score: 99.33103541324013
patch: return 0 . $NUMBER$ * ( 1 . 0 + mean ( ( x - mean ( (
rank: 483
score: 99.57162362557871
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) / erf )
rank: 483
score: 99.55772986778847
patch: return 0 . $NUMBER$ * 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) *
rank: 483
score: 99.53169582201087
patch: return Erf . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 483
score: 99.5096435546875
patch: return 0 . $NUMBER$ * ( 1 . 0 ) + 0 . 0 + ( 1 . 0 ) ;
rank: 483
score: 99.44993189761513
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( this . erf ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 483
score: 99.35112448299633
patch: return new 0 . $NUMBER$ * Erf . erf ( ( x - mean )
rank: 484
score: 99.57161458333333
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( 1 . 0 /
rank: 484
score: 99.54075113932292
patch: return ( 0 . $NUMBER$ * Erf . erf ( ( x - mean ) ;
rank: 484
score: 99.53110573508523
patch: return $NUMBER$ . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 484
score: 99.50961449032738
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . get ( ( x - mean )
rank: 484
score: 99.44963030133928
patch: return ( 0 . 1 * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 484
score: 99.35110473632812
patch: return ( ( double ) ( 1 . 0 + Erf . erf (
rank: 484
score: 99.33089447021484
patch: return 0 . 0 + ( 1 . 0 + x - mean ) /
rank: 485
score: 99.57148799189815
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - 1 ) / mean ) / mean )
rank: 485
score: 99.5572040264423
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ ) ) /
rank: 485
score: 99.540244140625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . Erf . erf ( ( x - mean ) /
rank: 485
score: 99.53052819293478
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / / mean ) ) /
rank: 485
score: 99.5094982328869
patch: return 1 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 485
score: 99.44890485491071
patch: return ( 0 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 1 ) ) ) ) ;
rank: 485
score: 99.35090717516448
patch: double $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 485
score: 99.33076557360198
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x )
rank: 486
score: 99.57145889945652
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x * mean ) / /
rank: 486
score: 99.5569598858173
patch: return 0 . $NUMBER$ + ( 1 . 0 + 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 486
score: 99.53040081521739
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf
rank: 486
score: 99.5091885653409
patch: return 0 . 0 + ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) )
rank: 486
score: 99.448095703125
patch: return 0 . $NUMBER$ * ( 1 . 0 * ( 1 . 0 + mean ) ) ;
rank: 486
score: 99.35035536024306
patch: double x = 0 . $NUMBER$ * Erf . erf ( ( x - mean )
rank: 486
score: 99.33070203993056
patch: return ( 0 . 0 + Erf . erf ( ( x - mean ) -
rank: 487
score: 99.57135881696429
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf 1 . 0 ) /
rank: 487
score: 99.52489217122395
patch: return 0 . $NUMBER$ * ( double ) Erf . erf ( ( x - mean ) / $NUMBER$ . 0 /
rank: 487
score: 99.50909102590461
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) * (
rank: 487
score: 99.44803292410714
patch: return ( ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) )
rank: 487
score: 99.34987278988487
patch: double x = 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 488
score: 99.57133265904018
patch: return 0 . $NUMBER$ / ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / /
rank: 488
score: 99.5399639423077
patch: return 0 . $NUMBER$ * ( ( x - mean ) ;
rank: 488
score: 99.5303067294034
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( x - mean ) / $NUMBER$ . 0 ) /
rank: 488
score: 99.52484685724431
patch: return ( 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 /
rank: 488
score: 99.5078986672794
patch: return 0 . $NUMBER$ * ( x - mean ) / ( standard CaMeL Deviation *
rank: 488
score: 99.34972272600446
patch: return ( ( x . erf ( ( x - mean ) /
rank: 488
score: 99.33022589432566
patch: return ( 0 . 0 / Erf . erf ( ( x - mean ) / (
rank: 489
score: 99.57118326822916
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / ( 1 . 0 + Erf . erf ( ) /
rank: 489
score: 99.55685546875
patch: return 0 . 0 * Erf . erf ( ( x - mean ) . erf ( ( x - mean ) /
rank: 489
score: 99.53990589488636
patch: return 0 . $NUMBER$ << ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 489
score: 99.52478448275862
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 / 1 . 0
rank: 489
score: 99.50787908380681
patch: return 0 . $NUMBER$ * ( 1 . 0 ) / 1 . $NUMBER$ * ( 1 . 0 ) ;
rank: 489
score: 99.44749620225694
patch: return 0 . 0 * ( Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; }
rank: 489
score: 99.32914225260417
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 >= Erf . erf (
rank: 490
score: 99.57102808459052
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / / /
rank: 490
score: 99.53977272727273
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x + mean ) ;
rank: 490
score: 99.53003991168478
patch: if ( 1 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 490
score: 99.52472120715726
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 +
rank: 490
score: 99.5076016512784
patch: return 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) ?
rank: 490
score: 99.34883626302083
patch: return ( double ) Erf . erf ( ( x - mean )
rank: 490
score: 99.32870822482639
patch: double ( ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 491
score: 99.57091413225446
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $STRING$ . 0 ) / /
rank: 491
score: 99.556669921875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - 0 ) - mean ) /
rank: 491
score: 99.52995161576705
patch: return ( 0 . $NUMBER$ + 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 491
score: 99.52432250976562
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - 0 . 0 ) /
rank: 491
score: 99.50739135742188
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( null ) ) ;
rank: 491
score: 99.44706420898437
patch: return 0 . $NUMBER$ * ( 1 . 0 + x / ( $NUMBER$ . 0 ) ) ;
rank: 491
score: 99.34876206341912
patch: return 0 . $NUMBER$ return ( Erf . erf ( ( x - mean )
rank: 491
score: 99.32784016927083
patch: return 0 . 0 + ( 1 . 0 + ( 1 . 0 ) / (
rank: 492
score: 99.55656828703704
patch: if 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 492
score: 99.52981906467014
patch: return 0 . $NUMBER$ * ( ( x - mean ) / 1 . 0 ) /
rank: 492
score: 99.523984375
patch: return ( int ) 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 492
score: 99.50715942382813
patch: return Erf . erf ( ( x - mean ) / ( $NUMBER$ . 0 ) ) ;
rank: 492
score: 99.44680373733108
patch: return null . cumulative CaMeL Probability ( Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; }
rank: 492
score: 99.34870147705078
patch: return 0 . ( Erf . erf ( ( x - mean ) /
rank: 492
score: 99.32757209329044
patch: ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 493
score: 99.5708516438802
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double - mean ) / mean )
rank: 493
score: 99.5565234375
patch: return 0 . 0 * Erf . erf ( Erf . erf ( ( x - mean ) / $NUMBER$ ) /
rank: 493
score: 99.52975331182066
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 0 . ( ) ) /
rank: 493
score: 99.523837890625
patch: return 0 . 0 * Erf . erf ( ( double ) Erf . erf ( ( x - mean ) /
rank: 493
score: 99.50689338235294
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) +
rank: 493
score: 99.44612630208333
patch: return ( 1 . 0 * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; }
rank: 493
score: 99.3484748391544
patch: return ( 0 . 0 + Erf . erf ( ( x - 1 )
rank: 493
score: 99.32748252467105
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( $STRING$ )
rank: 494
score: 99.57074846540179
patch: return 0 . $NUMBER$ * this . 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 494
score: 99.5564495584239
patch: try return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 494
score: 99.5390625
patch: return 0 . $NUMBER$ * ( double ) 1 . $NUMBER$ * Erf . erf ( ( x - mean ) /
rank: 494
score: 99.50685813210227
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) . erf ( ( (
rank: 494
score: 99.34834369860198
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( false -
rank: 495
score: 99.55638709435097
patch: return 0 . $NUMBER$ * Erf . erf ( Erf . erf ( ( x - mean ) / - mean ) /
rank: 495
score: 99.52373676915323
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 +
rank: 495
score: 99.50658069957386
patch: return 0 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) &
rank: 495
score: 99.44603135850694
patch: return 0 . $NUMBER$ * Erf . cumulative CaMeL Probability ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; }
rank: 495
score: 99.34832763671875
patch: return 0 . 0 * ( Erf . erf ( ( x - mean ) *
rank: 496
score: 99.57059733072917
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / mean (
rank: 496
score: 99.5287198153409
patch: return 0 . 0 * Erf . erf ( ( x - mean ) / Erf . erf (
rank: 496
score: 99.523671875
patch: return ( float ) 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 496
score: 99.5065585049716
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) &
rank: 496
score: 99.44577287946429
patch: return ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( 1 . 0 ) ) ) ) ;
rank: 496
score: 99.34819200303819
patch: return ( 0 . 0 + Erf . erf ( ( x + mean ) /
rank: 496
score: 99.32736045435855
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( 1 * Erf . erf (
rank: 497
score: 99.570595703125
patch: return 0 . $NUMBER$ / ( 1 . 0 + Erf . erf ( ( x - mean ) / erf ) /
rank: 497
score: 99.53770955403645
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - double ) mean ) /
rank: 497
score: 99.52839461616848
patch: return ( 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 0 . 0 ) /
rank: 497
score: 99.44528037623355
patch: return cumulative CaMeL Probability ( 0 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 497
score: 99.34817165798611
patch: return 0 . $NUMBER$ * Erf . erf ( ( x + mean ) / (
rank: 498
score: 99.57044270833333
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / . 0 /
rank: 498
score: 99.55624276620371
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) << 1 . 0 ) /
rank: 498
score: 99.53748668323864
patch: return 0 . $NUMBER$ ? ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) /
rank: 498
score: 99.52360288558468
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 / Erf . 0 /
rank: 498
score: 99.50613839285714
patch: return ( 1 . 0 + 1 . 0 + Erf . erf ( ( x - mean )
rank: 498
score: 99.44467075892857
patch: return ( 0 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( 0 . 0 ) ) ) ) ;
rank: 498
score: 99.34810598273026
patch: return 0 . $NUMBER$ * ( 1 != Erf . erf ( ( x - mean )
rank: 498
score: 99.3272705078125
patch: return ( 0 . 0 + Erf . erf ( ( x - mean ) ?
rank: 499
score: 99.57034617456897
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / Erf . erf ( double )
rank: 499
score: 99.556015625
patch: return 0 . $NUMBER$ * Erf . erf ( Erf . erf ( ( x - mean ) << 1 ) /
rank: 499
score: 99.53700949928977
patch: return 0 . $NUMBER$ || ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 499
score: 99.52812364366319
patch: return 0 . $NUMBER$ * ( x - mean ) / ( x - mean ) /
rank: 499
score: 99.50599254261364
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / ( $NUMBER$ . 0
rank: 499
score: 99.44453822544642
patch: return ( 0 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . $NUMBER$ ) ) ) ) ;
rank: 499
score: 99.34802924262152
patch: return - 0 . $NUMBER$ * Erf . erf ( ( x - mean ) /
rank: 499
score: 99.3271484375
patch: return ( 1 . 0 + Erf . erf ( ( x - mean ) ==
rank: 500
score: 99.57028537326389
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) *
rank: 500
score: 99.5559375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) - 0 ) /
rank: 500
score: 99.53678813733552
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) ) /
rank: 500
score: 99.52755126953124
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( x - mean ) / mean ) /
rank: 500
score: 99.50595925071023
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) &
rank: 500
score: 99.44444444444444
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) . 0 ) ;
rank: 500
score: 99.34783614309211
patch: return 0 . $NUMBER$ * Erf . erf ( ( float ) Erf . erf (
rank: 500
score: 99.32700066817434
patch: return 0 . $NUMBER$ * ( 1 . 0 + standard CaMeL Deviation * ( standard CaMeL Deviation
rank: 501
score: 99.57022530691964
patch: return 0 . $NUMBER$ * double ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 501
score: 99.52750651041667
patch: return 0 . $NUMBER$ * ( ( x - Erf . erf ( ( x - mean ) /
rank: 501
score: 99.5229159268466
patch: return 0 . $NUMBER$ / ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) /
rank: 501
score: 99.50595925071023
patch: return 0 . 0 + Erf . erf ( ( x - mean ) / standard CaMeL Deviation ) ;
rank: 501
score: 99.44412392064145
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf < $NUMBER$ ) ;
rank: 501
score: 99.34779188368056
patch: return 0 . $NUMBER$ * ( 1 . Math . sqrt ( ( x - mean )
rank: 501
score: 99.32630679481908
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . 0 + Erf ) ;
rank: 502
score: 99.55577021059783
patch: return ( 1 . $NUMBER$ * Erf . erf ( ( x - mean ) / 1 . 0 ) /
rank: 502
score: 99.52733313519022
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / 1 . mean ) /
rank: 502
score: 99.52284819504311
patch: return 0 . $NUMBER$ * 1 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0
rank: 502
score: 99.50592912946429
patch: return 0 . 0 * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) .
rank: 502
score: 99.4439453125
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 502
score: 99.3473762063419
patch: return ( ( short ) Erf . erf ( ( x - mean ) /
rank: 502
score: 99.32620675223214
patch: return 0 . $NUMBER$ * ( ( x - mean ) / (
rank: 503
score: 99.57017008463542
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . get ( ( x - mean ) / ) /
rank: 503
score: 99.555712890625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) % $NUMBER$ ) /
rank: 503
score: 99.53621419270833
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( 1 . 0 + mean ) / 0 . 0 ) /
rank: 503
score: 99.527099609375
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 0 . mean )
rank: 503
score: 99.52250819052419
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 / Erf . 1 /
rank: 503
score: 99.50573149181548
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x < mean )
rank: 503
score: 99.44357221554488
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( . x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; }
rank: 503
score: 99.34722541360294
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ] /
rank: 503
score: 99.32588918585526
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( Erf
rank: 504
score: 99.5701316550926
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . get ( ( x - mean ) / $NUMBER$ . 0 ) )
rank: 504
score: 99.55562789351852
patch: return 0 . $NUMBER$ * Erf . erf . ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 504
score: 99.535400390625
patch: return 0 . 1 * ( 1 . 0 + Erf . erf ( ( x - mean ) ;
rank: 504
score: 99.52709282769098
patch: return 0 . 0 * Erf . erf ( ( x - mean ) / /
rank: 504
score: 99.50573012408088
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) ==
rank: 504
score: 99.44356595552884
patch: return $NUMBER$ . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 504
score: 99.34721374511719
patch: return 0 . $NUMBER$ * Erf . erf ( ( x >= mean )
rank: 504
score: 99.32583778782895
patch: return 0 . 0 * ( 1 . 0 + 1 == Erf . erf ( )
rank: 505
score: 99.57012728987068
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) / / /
rank: 505
score: 99.52228414601294
patch: return 0 . $NUMBER$ * ( double ) ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 +
rank: 505
score: 99.5054598721591
patch: return 0 . $NUMBER$ * ( ( 1 . $NUMBER$ + Erf . erf ( ( x - mean )
rank: 505
score: 99.34693667763158
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( boolean )
rank: 506
score: 99.55553747106481
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( int - mean ) / 0 . 0 ) /
rank: 506
score: 99.53514607747395
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - double ) mean ) /
rank: 506
score: 99.52677778764205
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf + ( x - mean ) /
rank: 506
score: 99.52220892137096
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 506
score: 99.50540597098214
patch: return 0 . 0 + 0 . 0 + Erf . erf ( ( x - mean ) /
rank: 506
score: 99.44343610491072
patch: return 1 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 506
score: 99.3466796875
patch: return ( double ) 0 . $NUMBER$ * ( ( x - mean )
rank: 506
score: 99.32522101151316
patch: if ( 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / (
rank: 507
score: 99.570068359375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf ) / Erf . erf (
rank: 507
score: 99.55551034432871
patch: return 0 . 0 * Erf . erf ( Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 507
score: 99.5350008877841
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( x - mean ) / 0 . 0 ) ;
rank: 507
score: 99.52656886888587
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / / 1 . $NUMBER$ ) /
rank: 507
score: 99.522041015625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) + 1 . 0
rank: 507
score: 99.50535753038194
patch: return 0 . $NUMBER$ * ( 1 . 0 ) + ( $NUMBER$ . 0 ) ;
rank: 507
score: 99.44320591517857
patch: return ( 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( 1 . 0 ) ) ) ) ;
rank: 508
score: 99.56996848366477
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / $NUMBER$ / / /
rank: 508
score: 99.55532949942129
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . $NUMBER$ ) /
rank: 508
score: 99.52647816051136
patch: return ( ( double ) ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 508
score: 99.50502707741477
patch: return 0 . $NUMBER$ * Math . sqrt ( Erf . erf ( ( x - mean ) / (
rank: 508
score: 99.44295873397436
patch: return 0 . $NUMBER$ * ( 0 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 508
score: 99.34619140625
patch: return return 0 . 0 * Erf . erf ( ( x - mean ) /
rank: 508
score: 99.32492963005515
patch: return ( 1 . $NUMBER$ / Erf . erf ( ( x - mean )
rank: 509
score: 99.56995891702586
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( double ) mean ) / Erf . erf ( ) )
rank: 509
score: 99.55519386574075
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 - mean ) /
rank: 509
score: 99.53474227241848
patch: return ( 1 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) /
rank: 509
score: 99.52194115423387
patch: return 0 . $NUMBER$ * ( 1 . 0 / ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 /
rank: 509
score: 99.504638671875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) [
rank: 509
score: 99.44293047930744
patch: return x . cumulative CaMeL Probability ( Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; }
rank: 509
score: 99.34605577256944
patch: return return ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 509
score: 99.32484837582237
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 * ( x - mean ) /
rank: 510
score: 99.56988525390625
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ /
rank: 510
score: 99.55518740699405
patch: return ( 1 . 0 + Erf . erf ( ( x - mean ) - mean ) /
rank: 510
score: 99.53471235795455
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - $STRING$ ) /
rank: 510
score: 99.52576214334239
patch: return 0 . 0 * Erf . erf ( ( x - mean ) / / 1 . 0 ) /
rank: 510
score: 99.50462757457386
patch: return 0 . $NUMBER$ * ( 0 . 0 + Erf . erf ( ( x - mean ) ,
rank: 510
score: 99.34560032894737
patch: return ( 0 . $NUMBER$ + ( Erf . erf ( ( x - mean ) /
rank: 510
score: 99.32470703125
patch: return 0 . $NUMBER$ * ( 1 . to CaMeL String ( x - mean ) /
rank: 511
score: 99.56986038773148
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) / / /
rank: 511
score: 99.5551288311298
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ,
rank: 511
score: 99.5344950358073
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( $STRING$ + ( x - mean ) /
rank: 511
score: 99.52574462890625
patch: return 0 = ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 511
score: 99.50457208806819
patch: return 0 . 0 + 0 . 0 + Erf . erf ( ( x - mean ) / (
rank: 511
score: 99.44264090401786
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) / ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 511
score: 99.34552680121527
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( int ) 1 . 0
rank: 511
score: 99.32451428865132
patch: try { return 0 . $NUMBER$ * ( 1 . 0 + 1 . 0 ) ; }
rank: 512
score: 99.56971958705357
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / / / /
rank: 512
score: 99.53445434570312
patch: return 0 * 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 512
score: 99.52545720880681
patch: return 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / Erf . erf (
rank: 512
score: 99.50404575892857
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( 1 . 0 + Erf . erf (
rank: 512
score: 99.44239637586806
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) )
rank: 512
score: 99.34543863932292
patch: return 0 . $NUMBER$ * Erf . erf ( ( int ) ( 1 . 0
rank: 513
score: 99.5697021484375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf ) / erf ) /
rank: 513
score: 99.555009765625
patch: return 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) << 0 ) /
rank: 513
score: 99.52170817057292
patch: return 0 . $NUMBER$ * ( double ) 0 . 0 + Erf . erf ( ( x - mean ) /
rank: 513
score: 99.50401722301136
patch: return ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / standard CaMeL Deviation *
rank: 513
score: 99.44217354910714
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( this . erf ) / ( standard CaMeL Deviation * Math . sqrt ( standard CaMeL Deviation *
rank: 513
score: 99.34543185763889
patch: return ( 0 . 0 + Erf . erf ( ( x - 1 ) /
rank: 513
score: 99.32412540211396
patch: return 0 . 0 * ( 1 . 0 + x - mean ) / (
rank: 514
score: 99.56960042317708
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ) *
rank: 514
score: 99.52501831054687
patch: return 0 . 0 * Erf . erf ( ( x - mean ) / mean ) /
rank: 514
score: 99.52149225050404
patch: return 0 . $NUMBER$ / ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 / Erf . 0 /
rank: 514
score: 99.44197591145833
patch: return 0 . $NUMBER$ * ( 1 . 0 + mean ) ; }
rank: 514
score: 99.34526062011719
patch: return 0 . 1 + Erf . erf ( ( x - mean )
rank: 514
score: 99.32402487362133
patch: return 0 . $NUMBER$ * ( 1 . intern ( ( x - mean ) /
rank: 515
score: 99.56953125
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ / $NUMBER$
rank: 515
score: 99.52494673295455
patch: return 0 . $NUMBER$ * ( ( x - Erf . erf ( ( x - mean ) ) /
rank: 515
score: 99.52140561995968
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) / $NUMBER$ . 0 /
rank: 515
score: 99.50361560639881
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) . erf ( (
rank: 515
score: 99.441650390625
patch: return cumulative CaMeL Probability ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * ( $NUMBER$ . 0 ) ) ) ) ;
rank: 515
score: 99.34524356617646
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ,
rank: 516
score: 99.56941731770833
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf 1 . 0 /
rank: 516
score: 99.554912109375
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) << $NUMBER$ ) /
rank: 516
score: 99.53380859375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . MAX
rank: 516
score: 99.52489172894022
patch: return 0 . $NUMBER$ * Erf ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 516
score: 99.52120535714286
patch: return ( double ) ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) /
rank: 516
score: 99.50361071134868
patch: return 1 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / (
rank: 516
score: 99.44164341517858
patch: return ( $NUMBER$ . 0 * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 516
score: 99.32368020450367
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 < standard CaMeL Deviation *
rank: 517
score: 99.56937210648148
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - 1 ) / $NUMBER$ . 0 ) /
rank: 517
score: 99.55483863467262
patch: return ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) - mean ) /
rank: 517
score: 99.5334981282552
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . 0 ) . erf ( ( x - mean ) /
rank: 517
score: 99.52479137073864
patch: return ( 0 . 0 + 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 517
score: 99.52120085685483
patch: return 0 . 0 * ( 1 . 0 * Erf . erf ( ( x - mean ) / $NUMBER$ . 0 / Erf . 0 /
rank: 517
score: 99.50347345525569
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) -
rank: 517
score: 99.44151182432432
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) )
rank: 517
score: 99.34505208333333
patch: return - 0 . $NUMBER$ * ( Erf . erf ( ( x - mean )
rank: 518
score: 99.56927734375
patch: if 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) /
rank: 518
score: 99.55466037326389
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . $NUMBER$ ) *
rank: 518
score: 99.53340657552083
patch: return 0 . $NUMBER$ . 1 * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 518
score: 99.52438221807066
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / / 0 . $NUMBER$ ) /
rank: 518
score: 99.52114572832662
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( int ) Erf . erf ( ( x - mean ) ) /
rank: 518
score: 99.5034412202381
patch: return 0 . $NUMBER$ * 0 + ( Erf . erf ( ( x - mean ) / (
rank: 518
score: 99.44142552425987
patch: return 0 . $NUMBER$ * ( 1 . - Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 519
score: 99.56917317708333
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 + . 0 ) /
rank: 519
score: 99.554609375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ ) +
rank: 519
score: 99.520888671875
patch: return 0 . $NUMBER$ * ( 1 . 0 / ( double ) Erf . erf ( ( x - mean ) /
rank: 519
score: 99.44087611607142
patch: if ( 0 . 0 * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) {
rank: 519
score: 99.34447479248047
patch: return 0 . $NUMBER$ * ( ( x - Erf . erf ( (
rank: 519
score: 99.32306586371527
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 == ( x - mean )
rank: 520
score: 99.55453889266305
patch: return ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . $NUMBER$ ) /
rank: 520
score: 99.5331394361413
patch: return 0 . $NUMBER$ * ( 1 . 0 ) * Erf . erf ( ( x - mean ) /
rank: 520
score: 99.52426292782738
patch: return 0 . 0 * 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 520
score: 99.52084495907738
patch: double Erf = ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 520
score: 99.5029296875
patch: return 0 . 1 + ( 1 . 0 + Erf . erf ( ( x - mean ) )
rank: 520
score: 99.44064592633929
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ; }
rank: 520
score: 99.32187787224265
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 / Erf ) ;
rank: 521
score: 99.55443431712963
patch: return 0 . $NUMBER$ * Erf . erf ( Erf . erf ( ( x - mean ) * 0 . 0 ) /
rank: 521
score: 99.5329833984375
patch: return 0 . $NUMBER$ * ( x - mean ) . erf ( ( x - mean ) /
rank: 521
score: 99.5241366299716
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( float - mean ) /
rank: 521
score: 99.52084350585938
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / $NUMBER$ . 0 + Erf . erf ( ) / $NUMBER$ . 0
rank: 521
score: 99.50291859019886
patch: return 0 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) ;
rank: 522
score: 99.56893920898438
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( double ) mean ) / mean (
rank: 522
score: 99.55429311899039
patch: return 0 . $NUMBER$ * Erf . erf ( 0 . 0 + Erf . erf ( ( x - mean ) ;
rank: 522
score: 99.53271484375
patch: return 0 . $NUMBER$ * 0 . $NUMBER$ * ( 1 . 0 + ( x - mean ) /
rank: 522
score: 99.52392578125
patch: return 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 522
score: 99.50290749289773
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) -
rank: 522
score: 99.43957189611487
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 522
score: 99.34400770399306
patch: return 0 . 0 + ( 1 . 0 + Erf . erf ( ( *
rank: 522
score: 99.32124408922698
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( ! 1
rank: 523
score: 99.56881713867188
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / 0 . 0 ) /
rank: 523
score: 99.55423538773148
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) / $NUMBER$ . $NUMBER$ ) /
rank: 523
score: 99.52044122869319
patch: return 0 . 0 * ( 1 . 0 + Erf . get ( ( x - mean ) /
rank: 523
score: 99.43912527901786
patch: return 0 . 0 * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 523
score: 99.34377712673611
patch: return 0 . $NUMBER$ * ( / Erf . erf ( ( x - mean )
rank: 523
score: 99.3208999633789
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf [
rank: 524
score: 99.56840458622685
patch: double 0 . $NUMBER$ . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) /
rank: 524
score: 99.55422634548611
patch: return ( 1 . 0 + 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) /
rank: 524
score: 99.52356538318452
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double - mean )
rank: 524
score: 99.52042905745968
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 / Erf . 0 /
rank: 524
score: 99.50270774147727
patch: return 0 . 1 * ( 1 . 0 + Erf . erf ( ( x - mean ) ,
rank: 524
score: 99.43899783572635
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) . 0 ) ) ; }
rank: 524
score: 99.34354654947917
patch: return cumulative CaMeL Probability ( 1 . 0 + Erf . erf ( ( x -
rank: 524
score: 99.32082648026316
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( 1 <= Erf . erf (
rank: 525
score: 99.56830444335938
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / $NUMBER$ /
rank: 525
score: 99.55397385817308
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) - erf mean ) /
rank: 525
score: 99.53249104817708
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( 1 . 0 + mean ) / 0 . 0 ) ;
rank: 525
score: 99.52033203125
patch: double Erf = 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 525
score: 99.50269664417614
patch: return 0 . $NUMBER$ * ( 1 . 0 ) + 0 . $NUMBER$ * ( 0 . 0 ) ;
rank: 525
score: 99.43853236607143
patch: return 0 . ( x - Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 525
score: 99.34340948807566
patch: double 0 / ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 526
score: 99.56818757233796
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) / mean )
rank: 526
score: 99.55375614872685
patch: return 0 . $NUMBER$ * Erf . erf ( Erf . erf ( ( x - mean ) << 0 . 0 ) /
rank: 526
score: 99.53231148097827
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . 0 ) / ( ( x - mean ) /
rank: 526
score: 99.52025390625
patch: return 0 . 0 * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / $NUMBER$ . 0
rank: 526
score: 99.50249953497024
patch: return 0 . $NUMBER$ * ( x - Erf . erf ( ( x - mean ) / (
rank: 526
score: 99.438525390625
patch: return 0 . 1 * ( Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 526
score: 99.34330026726974
patch: return 0 . 0 * Erf . erf ( ( x - Erf . erf (
rank: 526
score: 99.32061089409723
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( ( x - mean ) /
rank: 527
score: 99.53213102921195
patch: return ( 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) /
rank: 527
score: 99.51995218211206
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( double ) Erf . erf ( ( x - mean ) /
rank: 527
score: 99.50236372514205
patch: return 0 . 1 * ( 1 . 0 + Erf . erf ( ( x - mean ) ==
rank: 527
score: 99.43844168526786
patch: if ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) {
rank: 527
score: 99.32058919270834
patch: if ( 0 , Erf . erf ( ( x - mean )
rank: 528
score: 99.56790726273148
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( int ) mean ) / Erf . erf (
rank: 528
score: 99.5537442294034
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) ||
rank: 528
score: 99.52333762428977
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / / 0 . 0 +
rank: 528
score: 99.51993290070564
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 / Erf . 0 *
rank: 528
score: 99.50224165482955
patch: return 0 . $NUMBER$ * 1 * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) /
rank: 528
score: 99.43809107730263
patch: return 0 . ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; }
rank: 528
score: 99.34311810661765
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean +
rank: 529
score: 99.56789143880208
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) / mean )
rank: 529
score: 99.55368381076389
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( int - mean ) / $NUMBER$ . 0 ) /
rank: 529
score: 99.53209339488636
patch: return 0 . $NUMBER$ ? ( 1 . 0 * Erf . erf ( ( x - mean ) /
rank: 529
score: 99.5233154296875
patch: return 0 . abs ( ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 529
score: 99.51953125
patch: return 0 . $NUMBER$ * Erf . erf ( ( long ) Erf . erf ( ( x - mean ) /
rank: 529
score: 99.50220404730902
patch: return 0 . 1 * Erf . erf ( ( x - mean ) / (
rank: 529
score: 99.43796037946429
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * 0 . 0 ) ) ) ) ;
rank: 529
score: 99.34305612664474
patch: return ( ( 1 . 0 + Erf . erf ( ( int - mean ) /
rank: 529
score: 99.32017115542763
patch: return 0 . $NUMBER$ * ( 1 . get 1 1 1 ( ( x - mean )
rank: 530
score: 99.55333187705592
patch: return ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) ) /
rank: 530
score: 99.5232821377841
patch: return 0 . 0 + ( 1 . 0 + Erf . erf ( ( double - mean ) /
rank: 530
score: 99.51948073814656
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - 0 . 0 + Erf . erf ( ( x - mean ) /
rank: 530
score: 99.50169735863095
patch: return 1 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean )
rank: 530
score: 99.43754185267858
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * standard CaMeL Deviation ) ) ) ; }
rank: 530
score: 99.34278021918402
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) * (
rank: 530
score: 99.31974069695724
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 / Erf . erf ( (
rank: 531
score: 99.5677490234375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) * / /
rank: 531
score: 99.523193359375
patch: return 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / / 1 . 0 ) /
rank: 531
score: 99.51942180765086
patch: return 0 . $NUMBER$ * Erf . erf ( ( int ) Erf . erf ( ( x - mean ) / $NUMBER$ . 0 +
rank: 531
score: 99.50146484375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x + mean ) +
rank: 531
score: 99.43752790178571
patch: return ( 0 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) +
rank: 531
score: 99.34200710720486
patch: return - 0 . 0 + Erf . erf ( ( x - mean ) /
rank: 531
score: 99.31928846571181
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf != 0 . 0 )
rank: 532
score: 99.56756591796875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . get ( ( x - mean ) / mean )
rank: 532
score: 99.553046875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) - mean ) )
rank: 532
score: 99.5231201171875
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / ) /
rank: 532
score: 99.5194140625
patch: return 0 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0
rank: 532
score: 99.43703811233108
patch: return 0 . $NUMBER$ * 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 532
score: 99.31918770926339
patch: return ( ( Erf . erf ( ( x - mean )
rank: 533
score: 99.5675557454427
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( double ) mean ) / erf (
rank: 533
score: 99.5192450161638
patch: return 0 . 0 * Erf . erf ( ( int ) Erf . erf ( ( x - mean ) / $NUMBER$ . 0 /
rank: 533
score: 99.50128851996527
patch: return 0 . $NUMBER$ * 1 * Erf . erf ( ( x - mean )
rank: 533
score: 99.43634905133929
patch: if ( 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) {
rank: 533
score: 99.34047444661458
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) *
rank: 533
score: 99.31915642233456
patch: return 0 . $NUMBER$ * ( 1 . 0 + x - - mean ) ;
rank: 534
score: 99.56754557291667
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf ( $NUMBER$ ) /
rank: 534
score: 99.5529033954327
patch: return 0 . $NUMBER$ * 1 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) *
rank: 534
score: 99.5305887858073
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - double ) mean ) /
rank: 534
score: 99.52308238636364
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( 1 . 0 +
rank: 534
score: 99.51890908518145
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . $NUMBER$ ) / $NUMBER$ . 0 /
rank: 534
score: 99.50120960582386
patch: return 0 . $NUMBER$ + Erf . erf ( ( x - mean ) + ( standard CaMeL Deviation *
rank: 534
score: 99.43607003348214
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ; ;
rank: 534
score: 99.34041555304276
patch: return 0 . $NUMBER$ + ( 1 == Erf . erf ( ( x - mean )
rank: 535
score: 99.56752748842592
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf 1 . 0 +
rank: 535
score: 99.5528515625
patch: return 0 . $NUMBER$ * ( 0 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ ) /
rank: 535
score: 99.5302734375
patch: return 0 . $NUMBER$ * ( 1 . 0 ( Erf . erf ( ( x - mean ) ;
rank: 535
score: 99.52299572172619
patch: return ( 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / mean ) /
rank: 535
score: 99.5187752016129
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) / $NUMBER$ . 0 +
rank: 535
score: 99.50107293379934
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) , (
rank: 535
score: 99.43576462204392
patch: return 0 . $NUMBER$ * 0 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 535
score: 99.34015570746527
patch: return 0 . $NUMBER$ * 1 == Erf . erf ( ( x - mean )
rank: 535
score: 99.31895616319444
patch: return ( 1 . 0 + Erf . erf ( ( x - mean ) -
rank: 536
score: 99.56751019021739
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - 1 ) / /
rank: 536
score: 99.52998046875
patch: return 0 . $NUMBER$ * Math . max ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 536
score: 99.52295983355978
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / return
rank: 536
score: 99.51851530997983
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) / 0 . 0 /
rank: 536
score: 99.50083705357143
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean +
rank: 536
score: 99.43565150669643
patch: return ( 0 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . min ( $NUMBER$ . 0 ) ) ) ) ;
rank: 536
score: 99.34002326516544
patch: return 0 . $NUMBER$ + Erf . erf ( ( x - mean ) *
rank: 537
score: 99.56740993923611
patch: return 0 . $NUMBER$ / ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) / mean )
rank: 537
score: 99.55266779119319
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( 1 . 0 + Erf . erf ) /
rank: 537
score: 99.52974446614583
patch: return 0 . $NUMBER$ . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 537
score: 99.52281122622283
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / / $NUMBER$ . $NUMBER$ ) /
rank: 537
score: 99.50077681107955
patch: return 0 . 0 + Erf . erf ( ( x - mean ) + ( standard CaMeL Deviation *
rank: 537
score: 99.43553331163194
patch: return cumulative CaMeL Probability ( x , Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 537
score: 99.33970240542763
patch: return 0 . 0 + Erf . erf ( ( x - Erf . erf (
rank: 537
score: 99.31880187988281
patch: return 0 . max ( Erf . erf ( ( x - mean )
rank: 538
score: 99.56739856350806
patch: return 0 . $NUMBER$ * 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 538
score: 99.552607421875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / out ) /
rank: 538
score: 99.52896781589673
patch: return 0 . $NUMBER$ $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 538
score: 99.52280061141305
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / 0 . $NUMBER$ ) /
rank: 538
score: 99.51821604082662
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 *
rank: 538
score: 99.50067693536931
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) -
rank: 538
score: 99.43550618489583
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) . 0 ) ) ; }
rank: 538
score: 99.33967420789931
patch: return $STRING$ . cumulative CaMeL Probability ( 1 . 0 + ( x - mean ) /
rank: 539
score: 99.56737377025463
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / $NUMBER$ . 0 ) *
rank: 539
score: 99.55253269361413
patch: return ( 0 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 539
score: 99.52855428059895
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( double ) 1 . 0 + ( x - mean ) /
rank: 539
score: 99.52278645833333
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( x - mean ) / 0 . 0 +
rank: 539
score: 99.43363872327302
patch: return 0 . ( 0 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; }
rank: 539
score: 99.33931692023026
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( byte )
rank: 540
score: 99.56703694661458
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / Erf . erf ( ) )
rank: 540
score: 99.55250901442308
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / true ) ) /
rank: 540
score: 99.52825372869319
patch: return 0 . $NUMBER$ * ( 1 . 0 / Erf . erf ( ( x - mean ) ;
rank: 540
score: 99.51763325352823
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 / Erf . 0 +
rank: 540
score: 99.50012817382813
patch: return 0 . $NUMBER$ * 1 + Erf . erf ( ( x - mean ) ) ;
rank: 540
score: 99.43361253004808
patch: return 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 540
score: 99.33930799696181
patch: return ( ( 1 . $NUMBER$ * Erf . erf ( ( x - mean )
rank: 540
score: 99.31798638237848
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( x -
rank: 541
score: 99.566982421875
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) / mean ) )
rank: 541
score: 99.52824263139205
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) <<
rank: 541
score: 99.51742061491936
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( int ) mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 ;
rank: 541
score: 99.50011097301136
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) ]
rank: 541
score: 99.43354992988782
patch: return 0 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 541
score: 99.33926052517361
patch: return 0 . 0 * ( ( x . erf ( ( x - mean ) /
rank: 542
score: 99.56696686921296
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - 0 ) / mean ) / mean )
rank: 542
score: 99.55162556966145
patch: return ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / 0 . 0 ) ) ;
rank: 542
score: 99.51740056818181
patch: return ( 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 +
rank: 542
score: 99.49983045789931
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) +
rank: 542
score: 99.43316650390625
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ * ( 1 . 0 ) ) ;
rank: 542
score: 99.33909696691177
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean 1 /
rank: 542
score: 99.31729329427084
patch: return 0 . 0 + ( 1 . 0 + x - mean )
rank: 543
score: 99.56693699048913
patch: return 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) /
rank: 543
score: 99.5514667217548
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . $NUMBER$ )
rank: 543
score: 99.52805397727273
patch: return 0 . $NUMBER$ && ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 543
score: 99.52179509943181
patch: return 0 . $NUMBER$ * ( x - mean ) / 1 . 0 + ( x - mean ) /
rank: 543
score: 99.49967447916667
patch: return 0 . 0 + ( 1 . 0 * Erf . erf ( ( x - mean )
rank: 543
score: 99.43270534939236
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * ( $NUMBER$ . 0 ) ) ) ) ;
rank: 543
score: 99.31724717881944
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( System
rank: 544
score: 99.566767578125
patch: return 0 . $NUMBER$ * ( 1 . 0 + $STRING$ + Erf . erf ( ( x - mean ) / /
rank: 544
score: 99.55140625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ ) *
rank: 544
score: 99.49953206380208
patch: return 0 . $NUMBER$ * ( 1 . 0 ) / ( 1 . $NUMBER$ ) ;
rank: 544
score: 99.43177208533653
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 544
score: 99.3389892578125
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( true -
rank: 544
score: 99.31710815429688
patch: return 0 . $NUMBER$ + ( 1 . 0 + x - mean ) ;
rank: 545
score: 99.5666924838362
patch: return 0 . $NUMBER$ . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) /
rank: 545
score: 99.55136899594908
patch: return 0 . $NUMBER$ * ( 1 . 0 - Erf . erf ( ( x - mean ) / 1 . 0 ) /
rank: 545
score: 99.52769886363636
patch: return 0 . $NUMBER$ ? ( 1 . 0 + Erf . erf ( ( x - mean ) ;
rank: 545
score: 99.5217815896739
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / Erf . get CaMeL
rank: 545
score: 99.51655430947581
patch: return 0 . $NUMBER$ / ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 +
rank: 545
score: 99.43147786458333
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * standard CaMeL Deviation . 0 ) ) ) ;
rank: 545
score: 99.33888244628906
patch: return 0 . $NUMBER$ * ( Math . erf ( ( x - mean )
rank: 545
score: 99.31703694661458
patch: return 0 . 0 + ( 1 . 0 + ( x - mean ) / (
rank: 546
score: 99.55126048900463
patch: return 0 . 0 * ( 1 . 0 * Erf . erf ( ( x - mean ) / 0 . 0 ) /
rank: 546
score: 99.52707391036184
patch: return 0 . $NUMBER$ . $NUMBER$ * Erf . erf ( ( x - mean ) /
rank: 546
score: 99.52147327769886
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / 0 . 0 )
rank: 546
score: 99.5163810483871
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . get ( Erf . erf ( ( x - mean ) / $NUMBER$ . 0 +
rank: 546
score: 99.499267578125
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / standard CaMeL Deviation *
rank: 546
score: 99.43116519325658
patch: return cumulative CaMeL Probability ( ( x - mean ) / ( $NUMBER$ . 0 ) ) ;
rank: 546
score: 99.33818817138672
patch: return 0 . 0 + ( 1 . 0 + Erf . erf (
rank: 546
score: 99.31681100945724
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( 1 == Erf . erf (
rank: 547
score: 99.56665943287037
patch: return 0 . $NUMBER$ * Math . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / /
rank: 547
score: 99.52705891927083
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - long ) mean ) /
rank: 547
score: 99.52146314538044
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / MAX
rank: 547
score: 99.49862816220238
patch: return 0 . $NUMBER$ * ( standard CaMeL Deviation * Math . sqrt ( 0 . 0 ) ) ;
rank: 547
score: 99.43107524671052
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . x - mean ) ;
rank: 547
score: 99.33817331414474
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( int ,
rank: 548
score: 99.566328125
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / mean ) *
rank: 548
score: 99.5509033203125
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) << 0 . 0 ) ;
rank: 548
score: 99.52703302556819
patch: return ( 1 . $NUMBER$ * 1 . $NUMBER$ + Erf . erf ( ( x - mean ) /
rank: 548
score: 99.5214510830966
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / / $NUMBER$ . 0 )
rank: 548
score: 99.51620778729838
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 + Erf . 0 +
rank: 548
score: 99.43037109375
patch: return - 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; }
rank: 548
score: 99.33755653782895
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( true +
rank: 548
score: 99.31625705295139
patch: return 0 . $NUMBER$ * ( 1 . max ( ( x - mean ) / (
rank: 549
score: 99.56623077392578
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / Erf . erf (
rank: 549
score: 99.55068137428977
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf - ( x - mean ) /
rank: 549
score: 99.52693684895833
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - 0 . 0 ) /
rank: 549
score: 99.5212158203125
patch: return 0 . $NUMBER$ * ( ( x - mean ) / ( x - mean ) ) /
rank: 549
score: 99.51579284667969
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 / Erf . 0 ) /
rank: 549
score: 99.49578247070312
patch: return 0 . $NUMBER$ * erf ( Erf . erf ( ( x - mean ) / (
rank: 549
score: 99.43026968149039
patch: return 0 . $NUMBER$ * ( $NUMBER$ . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 549
score: 99.31575012207031
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + x - mean ) ;
rank: 550
score: 99.56614635836694
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / Erf . double CaMeL Value ( ) /
rank: 550
score: 99.5209430197011
patch: return 0 . 0 * ( x - mean ) / Erf . erf ( ( x - mean ) /
rank: 550
score: 99.49555520450367
patch: return 0 . $NUMBER$ * ( this . erf ( ( x - mean ) /
rank: 550
score: 99.42991236636513
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 550
score: 99.33729383680556
patch: return 0 . $NUMBER$ * Erf . erf ( ( x . erf ( ( x
rank: 550
score: 99.31566704644098
patch: return ( 1 . 0 + Erf . erf ( ( x - mean ) ?
rank: 551
score: 99.56613498263889
patch: double . return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) /
rank: 551
score: 99.55040564903847
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 1 . 0 ) / 0 . 0 *
rank: 551
score: 99.5266621907552
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ( $STRING$ ) /
rank: 551
score: 99.51572053328805
patch: return 0 . $NUMBER$ / ( 1 . 0 + Erf . erf ( ( x - mean ) ) /
rank: 551
score: 99.49545627170139
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) ,
rank: 551
score: 99.42972237723214
patch: return ( 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 1 ) ) ) ) ;
rank: 551
score: 99.33716498480902
patch: return return 0 . 0 + Erf . erf ( ( x - mean ) /
rank: 552
score: 99.55029296875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) + 0 . $NUMBER$ ) /
rank: 552
score: 99.5265604654948
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / mean ) / mean ) ;
rank: 552
score: 99.52086292613636
patch: if ( 0 . $NUMBER$ * 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 552
score: 99.49498930431548
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x >= mean )
rank: 552
score: 99.42950613839285
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) . ) ) ; }
rank: 552
score: 99.33715102251838
patch: return 0 . $NUMBER$ * ( Erf . erf ( x - mean ) /
rank: 552
score: 99.31480006167763
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( 1 < Erf . erf (
rank: 553
score: 99.56579168911638
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ / $NUMBER$ . 0 / /
rank: 553
score: 99.5502460186298
patch: return 1 . $NUMBER$ * 1 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 553
score: 99.52056329900569
patch: return 0 . $NUMBER$ = ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 553
score: 99.51549711681548
patch: return ( double ) ( 0 . $NUMBER$ + Erf . erf ( ( x - mean ) /
rank: 553
score: 99.42901141826923
patch: return 0 . 0 * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 553
score: 99.33712607935855
patch: double x = 1 . 0 * Erf . erf ( ( x - mean ) /
rank: 553
score: 99.31479899088542
patch: try { return 0 . $NUMBER$ * ( 1 . 0 + 1 . 0 ) ;
rank: 554
score: 99.56577555338542
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - start ) / mean )
rank: 554
score: 99.55013925057871
patch: return 1 . $NUMBER$ * Erf . erf ( Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 554
score: 99.51530317826705
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - 1 ) /
rank: 554
score: 99.494775390625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( this ) ) ;
rank: 554
score: 99.42896792763158
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf $NUMBER$ ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 554
score: 99.33680635340073
patch: return new double [ ] { Erf . erf ( ( x - mean )
rank: 554
score: 99.31446597450658
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( 1 >= Erf . erf (
rank: 555
score: 99.56572895665323
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ) / 0 . 0 * ( 1 . 0 + Erf . erf )
rank: 555
score: 99.54976196289063
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) << 0 ) /
rank: 555
score: 99.5262784090909
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( 0 . 0 mean ) /
rank: 555
score: 99.52011506453805
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / $NUMBER$ . $NUMBER$ ) /
rank: 555
score: 99.51523659446023
patch: return 0 . $NUMBER$ / ( 1 . 0 + Erf . erf ( ( x - mean ) *
rank: 555
score: 99.49468994140625
patch: return 0 . $NUMBER$ * ( x - mean ) / ( x - mean ) ;
rank: 555
score: 99.4287109375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; }
rank: 555
score: 99.336669921875
patch: return 0 . 0 + ( ( x . erf ( ( x - mean ) /
rank: 555
score: 99.31430535567434
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( ( x - mean ) / (
rank: 556
score: 99.56564331054688
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / / *
rank: 556
score: 99.54954892113095
patch: return 0 . $NUMBER$ * 1 . 0 * Erf . erf ( ( x - mean ) ;
rank: 556
score: 99.52614524147727
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( double ) mean ) /
rank: 556
score: 99.5200832201087
patch: return 0 . $NUMBER$ * Erf ( ( x - mean ) / Erf ( x - mean ) /
rank: 556
score: 99.51480887276786
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / double . MIN _ VALUE ) / double . MIN _ VALUE /
rank: 556
score: 99.42832728794643
patch: return Math . length ( Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; }
rank: 556
score: 99.33665466308594
patch: return 0 . 0 * Erf . ( ( x - mean ) /
rank: 556
score: 99.31426642922794
patch: return ( ( 0 == Erf . erf ( ( x - mean ) /
rank: 557
score: 99.56494140625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / Erf . length ( ) )
rank: 557
score: 99.52570906929348
patch: return return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 557
score: 99.51981784986413
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( x + mean ) /
rank: 557
score: 99.51471502130681
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / $NUMBER$ . 0 +
rank: 557
score: 99.49447777157738
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) + mean ) /
rank: 557
score: 99.42783900669643
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( this . erf ( $NUMBER$ . 0 ) ) ) ) ;
rank: 557
score: 99.33642578125
patch: return - $NUMBER$ . $NUMBER$ * Erf . erf ( ( x - mean )
rank: 557
score: 99.314208984375
patch: return - 0 . $NUMBER$ * ( 1 . 0 + 1 . 0 ) ;
rank: 558
score: 99.56492565524194
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / 0 . 0 )
rank: 558
score: 99.5256014737216
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x < mean ) ;
rank: 558
score: 99.51979758522727
patch: return 0 . $NUMBER$ * ( x - mean ) / 0 . $NUMBER$ + ( x - mean ) /
rank: 558
score: 99.51466418850806
patch: return 0 . $NUMBER$ * ( 0 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 /
rank: 558
score: 99.49442749023437
patch: return 0 . $NUMBER$ * ( 1 . this . erf ( ( x - mean ) / (
rank: 558
score: 99.42783453525641
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( 1 . 0 ) ) ) ) ;
rank: 558
score: 99.33616009880515
patch: return ( ( int ) ( 1 . 0 + ( x - mean ) /
rank: 558
score: 99.3141860961914
patch: return 0 . $NUMBER$ * ( 1 . abs ( x - mean ) /
rank: 559
score: 99.56490773168103
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( double ) mean ) / Erf . erf ( ) /
rank: 559
score: 99.52508544921875
patch: return 0 . $NUMBER$ * ( 1 . 0 . 1 + Erf . erf ( ( x - mean ) /
rank: 559
score: 99.51969770951705
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - ) ) /
rank: 559
score: 99.51460905997983
patch: return 0 . $NUMBER$ * Erf . erf ( ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 +
rank: 559
score: 99.49384998139881
patch: return 0 . $NUMBER$ * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . $NUMBER$ ) ) .
rank: 559
score: 99.42719184027777
patch: return ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; ;
rank: 559
score: 99.33596801757812
patch: return 0 . $NUMBER$ + ( 1 . 0 + ( x - mean )
rank: 560
score: 99.56484880118535
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) / Erf . erf ( ) /
rank: 560
score: 99.51430979082662
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( int ) mean ) / $NUMBER$ . 0 / Erf . 0 /
rank: 560
score: 99.42702834670608
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf / ( standard CaMeL Deviation * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; }
rank: 560
score: 99.3358154296875
patch: return 0 . 0 * ( Erf . erf ( ( x - 1 )
rank: 560
score: 99.31401909722223
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( this ,
rank: 561
score: 99.56456502278645
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( double ) mean ) / mean )
rank: 561
score: 99.54877178485577
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / length ) ) /
rank: 561
score: 99.52505493164062
patch: return 0 * 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 561
score: 99.51886541193181
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - round ) /
rank: 561
score: 99.49359421502976
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( $NUMBER$ . 0
rank: 561
score: 99.33577234604779
patch: return 0 . 0 * ( Erf . erf ( ( int - mean )
rank: 561
score: 99.31390021829044
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 / standard CaMeL Deviation *
rank: 562
score: 99.56453975554436
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 + Erf . erf (
rank: 562
score: 99.54869666466347
patch: return ( 1 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ ) /
rank: 562
score: 99.52491251627605
patch: return 0 . $NUMBER$ . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) /
rank: 562
score: 99.51879272460937
patch: return 0 . $NUMBER$ * Erf ( ( x - mean ) / 1 . 0 ) /
rank: 562
score: 99.51427112926136
patch: return 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) ;
rank: 562
score: 99.49298967633929
patch: return 0 . 0 * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . $NUMBER$ ) ) ;
rank: 562
score: 99.42657470703125
patch: return ( 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; ;
rank: 562
score: 99.33554256663604
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( max - mean )
rank: 562
score: 99.31388636997768
patch: return 0 == Erf . erf ( ( x - mean )
rank: 563
score: 99.56442057291666
patch: return 0 . 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / /
rank: 563
score: 99.54867788461539
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / 0 . 0 *
rank: 563
score: 99.52489217122395
patch: return ( 1 . $NUMBER$ * Erf . erf ( ( x - mean ) / 0 . 0 ) ) ;
rank: 563
score: 99.5186434659091
patch: return 0 . 0 + Erf . erf ( ( x - mean ) / 0 . $NUMBER$ ) /
rank: 563
score: 99.51410502772177
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / 1 . 0 +
rank: 563
score: 99.49291314019098
patch: return 0 . $NUMBER$ * ( 1 . 0 + erf ( ( x - mean )
rank: 563
score: 99.31331140854779
patch: return 0 . 0 + ( 1 . 0 + x - mean ) / (
rank: 564
score: 99.56423950195312
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean .
rank: 564
score: 99.54867440682871
patch: return ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / 0 . 0 ) / $NUMBER$ . 0 )
rank: 564
score: 99.52382590553977
patch: return 0 . $NUMBER$ >> ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 564
score: 99.51392711292614
patch: return 0 . 0 * Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) ;
rank: 564
score: 99.49287341889881
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x + mean )
rank: 564
score: 99.42579520089286
patch: return ( 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . $NUMBER$ ) ) ) ) ;
rank: 564
score: 99.33531951904297
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( byte ) 0
rank: 565
score: 99.5641377766927
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / mean ) / mean ) /
rank: 565
score: 99.52352241847827
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( 0 . 0 + mean ) /
rank: 565
score: 99.51362462197581
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . get ( Erf . erf ( ( x - mean ) / $NUMBER$ . 0 /
rank: 565
score: 99.49255981445313
patch: return 0 . $NUMBER$ * ( + Erf . erf ( ( x - mean ) / (
rank: 565
score: 99.42561848958333
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ++ ) ;
rank: 565
score: 99.33526611328125
patch: return $STRING$ . 0 * Erf . erf ( ( x - mean )
rank: 566
score: 99.56404359879032
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double - mean ) / $NUMBER$ . 0 + Erf . erf (
rank: 566
score: 99.548154296875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) & $NUMBER$ ) /
rank: 566
score: 99.52306111653645
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) 0 . 0 ) /
rank: 566
score: 99.5183438387784
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 0 . 0 ) )
rank: 566
score: 99.51360887096774
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) / $NUMBER$ . 0 )
rank: 566
score: 99.42550320095486
patch: return 0 . $NUMBER$ * 1 . 0 * ( 1 . 0 + mean ) ;
rank: 566
score: 99.33517116970486
patch: return 0 . $NUMBER$ * Erf . erf ( ( 1 . max - mean )
rank: 567
score: 99.56346842447917
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) * mean ) / Erf . erf (
rank: 567
score: 99.54810474537037
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / $NUMBER$ . $NUMBER$ ) /
rank: 567
score: 99.51821501358695
patch: return 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / / $NUMBER$ . 0 ) /
rank: 567
score: 99.51358524445564
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 / double . 0 ) /
rank: 567
score: 99.490966796875
patch: return 0 . 0 + 1 . $NUMBER$ + Erf . erf ( ( x - mean ) /
rank: 567
score: 99.42487444196429
patch: return ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ?
rank: 567
score: 99.33513440583882
patch: return ( ( 1 . 0 + Erf . erf ( ( byte - mean ) /
rank: 567
score: 99.31312320106908
patch: if ( ( 0 . 0 + Erf . erf ( ( x - mean ) )
rank: 568
score: 99.56344604492188
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double - mean ) / / /
rank: 568
score: 99.54792924360795
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( int - mean ) *
rank: 568
score: 99.51799926757812
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / / ) /
rank: 568
score: 99.51333322832662
patch: return 0 . $NUMBER$ * ( 1 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 /
rank: 568
score: 99.42484427787163
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 568
score: 99.31293596540179
patch: if ( Erf . erf ( ( x - mean ) /
rank: 569
score: 99.5633544921875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ / $NUMBER$ . 0 ) / /
rank: 569
score: 99.51762058423913
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( double ) mean ) /
rank: 569
score: 99.42455357142858
patch: return return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; }
rank: 569
score: 99.33507582720588
patch: return new cumulative CaMeL Probability ( Erf . erf ( ( x - mean )
rank: 570
score: 99.54786964699075
patch: return 0 . $NUMBER$ * Erf . erf * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 570
score: 99.52278999660327
patch: return 0 . $NUMBER$ * ( x - mean ) / Erf . erf ( ( x - mean ) ;
rank: 570
score: 99.51739211309524
patch: return 0 . * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 570
score: 99.5131127142137
patch: return 0 . $NUMBER$ * ( 1 . 0 / ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 +
rank: 570
score: 99.49004836309524
patch: return 0 . $NUMBER$ * ( $STRING$ . 0 + Erf . erf ( ( x - mean )
rank: 570
score: 99.4245355068109
patch: return 0 . 1 * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 570
score: 99.33489026521382
patch: return 0 . $NUMBER$ * Erf . erf ( ( short ) Erf . erf (
rank: 570
score: 99.31276568244485
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( 1 == 1 . 0
rank: 571
score: 99.5478515625
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) - min ) /
rank: 571
score: 99.52272727272727
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x / mean ) ;
rank: 571
score: 99.51735617897727
patch: return 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / 0 . mean ) /
rank: 571
score: 99.42447916666667
patch: return ( 0 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 571
score: 99.33414035373264
patch: return 0 . $NUMBER$ * Erf . erf . erf ( ( x - mean )
rank: 571
score: 99.31267632378473
patch: return 0 . 0 * ( 1 . get 1 ( ( x - mean ) /
rank: 572
score: 99.56254069010417
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean /
rank: 572
score: 99.54777922453704
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) / 1 . $NUMBER$ ) /
rank: 572
score: 99.522705078125
patch: return erf 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 572
score: 99.48906017485119
patch: return 0 . 1 + ( 1 . $NUMBER$ + Erf . erf ( ( x - mean )
rank: 572
score: 99.42444893973214
patch: return $STRING$ . equals ( Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; }
rank: 572
score: 99.3341128700658
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x -
rank: 572
score: 99.31245930989583
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ) /
rank: 573
score: 99.56207064924568
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 + 1 ) /
rank: 573
score: 99.51687622070312
patch: return 0 . $NUMBER$ * 1 . 0 * ( x - mean ) /
rank: 573
score: 99.51255355342742
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) / 1 . 0 /
rank: 573
score: 99.48887125651042
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) ?
rank: 573
score: 99.42386771537163
patch: return cumulative CaMeL Probability ( 1 . 0 + Erf . erf ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; }
rank: 573
score: 99.33384195963542
patch: return ( 1 . 0 + Erf . erf ( ( x - 1 ) /
rank: 573
score: 99.31182183159723
patch: return ( 0 . 0 + Erf . erf ( ( x - mean ) &
rank: 574
score: 99.56186311141305
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $STRING$
rank: 574
score: 99.54769193209134
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 *
rank: 574
score: 99.51681082589286
patch: return ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) /
rank: 574
score: 99.48870171440973
patch: return 0 . $NUMBER$ * ( 1 . 0 ) / ( $NUMBER$ . 0 ) ;
rank: 574
score: 99.4232078758446
patch: return 0 . $NUMBER$ * 1 . 0 * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 574
score: 99.3335952758789
patch: return ( ( Integer ) Erf . erf ( ( x - mean )
rank: 574
score: 99.31169690583882
patch: return 0 . $NUMBER$ * ( ( 1 . 0 ) + Erf . erf ( (
rank: 575
score: 99.5222500887784
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 0 . $NUMBER$ ) ;
rank: 575
score: 99.51664402173913
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 1 . 0 ) ) /
rank: 575
score: 99.51207778033088
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / $NUMBER$ . 0 + Erf . erf ( ) / $NUMBER$ . 0 ) ;
rank: 575
score: 99.48869977678571
patch: return 0 . $NUMBER$ * Erf . erf ( ) . erf ( ( x - mean ) /
rank: 575
score: 99.42234971788194
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; }
rank: 575
score: 99.33355391652961
patch: return 0 . 0 + ( 1 . 0 + Erf . erf ( ( x ,
rank: 575
score: 99.31133069490132
patch: double ( 0 . 0 + Erf . erf ( ( x - mean ) / (
rank: 576
score: 99.56172688802083
patch: return 0 . $NUMBER$ / ( 1 . 0 + Erf . erf ( ( x - mean ) / mean (
rank: 576
score: 99.547607421875
patch: return 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) * 1 . 0 ) /
rank: 576
score: 99.51626441592262
patch: return 0 . $NUMBER$ * Erf ( ( x - mean ) / ( x - mean ) /
rank: 576
score: 99.5118741122159
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( int ) mean ) /
rank: 576
score: 99.48837890625
patch: return 0 . $NUMBER$ * 1 * Erf . erf ( ( x - mean ) / (
rank: 576
score: 99.42196568080357
patch: return ( 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ?
rank: 576
score: 99.33340115017361
patch: return ( ( $NUMBER$ . 0 + Erf . erf ( ( x - mean )
rank: 576
score: 99.30985753676471
patch: if ( 0 . 0 * Erf . erf ( ( x - mean )
rank: 577
score: 99.56167602539062
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - 1 ) / mean )
rank: 577
score: 99.51172662550404
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . get ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 +
rank: 577
score: 99.48810686383929
patch: return 0 . $NUMBER$ * ( 1 . 0 ) + 1 . 0 + Erf . erf (
rank: 577
score: 99.42192247178819
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . 0 + $NUMBER$ ) ;
rank: 577
score: 99.30975020559211
patch: return 0 . $NUMBER$ * ( 1 . max . ( ( x - mean ) / (
rank: 578
score: 99.51618787977431
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( x - mean ) / /
rank: 578
score: 99.48772321428571
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x + mean )
rank: 578
score: 99.3331298828125
patch: return 0 . 0 * ( 1 * Erf . erf ( ( x - mean )
rank: 579
score: 99.56133626302083
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) / mean ) /
rank: 579
score: 99.54751953125
patch: return 0 . $NUMBER$ * Erf . erf ( Erf . erf ( ( x - mean ) / 1 ) /
rank: 579
score: 99.51589133522727
patch: return 1 . $NUMBER$ * Erf . erf ( ( x - mean ) / 0 . 0 ) /
rank: 579
score: 99.487548828125
patch: return 0 . $NUMBER$ + 0 . 0 + Erf . erf ( ( x - mean ) /
rank: 579
score: 99.42080849095395
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf , x - mean ) ;
rank: 580
score: 99.5475
patch: return 1 . $NUMBER$ * Erf . erf ( ( x - mean ) . erf ( ( x - mean ) /
rank: 580
score: 99.51582475142045
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( x - mean ) / Erf . erf (
rank: 580
score: 99.51123046875
patch: return 0 . 0 * ( ( 0 . 0 + Erf . erf ( ( x - mean ) /
rank: 580
score: 99.4204165810033
patch: return cumulative CaMeL Probability ( 1 . 0 * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 580
score: 99.30950568704044
patch: return 0 . $NUMBER$ * ( 1 . contains ( x - mean ) / (
rank: 581
score: 99.56130981445312
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / / /
rank: 581
score: 99.54742901141827
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 ) ) /
rank: 581
score: 99.52153015136719
patch: return 0 . $NUMBER$ * 1 . $NUMBER$ * ( x - mean ) /
rank: 581
score: 99.51553548177084
patch: return 0 . $NUMBER$ * Erf ( ( x - mean ) /
rank: 581
score: 99.4869384765625
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x + mean ) / (
rank: 581
score: 99.41980310388513
patch: return 0 . $NUMBER$ * 0 . 0 * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 581
score: 99.30934544613487
patch: return 0 . 0 * ( 1 . 0 + 1 . 0 + standard CaMeL Deviation *
rank: 582
score: 99.5609930630388
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ( x - mean ) / $NUMBER$ . 0 ) /
rank: 582
score: 99.54691116898148
patch: return 0 . $NUMBER$ * ( 1 . 0 * ( 1 . 0 * Erf . erf ( ( x - mean ) /
rank: 582
score: 99.52147327769886
patch: return 0 . 0 * ( 1 . 0 * Erf . erf ( ( x - mean ) ;
rank: 582
score: 99.51531110491071
patch: return ( 0 . 0 + Erf . erf ( ( x - mean ) / mean ) /
rank: 582
score: 99.51082094254032
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 /
rank: 582
score: 99.48692103794643
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean /
rank: 582
score: 99.41960592830883
patch: return 0 . 0 * ( 1 . 0 + 1 . 0 ) ; }
rank: 582
score: 99.30901336669922
patch: ( 0 . 0 + Erf . erf ( ( x - mean )
rank: 583
score: 99.56092418323864
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . get ( ( x - mean ) /
rank: 583
score: 99.546904296875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) * min ) /
rank: 583
score: 99.52141974954044
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( x - mean ) ;
rank: 583
score: 99.51528785342262
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) - mean ) /
rank: 583
score: 99.51073056175595
patch: return 0 . 0 * ( double ) ( Erf . erf ( ( x - mean ) /
rank: 583
score: 99.48673930921052
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) ? (
rank: 583
score: 99.41790450246711
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf [ ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 583
score: 99.33197021484375
patch: return 0 . 0 * ( 1 . 0
rank: 583
score: 99.30886358963816
patch: return ( 0 . 0 + Erf . erf ( ( x - mean ) ) /
rank: 584
score: 99.56080264136905
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ,
rank: 584
score: 99.546875
patch: return 0 . $NUMBER$ * Erf . erf ( 0 . $NUMBER$ + Erf . erf ( ( x - mean ) /
rank: 584
score: 99.5102771577381
patch: return 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 /
rank: 584
score: 99.41757684004934
patch: return cumulative CaMeL Probability ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 584
score: 99.331787109375
patch: return 0 . 0 + ( Erf . erf ( ( x - mean ) *
rank: 584
score: 99.30877007378473
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + ( x - mean ) / (
rank: 585
score: 99.54619683159723
patch: return 0 . $NUMBER$ * ( $NUMBER$ . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 585
score: 99.5206631747159
patch: return 0 . 0 * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) ;
rank: 585
score: 99.51509021577381
patch: return ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / mean ) /
rank: 585
score: 99.51015940020162
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 ;
rank: 585
score: 99.4864990234375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x [ mean
rank: 585
score: 99.41752794053819
patch: return ( 0 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; else
rank: 585
score: 99.33173963758681
patch: return cumulative CaMeL Probability ( ( x - mean ( ( ( x - mean ( (
rank: 585
score: 99.30841742621527
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( 1 . 0 + Erf
rank: 586
score: 99.56004842122395
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( float ) mean ) / mean )
rank: 586
score: 99.54615234375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) - start ) /
rank: 586
score: 99.51506696428571
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / ) ) /
rank: 586
score: 99.48603748139881
patch: return $NUMBER$ . $NUMBER$ * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 586
score: 99.4175002639358
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf / ( standard CaMeL Deviation * Math . sqrt ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) )
rank: 586
score: 99.33172607421875
patch: return 0 . $NUMBER$ * 1 != Erf . erf ( ( x - mean )
rank: 586
score: 99.30838815789474
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 & ( x - mean ) /
rank: 587
score: 99.55983129040948
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ / $NUMBER$ . 0 ) )
rank: 587
score: 99.54609818892045
patch: return 1 . $NUMBER$ * ( 1 . 0 ? Erf . erf ( ( x - mean ) /
rank: 587
score: 99.52047729492188
patch: return ( 1 . 0 ) * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 587
score: 99.5149456521739
patch: return 0 . 0 * Erf . erf ( ( x - mean ) / / $NUMBER$ . 0 ) /
rank: 587
score: 99.50971049647177
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 )
rank: 587
score: 99.48599097842262
patch: return 0 . $NUMBER$ * ( $NUMBER$ . $NUMBER$ + Erf . erf ( ( x - mean )
rank: 587
score: 99.41739908854167
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( this . erf ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) )
rank: 587
score: 99.3079833984375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( 1 )
rank: 588
score: 99.55971272786458
patch: return 0 . $NUMBER$ * ( 1 . 0 / Erf . erf ( ( x - mean ) / mean (
rank: 588
score: 99.54599790219908
patch: return ( 1 . $NUMBER$ * 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) /
rank: 588
score: 99.5203273607337
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - - mean ) /
rank: 588
score: 99.50969904119319
patch: return 0 . 0 * ( Erf . erf ( ( x - mean ) / $NUMBER$ . 0 /
rank: 588
score: 99.48580496651786
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / Math . sqrt (
rank: 588
score: 99.41586538461539
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 588
score: 99.33152860753677
patch: return $NUMBER$ . 0 * Erf . erf ( ( x - mean ) /
rank: 589
score: 99.55935984644397
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) / 0 . 0 +
rank: 589
score: 99.52018468520221
patch: return 0 . $NUMBER$ * Erf . erf ( ( double - mean ) /
rank: 589
score: 99.50956873739919
patch: return 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 /
rank: 589
score: 99.48560180664063
patch: return ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) ) ) ;
rank: 589
score: 99.41559516059027
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( ) ) ) ) ;
rank: 589
score: 99.33151726973684
patch: return ( double ) 0 . 0 + ( 1 . 0 + Erf . erf (
rank: 590
score: 99.5459765625
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / false ) /
rank: 590
score: 99.51402698863636
patch: return 0 . SIZE * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 590
score: 99.50946335565476
patch: return 0 . 0 * Erf . erf ( ( x - mean ) / $NUMBER$ . 0 /
rank: 590
score: 99.48542865953948
patch: return 0 . $NUMBER$ * 1 * Erf . erf ( ( x - mean ) /
rank: 590
score: 99.33128526475694
patch: 0 . ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 590
score: 99.30709035773026
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x [
rank: 591
score: 99.55893891433189
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / Double . POSITIVE _ INFINITY ) /
rank: 591
score: 99.54573197798295
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double - mean ) *
rank: 591
score: 99.51964222301136
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x + mean ) /
rank: 591
score: 99.51402698863636
patch: return 0 . 0 * Erf . erf ( ( x - mean ) / 1 . $NUMBER$ ) /
rank: 591
score: 99.50909620715726
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 / Erf . $NUMBER$ /
rank: 591
score: 99.48528442382812
patch: return 0 . 0 * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) /
rank: 591
score: 99.41453758445945
patch: return ( 0 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ;
rank: 591
score: 99.30703895970395
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf != 0 . 0 ) ;
rank: 592
score: 99.55873209635416
patch: double 0 . 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / /
rank: 592
score: 99.54572265625
patch: return 0 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ ) /
rank: 592
score: 99.50904381793478
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( int ) 1 . 0 +
rank: 592
score: 99.48526161595395
patch: return 0 . 0 + Erf . erf ( ( x - mean ) / ( (
rank: 592
score: 99.41372841282895
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( standard CaMeL Deviation * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) . ) ) ;
rank: 592
score: 99.33116997612848
patch: return * ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 593
score: 99.55867793642241
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 + $STRING$ ) /
rank: 593
score: 99.54560546875
patch: return 0 . $NUMBER$ * Erf . erf ( Erf . erf ( ( x - mean ) << $NUMBER$ ) /
rank: 593
score: 99.51942661830357
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean (
rank: 593
score: 99.50872247869319
patch: return 0 . 0 * Erf . erf ( ( x - mean ) / 1 . 0 ) ;
rank: 593
score: 99.48511904761905
patch: return 0 . $NUMBER$ * ( Integer . 0 + Erf . erf ( ( x - mean )
rank: 593
score: 99.4127556295956
patch: return ( cumulative CaMeL Probability * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 593
score: 99.3309326171875
patch: return 0 . $NUMBER$ * Erf . erf < ( x - mean )
rank: 593
score: 99.3068488625919
patch: return $STRING$ . equals ( Erf . erf ( ( x - mean ) /
rank: 594
score: 99.55845063308189
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / mean ) / 0 . 0 ;
rank: 594
score: 99.54541919849537
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) *
rank: 594
score: 99.51929873511905
patch: return 0 . $NUMBER$ * 1 . $NUMBER$ + Erf . erf ( ( x - mean ) ;
rank: 594
score: 99.51289506392045
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / mean ) ) /
rank: 594
score: 99.48495628720238
patch: return 0 . $NUMBER$ * ( Double . sqrt ( Erf . erf ( ( x - mean )
rank: 594
score: 99.41267664292279
patch: return 0 . 0 * ( 1 . 0 + x - mean ) ; }
rank: 594
score: 99.330810546875
patch: return 0 . $NUMBER$ * 1 . 0 + ( ( x - mean )
rank: 594
score: 99.3061882467831
patch: return 0 . $NUMBER$ * ( 1 . max ( ( x - mean ) /
rank: 595
score: 99.55823771158855
patch: return 0 . $NUMBER$ * ( 1 . 0 + $STRING$ + Erf . erf ( ( x - mean ) /
rank: 595
score: 99.51190795898438
patch: return 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / erf ) /
rank: 595
score: 99.50848979334677
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 / Erf . 0 +
rank: 595
score: 99.48492790670956
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) ?
rank: 595
score: 99.41248914930556
patch: return ( 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; ;
rank: 595
score: 99.33063103170956
patch: return ( 1 . 0 + Erf . erf ( ( x - 1 )
rank: 595
score: 99.30613306949013
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . ( x - mean )
rank: 596
score: 99.55811564127605
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) * erf (
rank: 596
score: 99.5447998046875
patch: return 0 . $NUMBER$ + ( 1 . 0 ? Erf . erf ( ( x - mean ) /
rank: 596
score: 99.51189630681819
patch: return 0 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) ;
rank: 596
score: 99.50830078125
patch: return ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 /
rank: 596
score: 99.48487764246323
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) -
rank: 596
score: 99.41229717548077
patch: return 0 . 0 * ( 1 . 0 * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 596
score: 99.33016807154605
patch: return ( ( 0 . 0 + Erf . erf ( ( x - mean ) *
rank: 596
score: 99.30599636501736
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ) )
rank: 597
score: 99.55809733072917
patch: double 0 . $NUMBER$ . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / /
rank: 597
score: 99.5447665127841
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . length ( ( x - mean ) /
rank: 597
score: 99.51135835193452
patch: return 0 . $NUMBER$ * ( ( x - mean ) / Erf . erf ( ) ) /
rank: 597
score: 99.50829290574596
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 / Erf . 0 ,
rank: 597
score: 99.48469848632813
patch: return 0 . $NUMBER$ * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) )
rank: 597
score: 99.41160824424342
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; }
rank: 597
score: 99.33016807154605
patch: return new double cumulative CaMeL Probability ( Erf . erf ( ( x - mean ) /
rank: 597
score: 99.30592105263158
patch: return 0 . 0 + ( 1 . 0 + Erf . erf ( ) / (
rank: 598
score: 99.55792236328125
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / / /
rank: 598
score: 99.51118396577381
patch: return 0 . $NUMBER$ * ( x . erf ( ( x . mean ( ) - mean ) /
rank: 598
score: 99.48463076636905
patch: return 0 . $NUMBER$ * ( standard CaMeL Deviation / Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 598
score: 99.30585038034539
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( ) /
rank: 599
score: 99.55782948369566
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / mean ) / mean )
rank: 599
score: 99.51876698369566
patch: x = 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 599
score: 99.51076438210227
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / Erf . get CaMeL
rank: 599
score: 99.50825639204545
patch: return 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / 1 . 0 ) ;
rank: 599
score: 99.48460751488095
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( 1 . 0
rank: 599
score: 99.4103805954392
patch: return 0 . 0 * 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 599
score: 99.33002786075367
patch: return 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 599
score: 99.30575222439236
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 == ( x > mean )
rank: 600
score: 99.51867145040761
patch: return 0 . $NUMBER$ * 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( $STRING$ ) /
rank: 600
score: 99.51064231178977
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / / $NUMBER$ . 0 +
rank: 600
score: 99.50785975302419
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) / 1 . 0 /
rank: 600
score: 99.48444475446429
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x , mean )
rank: 600
score: 99.40995829814189
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 600
score: 99.32982113486842
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( short )
rank: 600
score: 99.30562551398026
patch: return 0 . 0 * ( 1 . 0 + 1 == Erf . erf ( (
rank: 601
score: 99.55772662984914
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / mean ) / $NUMBER$ . 0 *
rank: 601
score: 99.54440174932066
patch: return ( 0 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) /
rank: 601
score: 99.5182596842448
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( double ) / 0 . 0 ) /
rank: 601
score: 99.51060901988636
patch: return 0 . length + ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 601
score: 99.50770060221355
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) + 1 /
rank: 601
score: 99.48443312872024
patch: return 0 . $NUMBER$ * ( $NUMBER$ . 0 * Erf . erf ( ( x - mean )
rank: 601
score: 99.40990532769098
patch: return 0 . $NUMBER$ * 1 . $NUMBER$ * ( 1 . 0 + mean ) ;
rank: 601
score: 99.32980526194854
patch: return 0 . $NUMBER$ * Erf . erf ( ( int - mean ) /
rank: 601
score: 99.305419921875
patch: return 0 . $NUMBER$ * ( 1 . abs 1 ( x - mean ) /
rank: 602
score: 99.55758351293103
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / mean (
rank: 602
score: 99.51808763586956
patch: return 0 . $NUMBER$ * ( x - mean ( ( x - mean ) / 0 . 0 ) ) /
rank: 602
score: 99.50764711441532
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) Erf . erf ( ( x - mean ) ) /
rank: 602
score: 99.4094040329392
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * standard CaMeL Deviation . 0 ) ) ) ; }
rank: 602
score: 99.32973904079861
patch: return ( 0 . 0 + Erf . erf ( ( x - mean 1 )
rank: 602
score: 99.30530503216912
patch: return 0 . $NUMBER$ * ( 1 . equals ( ( x - mean ) /
rank: 603
score: 99.55745723329741
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . get ( ( x - mean ) / Erf . erf ( ) /
rank: 603
score: 99.54376953125
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) , 1 ) /
rank: 603
score: 99.51024280894886
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 0 . $NUMBER$ ) *
rank: 603
score: 99.50752185639881
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 1 . 0 /
rank: 603
score: 99.48423365542763
patch: return Erf . erf ( Erf . erf ( ( x - mean ) / (
rank: 603
score: 99.40921927787163
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ ) ) ) ) ;
rank: 603
score: 99.30499626608456
patch: return 0 . 0 * ( 1 . abs ( ( x - mean ) /
rank: 604
score: 99.5571797688802
patch: return 0 . $NUMBER$ * ( 1 . 0 / Erf . erf ( ( double ) mean ) / mean )
rank: 604
score: 99.50973074776786
patch: return ( 1 . $NUMBER$ * Erf . erf ( ( x - mean ) / mean ) /
rank: 604
score: 99.50730846774194
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) / 1 . 0 +
rank: 604
score: 99.40805288461539
patch: return 0 . $NUMBER$ / ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 604
score: 99.32952202690973
patch: return - 0 . 0 * Erf . erf ( ( x - mean ) /
rank: 604
score: 99.30496215820312
patch: return 0 . 0 * ( 1 . abs ( ( x - mean )
rank: 605
score: 99.55715013586956
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / Erf . erf ( (
rank: 605
score: 99.51752263849431
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( int ) mean ( (
rank: 605
score: 99.50721807065217
patch: return 0 . $NUMBER$ Double * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 605
score: 99.4841541108631
patch: return 0 . 0 + ( 1 . 0 + Erf . erf ( ( x + mean )
rank: 605
score: 99.40800517314189
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) /
rank: 605
score: 99.32931518554688
patch: return 0 . 0 + ( ( x - Erf . erf ( (
rank: 606
score: 99.55686792834052
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / mean ) / 0 . 0 *
rank: 606
score: 99.54347581129808
patch: return ( 1 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ ) /
rank: 606
score: 99.51724243164062
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( mean ) / 0 . 0 ) /
rank: 606
score: 99.50890003551136
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / 0 . get CaMeL
rank: 606
score: 99.5071512858073
patch: return 0 . $NUMBER$ * ( ( 1 . 0 ) / Erf . erf ( ( x - mean ) /
rank: 606
score: 99.48384021577381
patch: return 0 . $NUMBER$ + 1 . $NUMBER$ + Erf . erf ( ( x - mean ) /
rank: 606
score: 99.40799967447917
patch: return 0 . 0 * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) . 0 ) ) ; }
rank: 606
score: 99.32912868923611
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( byte
rank: 606
score: 99.3048454733456
patch: return 0 . $NUMBER$ * ( 1 . get CaMeL Type ( ) - mean )
rank: 607
score: 99.55679216056035
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( 1 . 0 + double )
rank: 607
score: 99.48372192382813
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . 0 + 1 . $NUMBER$ ) ;
rank: 607
score: 99.40741131756756
patch: return 0 . 0 * 0 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 607
score: 99.3287353515625
patch: return 0 . $NUMBER$ * ( 1 . double CaMeL Value ( ( x - mean )
rank: 608
score: 99.55660807291666
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / x ) / Erf . erf (
rank: 608
score: 99.54330842391305
patch: return ( 1 . 0 * Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 608
score: 99.48325892857143
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ||
rank: 608
score: 99.40737433182566
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) &&
rank: 608
score: 99.32841222426471
patch: return ( ( this . Erf . erf ( ( x - mean ) /
rank: 608
score: 99.30470784505208
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 != Erf . erf (
rank: 609
score: 99.55637964709052
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / ( 1 . 0 + double )
rank: 609
score: 99.54326923076923
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . $NUMBER$ )
rank: 609
score: 99.51643510298295
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( Double ) mean ) /
rank: 609
score: 99.50868530273438
patch: return 0 . $NUMBER$ * ( x . erf ( ( x - mean ) / mean ) /
rank: 609
score: 99.50670205393145
patch: return 0 . $NUMBER$ * Erf . erf ( ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 /
rank: 609
score: 99.40730794270833
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ; }
rank: 609
score: 99.32839786305146
patch: return ( 0 . 0 + Erf . erf ( ( x + mean )
rank: 609
score: 99.3046515969669
patch: if ( x < 0 + Erf . erf ( ( x - mean )
rank: 610
score: 99.55610183189656
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / Erf . erf ( float )
rank: 610
score: 99.54313354492187
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) << 1 ) /
rank: 610
score: 99.515869140625
patch: return 0 . $NUMBER$ * ( 1 . 0 1 + Erf . erf ( ( x - mean ) /
rank: 610
score: 99.50807189941406
patch: return 0 . $NUMBER$ * 1 . 0 + ( x - mean ) /
rank: 610
score: 99.50667842741936
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 ,
rank: 610
score: 99.48225911458333
patch: return 0 . 0 * ( 1 . 0 * Erf . erf ( ( x - mean )
rank: 610
score: 99.40652126736111
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( standard CaMeL Deviation * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) &&
rank: 610
score: 99.32833862304688
patch: return 0 . 0 * Erf . erf ( ( x > mean )
rank: 611
score: 99.5560546875
patch: double . double 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / /
rank: 611
score: 99.51575288318452
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / mean ) ;
rank: 611
score: 99.50795200892857
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( x - mean ) / 0 . 0 )
rank: 611
score: 99.50667842741936
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) / $NUMBER$ . 0 (
rank: 611
score: 99.40602620442708
patch: return 0 . $NUMBER$ * ( ( 1 . 0 ) + 1 . 0 ) ;
rank: 611
score: 99.32756604646382
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( int ) x - mean )
rank: 611
score: 99.30445014105902
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 <= 1 . 0 ) ;
rank: 612
score: 99.5557171365489
patch: double 0 = ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) /
rank: 612
score: 99.54294655539773
patch: return 0 . $NUMBER$ * ( 1 . 0 : Erf . erf ( ( x - mean ) /
rank: 612
score: 99.51563662574405
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean (
rank: 612
score: 99.40578884548611
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; ; }
rank: 612
score: 99.32739935980902
patch: return ( 1 . 0 + Erf . erf ( ( x + mean ) /
rank: 612
score: 99.3038330078125
patch: return Integer . max ( Erf . erf ( ( x - mean )
rank: 613
score: 99.55571131552419
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / Erf . erf ( ) ) / /
rank: 613
score: 99.5428515625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) >> 1 ) /
rank: 613
score: 99.51561390269886
patch: return ( 0 . $NUMBER$ * 1 . $NUMBER$ + Erf . erf ( ( x - mean ) /
rank: 613
score: 99.50743519176136
patch: return 0 . $NUMBER$ * Erf . 0 * Erf . erf ( ( x - mean ) /
rank: 613
score: 99.5063809481534
patch: return 0 . $NUMBER$ + ( 0 . 0 + Erf . erf ( ( x - mean ) /
rank: 613
score: 99.48129417782738
patch: return 0 . $NUMBER$ * ( 1 . 0 ? Erf . erf ( ( x - mean )
rank: 613
score: 99.40438925253379
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( standard CaMeL Deviation * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ?
rank: 613
score: 99.32725694444444
patch: return ( 0 . $NUMBER$ + ( Erf . erf ( ( x - mean )
rank: 613
score: 99.30358208550348
patch: return 0 . $NUMBER$ * ( 1 . 0 + x - mean ) / ( $NUMBER$
rank: 614
score: 99.5556219692888
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) x ) / Erf . erf ( double )
rank: 614
score: 99.51550874255952
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( 0 - mean ) /
rank: 614
score: 99.50742409446023
patch: return ( 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / mean ) /
rank: 614
score: 99.50631615423387
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) / 1 . 0 )
rank: 614
score: 99.48118954613095
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x + mean )
rank: 614
score: 99.40421549479167
patch: return ( 0 . 0 * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; ;
rank: 614
score: 99.30325520833334
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( 1 == 1
rank: 615
score: 99.55553436279297
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / Erf . 0 )
rank: 615
score: 99.5072354403409
patch: return 0 . 0 * ( 1 . 0 + ( x - mean ) / 0 . 0 ) /
rank: 615
score: 99.50618227066532
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 1 . 0 / Erf . 0 + Erf . 0 /
rank: 615
score: 99.48109654017857
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean &&
rank: 615
score: 99.40403917100694
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * 0 . 0 ) . 0 ) ) ;
rank: 615
score: 99.32719870174633
patch: return 1 . 0 + ( Erf . erf ( ( x - mean )
rank: 615
score: 99.30304633246527
patch: return 0 . $NUMBER$ * ( 1 . max . ( ( x - mean ) /
rank: 616
score: 99.55533500339673
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf ) / ( 1 . 0 + Erf )
rank: 616
score: 99.54087136008523
patch: return ( 1 . 0 * 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 616
score: 99.5147372159091
patch: return 0 . $NUMBER$ * ( 1 . mean ( ( x - mean ) / 0 . 0 ) /
rank: 616
score: 99.5061267671131
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / $NUMBER$ . 0
rank: 616
score: 99.48085327148438
patch: return 0 . 0 * ( 1 . 0 + erf ( ( x - mean ) / (
rank: 616
score: 99.40386962890625
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; ;
rank: 616
score: 99.32687557444854
patch: return 0 . 0 + ( 1 . 0 + Erf . erf ( (
rank: 616
score: 99.30291748046875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf 1 / (
rank: 617
score: 99.54063831676136
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) {
rank: 617
score: 99.51461659307066
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean , ) /
rank: 617
score: 99.50658017113095
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 0 . 0 /
rank: 617
score: 99.50607201360887
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) / $NUMBER$ . 0 /
rank: 617
score: 99.48085239955357
patch: return 0 . 0 + 0 . $NUMBER$ + Erf . erf ( ( x - mean ) /
rank: 617
score: 99.4035894931891
patch: return 0 . 0 * ( 0 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 617
score: 99.32667451746323
patch: return 0 . 0 * Erf . erf ( ( x - mean 1 )
rank: 617
score: 99.30272001378677
patch: { return 0 . $NUMBER$ * ( 1 . 0 + 1 . 0 ) ;
rank: 618
score: 99.54059392755681
patch: return 1 . $NUMBER$ * Erf . erf ( ( x - mean ) / 0 . 0 ) ;
rank: 618
score: 99.5057861328125
patch: double 0 = ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 618
score: 99.48084174262152
patch: return 0 . 0 * Erf . erf ( ( x - mean ) ) ;
rank: 618
score: 99.40260108741555
patch: return 0 . 0 * 1 . 0 * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 618
score: 99.32659553079044
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( start - mean )
rank: 618
score: 99.30233944163604
patch: if ( 0 == 1 + Erf . erf ( ( x - mean )
rank: 619
score: 99.55455525716145
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 /
rank: 619
score: 99.50563557942708
patch: return 0 . $NUMBER$ * ( double ) Erf . erf ( ( x - mean ) / 1 . 0 /
rank: 619
score: 99.48042224702381
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - max )
rank: 619
score: 99.40255576685855
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( standard CaMeL Deviation * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; ;
rank: 619
score: 99.3260986328125
patch: return cumulative CaMeL Probability ( 1 . 0 + ( x - mean )
rank: 619
score: 99.30168151855469
patch: return 0 . $NUMBER$ * ( 1 . equals ( x - mean ) /
rank: 620
score: 99.55419080010776
patch: return 0 . $NUMBER$ * this . 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / /
rank: 620
score: 99.51427641369048
patch: return 0 . $NUMBER$ * 0 . 0 * Erf . erf ( ( x - mean ) ;
rank: 620
score: 99.5055621603261
patch: double return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 620
score: 99.5052823153409
patch: return 0 . $NUMBER$ * ( x . erf ( ( x - mean ) / 0 . 0 ) /
rank: 620
score: 99.48034086681548
patch: return 0 . $NUMBER$ * ( 1 . 0 ) + 0 . $NUMBER$ + Erf . erf (
rank: 620
score: 99.40243869357639
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) / ( $NUMBER$ . 0 ) ) ;
rank: 620
score: 99.325927734375
patch: return ( $NUMBER$ . $NUMBER$ * Erf . erf ( ( x - mean )
rank: 620
score: 99.30135769314236
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ) /
rank: 621
score: 99.55413818359375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / double )
rank: 621
score: 99.51417178199405
patch: return 0 . $NUMBER$ * $NUMBER$ . $NUMBER$ * Erf . erf ( ( x - mean ) /
rank: 621
score: 99.50514914772727
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / $NUMBER$ . mean ) /
rank: 621
score: 99.40231662326389
patch: return ( return 0 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 621
score: 99.32591834435097
patch: return ( 1 . 0 + ( x - mean ) /
rank: 621
score: 99.30082194010417
patch: return ( 1 . 0 + Erf . erf ( ( x - mean ) &
rank: 622
score: 99.51411769701087
patch: x = 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 622
score: 99.5051033266129
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) / $NUMBER$ . 0 /
rank: 622
score: 99.40168592664931
patch: return ( $NUMBER$ . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; }
rank: 622
score: 99.32574141652961
patch: return 0 . 0 * Erf . erf ( ( $STRING$ - Erf . erf (
rank: 622
score: 99.30078843060662
patch: return ( double ) 0 . $NUMBER$ * ( 1 == Erf . erf (
rank: 623
score: 99.55398763020834
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / 0 . 0
rank: 623
score: 99.53925170898438
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / $NUMBER$ ) ;
rank: 623
score: 99.51408585258152
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - max ) ) /
rank: 623
score: 99.50462704613095
patch: return 0 . 0 * 0 . 0 + Erf . erf ( ( x - mean ) /
rank: 623
score: 99.47841099330357
patch: return 0 . $NUMBER$ * ( false . 0 + Erf . erf ( ( x - mean )
rank: 623
score: 99.4011480869391
patch: return 0 . $NUMBER$ * ( 1 . 1 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 623
score: 99.32563219572368
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( $STRING$ >=
rank: 623
score: 99.30072380514706
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 * standard CaMeL Deviation *
rank: 624
score: 99.5140713778409
patch: return 0 . $NUMBER$ * Erf . erf ( ( double ) mean ( ( x - mean ) /
rank: 624
score: 99.50477255544355
patch: return 0 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 /
rank: 624
score: 99.5046154203869
patch: if ( Double . = 0 . 0 + Erf . erf ( ( x - mean ) /
rank: 624
score: 99.47791108630952
patch: return 0 . $NUMBER$ * ( standard CaMeL Deviation * Erf . erf ( ( x - mean )
rank: 624
score: 99.401123046875
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) )
rank: 624
score: 99.32558079769737
patch: return 0 . $NUMBER$ * 1 < Erf . erf ( ( x - mean ) /
rank: 624
score: 99.30048285590277
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . ( x - mean )
rank: 625
score: 99.55374348958334
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) Erf . erf ( ( double ) mean ) /
rank: 625
score: 99.5046053799716
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( double - mean ) /
rank: 625
score: 99.50410970052083
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ +
rank: 625
score: 99.47755068824405
patch: return 0 . $NUMBER$ + ( 1 . 0 - Erf . erf ( ( x - mean )
rank: 625
score: 99.40107922676282
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 1 ) ) ) ) ;
rank: 625
score: 99.3255615234375
patch: return cumulative CaMeL Probability ( ( double ) 1 . 0 + Erf . erf (
rank: 626
score: 99.55372721354166
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 + mean ) / /
rank: 626
score: 99.51360529119319
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x + mean ) /
rank: 626
score: 99.47725830078124
patch: return 0 . $NUMBER$ * ( ( x - Erf . erf ( ( x - mean )
rank: 626
score: 99.40062191611842
patch: return 0 . - ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 626
score: 99.32549085115132
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( 0 .
rank: 626
score: 99.29953002929688
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf ) / (
rank: 627
score: 99.50415717230902
patch: if ( 1 . $NUMBER$ * Erf . erf ( ( x - mean ) /
rank: 627
score: 99.5037129720052
patch: return 0 . $NUMBER$ * ( x - mean ) / ( Erf . erf ( ( x - mean ) /
rank: 627
score: 99.47709728422619
patch: return 0 . $NUMBER$ * ( standard CaMeL Deviation * Math . sqrt ( 1 . $NUMBER$ ) ) ;
rank: 627
score: 99.39968532986111
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) )
rank: 627
score: 99.32529584099265
patch: return return cumulative CaMeL Probability ( Erf . erf ( ( x - mean )
rank: 627
score: 99.29936872209821
patch: if ( ( Erf . erf ( ( x - mean )
rank: 628
score: 99.55340169270833
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / / / /
rank: 628
score: 99.5124279203869
patch: return 0 . $NUMBER$ + 1 . $NUMBER$ * Erf . erf ( ( x - mean ) /
rank: 628
score: 99.47706434461806
patch: return 0 . $NUMBER$ * ( 1 . 0 ) * ( 1 . 0 ) ;
rank: 628
score: 99.39963785807292
patch: return ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; ;
rank: 628
score: 99.32498168945312
patch: return 0 . 0 * ( 1 . max ( ( x - mean )
rank: 628
score: 99.29920196533203
patch: return 0 . $NUMBER$ * ( 1 . clone ( ( x - mean )
rank: 629
score: 99.55329000538794
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / Erf . erf ( float )
rank: 629
score: 99.51239568536931
patch: return 0 . $NUMBER$ * ( 1 . 1 * Erf . erf ( ( x - mean ) /
rank: 629
score: 99.5037841796875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( $STRING$ ) - mean ) /
rank: 629
score: 99.50329059103261
patch: return 0 . $NUMBER$ else * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 629
score: 99.47705078125
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean *
rank: 629
score: 99.39938107052365
patch: return 0 . 0 * 0 . 0 * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 629
score: 99.29908582899306
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . 0 + Erf /
rank: 630
score: 99.55318196614583
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) * mean (
rank: 630
score: 99.5035067471591
patch: return 0 . Math * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 630
score: 99.50325012207031
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 ) ;
rank: 630
score: 99.47661675347223
patch: return 0 . $NUMBER$ * ( 1 . 0 ) + Erf . erf ( (
rank: 630
score: 99.39934339021382
patch: 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 630
score: 99.32488335503473
patch: return ( $NUMBER$ . $NUMBER$ * Erf . erf ( ( x - mean ) /
rank: 630
score: 99.29824649586396
patch: return 0 . $NUMBER$ * ( 1 . get CaMeL Type ( ) > mean )
rank: 631
score: 99.53740900213069
patch: return 0 . 0 * Erf . erf ( Erf . erf ( ( x - mean ) ;
rank: 631
score: 99.51232328869048
patch: return 0 . $NUMBER$ * 0 . 1 * Erf . erf ( ( x - mean ) /
rank: 631
score: 99.50307144657258
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / 1 . 0 /
rank: 631
score: 99.47642115542763
patch: return 0 . 1 + ( Erf . erf ( ( x - mean ) / (
rank: 631
score: 99.3246078491211
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf _
rank: 631
score: 99.29806857638889
patch: { return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) /
rank: 632
score: 99.55313005118535
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / mean ) / $NUMBER$ . 0 ;
rank: 632
score: 99.51222922585227
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - 0 ) ;
rank: 632
score: 99.50327758789062
patch: return 0 . 0 + Erf . erf ( ( x - mean ) / mean ) /
rank: 632
score: 99.50304066051136
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / 1 . 0 /
rank: 632
score: 99.4763416108631
patch: return 0 . 0 + Erf . erf ( ( x - mean ) / standard CaMeL Deviation *
rank: 632
score: 99.39888080797698
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( standard CaMeL Deviation * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 632
score: 99.32456752232143
patch: return ( Erf . erf ( ( x - mean ) /
rank: 632
score: 99.29792616102431
patch: return 0 . $NUMBER$ * ( 1 . get 0 1 ( ( x - mean )
rank: 633
score: 99.55298913043478
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / $NUMBER$ . 0 ) /
rank: 633
score: 99.511962890625
patch: return 0 . $NUMBER$ 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 633
score: 99.5032470703125
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / / / /
rank: 633
score: 99.50303431919643
patch: return 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 +
rank: 633
score: 99.47586862664474
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) << (
rank: 633
score: 99.398681640625
patch: return cumulative CaMeL Probability ( 1 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 633
score: 99.32429504394531
patch: return ( ( float ) Erf . erf ( ( x - mean )
rank: 633
score: 99.2978874655331
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( x + mean ) /
rank: 634
score: 99.55275012600806
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / $NUMBER$ . 0 ) / 0 . 0 ;
rank: 634
score: 99.53672096946023
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) ^
rank: 634
score: 99.511474609375
patch: return 0 . $NUMBER$ | ( 1 . 0 + Erf . erf ( ( x - mean ) ;
rank: 634
score: 99.50303431919643
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 0 . $NUMBER$ +
rank: 634
score: 99.50296118951613
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 / $NUMBER$ . 0 ) /
rank: 634
score: 99.47572631835938
patch: return 0 . $NUMBER$ * ( 1 . 0 + this . erf ( ( x - mean )
rank: 634
score: 99.39853244357639
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf 1 ) ;
rank: 634
score: 99.32421875
patch: return 0 . $NUMBER$ * Erf . erf [ ( x - mean 1 )
rank: 634
score: 99.29783799913194
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 == standard CaMeL Deviation * (
rank: 635
score: 99.55274454752605
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( double - mean ) / mean (
rank: 635
score: 99.51125169836956
patch: return 0 . $NUMBER$ * ( ( 1 . 0 + Erf . erf ( ( x - mean ) ;
rank: 635
score: 99.50274047851562
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / erf (
rank: 635
score: 99.47562081473214
patch: return $NUMBER$ . 0 * ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 635
score: 99.39807807074652
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ) ; }
rank: 635
score: 99.3240966796875
patch: return 0 . 0 + Erf . erf ( ( x - mean 1 )
rank: 635
score: 99.29778693704044
patch: if ( x . equals ( Erf . erf ( ( x - mean )
rank: 636
score: 99.5526922817888
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ( ) / /
rank: 636
score: 99.51066450639205
patch: return 0 . $NUMBER$ * ( 1 . 0 || Erf . erf ( ( x - mean ) /
rank: 636
score: 99.50283518145162
patch: return 0 . 0 * ( 1 . 0 * Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 /
rank: 636
score: 99.50265066964286
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 1 . $NUMBER$ )
rank: 636
score: 99.47536749588816
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) & (
rank: 636
score: 99.39803685897436
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( int - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 636
score: 99.32408989800348
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean 1 /
rank: 636
score: 99.29764133029514
patch: return ( 0 . $NUMBER$ + Erf . erf ( ( x - mean ) ==
rank: 637
score: 99.55245768229166
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ ) / Erf . erf (
rank: 637
score: 99.47510928199405
patch: return 0 . 0 + Erf . erf ( ( x - mean ) / Math . sqrt (
rank: 637
score: 99.39760335286458
patch: return ( cumulative CaMeL Probability ( Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 637
score: 99.32358805338542
patch: return 0 . $NUMBER$ * ( ( 1 . 0 * Erf . erf ( (
rank: 637
score: 99.29739200367646
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( x - mean ) )
rank: 638
score: 99.55185231854838
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( double ) mean ) / $NUMBER$ . 0 + Erf . erf (
rank: 638
score: 99.53547469429348
patch: result = 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 638
score: 99.51064665421195
patch: return ( 1 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) ;
rank: 638
score: 99.5025967684659
patch: return 0 . $NUMBER$ double ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 638
score: 99.50205300071023
patch: return 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / 1 . $NUMBER$ ) /
rank: 638
score: 99.39733556798987
patch: return ( 0 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( standard CaMeL Deviation . 0 ) ) ) ) ;
rank: 638
score: 99.29734971788194
patch: return 0 . $NUMBER$ * ( x . erf ( ( x - mean ) / (
rank: 639
score: 99.55160627693965
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) / Erf . erf ( ) )
rank: 639
score: 99.5344875169837
patch: return ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / 1 . $NUMBER$ ) /
rank: 639
score: 99.51059857536765
patch: return 0 . $NUMBER$ ? Erf . erf ( ( x - mean ) /
rank: 639
score: 99.50259104082662
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) * $NUMBER$ . 0 +
rank: 639
score: 99.47487278988487
patch: return 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / ( (
rank: 639
score: 99.39720394736842
patch: return 0 . 0 * ( 1 . - Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 639
score: 99.32355057565789
patch: return cumulative CaMeL Probability ( 1 . 0 + Erf . erf ( ( x - 1
rank: 639
score: 99.29681396484375
patch: return Integer . length ( Erf . erf ( ( x - mean )
rank: 640
score: 99.55150204613095
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / erf ( double )
rank: 640
score: 99.5017422762784
patch: return 0 . $NUMBER$ * ( erf . 0 + Erf . erf ( ( x - mean ) /
rank: 640
score: 99.47476356907895
patch: return 0 . 0 * ( 1 . 0 + erf ( ( x - mean ) /
rank: 640
score: 99.3971046241554
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 640
score: 99.32354058159723
patch: return 0 . 0 + ( 1 . 0 + Erf . erf ( ( /
rank: 640
score: 99.29634602864583
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 == ( 1
rank: 641
score: 99.53385416666667
patch: return ( 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / $NUMBER$ ) /
rank: 641
score: 99.50170135498047
patch: return 0 . $NUMBER$ * ( ( x - mean ) / erf ) /
rank: 641
score: 99.474609375
patch: return 0 . 1 * ( $NUMBER$ . 0 + Erf . erf ( ( x - mean )
rank: 641
score: 99.39698585304055
patch: return 0 . $NUMBER$ * 1 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 641
score: 99.32335747612848
patch: return $NUMBER$ . $NUMBER$ * ( Erf . erf ( ( x - mean ) /
rank: 641
score: 99.29585266113281
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( 1 == mean )
rank: 642
score: 99.53377956814236
patch: return ( 1 . 0 ? Erf . erf ( ( x - mean ) /
rank: 642
score: 99.50996537642045
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( double - mean ) /
rank: 642
score: 99.50214213709677
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . $NUMBER$ ) / $NUMBER$ . 0 +
rank: 642
score: 99.47399321056548
patch: return 0 . $NUMBER$ * ( standard CaMeL Deviation * Math . sqrt ( 1 . 0 ) ) .
rank: 642
score: 99.39664713541667
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( $STRING$ - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 642
score: 99.32298519736842
patch: double x = 0 . $NUMBER$ * Erf . erf ( ( x - mean ) /
rank: 642
score: 99.29562377929688
patch: return 0 . $NUMBER$ * ( 1 . 0 + x - - mean )
rank: 643
score: 99.55125269396552
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) / mean )
rank: 643
score: 99.5097989169034
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ * Erf . erf ( ( double ) mean ) /
rank: 643
score: 99.50210275957662
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / 1 . 0 )
rank: 643
score: 99.50138346354167
patch: return 0 . 0 * Erf . erf ( ( x - mean ) / 1 . 0 )
rank: 643
score: 99.4738537016369
patch: return 0 . 0 * ( 1 . 0 + this . erf ( ( x - mean ) /
rank: 643
score: 99.39663214432566
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 643
score: 99.32290649414062
patch: return 0 . $NUMBER$ * Erf . erf ( x - mean ) ;
rank: 644
score: 99.5512451171875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / Erf . erf ( double ) )
rank: 644
score: 99.53370250355114
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - 0 ) /
rank: 644
score: 99.5020061990489
patch: return 0 . 0 * ( 1 . 0 + Erf . get ( ( x - mean ) ) /
rank: 644
score: 99.47383840460526
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) || (
rank: 644
score: 99.39662209535257
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . $NUMBER$ ) ) ) ) ;
rank: 644
score: 99.32281172902961
patch: return ( double ) 0 . 0 * ( 1 . 0 + Erf . erf (
rank: 644
score: 99.295166015625
patch: return 0 . $NUMBER$ * ( 1 . contains ( ( x - mean ) /
rank: 645
score: 99.5512274380388
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( double ) mean ) / Erf . erf ( double )
rank: 645
score: 99.53348388671876
patch: return ( 1 . $NUMBER$ + Erf . erf . erf ( ( x - mean ) /
rank: 645
score: 99.50865589488636
patch: return 0 . $NUMBER$ * ( 1 . 1 + Erf . erf ( ( x - mean ) ;
rank: 645
score: 99.47373744419643
patch: return 0 . $NUMBER$ * ( 1 . - Erf . erf ( ( x - mean ) /
rank: 645
score: 99.39568309294872
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( 0 . 0 ) ) ) ) ;
rank: 645
score: 99.32275390625
patch: return 0 . 0 * ( Erf . erf ( ( x + mean )
rank: 645
score: 99.29502958409927
patch: return 0 . $NUMBER$ * ( 1 . join ( ( x - mean ) /
rank: 646
score: 99.55116271972656
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / 0 . 0 ) ;
rank: 646
score: 99.5078125
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . 0 ) / ( ( x - mean ) ;
rank: 646
score: 99.50186649445564
patch: return 0 . $NUMBER$ / ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) / $NUMBER$ . 0 /
rank: 646
score: 99.50018865411931
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( $STRING$ - mean ) /
rank: 646
score: 99.39555528428819
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( x ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; ;
rank: 646
score: 99.32271999782986
patch: return 0 . $NUMBER$ + ( ( 1 . 0 + Erf . erf ( (
rank: 646
score: 99.29499647352431
patch: return 0 . 0 * ( 1 . 0 + 1 < Erf . erf (
rank: 647
score: 99.5509832974138
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ) / ( 1 . 0 + Erf . erf ( ) /
rank: 647
score: 99.53321373980978
patch: return ( 1 . 0 ? ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 647
score: 99.50760323660714
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 1 . 0 (
rank: 647
score: 99.50174836189517
patch: return 0 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 +
rank: 647
score: 99.4999667080966
patch: if ( Double . = ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 647
score: 99.4736328125
patch: return 0 . 0 * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) / (
rank: 647
score: 99.39541965060764
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) . ) ; }
rank: 647
score: 99.32264468544408
patch: return 0 . 0 + ( 1 . 0 + Erf . erf ( ( x -
rank: 647
score: 99.29498291015625
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 + 1 . 0 ) ;
rank: 648
score: 99.55087385506465
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf ( 1 . 0 ) /
rank: 648
score: 99.5331500509511
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) + ( x - mean ) /
rank: 648
score: 99.50677811472039
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x ;
rank: 648
score: 99.50162235383064
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( int ) Erf . erf ( ( x - mean ) ) /
rank: 648
score: 99.49995561079545
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) . mean ( ) /
rank: 648
score: 99.47356305803571
patch: return 0 . 0 * ( standard CaMeL Deviation * Math . sqrt ( 1 . 0 ) ) ;
rank: 648
score: 99.39540501644737
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf < ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 648
score: 99.32252412683823
patch: return 0 . 0 * Erf . erf ( ( ( x - mean )
rank: 648
score: 99.29497931985294
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 <= 1 . 0 )
rank: 649
score: 99.55040973165761
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) / /
rank: 649
score: 99.47347005208333
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - x )
rank: 649
score: 99.39531114366319
patch: return ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 649
score: 99.32213070518092
patch: return ( 1 . $NUMBER$ + ( Erf . erf ( ( x - mean ) /
rank: 649
score: 99.294677734375
patch: return 0 . $NUMBER$ + ( 1 . 0 + x - mean ) /
rank: 650
score: 99.55036031788794
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 + double ) /
rank: 650
score: 99.5330477627841
patch: return 1 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) ;
rank: 650
score: 99.50668480282738
patch: return 0 . $NUMBER$ * 0 . $NUMBER$ + Erf . erf ( ( x - mean ) ;
rank: 650
score: 99.50093410326087
patch: return 0 . $NUMBER$ * ( 1 . 0 double / Erf . erf ( ( x - mean ) /
rank: 650
score: 99.49982244318181
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / / - mean ) /
rank: 650
score: 99.4727783203125
patch: return 0 . $NUMBER$ * Erf . erf ( ) . erf ( ( x - mean )
rank: 650
score: 99.39529666385135
patch: return 0 . $NUMBER$ * 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 650
score: 99.32209329044117
patch: return 0 . $NUMBER$ + Erf . erf ( ( x + mean ) /
rank: 651
score: 99.53303666548295
patch: return 0 . 0 * ( 1 . 0 ? Erf . erf ( ( x - mean ) ;
rank: 651
score: 99.50664728338069
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - 1 ) /
rank: 651
score: 99.49927867542614
patch: return 0 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 651
score: 99.47273763020833
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) ) . erf ( (
rank: 651
score: 99.39523727829392
patch: return $NUMBER$ . $NUMBER$ * ( 1 . 0 + Erf . erf ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 652
score: 99.55017510775862
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - 1 ) / Erf . erf ( ) /
rank: 652
score: 99.50056596235795
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . get ( ( x - mean ) /
rank: 652
score: 99.39503309461806
patch: return 0 . $NUMBER$ * ( 1 . 0 + mean * 0 . 0 ) ;
rank: 652
score: 99.32132118626645
patch: return cumulative CaMeL Probability ( 1 . 0 + Erf . erf ( ( x == 0
rank: 652
score: 99.29398839613971
patch: return 0 . $NUMBER$ * ( 1 . get 1 ( x - mean ) /
rank: 653
score: 99.5500259399414
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) / Erf . erf (
rank: 653
score: 99.50647503396739
patch: return 0 . $NUMBER$ * ( 1 . mean ( ( x - mean ) / 0 . 0 ) ) ;
rank: 653
score: 99.50042550223215
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / double . MIN _ VALUE ) / double . MAX _ VALUE /
rank: 653
score: 99.49846857244319
patch: return ( 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean )
rank: 653
score: 99.47265625
patch: return 0 . $NUMBER$ * ( 1 . 0 ) + 0 . $NUMBER$ * ( standard CaMeL Deviation *
rank: 653
score: 99.39493375211148
patch: return 0 . $NUMBER$ * x . $NUMBER$ * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 653
score: 99.32113486842105
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( x ) /
rank: 654
score: 99.54969443044355
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / Erf . erf ( ( x - mean ) / mean )
rank: 654
score: 99.53267176011029
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) &
rank: 654
score: 99.5002972146739
patch: return ( 0 . $NUMBER$ * ( 1 . 0 / Erf . erf ( ( x - mean ) /
rank: 654
score: 99.32105170355902
patch: return 0 . $NUMBER$ * Erf . erf ( ( double ) ( 1 . 0
rank: 654
score: 99.2938591452206
patch: return ( 1 . 0 / Erf . erf ( ( x - mean )
rank: 655
score: 99.54966292842742
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / Erf . double CaMeL Value ( ) /
rank: 655
score: 99.53263716264205
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( int - mean ) /
rank: 655
score: 99.50020168138587
patch: return ( 0 . $NUMBER$ / ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 655
score: 99.39449165962837
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( this . erf ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) /
rank: 655
score: 99.32097710503473
patch: return ( 1 . 0 + Erf . erf ( ( x - mean 1 )
rank: 655
score: 99.29352484809027
patch: return ( 0 . 0 + Erf . erf ( ( x - mean ) <<
rank: 656
score: 99.54936780427632
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ) / /
rank: 656
score: 99.50554865056819
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . get ( ( x - mean ) ;
rank: 656
score: 99.50014175907258
patch: return 0 . $NUMBER$ * ( 1 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 +
rank: 656
score: 99.49819113991477
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - $NUMBER$ ) /
rank: 656
score: 99.47159830729167
patch: return 0 . $NUMBER$ * ( 1 . 0 ) + ( standard CaMeL Deviation * Math . sqrt (
rank: 656
score: 99.39442567567568
patch: return 0 . $NUMBER$ * ( 0 . 0 + Erf . erf ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 656
score: 99.32078043619792
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( int
rank: 656
score: 99.29343668619792
patch: return ( 0 . 0 + ( 1 . 0 + 1 . 0 ) ) ;
rank: 657
score: 99.53207795516305
patch: return ( 1 . 0 * Erf . erf ( ( x - mean ) / 1 . 0 ) /
rank: 657
score: 99.50527774586396
patch: return 0 . $NUMBER$ * ( 1 . mean ( ( x - mean ) /
rank: 657
score: 99.39402369449013
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( $STRING$ ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; }
rank: 657
score: 99.32063373766448
patch: return 0 . $NUMBER$ * ( ( double ) 1 . 0 + Erf . erf (
rank: 657
score: 99.29323323567708
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 == 1 . 0 ) ;
rank: 658
score: 99.54929070723684
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / mean (
rank: 658
score: 99.53145168138587
patch: return ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . $NUMBER$ ) /
rank: 658
score: 99.5050910500919
patch: throw 0 . $NUMBER$ * Erf . erf ( ( x - mean ) /
rank: 658
score: 99.4999363111413
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$
rank: 658
score: 99.47057427300348
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ ) + ( 1 . 0 ) ;
rank: 658
score: 99.39353434244792
patch: return 0 . $NUMBER$ * 0 . 0 * ( 1 . 0 + mean ) ;
rank: 658
score: 99.32038430606617
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean -
rank: 659
score: 99.53123890269886
patch: return ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / 0 . 0 )
rank: 659
score: 99.5045166015625
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) -
rank: 659
score: 99.49968927556819
patch: return ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 +
rank: 659
score: 99.49666341145833
patch: return 0 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 )
rank: 659
score: 99.46936713324652
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) ? (
rank: 659
score: 99.39310495476974
patch: return cumulative CaMeL Probability ( $NUMBER$ . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 659
score: 99.32038031684027
patch: return 0 . $NUMBER$ + ( ( Erf . erf ( ( x - mean )
rank: 659
score: 99.29315185546875
patch: return 0 . $NUMBER$ * ( 1 . get CaMeL Type ( ) > mean ) ;
rank: 660
score: 99.54917907714844
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 660
score: 99.53080610795455
patch: return Math . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 660
score: 99.49962985131049
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) / $NUMBER$ . 0 ,
rank: 660
score: 99.49596586681548
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( $STRING$ - mean ) /
rank: 660
score: 99.46896701388889
patch: return 0 . $NUMBER$ * ( 1 . 0 ) + ( 0 . 0 ) ;
rank: 660
score: 99.3200439453125
patch: return ( x . cumulative CaMeL Probability ( ( x - mean ) /
rank: 660
score: 99.2928466796875
patch: return ( 0 . 0 + Erf . erf ( ( x - mean ) !=
rank: 661
score: 99.5491455078125
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / 0 . $NUMBER$
rank: 661
score: 99.53064495584239
patch: return ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / 0 . 0 ) ;
rank: 661
score: 99.50429465553977
patch: return 0 . $NUMBER$ * 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) /
rank: 661
score: 99.46896701388889
patch: return 1 . $NUMBER$ * Erf . erf ( ( x - mean ) / (
rank: 661
score: 99.39212375217014
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * this . standard CaMeL Deviation ) ) ) ;
rank: 661
score: 99.31982421875
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ] /
rank: 661
score: 99.29273223876953
patch: return 0 . $NUMBER$ * ( 1 . contains ( ( x - mean )
rank: 662
score: 99.5491143588362
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / mean /
rank: 662
score: 99.53040081521739
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) ) ;
rank: 662
score: 99.50385076349431
patch: return 0 . $NUMBER$ * ( Double . 1 + Erf . erf ( ( x - mean ) /
rank: 662
score: 99.49911006804436
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 1 ) / $NUMBER$ . 0 /
rank: 662
score: 99.49530639648438
patch: return 0 . 0 * ( x - Erf . erf ( ( x - mean ) /
rank: 662
score: 99.31966959635416
patch: return 0 . 0 + ( 1 . ( ( x - mean )
rank: 662
score: 99.29265001085069
patch: return 0 . $NUMBER$ * ( 1 . to CaMeL String ( ( x - mean )
rank: 663
score: 99.50333305027173
patch: return - 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 663
score: 99.49342041015625
patch: return 0 . 0 * Erf . erf ( ( x - mean ) / erf ) /
rank: 663
score: 99.46870930989583
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) , (
rank: 663
score: 99.3920648036859
patch: return 1 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 663
score: 99.31964789496527
patch: return ( 0 . $NUMBER$ + Erf . erf ( ( x - mean ) *
rank: 663
score: 99.29219563802083
patch: return 0 . $NUMBER$ * this . erf ( ( x - mean )
rank: 664
score: 99.49896043346774
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) / 1 . 0 ) / $NUMBER$ . 0 /
rank: 664
score: 99.493408203125
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / $STRING$ ) /
rank: 664
score: 99.46836451480263
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) > (
rank: 664
score: 99.39193148226352
patch: return 0 . ( ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) )
rank: 664
score: 99.31923421223958
patch: return ( 0 . 0 + Erf . erf ( ( x - mean 1 .
rank: 664
score: 99.29208374023438
patch: return ( ( double - Erf . erf ( ( x - mean )
rank: 665
score: 99.54856872558594
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 ) /
rank: 665
score: 99.52997116815476
patch: return Erf . erf ( ( x - mean ) . erf ( ( x - mean ) /
rank: 665
score: 99.50281871448864
patch: return 0 . $NUMBER$ * Erf . erf ( ( double - mean ) / 0 . 0 ) ;
rank: 665
score: 99.49893951416016
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 ) ;
rank: 665
score: 99.49257202148438
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( / mean ) /
rank: 665
score: 99.46823459201389
patch: return 1 . 0 + Erf . erf ( ( x - mean ) / (
rank: 665
score: 99.39168054917279
patch: return 0 . $NUMBER$ * ( ( 1 . 0 ) 0 . 0 ) ;
rank: 666
score: 99.54851888020833
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) / mean ) / Erf . erf (
rank: 666
score: 99.49865328881049
patch: return 0 . $NUMBER$ / ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) / 1 . 0 /
rank: 666
score: 99.46816677517361
patch: return 0 . $NUMBER$ + ( 1 . 0 ) + ( 1 . 0 ) ;
rank: 666
score: 99.39165790264423
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ?
rank: 666
score: 99.31908501519098
patch: return cumulative CaMeL Probability ( ( double ) 1 . 0 + ( x - mean )
rank: 666
score: 99.29186333550348
patch: return 0 . 0 * ( 1 . 0 + ( 1 . 0 ) / (
rank: 667
score: 99.54842936197916
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / Erf . erf ( $STRING$ ) /
rank: 667
score: 99.52952991832386
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - 0 ) *
rank: 667
score: 99.50226384943181
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( new double - mean ) /
rank: 667
score: 99.49862816220238
patch: return ( float ) ( 0 . 0 + Erf . erf ( ( x - mean ) /
rank: 667
score: 99.49245733963816
patch: return 0 . $NUMBER$ * ( x - 1 . 0 + ( x - mean ) /
rank: 667
score: 99.46815185546875
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) . erf ( (
rank: 667
score: 99.31907145182292
patch: return ( 1 . 1 + Erf . erf ( ( x - mean ) /
rank: 667
score: 99.29128011067708
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 * 1 . 0 ) ;
rank: 668
score: 99.54836509967673
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf $NUMBER$ . 0 ( ) /
rank: 668
score: 99.52938503689236
patch: return Erf . erf ( ( x - mean ) / 0 . 0 ) ;
rank: 668
score: 99.50209111752717
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 0 . 0 ) / (
rank: 668
score: 99.49857761548913
patch: return 0 . $NUMBER$ * ( ( 1 . 0 / Erf . erf ( ( x - mean ) /
rank: 668
score: 99.46729233685662
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) >
rank: 668
score: 99.39156765407986
patch: return 0 . 0 * ( 1 . 0 * ( 1 . 0 ) ) ;
rank: 668
score: 99.31863064236111
patch: return 0 . $NUMBER$ return ( Erf . erf ( ( x - mean ) /
rank: 668
score: 99.29081726074219
patch: if ( 0 , Erf . erf ( ( x - mean ) /
rank: 669
score: 99.54833984375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / Erf . double CaMeL Value ( ) )
rank: 669
score: 99.52920532226562
patch: return ( ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) /
rank: 669
score: 99.49225725446429
patch: return 0 . 0 * ( Erf . erf ( ( x - mean ) / erf ) /
rank: 669
score: 99.39156087239583
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * ( $NUMBER$ . 0 ) ) ) ) ;
rank: 669
score: 99.31844656808036
patch: return 0 . $NUMBER$ * Erf ( ( x - mean )
rank: 669
score: 99.29058837890625
patch: if ( ( $NUMBER$ . 0 + Erf . erf ( ( x - mean )
rank: 670
score: 99.54831458782327
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . 0 + Erf . erf ( ( x - mean ) / mean ) /
rank: 670
score: 99.52893647693452
patch: return 0 . $NUMBER$ * Erf . erf ( Erf . erf ( ( x - mean )
rank: 670
score: 99.50192128057066
patch: return 0 . $NUMBER$ * 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( 0 ) /
rank: 670
score: 99.49840545654297
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) / $NUMBER$ . 0 ) ;
rank: 670
score: 99.4910529641544
patch: return 0 . $NUMBER$ * Erf . 0 + ( x - mean ) /
rank: 670
score: 99.46666870117187
patch: return ( 1 . 0 + ( Erf . erf ( ( x - mean ) / (
rank: 670
score: 99.39138454861111
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; }
rank: 670
score: 99.31789263556985
patch: return 0 . $NUMBER$ * Erf . erf ( ( byte - mean ) /
rank: 670
score: 99.28986672794117
patch: if ( 0 < Erf . erf ( ( x - mean ) / (
rank: 671
score: 99.54783472521552
patch: return 0 . $NUMBER$ . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) / mean )
rank: 671
score: 99.50181995738636
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 0 . 0 ) {
rank: 671
score: 99.4980236235119
patch: return 0 . 0 * ( ( double ) Erf . erf ( ( x - mean ) /
rank: 671
score: 99.49101706112133
patch: return 0 . $NUMBER$ * Erf . $NUMBER$ * ( x - mean ) /
rank: 671
score: 99.46624755859375
patch: return Math . sqrt ( Erf . erf ( ( x - mean ) / (
rank: 671
score: 99.39129482171474
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( . x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; ;
rank: 671
score: 99.31781684027777
patch: return 0 . 0 * ( * Erf . erf ( ( x - mean )
rank: 671
score: 99.28972710503473
patch: return ( 0 . $NUMBER$ + Erf . erf ( ( x - mean ) -
rank: 672
score: 99.54775895743535
patch: return 0 . $NUMBER$ . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / Erf . erf (
rank: 672
score: 99.50177556818181
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( long ) mean ) /
rank: 672
score: 99.39117431640625
patch: return ( 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 673
score: 99.54774212015086
patch: return 0 . $NUMBER$ * 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) /
rank: 673
score: 99.50169677734375
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( 1 . 0 + Erf ) /
rank: 673
score: 99.495849609375
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / 1 . 0 ) ;
rank: 673
score: 99.46561008029514
patch: return 0 . 0 * ( 1 . 0 ) + ( 1 . 0 ) ;
rank: 673
score: 99.39085629111842
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf / ( standard CaMeL Deviation * Math . sqrt ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 673
score: 99.31728786892361
patch: return ( ( 1 . 0 + Erf . erf ( ( x - 1 )
rank: 673
score: 99.28929307725694
patch: return ( 0 . 0 + Erf . erf ( ( x - mean ) >
rank: 674
score: 99.54752197265626
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean
rank: 674
score: 99.49583798363095
patch: return ( float ) ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 674
score: 99.49004448784723
patch: return 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / /
rank: 674
score: 99.46533203125
patch: return 0 . 0 + Erf . erf ( ( x - mean ) + (
rank: 674
score: 99.39072672526042
patch: return ( $NUMBER$ . $NUMBER$ + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; }
rank: 674
score: 99.31687927246094
patch: return 0 . $NUMBER$ * Erf . erf ( ( x <= mean )
rank: 674
score: 99.28917738970588
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 > standard CaMeL Deviation *
rank: 675
score: 99.54727172851562
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double - mean ) / $NUMBER$ . 0 ) / Erf . erf (
rank: 675
score: 99.50135387073864
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( new x - mean ) /
rank: 675
score: 99.48916480654762
patch: return 0 . $NUMBER$ * Erf ( Erf ( ( x - mean ) / mean ) /
rank: 675
score: 99.39070638020833
patch: return ( double ) 0 . $NUMBER$ * ( 1 . 0 ) ;
rank: 675
score: 99.31684705946181
patch: double ( $NUMBER$ . 0 + Erf . erf ( ( x - mean ) /
rank: 675
score: 99.28911276424633
patch: ( 0 . 0 + Erf . erf ( ( x - mean ) /
rank: 676
score: 99.4886474609375
patch: double ( 0 . $NUMBER$ + Erf . erf ( ( x - mean ) /
rank: 676
score: 99.46425170898438
patch: return 0 . $NUMBER$ * 0 + Erf . erf ( ( x - mean ) ) ;
rank: 676
score: 99.39056865985577
patch: return 0 . 0 * ( $NUMBER$ . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 676
score: 99.3166862936581
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( final - mean )
rank: 677
score: 99.5469482421875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / mean ) ;
rank: 677
score: 99.52740478515625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf . erf ( ( x - mean ) *
rank: 677
score: 99.49571644176136
patch: return ( 0 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 +
rank: 677
score: 99.48837890625
patch: int 0 = ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 677
score: 99.46380004882812
patch: return Erf . erf ( ( x - mean ) / ( x - mean ) ) ;
rank: 677
score: 99.39052483974359
patch: return cumulative CaMeL Probability ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; }
rank: 677
score: 99.31646050347223
patch: return ( 0 . 1 + Erf . erf ( ( x - mean ) /
rank: 677
score: 99.28905531939338
patch: return ( 1 . 0 + 1 . 0 + ( x - mean ) /
rank: 678
score: 99.54691938920455
patch: double 0 = ( 1 . 0 + Erf . erf ( ( x - mean ) / mean (
rank: 678
score: 99.5272216796875
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) * 1 . 0 ) ;
rank: 678
score: 99.50098765980114
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( new x - mean ) /
rank: 678
score: 99.48835100446429
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / - mean ) /
rank: 678
score: 99.39047323690879
patch: return 0 . $NUMBER$ * $NUMBER$ . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 678
score: 99.31617736816406
patch: return ( double ) ( Erf . erf ( ( x - mean )
rank: 678
score: 99.28861236572266
patch: return 0 . 0 * ( 1 . 0 + x - mean ) /
rank: 679
score: 99.5468513734879
patch: return 0 . $NUMBER$ * Math . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 679
score: 99.5272216796875
patch: return ( ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 679
score: 99.50097045898437
patch: return 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) ;
rank: 679
score: 99.49529474431819
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / $NUMBER$ . 0 + Erf . erf ( ) / $NUMBER$ . 0 ,
rank: 679
score: 99.48806583180146
patch: return 0 . $NUMBER$ * ( ( x . erf ( ) - mean ) /
rank: 679
score: 99.46300591362848
patch: return 0 . $NUMBER$ * ( x - mean ) / ( 1 . 0 ) ;
rank: 679
score: 99.39043225740132
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) -
rank: 679
score: 99.28856703814338
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 / ( 1 . 0
rank: 680
score: 99.54681803385417
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / Erf . length ( ) ) /
rank: 680
score: 99.52684384300595
patch: return 0 . $NUMBER$ * $NUMBER$ . 0 * Erf . erf ( ( x - mean ) /
rank: 680
score: 99.5008877840909
patch: return $NUMBER$ . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) ;
rank: 680
score: 99.46288384331598
patch: return 0 . $NUMBER$ + Erf . erf ( ( x - mean ) + (
rank: 680
score: 99.39023166232639
patch: return ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; else
rank: 680
score: 99.3150634765625
patch: return 0 . 0 * Erf . erf ( ( int - mean )
rank: 681
score: 99.546630859375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) * Erf . erf ( ) )
rank: 681
score: 99.50066583806819
patch: return 0 . 1 * ( 1 . 0 * Erf . erf ( ( x - mean ) /
rank: 681
score: 99.49493408203125
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 . 0
rank: 681
score: 99.4626708984375
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) + mean )
rank: 681
score: 99.39004907852564
patch: return $NUMBER$ . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 681
score: 99.2876220703125
patch: return 0 . $NUMBER$ + ( 1 . 0 + x - mean )
rank: 682
score: 99.54656575520833
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ) / ( 1 . 0 + Erf . erf ( ) / /
rank: 682
score: 99.49486694335937
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / $NUMBER$ . 0
rank: 682
score: 99.48579334077381
patch: return 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / 1 . 0 )
rank: 682
score: 99.38983979096284
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) .
rank: 682
score: 99.31433919270833
patch: return 0 . $NUMBER$ * ( 1 . - x - mean ) ;
rank: 682
score: 99.28759765625
patch: return 0 . 0 + ( 1 . 0 + 1 . 0 ) ;
rank: 683
score: 99.4857177734375
patch: return 0 . 0 * Erf . erf ( ( x - mean ) / / /
rank: 683
score: 99.46215209960937
patch: return 0 . $NUMBER$ * ( standard CaMeL Deviation * Math . sqrt ( standard CaMeL Deviation ) /
rank: 683
score: 99.38956491570724
patch: return cumulative CaMeL Probability ( 0 . 0 * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 683
score: 99.28743489583333
patch: return ( 0 . 0 + ( 1 . 0 + 1 . 0 ) / (
rank: 684
score: 99.5465087890625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / / Erf . erf ( ) /
rank: 684
score: 99.52622477213542
patch: return 0 . 0 * ( 1 . 0 + Erf . erf . erf ( ( x - mean ) /
rank: 684
score: 99.49421691894531
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 / $NUMBER$
rank: 684
score: 99.48530505952381
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 0 . ) /
rank: 684
score: 99.46121554904514
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) & (
rank: 684
score: 99.3135986328125
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( x - mean ) *
rank: 685
score: 99.5464103452621
patch: return 0 . $NUMBER$ * 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 685
score: 99.38897026909723
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; }
rank: 685
score: 99.31289493336396
patch: return 0 . $NUMBER$ * * Erf . erf ( ( x - mean )
rank: 686
score: 99.52565696022727
patch: return 0 . 0 * Erf . erf ( Erf . erf ( ( x - mean ) *
rank: 686
score: 99.49373626708984
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - 0 . 0 ) / $NUMBER$ . 0 ) / $NUMBER$ . 0
rank: 686
score: 99.48471214657738
patch: return 0 . 0 * 1 . 0 * Erf . erf ( ( x - mean ) /
rank: 686
score: 99.38894171463816
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf 1 ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 686
score: 99.31277804904514
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - max ) /
rank: 686
score: 99.28667853860294
patch: return ( 0 . 0 + ( 1 . 0 + x - mean ) /
rank: 687
score: 99.54599609375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / $NUMBER$ . 0 ) / 0 . 0
rank: 687
score: 99.525390625
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) << 0 . 0 ) /
rank: 687
score: 99.49352657433712
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 + Erf . 0 . 0 +
rank: 687
score: 99.48414370888158
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean - mean ) /
rank: 687
score: 99.45989990234375
patch: return erf . erf ( Erf . erf ( ( x - mean ) / (
rank: 687
score: 99.388916015625
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( 1 . 0 ) ) ) ) ;
rank: 687
score: 99.31264919704861
patch: return $STRING$ . $NUMBER$ * ( Erf . erf ( ( x - mean ) /
rank: 687
score: 99.28658040364583
patch: return ( 0 . $NUMBER$ + Erf . erf ( ( x - mean ) ?
rank: 688
score: 99.5459220640121
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / this . Erf . erf ( ) /
rank: 688
score: 99.49339710582386
patch: return ( 0 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 /
rank: 688
score: 99.48402913411458
patch: if ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) /
rank: 688
score: 99.38865661621094
patch: return 0 . 0 * ( 1 . 0 + Erf ) ; }
rank: 688
score: 99.31255744485294
patch: return 0 . 0 * ( Erf . erf ( ( byte - mean )
rank: 688
score: 99.28607855902777
patch: return 0 . $NUMBER$ * ( 1 . abs 1 ( x - mean ) / (
rank: 689
score: 99.54573567708333
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / erf ) /
rank: 689
score: 99.5247802734375
patch: return ( 1 . $NUMBER$ + 1 . 0 + Erf . erf ( ( x - mean ) ;
rank: 689
score: 99.49822443181819
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean , ( x - mean ) /
rank: 689
score: 99.49317169189453
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) / 1 . 0 ) ;
rank: 689
score: 99.45866563585069
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( null )
rank: 689
score: 99.38827853732639
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( this . erf ( $NUMBER$ . 0 ) ) ) ) ; }
rank: 689
score: 99.31254069010417
patch: return 1 . $NUMBER$ * ( Erf . erf ( ( x - mean ) /
rank: 690
score: 99.524658203125
patch: return ( 0 . $NUMBER$ + Erf . erf ( ( x - mean ) ;
rank: 690
score: 99.49310593377976
patch: return ( ( double ) 0 . $NUMBER$ + Erf . erf ( ( x - mean ) /
rank: 690
score: 99.48320079985119
patch: double Double 0 = ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 690
score: 99.38824619391026
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( standard CaMeL Deviation * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) . 0 ) ) ;
rank: 690
score: 99.28569793701172
patch: return 0 [ $NUMBER$ / Erf . erf ( ( x - mean )
rank: 691
score: 99.545166015625
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / Erf . erf ( )
rank: 691
score: 99.49784923735119
patch: return 0 . $NUMBER$ * 1 . 1 * Erf . erf ( ( x - mean ) /
rank: 691
score: 99.48277064732143
patch: return 0 . $NUMBER$ * ( ( x . erf ( ( x - mean ) / mean ) /
rank: 691
score: 99.4583740234375
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) ) . erf (
rank: 691
score: 99.38800205328526
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation > Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 691
score: 99.28567325367646
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 >= standard CaMeL Deviation *
rank: 692
score: 99.54473470052083
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf ( 1 . 0 ) ) /
rank: 692
score: 99.49784712357955
patch: return 0 . $NUMBER$ : ( 1 . 0 + Erf . erf ( ( x - mean ) ;
rank: 692
score: 99.49216918945312
patch: return 0 . 0 * ( double ) Erf . erf ( ( x - mean ) /
rank: 692
score: 99.48259626116071
patch: 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 692
score: 99.31126185825893
patch: return 0 . $NUMBER$ * ( 1 == ( x - mean )
rank: 692
score: 99.28554958767361
patch: return ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) ==
rank: 693
score: 99.54429524739584
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / Erf . erf ( ) / /
rank: 693
score: 99.5240811434659
patch: return 0 . $NUMBER$ * Erf . erf ( Erf . erf ( ( x - mean ) ,
rank: 693
score: 99.4978360262784
patch: throw 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) ;
rank: 693
score: 99.491943359375
patch: return ( 0 . $NUMBER$ * ( double ) Erf . erf ( ( x - mean ) /
rank: 693
score: 99.45752631293402
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) > (
rank: 693
score: 99.38633326480263
patch: return 0 . 0 * ( 1 . 0 + Erf . erf $NUMBER$ ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 693
score: 99.3112564086914
patch: return $STRING$ . ( Erf . erf ( ( x - mean ) /
rank: 693
score: 99.28482394748264
patch: return 0 . 0 * ( 1 . get ( ( x - mean ) / (
rank: 694
score: 99.54404296875
patch: double . return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / /
rank: 694
score: 99.52403192934783
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( 1 . 0 ) /
rank: 694
score: 99.49766956676136
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( double ) / mean ) /
rank: 694
score: 99.4574951171875
patch: return 0 . $NUMBER$ * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . $NUMBER$ ) /
rank: 694
score: 99.38629150390625
patch: return ( 0 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( 1 . 0 ) ) ) ) ; }
rank: 695
score: 99.54404084578805
patch: return 0 . 0 * ( 1 . 0 + Erf . get ( ( x - mean ) / /
rank: 695
score: 99.49735884232955
patch: return 0 . 0 ? ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 695
score: 99.49152374267578
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( int ) Erf . erf ( ( x - 0 . 0 ) /
rank: 695
score: 99.48158482142857
patch: return 0 . $NUMBER$ * ( x - Erf . erf ( ( x - mean ) ) /
rank: 695
score: 99.45728217230902
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( null ,
rank: 695
score: 99.38595993454392
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( 1 . 0 ) ) ) ;
rank: 695
score: 99.31113568474265
patch: return ( 1 . 1 + Erf . erf ( ( x - mean )
rank: 695
score: 99.28456025965073
patch: return 0 . $NUMBER$ * ( 1 . abs ( x - mean ) / (
rank: 696
score: 99.54339402721774
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / . 0 ) / Erf . erf (
rank: 696
score: 99.497314453125
patch: return 0 . $NUMBER$ | ( 1 . 0 * Erf . erf ( ( x - mean ) /
rank: 696
score: 99.49109256628788
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 / $NUMBER$ /
rank: 696
score: 99.48085239955357
patch: return 0 . 0 * Erf . erf ( ( x - mean ) / / mean ) /
rank: 696
score: 99.3857421875
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) . erf ( ) ) ) ;
rank: 696
score: 99.31107823988971
patch: return - $NUMBER$ . 0 * Erf . erf ( ( x - mean )
rank: 696
score: 99.28444010416666
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + x - mean )
rank: 697
score: 99.49091131036931
patch: return ( 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / $NUMBER$ . 0 /
rank: 697
score: 99.48064108455883
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( x - erf ) /
rank: 697
score: 99.45715942382813
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( 1 . 0 + 1 . 0 )
rank: 697
score: 99.38573540581598
patch: return 0 . $NUMBER$ * Erf . cumulative CaMeL Probability ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; ;
rank: 697
score: 99.31102752685547
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - 1 )
rank: 697
score: 99.28415256076389
patch: return 0 . $NUMBER$ * ( 1 . min ( ( x - mean ) / (
rank: 698
score: 99.5431396484375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / Erf . erf ( ) ) *
rank: 698
score: 99.5234707919034
patch: return 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double - mean ) /
rank: 698
score: 99.49668190696023
patch: return 0 . $NUMBER$ * Erf . erf ( ( double - mean ) / 0 . 0 ) /
rank: 698
score: 99.49067687988281
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 . 0 ) / $NUMBER$ . 0
rank: 698
score: 99.45609130859376
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + erf ( ( x - mean ) / (
rank: 698
score: 99.38533308699324
patch: return 0 . 0 + ( 1 . 0 + Erf . erf ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 698
score: 99.31066131591797
patch: return 0 . $NUMBER$ * ( Erf . erf ( x - mean )
rank: 698
score: 99.28415096507354
patch: return 0 . $NUMBER$ * ( 1 . min ( ( x - mean ) /
rank: 699
score: 99.54303385416667
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / Erf . erf ( double ) /
rank: 699
score: 99.49661690848214
patch: return 0 . $NUMBER$ + 0 . $NUMBER$ * Erf . erf ( ( x - mean ) /
rank: 699
score: 99.4903335571289
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( 1 . 0 / Erf . 0 + Erf . 0 /
rank: 699
score: 99.48029436383929
patch: return 0 . $NUMBER$ + 1 . 0 * Erf . erf ( ( x - mean ) /
rank: 699
score: 99.45599365234375
patch: return 0 . $NUMBER$ * ( $NUMBER$ . 0 ) + ( 1 . 0 ) ;
rank: 699
score: 99.38507401315789
patch: if 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) )
rank: 699
score: 99.31051296657986
patch: return ( 1 . 0 + Erf . erf ( ( x - mean 1 .
rank: 699
score: 99.2840087890625
patch: if ( 0 < Erf . erf ( ( x - mean )
rank: 700
score: 99.52306019176136
patch: return 0 . $NUMBER$ * Erf . erf ( Erf . erf ( ( int - mean ) /
rank: 700
score: 99.49614923650569
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ ( Erf . erf ( ( x - mean ) /
rank: 700
score: 99.49029181985294
patch: return 0 . $NUMBER$ / Erf . erf ( ( x - mean ) /
rank: 700
score: 99.47972412109375
patch: return new Double ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 700
score: 99.38494551809211
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( standard CaMeL Deviation * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; else
rank: 700
score: 99.310302734375
patch: return $STRING$ . cumulative CaMeL Probability ( x . erf ( ( x - mean ) /
rank: 700
score: 99.28396267361111
patch: return ( 0 . 0 + ( 1 . 0 + x - mean ) / (
rank: 701
score: 99.54273274739583
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 + 1 . 0 /
rank: 701
score: 99.49601606889205
patch: return 0 . $NUMBER$ * ( 1 . 0 || Erf . erf ( ( x - mean ) ;
rank: 701
score: 99.47955031622024
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean _
rank: 701
score: 99.45569525824652
patch: return 0 . $NUMBER$ * 1 * ( 1 . 0 + Erf . erf (
rank: 701
score: 99.38493266858552
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ,
rank: 701
score: 99.31001790364583
patch: return ( 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( (
rank: 702
score: 99.54267578125
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / mean ) /
rank: 702
score: 99.49590509588069
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - abs ) /
rank: 702
score: 99.49009486607143
patch: return ( int ) ( 0 . 0 + Erf . erf ( ( x - mean ) /
rank: 702
score: 99.45565635279605
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / *
rank: 702
score: 99.38473992598684
patch: return cumulative CaMeL Probability ( 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 702
score: 99.30948893229167
patch: return 0 . 0 * Erf . erf ( ( int ) ( 1 . 0
rank: 702
score: 99.28379991319444
patch: return 0 . $NUMBER$ + ( 1 . 0 + ( 1 . 0 ) / (
rank: 703
score: 99.54263969089673
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x + mean ) / /
rank: 703
score: 99.49574973366477
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x + mean ) /
rank: 703
score: 99.47887602306548
patch: if ( Double . = 0 . $NUMBER$ + Erf . erf ( ( x - mean ) /
rank: 703
score: 99.45528564453124
patch: return ( 1 . 0 + Erf . erf ( ( x - mean ) / ( (
rank: 703
score: 99.38455278445512
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . min ( $NUMBER$ . 0 ) ) ) ) ;
rank: 703
score: 99.3094482421875
patch: return ( 0 . 0 + ( x - mean ) /
rank: 703
score: 99.28345404730902
patch: return 0 . 0 * ( 1 . 0 + Erf == 0 . 0 )
rank: 704
score: 99.52266068892045
patch: return 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - 0 ) /
rank: 704
score: 99.49568314985795
patch: return 0 . $NUMBER$ * Erf . erf ( Erf . erf ( ( double ) mean ) /
rank: 704
score: 99.48963512073864
patch: return 0 . $NUMBER$ * ( 1 . 0 / Erf . erf ( ( x - mean ) *
rank: 704
score: 99.47821335565476
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 0 . 0 *
rank: 704
score: 99.45504760742188
patch: return 0 . $NUMBER$ * ( standard CaMeL Deviation * Math . sqrt ( 1 . 0 ) /
rank: 704
score: 99.38441297743056
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; ;
rank: 704
score: 99.30912511488971
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( byte ) 1 .
rank: 704
score: 99.28341335720486
patch: return 0 . $NUMBER$ + ( 1 . 0 + ( x - mean ) / (
rank: 705
score: 99.48960876464844
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 / Erf . 0 ) /
rank: 705
score: 99.47773822985198
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / / *
rank: 705
score: 99.38437906901042
patch: return ( 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; else
rank: 705
score: 99.30908203125
patch: return 0 . 0 * ( Erf . erf ( ( int ) 1 . 0
rank: 705
score: 99.28314568014706
patch: return 0 . 0 * ( 1 . get ( ( x - mean ) /
rank: 706
score: 99.54127604166666
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / Erf . erf ( ) / /
rank: 706
score: 99.5225497159091
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - 0 ) /
rank: 706
score: 99.4934310913086
patch: return 0 . $NUMBER$ * 0 . $NUMBER$ * ( x - mean ) /
rank: 706
score: 99.48954772949219
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 / Erf . 0 / $NUMBER$
rank: 706
score: 99.47757393973214
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean . erf ( ) ) /
rank: 706
score: 99.38413962339743
patch: return 0 . $NUMBER$ * ( x . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 706
score: 99.30860811121323
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ( (
rank: 706
score: 99.2828369140625
patch: return 0 . $NUMBER$ * ( 1 . min + mean ) / (
rank: 707
score: 99.52248128255208
patch: return Erf . erf ( Erf . erf ( ( x - mean ) /
rank: 707
score: 99.49273360402961
patch: return 0 . $NUMBER$ * ( 1 . 0 + mean ( ( x - mean ) ;
rank: 707
score: 99.48929268973214
patch: return 0 . $NUMBER$ * ( int ) ( Erf . erf ( ( x - mean ) /
rank: 707
score: 99.47730210248162
patch: return 0 . $NUMBER$ * ( erf . erf ( ( x - mean ) /
rank: 707
score: 99.45461018880208
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( $NUMBER$ . 0 ) ) ;
rank: 707
score: 99.38396062077703
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ ) ) ) ) ;
rank: 707
score: 99.30830213758681
patch: return 0 . $NUMBER$ * Erf . erf ( ( ( x - mean ) /
rank: 707
score: 99.28257921006944
patch: return ( 1 . 0 + Erf . erf ( ( x - mean ) <<
rank: 708
score: 99.54099987399194
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / ( 1 . 0 + Erf . erf ( ) ) /
rank: 708
score: 99.52247203480114
patch: return 0 . $NUMBER$ * ( 1 . 0 > Erf . erf ( ( x - mean ) /
rank: 708
score: 99.49248976934524
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( 1 . 0 + 1 . 0 ) /
rank: 708
score: 99.4772716703869
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / / ) /
rank: 708
score: 99.45457699424342
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + erf ( ( x - mean ) /
rank: 708
score: 99.38358451224663
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt $NUMBER$ . 0 ) ) ) ;
rank: 708
score: 99.30826568603516
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean -
rank: 708
score: 99.28232150607639
patch: return ( 0 . 0 + Erf . erf ( ( x - mean ) +
rank: 709
score: 99.54044858870968
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf ) / Erf . erf ( (
rank: 709
score: 99.52217240767045
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( int ) 1 ) /
rank: 709
score: 99.49234008789062
patch: return 0 * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) /
rank: 709
score: 99.48881530761719
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) Erf . erf ( ( x - 0 . 0 ) /
rank: 709
score: 99.45377604166667
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ ) / ( 1 . 0 ) ;
rank: 709
score: 99.38198370682566
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf = ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 709
score: 99.30803765190973
patch: return ( 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( (
rank: 709
score: 99.28230794270833
patch: return 0 . $NUMBER$ * ( 1 . 0 + x - $NUMBER$ . 0 ) ;
rank: 710
score: 99.54025135869566
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . get ( ( x - mean ) / /
rank: 710
score: 99.49214680989583
patch: return 0 . $NUMBER$ * ( ( x - mean ) / 1 . 0 ) ;
rank: 710
score: 99.4888028231534
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - 1 ) /
rank: 710
score: 99.47620210193452
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( x - mean ) / 0 . $NUMBER$ )
rank: 710
score: 99.45342658547794
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) !=
rank: 710
score: 99.3816779641544
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . 0 ) ; ;
rank: 710
score: 99.30801391601562
patch: return 0 . 0 * ( 1 . 0 + Erf . erf $NUMBER$
rank: 710
score: 99.28215196397569
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( x > mean ) / (
rank: 711
score: 99.53911946614583
patch: return 0 . $NUMBER$ . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) / mean ) /
rank: 711
score: 99.49188553659539
patch: return 0 . $NUMBER$ * ( 1 . 0 * ( 1 . 0 + mean ) /
rank: 711
score: 99.48870239257812
patch: return 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / mean ) ;
rank: 711
score: 99.47569056919643
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( mean - mean ) /
rank: 711
score: 99.4532958984375
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) + mean ) ;
rank: 711
score: 99.3814468383789
patch: return 0 . $NUMBER$ * ( ( 1 . 0 ) + mean ) ;
rank: 711
score: 99.30768500434027
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ( (
rank: 711
score: 99.28211885340073
patch: return ( 0 . 0 + Erf . erf ( ( x > mean )
rank: 712
score: 99.539111328125
patch: return 0 . $NUMBER$ . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / Erf . erf ( (
rank: 712
score: 99.48856238162878
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / $NUMBER$ . 0 + Erf . erf ( ) / $NUMBER$ . 0 )
rank: 712
score: 99.4755626860119
patch: return 0 . $NUMBER$ * ( ( x - mean ) / 0 . 0 + Erf ) /
rank: 712
score: 99.45296020507813
patch: return 0 . 0 + 1 . $NUMBER$ + Erf . erf ( ( x - mean )
rank: 712
score: 99.38109066611842
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( this . erf ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) &&
rank: 712
score: 99.30767415364583
patch: return 0 , Erf . erf ( ( x - mean ) /
rank: 712
score: 99.2820816040039
patch: if ( 0 <= Erf . erf ( ( x - mean ) /
rank: 713
score: 99.52168412642045
patch: return 1 . $NUMBER$ * Erf . erf ( Erf . erf ( ( x - mean ) ;
rank: 713
score: 99.48847198486328
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 / /
rank: 713
score: 99.47554524739583
patch: return 0 . $NUMBER$ * ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 713
score: 99.45294510690789
patch: return 0 . $NUMBER$ + ( 1 . 0 + erf ( ( x - mean ) /
rank: 713
score: 99.30750229779412
patch: return ( ( double ) Erf . erf ( ( x - mean ) *
rank: 713
score: 99.281982421875
patch: return ( 1 . 0 + Erf . erf ( ( x - mean ) !=
rank: 714
score: 99.53860572076613
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - 0 . 0 ) / Erf . erf ( ) /
rank: 714
score: 99.52162388392857
patch: return ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / erf ) /
rank: 714
score: 99.49066162109375
patch: return 0 . 0 * ( Erf . erf ( ( x - mean ) ;
rank: 714
score: 99.48833869485294
patch: return ( double ) ( Erf . erf ( ( x - mean ) /
rank: 714
score: 99.47538829985119
patch: return 0 . $NUMBER$ + ( Erf . erf ( ( x - mean ) / mean ) /
rank: 714
score: 99.38075921474359
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 714
score: 99.30723063151042
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( Erf . erf ( (
rank: 714
score: 99.2818832397461
patch: return 0 . $NUMBER$ * ( 1 . 0 + x - mean ) )
rank: 715
score: 99.48790922619048
patch: return ( 0 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0
rank: 715
score: 99.4751209077381
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ) / mean ) /
rank: 715
score: 99.37981214021382
patch: return 0 . * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 715
score: 99.30721706814236
patch: return ( cumulative CaMeL Probability * Erf . erf ( ( x - mean ) /
rank: 715
score: 99.28179572610294
patch: return 0 . $NUMBER$ + ( 1 . 0 + x - mean ) / (
rank: 716
score: 99.53846842447916
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / Erf . erf ( ( double )
rank: 716
score: 99.48814174107143
patch: return 0 . $NUMBER$ * Math . max ( Erf . erf ( ( x - mean ) /
rank: 716
score: 99.48786163330078
patch: return 0 . $NUMBER$ / ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 ) ;
rank: 716
score: 99.47510928199405
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 1 . get CaMeL
rank: 716
score: 99.379638671875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ == 0 . 0 )
rank: 716
score: 99.3069709329044
patch: return cumulative CaMeL Probability ( Erf . erf ( ( x - mean ) *
rank: 716
score: 99.28169080946181
patch: return 0 . $NUMBER$ * ( 1 . 0 + x - Math . sqrt ( $NUMBER$
rank: 717
score: 99.53846807065217
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / $NUMBER$
rank: 717
score: 99.48813348067434
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( $STRING$ ) /
rank: 717
score: 99.48737866950758
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( int ) Erf . erf ( ( x - 0 . 0 ) ) /
rank: 717
score: 99.45198364257813
patch: return 0 . $NUMBER$ + 1 . $NUMBER$ + Erf . erf ( ( x - mean )
rank: 717
score: 99.37957442434211
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( . x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 1 ) ) ) ;
rank: 717
score: 99.30654568142361
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( int - mean ) /
rank: 717
score: 99.28122287326389
patch: return 0 . $NUMBER$ * ( 1 . intern ( ( x - mean ) / (
rank: 718
score: 99.53843622622283
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / $NUMBER$ . 0 ) ;
rank: 718
score: 99.52119584517045
patch: return ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 )
rank: 718
score: 99.4875255766369
patch: return 0 . $NUMBER$ * 1 . 0 + Erf . erf ( ( x - mean ) ;
rank: 718
score: 99.47472563244048
patch: return 0 . ( ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 718
score: 99.45173196231617
patch: return 0 . 0 + Erf . erf ( ( x - mean ) +
rank: 718
score: 99.379150390625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( standard CaMeL Deviation * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) +
rank: 718
score: 99.30628119574652
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( 0 ,
rank: 718
score: 99.2808478860294
patch: return 0 . $NUMBER$ * ( 1 . 0 + x - 1 . 0 )
rank: 719
score: 99.538427734375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double - mean ) / mean ) / Erf . erf (
rank: 719
score: 99.52108909970238
patch: return ( 1 . 0 + Erf . erf ( ( x - mean ) / erf ) /
rank: 719
score: 99.48724655877976
patch: return 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / 1 . 0 +
rank: 719
score: 99.451513671875
patch: return 0 . $NUMBER$ + 0 . 0 + Erf . erf ( ( x - mean )
rank: 719
score: 99.37737274169922
patch: return ( 0 . $NUMBER$ * ( 1 . 0 + mean ) ) ;
rank: 719
score: 99.30596245659723
patch: return 0 . $NUMBER$ * Erf . cumulative CaMeL Probability ( x - mean ) /
rank: 719
score: 99.28038872612848
patch: return 0 . 0 * ( 1 . abs ( ( x - mean ) / (
rank: 720
score: 99.5382568359375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / / Erf . erf ( double )
rank: 720
score: 99.47416759672619
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / / x ) /
rank: 720
score: 99.37680288461539
patch: return ( 0 . 0 + 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 720
score: 99.30575741038604
patch: return ( 1 . 0 + Erf . erf ( ( x + mean )
rank: 721
score: 99.53822393002717
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / )
rank: 721
score: 99.52052001953125
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) << $NUMBER$ ) ;
rank: 721
score: 99.48646946957237
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( $STRING$ ) /
rank: 721
score: 99.47404210707721
patch: return 0 . $NUMBER$ * ( ( x - mean ) / 0 . 0 +
rank: 721
score: 99.45090203536184
patch: return 0 . 0 + ( 1 . 0 + erf ( ( x - mean ) /
rank: 721
score: 99.37676680715461
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( . x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . $NUMBER$ ) ) ) ;
rank: 721
score: 99.30555635340073
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - min )
rank: 721
score: 99.28004673549107
patch: return 0 < Erf . erf ( ( x - mean )
rank: 722
score: 99.53782552083334
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / / Erf . erf ( ) )
rank: 722
score: 99.52006603422619
patch: return 0 . $NUMBER$ * 1 . $NUMBER$ * Erf . erf ( ( x - mean ) *
rank: 722
score: 99.48701477050781
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( int ) Erf . erf ( ( x - 0 . $NUMBER$ ) /
rank: 722
score: 99.47356305803571
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / $NUMBER$ ) /
rank: 722
score: 99.45069715711806
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) >
rank: 722
score: 99.37676038240132
patch: return 0 . $NUMBER$ * Math . sqrt ( Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 722
score: 99.27999114990234
patch: if ( 1 == Erf . erf ( ( x - mean ) /
rank: 723
score: 99.53781127929688
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / Erf . erf ( 0 . 0 ) /
rank: 723
score: 99.52003115699405
patch: return 0 . $NUMBER$ * 1 . 0 * Erf . erf ( ( x - mean ) *
rank: 723
score: 99.4730224609375
patch: try { return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) /
rank: 723
score: 99.450439453125
patch: return Erf . erf ( ( x - mean ) / ( 1 . 0 )
rank: 723
score: 99.37658378405449
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - 1 ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 723
score: 99.30530548095703
patch: return 0 . 0 * 1 . 0 + ( ( x - mean )
rank: 723
score: 99.27928924560547
patch: return 0 . 0 * ( 1 . get ( x - mean ) /
rank: 724
score: 99.53776041666667
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 + $STRING$ ) / /
rank: 724
score: 99.48651413690476
patch: return ( double ) ( 1 . $NUMBER$ * Erf . erf ( ( x - mean ) /
rank: 724
score: 99.48622349330357
patch: return 0 . $NUMBER$ ? 0 . $NUMBER$ * Erf . erf ( ( x - mean ) /
rank: 724
score: 99.44998168945312
patch: return 0 . $NUMBER$ * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ,
rank: 724
score: 99.37653370392628
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) +
rank: 724
score: 99.30463723575367
patch: return ( 0 . 1 + Erf . erf ( ( x - mean )
rank: 724
score: 99.27895779079861
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( x + mean ) / (
rank: 725
score: 99.51936141304348
patch: return 0 . 0 * Erf . erf ( ( x - mean ) , ( x - mean ) /
rank: 725
score: 99.48587839226974
patch: x = ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 725
score: 99.48557350852273
patch: return ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 /
rank: 725
score: 99.47274925595238
patch: return 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / / mean ) /
rank: 725
score: 99.44879760742188
patch: return 0 . 0 * 0 + Erf . erf ( ( x - mean ) / (
rank: 725
score: 99.37610802283653
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . max ( $NUMBER$ . 0 ) ) ) ) ;
rank: 725
score: 99.30463518415179
patch: return ( ( 1 . 0 + ( x - mean ) /
rank: 726
score: 99.53750610351562
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / 1 . 0 ) /
rank: 726
score: 99.48515392485119
patch: return 0 . $NUMBER$ * ( float ) ( Erf . erf ( ( x - mean ) /
rank: 726
score: 99.47230360243056
patch: return 0 . $NUMBER$ * Erf ( Erf ( ( x - mean ) /
rank: 726
score: 99.44877794053819
patch: return 0 . 1 + Erf . erf ( ( x - mean ) ) ;
rank: 726
score: 99.37446674547698
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ||
rank: 726
score: 99.30458068847656
patch: return 0 . $NUMBER$ * Erf . erf ( ( max - mean )
rank: 727
score: 99.53723725818452
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / $NUMBER$ / /
rank: 727
score: 99.5191650390625
patch: return 0 . $NUMBER$ * ( 0 . 0 + Erf . erf ( ( x - mean ) *
rank: 727
score: 99.47212146577381
patch: if ( Erf = 0 . 0 + Erf . erf ( ( x - mean ) /
rank: 727
score: 99.37421618009868
patch: return 0 . 0 * ( 1 . 0 + Erf . erf [ ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 727
score: 99.27706909179688
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf == length *
rank: 728
score: 99.53723538306451
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / Erf . erf ( ( double ) mean ) / mean )
rank: 728
score: 99.47128441220238
patch: return 0 . $NUMBER$ * Erf . erf ( ( x . mean ( ) - mean ) /
rank: 728
score: 99.44859619140625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( $STRING$ ) ) ;
rank: 728
score: 99.37403003589527
patch: return $NUMBER$ . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) )
rank: 728
score: 99.30423312717014
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean 1 ) /
rank: 728
score: 99.27649643841912
patch: if ( $STRING$ . equals ( Erf . erf ( ( x - mean )
rank: 729
score: 99.53709309895834
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / Erf . erf ( ) ) )
rank: 729
score: 99.51795151654412
patch: return 1 . $NUMBER$ * Erf . erf ( ( x - mean ) *
rank: 729
score: 99.48238699776786
patch: double Erf = ( 0 . 0 + Erf . erf ( ( x - mean ) /
rank: 729
score: 99.47122628348214
patch: return ( ( double ) 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 729
score: 99.44811401367187
patch: return 0 . 0 + ( 1 . 0 + erf ( ( x - mean ) / (
rank: 729
score: 99.37387167440879
patch: return ( 0 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) . 0 ) ) ) ;
rank: 729
score: 99.30372619628906
patch: return ( ( byte ) Erf . erf ( ( x - mean )
rank: 730
score: 99.53707753057066
patch: return 0 . 0 * ( 1 . 0 * Erf . erf ( ( x - mean ) / /
rank: 730
score: 99.5179443359375
patch: return 1 . $NUMBER$ * ( 1 . 0 ? Erf . erf ( ( x - mean ) ;
rank: 730
score: 99.48428199404762
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( 0 . $NUMBER$ ) /
rank: 730
score: 99.48221588134766
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0
rank: 730
score: 99.47010803222656
patch: return 0 . $NUMBER$ * ( x - mean ) / 0 . 0 +
rank: 730
score: 99.44782571231617
patch: return 0 . $NUMBER$ + Erf . erf ( ( x - mean ) +
rank: 730
score: 99.37374173677884
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( . x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 730
score: 99.3035888671875
patch: return 0 . $NUMBER$ * ( 1 < ( x - mean )
rank: 730
score: 99.2763427734375
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( 1 . 0
rank: 731
score: 99.53696511008523
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x * mean ) /
rank: 731
score: 99.48383178710938
patch: return 0 * ( 1 . 0 * Erf . erf ( ( x - mean ) /
rank: 731
score: 99.4818448153409
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / Erf . erf ( ( x - mean ) /
rank: 731
score: 99.44749755859375
patch: return 0 . $NUMBER$ + ( x - Erf . erf ( ( x - mean ) /
rank: 731
score: 99.37345597550676
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) . 0 ) ; }
rank: 731
score: 99.30339898003473
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( 0 )
rank: 731
score: 99.27605438232422
patch: if ( 0 + Erf . erf ( ( x - mean ) /
rank: 732
score: 99.53673785665761
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / erf
rank: 732
score: 99.481689453125
patch: return 0 . 0 * Erf . erf ( ( x - mean ) / mean ) ;
rank: 732
score: 99.4700439453125
patch: try { return ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) /
rank: 732
score: 99.44747314453124
patch: return 0 . $NUMBER$ * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) +
rank: 732
score: 99.37213917267628
patch: return $NUMBER$ . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 732
score: 99.30279900045956
patch: return ( 0 . 0 + Erf . erf ( ( x - mean ,
rank: 732
score: 99.27538299560547
patch: if ( $NUMBER$ == Erf . erf ( ( x - mean ) /
rank: 733
score: 99.5173976732337
patch: return Erf . erf ( Erf . erf ( ( x - mean ) / 0 . 0 ) /
rank: 733
score: 99.48325892857143
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . 0 ) / ( 1 . 0 +
rank: 733
score: 99.48135715060764
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 1 . 0 / Erf . 0 / Erf . 0 + Erf . 0 /
rank: 733
score: 99.46985473632813
patch: return 0 . 0 + Erf . erf ( ( x - mean ) / erf ) /
rank: 733
score: 99.44686729029605
patch: return 0 . 0 * ( Erf . erf ( ( x - mean ) ) /
rank: 733
score: 99.3719546669408
patch: return cumulative CaMeL Probability ( 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 733
score: 99.30274115668402
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean 1 . 0
rank: 733
score: 99.27501723345588
patch: return ( 0 . 0 + 1 . 0 + ( x - mean ) /
rank: 734
score: 99.5363540649414
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) / Erf . erf ( ) /
rank: 734
score: 99.5173976732337
patch: return ( 1 . $NUMBER$ + ( 1 . 0 * Erf . erf ( ( x - mean ) /
rank: 734
score: 99.46869574652777
patch: if ( 1 . 0 * Erf . erf ( ( x - mean ) /
rank: 734
score: 99.44662136501736
patch: return 0 . 0 * ( Erf . erf ( ( x - mean ) )
rank: 734
score: 99.3716942039696
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; ;
rank: 734
score: 99.3023322610294
patch: return $NUMBER$ . 0 + Erf . erf ( ( x - mean ) /
rank: 734
score: 99.27493106617646
patch: return Integer . length ( Erf . erf ( ( x - mean ) /
rank: 735
score: 99.53627457157258
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / $NUMBER$ . 0 ) / 0 . $NUMBER$ ;
rank: 735
score: 99.48254975818452
patch: return 0 . $NUMBER$ * double . 0 * Erf . erf ( ( x - mean ) /
rank: 735
score: 99.48114776611328
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 / Erf . 0 / /
rank: 735
score: 99.44639078776042
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) << (
rank: 735
score: 99.37144118088942
patch: return 0 . $NUMBER$ * ( x - mean ) ; }
rank: 735
score: 99.3022689819336
patch: return 0 . 0 * ( ( x - Erf . erf ( (
rank: 735
score: 99.27460793887867
patch: return ( ( double ) 0 . 0 + ( 1 . 0 + Erf
rank: 736
score: 99.51725968070652
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( int - mean ) ) /
rank: 736
score: 99.48250539679276
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( this ) /
rank: 736
score: 99.48059844970703
patch: return 0 . $NUMBER$ . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0
rank: 736
score: 99.46804970189145
patch: return 0 . $NUMBER$ * Erf ( 1 . 0 + ( x - mean ) /
rank: 736
score: 99.44635620117188
patch: return 0 . $NUMBER$ * ( 1 . 0 + erf . erf ( ( x - mean )
rank: 736
score: 99.37135108741555
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( this . erf ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) .
rank: 736
score: 99.30199517144098
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( true
rank: 736
score: 99.27413940429688
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . $NUMBER$ ) ;
rank: 737
score: 99.5361564390121
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / 0 . $NUMBER$ /
rank: 737
score: 99.5172452059659
patch: return 0 . $NUMBER$ + ( 1 . 0 ? Erf . erf ( ( x - mean ) ;
rank: 737
score: 99.48213704427083
patch: return ( 1 . 0 * Erf . erf ( ( x - mean ) ;
rank: 737
score: 99.446337890625
patch: return 0 . $NUMBER$ + ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) /
rank: 737
score: 99.37116633234797
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( standard CaMeL Deviation * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; }
rank: 737
score: 99.30167882582721
patch: return ( 0 . 0 + Erf . erf ( ( x - mean +
rank: 737
score: 99.27364349365234
patch: return 0 . $NUMBER$ * ( 1 . get ( ) - mean ) ;
rank: 738
score: 99.53609212239583
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( 1 . 0 + mean ) /
rank: 738
score: 99.4817127046131
patch: return 0 . $NUMBER$ * 1 . 0 * ( 1 . 0 + ( x - mean ) /
rank: 738
score: 99.48013305664062
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( 0 . 0 + Erf . erf ( ( x - mean ) ) /
rank: 738
score: 99.46749114990234
patch: return 0 . $NUMBER$ * 0 . 0 + ( x - mean ) /
rank: 738
score: 99.44627549913194
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( 1 . $NUMBER$ ) ) ;
rank: 738
score: 99.37116442228618
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; }
rank: 738
score: 99.30116624098558
patch: return 0 . $NUMBER$ * ( ( ( x - mean )
rank: 738
score: 99.2729022686298
patch: return 0 . 0 * ( 1 . 0 + Erf
rank: 739
score: 99.5350570678711
patch: return 0 . $NUMBER$ * ( 1 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 739
score: 99.48152669270833
patch: return 0 . 0 * 0 . $NUMBER$ + Erf . erf ( ( x - mean ) /
rank: 739
score: 99.48005227481617
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( int ) 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 739
score: 99.44617919921875
patch: return 0 . 0 * 1 + Erf . erf ( ( x - mean ) / (
rank: 739
score: 99.37066485430744
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) . 0 ) ) ; ;
rank: 739
score: 99.30104693244485
patch: return 0 . 0 + Erf . erf ( ( x - mean 1 .
rank: 740
score: 99.534375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) * Erf . erf ( ) / /
rank: 740
score: 99.5169677734375
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 1 . $NUMBER$ ) ;
rank: 740
score: 99.48087158203126
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf / ( x - mean ) /
rank: 740
score: 99.47972153172348
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / $NUMBER$ . 0 + Erf . erf ( ) / $NUMBER$ . 0 *
rank: 740
score: 99.44558233963816
patch: return 0 . $NUMBER$ * ( standard CaMeL Deviation * Math . sqrt ( x ) ) ;
rank: 740
score: 99.37048026842949
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( this . erf ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 1 ) ) ) ) ;
rank: 740
score: 99.30084228515625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( &
rank: 741
score: 99.4807990579044
patch: return 0 . $NUMBER$ - Erf . erf ( ( x - mean ) /
rank: 741
score: 99.47924041748047
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 / $NUMBER$ . 0 / $NUMBER$ /
rank: 741
score: 99.46706136067708
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( double - mean ) /
rank: 741
score: 99.44527587890624
patch: return 0 . $NUMBER$ * ( ( x - mean ) / ( 1 . 0 ) ) ;
rank: 741
score: 99.37024255701013
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) )
rank: 741
score: 99.3008041381836
patch: return ( ( double ) 1 . 0 + ( x - mean ) /
rank: 741
score: 99.2724609375
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( x > mean ) /
rank: 742
score: 99.53414818548387
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) / Erf . erf ( (
rank: 742
score: 99.48074776785714
patch: return 0 . $NUMBER$ * double . $NUMBER$ * Erf . erf ( ( x - mean ) /
rank: 742
score: 99.47909725413604
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / $NUMBER$ . 0 + Erf . erf ( ) / $NUMBER$ . 0 / $NUMBER$
rank: 742
score: 99.36964818050987
patch: return $NUMBER$ . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 742
score: 99.30066636029412
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean :
rank: 742
score: 99.27219525505515
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 / 1 . 0 )
rank: 743
score: 99.53413391113281
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 + Erf . erf ( )
rank: 743
score: 99.48063579358552
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - 0 . 0 ) /
rank: 743
score: 99.47903442382812
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . get ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 ) ;
rank: 743
score: 99.4665463096217
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean + mean ) /
rank: 743
score: 99.44464789496527
patch: return 0 . $NUMBER$ ( Erf . erf ( ( x - mean ) / (
rank: 743
score: 99.36964210304055
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * standard CaMeL Deviation . 0 ) ) ) ; }
rank: 743
score: 99.3004150390625
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( int ) 1 . $NUMBER$
rank: 743
score: 99.27129364013672
patch: return ( double ) 0 . $NUMBER$ * ( 1 . 0 + Erf
rank: 744
score: 99.5154696377841
patch: return 1 . $NUMBER$ * Erf . erf ( ( x - mean ) / 1 . 0 ) ;
rank: 744
score: 99.47705078125
patch: return 0 . 0 * Erf . erf ( ( x - mean ) / $NUMBER$ . 0 +
rank: 744
score: 99.46620178222656
patch: return 0 . $NUMBER$ * ( ( x - mean ) / mean ) /
rank: 744
score: 99.36957108347039
patch: return 0 . $NUMBER$ * ( . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 744
score: 99.29993438720703
patch: return 1 . $NUMBER$ + Erf . erf ( ( x - mean )
rank: 744
score: 99.27107456752232
patch: return 0 . 0 * ( 1 . 0 + 1 . 0
rank: 745
score: 99.53404998779297
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / ( 1 . 0 + Erf . erf (
rank: 745
score: 99.479345703125
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( 0 . 0 (
rank: 745
score: 99.47688337053572
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / double . MIN _ VALUE ) / double . MIN _ VALUE )
rank: 745
score: 99.46580746299342
patch: return 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / / /
rank: 745
score: 99.36952874599359
patch: return 0 . 0 * ( 1 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 745
score: 99.29981825086806
patch: return 0 . $NUMBER$ * Erf . cumulative CaMeL Probability ( x - mean ) ?
rank: 745
score: 99.2699203491211
patch: return $STRING$ . equals ( Erf . erf ( ( x - mean )
rank: 746
score: 99.53382110595703
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) / Erf . erf (
rank: 746
score: 99.5148592862216
patch: return 1 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) *
rank: 746
score: 99.47857375372024
patch: return 0 . 0 * 0 . 0 * Erf . erf ( ( x - mean ) /
rank: 746
score: 99.47589111328125
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( 1 . 0 / Erf . 0 + Erf . 0 +
rank: 746
score: 99.46470240542763
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / x )
rank: 746
score: 99.4442138671875
patch: return 0 . $NUMBER$ * ( 1 . 0 + erf ( ( x - mean ) )
rank: 746
score: 99.36951968544408
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 746
score: 99.29976654052734
patch: return 0 [ 0 + Erf . erf ( ( x - mean )
rank: 746
score: 99.26991900275735
patch: try { return 0 . $NUMBER$ * ( 1 . 0 + 1 . 0 )
rank: 747
score: 99.53361002604167
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) * Erf . erf ( ) ) /
rank: 747
score: 99.51478271484375
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) - mean ) /
rank: 747
score: 99.47844587053571
patch: return 0 . 0 * 1 . $NUMBER$ + Erf . erf ( ( x - mean ) /
rank: 747
score: 99.47550964355469
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . $NUMBER$ ) / $NUMBER$ . 0 ) ;
rank: 747
score: 99.46449788411458
patch: return ( Double . 0 + Erf . erf ( ( x - mean ) /
rank: 747
score: 99.44397583007813
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . 0 ) + 0 . 1 ;
rank: 747
score: 99.36928839432566
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) &&
rank: 747
score: 99.29962158203125
patch: return 0 . 0 * Erf . erf ( ( byte - mean )
rank: 747
score: 99.26963177849265
patch: else return 0 . $NUMBER$ * ( 1 . 0 + 1 . 0 ) ;
rank: 748
score: 99.53309733072916
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( 1 . 0 * mean ) /
rank: 748
score: 99.5147705078125
patch: return ( 1 . 0 + 1 . 0 + Erf . erf ( ( x - mean ) ;
rank: 748
score: 99.4782947358631
patch: return 0 . $NUMBER$ * 0 . 0 + Erf . erf ( ( x - mean ) ;
rank: 748
score: 99.46383666992188
patch: return 0 . $NUMBER$ * 0 . 0 * ( x - mean ) /
rank: 748
score: 99.44359741210937
patch: return 0 . $NUMBER$ + ( 1 . 0 + erf ( ( x - mean ) / (
rank: 748
score: 99.36883866159539
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( standard CaMeL Deviation * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) false ) ;
rank: 748
score: 99.26922607421875
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1
rank: 749
score: 99.4775146484375
patch: return 0 . $NUMBER$ * ( x - Erf . erf ( ( x - mean ) ;
rank: 749
score: 99.47462463378906
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - this . Erf . erf ( ( x - mean ) /
rank: 749
score: 99.44358520507812
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . 0 ) + 1 . $NUMBER$ ;
rank: 749
score: 99.36858635979729
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( SIZE ) ) ) ) ;
rank: 749
score: 99.29833984375
patch: return 0 . $NUMBER$ * Erf . erf ( ( start - mean )
rank: 749
score: 99.26901479867789
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( 1
rank: 750
score: 99.5312736265121
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) / 0 . 0 +
rank: 750
score: 99.47457885742188
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . get ( Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 750
score: 99.46285207648026
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / / (
rank: 750
score: 99.4432373046875
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) - (
rank: 750
score: 99.36807642227564
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( this . erf ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . $NUMBER$ ) ) ) ) ;
rank: 750
score: 99.29824829101562
patch: return 0 . min ( Erf . erf ( ( x - mean )
rank: 750
score: 99.26844889322916
patch: return ( 0 == Erf . erf ( ( x - mean )
rank: 751
score: 99.53111165364584
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0
rank: 751
score: 99.474365234375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 . 0 +
rank: 751
score: 99.45848891314338
patch: return 0 . $NUMBER$ * Erf . 0 * ( x - mean ) /
rank: 751
score: 99.44322445518092
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) && (
rank: 751
score: 99.36778220152243
patch: return 0 . $NUMBER$ * ( 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 751
score: 99.29803825827206
patch: return ( 0 . 0 + Erf . erf ( x - mean ) /
rank: 752
score: 99.5126953125
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / $NUMBER$ . $NUMBER$ ) ;
rank: 752
score: 99.45658569335937
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - ( x - mean ) /
rank: 752
score: 99.44307861328124
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) == $NUMBER$ )
rank: 752
score: 99.36698294974663
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) . 0 ) ) ) ;
rank: 752
score: 99.29778289794922
patch: return ( ( / Erf . erf ( ( x - mean ) /
rank: 752
score: 99.26811981201172
patch: return 0 . $NUMBER$ * ( 1 . get 1 x - mean ) ;
rank: 753
score: 99.53060150146484
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . get ( ( x - mean ) / $NUMBER$ . 0 ) / Erf . erf (
rank: 753
score: 99.475830078125
patch: return ( 0 . 0 + Erf . erf ( ( x - mean ) ;
rank: 753
score: 99.45607396175987
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / /
rank: 753
score: 99.44306030273438
patch: return 0 . 0 + Erf . erf ( ) . erf ( ( x - mean )
rank: 753
score: 99.36692457932692
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x + mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 753
score: 99.29764556884766
patch: return $NUMBER$ . $NUMBER$ + Erf . erf ( ( x - mean )
rank: 754
score: 99.5305884576613
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 + Erf . erf (
rank: 754
score: 99.44264526367188
patch: return 0 . 0 + ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) /
rank: 754
score: 99.36687737542229
patch: return 0 . $NUMBER$ * ( 0 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) )
rank: 754
score: 99.29762178308823
patch: return 0 . 0 * ( ( x . erf ( ( x - mean )
rank: 755
score: 99.53056640625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ / / $NUMBER$ . 0 ) /
rank: 755
score: 99.5124178799716
patch: return 1 . $NUMBER$ * Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) ;
rank: 755
score: 99.47520141601562
patch: return 0 . $NUMBER$ * ( double ) ( 1 . 0 + ( x - mean ) /
rank: 755
score: 99.47343517485119
patch: return 0 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 /
rank: 755
score: 99.442626953125
patch: return 0 . $NUMBER$ * 1 + ( Erf . erf ( ( x - mean )
rank: 755
score: 99.36662212171052
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ?
rank: 756
score: 99.5120516690341
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( byte ) mean ) /
rank: 756
score: 99.47512637867646
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ * ( x - mean ) /
rank: 756
score: 99.47342681884766
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( int ) Erf . erf ( ( int ) Erf . erf (
rank: 756
score: 99.45425235523896
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( x - mean ( (
rank: 756
score: 99.44232177734375
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( 0 . 0 ) ) ;
rank: 756
score: 99.36630088404605
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf , ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 756
score: 99.26581365411931
patch: return 0 . $NUMBER$ * ( 1 . 0 )
rank: 757
score: 99.52989095052084
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / Erf . erf ( 0 ) /
rank: 757
score: 99.4746326264881
patch: return 0 . $NUMBER$ * ( 1 . 0 + mean ( ( x - mean ) / mean (
rank: 757
score: 99.47334289550781
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) / $NUMBER$ . 0 / $NUMBER$
rank: 757
score: 99.45394736842105
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / erf (
rank: 757
score: 99.44196633731617
patch: return 0 . $NUMBER$ * ( 1 . 0 ) + 0 . $NUMBER$ * (
rank: 757
score: 99.36601819490132
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) . erf ( ) ) ;
rank: 757
score: 99.29710477941177
patch: return 0 . 0 * Erf . erf ( ( x - mean 1 .
rank: 757
score: 99.2653579711914
patch: return new Integer ( Erf . erf ( ( x - mean ) /
rank: 758
score: 99.52987178679436
patch: return 0 . $NUMBER$ * 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 758
score: 99.5117520419034
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) * 0 . 0 ) ;
rank: 758
score: 99.47311740451389
patch: return 0 . $NUMBER$ / ( Erf . erf ( ( x - mean ) /
rank: 758
score: 99.4532470703125
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) ;
rank: 758
score: 99.44184313322368
patch: return 0 . $NUMBER$ * ( 1 . 0 ) + ( 1 . 0 ) + (
rank: 758
score: 99.36578728170956
patch: return 0 . 0 * ( 1 . 0 + x - mean ) ) ;
rank: 758
score: 99.29693603515625
patch: return ( double ) ( 1 . 0 + ( x - mean ) /
rank: 758
score: 99.26520538330078
patch: return 0 . $NUMBER$ * ( 1 . 1 + x - mean ) ;
rank: 759
score: 99.52977728074596
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / $NUMBER$ . 0 ) / 0 . 0 *
rank: 759
score: 99.47346327039931
patch: return ( 0 . 0 * Erf . erf ( ( x - mean ) ;
rank: 759
score: 99.47303771972656
patch: return 0 . $NUMBER$ * ( 0 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 ) ;
rank: 759
score: 99.45243530273437
patch: try { return ( 0 . $NUMBER$ + Erf . erf ( ( x - mean ) /
rank: 759
score: 99.4417724609375
patch: return 0 . 0 * ( standard CaMeL Deviation * Math . sqrt ( Erf . erf (
rank: 759
score: 99.36572265625
patch: 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 759
score: 99.26509602864583
patch: if ( ( Erf . erf ( ( x - mean ) /
rank: 760
score: 99.52942708333333
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / Erf . erf ( ) ) /
rank: 760
score: 99.47320265997024
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( 1 . 0 + 0 . 0 ) /
rank: 760
score: 99.47303466796875
patch: return 0 . $NUMBER$ * ( float ) Erf . erf ( ( x - mean ) /
rank: 760
score: 99.45237426757812
patch: return 0 . $NUMBER$ * ( x . erf ( ( x - mean ) / erf ) /
rank: 760
score: 99.44175415039062
patch: return 0 . $NUMBER$ * ( ( 1 . 0 ) + ( 1 . 0 ) ) ;
rank: 760
score: 99.3655536358173
patch: return 0 . $NUMBER$ * ( $NUMBER$ . $NUMBER$ + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 760
score: 99.29531680836396
patch: return $STRING$ . cumulative CaMeL Probability ( x . erf ( ( x - mean )
rank: 760
score: 99.264599609375
patch: if ( Erf . erf ( ( x - mean ) / (
rank: 761
score: 99.52933625252017
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / ( 1 . 0 + Erf . erf ( ) / /
rank: 761
score: 99.4729236421131
patch: return 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / 1 . 0 /
rank: 761
score: 99.45227661132813
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 1 ) /
rank: 761
score: 99.441552734375
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / mean )
rank: 761
score: 99.36554918791118
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( standard CaMeL Deviation * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) true ) ;
rank: 761
score: 99.29523468017578
patch: return 0 . $NUMBER$ , Erf . erf ( ( x - mean )
rank: 761
score: 99.26459817325367
patch: return 0 . $NUMBER$ * ( 1 . get == ( x - mean ) /
rank: 762
score: 99.528955078125
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) / Erf . erf ( ) ) /
rank: 762
score: 99.4728771391369
patch: return ( double ) ( 1 . 0 * Erf . erf ( ( x - mean ) /
rank: 762
score: 99.45221557617188
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / $STRING$ ) /
rank: 762
score: 99.44119262695312
patch: return ( 0 . $NUMBER$ + Erf . erf ( ( x - mean ) ) ) ;
rank: 762
score: 99.36547191722973
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( . x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) .
rank: 762
score: 99.29497884114583
patch: return 0 . $NUMBER$ * Erf . erf ( ( 1 . 0
rank: 763
score: 99.47274925595238
patch: return 0 . $NUMBER$ * Erf . erf ( 0 . 0 ( ( x - mean ) /
rank: 763
score: 99.45184936523438
patch: try { return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / /
rank: 763
score: 99.44087524414063
patch: return 0 . 0 * ( Erf . erf ( ( x - mean ) / ( (
rank: 763
score: 99.36497771434294
patch: return 0 . $NUMBER$ : ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 763
score: 99.29486443014706
patch: return ( 1 . 0 + ( 1 . 0 + x - mean ) /
rank: 763
score: 99.26365751378677
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . clone ( ) /
rank: 764
score: 99.528076171875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . get ( ( x - mean ) / $NUMBER$ . 0 + Erf . erf (
rank: 764
score: 99.47211456298828
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( int ) Erf . erf ( ( x - 0 . 0 ) /
rank: 764
score: 99.44051513671874
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . 0 ) + 0 . $NUMBER$ ;
rank: 764
score: 99.36495724239865
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( x ) ) ) ) ;
rank: 764
score: 99.29440487132354
patch: return 0 . $NUMBER$ * ( ( 1 . 0 + Erf . erf (
rank: 764
score: 99.26308306525735
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 == Math . sqrt (
rank: 765
score: 99.52745400705645
patch: return 0 . $NUMBER$ . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / Erf . erf ( ) /
rank: 765
score: 99.47236713610198
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( $STRING$ ) /
rank: 765
score: 99.47129821777344
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( 1 . 0 + Erf . erf ( ( x - mean ) ) /
rank: 765
score: 99.45167236328125
patch: return 0 . $NUMBER$ * ( ( x - mean ) / / ( x - mean ) /
rank: 765
score: 99.44028049045139
patch: return 0 . $NUMBER$ * ( 1 . 0 ) / ( 0 . 0 ) ;
rank: 765
score: 99.36483187288852
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) -
rank: 765
score: 99.29431915283203
patch: return null . $NUMBER$ * Erf . erf ( ( x - mean )
rank: 765
score: 99.2629753561581
patch: return 0 . max ( Erf . erf ( ( x - mean ) /
rank: 766
score: 99.52720986643145
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / 0 . 0 /
rank: 766
score: 99.50836181640625
patch: return ( 1 . 0 + Erf . erf . erf ( ( x - mean ) /
rank: 766
score: 99.47198195684524
patch: return 0 . 0 * 0 . $NUMBER$ * Erf . erf ( ( x - mean ) ;
rank: 766
score: 99.4710464477539
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( 1 . 0 + Erf . 0 /
rank: 766
score: 99.45119757401316
patch: return 0 . $NUMBER$ * ( ( x - mean ) / / 1 . 0 ) /
rank: 766
score: 99.36475269214527
patch: return cumulative CaMeL Probability ( 1 . 0 + Erf . erf ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; ;
rank: 766
score: 99.29411315917969
patch: return 0 . $NUMBER$ * ( Double . erf ( ( x - mean )
rank: 767
score: 99.52717836441532
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / 0 . 0 +
rank: 767
score: 99.50834575452302
patch: try { return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) ;
rank: 767
score: 99.47194952713816
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( true ) /
rank: 767
score: 99.47077941894531
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( 1 . 0 / Erf . 0 /
rank: 767
score: 99.45111083984375
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / erf
rank: 767
score: 99.44012129934211
patch: return ( 1 . 0 + Erf . erf ( ( x - mean ) + (
rank: 767
score: 99.36471396998355
patch: return 0 . $NUMBER$ * ( 1 . < Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 767
score: 99.2938232421875
patch: return 0 . $NUMBER$ * ( Integer . erf ( ( x - mean )
rank: 768
score: 99.52709197998047
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) / 0 . 0 ) /
rank: 768
score: 99.50796363467262
patch: return ( 1 . 0 + Erf . erf ( ( x - mean ) << 0 ) /
rank: 768
score: 99.47183048023896
patch: return 0 . $NUMBER$ * 1 . $NUMBER$ * ( ( x - mean ) /
rank: 768
score: 99.47073364257812
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( int ) Erf . erf ( ( x - 1 . 0 ) /
rank: 768
score: 99.45098266601562
patch: return 0 . $NUMBER$ * Erf ( ( x - mean ) / 0 . $NUMBER$ ) /
rank: 768
score: 99.43976440429688
patch: return 0 . 0 + 0 . $NUMBER$ + Erf . erf ( ( x - mean )
rank: 768
score: 99.36450821314102
patch: return Integer . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 768
score: 99.29318237304688
patch: return 0 . 0 * ( ( x - mean )
rank: 768
score: 99.26186697823661
patch: return 0 . $NUMBER$ * ( 1 . max + mean ) ;
rank: 769
score: 99.52670583417338
patch: return 0 . $NUMBER$ * 1 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 769
score: 99.50628662109375
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / erf ) ;
rank: 769
score: 99.47137741815476
patch: return 0 . $NUMBER$ * Erf . erf ( 1 . 0 ( ( x - mean ) /
rank: 769
score: 99.47056361607143
patch: return ( int ) ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 769
score: 99.43917846679688
patch: return 0 . $NUMBER$ + Erf . erf ( ) . erf ( ( x - mean )
rank: 769
score: 99.36433039484797
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) /
rank: 769
score: 99.29302215576172
patch: return 0 . 0 * Erf . erf ( ( x < mean )
rank: 769
score: 99.26179773667279
patch: return 0 . ( Erf . erf ( ( x - mean ) / (
rank: 770
score: 99.5266342163086
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ) / 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ) /
rank: 770
score: 99.47120303199405
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . $NUMBER$ ( ( x - mean ) /
rank: 770
score: 99.47055053710938
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) / 0 . 0 ) ;
rank: 770
score: 99.4504638671875
patch: return 0 . $NUMBER$ * Erf . erf ( ( x < mean ) + mean ) /
rank: 770
score: 99.4390869140625
patch: return 0 . $NUMBER$ + Erf . erf ( ( x - mean ) ==
rank: 770
score: 99.36411264780405
patch: return 0 . $NUMBER$ * ( 1 . max . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; }
rank: 770
score: 99.29298311121323
patch: double ( $NUMBER$ . 0 + Erf . erf ( ( x - mean )
rank: 770
score: 99.26142229352679
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf /
rank: 771
score: 99.52658913352273
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / / / / /
rank: 771
score: 99.47076416015625
patch: return 0 . $NUMBER$ * ( 1 . 0 + double ) ( ( x - mean ) /
rank: 771
score: 99.47042846679688
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 / $NUMBER$
rank: 771
score: 99.45006606158088
patch: return Double . 0 * Erf . erf ( ( x - mean ) /
rank: 771
score: 99.36397408150337
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( ) ) ) ) ; }
rank: 771
score: 99.2928237915039
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - x )
rank: 771
score: 99.26115417480469
patch: if ( x == Erf . erf ( ( x - mean ) /
rank: 772
score: 99.52622292258523
patch: double 0 = ( 1 . 0 + Erf . erf ( ( x - mean ) / mean )
rank: 772
score: 99.50445197610294
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) %
rank: 772
score: 99.47015380859375
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 1 . 0
rank: 772
score: 99.46851870888158
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( false ) /
rank: 772
score: 99.44963921440973
patch: if ( 0 . 0 - Erf . erf ( ( x - mean ) /
rank: 772
score: 99.43880886501736
patch: return 0 . $NUMBER$ * 1 + ( 1 . 0 + Erf . erf (
rank: 772
score: 99.36378238075658
patch: return 0 . $NUMBER$ * ( 1 . 0 + standard CaMeL Deviation * Math . sqrt ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) . cumulative CaMeL Probability ;
rank: 772
score: 99.29278971354167
patch: return ( 0 + Erf . erf ( ( x - mean )
rank: 772
score: 99.26092529296875
patch: return ( ( Erf . erf ( ( x - mean ) / (
rank: 773
score: 99.52620967741936
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 + Erf . erf (
rank: 773
score: 99.36361776815879
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 773
score: 99.2923224954044
patch: return cumulative CaMeL Probability ( ( Erf . erf ( ( x - mean )
rank: 773
score: 99.26070404052734
patch: return 0 . $NUMBER$ * ( 1 . max ( x - mean ) /
rank: 774
score: 99.52606756036931
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / erf ( double ) /
rank: 774
score: 99.4693832397461
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 ) ;
rank: 774
score: 99.44913940429687
patch: return 0 . $NUMBER$ * Erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 774
score: 99.43856650904605
patch: return 0 . $NUMBER$ * ( x - Erf . erf ( ( x - mean )
rank: 774
score: 99.36333907277961
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( . x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ?
rank: 774
score: 99.2920150756836
patch: return ( ( Long ) Erf . erf ( ( x - mean )
rank: 774
score: 99.25924682617188
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 == Erf )
rank: 775
score: 99.52606756036931
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( x ) / mean ) /
rank: 775
score: 99.50398763020833
patch: return ( 0 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ ) /
rank: 775
score: 99.46915690104167
patch: return 0 . $NUMBER$ + ( double ) ( Erf . erf ( ( x - mean ) /
rank: 775
score: 99.44847276475694
patch: return 0 . $NUMBER$ * Erf ( ( x - mean ) / erf ) /
rank: 775
score: 99.438427734375
patch: return 0 . $NUMBER$ * ( 0 . 0 + erf ( ( x - mean ) / (
rank: 775
score: 99.36325485641892
patch: return 0 . $NUMBER$ * ( 1 < Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 775
score: 99.2915900735294
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - $NUMBER$ )
rank: 775
score: 99.25906192555146
patch: return ( 0 . 0 + ( 1 . 0 + 1 . 0 ) )
rank: 776
score: 99.52586364746094
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / double . 0 ) / Erf . erf (
rank: 776
score: 99.4676154641544
patch: return 0 . $NUMBER$ * ( 1 . mean ( ( x - mean ) ;
rank: 776
score: 99.44834391276042
patch: return 0 . 0 + Erf . erf ( ( x - mean ) / /
rank: 776
score: 99.43837890625
patch: return 0 . $NUMBER$ * 1 + ( Erf . erf ( ( x - mean ) /
rank: 776
score: 99.36322186444256
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * standard CaMeL Deviation . 0 ) ) ) ; ;
rank: 776
score: 99.29143524169922
patch: return 0 . $NUMBER$ / Erf . erf ( ( x - mean )
rank: 777
score: 99.52565403988487
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf ) / 0 . $NUMBER$ ;
rank: 777
score: 99.5038829985119
patch: return ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) << 0 ) /
rank: 777
score: 99.46894763764881
patch: return 0 . $NUMBER$ / ( double ) ( Erf . erf ( ( x - mean ) /
rank: 777
score: 99.44827609592014
patch: return 0 . $NUMBER$ * Erf ( ( x - mean ) / mean ) /
rank: 777
score: 99.43830023871527
patch: return 0 . $NUMBER$ * 1 * ( 1 . 0 + 1 . 0 ) ;
rank: 777
score: 99.36320206925676
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( $NUMBER$ . 0 + Erf . erf ( ) ) ) ) ;
rank: 777
score: 99.29137420654297
patch: return 0 . 0 * ( ( 1 . 0 + x - mean )
rank: 777
score: 99.25845336914062
patch: return ( cumulative CaMeL Probability . erf ( ( x - mean ) / (
rank: 778
score: 99.52553238407258
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( 1 . 0 + mean ) ) /
rank: 778
score: 99.44808959960938
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / } ) /
rank: 778
score: 99.43800184461806
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) - (
rank: 778
score: 99.3631591796875
patch: return 0 . $NUMBER$ * ( 0 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 778
score: 99.29115397135416
patch: return new 0 ( Erf . erf ( ( x - mean )
rank: 778
score: 99.25826009114583
patch: if ( 0 + Erf . erf ( ( x - mean )
rank: 779
score: 99.46820831298828
patch: return 0 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 ) ;
rank: 779
score: 99.4652099609375
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ( ) ) /
rank: 779
score: 99.4479621438419
patch: return 0 . 0 * ( x . erf ( ( x - mean ) /
rank: 779
score: 99.36313990542763
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( int ) mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 779
score: 99.29113006591797
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean :
rank: 779
score: 99.25821940104167
patch: if ( 0 <= Erf . erf ( ( x - mean )
rank: 780
score: 99.50275336371527
patch: return ( 1 . $NUMBER$ * Erf . erf ( ( x - mean ) *
rank: 780
score: 99.46813354492187
patch: return 0 . $NUMBER$ + ( double ) Erf . erf ( ( x - mean ) /
rank: 780
score: 99.4645931846217
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( $STRING$ ) .
rank: 780
score: 99.44790167557566
patch: try { return 0 . $NUMBER$ * ( 1 . 0 + ( x - mean ) /
rank: 780
score: 99.43734402126736
patch: return 0 . 0 + Erf . erf ( ( x - mean ) * (
rank: 780
score: 99.36282596072635
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $STRING$ ) ) ) ) ;
rank: 780
score: 99.291015625
patch: return ( 1 . 0 + Erf . erf ( ( x - mean ,
rank: 780
score: 99.258203125
patch: return 0 . $NUMBER$ * ( 1 . == ( x - mean )
rank: 781
score: 99.5253018465909
patch: return 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean (
rank: 781
score: 99.50165085565476
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) << 0 . 0 )
rank: 781
score: 99.46797107514881
patch: return ( 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / $NUMBER$ . 0
rank: 781
score: 99.46403952205883
patch: return 0 . $NUMBER$ * 0 . $NUMBER$ * ( ( x - mean ) /
rank: 781
score: 99.44755723741319
patch: return 0 . $NUMBER$ * ( ( x - mean ) / 0 . $NUMBER$ ) /
rank: 781
score: 99.43716591282895
patch: return ( 0 . 1 + Erf . erf ( ( x - mean ) / (
rank: 781
score: 99.36266150841347
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . length ) ) ) ) ;
rank: 781
score: 99.25818684895833
patch: return 0 . 0 * ( 1 . 0 + 1 . 0 )
rank: 782
score: 99.52524886592742
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ) / ( 1 . 0 + Erf . erf ( ) / / /
rank: 782
score: 99.4679019325658
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( double ) /
rank: 782
score: 99.46380936472039
patch: return 0 . $NUMBER$ * ( 1 . 0 ) * ( ( x - mean ) /
rank: 782
score: 99.44732987253289
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / erf *
rank: 782
score: 99.43702528211806
patch: return 0 . $NUMBER$ * 1 + ( 1 . 0 + 1 . 0 ) ;
rank: 782
score: 99.36182892628206
patch: return 1 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 782
score: 99.25768280029297
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 / Erf /
rank: 783
score: 99.52523803710938
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( x - mean ) / erf ) ;
rank: 783
score: 99.46785278320313
patch: return ( double ) 0 . $NUMBER$ + Erf . erf ( ( x - mean ) /
rank: 783
score: 99.46360377261513
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( $NUMBER$ ) /
rank: 783
score: 99.43676039751838
patch: return erf . erf ( Erf . erf ( ( x - mean ) /
rank: 783
score: 99.36147210536859
patch: return cumulative CaMeL Probability ( 0 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; }
rank: 783
score: 99.2905632467831
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean [
rank: 783
score: 99.257568359375
patch: return 0 . 0 * ( 1 . 0 + 1 . 0 ) ) ;
rank: 784
score: 99.52494172127017
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 ;
rank: 784
score: 99.500732421875
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) << 0 ) ;
rank: 784
score: 99.46783156622024
patch: return 0 . $NUMBER$ * ( 1 . 0 + double ) erf ( ( x - mean ) /
rank: 784
score: 99.462890625
patch: x = 0 . $NUMBER$ * Erf . erf ( ( x - mean ) /
rank: 784
score: 99.44644504123264
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / *
rank: 784
score: 99.3614566200658
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( this . erf ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) -
rank: 784
score: 99.29037655101104
patch: return ( 1 . 0 + Erf . erf ( ( x - mean +
rank: 784
score: 99.25749655330883
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 * ( 1 . 0
rank: 785
score: 99.52493286132812
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / Erf . erf ( ( x - mean ) / mean ) /
rank: 785
score: 99.4677978515625
patch: return 0 . $NUMBER$ * ( double / Erf . erf ( ( x - mean ) /
rank: 785
score: 99.46226591222427
patch: return 0 . $NUMBER$ * ( 1 . 0 ( ( x - mean ) /
rank: 785
score: 99.44595497532895
patch: return 0 . $NUMBER$ * ( x - 0 . mean ( ( x - mean ) /
rank: 785
score: 99.43563039679276
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( * Erf . erf ( (
rank: 785
score: 99.36119040464743
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( this . erf ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ?
rank: 785
score: 99.2903301532452
patch: return 0 . 0 + ( ( x - mean ) /
rank: 786
score: 99.52426442792338
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) / Erf . erf ( )
rank: 786
score: 99.49953002929688
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) << 1 ) ;
rank: 786
score: 99.46750710227273
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 + Erf . 0 . 0 /
rank: 786
score: 99.46180635340073
patch: return 0 . $NUMBER$ * Erf . erf ( ( x + mean ) ;
rank: 786
score: 99.43549940321181
patch: return 0 . 0 + Erf . erf ( ( x + mean ) / (
rank: 786
score: 99.36114032451923
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( 0 - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 786
score: 99.2900619506836
patch: return 0 . $NUMBER$ * ( Long . erf ( ( x - mean )
rank: 786
score: 99.25738884420956
patch: return 0 . 0 + Erf . erf ( ( x - mean ) ==
rank: 787
score: 99.52407541582662
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) / $NUMBER$ . 0 + Erf . erf (
rank: 787
score: 99.49936058407738
patch: return 1 . $NUMBER$ * 1 . $NUMBER$ * Erf . erf ( ( x - mean ) /
rank: 787
score: 99.46066123560855
patch: return 0 . $NUMBER$ * ( double ) 1 . $NUMBER$ * ( x - mean ) /
rank: 787
score: 99.4446662454044
patch: return 0 . $NUMBER$ , Erf . erf ( ( x - mean ) /
rank: 787
score: 99.43500719572368
patch: return 0 . $NUMBER$ * 1 * ( Erf . erf ( ( x - mean )
rank: 787
score: 99.36087114383012
patch: return 0 . 0 * ( 1 . 1 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 787
score: 99.28995513916016
patch: return 0 . $NUMBER$ * Erf . erf ( ( x << mean )
rank: 787
score: 99.257373046875
patch: try { return 0 . $NUMBER$ * ( 1 . 0 ) ; }
rank: 788
score: 99.52352744654605
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf ) / 0 . 0 ;
rank: 788
score: 99.46671295166016
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 / Erf . 0 ) /
rank: 788
score: 99.45997378700658
patch: return 0 . $NUMBER$ * ( double ) 1 . 0 * ( x - mean ) /
rank: 788
score: 99.44446478949652
patch: final return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) /
rank: 788
score: 99.43498792146382
patch: return ( 1 . 0 + Erf . erf ( ( x + mean ) / (
rank: 788
score: 99.3607113486842
patch: return 0 . ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; ;
rank: 788
score: 99.28990263097427
patch: return 0 . 0 * Erf . erf [ ( x - mean ) /
rank: 789
score: 99.5234138734879
patch: return 0 . $NUMBER$ . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ / $NUMBER$ . 0 ) /
rank: 789
score: 99.49856387867646
patch: return 1 . $NUMBER$ + Erf . erf ( ( x - mean ) /
rank: 789
score: 99.46669330018939
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / $NUMBER$ . 0 + Erf . erf ( ) / $NUMBER$ . 0 (
rank: 789
score: 99.45937875600961
patch: return ( 1 . $NUMBER$ * ( x - mean ) /
rank: 789
score: 99.4443000344669
patch: return 0 . 0 * Erf . erf * ( x - mean ) /
rank: 789
score: 99.43471808182566
patch: return 0 . $NUMBER$ * ( 0 . 0 + erf ( ( x - mean ) /
rank: 789
score: 99.36043920272436
patch: return 0 . $NUMBER$ * ( 1 . 0 , Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 789
score: 99.28962707519531
patch: return 0 . 0 * ( Math . erf ( ( x - mean )
rank: 789
score: 99.25708770751953
patch: return ( ( ( Erf . erf ( ( x - mean ) /
rank: 790
score: 99.52339172363281
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( 1 . 0 + Erf . erf (
rank: 790
score: 99.49835205078125
patch: return ( x - 0 . 0 + Erf . erf ( ( x - mean ) /
rank: 790
score: 99.43466622488839
patch: return Erf . erf ( ( x - mean ) ) ;
rank: 790
score: 99.36040182674633
patch: return cumulative CaMeL Probability ( ( x - mean ) / ( standard CaMeL Deviation *
rank: 790
score: 99.28941345214844
patch: return cumulative CaMeL Probability ( 0 . 0 + ( x - mean ) /
rank: 790
score: 99.25701497395833
patch: if ( $NUMBER$ == Erf . erf ( ( x - mean )
rank: 791
score: 99.52260269657258
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / Erf . erf ( ( x - mean ) / mean (
rank: 791
score: 99.49720982142857
patch: return 0 . $NUMBER$ * Erf . erf ( erf . erf ( ( x - mean ) /
rank: 791
score: 99.46647875236742
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - 0 . 0 ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 +
rank: 791
score: 99.44384765625
patch: return 0 = 0 . $NUMBER$ * Erf . erf ( ( x - mean ) /
rank: 791
score: 99.43442896792763
patch: return 0 . 0 * 1 + Erf . erf ( ( x - mean ) /
rank: 791
score: 99.36026161595395
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ ) ) ) ) ; }
rank: 791
score: 99.2894058227539
patch: return 0 . 0 * Erf . erf ( ( x - mean ,
rank: 791
score: 99.25691223144531
patch: if ( 0 >= Erf . erf ( ( x - mean ) /
rank: 792
score: 99.52230980282738
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean )
rank: 792
score: 99.45725708007812
patch: return 0 . $NUMBER$ * ( ( double ) 1 . 0 + ( x - mean ) /
rank: 792
score: 99.44331868489583
patch: return 0 . $NUMBER$ * ( ( x - mean ) / Erf . erf (
rank: 792
score: 99.43439398871527
patch: return 0 . $NUMBER$ + Erf . erf ( ( x - mean ) * (
rank: 792
score: 99.36012027138158
patch: return 0 . $NUMBER$ / ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 792
score: 99.28899787454044
patch: return ( ( x . cumulative CaMeL Probability ( ( x - mean ) / (
rank: 792
score: 99.25658365885417
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 <= ( 1
rank: 793
score: 99.5217041015625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean
rank: 793
score: 99.464599609375
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 1 . 0 / Erf . 0 + Erf . 0 + Erf . 0 /
rank: 793
score: 99.45638020833333
patch: return 0 . 0 * ( ( x - mean ) / 0 . 0 ) /
rank: 793
score: 99.44275580512152
patch: double ( 0 . $NUMBER$ * Erf . erf ( ( x - mean ) /
rank: 793
score: 99.43402420847039
patch: return 0 . 0 + ( Erf . erf ( ( x - mean ) ) /
rank: 793
score: 99.35992024739583
patch: return ( double ) 0 . $NUMBER$ * ( x - mean ) ;
rank: 793
score: 99.28890991210938
patch: return ( 0 + Erf . erf ( ( x - mean ) /
rank: 793
score: 99.25653483072917
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 / ( 1
rank: 794
score: 99.52147649949596
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / 1 . 0 ) / 0 . 0 ;
rank: 794
score: 99.46425170898438
patch: double Erf = 0 . 0 + Erf . erf ( ( x - mean ) /
rank: 794
score: 99.45530299136513
patch: return 0 . $NUMBER$ * Erf . erf ( mean ( ( x - mean ) /
rank: 794
score: 99.44272974917763
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( x - mean ) / erf )
rank: 794
score: 99.35983028927365
patch: return 0 . $NUMBER$ / ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) )
rank: 794
score: 99.28872501148896
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean 1
rank: 794
score: 99.25635528564453
patch: return 1 . $NUMBER$ * ( 1 . 0 + x - mean ) ;
rank: 795
score: 99.52122860863095
patch: return 0 . $NUMBER$ * ( 1 . 0 + x - mean ) / ( 1 . 0 +
rank: 795
score: 99.49675641741071
patch: return ( 1 . $NUMBER$ * Erf . erf ( ( x - mean ) / $NUMBER$ ) /
rank: 795
score: 99.46409696691177
patch: return 0 . 0 * Erf . erf ( ( x - mean ) +
rank: 795
score: 99.4552001953125
patch: return 0 . $NUMBER$ * ( 1 . 0 ) / ( ( x - mean ) /
rank: 795
score: 99.44222683376736
patch: int ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 795
score: 99.43391498766448
patch: return 0 . $NUMBER$ + ( Erf . erf ( ( x - mean ) ) /
rank: 795
score: 99.3597347861842
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 795
score: 99.28726959228516
patch: return 0 . $NUMBER$ * Erf . erf ( ( x == 0 +
rank: 795
score: 99.25619942801339
patch: return ( 1 . 0 + ( x - mean ) / (
rank: 796
score: 99.52098821824596
patch: return 0 . $NUMBER$ . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / Erf . erf ( ) )
rank: 796
score: 99.46368223248106
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 . 0 ) / $NUMBER$ . 0 +
rank: 796
score: 99.4547119140625
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / null ) /
rank: 796
score: 99.44208441840277
patch: return 0 . $NUMBER$ * ( ( x - mean ) / 0 . mean ) /
rank: 796
score: 99.4327392578125
patch: return 0 . 0 * 0 + Erf . erf ( ( x - mean ) /
rank: 796
score: 99.35936840160473
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( . x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 796
score: 99.25579071044922
patch: return 0 . $NUMBER$ * ( 1 . equals ( ( x - mean )
rank: 797
score: 99.52068328857422
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . get ( ( x - mean ) / $NUMBER$ . 0 ) / Erf . erf )
rank: 797
score: 99.49595424107143
patch: return ( 1 . $NUMBER$ * Erf . erf ( ( x - mean ) - mean ) /
rank: 797
score: 99.46334191524622
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 / Erf . 0 / . 0
rank: 797
score: 99.45470581054687
patch: return ( 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) ) /
rank: 797
score: 99.44157579210069
patch: if ( 1 . 0 - Erf . erf ( ( x - mean ) /
rank: 797
score: 99.43235868566177
patch: return 0 . $NUMBER$ * ( 1 . 0 ) + 1 . $NUMBER$ * (
rank: 797
score: 99.35920153166118
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( x x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 797
score: 99.2867072610294
patch: return ( cumulative CaMeL Probability * Erf . erf ( ( x - mean )
rank: 797
score: 99.25574493408203
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + ( x - mean )
rank: 798
score: 99.46200900607639
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / $NUMBER$
rank: 798
score: 99.45459594726563
patch: return 0 * ( 1 . $NUMBER$ * Erf . erf ( ( x - mean ) /
rank: 798
score: 99.44153550091912
patch: return 0 . $NUMBER$ * ( ( x - mean ) / / mean ) /
rank: 798
score: 99.43220600328948
patch: return $NUMBER$ . $NUMBER$ * ( Erf . erf ( ( x - mean ) / (
rank: 798
score: 99.35909873560855
patch: return 0 . max ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 798
score: 99.28585052490234
patch: return ( ( + Erf . erf ( ( x - mean ) /
rank: 798
score: 99.2550760904948
patch: return 0 . 0 * ( 1 . 0 ) ;
rank: 799
score: 99.52032470703125
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ) / 0 . 0 * ( 1 . 0 + Erf . erf ) /
rank: 799
score: 99.46153349034927
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 / Erf . 0 / . 0 /
rank: 799
score: 99.44142779181985
patch: return 0 . 0 / Erf . erf ( ( x - mean ) /
rank: 799
score: 99.43202039930556
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( 1 . $NUMBER$ ) / (
rank: 799
score: 99.35891971072635
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf / ( standard CaMeL Deviation * Math . sqrt ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ ) ) ) ) ;
rank: 799
score: 99.28498840332031
patch: return 0 . 0 + Erf . erf ( ( x - mean ,
rank: 799
score: 99.25485409007354
patch: if ( 0 , Erf . erf ( ( x - mean ) / (
rank: 800
score: 99.52017974853516
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 + Erf . erf ( (
rank: 800
score: 99.49468315972223
patch: return ( 1 . $NUMBER$ + Erf . erf ( ( double - mean ) /
rank: 800
score: 99.4612334280303
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 . 0 /
rank: 800
score: 99.44048751027961
patch: return 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / erf )
rank: 800
score: 99.43126005284927
patch: return 0 . $NUMBER$ * ( 1 . 0 ) / ( standard CaMeL Deviation *
rank: 800
score: 99.35888671875
patch: return x . equals ( 0 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 800
score: 99.25460815429688
patch: return 0 . $NUMBER$ * ( 1 . get 1 ( x - mean )
rank: 801
score: 99.51994077620968
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . $NUMBER$ /
rank: 801
score: 99.49465603298611
patch: } return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) /
rank: 801
score: 99.46002371651785
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / double . MIN _ VALUE ) / double . MAX _ VALUE )
rank: 801
score: 99.4393246299342
patch: return 0 . $NUMBER$ + ( x - 0 . 0 + ( x - mean ) /
rank: 801
score: 99.43067762586806
patch: return 0 . $NUMBER$ * ( x - mean ) / ( $NUMBER$ . 0 ) ;
rank: 801
score: 99.35865542763158
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) /
rank: 801
score: 99.2842788696289
patch: return 0 . $NUMBER$ * 1 . 0 + ( x - mean ) ;
rank: 801
score: 99.25434112548828
patch: return ( 0 == Erf . erf ( ( x - mean ) /
rank: 802
score: 99.51970672607422
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / Erf . double CaMeL Value ( ) ) /
rank: 802
score: 99.45996811810662
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / double . MIN _ VALUE ) / double . MIN _ VALUE
rank: 802
score: 99.43864610460069
patch: if ( 0 . $NUMBER$ - Erf . erf ( ( x - mean ) /
rank: 802
score: 99.43047774465461
patch: return Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * (
rank: 802
score: 99.35846729767628
patch: return 0 . $NUMBER$ + ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 802
score: 99.25310872395833
patch: return cumulative CaMeL Probability ( 1 . 0 + x - mean ) ;
rank: 803
score: 99.49423363095238
patch: return ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / true ) /
rank: 803
score: 99.45210535386029
patch: return 1 . $NUMBER$ * ( 1 . 0 + ( x - mean ) /
rank: 803
score: 99.43857828776042
patch: int ( 0 . 0 + Erf . erf ( ( x - mean ) /
rank: 803
score: 99.42987060546875
patch: return 0 . $NUMBER$ * ( ( 1 . 0 ) + ( 1 . 0 )
rank: 803
score: 99.35840657552083
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf ) ;
rank: 803
score: 99.28368377685547
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x == 0
rank: 803
score: 99.2528937844669
patch: return ( 0 . $NUMBER$ + ( 1 . 0 + x - mean ) /
rank: 804
score: 99.49376723345588
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) {
rank: 804
score: 99.45197610294117
patch: return 0 . $NUMBER$ ? Erf . erf ( ( x - mean ) ;
rank: 804
score: 99.43803325452302
patch: if ( ( 1 . $NUMBER$ * Erf . erf ( ( x - mean ) /
rank: 804
score: 99.42981635199652
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ ) + ( 1 . $NUMBER$ ) ;
rank: 804
score: 99.35823139391448
patch: return 0 . ( 0 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; ;
rank: 804
score: 99.25243326822917
patch: if ( 1 == Erf . erf ( ( x - mean )
rank: 805
score: 99.51859907670455
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . get ( x ) / mean ) /
rank: 805
score: 99.49372209821429
patch: return ( 1 . 0 + Erf . erf ( ( x - mean ) / true ) /
rank: 805
score: 99.45732678865132
patch: return ( 0 . $NUMBER$ + Erf . erf ( ( x - mean ) ) /
rank: 805
score: 99.43764134457237
patch: if ( ( 1 . 0 * Erf . erf ( ( x - mean ) /
rank: 805
score: 99.4298095703125
patch: return ( 1 . 0 + Erf . erf ( ( x - mean ) +
rank: 805
score: 99.35784755608974
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( int - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 805
score: 99.2828857421875
patch: double x = Erf . erf ( ( x - mean ) /
rank: 805
score: 99.25239832261029
patch: return 0 . $NUMBER$ * ( 1 . equals ( x - mean ) / (
rank: 806
score: 99.51854705810547
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) / Erf . erf ( ) )
rank: 806
score: 99.45139674136513
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . get ( 0 ) /
rank: 806
score: 99.43521278782895
patch: return 0 . $NUMBER$ * Erf ( erf . erf ( ( x - mean ) /
rank: 806
score: 99.42923312717014
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) ==
rank: 806
score: 99.35750539679276
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( ) . 0 ) ) ) ;
rank: 806
score: 99.28274356617646
patch: return 0 . 0 + ( Erf . erf ( ( x - 1 )
rank: 806
score: 99.25229779411765
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . $NUMBER$ ) / (
rank: 807
score: 99.51849365234375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ) / 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( )
rank: 807
score: 99.49350120907738
patch: return 1 . $NUMBER$ * 1 . 0 * Erf . erf ( ( x - mean ) /
rank: 807
score: 99.45623168945312
patch: return 0 . 0 * Erf . erf ( ( x - mean ) / $NUMBER$ . 0
rank: 807
score: 99.451318359375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( - mean ) /
rank: 807
score: 99.43434771369485
patch: return 0 . $NUMBER$ * ( ( x - mean ) / 1 . 0 +
rank: 807
score: 99.35746684827302
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; ;
rank: 807
score: 99.28219604492188
patch: return ( 0 . 0 + ( x - Erf . erf ( (
rank: 807
score: 99.25225471047794
patch: return 0 . 0 + ( 1 . 0 + ( 1 . 0 ) /
rank: 808
score: 99.49285016741071
patch: return 0 . 0 * Erf . erf ( ( x - mean ) / $NUMBER$ . 0 )
rank: 808
score: 99.45599724264706
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 / $NUMBER$ . 0
rank: 808
score: 99.4343032836914
patch: return 0 . $NUMBER$ * ( x - mean ) / 0 . 0 *
rank: 808
score: 99.42891652960526
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) ] ) ;
rank: 808
score: 99.35730293469551
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 1 ) ) ) ) ;
rank: 808
score: 99.28211167279412
patch: return ( ( int ) Erf . erf ( ( x - mean ) *
rank: 808
score: 99.25201009114583
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 * ( 1
rank: 809
score: 99.51812189275569
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / $NUMBER$ / $NUMBER$ /
rank: 809
score: 99.49129231770833
patch: return 0 . $NUMBER$ * Erf . erf ( 1 . 0 + ( x - mean ) /
rank: 809
score: 99.45047800164474
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( null ) .
rank: 809
score: 99.43304122121711
patch: return ( 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) /
rank: 809
score: 99.42884018841912
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( 1 . $NUMBER$ ) /
rank: 809
score: 99.35719058388158
patch: return 0 . min ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 809
score: 99.28198960248162
patch: return ( 0 . 0 + Erf . erf ( ( int - mean )
rank: 809
score: 99.25196748621323
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . contains ( x )
rank: 810
score: 99.49007839626736
patch: return ( 1 . 0 + Erf . erf ( ( double - mean ) /
rank: 810
score: 99.45504113399622
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 . 0 ) / $NUMBER$ . 0 /
rank: 810
score: 99.44979697779605
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( x - mean ( ) ) /
rank: 810
score: 99.42848607113487
patch: return 0 . $NUMBER$ double ( Erf . erf ( ( x - mean ) / (
rank: 810
score: 99.35714643429488
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation <= Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 810
score: 99.28188907398896
patch: return 0 . 0 * Erf . erf ( ( int - mean ) /
rank: 810
score: 99.25145766314338
patch: return return 0 . $NUMBER$ * ( 1 . 0 + 1 . 0 ) ;
rank: 811
score: 99.51789202008929
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ) / 0 . 0 ;
rank: 811
score: 99.49002511160714
patch: return ( 0 . $NUMBER$ + Erf . erf ( ( x - mean ) - mean ) /
rank: 811
score: 99.453515625
patch: return ( double ) 0 . 0 * Erf . erf ( ( x - mean ) /
rank: 811
score: 99.44971313476563
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 0 . 0
rank: 811
score: 99.43167274876645
patch: return 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / mean )
rank: 811
score: 99.42782432154605
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / -
rank: 811
score: 99.35711991159539
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 811
score: 99.28187561035156
patch: return 0 . 0 + Erf . erf [ ( x - mean )
rank: 811
score: 99.2513068704044
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) <<
rank: 812
score: 99.51771988407258
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 + 1 . 0 ) /
rank: 812
score: 99.45350952148438
patch: double Erf = 0 . 0 * Erf . erf ( ( x - mean ) /
rank: 812
score: 99.449658203125
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . 0 ) / 0 . 0 *
rank: 812
score: 99.43098718979779
patch: return 0 . $NUMBER$ * Erf . erf + ( x - mean ) /
rank: 812
score: 99.35711513421474
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( this - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 812
score: 99.28173065185547
patch: return 0 . 0 * Erf . erf ( ( x - mean +
rank: 812
score: 99.2510986328125
patch: return new 0 . $NUMBER$ * ( 1 . 0 + 1 . 0 ) ;
rank: 813
score: 99.51768493652344
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 + Erf . 0 ) /
rank: 813
score: 99.4534209280303
patch: return 0 . $NUMBER$ . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 /
rank: 813
score: 99.42711046006944
patch: return 0 . 1 * Erf . erf ( ( x - mean ) ) ;
rank: 813
score: 99.35710887419872
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf / ( standard CaMeL Deviation * Math . sqrt ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ?
rank: 813
score: 99.28162384033203
patch: return 0 . $NUMBER$ * ( 1 . - ( x - mean ) /
rank: 813
score: 99.25083821614584
patch: return 0 . 0 * ( 1 . get ( x - mean )
rank: 814
score: 99.51724243164062
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / Erf . erf (
rank: 814
score: 99.48811848958333
patch: return 1 . $NUMBER$ * Erf . erf ( ( x - mean ) / 0 . 0 )
rank: 814
score: 99.45315890842014
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 1 . 0 / Erf . 0 + Erf . 0 + Erf . 0 +
rank: 814
score: 99.44944852941177
patch: return 0 . $NUMBER$ * Erf . erf ( ( double - mean ) ;
rank: 814
score: 99.42937268708882
patch: return 0 . 0 * ( ( x - mean ) / ( x - mean ) /
rank: 814
score: 99.42652723524306
patch: return 0 . $NUMBER$ * ( 1 . 0 ) / ( $NUMBER$ . $NUMBER$ ) ;
rank: 814
score: 99.35685221354167
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( 0 . 0 ) ) ) ) ;
rank: 814
score: 99.28160184972427
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( if - mean )
rank: 814
score: 99.25062561035156
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 / Erf )
rank: 815
score: 99.51720610119048
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / erf ( ) /
rank: 815
score: 99.48787434895833
patch: return ( 1 . 0 ? Erf . erf ( ( x - mean ) ;
rank: 815
score: 99.4525146484375
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 1 . 0 / Erf . 0 + Erf . 0 + Erf . 0 ,
rank: 815
score: 99.44922593060662
patch: return 0 . $NUMBER$ * ( x - mean ( ( x - mean ) /
rank: 815
score: 99.42647298177083
patch: return 0 . $NUMBER$ * ( 1 . 0 ) + ( 0 . $NUMBER$ ) ;
rank: 815
score: 99.35683969350961
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x > mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 815
score: 99.28140258789062
patch: return 0 . 0 + Erf . erf ( ( x - mean +
rank: 815
score: 99.24915313720703
patch: if ( ( Erf . erf ( ( x - mean ) / (
rank: 816
score: 99.51628875732422
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) * Erf . erf (
rank: 816
score: 99.48752010569854
patch: return 0 . 0 + Erf . erf ( ( x - mean ) ;
rank: 816
score: 99.45168974905303
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( int ) Erf . erf ( ( x - 0 . 0 ) ) /
rank: 816
score: 99.42600611636513
patch: return 0 . $NUMBER$ * ( $STRING$ == Erf . erf ( ( x - mean )
rank: 816
score: 99.3564453125
patch: return 0 . $NUMBER$ * ( 1 . >= Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 816
score: 99.28136444091797
patch: return 0 . 0 * Erf . erf ( ( x >= mean )
rank: 816
score: 99.24857330322266
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( 1 > Erf
rank: 817
score: 99.51544952392578
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / 0 . 0 ) /
rank: 817
score: 99.48599853515626
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) - mean ) ;
rank: 817
score: 99.45166625976563
patch: return 0 . $NUMBER$ / ( double ) Erf . erf ( ( x - mean ) /
rank: 817
score: 99.44859554893092
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . get ( $STRING$ ) /
rank: 817
score: 99.35603412828948
patch: return cumulative CaMeL Probability ( ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) )
rank: 817
score: 99.2483154296875
patch: if ( x == Erf . erf ( ( x - mean )
rank: 818
score: 99.5153099798387
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - 1 ) / $NUMBER$ . 0 + Erf . erf (
rank: 818
score: 99.45140316611842
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . get ( mean ) /
rank: 818
score: 99.44762573242187
patch: return ( 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) ) /
rank: 818
score: 99.42550320095486
patch: return 0 . $NUMBER$ * ( ( 1 . $NUMBER$ + Erf . erf ( (
rank: 818
score: 99.35595703125
patch: return Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 818
score: 99.27997589111328
patch: return 0 . 0 + Erf . erf ( ( int - mean )
rank: 818
score: 99.24825032552083
patch: return 0 . $NUMBER$ * ( 1 . != ( x - mean )
rank: 819
score: 99.48548041449652
patch: return ( 1 . $NUMBER$ ? Erf . erf ( ( x - mean ) /
rank: 819
score: 99.4512939453125
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / double . MIN _ VALUE ) / double . MIN _ VALUE ) ;
rank: 819
score: 99.44745232077206
patch: return 0 . $NUMBER$ * ( 0 . 0 + ( x - mean ) /
rank: 819
score: 99.42707262541118
patch: if ( 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / /
rank: 819
score: 99.42458767361111
patch: return 0 . 0 + ( Erf . erf ( ( x - mean ) )
rank: 819
score: 99.35577713815789
patch: return 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 819
score: 99.27911783854167
patch: return cumulative CaMeL Probability ( x . erf ( ( x - mean )
rank: 819
score: 99.24756673177083
patch: return 0 . 0 + ( 1 . 0 + 1 . 0 )
rank: 820
score: 99.51502646169355
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / Erf . erf ( $STRING$ ) / /
rank: 820
score: 99.45119406960227
patch: return 0 . $NUMBER$ * Erf . erf ( ( int ) Erf . erf ( ( int ) Erf . erf ( ( x - mean ) /
rank: 820
score: 99.42453342013889
patch: return 0 . 1 * ( 1 . 0 ) + ( 1 . 0 ) ;
rank: 820
score: 99.35567533052884
patch: return 0 . $NUMBER$ * ( 1 . - Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; }
rank: 820
score: 99.27874755859375
patch: return 0 . 0 + Erf . erf ( ( x > mean )
rank: 820
score: 99.24720052083333
patch: return 0 . $NUMBER$ * ( 1 . abs ( x - mean )
rank: 821
score: 99.51472719254032
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 + Erf . max (
rank: 821
score: 99.48418225740132
patch: return 0 . $NUMBER$ * $NUMBER$ * Erf . erf ( ( x - mean ) /
rank: 821
score: 99.45111083984375
patch: return ( double ) 0 . 0 + Erf . erf ( ( x - mean ) /
rank: 821
score: 99.44620554070724
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( 0 ) /
rank: 821
score: 99.42558850740132
patch: return 0 . $NUMBER$ * ( ( x - mean ) / / 0 . 0 ) /
rank: 821
score: 99.42385382401316
patch: return 0 . 0 * ( Erf . erf ( ( x - mean ) + (
rank: 821
score: 99.35565029046474
patch: return 0 . 0 + ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 821
score: 99.278564453125
patch: return ( double ) Erf . erf ( ( x - mean ) /
rank: 822
score: 99.5146484375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) / 0 . 0 )
rank: 822
score: 99.48380126953126
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / true ) ;
rank: 822
score: 99.45089721679688
patch: return 0 . $NUMBER$ * ( int ) Erf . erf ( ( x - mean ) /
rank: 822
score: 99.44608989514802
patch: return 0 . $NUMBER$ . $NUMBER$ * Erf . erf ( ( x - mean ) ;
rank: 822
score: 99.42350688733552
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) | (
rank: 822
score: 99.35560021033653
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( $STRING$ - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 822
score: 99.2459945678711
patch: return ( ( 0 == Erf . erf ( ( x - mean )
rank: 823
score: 99.45075757575758
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 / $NUMBER$ )
rank: 823
score: 99.44584575452302
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( 0 ) /
rank: 823
score: 99.4246826171875
patch: return 0 . 0 * Erf . erf . erf ( ( x - mean ) /
rank: 823
score: 99.42315995065789
patch: return 0 . $NUMBER$ * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ ) ) ;
rank: 823
score: 99.35546875
patch: return Integer . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 823
score: 99.2781753540039
patch: return ( ( Double ) Erf . erf ( ( x - mean )
rank: 823
score: 99.24527740478516
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 == mean ) ;
rank: 824
score: 99.51426696777344
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ) / 0 . 0 * ( 1 . 0 + Erf . erf ( )
rank: 824
score: 99.45073852539062
patch: return 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / $NUMBER$ . 0
rank: 824
score: 99.42308213975694
patch: return 0 . $NUMBER$ * Erf . erf ( ( 1 . 0 ) / (
rank: 824
score: 99.35535606971153
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf / ( standard CaMeL Deviation * Math . sqrt ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 1 ) ) ) ) ;
rank: 824
score: 99.27777506510417
patch: return 0 . $NUMBER$ * ( 1 . ( x - mean ) /
rank: 824
score: 99.24501139322916
patch: return new Integer ( Erf . erf ( ( x - mean )
rank: 825
score: 99.51397705078125
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / Erf . 0 /
rank: 825
score: 99.48225708007813
patch: return ( x - 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 825
score: 99.45071847098214
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 1 . 0 / Erf . 0 / Erf . 0 + Erf . 0
rank: 825
score: 99.422607421875
patch: return ( . $NUMBER$ + Erf . erf ( ( x - mean ) / (
rank: 825
score: 99.3553531044408
patch: return 0 . max ( 0 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 825
score: 99.27703857421875
patch: return ( ( short ) Erf . erf ( ( x - mean )
rank: 825
score: 99.24287414550781
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 == Erf /
rank: 826
score: 99.51386876260081
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf $NUMBER$ . 0 ) / mean ) /
rank: 826
score: 99.48183079769737
patch: try { return 0 . 0 * Erf . erf ( ( x - mean ) /
rank: 826
score: 99.45051343513258
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 +
rank: 826
score: 99.44500411184211
patch: return 0 . $NUMBER$ * Erf . erf ( ( 1 . 0 + mean ) /
rank: 826
score: 99.42209201388889
patch: if ( 1 . $NUMBER$ - Erf . erf ( ( x - mean ) /
rank: 826
score: 99.35493664863782
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation < Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 826
score: 99.27690124511719
patch: return ( Erf . cumulative CaMeL Probability ( ( x - mean ) /
rank: 826
score: 99.2427978515625
patch: return ( 0 . 0 + ( x - mean ) / (
rank: 827
score: 99.51385301159274
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / Erf . erf ( ) / / /
rank: 827
score: 99.48164367675781
patch: return ( x - Erf . erf ( ( x - mean ) /
rank: 827
score: 99.44972182765152
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - 0 . 0 ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 /
rank: 827
score: 99.44486999511719
patch: return 0 . $NUMBER$ * ( ( x - mean ) / mean ) ;
rank: 827
score: 99.35492264597039
patch: return cumulative CaMeL Probability ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( 1 . 0 ) ) ) ) ;
rank: 827
score: 99.23959147135416
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 == mean )
rank: 828
score: 99.44968872070312
patch: return 0 . $NUMBER$ * ( double ) Erf . erf ( ( x - mean ) *
rank: 828
score: 99.42213948567708
patch: return 0 . $NUMBER$ * ( 1 . 0 ) / Erf . erf ( (
rank: 828
score: 99.41950819227431
patch: return 0 . $NUMBER$ * ( ( 1 . 0 + ( x - mean ) /
rank: 828
score: 99.3549053485577
patch: return 0 . $NUMBER$ * ( 1 . 0 / Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 828
score: 99.27577209472656
patch: return 0 . $NUMBER$ * Erf . erf ( ( final - mean )
rank: 829
score: 99.47847065172698
patch: return 0 . $NUMBER$ * Erf . erf ( erf ( ( x - mean ) /
rank: 829
score: 99.4496552438447
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 / Erf . 0 ) ) ;
rank: 829
score: 99.44319875616776
patch: return 0 . $NUMBER$ * ( 1 . 0 + mean - ( x - mean ) /
rank: 829
score: 99.42197779605263
patch: return ( 1 . 1 + Erf . erf ( ( x - mean ) / (
rank: 829
score: 99.354638671875
patch: return 0 . 0 * ( 1 . 0 + mean ) ; }
rank: 829
score: 99.27435302734375
patch: return cumulative CaMeL Probability ( Erf . erf ( ( x + mean )
rank: 829
score: 99.23934173583984
patch: return 0 . $NUMBER$ + ( 1 . 0 + 1 . 0 ) ;
rank: 830
score: 99.51362609863281
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / 0 . 0 / /
rank: 830
score: 99.44945549242425
patch: return 0 . $NUMBER$ * Erf . erf ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 / $NUMBER$ . 0
rank: 830
score: 99.4422607421875
patch: return ( 0 . $NUMBER$ * ( x - mean ) /
rank: 830
score: 99.42182752821181
patch: return 0 . $NUMBER$ + Erf . erf ( ( x + mean ) / (
rank: 830
score: 99.35459989659927
patch: return 0 . $NUMBER$ * ( 1 < Erf . erf ( ) ) ;
rank: 830
score: 99.273779296875
patch: return 0 + Erf . erf ( ( x - mean ) /
rank: 830
score: 99.23882649739583
patch: return ( 0 . 0 + ( 1 . 0 ) / ( $NUMBER$
rank: 831
score: 99.51310729980469
patch: return 0 . $NUMBER$ * double 1 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 831
score: 99.44852941176471
patch: return 0 . $NUMBER$ * Erf . erf ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 / $NUMBER$ . 0 +
rank: 831
score: 99.44148763020833
patch: return ( 1 . $NUMBER$ * ( 1 . 0 + ( x - mean ) /
rank: 831
score: 99.42130962171052
patch: return 0 . 1 * ( 1 . 0 + erf ( ( x - mean ) /
rank: 831
score: 99.41653103298611
patch: int ( 0 . $NUMBER$ + Erf . erf ( ( x - mean ) /
rank: 831
score: 99.3541195518092
patch: return 0 . $NUMBER$ * ( 1 . * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 831
score: 99.273046875
patch: return ( 0 < Erf . erf ( ( x - mean )
rank: 831
score: 99.23784993489583
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 < ( 1
rank: 832
score: 99.51304183467742
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 *
rank: 832
score: 99.4773681640625
patch: return 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / $NUMBER$ ) /
rank: 832
score: 99.35374724559294
patch: return false . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 832
score: 99.27297973632812
patch: return 0 . $NUMBER$ * ( 1 . 0 + x - mean ) ?
rank: 832
score: 99.23719024658203
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( 1 < Erf
rank: 833
score: 99.51290795110887
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - 0 . 0 ) / Erf . erf ( ) )
rank: 833
score: 99.4478056936553
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - this . Erf . erf ( ( x - mean ) ) /
rank: 833
score: 99.43904836554276
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( null ) /
rank: 833
score: 99.42110402960526
patch: return ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) + (
rank: 833
score: 99.41492377387152
patch: return 0 . $NUMBER$ * ( x - 0 . 0 + Erf . erf (
rank: 833
score: 99.35349635074013
patch: return $STRING$ . equals ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 833
score: 99.27239990234375
patch: return 0 . 0 * ( Erf . erf ( ( byte ) 0
rank: 833
score: 99.237158203125
patch: else { return 0 . $NUMBER$ * ( 1 . 0 ) ; }
rank: 834
score: 99.51267700195312
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( x ) / /
rank: 834
score: 99.44724635074013
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) / $NUMBER$
rank: 834
score: 99.43893271998355
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( 1 . 0 + mean ) ;
rank: 834
score: 99.41283461626838
patch: return 0 . $NUMBER$ * ( ( x - mean ) / 0 . 0 )
rank: 834
score: 99.35337790464743
patch: return 0 . 0 * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 834
score: 99.27168273925781
patch: return cumulative CaMeL Probability ( x . erf ( ( x - mean ) /
rank: 835
score: 99.51246692288306
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / 0 . 0 (
rank: 835
score: 99.47415964226974
patch: return ( 1 . $NUMBER$ * Erf . erf ( ( x - mean ) ) /
rank: 835
score: 99.44718889508928
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 1 . 0 / Erf . 0 + Erf . 0 + Erf . 0
rank: 835
score: 99.43857935855263
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( 1 ) /
rank: 835
score: 99.41254021139706
patch: return 0 . $NUMBER$ + ( x . erf ( ( x - mean ) /
rank: 835
score: 99.3533466045673
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ?
rank: 835
score: 99.2712646484375
patch: return 0 * Erf . erf ( ( x - mean ) /
rank: 835
score: 99.23524475097656
patch: return 0 . $NUMBER$ * this . erf ( ( x - mean ) /
rank: 836
score: 99.51242547286184
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf ) / $NUMBER$ . $NUMBER$ ;
rank: 836
score: 99.44710047104779
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / double . MIN _ VALUE ) / double . MAX _ VALUE
rank: 836
score: 99.43849012586806
patch: return 0 . 0 * ( ( x - mean ) / 0 . 0 ) ;
rank: 836
score: 99.41963276110198
patch: return 1 . 0 + ( Erf . erf ( ( x - mean ) / (
rank: 836
score: 99.4115478515625
patch: return 0 . $NUMBER$ * Erf * ( x - mean ) /
rank: 836
score: 99.35331456801471
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + 1 . 0 ) ; }
rank: 836
score: 99.23515319824219
patch: return 0 . $NUMBER$ * ( 1 . != ( x - mean ) /
rank: 837
score: 99.51232516381049
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / 0 . 0 )
rank: 837
score: 99.44708426339285
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / $NUMBER$ . 0 + Erf . erf ( ) / $NUMBER$ . 0 . 0 +
rank: 837
score: 99.43796793619792
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( double ) mean ) /
rank: 837
score: 99.41956244574652
patch: return 0 . $NUMBER$ + ( Erf . erf ( ( x - mean ) )
rank: 837
score: 99.41148546006944
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / }
rank: 837
score: 99.35329718338816
patch: return 0 . / ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 837
score: 99.26947021484375
patch: return ( ( this . Erf . erf ( ( x - mean )
rank: 837
score: 99.23479461669922
patch: return 0 . 0 * ( 1 . $NUMBER$ + x - mean ) ;
rank: 838
score: 99.47370741102431
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ;
rank: 838
score: 99.44645182291667
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 / Erf . 0 / $NUMBER$ /
rank: 838
score: 99.41954888237848
patch: return ( 1 . 0 + Erf . erf ( ( x - mean ) )
rank: 838
score: 99.35294382195724
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) *
rank: 838
score: 99.26933942522321
patch: return 0 . 0 * ( 1 == ( x - mean )
rank: 838
score: 99.23387145996094
patch: return 0 . $NUMBER$ * ( 1 . 0 + x - x ) ;
rank: 839
score: 99.51139068603516
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) * 1 . 0 ) / Erf . erf (
rank: 839
score: 99.44623879825367
patch: return 0 . $NUMBER$ * Erf . erf ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 / $NUMBER$ . 0 /
rank: 839
score: 99.43693462171052
patch: return 0 . 0 . $NUMBER$ * Erf . erf ( ( x - mean ) /
rank: 839
score: 99.41068522135417
patch: int ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) /
rank: 839
score: 99.35289588341347
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . $NUMBER$ ) ) ) ) ;
rank: 839
score: 99.2682113647461
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean *
rank: 840
score: 99.51100463867188
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ) / / /
rank: 840
score: 99.47301528033088
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) .
rank: 840
score: 99.44608931107955
patch: return 0 . $NUMBER$ . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 +
rank: 840
score: 99.41008165147569
patch: try { return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf (
rank: 840
score: 99.35237201891448
patch: return 0 . $NUMBER$ * ( $NUMBER$ . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 840
score: 99.26787458147321
patch: return 0 . $NUMBER$ * ( 1 , ( x - mean )
rank: 840
score: 99.23306710379464
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . MAX
rank: 841
score: 99.510595703125
patch: return ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / mean )
rank: 841
score: 99.47194213867188
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) << $NUMBER$ ) *
rank: 841
score: 99.44551225142045
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 / $NUMBER$ /
rank: 841
score: 99.43654271175987
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( $STRING$ ) ;
rank: 841
score: 99.4100570678711
patch: return new Double ( Erf . erf ( ( x - mean ) /
rank: 841
score: 99.35237201891448
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; } } ) ;
rank: 841
score: 99.26707458496094
patch: return ( 1 . 0 + ( x - Erf . erf ( (
rank: 841
score: 99.23152669270833
patch: return 1 . $NUMBER$ * ( 1 . 0 + x - mean )
rank: 842
score: 99.51057680191532
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 + Erf . get (
rank: 842
score: 99.47179497612848
patch: return ( 1 . $NUMBER$ + Erf . erf ( ( x - 0 ) /
rank: 842
score: 99.44523111979167
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( int ) Erf . erf ( ( x - 0 . $NUMBER$ ) ) /
rank: 842
score: 99.43631998697917
patch: return 0 . $NUMBER$ * ( 1 . 0 + mean ( ) /
rank: 842
score: 99.41765679253473
patch: return 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / (
rank: 842
score: 99.35210712139423
patch: return $NUMBER$ . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 842
score: 99.26653289794922
patch: return 0 . $NUMBER$ * Erf . erf ( x - mean ) /
rank: 842
score: 99.23118591308594
patch: return 0 . 0 + ( 1 . 0 + ( 1 == Erf
rank: 843
score: 99.51037203881049
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / 1 . $NUMBER$ /
rank: 843
score: 99.4442626953125
patch: return ( ( 0 . 0 + Erf . erf ( ( x - mean ) ) /
rank: 843
score: 99.43603515625
patch: return 0 . $NUMBER$ * Erf . erf ( new x - mean ) /
rank: 843
score: 99.41753791360294
patch: return 0 . 0 + Erf . erf ( ( x - mean ) ?
rank: 843
score: 99.35201322115384
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( 1 . 0 ) ) ) ) ;
rank: 843
score: 99.26652526855469
patch: 0 . $NUMBER$ * ( Erf . erf ( ( x - mean )
rank: 843
score: 99.23107038225446
patch: return 0 . 0 + ( 1 . 0 + 1 . 0
rank: 844
score: 99.51036834716797
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / Erf . erf ( 1 . 0 ) /
rank: 844
score: 99.47088623046875
patch: return 0 . 0 * Erf . erf ( ( x - mean ) / $NUMBER$ ) /
rank: 844
score: 99.4356689453125
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - 1 ) /
rank: 844
score: 99.41746690538194
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) == (
rank: 844
score: 99.35201263427734
patch: return 0 . $NUMBER$ * 1 . 0 * ( x - mean ) ;
rank: 844
score: 99.26641438802083
patch: return 0 + ( Erf . erf ( ( x - mean )
rank: 844
score: 99.23040008544922
patch: return ( ( double ) 0 . 0 + Erf . erf ( (
rank: 845
score: 99.51034691220238
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / $NUMBER$ ) /
rank: 845
score: 99.47060139973958
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) ) /
rank: 845
score: 99.435302734375
patch: return 0 . $NUMBER$ * ( 1 . 0 . 0 + ( x - mean ) /
rank: 845
score: 99.41685655381944
patch: return 0 . 0 + ( 1 . 0 ) + ( 1 . 0 ) ;
rank: 845
score: 99.40764702690973
patch: return 0 . 0 * ( x - mean ) / ( x - mean ) /
rank: 845
score: 99.35190301192434
patch: return 0 . $NUMBER$ * ( 1 . <= Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 845
score: 99.26592254638672
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - (
rank: 846
score: 99.44353693181819
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 /
rank: 846
score: 99.43485300164474
patch: x = ( 1 . 0 * Erf . erf ( ( x - mean ) /
rank: 846
score: 99.41624620225694
patch: return 0 . 0 + Erf . erf ( ( x - mean ) , (
rank: 846
score: 99.35187731291118
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) +
rank: 846
score: 99.26580047607422
patch: return ( ( * Erf . erf ( ( x - mean ) /
rank: 846
score: 99.2297592163086
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( x < mean )
rank: 847
score: 99.50975799560547
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / Erf . erf ( double ) / mean )
rank: 847
score: 99.44255022321428
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 / $NUMBER$ . 0 /
rank: 847
score: 99.43403894761029
patch: return 0 . 1 * Erf . erf ( ( x - mean ) ;
rank: 847
score: 99.40725368923611
patch: return 0 . 0 * ( ( x - mean ) / 1 . 0 ) /
rank: 847
score: 99.35177534054488
patch: return ( 0 . $NUMBER$ + 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 847
score: 99.26481628417969
patch: return 0 . $NUMBER$ * ( ( 1 . ( x - mean ) /
rank: 847
score: 99.22958984375
patch: return ( ( double ) 0 . 0 + 1 . 0 ) ;
rank: 848
score: 99.50970262096774
patch: return 0 . $NUMBER$ . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / / /
rank: 848
score: 99.47016059027777
patch: return Erf . erf ( ( x - mean ) / 1 . 0 ) ;
rank: 848
score: 99.44205496651786
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 1 . 0 / Erf . 0 / Erf . 0 + Erf . 1
rank: 848
score: 99.41604275173611
patch: return 0 . $NUMBER$ * ( standard CaMeL Deviation * ( x - mean ) ) ;
rank: 848
score: 99.4068603515625
patch: return 0 . abs ( Erf . erf ( ( x - mean ) /
rank: 848
score: 99.35177534054488
patch: return 0 . $NUMBER$ * ( 1 . null + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 848
score: 99.26466369628906
patch: return 0 . 0 + Erf . erf ( ( byte - mean )
rank: 848
score: 99.22952270507812
patch: return 0 . $NUMBER$ * ( 1 . min ( x - mean ) /
rank: 849
score: 99.50963774181548
patch: return 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / /
rank: 849
score: 99.47000461154514
patch: return ( 1 . 0 + Erf . erf ( ( int - mean ) /
rank: 849
score: 99.40617101332721
patch: return 0 . $NUMBER$ * Erf ( erf ( ( x - mean ) /
rank: 849
score: 99.35119315905449
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; }
rank: 849
score: 99.22856903076172
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf != null )
rank: 850
score: 99.50950573336694
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / 0 . 0 ) / 0 . 0 ;
rank: 850
score: 99.46998291015625
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) - min ) /
rank: 850
score: 99.44108751085069
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 1 . 0 / Erf . 0 / Erf . 0 + Erf . 0 ,
rank: 850
score: 99.43256578947368
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( 0 ) -
rank: 850
score: 99.41499837239583
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ ) / ( 1 . $NUMBER$ ) ;
rank: 850
score: 99.35106169871794
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf / ( standard CaMeL Deviation * Math . sqrt ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . $NUMBER$ ) ) ) ) ;
rank: 850
score: 99.26322174072266
patch: return ( ( double ) 0 . 0 + ( x - mean ) /
rank: 850
score: 99.22801208496094
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( 1 ? Erf
rank: 851
score: 99.50891876220703
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / Erf . erf (
rank: 851
score: 99.43968290441177
patch: return 0 . $NUMBER$ * 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( int ) Erf . erf ( ( x - mean ) /
rank: 851
score: 99.43205710018383
patch: return 0 . $NUMBER$ * Erf . erf ( ( double ) mean ) ;
rank: 851
score: 99.41475183823529
patch: return 0 . $NUMBER$ + Erf . erf ( ( x - mean ) ?
rank: 851
score: 99.40575493706598
patch: return Double . 0 * ( Erf . erf ( ( x - mean ) /
rank: 851
score: 99.35099712171052
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( this . erf ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ||
rank: 851
score: 99.26105143229167
patch: return new String ( Erf . erf ( ( x - mean )
rank: 851
score: 99.2279541015625
patch: return ( ( ( Erf . erf ( ( x - mean )
rank: 852
score: 99.50874255952381
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ) / 0 . $NUMBER$ ;
rank: 852
score: 99.46723768446181
patch: return ( 1 . $NUMBER$ + Erf . erf ( ( int - mean ) /
rank: 852
score: 99.43949497767858
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / $NUMBER$ . 0 + Erf . erf ( ) / $NUMBER$ . 0 / $NUMBER$ /
rank: 852
score: 99.43183979235198
patch: return 0 . $NUMBER$ * ( ( x - mean ) / 0 . 0 ) / (
rank: 852
score: 99.41473029641544
patch: return 0 . 0 + Erf . erf ( ( x - mean ) -
rank: 852
score: 99.40500057444854
patch: return 0 . $NUMBER$ * Erf . $NUMBER$ + ( x - mean ) /
rank: 852
score: 99.35086220189145
patch: return 0 . 0 * ( 1 . 0 + Erf . erf < ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 852
score: 99.22762298583984
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( 1 <= Erf
rank: 853
score: 99.50839233398438
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / Erf . length )
rank: 853
score: 99.46683349609376
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) - erf ) /
rank: 853
score: 99.43891457950367
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( int ) 0 . 0 + Erf . erf ( ( x - mean ) /
rank: 853
score: 99.4317562705592
patch: return ( return 0 . 0 * Erf . erf ( ( x - mean ) /
rank: 853
score: 99.40499877929688
patch: return 0 . $NUMBER$ * ( x - mean ) / 0 . $NUMBER$ *
rank: 853
score: 99.35083770751953
patch: return 0 . $NUMBER$ * ( 1 == 0 . 0 + mean ) ;
rank: 853
score: 99.26022338867188
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf 1
rank: 853
score: 99.22698974609375
patch: return 0 . $NUMBER$ * ( 1 . 0 + x - 1 ) ;
rank: 854
score: 99.50785827636719
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) / Erf . 0 )
rank: 854
score: 99.46675379136029
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) ,
rank: 854
score: 99.43882123161765
patch: return 0 . $NUMBER$ * 0 . 0 * ( 1 . 0 + Erf . erf ( ( int ) Erf . erf ( ( x - mean ) /
rank: 854
score: 99.4144287109375
patch: return 0 . $NUMBER$ + Erf . erf ( ( x - mean ) , (
rank: 854
score: 99.40482584635417
patch: return 0 . $NUMBER$ * ( x - mean ) / ( x / mean ) /
rank: 854
score: 99.35081722861842
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( . x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) +
rank: 854
score: 99.2600326538086
patch: return 0 . 0 + ( 1 . max ( ( x - mean )
rank: 854
score: 99.22664642333984
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( x + mean )
rank: 855
score: 99.50778198242188
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / Erf . 0 )
rank: 855
score: 99.43874289772727
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) Erf . erf ( ( x - 0 . 0 ) ) /
rank: 855
score: 99.4312808388158
patch: x = ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) /
rank: 855
score: 99.41356703814338
patch: return 0 . $NUMBER$ + ( x - mean ) / ( standard CaMeL Deviation *
rank: 855
score: 99.40313042534723
patch: if ( 0 . $NUMBER$ , Erf . erf ( ( x - mean ) /
rank: 855
score: 99.3503167568109
patch: return 0 . $NUMBER$ * ( erf . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 855
score: 99.25861002604167
patch: return 0 == ( Erf . erf ( ( x - mean )
rank: 855
score: 99.2255859375
patch: if ( 0 >= Erf . erf ( ( x - mean )
rank: 856
score: 99.50751953125
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / mean )
rank: 856
score: 99.46614990234374
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) - $NUMBER$ ) /
rank: 856
score: 99.43840997869319
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ( 1 . 0 / Erf . 0 + Erf . 0 ) /
rank: 856
score: 99.43118446751645
patch: x = ( 1 . $NUMBER$ * Erf . erf ( ( x - mean ) /
rank: 856
score: 99.41338433159723
patch: return 0 . $NUMBER$ * ( 1 . 0 ) + ( $NUMBER$ . $NUMBER$ ) ;
rank: 856
score: 99.35027754934211
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( - mean ) ) ) ) ;
rank: 856
score: 99.2576904296875
patch: return 0 . 0 * Erf . erf ( x - mean ) ;
rank: 856
score: 99.22544759114584
patch: return ( 0 . 0 + ( 1 . 0 ) / ( 1
rank: 857
score: 99.5071957236842
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ) / /
rank: 857
score: 99.46413167317708
patch: return Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) ;
rank: 857
score: 99.43726264105902
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / double . MIN _ VALUE ) / double . MAX _ VALUE ) ;
rank: 857
score: 99.413330078125
patch: return 0 . $NUMBER$ + Erf . erf ( ( x - mean ) -
rank: 857
score: 99.40248616536458
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / return
rank: 857
score: 99.35012978001645
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf $NUMBER$ ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 857
score: 99.25682830810547
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - :
rank: 857
score: 99.22494303385416
patch: return 0 . $NUMBER$ * ( 1 . 1 + x - mean )
rank: 858
score: 99.50656127929688
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . get ( ( x - mean ) / $NUMBER$ . 0 ) / Erf . get (
rank: 858
score: 99.4637451171875
patch: return ( 1 . 0 * Erf . erf ( ( x - mean ) *
rank: 858
score: 99.43698299632354
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 . 0 ) / $NUMBER$ . 0 ) ;
rank: 858
score: 99.41309950086806
patch: return 0 . $NUMBER$ * ( ( 1 . 0 ) / ( 1 . 0 )
rank: 858
score: 99.3500244140625
patch: return ( double ) 0 . 0 * ( 1 . 0 ) ;
rank: 858
score: 99.25677490234375
patch: return 0 . 0 * ( 1 . 0 + Erf . erf _
rank: 858
score: 99.22352600097656
patch: return 0 . $NUMBER$ * Erf . erf ( ( double - mean )
rank: 859
score: 99.50652313232422
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - this . erf ( ( x - this . mean ) ) /
rank: 859
score: 99.43627211626838
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( int ) Erf . erf ( ) / $NUMBER$ . 0 / $NUMBER$ . 0 +
rank: 859
score: 99.43020790501645
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( $STRING$ ) /
rank: 859
score: 99.40064154730902
patch: return 0 . $NUMBER$ * ( ( x - mean ) / 0 . 0 ) *
rank: 859
score: 99.35001413445724
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( this . erf ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ,
rank: 859
score: 99.2565689086914
patch: return 0 . 0 * 1 . 0 + ( x - mean ) ;
rank: 859
score: 99.2235107421875
patch: return ( 1 . $NUMBER$ + ( x - mean ) / (
rank: 860
score: 99.50612278988487
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / $NUMBER$
rank: 860
score: 99.46322631835938
patch: return 0 . $NUMBER$ * Erf . erf . erf . ( ( x - mean ) /
rank: 860
score: 99.42971462673611
patch: return ( 0 . $NUMBER$ * ( 1 . 0 + ( x - mean ) /
rank: 860
score: 99.40059407552083
patch: return 0 . $NUMBER$ * ( ( x - mean ) / 1 . $NUMBER$ ) /
rank: 860
score: 99.34990985576923
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . abs ( $NUMBER$ . 0 ) ) ) ) ;
rank: 860
score: 99.22296142578125
patch: return 0 . $NUMBER$ * ( 1 . abs 1 ( x - mean )
rank: 861
score: 99.50596859580592
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf ) / $NUMBER$ . 0 ;
rank: 861
score: 99.43553969439338
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / $NUMBER$ . 0 + Erf . erf ( ) / $NUMBER$ . 0 / /
rank: 861
score: 99.42930201480263
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( null ) /
rank: 861
score: 99.39975992838542
patch: if ( 1 . 0 > Erf . erf ( ( x - mean ) /
rank: 861
score: 99.34953227796052
patch: return 0 . 0 * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 861
score: 99.22233072916667
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf / (
rank: 862
score: 99.50592803955078
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) / 1 . 0 ) /
rank: 862
score: 99.4620361328125
patch: return ( 1 . 0 - Erf . erf ( ( x - mean ) /
rank: 862
score: 99.42889725534539
patch: return 0 . 0 * ( 1 . 0 + ( 1 . 0 + mean ) /
rank: 862
score: 99.41229248046875
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( $NUMBER$ . 0 ) / (
rank: 862
score: 99.39973000919117
patch: return 0 . $NUMBER$ * ( ( ( x - mean ) / mean ) /
rank: 862
score: 99.34948417467949
patch: return Long . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 862
score: 99.22152709960938
patch: return 0 . $NUMBER$ * ( 1 . 0 + x - max ) ;
rank: 863
score: 99.5053939819336
patch: return 0 . $NUMBER$ * double 1 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 863
score: 99.46202392578125
patch: return 0 . 0 * Erf . erf ( ( x - mean ) << $NUMBER$ ) /
rank: 863
score: 99.42839612458882
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( name ) /
rank: 863
score: 99.41225179036458
patch: return 0 . $NUMBER$ * ( $NUMBER$ . 0 ) / ( 1 . 0 ) ;
rank: 863
score: 99.39970846737133
patch: return 0 . $NUMBER$ * ( ( x . erf ( ) / mean ) /
rank: 863
score: 99.34947165464743
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation >= Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 863
score: 99.25467681884766
patch: return 0 . $NUMBER$ * ( 1 . 0 + x - mean ) *
rank: 863
score: 99.22036743164062
patch: return $NUMBER$ . $NUMBER$ * ( 1 . 0 + x - mean ) ;
rank: 864
score: 99.50527954101562
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) /
rank: 864
score: 99.46141967773437
patch: return ( ( x - mean ) / Erf . erf ( ( x - mean ) /
rank: 864
score: 99.4346923828125
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 1 . 0 / Erf . 0 / Erf . 0 + Erf . 1 /
rank: 864
score: 99.42826120476974
patch: return 0 . $NUMBER$ * ( 1 . 0 ) * ( ( x - mean ) ;
rank: 864
score: 99.41188557942708
patch: return 0 . 0 + ( 1 . 0 + ( 1 . 0 ) ) ;
rank: 864
score: 99.39892578125
patch: double ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) /
rank: 864
score: 99.34925881410257
patch: return ( 0 . $NUMBER$ * 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 864
score: 99.25462341308594
patch: return cumulative CaMeL Probability ( 1 . $NUMBER$ + ( x - mean ) /
rank: 864
score: 99.22012329101562
patch: return 0 . 0 * ( 1 . 0 + ( 1 == Erf
rank: 865
score: 99.46137084960938
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / true ) /
rank: 865
score: 99.43457728794642
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 1 . 0 / Erf . 0 + Erf . 0 + Erf . 1
rank: 865
score: 99.42778862847223
patch: return 0 . $NUMBER$ * * Erf . erf ( ( x - mean ) /
rank: 865
score: 99.411865234375
patch: return 0 . 0 + Erf . erf ( ( x - mean ) ? (
rank: 865
score: 99.3988898782169
patch: return 0 . $NUMBER$ * 1 . 0 * ( ( x - mean ) /
rank: 865
score: 99.34872671274039
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( byte - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 865
score: 99.25447904146634
patch: return ( 0 . 0 + ( ( x - mean )
rank: 865
score: 99.21962890625
patch: return 0 . $NUMBER$ * ( 1 . get ( ) - mean )
rank: 866
score: 99.46133761935764
patch: return 0 . $NUMBER$ * Erf . erf . ( ( x - mean ) /
rank: 866
score: 99.43449571397569
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( 0 . 0 + Erf . erf ( 0 . 0 + Erf . erf ( ) /
rank: 866
score: 99.42713165283203
patch: return 0 . $NUMBER$ * ( 1 . 0 + mean - mean ) /
rank: 866
score: 99.41090901692708
patch: return 1 . $NUMBER$ * ( 1 . 0 ) + ( 1 . 0 ) ;
rank: 866
score: 99.39863416883681
patch: if ( 0 . 0 > Erf . erf ( ( x - mean ) /
rank: 866
score: 99.34862029246794
patch: return 0 . 1 * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 866
score: 99.25442708333334
patch: return ( 0 , Erf . erf ( ( x - mean )
rank: 867
score: 99.50472259521484
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / ( 1 . 0 / Erf . erf (
rank: 867
score: 99.43369427849265
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( int ) 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 867
score: 99.42603257123162
patch: return 0 . $NUMBER$ * Erf . erf ( ( x / mean ) /
rank: 867
score: 99.41007486979167
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( 0 . $NUMBER$ ) ) ;
rank: 867
score: 99.39844512939453
patch: return 0 . $NUMBER$ * ( x - mean ) / 0 . 0 /
rank: 867
score: 99.25421142578125
patch: return 0 . 0 * ( Erf . erf ( x - mean )
rank: 867
score: 99.21886444091797
patch: return 0 . $NUMBER$ * ( 1 . join ( ( x - mean )
rank: 868
score: 99.50437927246094
patch: return 0 . $NUMBER$ . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / mean ) / Erf . erf (
rank: 868
score: 99.4610595703125
patch: return 1 . 0 * Erf . erf ( ( x - mean ) ;
rank: 868
score: 99.43352593315973
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 1 . 0 / Erf . 0 / Erf . 0 + Erf . 0 +
rank: 868
score: 99.42582194010417
patch: return return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) ;
rank: 868
score: 99.40997314453125
patch: return 0 . $NUMBER$ + Erf . erf ( ( x - mean ) ? (
rank: 868
score: 99.39816463694854
patch: return 0 . $NUMBER$ * ( x - mean ) / Erf . erf (
rank: 868
score: 99.34834369860198
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) -
rank: 868
score: 99.2530517578125
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf (
rank: 868
score: 99.21846008300781
patch: return 0 . 0 * ( 1 . 0 + Erf ) / (
rank: 869
score: 99.50422668457031
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / / $NUMBER$ . 0 + Erf . erf (
rank: 869
score: 99.42312622070312
patch: return 0 . $NUMBER$ * 1 . $NUMBER$ + ( x - mean ) /
rank: 869
score: 99.40984429253473
patch: return 0 . $NUMBER$ * ( 1 . 0 ) * ( $NUMBER$ . 0 ) ;
rank: 869
score: 99.34815705128206
patch: throw 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 869
score: 99.25281524658203
patch: return 0 . $NUMBER$ * Erf . erf ( ( x >> mean )
rank: 870
score: 99.5038833618164
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / 0 . $NUMBER$ ) /
rank: 870
score: 99.4605712890625
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / $NUMBER$ ) *
rank: 870
score: 99.43234514508929
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / $NUMBER$ . 0 + Erf . erf ( ) / $NUMBER$ . 0 . 0 /
rank: 870
score: 99.40957302517361
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) ) ?
rank: 870
score: 99.3968505859375
patch: return 0 . $NUMBER$ * Erf ( 1 . 0 + Erf ) /
rank: 870
score: 99.34812575120192
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . contains ( $NUMBER$ . 0 ) ) ) ) ;
rank: 870
score: 99.25244140625
patch: return 0 . $NUMBER$ * Erf . erf [ ( x - mean +
rank: 870
score: 99.2178955078125
patch: return 0 . $NUMBER$ * Erf . erf ( ( double ) x )
rank: 871
score: 99.50363159179688
patch: double 0 = Erf . erf ( ( x - mean ) / mean ) / mean ;
rank: 871
score: 99.43194221047794
patch: return 0 . $NUMBER$ * Erf . get ( ( x - mean ) /
rank: 871
score: 99.42163803998162
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - max ) /
rank: 871
score: 99.3968505859375
patch: if ( 0 . 0 , Erf . erf ( ( x - mean ) /
rank: 871
score: 99.34798803084936
patch: return ( 1 . 0 + 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 871
score: 99.21685384114583
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 != ( 1
rank: 872
score: 99.50362548828124
patch: return ( 1 . 0 + Erf . erf ( ( x - mean ) / mean )
rank: 872
score: 99.45977105034723
patch: return ( 1 . 0 + Erf . erf ( ( x - 0 ) /
rank: 872
score: 99.43192784926471
patch: return 0 . $NUMBER$ * ( double ) erf ( ( x - mean ) /
rank: 872
score: 99.40835391773896
patch: return erf . erf ( ( x - mean ) / ( standard CaMeL Deviation *
rank: 872
score: 99.25206756591797
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - $NUMBER$ )
rank: 872
score: 99.21587665264423
patch: return ( 1 . $NUMBER$ + ( x - mean ) /
rank: 873
score: 99.50244818793402
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ) /
rank: 873
score: 99.42137315538194
patch: return 0 . $NUMBER$ * ( ( x - mean ) / 0 . $NUMBER$ ) ;
rank: 873
score: 99.40800645616319
patch: return 0 . $NUMBER$ * Erf . erf ( ( x + mean ) ) ;
rank: 873
score: 99.34724934895833
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . iterator ( $NUMBER$ . 0 ) ) ) ) ;
rank: 873
score: 99.21575055803571
patch: return ( 0 . $NUMBER$ + ( x - mean ) / (
rank: 874
score: 99.50227661132813
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / mean /
rank: 874
score: 99.43136776194854
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 . 0 ) ;
rank: 874
score: 99.40740966796875
patch: return ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) )
rank: 874
score: 99.3468737479968
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation > Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 874
score: 99.25183868408203
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean [
rank: 874
score: 99.21572875976562
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( x >= mean )
rank: 875
score: 99.43131510416667
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 1 . 0 / Erf . 0 / Erf . 0 + Erf . 0 *
rank: 875
score: 99.406982421875
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( $NUMBER$ . 0 ) /
rank: 875
score: 99.3464856270032
patch: return 0 . $NUMBER$ * ( $STRING$ . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 875
score: 99.2515869140625
patch: return Erf . erf ( ( x - mean )
rank: 875
score: 99.21539713541667
patch: return 0 == Erf . erf ( ( x - mean ) /
rank: 876
score: 99.50191497802734
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / 0 . 0 ) / Erf . erf (
rank: 876
score: 99.43095846737133
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - 0 . 0 ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 ) ;
rank: 876
score: 99.39308076746323
patch: return 0 . $NUMBER$ + Erf . erf * ( x - mean ) /
rank: 876
score: 99.34642302684294
patch: return Boolean . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 876
score: 99.25141143798828
patch: return ( double ) 0 . $NUMBER$ * ( ( x - mean ) /
rank: 876
score: 99.215234375
patch: return 0 . 0 * ( 1 . 0 + 1 . 0 +
rank: 877
score: 99.50106811523438
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / 0 . 0 ) ;
rank: 877
score: 99.43081485523896
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 / $NUMBER$ ) ;
rank: 877
score: 99.41895967371323
patch: return 0 . $NUMBER$ * ( 1 . 0 | ( x - mean ) /
rank: 877
score: 99.39204406738281
patch: return 0 . $NUMBER$ * ( x - mean ) / 1 . 0 +
rank: 877
score: 99.34639699835526
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; }
rank: 877
score: 99.25137329101562
patch: return 0 . 0 * Erf . erf ( ( x <= mean )
rank: 877
score: 99.21451822916667
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 ) / (
rank: 878
score: 99.50067429315476
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( int ) mean ,
rank: 878
score: 99.41824161305146
patch: return 0 . $NUMBER$ * ( 1 . 0 / ( x - mean ) /
rank: 878
score: 99.39096966911765
patch: if ( ( x - Erf . erf ( ( x - mean ) /
rank: 878
score: 99.34597856570512
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . min ( $NUMBER$ . 0 ) ) ) ) ;
rank: 878
score: 99.25113118489584
patch: return ( double ) 0 . 0 * ( ( x - mean )
rank: 878
score: 99.2142562866211
patch: return 0 . $NUMBER$ * ( 1 . equals ( x - mean ) )
rank: 879
score: 99.50056457519531
patch: return 0 . $NUMBER$ . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / Erf . erf ( ) ) /
rank: 879
score: 99.41815185546875
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( double ) mean ) ;
rank: 879
score: 99.40579562717014
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) ) +
rank: 879
score: 99.39048856847427
patch: return 0 . $NUMBER$ * ( x . mean ( ( x - mean ) /
rank: 879
score: 99.34565930488782
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x < mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 879
score: 99.2507095336914
patch: return 0 . $NUMBER$ + ( ( x - Erf . erf ( (
rank: 879
score: 99.21414388020834
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( 1 == $NUMBER$
rank: 880
score: 99.49989318847656
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 ) /
rank: 880
score: 99.43059430803571
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( int ) 1 . 0 + Erf . erf ( ( x - mean ) ) /
rank: 880
score: 99.40497504340277
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ ) / ( $NUMBER$ . 0 ) ;
rank: 880
score: 99.38862161075367
patch: return 0 . $NUMBER$ * ( x - mean ) / ( x - mean )
rank: 880
score: 99.34562683105469
patch: return 0 . $NUMBER$ * ( 1 . 0 ) ; } } ) ;
rank: 880
score: 99.24976348876953
patch: return 0 . $NUMBER$ * Erf . erf ( ( x == 0 )
rank: 880
score: 99.2137451171875
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 ==
rank: 881
score: 99.49983978271484
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - 0 . 0 ) / Erf . erf ( ) ) /
rank: 881
score: 99.40462917751736
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x - mean ) -
rank: 881
score: 99.34550280448718
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( standard CaMeL Deviation * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) . ) ) ; }
rank: 881
score: 99.21308898925781
patch: return ( 1 . 0 + 1 . 0 + ( x - mean )
rank: 882
score: 99.49983723958333
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / mean ( ) /
rank: 882
score: 99.45417865953948
patch: return 0 . $NUMBER$ * Erf . erf . erf ( ( x - mean ) ;
rank: 882
score: 99.42995318244485
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - this . Erf . erf ( ( x - this . mean ) /
rank: 882
score: 99.40436197916667
patch: return ( Erf . erf ( ( x - mean ) / (
rank: 882
score: 99.38606262207031
patch: return 0 . $NUMBER$ * ( x - mean ) / 0 . $NUMBER$ +
rank: 882
score: 99.34515850360577
patch: return 0 . $NUMBER$ * ( 0 . 0 * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 882
score: 99.21229771205357
patch: return 0 . 0 * ( ( x - mean ) / (
rank: 883
score: 99.45328561883224
patch: return ( 1 . 0 * Erf . erf ( ( x - mean ) ) /
rank: 883
score: 99.42856732536765
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( int ) 1 . 0 + Erf . erf ( ( int ) mean ) /
rank: 883
score: 99.40435791015625
patch: return 0 . $NUMBER$ * ( 1 . 0 ) + ( 1 . 0 ) .
rank: 883
score: 99.38477998621323
patch: return 0 . $NUMBER$ * ( ( ( x - mean ) / erf ) /
rank: 883
score: 99.34513346354167
patch: return Math . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 883
score: 99.24888258713942
patch: return ( ( x . erf ( ( x - mean )
rank: 883
score: 99.2115009014423
patch: return ( 0 . $NUMBER$ + ( x - mean ) /
rank: 884
score: 99.49900817871094
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / /
rank: 884
score: 99.45245682565789
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / ) ;
rank: 884
score: 99.42847377232142
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / double . MIN _ VALUE ) / double . MIN _ VALUE +
rank: 884
score: 99.40428331163194
patch: return 0 . $NUMBER$ * 0 * Erf . erf ( ( x - mean )
rank: 884
score: 99.34500200320512
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( . x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; else
rank: 884
score: 99.24855041503906
patch: return 0 . $NUMBER$ * Erf . erf [ ( x - mean ,
rank: 884
score: 99.211181640625
patch: return 0 . 0 * ( 1 . 0 + Erf . erf [
rank: 885
score: 99.49886322021484
patch: return 0 . 0 * ( 1 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 885
score: 99.45219152113971
patch: return Erf . erf ( ( x - mean ) / 0 . 0 )
rank: 885
score: 99.42845323350694
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( 0 . 0 + Erf . erf ( 0 . 0 + Erf . erf ( 0 /
rank: 885
score: 99.41400824652777
patch: x = 0 . 0 * Erf . erf ( ( x - mean ) /
rank: 885
score: 99.40416124131944
patch: return ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) +
rank: 885
score: 99.34482672275641
patch: return $STRING$ . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 885
score: 99.24815368652344
patch: 0 . $NUMBER$ * Erf . erf ( ( x - mean ) /
rank: 885
score: 99.21091871995192
patch: return 0 . 0 + ( 1 . 0 + Erf
rank: 886
score: 99.42829725477431
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 1 . 0 / Erf . 0 + Erf . 0 + Erf . 1 /
rank: 886
score: 99.41391170726104
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( x / mean ) /
rank: 886
score: 99.40409342447917
patch: return 0 . $NUMBER$ + ( 1 . 0 + ( 1 . 0 ) ) ;
rank: 886
score: 99.3447265625
patch: return 0 . 0 * ( x . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 886
score: 99.24778645833334
patch: return 0 < ( Erf . erf ( ( x - mean )
rank: 887
score: 99.49847412109375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . $NUMBER$ ) / Erf . erf (
rank: 887
score: 99.45124897203948
patch: try { return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) *
rank: 887
score: 99.41314019097223
patch: return ( 1 . $NUMBER$ * Erf . erf ( ( double ) mean ) /
rank: 887
score: 99.40394422743056
patch: return 0 . 0 * 1 + Erf . erf ( ( x - mean )
rank: 887
score: 99.38034237132354
patch: return Double . $NUMBER$ * Erf . erf ( ( x - mean ) /
rank: 887
score: 99.344482421875
patch: return 0 . null * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 887
score: 99.24766540527344
patch: return 0 . $NUMBER$ * ( 1 . ( ( x - mean ) /
rank: 887
score: 99.21012878417969
patch: return 0 . 0 * ( 1 . contains ( x - mean ) /
rank: 888
score: 99.42718505859375
patch: return ( 0 . $NUMBER$ + Erf . erf ( ( x - mean ) +
rank: 888
score: 99.40393784466912
patch: return 0 . 0 + Erf . erf ( ( x - mean ) >
rank: 888
score: 99.3797607421875
patch: return 0 . $NUMBER$ * Erf ( x - mean ) /
rank: 888
score: 99.34430252878289
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( this . erf ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ?
rank: 888
score: 99.24757385253906
patch: return ( 0 . 0 + Erf . erf ( x - mean )
rank: 889
score: 99.42699477251838
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 / $NUMBER$ . 0
rank: 889
score: 99.41144476996527
patch: return 0 . $NUMBER$ ] * Erf . erf ( ( x - mean ) /
rank: 889
score: 99.40280490451389
patch: return 0 . $NUMBER$ * ( x - mean ) / ( 1 . $NUMBER$ ) ;
rank: 889
score: 99.37917193244485
patch: return 0 . $NUMBER$ * ( x - Erf ( x - mean ) /
rank: 889
score: 99.34419973273026
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ,
rank: 889
score: 99.2096435546875
patch: return 0 . $NUMBER$ * ( 1 . 0 + standard CaMeL Deviation *
rank: 890
score: 99.49800872802734
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / Erf . erf ( this . mean ) /
rank: 890
score: 99.37808430989584
patch: return 0 . $NUMBER$ * ( x - ( x - mean ) /
rank: 890
score: 99.34401292067308
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( long - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 890
score: 99.24685668945312
patch: return 0 . 0 + Erf . ( ( x - mean ) /
rank: 890
score: 99.2093505859375
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + 1 . 0 ) ;
rank: 891
score: 99.49797712053571
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ,
rank: 891
score: 99.44794022409539
patch: return 0 . $NUMBER$ * ( ( Erf . erf ( ( x - mean ) ;
rank: 891
score: 99.42639878216912
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / Erf . erf ( ( x - mean ) ) /
rank: 891
score: 99.34387520032051
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( final - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 891
score: 99.24674224853516
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean |
rank: 892
score: 99.49776458740234
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . get ( ( x - mean ) / 1 . 0 ) / Erf . erf (
rank: 892
score: 99.44783742804276
patch: return ( Erf . erf ( ( x - mean ) / 0 . 0 ) /
rank: 892
score: 99.42579561121323
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 ) ;
rank: 892
score: 99.37664435891544
patch: return 0 . $NUMBER$ * 0 . 0 * ( ( x - mean ) /
rank: 892
score: 99.34322959498355
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 892
score: 99.24671936035156
patch: return 0 . 0 + Erf . erf ( ( x < mean )
rank: 892
score: 99.20721842447917
patch: return 0 . $NUMBER$ * ( 1 . 0 + x - x )
rank: 893
score: 99.49768829345703
patch: return 0 . $NUMBER$ * this . 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 +
rank: 893
score: 99.44731588924633
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - erf ) /
rank: 893
score: 99.40660903033088
patch: return 0 . $NUMBER$ * Erf . erf ( ( double ) mean ) /
rank: 893
score: 99.40060604319854
patch: return 0 . $NUMBER$ + Erf . erf ( ( x - mean ) >
rank: 893
score: 99.34305513822116
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( short - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 893
score: 99.24588775634766
patch: return cumulative CaMeL Probability ( ( x - mean ( ( x - mean (
rank: 893
score: 99.20705003004808
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 .
rank: 894
score: 99.49745396205357
patch: return 0 . $NUMBER$ * ( 1 . 0 + double ) / ( 1 . 0 + double )
rank: 894
score: 99.42478314568015
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( int ) Erf . erf ( ) / $NUMBER$ . 0 / $NUMBER$ . 0 /
rank: 894
score: 99.40555826822917
patch: x = 1 . $NUMBER$ * Erf . erf ( ( x - mean ) /
rank: 894
score: 99.37571088005515
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - $NUMBER$ ) /
rank: 894
score: 99.34298001802884
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x >= mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 894
score: 99.24524688720703
patch: return 0 . 0 + Erf . erf ( ( x - mean -
rank: 894
score: 99.20655168805804
patch: return 0 <= Erf . erf ( ( x - mean )
rank: 895
score: 99.4971694946289
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 + Erf . erf ( )
rank: 895
score: 99.42474006204044
patch: return 0 . $NUMBER$ . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 ) ;
rank: 895
score: 99.37504308363971
patch: return 0 . $NUMBER$ * Erf . erf ( ( float - mean ) /
rank: 895
score: 99.3425793770032
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . SIZE ) ) ) ) ;
rank: 895
score: 99.20626627604166
patch: return 0 . $NUMBER$ * ( 1 . 0 + x - ( 1
rank: 896
score: 99.49688720703125
patch: return ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / mean (
rank: 896
score: 99.40523274739583
patch: return 0 . $NUMBER$ * ( ( x - mean ) / 0 . 1 ) /
rank: 896
score: 99.3749138327206
patch: return 0 . $NUMBER$ * 1 . 0 + ( ( x - mean ) /
rank: 896
score: 99.34249074835526
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( 1 . 0 ) ) ) ;
rank: 896
score: 99.24478149414062
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf (
rank: 896
score: 99.20602416992188
patch: return - 0 . $NUMBER$ * ( 1 . 0 + x - mean )
rank: 897
score: 99.49670991443452
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / mean ( double )
rank: 897
score: 99.42295619419643
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - this . Erf . erf ( ( x - this . mean ) ) /
rank: 897
score: 99.3748309795673
patch: return 0 . $NUMBER$ * ( x - mean ) / /
rank: 897
score: 99.34244165665064
patch: return 0 . $NUMBER$ + ( 1 . 0 * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 897
score: 99.24465942382812
patch: return ( ( double ) ( 1 . 0 * Erf . erf (
rank: 897
score: 99.20594075520833
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( 1 == 0
rank: 898
score: 99.49632263183594
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf $NUMBER$ . 0 + Erf . erf (
rank: 898
score: 99.42201741536458
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( 0 . 0 + Erf . erf ( 0 . 0 + Erf . erf ( 1 /
rank: 898
score: 99.373291015625
patch: return 0 . 0 * Erf . $NUMBER$ * ( x - mean ) /
rank: 898
score: 99.34239783653847
patch: return 0 . $NUMBER$ / ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 898
score: 99.24453938802084
patch: return 0 . $NUMBER$ * ( ( 1 . ( x - mean )
rank: 898
score: 99.20442962646484
patch: return 0 . $NUMBER$ + ( 1 . 0 + ( 1 == Erf
rank: 899
score: 99.42151557074652
patch: return ( 0 . $NUMBER$ * Erf . erf ( ( x - mean ) *
rank: 899
score: 99.40276740579044
patch: return 0 . $NUMBER$ * 1 . $NUMBER$ * ( ( x - mean ) ;
rank: 899
score: 99.39043112362133
patch: cumulative CaMeL Probability ( Erf . erf ( ( x - mean ) / (
rank: 899
score: 99.37227630615234
patch: return 0 . 0 * 1 . 0 * ( x - mean ) /
rank: 899
score: 99.34237905649039
patch: return 1 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 899
score: 99.2042236328125
patch: return ( 1 . 0 + 1 . 0 + ( 1 == Erf
rank: 900
score: 99.49603881835938
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . get ( x ) / /
rank: 900
score: 99.44387335526316
patch: return ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) ) ;
rank: 900
score: 99.42092556423611
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 1 . 0 / Erf . 0 / Erf . 0 + Erf . $NUMBER$ /
rank: 900
score: 99.4026740579044
patch: throw 0 . $NUMBER$ * Erf . erf ( ( x - mean ) ;
rank: 900
score: 99.39009363511029
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) ]
rank: 900
score: 99.34222733347039
patch: return 0 . ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 900
score: 99.24331868489584
patch: return 0 . 0 * ( 1 . - x - mean ) ;
rank: 900
score: 99.2041015625
patch: return ( 1 . 0 + ( 1 . 0 ) / ( $NUMBER$
rank: 901
score: 99.495849609375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . get ( x ) /
rank: 901
score: 99.42009141710069
patch: return 0 . $NUMBER$ + Erf . erf ( ( x - mean ) / $NUMBER$
rank: 901
score: 99.38937557444854
patch: return 0 . 0 + Erf . erf ( ( x - mean ) !=
rank: 901
score: 99.37205505371094
patch: return 0 . $NUMBER$ * ( ( x - mean ) / x ) /
rank: 901
score: 99.34221629607372
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf / ( standard CaMeL Deviation * Math . sqrt ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) +
rank: 901
score: 99.24320983886719
patch: return 0 . 0 + ( 1 . 0 + Erf . erf $NUMBER$
rank: 901
score: 99.2023193359375
patch: return 0 . $NUMBER$ * ( 1 . max + mean ) ) ;
rank: 902
score: 99.49579620361328
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / erf ) / Erf . erf ( ) /
rank: 902
score: 99.41923692491319
patch: return ( 0 . 0 + Erf . get ( ( x - mean ) /
rank: 902
score: 99.40012494255515
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - x ) /
rank: 902
score: 99.34219520970395
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 902
score: 99.24312591552734
patch: return 0 . $NUMBER$ * ( 1 . 0 + x - mean 1 .
rank: 902
score: 99.20184733072917
patch: return 0 . $NUMBER$ * ( 1 . get 1 x - mean )
rank: 903
score: 99.44278971354167
patch: return ( 1 . 0 + Erf . erf ( ( int ) mean ) /
rank: 903
score: 99.4189094094669
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - 0 . 0 + Erf . erf ( ( x - mean ) /
rank: 903
score: 99.38825539981617
patch: return 0 . $NUMBER$ + Erf . erf ( ( x - mean ) !=
rank: 903
score: 99.36894226074219
patch: return 0 . $NUMBER$ + 1 . 0 * ( x - mean ) /
rank: 903
score: 99.34194946289062
patch: return 0 . $NUMBER$ * 0 . 0 * ( x - mean ) ;
rank: 903
score: 99.24232177734375
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$
rank: 904
score: 99.39933507582721
patch: return 0 . 1 * ( 1 . 0 + ( x - mean ) /
rank: 904
score: 99.36891174316406
patch: return 0 . 0 * 1 . 0 + ( x - mean ) /
rank: 904
score: 99.34159851074219
patch: return 0 . $NUMBER$ * 0 . $NUMBER$ * ( x - mean ) ;
rank: 904
score: 99.24188995361328
patch: return 0 . 0 * Erf . erf ( ( x - mean -
rank: 904
score: 99.20140838623047
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . 0 + $NUMBER$
rank: 905
score: 99.49490517064145
patch: return 0 . 0 * Erf . erf ( ( x - mean ) / mean )
rank: 905
score: 99.44227510340073
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - 0 ) /
rank: 905
score: 99.39912414550781
patch: return 0 . $NUMBER$ * 0 . $NUMBER$ + ( x - mean ) /
rank: 905
score: 99.38700103759766
patch: return 0 . $NUMBER$ * ( x - mean ) / ( 1 . 0
rank: 905
score: 99.34144631410257
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - $NUMBER$ ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 905
score: 99.24182891845703
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - min )
rank: 905
score: 99.19911295572916
patch: return 0 . 0 * ( 1 . contains ( x - mean )
rank: 906
score: 99.49459075927734
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / Erf . get (
rank: 906
score: 99.41693638392857
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / double . MIN _ VALUE ) / double . MAX _ VALUE +
rank: 906
score: 99.39809283088235
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( x - mean ) -
rank: 906
score: 99.38562774658203
patch: return 0 . $NUMBER$ * ( standard CaMeL Deviation * ( x - mean )
rank: 906
score: 99.34114797491776
patch: return 0 . ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; else
rank: 906
score: 99.24104817708333
patch: return 0 * ( Erf . erf ( ( x - mean )
rank: 906
score: 99.19891357421875
patch: return ( 0 . 0 + 1 . 0 + ( x - mean )
rank: 907
score: 99.49397277832031
patch: return 0 . $NUMBER$ * 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / /
rank: 907
score: 99.41659725413604
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) / $NUMBER$ . 0 / $NUMBER$ . 0
rank: 907
score: 99.36842974494485
patch: return 0 . $NUMBER$ * ( ( x - mean ) / 1 . 0 )
rank: 907
score: 99.34015049078526
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . max ) ) ) ) ;
rank: 907
score: 99.24045034555289
patch: return ( 1 . 0 + ( ( x - mean )
rank: 907
score: 99.19869791666666
patch: return ( double ) 0 . $NUMBER$ * ( 1 == 1 . 0
rank: 908
score: 99.493896484375
patch: return 0 . $NUMBER$ * ( 1 . 0 / ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 908
score: 99.43771701388889
patch: return Erf . erf ( Erf . erf ( ( x - mean ) ;
rank: 908
score: 99.414892578125
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 1 . 0 / Erf . 0 + Erf . 0 + Erf . $NUMBER$
rank: 908
score: 99.39666389016544
patch: return 0 . $NUMBER$ - Erf . erf ( ( x - mean ) ;
rank: 908
score: 99.38490923713235
patch: return 0 * ( Erf . erf ( ( x - mean ) / (
rank: 908
score: 99.36758243336396
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf / mean ) /
rank: 908
score: 99.33995297080592
patch: return 0 . 1 * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 908
score: 99.23967633928571
patch: return 0 . $NUMBER$ * ( 1 != ( x - mean )
rank: 908
score: 99.19805501302083
patch: return 0 . $NUMBER$ + ( 1 . 0 + 1 . 0 )
rank: 909
score: 99.4930191040039
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean ) / $NUMBER$ . 0 + Erf . erf ( )
rank: 909
score: 99.43577745225694
patch: return ( 1 . $NUMBER$ + Erf . erf ( ( int ) mean ) /
rank: 909
score: 99.41484375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - 0 . 0 ) / Erf . erf ( ( x - mean ) /
rank: 909
score: 99.3841552734375
patch: return 0 . $NUMBER$ * ( 1 . 0 ) + ( standard CaMeL Deviation *
rank: 909
score: 99.36709415211396
patch: return 0 . 0 * ( erf . erf ( ( x - mean ) /
rank: 909
score: 99.33990635016026
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf $NUMBER$ ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; }
rank: 909
score: 99.23928397042411
patch: return 0 . 0 * ( 1 < ( x - mean )
rank: 909
score: 99.19749348958334
patch: return ( ( 1 . 0 + ( x - mean ) / (
rank: 910
score: 99.49293518066406
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 / $NUMBER$ . 0 ) / /
rank: 910
score: 99.43532986111111
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) & 0
rank: 910
score: 99.36679256663604
patch: return 0 . 0 + ( x . erf ( ( x - mean ) /
rank: 910
score: 99.33963216145834
patch: return 0 . $NUMBER$ * ( x . 0 + mean ) ; }
rank: 910
score: 99.23814290364584
patch: return 0 . $NUMBER$ * ( 1 < ( x - mean ) /
rank: 910
score: 99.1970458984375
patch: return 0 . $NUMBER$ * ( 1 . get - mean ) / (
rank: 911
score: 99.492919921875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( x ) / / /
rank: 911
score: 99.41387580422794
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 / $NUMBER$ . 0 ) / $NUMBER$ . 0
rank: 911
score: 99.3824462890625
patch: return 0 . $NUMBER$ * ( 1 . 0 ] + 1 . 0 ) ;
rank: 911
score: 99.36665613511029
patch: return 0 . 0 * Erf . 0 + ( x - mean ) /
rank: 911
score: 99.33958082932692
patch: return 0 . $NUMBER$ * ( 1 . false + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 911
score: 99.23749186197917
patch: return 0 , ( Erf . erf ( ( x - mean )
rank: 911
score: 99.19697265625
patch: return 0 . 0 + ( 1 . 0 + ( 1 == 1
rank: 912
score: 99.49279203869048
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( double ) mean /
rank: 912
score: 99.43488226996527
patch: else return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) /
rank: 912
score: 99.41342342601104
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / $NUMBER$ . 0 + Erf . erf ( ) / $NUMBER$ . 0 ) /
rank: 912
score: 99.39473230698529
patch: return 0 . $NUMBER$ ? ( 1 . 0 + ( x - mean ) /
rank: 912
score: 99.36628992417279
patch: return Double . 0 + Erf . erf ( ( x - mean ) /
rank: 912
score: 99.33950805664062
patch: return 0 . $NUMBER$ * 1 . $NUMBER$ * ( x - mean ) ;
rank: 912
score: 99.23737444196429
patch: return - ( Erf . erf ( ( x - mean )
rank: 913
score: 99.49259185791016
patch: return 0 . 0 * ( 1 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) /
rank: 913
score: 99.41266547309027
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 1 . 0 / Erf . 0 + Erf . 0 + Erf . 1 ,
rank: 913
score: 99.39451688878677
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . mean ( ) /
rank: 913
score: 99.3810043334961
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( 1 . 0 )
rank: 913
score: 99.33941971628289
patch: return 0 . 0 + ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 913
score: 99.23468017578125
patch: return 0 . 0 + ( ( x - mean )
rank: 913
score: 99.19573567708333
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 == x )
rank: 914
score: 99.49140625
patch: return ( 1 . 0 + Erf . erf ( ( x - mean ) / mean (
rank: 914
score: 99.37964585248162
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x <= mean )
rank: 914
score: 99.36480305989583
patch: int 0 = Erf . erf ( ( x - mean ) /
rank: 914
score: 99.33932976973684
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( standard CaMeL Deviation * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) . cumulative CaMeL Probability
rank: 914
score: 99.233984375
patch: return 0 . $NUMBER$ * ( Erf , ( x - mean )
rank: 914
score: 99.195654296875
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . $NUMBER$ )
rank: 915
score: 99.43393841911765
patch: return 1 . $NUMBER$ + Erf . erf ( ( x - mean ) ;
rank: 915
score: 99.41248236762152
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 1 . 0 / Erf . 0 + Erf . 0 + Erf . 0 )
rank: 915
score: 99.3929084329044
patch: return 0 . $NUMBER$ * 0 . $NUMBER$ * ( ( x - mean ) ;
rank: 915
score: 99.37678797104779
patch: return 0 . $NUMBER$ * ( Erf . erf ( ( x > mean )
rank: 915
score: 99.3642219094669
patch: return Double . abs ( Erf . erf ( ( x - mean ) /
rank: 915
score: 99.3392333984375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf / ( standard CaMeL Deviation * Math . sqrt ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) &&
rank: 915
score: 99.2335205078125
patch: return ( ( + Erf . erf ( ( x - mean )
rank: 915
score: 99.1947265625
patch: return 0 . $NUMBER$ * ( 1 . 0 + x - x -
rank: 916
score: 99.43389892578125
patch: return ( 1 . 0 + Erf . erf ( ( double ) mean ) /
rank: 916
score: 99.412060546875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / $NUMBER$ . 0 + Erf . erf ( ) / $NUMBER$ . 0 / . 0
rank: 916
score: 99.39286534926471
patch: return 0 . $NUMBER$ * ( 1 . 0 ? ( x - mean ) ;
rank: 916
score: 99.33918200041118
patch: return 0 . $NUMBER$ * 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; }
rank: 916
score: 99.23313802083334
patch: return 0 . $NUMBER$ * Erf . ( ( x - mean )
rank: 917
score: 99.41204474954044
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - 0 . 0 ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 / $NUMBER$
rank: 917
score: 99.39240579044117
patch: return 0 . $NUMBER$ / ( 1 . 0 + ( x - mean ) /
rank: 917
score: 99.36346076516544
patch: return 0 . $NUMBER$ * 0 . 0 + ( ( x - mean ) /
rank: 917
score: 99.33891858552632
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ||
rank: 917
score: 99.2311260516827
patch: return return 0 . $NUMBER$ * ( ( x - mean )
rank: 917
score: 99.193994140625
patch: return ( ( double ) 0 . 0 + ( 1 . 0 )
rank: 918
score: 99.41145368303572
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 1 . 0 / Erf . 0 / Erf . 0 + Erf . $NUMBER$
rank: 918
score: 99.3386981670673
patch: return 0 . 0 + ( 1 . 0 * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 918
score: 99.23038736979167
patch: return cumulative CaMeL Probability ( ( x . erf ( ) - mean )
rank: 918
score: 99.19381948617789
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf
rank: 919
score: 99.48115619860198
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / $NUMBER$ /
rank: 919
score: 99.39137178308823
patch: return 0 . $NUMBER$ * ( 1 . 0 ( ( x - mean ) ;
rank: 919
score: 99.36764761117789
patch: return 0 . $NUMBER$ * erf ( ( x - mean )
rank: 919
score: 99.36272430419922
patch: return 0 . $NUMBER$ * ( x . erf ( ) / mean ) /
rank: 919
score: 99.33821614583333
patch: return 0 . length * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 919
score: 99.22957356770833
patch: return 0 . $NUMBER$ * ( 1 . 0 + x - mean *
rank: 919
score: 99.19363606770834
patch: return 0 < Erf . erf ( ( x - mean ) /
rank: 920
score: 99.48113403320312
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / / *
rank: 920
score: 99.43242051866319
patch: return ( 1 . $NUMBER$ ? Erf . erf ( ( x - mean ) ;
rank: 920
score: 99.41046316964285
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / $NUMBER$ . 0 + Erf . erf ( ) / $NUMBER$ . 0 / $NUMBER$ )
rank: 920
score: 99.39064654181985
patch: return 0 . 0 * ( 1 . $NUMBER$ + ( x - mean ) /
rank: 920
score: 99.36359514508929
patch: return 0 . $NUMBER$ * 1 * ( x - mean ) /
rank: 920
score: 99.3625129250919
patch: return 0 . round ( Erf . erf ( ( x - mean ) /
rank: 920
score: 99.33817232572116
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( this . erf ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) +
rank: 920
score: 99.22831217447917
patch: return 0 . 0 * Erf . erf ( ( 1 . 0
rank: 921
score: 99.41021369485294
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 / $NUMBER$ . /
rank: 921
score: 99.39051011029412
patch: return 0 . $NUMBER$ | Erf . erf ( ( x - mean ) /
rank: 921
score: 99.36140711167279
patch: return 0 . $NUMBER$ * Erf . 1 * ( x - mean ) /
rank: 921
score: 99.36128234863281
patch: return 0 . 0 + Erf . erf ( x - mean ) ;
rank: 921
score: 99.33812224559294
patch: return $NUMBER$ . $NUMBER$ * ( 0 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 921
score: 99.19334309895834
patch: return ( 1 . 0 + ( 1 . 0 ) / ( 1
rank: 922
score: 99.48057861328125
patch: return 0 . 0 * ( 1 . 0 + ( x - mean ) / erf ) /
rank: 922
score: 99.40988420758929
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 / $NUMBER$ . 0 /
rank: 922
score: 99.36134440104166
patch: return 0 . $NUMBER$ * ( x - mean . erf ( ) /
rank: 922
score: 99.33798699629934
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation > Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 922
score: 99.22349446614584
patch: return cumulative CaMeL Probability ( 0 . 0 + ( x - mean )
rank: 923
score: 99.48057861328125
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / $NUMBER$ )
rank: 923
score: 99.40956025965073
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( 1 . 0 * Erf . 0 . 0 /
rank: 923
score: 99.3608039407169
patch: return 0 . * ( Erf . erf ( ( x - mean ) /
rank: 923
score: 99.35794771634616
patch: return erf . erf ( ( x - mean ) / (
rank: 923
score: 99.33788436498398
patch: return 0 . $NUMBER$ * ( 1 . 0 - Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 923
score: 99.22296612079327
patch: return 0 . 0 * ( ( ( x - mean )
rank: 923
score: 99.1931640625
patch: return 0 . $NUMBER$ * ( 1 . 0 + x - mean ,
rank: 924
score: 99.43092256433823
patch: return 0 . $NUMBER$ * Erf . erf ( ( int - mean ) *
rank: 924
score: 99.40954241071428
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 / $NUMBER$ . 0 +
rank: 924
score: 99.38773839613971
patch: return 0 . $NUMBER$ * Erf . erf ( ( Double - mean ) /
rank: 924
score: 99.35777282714844
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf (
rank: 924
score: 99.33767778445512
patch: return $NUMBER$ . 1 * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 924
score: 99.2204922762784
patch: return cumulative CaMeL Probability ( ( x - mean )
rank: 924
score: 99.18958333333333
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 > ( 1
rank: 925
score: 99.43021647135417
patch: return ( 1 . $NUMBER$ + Erf . erf ( ( double ) mean ) /
rank: 925
score: 99.33755011307566
patch: return 0 . ( 0 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 925
score: 99.21922200520834
patch: return ( ( / Erf . erf ( ( x - mean )
rank: 925
score: 99.1894287109375
patch: return 0 . $NUMBER$ * ( 1 . 0 + x - 1 )
rank: 926
score: 99.47708740234376
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ) / $NUMBER$ /
rank: 926
score: 99.43020290798611
patch: return ( 0 . 0 ? Erf . erf ( ( x - mean ) /
rank: 926
score: 99.40774875217014
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 1 . 0 / Erf . 0 + Erf . 0 + Erf . 0 *
rank: 926
score: 99.38709513346355
patch: return 0 . $NUMBER$ * ( x - mean ) /
rank: 926
score: 99.33748372395833
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean + ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 926
score: 99.1889404296875
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 & ( 1
rank: 927
score: 99.47633056640625
patch: return 0 . $NUMBER$ . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) /
rank: 927
score: 99.40767996651786
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / $NUMBER$ . 0 + Erf . erf ( ) / $NUMBER$ . 0 / $NUMBER$ +
rank: 927
score: 99.35340118408203
patch: return 0 . 0 * ( ( x - mean ) / erf ) /
rank: 927
score: 99.35260772705078
patch: return 0 . $NUMBER$ * Erf . erf ( ( Integer - mean )
rank: 927
score: 99.33741486378206
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - 1 ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 927
score: 99.21420724051339
patch: double ( Erf . erf ( ( x - mean ) /
rank: 927
score: 99.18832632211539
patch: return 0 . $NUMBER$ * ( 1 . max + mean )
rank: 928
score: 99.47624768708882
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( x - mean ) / $NUMBER$ /
rank: 928
score: 99.42948404947917
patch: return ( 1 . $NUMBER$ + Erf . get ( ( x - mean ) /
rank: 928
score: 99.40740288628473
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / $NUMBER$ . 0 + Erf . erf ( ) / $NUMBER$ . 0 . 0 ) ;
rank: 928
score: 99.35077311197917
patch: try { return 0 . $NUMBER$ * ( ( x - mean ) /
rank: 928
score: 99.3487777709961
patch: return 0 . $NUMBER$ * ( 1 . 0 ) + 1 . $NUMBER$ ;
rank: 928
score: 99.33739608373398
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . max ( $NUMBER$ . 0 ) ) ) ) ;
rank: 928
score: 99.21149553571429
patch: return 0 . 0 * Erf ( ( x - mean )
rank: 928
score: 99.188037109375
patch: return $NUMBER$ . $NUMBER$ * ( 1 . 0 + x - mean )
rank: 929
score: 99.406982421875
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( int ) Erf . erf ( ( int ) Erf . erf ( double ) /
rank: 929
score: 99.34906768798828
patch: return 0 . $NUMBER$ * Erf . erf ( $STRING$ + mean ) /
rank: 929
score: 99.33683268229167
patch: return cumulative CaMeL Probability ( ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 929
score: 99.1880126953125
patch: return 0 . $NUMBER$ * ( 1 . max ( x - mean )
rank: 930
score: 99.40495469835069
patch: return ( 0 . $NUMBER$ + Erf . erf ( ( x - mean ) ,
rank: 930
score: 99.34609985351562
patch: return 0 . $NUMBER$ * ( x - mean ) / 1 . 0 *
rank: 930
score: 99.33680725097656
patch: return ( 1 . $NUMBER$ * ( 1 . 0 + mean ) ) ;
rank: 930
score: 99.20897498497597
patch: return 0 . $NUMBER$ * ( ( x - mean ) *
rank: 930
score: 99.18675130208334
patch: return 0 . 0 * ( 1 . $NUMBER$ + x - mean )
rank: 931
score: 99.47343364514802
patch: return ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / /
rank: 931
score: 99.34306335449219
patch: return 0 . $NUMBER$ * Erf . erf ( ( x , mean )
rank: 931
score: 99.34123883928571
patch: return 0 . $NUMBER$ * ( ( x - mean ) / /
rank: 931
score: 99.33674059416118
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf . ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) )
rank: 931
score: 99.20853678385417
patch: return 0 . 0 * ( 1 . ( x - mean ) /
rank: 931
score: 99.18583170572917
patch: return 0 . $NUMBER$ * ( 1 . min ( x - mean )
rank: 932
score: 99.47304173519737
patch: if ( Erf . erf ( ( x - mean ) / mean ) / mean )
rank: 932
score: 99.42555067274306
patch: return ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) .
rank: 932
score: 99.40403917100694
patch: return ( 0 . $NUMBER$ + Erf . get ( ( x - mean ) /
rank: 932
score: 99.38457892922794
patch: return 0 . $NUMBER$ > Erf . erf ( ( x - mean ) /
rank: 932
score: 99.33662494860198
patch: return 0 . $NUMBER$ * 0 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; }
rank: 932
score: 99.20752892127403
patch: return 0 . $NUMBER$ + ( ( x - mean ) /
rank: 932
score: 99.18575032552083
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf != null
rank: 933
score: 99.47248920641448
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ) / /
rank: 933
score: 99.42526584201389
patch: return ( 1 . $NUMBER$ - Erf . erf ( ( x - mean ) /
rank: 933
score: 99.34075927734375
patch: return 0 . $NUMBER$ + Erf . erf ( x - mean ) ;
rank: 933
score: 99.33780924479167
patch: return 0 . $NUMBER$ * ( x - mean ) / erf ) /
rank: 933
score: 99.33658228165064
patch: return cumulative CaMeL Probability ( 1 . 0 * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; }
rank: 933
score: 99.18535970052083
patch: return 0 . $NUMBER$ * ( 1 . 0 + mean ) / (
rank: 934
score: 99.40382295496323
patch: return ( float ) ( Erf . erf ( ( x - mean ) /
rank: 934
score: 99.3831787109375
patch: return 0 . $NUMBER$ / Erf . erf ( ( x - mean ) ;
rank: 934
score: 99.34040832519531
patch: return 0 . $NUMBER$ * ( x - mean ) / 1 . $NUMBER$ ;
rank: 934
score: 99.33615034054488
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) *
rank: 934
score: 99.33551025390625
patch: return 0 . 0 * ( x - mean ) / 0 . 0 +
rank: 934
score: 99.2039794921875
patch: return 0 ( Erf . erf ( ( x - mean )
rank: 934
score: 99.18160807291666
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 == Erf
rank: 935
score: 99.47088623046875
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean
rank: 935
score: 99.40374755859375
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 1 . 0 / Erf . 0 + Erf . 0 + Erf . $NUMBER$ /
rank: 935
score: 99.38274069393383
patch: return $NUMBER$ . $NUMBER$ * Erf . erf ( ( x - mean ) ;
rank: 935
score: 99.33612530048077
patch: return 0 . SIZE * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 935
score: 99.20368303571429
patch: return 0 . 0 * ( 1 , ( x - mean )
rank: 935
score: 99.18157087053571
patch: return 0 . $NUMBER$ + ( 1 . 0 + 1 . 0
rank: 936
score: 99.4705874794408
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( x - mean ) / mean )
rank: 936
score: 99.40348985460069
patch: return 0 . $NUMBER$ * ( double ) ( erf ( ( x - mean ) /
rank: 936
score: 99.33993966238839
patch: return 0 . $NUMBER$ * ( ( x - mean ) ) ;
rank: 936
score: 99.33584359975961
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) +
rank: 936
score: 99.17896379743304
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . $NUMBER$
rank: 937
score: 99.40196010044643
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) / $NUMBER$ . 0 / $NUMBER$ . 0 /
rank: 937
score: 99.38141228170956
patch: return 0 . $NUMBER$ << Erf . erf ( ( x - mean ) /
rank: 937
score: 99.33647155761719
patch: return 0 . 0 + Erf . erf ( ( x - $NUMBER$ )
rank: 937
score: 99.33578725961539
patch: = 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 937
score: 99.17776053292411
patch: return 0 . $NUMBER$ * ( 1 . min + mean ) ;
rank: 938
score: 99.42351616753473
patch: return ( 1 . 0 , Erf . erf ( ( x - mean ) /
rank: 938
score: 99.40180121527777
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 + Erf . erf ( ( x - mean )
rank: 938
score: 99.33558067908653
patch: return 0 . $NUMBER$ * ( 1 . true + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 938
score: 99.3310775756836
patch: return 0 . $NUMBER$ + 1 . 0 + ( x - mean ) /
rank: 938
score: 99.1770770733173
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 /
rank: 939
score: 99.4669189453125
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf ) / 0 . 0 *
rank: 939
score: 99.40149603949652
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 1 . 0 / Erf . 0 / Erf . 0 + Erf . 0 )
rank: 939
score: 99.38064395680146
patch: throw 0 . $NUMBER$ * ( 1 . 0 + ( x - mean ) /
rank: 939
score: 99.33548134251645
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; }
rank: 939
score: 99.33403015136719
patch: return 0 . $NUMBER$ * ( 0 . 0 + ( x - mean )
rank: 939
score: 99.3302734375
patch: return 0 . $NUMBER$ * ( ( x - mean ) / / /
rank: 939
score: 99.19584437779018
patch: return ( * Erf . erf ( ( x - mean )
rank: 939
score: 99.17652239118304
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf )
rank: 940
score: 99.46337890625
patch: return 0 . $NUMBER$ / Erf . erf ( ( x - mean ) / mean )
rank: 940
score: 99.42207845052083
patch: return ( 0 . $NUMBER$ ? Erf . erf ( ( x - mean ) /
rank: 940
score: 99.40123155381944
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / $NUMBER$ . 0 + Erf . erf ( ) / $NUMBER$ . 0 / $NUMBER$ ) ;
rank: 940
score: 99.33524362664474
patch: return 0 . ( 0 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; else
rank: 940
score: 99.33302307128906
patch: return 0 . $NUMBER$ + Erf . erf ( ( x - $NUMBER$ )
rank: 940
score: 99.3298568725586
patch: return 0 . 0 + 1 . 0 * ( x - mean ) /
rank: 940
score: 99.19490559895833
patch: return 0 . $NUMBER$ * ( x - mean ) ;
rank: 940
score: 99.17214529854911
patch: return ( 0 . $NUMBER$ * ( x - mean ) / (
rank: 941
score: 99.42050509982639
patch: return ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) ,
rank: 941
score: 99.39780002170139
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( 0 . 0 + Erf . erf ( 0 . 0 + Erf . erf ( 0 +
rank: 941
score: 99.37754603794643
patch: return 0 . $NUMBER$ * erf ( ( x - mean ) /
rank: 941
score: 99.33523637820512
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) )
rank: 941
score: 99.33299967447917
patch: return 0 . $NUMBER$ * erf ( ( x - mean ) / (
rank: 941
score: 99.17143110795455
patch: return 0 . $NUMBER$ * Erf . erf (
rank: 942
score: 99.3968505859375
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 1 . 0 / Erf . 0 / Erf . 0 + Erf . 1 ,
rank: 942
score: 99.37747012867646
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + ( x - mean ) ;
rank: 942
score: 99.33521133814102
patch: return ( 0 . 0 * 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 942
score: 99.33170863560268
patch: return 0 . $NUMBER$ * 1 + ( x - mean ) /
rank: 942
score: 99.32880401611328
patch: return 0 . $NUMBER$ * ( 1 . 0 + ( x - mean (
rank: 942
score: 99.17113318810097
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 *
rank: 943
score: 99.46027575041118
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf ) / $NUMBER$ . $NUMBER$ *
rank: 943
score: 99.39490792410714
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 / Erf . 0 ) / $NUMBER$ . 0
rank: 943
score: 99.37726907169117
patch: return 0 . $NUMBER$ * Erf . erf ( ( x & mean ) /
rank: 943
score: 99.33486703725961
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . null ) ) ) ) ;
rank: 943
score: 99.33137512207031
patch: return 0 * Erf . erf ( ( x - mean ) / (
rank: 943
score: 99.32789713541666
patch: return 0 . $NUMBER$ * ( ( x - mean ) / erf )
rank: 943
score: 99.18368765024039
patch: return ( x . erf ( ( x - mean ) /
rank: 943
score: 99.16641939603366
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 ,
rank: 944
score: 99.45803993626645
patch: return 0 . $NUMBER$ + ( 1 . 0 + Erf . erf ( ) / /
rank: 944
score: 99.4162238625919
patch: return 1 . 0 * Erf . erf ( ( x - mean ) *
rank: 944
score: 99.39485677083333
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 ;
rank: 944
score: 99.37538146972656
patch: return 0 . $NUMBER$ * ( Erf / ( x - mean ) /
rank: 944
score: 99.33482947716347
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation + Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 944
score: 99.33098602294922
patch: return 0 . $NUMBER$ * ( this . erf ( ( x - mean )
rank: 944
score: 99.32686614990234
patch: return 0 . $NUMBER$ + 0 . 0 * ( x - mean ) /
rank: 944
score: 99.1795184795673
patch: return return 0 . 0 * ( ( x - mean )
rank: 944
score: 99.1643535907452
patch: return ( 0 . $NUMBER$ * ( ( x - mean )
rank: 945
score: 99.41600126378677
patch: return 0 . 0 * Erf . erf ( ( x - mean ) &
rank: 945
score: 99.39468722873264
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 1 . 0 / Erf . 0 / Erf . 0 + Erf . 0 ;
rank: 945
score: 99.33432867588141
patch: return Math . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 945
score: 99.33055114746094
patch: return 0 . $NUMBER$ * Erf . erf ( ( value - mean )
rank: 945
score: 99.17305210658482
patch: return ( 1 . 0 + ( ( x - mean ) /
rank: 945
score: 99.16274789663461
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 >
rank: 946
score: 99.45615748355263
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / *
rank: 946
score: 99.39421251085069
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / double . MIN _ VALUE ) / double . MIN _ VALUE ) /
rank: 946
score: 99.33415965544872
patch: return Long . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 946
score: 99.32560729980469
patch: return 0 . 0 * ( ( x - mean ) / mean ) /
rank: 946
score: 99.17225060096153
patch: return 0 cumulative CaMeL Probability ( ( x - mean ) /
rank: 946
score: 99.16254131610577
patch: return cumulative CaMeL Probability ( ( x - mean ) / (
rank: 947
score: 99.45608038651316
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf ) / 0 . $NUMBER$ *
rank: 947
score: 99.41001263786765
patch: return 0 . $NUMBER$ * Erf . erf ( ( long - mean ) /
rank: 947
score: 99.39369419642857
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / $NUMBER$ . 0 + Erf . erf ( ) / $NUMBER$ . 0 . 0 )
rank: 947
score: 99.36416625976562
patch: return 0 . 0 * 1 . $NUMBER$ * ( x - mean ) /
rank: 947
score: 99.33407827524039
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( this . erf ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; }
rank: 947
score: 99.32559204101562
patch: return 0 . $NUMBER$ * ( x - 0 . 0 + mean ) /
rank: 947
score: 99.17161865234375
patch: return 0 . $NUMBER$ * ( 1 . MAX
rank: 947
score: 99.16085111177884
patch: return ( double ) 0 . $NUMBER$ * ( 1 == 1
rank: 948
score: 99.45394736842105
patch: return 0 . $NUMBER$ / ( 1 . 0 + Erf . erf ( ) / /
rank: 948
score: 99.39321560329861
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 1 . 0 / Erf . 0 / Erf . 0 + Erf . 1 *
rank: 948
score: 99.33406575520833
patch: return 0 . $NUMBER$ * ( $NUMBER$ . 0 * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 948
score: 99.17131696428571
patch: return ( cumulative CaMeL Probability . erf ( ( x - mean )
rank: 949
score: 99.45185004340277
patch: return 0 . $NUMBER$ / ( 1 . 0 + Erf . erf ( ) /
rank: 949
score: 99.40943818933823
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - min ) /
rank: 949
score: 99.36292266845703
patch: return 0 . $NUMBER$ * ( 1 . 0 + mean - mean ) ;
rank: 949
score: 99.33340219350961
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( float - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 949
score: 99.32428741455078
patch: return 0 . $NUMBER$ * ( x - mean . erf ( ) ) /
rank: 949
score: 99.31287493024554
patch: return 0 . $NUMBER$ * 1 * ( x - mean ) ;
rank: 949
score: 99.16864013671875
patch: return ( double ) 0 . $NUMBER$ * ( x - mean )
rank: 950
score: 99.45184685202206
patch: double 0 = Erf . erf ( ( x - mean ) / mean )
rank: 950
score: 99.39128766741071
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 + Erf . double CaMeL Value ( ) )
rank: 950
score: 99.36126302083333
patch: return ( 1 . $NUMBER$ * ( 1 . 0 + mean ) /
rank: 950
score: 99.33329577323718
patch: return cumulative CaMeL Probability ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; }
rank: 950
score: 99.15055629185268
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 ) ;
rank: 951
score: 99.45094058388158
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf ) / $NUMBER$ . 0 *
rank: 951
score: 99.39068777901785
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( int ) 0 . 0 + Erf . erf ( ( x - mean ) ) /
rank: 951
score: 99.33305163261218
patch: return 0 . 0 + ( 0 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 951
score: 99.32319641113281
patch: return 0 . 0 * 0 . 0 + ( x - mean ) /
rank: 951
score: 99.14869035993304
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf ,
rank: 952
score: 99.39008246527777
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / $NUMBER$ . 0 + Erf . erf ( ) / $NUMBER$ . 0 ) . 0 ;
rank: 952
score: 99.3568603515625
patch: return ( 0 . $NUMBER$ * ( 1 . 0 + mean ) /
rank: 952
score: 99.33294998972039
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . ) ) ) ) ;
rank: 952
score: 99.32290649414062
patch: return 0 . $NUMBER$ * ( x - mean ) / $NUMBER$ . 0 +
rank: 952
score: 99.30132184709821
patch: return 0 . $NUMBER$ * 1 + ( x - mean ) ;
rank: 952
score: 99.16086989182692
patch: return 0 . $NUMBER$ * ( x - mean ) / (
rank: 952
score: 99.14763934795673
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf
rank: 953
score: 99.3328387920673
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf . ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 953
score: 99.31941223144531
patch: return 0 . 0 * 0 . 0 * ( x - mean ) /
rank: 953
score: 99.30011393229167
patch: return 0 . $NUMBER$ + erf ( ( x - mean ) / (
rank: 953
score: 99.15799386160714
patch: return this . Erf . erf ( ( x - mean )
rank: 953
score: 99.1471416766827
patch: if ( Erf . erf ( ( x - mean )
rank: 954
score: 99.40415326286765
patch: return 0 . $NUMBER$ * ( x . erf ( ( x - mean ) ;
rank: 954
score: 99.38945456112133
patch: return 0 . $NUMBER$ * ( 1 . 0 + double ) 0 . 0 ;
rank: 954
score: 99.3555679321289
patch: return 0 . 0 * 0 . $NUMBER$ * ( x - mean ) /
rank: 954
score: 99.3327572471217
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( int - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 954
score: 99.31925964355469
patch: return 0 . $NUMBER$ * ( ( x / mean ) / erf ) /
rank: 954
score: 99.29615885416666
patch: return 0 . $NUMBER$ * erf . erf ( ( x - mean )
rank: 954
score: 99.15718900240384
patch: return ( Erf . erf ( ( x - mean )
rank: 954
score: 99.14548165457589
patch: return 0 . $NUMBER$ * ( 1 . get . 0 ) ;
rank: 955
score: 99.40162568933823
patch: return Erf . erf ( ( x - mean ) / 1 . 0 )
rank: 955
score: 99.38918050130208
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 1 . 0 / Erf . 0 / Erf . 0 + Erf . $NUMBER$ *
rank: 955
score: 99.3526840209961
patch: return ( 1 * Erf . erf ( ( x - mean ) /
rank: 955
score: 99.33250325520834
patch: return 0 . $NUMBER$ * ( 1 . 0 + mean ) ) ;
rank: 955
score: 99.29569498697917
patch: return 0 . $NUMBER$ * 1 + ( x - mean ) / (
rank: 955
score: 99.15657865084134
patch: return - 0 . 0 * ( ( x - mean )
rank: 956
score: 99.38902762276786
patch: return 0 . $NUMBER$ * Erf . erf ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 / $NUMBER$ . 0 ) /
rank: 956
score: 99.35263296274039
patch: return 0 . 0 * ( ( x - mean ) ;
rank: 956
score: 99.33214393028847
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 1 ) ) ) ) ;
rank: 956
score: 99.31525421142578
patch: return 0 . $NUMBER$ * ( x . erf ( ) - mean ) /
rank: 956
score: 99.29336751302084
patch: return 0 . 0 + erf ( ( x - mean ) / (
rank: 956
score: 99.15542367788461
patch: return Erf . erf ( ( x - mean ) /
rank: 956
score: 99.14202008928571
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 . length
rank: 957
score: 99.39971564797794
patch: if 0 . $NUMBER$ + Erf . erf ( ( x - mean ) /
rank: 957
score: 99.38776991102431
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) / 1 . 0 / Erf . 0 + Erf . 0 + Erf . 0 ;
rank: 957
score: 99.35223795572917
patch: return 0 * Erf . erf ( ( x - mean ) ;
rank: 957
score: 99.33131134815706
patch: return 0 . $NUMBER$ * ( Integer . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 957
score: 99.31503295898438
patch: return 0 . $NUMBER$ * ( 1 . 0 + double - mean ) /
rank: 957
score: 99.2931377704327
patch: return 0 . $NUMBER$ + erf ( ( x - mean )
rank: 957
score: 99.15423114483173
patch: return cumulative CaMeL Probability ( ( ( x - mean ) /
rank: 957
score: 99.13521634615384
patch: return 0 . 0 + ( 1 . 0 + ( 1
rank: 958
score: 99.43773735894098
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( double )
rank: 958
score: 99.39950741038604
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) &&
rank: 958
score: 99.387548828125
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / 1 . 0 / $NUMBER$ . 0 /
rank: 958
score: 99.31003243582589
patch: return 0 . $NUMBER$ * ( x - mean - mean ) /
rank: 958
score: 99.29261997767857
patch: return 0 . $NUMBER$ + erf ( ( x - mean ) /
rank: 958
score: 99.15284142127403
patch: return return 0 . 0 + ( ( x - mean )
rank: 958
score: 99.13321627103366
patch: return ( 0 . $NUMBER$ * ( x - mean ) )
rank: 959
score: 99.3508071899414
patch: return ( x - mean ) . erf ( ( x - mean ) /
rank: 959
score: 99.3306164863782
patch: return 0 . $NUMBER$ = ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 959
score: 99.30888148716518
patch: return 0 . $NUMBER$ * ( x - mean ) / / /
rank: 959
score: 99.29234822591145
patch: return 0 . $NUMBER$ * ( 1 . 0 ) /
rank: 959
score: 99.15206298828124
patch: return 0 . 0 + ( 1 . 0
rank: 959
score: 99.12716909555289
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 >=
rank: 960
score: 99.43183729383681
patch: double 0 = Erf . erf ( ( x - mean ) / mean ) ;
rank: 960
score: 99.39876062729779
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) )
rank: 960
score: 99.38687918526786
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - this . Erf . erf ( ( x - this . Erf . (
rank: 960
score: 99.3489990234375
patch: return 0 . $NUMBER$ * Erf . ( ( x - mean ) ;
rank: 960
score: 99.33030348557692
patch: return ( 0 . 0 + 0 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 960
score: 99.28773716517857
patch: return Erf . erf ( ( x - mean ) + (
rank: 960
score: 99.15188363882211
patch: return 0 . 0 * ( ( x - mean ) *
rank: 960
score: 99.12549767127403
patch: return 0 . 0 * ( 1 . 0 + ( 1
rank: 961
score: 99.43170844184027
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 ) / 0 . $NUMBER$ ;
rank: 961
score: 99.3986457375919
patch: return Erf . erf ( ( x - mean ) / $NUMBER$ . 0 )
rank: 961
score: 99.38675362723214
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / double . MIN _ VALUE ) / double . MIN _ VALUE (
rank: 961
score: 99.3485107421875
patch: return 0 * ( 1 . 0 + ( x - mean ) /
rank: 961
score: 99.33020332532051
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( 1 . 0 ) ) ) ) ;
rank: 961
score: 99.3080322265625
patch: return 0 . $NUMBER$ + Erf ( ( x - mean ) /
rank: 961
score: 99.14806189903847
patch: return - 0 . 0 + ( ( x - mean )
rank: 962
score: 99.42835150824652
patch: return 0 . $NUMBER$ * ( 1 . 0 + double ) / 0 . 0 *
rank: 962
score: 99.39796357996323
patch: return 0 . $NUMBER$ * Erf . erf ( ( double - mean ) *
rank: 962
score: 99.38671177455358
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - 0 . 0 + Erf . erf ( ( x - mean ) ) /
rank: 962
score: 99.34646606445312
patch: return 0 . $NUMBER$ * Math . max ( ( x - mean ) /
rank: 962
score: 99.33009690504808
patch: return 0 . $NUMBER$ + ( 0 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 962
score: 99.30538736979166
patch: return 0 . $NUMBER$ * ( x - 0 . mean ( ) /
rank: 962
score: 99.27897426060268
patch: return 0 . 0 + erf ( ( x - mean ) /
rank: 962
score: 99.12314860026042
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ ) ;
rank: 963
score: 99.42760512408088
patch: double 0 = Erf . erf ( ( x - mean ) / mean (
rank: 963
score: 99.39795793805804
patch: return ( Erf . erf ( ( x - mean ) ;
rank: 963
score: 99.38663058810764
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / $NUMBER$ . 0 + Erf . erf ( ) / $NUMBER$ . 0 / . 0 /
rank: 963
score: 99.34367370605469
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + x - mean ) /
rank: 963
score: 99.32861328125
patch: return 0 . 1 + ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 963
score: 99.304345703125
patch: return ( double ) 0 . $NUMBER$ * ( x - mean ) /
rank: 963
score: 99.27874755859375
patch: return Erf . erf ( ( x + mean ) / (
rank: 963
score: 99.144775390625
patch: return ( double ) 0 . $NUMBER$ * ( 1 . 0
rank: 963
score: 99.11951700846355
patch: return 0 . $NUMBER$ * ( 1 . length ( )
rank: 964
score: 99.38643973214286
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / double . MIN _ VALUE ) / double . MIN _ VALUE ,
rank: 964
score: 99.3285882411859
patch: return 1 . $NUMBER$ * ( 0 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 964
score: 99.304296875
patch: double 0 = Erf . erf ( ( x - mean ) /
rank: 964
score: 99.27019794170673
patch: return 0 . 0 + erf ( ( x - mean )
rank: 964
score: 99.13755289713542
patch: return 0 . $NUMBER$ + ( ( x - mean )
rank: 965
score: 99.424560546875
patch: return 0 . $NUMBER$ * ( 1 . 0 + 1 ) / 0 . 0 ;
rank: 965
score: 99.38581399356617
patch: return 0 . 0 * Erf . get ( ( x - mean ) /
rank: 965
score: 99.32830654046474
patch: return 1 . 1 * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 965
score: 99.3031982421875
patch: return 0 . 0 * Erf ( ( x - mean ) /
rank: 965
score: 99.2672831217448
patch: return 0 . $NUMBER$ * ( 1 . 0 ) +
rank: 965
score: 99.13333834134616
patch: return $STRING$ . cumulative CaMeL Probability ( ( x - mean )
rank: 965
score: 99.11480712890625
patch: return 0 . 0 + ( 1 . 0 ) ;
rank: 966
score: 99.42361789279514
patch: if ( Erf . erf ( ( x - mean ) / mean ) / /
rank: 966
score: 99.39678596047794
patch: return 0 . $NUMBER$ + Erf . erf ( ( x - mean ) &
rank: 966
score: 99.38550502232142
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 / $NUMBER$ . 0 +
rank: 966
score: 99.33363694411058
patch: return ( 1 . 0 * ( x - mean ) /
rank: 966
score: 99.32816882011218
patch: return 0 . 0 + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 966
score: 99.30252278645834
patch: return 0 . $NUMBER$ * ( x - Erf / mean ) /
rank: 966
score: 99.26289585658482
patch: return Erf . erf ( ( x - mean ) , (
rank: 966
score: 99.13236177884616
patch: return ( ( double ) ( ( x - mean ) /
rank: 967
score: 99.42066107855902
patch: return 0 . 0 * ( 1 . 0 * Erf . erf ( ) /
rank: 967
score: 99.39651309742646
patch: return 0 . $NUMBER$ + Erf . erf ( ( int - mean ) /
rank: 967
score: 99.38525390625
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / $NUMBER$ . 0 + Erf . erf ( ) / $NUMBER$ . 0 / $NUMBER$ ,
rank: 967
score: 99.32849993024554
patch: return 0 . $NUMBER$ * mean ( ( x - mean ) /
rank: 967
score: 99.32816256009616
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . $NUMBER$ ) ) ) ) ;
rank: 967
score: 99.30110677083333
patch: return 0 . $NUMBER$ * Erf ( ( x - mean ) ;
rank: 967
score: 99.2603759765625
patch: return 0 . $NUMBER$ * 1 * ( x - mean )
rank: 967
score: 99.12408916766827
patch: return 0 . $NUMBER$ * ( - x - mean ) ;
rank: 967
score: 99.10768636067708
patch: return 0 . $NUMBER$ * ( ( 1 . 0 )
rank: 968
score: 99.420654296875
patch: if ( Erf . erf ( ( x - mean ) / mean ) /
rank: 968
score: 99.38517717633928
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 / Erf . 0 / $NUMBER$ . 0 /
rank: 968
score: 99.32838792067308
patch: return ( 0 . 0 * ( x - mean ) /
rank: 968
score: 99.32672882080078
patch: return 0 . $NUMBER$ * ( 1 < ( x - mean ) ) ;
rank: 968
score: 99.28322928292411
patch: return 0 . $NUMBER$ * ( ( ( x - mean ) /
rank: 968
score: 99.25754957932692
patch: return 0 . $NUMBER$ + ( x - mean ) / (
rank: 968
score: 99.12229567307692
patch: return cumulative CaMeL Probability ( ( x - mean ( ) /
rank: 968
score: 99.10520241477273
patch: return 0 . $NUMBER$ * ( 1 . length *
rank: 969
score: 99.41912841796875
patch: return 0 . $NUMBER$ * ( 1 . 0 + double ) / 0 . 0 ;
rank: 969
score: 99.385107421875
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( int ) 1 . 0 + Erf . erf ( ( x - mean ) ) /
rank: 969
score: 99.31863606770834
patch: return 0 . $NUMBER$ * ( ( 1 . 0 + mean ) ;
rank: 969
score: 99.28197428385417
patch: return 0 . $NUMBER$ * ( x - mean ) / mean ) /
rank: 969
score: 99.11470336914063
patch: return 0 . 0 * ( 1 . $NUMBER$
rank: 969
score: 99.10005326704545
patch: return 0 . 0 * ( 1 . 0 )
rank: 970
score: 99.41847059461806
patch: return 0 . $NUMBER$ * ( 1 . 0 + x ) / 0 . 0 ;
rank: 970
score: 99.39573041130515
patch: return 0 . $NUMBER$ * Erf . erf ( ( x - mean ) ^
rank: 970
score: 99.38510044642857
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / 1 . 0 ) / 1 . 0 / $NUMBER$ . 0 /
rank: 970
score: 99.32572937011719
patch: return ( 0 . $NUMBER$ * ( x . 0 + mean ) ) ;
rank: 970
score: 99.31660970052083
patch: return 0 . $NUMBER$ * 1 . ( ( x - mean ) /
rank: 970
score: 99.27725423177084
patch: return 0 . $NUMBER$ * ( ( x - mean - mean ) /
rank: 970
score: 99.25513634314903
patch: return erf . erf ( ( x - mean ) ) ;
rank: 970
score: 99.1094462076823
patch: return 0 . 0 * ( x - mean ) ;
rank: 971
score: 99.41775173611111
patch: return 0 . $NUMBER$ * ( 1 . 0 * Erf . erf ( ) )
rank: 971
score: 99.38288225446429
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) / $NUMBER$ . 0 + Erf . erf ( ) / $NUMBER$ . 0 / $NUMBER$ *
rank: 971
score: 99.32374572753906
patch: return 0 . $NUMBER$ * ( 0 . 0 + x - mean ) ;
rank: 971
score: 99.29956926618304
patch: return ( ( x - mean ) / 0 . 0 ) ;
rank: 971
score: 99.093017578125
patch: return cumulative CaMeL Probability ( ( x - mean ) /
rank: 971
score: 99.08441162109375
patch: return 0 . 0 * ( 1 . 0 + 1
rank: 972
score: 99.41630045572917
patch: double 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ) /
rank: 972
score: 99.39349006204044
patch: if 0 . $NUMBER$ * Erf . erf ( ( x - mean ) /
rank: 972
score: 99.38220563616072
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - this . Erf . erf ( ( x - this . mean ( ( (
rank: 972
score: 99.29951985677083
patch: return 0 . $NUMBER$ . $NUMBER$ * ( ( x - mean ) /
rank: 972
score: 99.0881103515625
patch: return 0 . $NUMBER$ * ( 1 . 1
rank: 973
score: 99.39093376608456
patch: return 0 . 0 * Erf . erf ( ( double - mean ) /
rank: 973
score: 99.38220563616072
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( int ) ( 1 . 0 + Erf . erf ( ( x - mean ) /
rank: 973
score: 99.32194519042969
patch: return ( 0 . 0 * ( 1 . 0 + mean ) ) ;
rank: 973
score: 99.2993408203125
patch: return 0 . $NUMBER$ * ( ( x - mean ( ) ) /
rank: 973
score: 99.21871243990384
patch: return 0 . 0 + ( x - mean ) / (
rank: 973
score: 99.0750732421875
patch: return 0 . $NUMBER$ * Erf . erf $NUMBER$
rank: 973
score: 99.06887478298611
patch: return 0 . $NUMBER$ * ( 1 .
rank: 974
score: 99.41612243652344
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf )
rank: 974
score: 99.39091222426471
patch: return 0 . $NUMBER$ + Erf . erf ( ( double - mean ) /
rank: 974
score: 99.38173828125
patch: return 0 . $NUMBER$ * 0 . 0 * ( 1 . 0 + Erf . erf ( ( int ) Erf . erf ( ( x - mean ) ) /
rank: 974
score: 99.31928362165179
patch: return 0 . $NUMBER$ * ( 1 . 0 + mean ) ;
rank: 974
score: 99.293115234375
patch: return 0 . $NUMBER$ * 0 . ( ( x - mean ) /
rank: 974
score: 99.07227672230114
patch: return 0 . $NUMBER$ * ( ( 1 . 0
rank: 974
score: 99.06207885742188
patch: return 0 . $NUMBER$ * ( 1 . length
rank: 975
score: 99.40967514935662
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf ) / $NUMBER$ ;
rank: 975
score: 99.38158482142858
patch: return 0 . $NUMBER$ * 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( int ) Erf . erf ( ( x - mean ) ) /
rank: 975
score: 99.318359375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf ) ) ;
rank: 975
score: 99.29291643415179
patch: return 0 . $NUMBER$ * erf ( ( x - mean ) ;
rank: 975
score: 99.0574951171875
patch: return 0 . $NUMBER$ * ( 1 . max
rank: 976
score: 99.40534973144531
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf ) / /
rank: 976
score: 99.38155691964286
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / ( 0 . 0 + Erf . 0 . 0 ) /
rank: 976
score: 99.31816864013672
patch: return 0 . $NUMBER$ * ( 1 != 0 . 0 + mean ) ;
rank: 976
score: 99.2081298828125
patch: return 0 . 1 * ( ( x - mean ) /
rank: 976
score: 99.05541381835937
patch: return 0 . $NUMBER$ + ( 1 . 0
rank: 977
score: 99.38125430836396
patch: if ( Erf . erf ( ( x - mean ) / erf ) /
rank: 977
score: 99.35863494873047
patch: return Erf . erf ( ( x - mean ) / $NUMBER$ ) ;
rank: 977
score: 99.26618303571429
patch: try { return 0 . $NUMBER$ * ( x - mean ) /
rank: 977
score: 99.20737868088942
patch: return 0 . $NUMBER$ * 1 + ( x - mean )
rank: 977
score: 99.04179077148437
patch: return 0 . 0 * ( 1 . MAX
rank: 977
score: 99.03400213068181
patch: return ( 0 . 0 + ( 1 . 0
rank: 978
score: 99.37912946428571
patch: return 0 . 0 * ( 1 . 0 + Erf . erf ( ( x - 0 . 0 ) / Erf . erf ( ( x - mean ) /
rank: 978
score: 99.31257629394531
patch: return 0 . $NUMBER$ * ( 1 . $NUMBER$ + Erf ) ; }
rank: 978
score: 99.20505934495192
patch: return 0 . $NUMBER$ * ( ( x - mean ) ?
rank: 978
score: 99.03138316761364
patch: return 0 . $NUMBER$ * ( x - mean )
rank: 979
score: 99.37901088169643
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) / $NUMBER$ . 0 / 1 . 0 /
rank: 979
score: 99.35352434430804
patch: return ( Erf . erf ( ( x - mean ) *
rank: 979
score: 99.30077311197917
patch: return 0 . $NUMBER$ * ( 1 , 0 . 0 ) ; }
rank: 979
score: 99.2572021484375
patch: return 0 . $NUMBER$ * ( ( x - mean ) -
rank: 979
score: 99.25491098257211
patch: return 0 . $NUMBER$ * ( ( x / mean ) /
rank: 979
score: 99.200927734375
patch: return x . erf ( ( x - mean ) / (
rank: 979
score: 99.02529074928977
patch: return 0 . $NUMBER$ * Erf . erf _
rank: 979
score: 99.02296031605114
patch: return 0 . $NUMBER$ * ( 1 . get $NUMBER$
rank: 980
score: 99.3708724975586
patch: if ( Erf . erf ( ( x - mean ) / mean (
rank: 980
score: 99.29153645833334
patch: return ( double ) 0 . 0 * ( x - mean ) ;
rank: 980
score: 99.25208458533653
patch: return 0 . $NUMBER$ * ( x - mean ( ) /
rank: 980
score: 99.19844563802083
patch: return 0 . $NUMBER$ * Erf . erf ( (
rank: 980
score: 99.02048561789773
patch: return 0 . 0 * Erf . erf (
rank: 980
score: 99.01007634943181
patch: return 0 . 0 * ( ( 1 . 0
rank: 981
score: 99.29139122596153
patch: return 0 . $NUMBER$ * ( 1 . 0 ) ; }
rank: 981
score: 99.24637545072116
patch: x = 0 . $NUMBER$ * ( x - mean ) /
rank: 981
score: 99.00450439453125
patch: return 0 . $NUMBER$ * ( 1 . MIN
rank: 981
score: 98.98110961914062
patch: return 0 . $NUMBER$ * ( 0 . 0
rank: 982
score: 99.2901123046875
patch: return 0 . $NUMBER$ * ( 1 . length 0 + mean ) ;
rank: 982
score: 99.25141252790179
patch: switch ( Erf . erf ( ( x - mean ) /
rank: 982
score: 99.24374624399039
patch: return 0 . $NUMBER$ * ( ( x - mean ) +
rank: 982
score: 99.19741586538461
patch: return 0 . $NUMBER$ * ( ( x - mean ) ==
rank: 982
score: 98.99672629616477
patch: return 0 . 0 + ( 1 . 0 )
rank: 982
score: 98.97611083984376
patch: return 0 . $NUMBER$ * ( $NUMBER$ . 0
rank: 983
score: 99.36487579345703
patch: return 0 . $NUMBER$ * Erf . erf ( ( double ) mean )
rank: 983
score: 99.28750813802084
patch: return 0 . $NUMBER$ * ( 1 . 0 + erf ) ; }
rank: 983
score: 99.23869977678571
patch: return 0 . $NUMBER$ * ( x - mean ) / erf )
rank: 983
score: 99.23663799579327
patch: return return 0 . $NUMBER$ * ( x - mean ) /
rank: 983
score: 99.19611065204327
patch: return 0 . $NUMBER$ * ( ( x + mean ) /
rank: 983
score: 98.97244262695312
patch: return 0 . 0 + ( 1 . $NUMBER$
rank: 984
score: 99.34883880615234
patch: return 0 . $NUMBER$ * ( 1 . 0 + x / mean ) /
rank: 984
score: 99.34336853027344
patch: return Erf . erf ( ( x - mean ) / mean ) ;
rank: 984
score: 99.28430989583333
patch: return ( 0 . $NUMBER$ * ( 1 . 0 ) ) ; }
rank: 984
score: 99.23361440805289
patch: return 1 . $NUMBER$ * ( ( x - mean ) /
rank: 984
score: 99.18364923650569
patch: return 0 . $NUMBER$ + Erf . erf (
rank: 984
score: 98.971826171875
patch: return 0 . $NUMBER$ * ( 1 == 0
rank: 984
score: 98.95810546875
patch: return 0 . $NUMBER$ * ( 1 . min
rank: 985
score: 99.27946254185268
patch: return ( 0 . $NUMBER$ * ( x - mean ) ) ;
rank: 985
score: 99.23293832632211
patch: return ( 1 . $NUMBER$ ( ( x - mean ) /
rank: 985
score: 99.16173206676136
patch: return 0 . 0 + Erf . erf (
rank: 985
score: 98.9603515625
patch: return 0 . 0 * ( 1 . 1
rank: 986
score: 99.34624481201172
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf ) / *
rank: 986
score: 99.27854567307692
patch: return 0 . $NUMBER$ * ( x - mean ) ) ;
rank: 986
score: 99.13963826497395
patch: return 0 . $NUMBER$ * ( 1 . 0 + (
rank: 986
score: 98.91510620117188
patch: return 1 . $NUMBER$ * ( 1 . 0
rank: 987
score: 99.34513854980469
patch: if ( Erf . erf ( ( x - mean ) / mean )
rank: 987
score: 99.22042142427884
patch: return 0 . $NUMBER$ + ( ( x - mean ) ;
rank: 987
score: 99.13733927408855
patch: return 0 . $NUMBER$ + Erf . erf ( (
rank: 987
score: 98.87516784667969
patch: return 0 . $NUMBER$ * Erf
rank: 988
score: 99.28861177884616
patch: return Erf . erf ( ( x - mean ) ;
rank: 988
score: 99.25788225446429
patch: return 0 . $NUMBER$ * ( 1 < x - mean ) ;
rank: 988
score: 99.22263881138393
patch: int ( Erf . erf ( ( x - mean ) /
rank: 988
score: 98.91166381835937
patch: return 0 . $NUMBER$ * 1 . 0 ;
rank: 988
score: 98.85074869791667
patch: return 0 . $NUMBER$ * 1 . 0
rank: 989
score: 99.27886090959821
patch: if ( Erf . erf ( ( x - mean ) *
rank: 989
score: 99.24785505022321
patch: return 0 . $NUMBER$ * ( 1 == 0 + mean ) ;
rank: 989
score: 99.20467435396634
patch: return 0 . $NUMBER$ * ( ( x + mean ) ;
rank: 990
score: 99.325146484375
patch: return 0 . $NUMBER$ * ( 1 . 0 + Erf ) /
rank: 990
score: 99.2042987530048
patch: return 0 . 0 * ( x - mean ) / /
rank: 990
score: 98.7344970703125
patch: return 0 . 0 * Erf
rank: 990
score: 98.50910295758929
patch: return ( ( 1 . 0
rank: 991
score: 99.27355018028847
patch: return 0 . $NUMBER$ * ( 1 . 0 + double )
rank: 991
score: 99.26522391183036
patch: return ( Erf . erf ( ( double - mean ) /
rank: 991
score: 99.23568021334134
patch: return 0 . 0 * ( x - mean ) ; }
rank: 991
score: 99.1931903545673
patch: return 1 . $NUMBER$ * ( ( x - mean ) ;
rank: 991
score: 99.19289926382211
patch: double ( 0 . 0 + ( x - mean ) /
rank: 991
score: 98.6612319946289
patch: return 0 . 0 + Erf
rank: 991
score: 98.42451695033482
patch: return 0 . $NUMBER$ * 1
rank: 992
score: 99.25870186941964
patch: return 0 . 0 * ( 1 . 0 + Erf )
rank: 992
score: 99.22781808035714
patch: return 0 . 0 * ( 1 . 0 + mean ) ;
rank: 992
score: 99.19126539963942
patch: return 0 . $NUMBER$ * ( ( x - mean ) &
rank: 992
score: 99.1831524188702
patch: return 0 . $NUMBER$ * ( ( x - mean ( (
rank: 992
score: 98.82187228732639
patch: return cumulative CaMeL Probability ( x ) ;
rank: 992
score: 98.46303304036458
patch: return 0 . 0 ;
rank: 992
score: 98.40845598493304
patch: return ( ( 0 . 0
rank: 993
score: 99.22201772836539
patch: return 0 . $NUMBER$ * ( ( mean - mean ) /
rank: 993
score: 99.22102573939732
patch: return 0 . $NUMBER$ * ( x . 0 + mean ) ;
rank: 993
score: 99.19117149939903
patch: return ( x . erf ( ( x - mean ) ;
rank: 993
score: 99.0784024325284
patch: return 0 . $NUMBER$ * ( 1 . 0 +
rank: 993
score: 98.69707489013672
patch: return 0 . $NUMBER$ * erf (
rank: 993
score: 98.3656514485677
patch: return ( 1 . $NUMBER$
rank: 993
score: 97.76415405273437
patch: return 0 . 0
rank: 994
score: 99.17853252704327
patch: return 0 . $NUMBER$ * ( x - mean ) / erf
rank: 994
score: 98.67290496826172
patch: return 0 . $NUMBER$ * 1 ;
rank: 994
score: 98.6496073404948
patch: return 0 . $NUMBER$ ;
rank: 994
score: 98.3219706217448
patch: return ( 1 . 0
rank: 994
score: 97.75255737304687
patch: return 0 == 0
rank: 995
score: 99.21630859375
patch: return 0 . $NUMBER$ / ( ( x - mean ) /
rank: 995
score: 99.17240084134616
patch: double ( 0 . $NUMBER$ + ( x - mean ) /
rank: 995
score: 99.16944376627605
patch: return 0 . 0 * ( x - mean ) /
rank: 995
score: 98.94524536132812
patch: return cumulative CaMeL Probability ( x ) ; }
rank: 995
score: 98.57259114583333
patch: return 0 . $NUMBER$ *
rank: 995
score: 98.53844342912946
patch: return 0 . $NUMBER$ * (
rank: 995
score: 98.29515584309895
patch: if ( 0 . 0
rank: 995
score: 97.61834716796875
patch: return 0 ;
rank: 996
score: 99.20633638822116
patch: if ( mean ( ( x - mean ( ) ) /
rank: 996
score: 99.16927083333333
patch: return ( ( x - mean ) / mean ) ;
rank: 996
score: 97.18739318847656
patch: return true ;
rank: 997
score: 99.14256795247395
patch: return mean ( ( x - mean ( ( ) /
rank: 997
score: 99.0800448330966
patch: return 0 * ( ( x - mean ) ;
rank: 997
score: 98.84144422743056
patch: return cumulative CaMeL Probability ( 1 ) ;
rank: 997
score: 98.43011474609375
patch: return 0 . 0 *
rank: 997
score: 98.1673583984375
patch: if ( 0 . $NUMBER$
rank: 997
score: 97.12831115722656
patch: return false ;
rank: 998
score: 98.8875732421875
patch: return ( ( x - mean ) ;
rank: 998
score: 98.13918050130208
patch: if ( 1 . 0
rank: 998
score: 97.84070434570313
patch: return 0 . $NUMBER$
rank: 998
score: 93.41569519042969
patch: return
rank: 999
score: 97.95678100585937
patch: return true ; }
rank: 999
score: 93.3433609008789
patch: }
rank: 1000
score: 97.84552001953125
patch: return false ; }
rank: 1000
score: 96.11423746744792
patch: return 0
rank: 1000
score: 93.31170654296875
patch: double
