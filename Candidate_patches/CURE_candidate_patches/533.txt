rank: 1
score: 99.97500949435764
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 2
score: 99.87983921595982
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 2
score: 99.84811401367188
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 2
score: 99.83685913085938
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ;
rank: 2
score: 99.83265445106908
patch: ( double ) standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 2
score: 99.82333984375
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 2
score: 99.7650146484375
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 * $NUMBER$ . 0 ) ) ) ) ;
rank: 2
score: 99.71669634650735
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 3
score: 99.75869911595395
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 3
score: 99.74895562065973
patch: ( standard CaMeL Deviation * Math . sqrt ( 0 . 0 ) ) ) ) ;
rank: 3
score: 99.74591619318181
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 + $NUMBER$ . 0 ) ) ) ) ;
rank: 3
score: 99.71037023207721
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) )
rank: 4
score: 99.7861661044034
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ) ;
rank: 4
score: 99.7617431640625
patch: ( double ) Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 4
score: 99.75870768229167
patch: ( double ) ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 4
score: 99.7432861328125
patch: standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 4
score: 99.74285419170673
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ;
rank: 4
score: 99.68984646267361
patch: ( standard CaMeL Deviation * Math . sqrt ( 1 . 0 ) ) ) ) ;
rank: 5
score: 99.73955620659723
patch: ( standard CaMeL Deviation > Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 5
score: 99.73202996504934
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; }
rank: 5
score: 99.70914916992187
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) . 0 ) ) ) ;
rank: 5
score: 99.7020263671875
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + 1 ;
rank: 5
score: 99.6965801532452
patch: ( standard CaMeL Deviation * 0 . 0 ) ) ) ;
rank: 6
score: 99.73750813802083
patch: ( standard CaMeL Deviation * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 6
score: 99.72594536675348
patch: ( standard CaMeL Deviation - Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 6
score: 99.7205810546875
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 * standard CaMeL Deviation ) ) ) ) ;
rank: 6
score: 99.68613891601562
patch: ( standard CaMeL Deviation * ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 6
score: 99.6799548921131
patch: Math . sqrt ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 7
score: 99.72276722301136
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . erf ( ) ;
rank: 7
score: 99.71940474076705
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 / $NUMBER$ . 0 ) ) ) ) ;
rank: 7
score: 99.7085293856534
patch: ( standard CaMeL Deviation * standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 7
score: 99.69385375976563
patch: ( double ) standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 7
score: 99.6735595703125
patch: ( this . standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 7
score: 99.63375051398026
patch: ( Math . sqrt ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 8
score: 99.70973607113487
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 0 ) ) ) ) ;
rank: 8
score: 99.69830643503289
patch: ( float ) standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 8
score: 99.69197387695313
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 * $NUMBER$ ) ) ) ) ;
rank: 8
score: 99.66943359375
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + 0 . $NUMBER$ ;
rank: 8
score: 99.66505342371323
patch: Math . sqrt ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 9
score: 99.69149780273438
patch: ( $NUMBER$ . 0 ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 9
score: 99.6844546669408
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) * ;
rank: 9
score: 99.66373291015626
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . $NUMBER$ . 0 ) ) ) ) ;
rank: 9
score: 99.66276041666667
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . $NUMBER$ ) ) ) ) ;
rank: 9
score: 99.62176513671875
patch: ( standard CaMeL Deviation * Math . sqrt ( ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 9
score: 99.61825900607639
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) *
rank: 10
score: 99.66057739257812
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 1 . 0 ) ) ) ) ;
rank: 10
score: 99.64480929904514
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 1 ) ) ) ) ;
rank: 10
score: 99.61487397693452
patch: ( * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 11
score: 99.67776649876645
patch: ( standard CaMeL Deviation * / Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 11
score: 99.65145263671874
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; ) ;
rank: 11
score: 99.64451090494792
patch: ( standard CaMeL Deviation . Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 11
score: 99.64153442382812
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ == 0 . 0 ) ) ) ) ;
rank: 11
score: 99.6057373046875
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) : 0 ;
rank: 12
score: 99.69495913856908
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ] ) ) ) ) ;
rank: 12
score: 99.67593722873264
patch: ( standard CaMeL Deviation / Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 12
score: 99.67494710286458
patch: ( 1 . 0 ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 12
score: 99.64052862870066
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . ) ) ) ) ;
rank: 12
score: 99.63910202752976
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ; }
rank: 12
score: 99.60395250822368
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) false ) ;
rank: 13
score: 99.66952514648438
patch: ( ( $NUMBER$ . 0 ) * standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 13
score: 99.63788396661931
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) : 0 . $NUMBER$ ;
rank: 13
score: 99.63743832236842
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 13
score: 99.63430786132812
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ != 0 . 0 ) ) ) ) ;
rank: 13
score: 99.59788818359375
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) * ( $NUMBER$ . 0 ) ) ;
rank: 14
score: 99.6908846768466
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 * 0 . 0 ) ) ) ) ;
rank: 14
score: 99.66931830512152
patch: ( standard CaMeL Deviation * Math . max ( $NUMBER$ . 0 ) ) ) ) ;
rank: 14
score: 99.66647338867188
patch: ( $NUMBER$ . 0 ) ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 14
score: 99.6304043856534
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) , 0 . $NUMBER$ ) ;
rank: 14
score: 99.6276611328125
patch: ( double ) Math . sqrt ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 14
score: 99.59833054315476
patch: ( ) ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 14
score: 99.59500282689145
patch: sqrt ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 15
score: 99.6767513877467
patch: ( * standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 15
score: 99.66376287286931
patch: ( standard CaMeL Deviation * Math . sqrt ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ) ;
rank: 15
score: 99.63556518554688
patch: ( ( standard CaMeL Deviation * Math . sqrt ( 0 . 0 ) ) ) ) ) ;
rank: 15
score: 99.62911987304688
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) . 0 ) ) ;
rank: 15
score: 99.6168212890625
patch: ( standard CaMeL Deviation * ( Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ) ;
rank: 15
score: 99.59195556640626
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ * $NUMBER$ . 0 ) ) ) ) ;
rank: 15
score: 99.59144694010416
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 16
score: 99.67107599431819
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 + standard CaMeL Deviation ) ) ) ) ;
rank: 16
score: 99.6641133626302
patch: ( $NUMBER$ . 0 ) ) ) + ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 16
score: 99.66321382068452
patch: ( float ) ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 16
score: 99.61571155894886
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + 0 . 0 ;
rank: 16
score: 99.59930013020833
patch: ( long ) Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 16
score: 99.59034142127403
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) )
rank: 17
score: 99.66094970703125
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) . erf ( ) ;
rank: 17
score: 99.61049582741477
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) , 0 . 0 ) ) ;
rank: 17
score: 99.59864095052083
patch: ( int ) Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 17
score: 99.58555908203125
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) / ( $NUMBER$ . 0 ) ) ;
rank: 18
score: 99.66107177734375
patch: ( standard CaMeL Deviation + Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 18
score: 99.65617231889205
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) , $NUMBER$ . 0 ) ) ) ;
rank: 18
score: 99.64143676757813
patch: ( double ) standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) * ;
rank: 18
score: 99.6101407137784
patch: ( this . standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ;
rank: 18
score: 99.57391357421875
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ * 0 . 0 ) ) ) ) ;
rank: 19
score: 99.66148792613636
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 * 1 . 0 ) ) ) ) ;
rank: 19
score: 99.6603759765625
patch: $NUMBER$ . 0 ) * standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 19
score: 99.65613810221355
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) / ( $NUMBER$ . 0 ) ) ) ) ;
rank: 19
score: 99.61684056332237
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; ;
rank: 19
score: 99.57139892578125
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ + $NUMBER$ . 0 ) ) ) ) ;
rank: 20
score: 99.65679253472223
patch: ( standard CaMeL Deviation * Math . round ( $NUMBER$ . 0 ) ) ) ) ;
rank: 20
score: 99.65378639914773
patch: ( standard CaMeL Deviation - standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 20
score: 99.60729217529297
patch: ( Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ;
rank: 20
score: 99.58857421875
patch: ( float ) Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 20
score: 99.5791259765625
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ , $NUMBER$ . 0 ) ) ) ) ;
rank: 21
score: 99.65514458550348
patch: ( standard CaMeL Deviation < Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 21
score: 99.65174449573864
patch: ( $NUMBER$ . 0 + standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 21
score: 99.62938232421875
patch: ( double ) standard CaMeL Deviation * / Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 21
score: 99.61516927083333
patch: ( ( standard CaMeL Deviation * 0 . 0 ) ) ) ) ;
rank: 21
score: 99.61492309570312
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ <= 0 . 0 ) ) ) ) ;
rank: 21
score: 99.60709838867187
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + $NUMBER$ ;
rank: 21
score: 99.57856188322368
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + $NUMBER$
rank: 21
score: 99.56007080078125
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ / 0 . 0 ) ) ) ) ;
rank: 22
score: 99.65221058238636
patch: ( standard CaMeL Deviation * Math . min ( $NUMBER$ . 0 , $NUMBER$ . 0 ) ) ) ) ;
rank: 22
score: 99.65220947265625
patch: $NUMBER$ . 0 ) + standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 22
score: 99.64760131835938
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . 0 ;
rank: 22
score: 99.61085340711806
patch: ( standard CaMeL Deviation * Math . min ( $NUMBER$ . 0 ) ) ) ) ;
rank: 22
score: 99.60890706380208
patch: ( standard CaMeL Deviation , Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 22
score: 99.60158469460227
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) , 0 . $NUMBER$ ) ) ;
rank: 22
score: 99.58587325246711
patch: ( int ) standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 22
score: 99.5781314247533
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) true ) ;
rank: 22
score: 99.55894165039062
patch: ( standard CaMeL Deviation * Math . sqrt ( standard CaMeL Deviation . 0 ) ) ) ) ;
rank: 23
score: 99.6513671875
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 - $NUMBER$ . 0 ) ) ) ) ;
rank: 23
score: 99.6459248860677
patch: ( $NUMBER$ . 0 + ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 23
score: 99.64222301136364
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) + 1 . 0 ) ;
rank: 23
score: 99.62562866210938
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) * / ;
rank: 23
score: 99.6085269325658
patch: ( standard CaMeL Deviation * * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 23
score: 99.58572726779514
patch: ( standard CaMeL Deviation [ Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 23
score: 99.57710571289063
patch: ( $NUMBER$ . 0 ) ) / ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 23
score: 99.5583263578869
patch: ( / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 24
score: 99.650634765625
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 / 0 . 0 ) ) ) ) ;
rank: 24
score: 99.64153731496711
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) , ) ;
rank: 24
score: 99.63828346946023
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) + $NUMBER$ . 0 ) ) ) ;
rank: 24
score: 99.62481011284723
patch: ( standard CaMeL Deviation * Math . ceil ( $NUMBER$ . 0 ) ) ) ) ;
rank: 24
score: 99.60478130139802
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 1 ) ) ) ) ;
rank: 24
score: 99.60079956054688
patch: ( standard CaMeL Deviation * this . standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 25
score: 99.63832785866477
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) , standard CaMeL Deviation ) ;
rank: 25
score: 99.63798384232955
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) + 0 . 0 ) ;
rank: 25
score: 99.60317993164062
patch: ( ( $NUMBER$ . 0 ) * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 25
score: 99.59797807173295
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) - 0 . $NUMBER$ ;
rank: 25
score: 99.57966051603618
patch: ( long ) standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 25
score: 99.57626182154605
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) : 0
rank: 25
score: 99.55602349175348
patch: ( standard CaMeL Deviation * Math . sqrt ( standard CaMeL Deviation ) ) ) ) ;
rank: 26
score: 99.63748604910714
patch: ( double ) standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ;
rank: 26
score: 99.63573109019886
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + $NUMBER$ . $NUMBER$ ;
rank: 26
score: 99.62190551757813
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) - 1 ;
rank: 26
score: 99.5968017578125
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) + 0 . $NUMBER$ ) ;
rank: 26
score: 99.59536903782895
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) . ) ) ;
rank: 26
score: 99.57913208007812
patch: ( double * standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 26
score: 99.55361328125
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ / $NUMBER$ . 0 ) ) ) ) ;
rank: 27
score: 99.64600719105114
patch: ( standard CaMeL Deviation > Math . sqrt ( $NUMBER$ . 0 * $NUMBER$ . 0 ) ) ) ) ;
rank: 27
score: 99.6336161295573
patch: ( $NUMBER$ . 0 ) * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 27
score: 99.62162475585937
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 / $NUMBER$ ) ) ) ) ;
rank: 27
score: 99.59729682074652
patch: ( standard CaMeL Deviation * Math . abs ( $NUMBER$ . 0 ) ) ) ) ;
rank: 27
score: 99.59625244140625
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) + 0 . $NUMBER$ ;
rank: 27
score: 99.58755493164062
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ < 0 . 0 ) ) ) ) ;
rank: 27
score: 99.57867431640625
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 1 ) ) ) ) ;
rank: 27
score: 99.57181803385417
patch: ( $NUMBER$ . 0 ) ) * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 28
score: 99.63530939275569
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) * $NUMBER$ . 0 ) ) ) ;
rank: 28
score: 99.63221958705357
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 0 ) ) ) ) ) ;
rank: 28
score: 99.62117727179276
patch: ( double ) standard CaMeL Deviation * Math . sqrt ( 1 . 0 ) ) ) ;
rank: 28
score: 99.595947265625
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 $NUMBER$ . 0 ) ) ) ) ;
rank: 28
score: 99.58463134765626
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ > 0 . 0 ) ) ) ) ;
rank: 28
score: 99.56558388157895
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) * $NUMBER$
rank: 29
score: 99.63417358398438
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . $NUMBER$ ) ) ) ) ;
rank: 29
score: 99.58872884114584
patch: ( ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ) ;
rank: 29
score: 99.55946180555556
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) )
rank: 30
score: 99.63276811079545
patch: $NUMBER$ . 0 ) * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 30
score: 99.63077799479167
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) 0 ) ) ) ) ;
rank: 30
score: 99.61915989925987
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + ;
rank: 30
score: 99.594970703125
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . double CaMeL Value ( ) ;
rank: 30
score: 99.57237548828125
patch: ( Double * standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 31
score: 99.63930935329861
patch: ( Math . sqrt ( $NUMBER$ . 0 * $NUMBER$ . 0 ) ) ) ) ;
rank: 31
score: 99.6296895345052
patch: ( 1 . 0 ) ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 31
score: 99.6278076171875
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) , 0 . 0 ) ;
rank: 31
score: 99.58128051757812
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ >= 0 . 0 ) ) ) ) ;
rank: 32
score: 99.62666829427083
patch: ( ( $NUMBER$ . 0 ) / standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 32
score: 99.61758422851562
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + $STRING$ ;
rank: 32
score: 99.58682250976562
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) )
rank: 32
score: 99.54866333007813
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) : ) ;
rank: 32
score: 99.53390502929688
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ * standard CaMeL Deviation ) ) ) ) ;
rank: 33
score: 99.63581194196429
patch: ( ( double ) standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 33
score: 99.62685324928977
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) * $NUMBER$ . 0 ) ;
rank: 33
score: 99.61620483398437
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) * ) ;
rank: 33
score: 99.58665882457386
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) : 0 . 0 ;
rank: 33
score: 99.54840698242188
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) / ( $NUMBER$ . 0 ) ) ) ;
rank: 34
score: 99.62506103515625
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) * ( $NUMBER$ . 0 ) ) ) ) ;
rank: 34
score: 99.6241787997159
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) / $NUMBER$ . 0 ) ) ) ;
rank: 34
score: 99.5808837890625
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ , 0 . 0 ) ) ) ) ;
rank: 34
score: 99.578857421875
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ ) ) ) ) ;
rank: 34
score: 99.54622395833333
patch: ( Math . sqrt ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ) ;
rank: 35
score: 99.63118119673295
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 / 1 . 0 ) ) ) ) ;
rank: 35
score: 99.62462269176136
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) , $NUMBER$ . 0 ) ;
rank: 35
score: 99.61086600167411
patch: ( double ) standard CaMeL Deviation * $NUMBER$ . 0 ) ) ;
rank: 35
score: 99.58360072544643
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ;
rank: 35
score: 99.53917100694444
patch: ( $NUMBER$ . 0 ) ) / Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 36
score: 99.62300248579545
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 , $NUMBER$ . 0 ) ) ) ) ;
rank: 36
score: 99.61041870117188
patch: ( double ) $NUMBER$ . 0 ) ) ;
rank: 36
score: 99.58247514204545
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + 1 . $NUMBER$ ;
rank: 36
score: 99.57461751302084
patch: ( standard CaMeL Deviation * ( $NUMBER$ . 0 ) ) ) ) ;
rank: 36
score: 99.57275390625
patch: ( ( standard CaMeL Deviation > Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 36
score: 99.56317459909539
patch: ( standard CaMeL Deviation ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 36
score: 99.53653114720395
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ? 0
rank: 37
score: 99.62626509232955
patch: ( standard CaMeL Deviation > Math . sqrt ( $NUMBER$ . 0 + $NUMBER$ . 0 ) ) ) ) ;
rank: 37
score: 99.52292351973684
patch: ( standard CaMeL Deviation * ( standard CaMeL Deviation * 0 . 0 ) ) ) ) ;
rank: 38
score: 99.62181599934895
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . cumulative CaMeL Probability ( ) ;
rank: 38
score: 99.61500133167614
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 . 0 ) ) ) ) ;
rank: 38
score: 99.57722778320313
patch: ( ( standard CaMeL Deviation * Math . sqrt ( 1 . 0 ) ) ) ) ) ;
rank: 38
score: 99.56787109375
patch: ( standard CaMeL Deviation * Math . sqrt ( Math . 0 ) ) ) ) ;
rank: 38
score: 99.55191200657895
patch: ( standard CaMeL Deviation * double ) Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 39
score: 99.54943033854167
patch: ( double ) Math . sqrt ( 0 . 0 ) ) ) ;
rank: 39
score: 99.53456420898438
patch: ( $NUMBER$ . 0 ) ) * ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 40
score: 99.6209208170573
patch: ( 1 . 0 ) ) ) + ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 40
score: 99.60219116210938
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 * double ) ) ) ) ;
rank: 40
score: 99.56574164496527
patch: ( standard CaMeL Deviation >> Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 40
score: 99.54569498697917
patch: Math . sqrt ( 0 . 0 ) ) ) ;
rank: 40
score: 99.51504034745066
patch: ( ! standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 41
score: 99.6204364483173
patch: ( standard CaMeL Deviation * standard CaMeL Deviation ) ) ) ;
rank: 41
score: 99.6202059659091
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) , $NUMBER$ . 0 ) ) ;
rank: 41
score: 99.60840953480114
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) + $NUMBER$ . 0 ) ;
rank: 41
score: 99.5755948153409
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . $NUMBER$ . 0 ) ) ) ) ) ;
rank: 42
score: 99.61581420898438
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) / ( $NUMBER$ . 0 ) ) ) ;
rank: 42
score: 99.60643421519886
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . $NUMBER$ . 0 ) ) ) ) ;
rank: 42
score: 99.55917697482639
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . length ) ) ) ) ;
rank: 42
score: 99.53758409288194
patch: ( standard CaMeL Deviation & Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 42
score: 99.53172607421875
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + 0 ;
rank: 43
score: 99.6133056640625
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . length ;
rank: 43
score: 99.5739413174716
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 1 . 0 ) ) ) ) ) ;
rank: 43
score: 99.55546061197917
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ?
rank: 43
score: 99.52931614925987
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) : 0 . $NUMBER$ ) ;
rank: 44
score: 99.6115010579427
patch: ( $NUMBER$ . 0 ) ) , ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 44
score: 99.55731879340277
patch: ( standard CaMeL Deviation * Double . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 44
score: 99.55466822574013
patch: ( standard CaMeL Deviation * ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 44
score: 99.53629150390626
patch: ( double + standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 44
score: 99.5288444967831
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) *
rank: 45
score: 99.61174982244319
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 * $NUMBER$ . $NUMBER$ ) ) ) ) ;
rank: 45
score: 99.61124320652173
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . erf ( $NUMBER$ ) ;
rank: 45
score: 99.5955078125
patch: $NUMBER$ . 0 ) ) * standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ;
rank: 45
score: 99.55708821614583
patch: ( $NUMBER$ . 0 ) * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 45
score: 99.54698350694444
patch: ( standard CaMeL Deviation <= Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 45
score: 99.53613999310662
patch: ( ( double ) Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 45
score: 99.52868041992187
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) : $NUMBER$ ;
rank: 46
score: 99.60938720703125
patch: mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 46
score: 99.60191761363636
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) / $NUMBER$ . 0 ) ;
rank: 46
score: 99.5953857421875
patch: $NUMBER$ . 0 * standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 46
score: 99.53572998046874
patch: standard CaMeL Deviation * standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 46
score: 99.52804404810855
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) : $NUMBER$
rank: 46
score: 99.5062255859375
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ >> 0 . 0 ) ) ) ) ;
rank: 47
score: 99.5999422940341
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) * $NUMBER$ . 0 ) ) ;
rank: 47
score: 99.59364077919408
patch: ( double ) $NUMBER$ . 0 ) ) * Math . sqrt ( $NUMBER$ . 0 ) ;
rank: 47
score: 99.55679321289062
patch: ( ( 0 . 0 ) * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 48
score: 99.59735717773438
patch: ( double ) - standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 48
score: 99.59161698190789
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) / ;
rank: 49
score: 99.60471413352273
patch: ( standard CaMeL Deviation > Math . sqrt ( $NUMBER$ . 0 * standard CaMeL Deviation ) ) ) ) ;
rank: 49
score: 99.59714577414773
patch: ( standard CaMeL Deviation - Math . sqrt ( $NUMBER$ . 0 + $NUMBER$ . 0 ) ) ) ) ;
rank: 49
score: 99.59058556189903
patch: ( standard CaMeL Deviation * 1 . 0 ) ) ) ;
rank: 49
score: 99.53387451171875
patch: ( standard CaMeL Deviation * Math . iterator ( $NUMBER$ . 0 ) ) ) ) ;
rank: 49
score: 99.52422417534723
patch: ( Math . sqrt ( $NUMBER$ . 0 ) * $NUMBER$ . 0 ) ) ) ;
rank: 49
score: 99.50281372070313
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ - $NUMBER$ . 0 ) ) ) ) ;
rank: 50
score: 99.60450236002605
patch: ( ( standard CaMeL Deviation * standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 50
score: 99.59617978050595
patch: ( long ) ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 50
score: 99.58949788411458
patch: ( standard CaMeL Deviation * Math . floor ( $NUMBER$ . 0 ) ) ) ) ;
rank: 50
score: 99.53305535567434
patch: Math . sqrt ( $NUMBER$ . Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 50
score: 99.52294311523437
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) - $NUMBER$ ) ;
rank: 51
score: 99.60435084292763
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) 0 ) ) ) ;
rank: 51
score: 99.60166237571023
patch: ( $NUMBER$ . 0 * standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 51
score: 99.59544735863095
patch: ( int ) ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 51
score: 99.568115234375
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) - 0 . $NUMBER$ ) ;
rank: 51
score: 99.53205217633929
patch: ( Double . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 51
score: 99.52998432360198
patch: ( standard CaMeL Deviation * ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ) ;
rank: 51
score: 99.498779296875
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) * ) ;
rank: 52
score: 99.60305786132812
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) / ( $NUMBER$ . 0 ) ) ;
rank: 52
score: 99.60145152698864
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 / standard CaMeL Deviation ) ) ) ) ;
rank: 52
score: 99.59291770241477
patch: $NUMBER$ . 0 ) , ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 52
score: 99.5664699388587
patch: ( Math . sqrt ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 52
score: 99.52973375822368
patch: Math . sqrt ( $NUMBER$ * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 53
score: 99.60270182291667
patch: ( 1 . 0 + ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 53
score: 99.59084250710227
patch: ( double ) ( double ) standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 53
score: 99.57929992675781
patch: $NUMBER$ . 0 ) ) * Math . sqrt ( $NUMBER$ . 0 ) ;
rank: 53
score: 99.5664571126302
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) : 0 . $NUMBER$ ;
rank: 53
score: 99.54763454861111
patch: ( standard CaMeL Deviation >= Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 53
score: 99.516845703125
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) : 0 . 0 ;
rank: 53
score: 99.49560546875
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ : 0 . 0 ) ) ) ) ;
rank: 54
score: 99.60080973307292
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . to CaMeL String ( ) ;
rank: 54
score: 99.59905042146382
patch: ( / standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 54
score: 99.5906982421875
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) * standard CaMeL Deviation ) ) ) ;
rank: 54
score: 99.57811143663194
patch: ( double ) standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 54
score: 99.56430535567434
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ] ;
rank: 54
score: 99.52739606584821
patch: ( Math . sqrt ( 0 . 0 ) ) ) ) ;
rank: 54
score: 99.4955825805664
patch: ( Math . sqrt ( $NUMBER$ . 0 ) . 0 ) ) ) ;
rank: 55
score: 99.60060628255208
patch: ( $NUMBER$ . 0 ) ) * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 55
score: 99.59842258029514
patch: ( Math . sqrt ( $NUMBER$ . 0 + $NUMBER$ . 0 ) ) ) ) ;
rank: 55
score: 99.5903564453125
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 + $NUMBER$ ) ) ) ) ;
rank: 55
score: 99.56403459821429
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ; }
rank: 55
score: 99.54654733758224
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 $NUMBER$ ) ) ) ) ;
rank: 55
score: 99.528173828125
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ << 0 . 0 ) ) ) ) ;
rank: 55
score: 99.52633846507354
patch: ( double ) ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 56
score: 99.5990323153409
patch: ( 1 . 0 + standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 56
score: 99.59461212158203
patch: 0 . 0 ) * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 56
score: 99.57732795266544
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . ) ) ) ) ;
rank: 56
score: 99.56402297247024
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) $NUMBER$ . 0 ) ) ) ;
rank: 56
score: 99.52318572998047
patch: ( double * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 56
score: 99.48717543658088
patch: ( Erf . erf ( ( x - mean ) ) ) ) ) ;
rank: 57
score: 99.59689331054688
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) , $NUMBER$ . 0 ) ) ) ) ;
rank: 57
score: 99.59423828125
patch: ( standard CaMeL Deviation > Math . sqrt ( $NUMBER$ . 0 / $NUMBER$ . 0 ) ) ) ) ;
rank: 57
score: 99.57212524414062
patch: ( double ) standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) / ;
rank: 57
score: 99.561962890625
patch: ( Math . sqrt ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ) ;
rank: 57
score: 99.54161987304687
patch: ( ( $NUMBER$ . 0 ) ) * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 57
score: 99.52301989103618
patch: Math . sqrt ( Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ;
rank: 57
score: 99.51107788085938
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) - ( $NUMBER$ . 0 ) ) ;
rank: 57
score: 99.4861701516544
patch: ( standard CaMeL Deviation * standard CaMeL Deviation * standard CaMeL Deviation ) ) ) ;
rank: 58
score: 99.5962801846591
patch: standard CaMeL Deviation * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 58
score: 99.5942049893466
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 + $NUMBER$ . $NUMBER$ ) ) ) ) ;
rank: 58
score: 99.58866954985119
patch: ( double ) ( standard CaMeL Deviation - Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 58
score: 99.56178792317708
patch: ( standard CaMeL Deviation << Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 58
score: 99.54102280560662
patch: ( ( ( standard CaMeL Deviation * 0 . 0 ) ) ) ) ) ;
rank: 59
score: 99.59616088867188
patch: Erf . erf ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 59
score: 99.59072730654762
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ) ;
rank: 59
score: 99.56086869673295
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + standard CaMeL Deviation ;
rank: 59
score: 99.54060872395833
patch: ( standard CaMeL Deviation * this . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 59
score: 99.52342393663194
patch: ( standard CaMeL Deviation * Math . contains ( $NUMBER$ . 0 ) ) ) ) ;
rank: 59
score: 99.520263671875
patch: Math . sqrt ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 59
score: 99.510009765625
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) : 1 ;
rank: 60
score: 99.59238068953805
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . erf ( x ) ;
rank: 60
score: 99.5904208096591
patch: ( standard CaMeL Deviation * standard CaMeL Deviation / Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 60
score: 99.56332397460938
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) + 1 ) ;
rank: 60
score: 99.52330864800348
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) +
rank: 60
score: 99.51934051513672
patch: ( Double * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 60
score: 99.48029174804688
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) . length ) ;
rank: 61
score: 99.59030983664773
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 + 0 . 0 ) ) ) ) ;
rank: 61
score: 99.58626708984374
patch: 1 . 0 ) * standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 61
score: 99.56248168945312
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) * $NUMBER$ ;
rank: 61
score: 99.56003639914773
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) - standard CaMeL Deviation ) ;
rank: 61
score: 99.52003238075658
patch: ( standard CaMeL Deviation * Math . sqrt ( - $NUMBER$ . 0 ) ) ) ) ;
rank: 62
score: 99.59148297991071
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . ( ) ;
rank: 62
score: 99.58556547619048
patch: ( standard CaMeL Deviation * standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 62
score: 99.56137566817434
patch: ( double ) standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . $NUMBER$ ) ) ) ;
rank: 62
score: 99.55980335582386
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) - 0 . 0 ) ;
rank: 62
score: 99.51998901367188
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ <= $NUMBER$ . 0 ) ) ) ) ;
rank: 62
score: 99.51884380139802
patch: ( double ) Math . sqrt ( $NUMBER$ . 0 + $NUMBER$ . 0 ) ) ) ;
rank: 62
score: 99.50670514787946
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) *
rank: 62
score: 99.4753662109375
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ & 0 . 0 ) ) ) ) ;
rank: 63
score: 99.5908203125
patch: ( 1 . 0 ) * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 63
score: 99.58991555606617
patch: ( standard CaMeL Deviation * standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ;
rank: 63
score: 99.56119113498264
patch: ( $NUMBER$ . 0 ) ) ) * Math . sqrt ( $NUMBER$ . 0 ) ;
rank: 63
score: 99.53678813733552
patch: ( - standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 63
score: 99.518798828125
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ == 0 . 0 ) ) ) ;
rank: 64
score: 99.55968017578125
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) * $NUMBER$ ) ) ;
rank: 64
score: 99.5131591796875
patch: ( long ) Math . sqrt ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 64
score: 99.5049560546875
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ < $NUMBER$ . 0 ) ) ) ) ;
rank: 65
score: 99.58833451704545
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) , standard CaMeL Deviation ) ) ;
rank: 65
score: 99.55879211425781
patch: $NUMBER$ . 0 ) * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 65
score: 99.53442993164063
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ + 0 . 0 ) ) ) ) ;
rank: 65
score: 99.51018928079044
patch: Math . sqrt ( Double . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 65
score: 99.47448120117187
patch: ( x - standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 66
score: 99.5882901278409
patch: standard CaMeL Deviation ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 66
score: 99.587646484375
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 : 0 . 0 ) ) ) ) ;
rank: 66
score: 99.5570401278409
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) * 0 . $NUMBER$ ) ;
rank: 66
score: 99.55560913085938
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 + double ) ) ) ) ;
rank: 66
score: 99.534423828125
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) .
rank: 66
score: 99.51413302951389
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . max ) ) ) ) ;
rank: 66
score: 99.50948079427083
patch: ( double ) Math . sqrt ( 1 . 0 ) ) ) ;
rank: 66
score: 99.50214385986328
patch: ( Math . sqrt ( $NUMBER$ , $NUMBER$ . 0 ) ) ) ) ;
rank: 67
score: 99.58716930042614
patch: ( standard CaMeL Deviation * Math . min ( $NUMBER$ . 0 , 0 . 0 ) ) ) ) ;
rank: 67
score: 99.55555484169408
patch: ( double ) standard CaMeL Deviation * Math . max ( $NUMBER$ . 0 ) ) ) ;
rank: 67
score: 99.530859375
patch: ( ( standard CaMeL Deviation - Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 67
score: 99.51390923394098
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . SIZE ) ) ) ) ;
rank: 67
score: 99.46819747121711
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) . ) ) ) ;
rank: 68
score: 99.58814586292614
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . get ( ) ;
rank: 68
score: 99.5867919921875
patch: ( standard CaMeL Deviation < Math . sqrt ( $NUMBER$ . 0 * $NUMBER$ . 0 ) ) ) ) ;
rank: 68
score: 99.58060302734376
patch: ( standard CaMeL Deviation - Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ;
rank: 68
score: 99.55427856445313
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) + $NUMBER$ ) ;
rank: 69
score: 99.58650716145833
patch: ( ( $NUMBER$ . 0 ) - standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 69
score: 99.58027787642045
patch: $NUMBER$ . 0 ) + ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 69
score: 99.55271402994792
patch: ( double ) standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) )
rank: 69
score: 99.50991339432566
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . - $NUMBER$ ) ) ) ) ;
rank: 69
score: 99.5053955078125
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . length ( ) ) ) ) ) ;
rank: 69
score: 99.49939778645833
patch: ( $NUMBER$ . 0 ) ) / ( $NUMBER$ . 0 ) ) ;
rank: 69
score: 99.46602172851563
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) . $NUMBER$ ) ) ) ;
rank: 70
score: 99.58575439453125
patch: ( $NUMBER$ . 0 * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 70
score: 99.58417302911931
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 * $NUMBER$ . 1 ) ) ) ) ;
rank: 70
score: 99.579150390625
patch: 1 . 0 ) + standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 70
score: 99.50875091552734
patch: ( $NUMBER$ * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 70
score: 99.49910695929276
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) : 0 . 0 ) ;
rank: 70
score: 99.46517333984374
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ == $NUMBER$ . 0 ) ) ) ) ;
rank: 71
score: 99.55093044704861
patch: ( ( Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ) ;
rank: 71
score: 99.54866943359374
patch: ( double ) standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) + ;
rank: 71
score: 99.50443725585937
patch: ( int ) Math . sqrt ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 71
score: 99.496826171875
patch: ( Math . sqrt ( $NUMBER$ . 0 ) / ( $NUMBER$ . 0 ) ) ) ) ;
rank: 72
score: 99.58556019176136
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) - $NUMBER$ . $NUMBER$ ;
rank: 72
score: 99.57634943181819
patch: ( standard CaMeL Deviation * Math . sqrt ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 72
score: 99.5506083170573
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) , 0 . $NUMBER$ ) ;
rank: 72
score: 99.54815673828125
patch: ( $NUMBER$ . 0 * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 72
score: 99.51732720269098
patch: ( standard CaMeL Deviation : Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 72
score: 99.50370958116319
patch: ( 0 . 0 * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 72
score: 99.49637451171876
patch: ( Math . sqrt ( $NUMBER$ . 0 ) * ( $NUMBER$ . 0 ) ) ) ) ;
rank: 73
score: 99.58523559570312
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + ) ;
rank: 73
score: 99.54880689538044
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ) ; }
rank: 73
score: 99.54689331054688
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) - 1 ) ;
rank: 73
score: 99.51714409722223
patch: ( standard CaMeL Deviation * Integer . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 74
score: 99.5851717862216
patch: ( ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ) ;
rank: 74
score: 99.57887961647727
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 + $NUMBER$ . 1 ) ) ) ) ;
rank: 74
score: 99.54868386008523
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ? 0 . $NUMBER$ ;
rank: 74
score: 99.5443115234375
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) / $NUMBER$ ;
rank: 74
score: 99.5150146484375
patch: ( ( ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ) ) ;
rank: 74
score: 99.46280517578126
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ , standard CaMeL Deviation ) ) ) ) ;
rank: 75
score: 99.58447265625
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) , ) ) ;
rank: 75
score: 99.54822887073864
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + 1 . 0 ;
rank: 75
score: 99.543408203125
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) * $NUMBER$ ) ;
rank: 75
score: 99.51378716362848
patch: ( standard CaMeL Deviation ] Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 76
score: 99.58420817057292
patch: ( ( $NUMBER$ . 0 + standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 76
score: 99.57749245383523
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 + 1 . 0 ) ) ) ) ;
rank: 76
score: 99.54276958264802
patch: ( standard CaMeL Deviation * Math . sqrt ( 1 . 0 ) ) ) ) ) ;
rank: 76
score: 99.50047607421875
patch: ( $STRING$ * standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 76
score: 99.49941534745066
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) / ) ;
rank: 76
score: 99.49420928955078
patch: ( Math . sqrt ( ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 77
score: 99.5833231608073
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + ( $NUMBER$ . 0 ) ;
rank: 77
score: 99.57661576704545
patch: ( Math . sqrt ( $NUMBER$ . 0 * standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ) ;
rank: 77
score: 99.5739513578869
patch: ( float ) standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ;
rank: 77
score: 99.5463230298913
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + 0 . $NUMBER$ ) ;
rank: 77
score: 99.50002872242646
patch: standard CaMeL Deviation ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 77
score: 99.49839381167763
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) null ) ;
rank: 78
score: 99.5750732421875
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 : $NUMBER$ . 0 ) ) ) ) ;
rank: 78
score: 99.57173461914063
patch: $NUMBER$ . 0 ) , standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 78
score: 99.54585404829545
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . $NUMBER$ ) ) ) ) ) ;
rank: 78
score: 99.51068436472039
patch: ( standard CaMeL Deviation ] * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 78
score: 99.49835205078125
patch: ( float ) Math . sqrt ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 78
score: 99.49057442801339
patch: ( Math . sqrt ( 1 . 0 ) ) ) ) ;
rank: 79
score: 99.57398570667614
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 . 1 ) ) ) ) ;
rank: 79
score: 99.5408935546875
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) / ) ;
rank: 79
score: 99.51036071777344
patch: ( ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 79
score: 99.49344675164474
patch: ( double ) Math . sqrt ( $NUMBER$ . 0 - $NUMBER$ . 0 ) ) ) ;
rank: 79
score: 99.4903076171875
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) * 1 ;
rank: 80
score: 99.58130900065105
patch: ( ( $NUMBER$ . 0 ) + standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 80
score: 99.57339332217262
patch: ( ( * standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 80
score: 99.53651428222656
patch: $NUMBER$ . 0 * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 80
score: 99.49307861328126
patch: ( $STRING$ + standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 80
score: 99.49278157552084
patch: ( standard CaMeL Deviation * Math . sqrt ( ) ) ) ) ;
rank: 81
score: 99.5812276204427
patch: ( $NUMBER$ . 0 ) , ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 81
score: 99.5707674893466
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) - standard CaMeL Deviation ) ) ) ;
rank: 81
score: 99.50581190321181
patch: ( standard CaMeL Deviation == Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 81
score: 99.49236382378473
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . null ) ) ) ) ;
rank: 81
score: 99.49200118215461
patch: ( standard CaMeL Deviation * float ) Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 81
score: 99.48875668174342
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ? $NUMBER$
rank: 81
score: 99.45379638671875
patch: ( $NUMBER$ * standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 82
score: 99.5811434659091
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . start ( ) ;
rank: 82
score: 99.5448506673177
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) + 0 . 0 ;
rank: 82
score: 99.53536184210526
patch: ( double ) standard CaMeL Deviation * Math . round ( $NUMBER$ . 0 ) ) ) ;
rank: 82
score: 99.5035400390625
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) 1 ) ) ) ;
rank: 82
score: 99.45094700863487
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; *
rank: 83
score: 99.57968971946023
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) : $NUMBER$ . $NUMBER$ ;
rank: 83
score: 99.57293379934211
patch: ( standard CaMeL Deviation > Math . sqrt ( $NUMBER$ . 0 ] ) ) ) ) ;
rank: 83
score: 99.56749378551136
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 << $NUMBER$ . 0 ) ) ) ) ;
rank: 83
score: 99.54343483664773
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) - 0 . 0 ;
rank: 83
score: 99.535302734375
patch: $NUMBER$ . 0 ) ) + standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ;
rank: 83
score: 99.50251850328948
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) $NUMBER$ ) ) ) ;
rank: 83
score: 99.49018940172698
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) 0 ) ;
rank: 83
score: 99.48643188476562
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) * 0 ;
rank: 84
score: 99.57894897460938
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . standard CaMeL Deviation ( ) ;
rank: 84
score: 99.57285766601562
patch: ( standard CaMeL Deviation > Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ;
rank: 84
score: 99.56746049360795
patch: 1 . 0 ) * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 84
score: 99.48907791940789
patch: ( double ) Math . sqrt ( $NUMBER$ . 0 / $NUMBER$ . 0 ) ) ) ;
rank: 85
score: 99.57880859375
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) , $NUMBER$ ) ) ;
rank: 85
score: 99.54252115885417
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) , 0 . 0 ) ) ;
rank: 85
score: 99.49614122178819
patch: ( ( double * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 85
score: 99.48330849095395
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) )
rank: 85
score: 99.45062866210938
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ > $NUMBER$ . 0 ) ) ) ) ;
rank: 86
score: 99.57627360026042
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) , $NUMBER$ . 0 ) ) ) ;
rank: 86
score: 99.57207697088069
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 % $NUMBER$ . 0 ) ) ) ) ;
rank: 86
score: 99.5656405362216
patch: ( standard CaMeL Deviation * Math . sqrt ( standard CaMeL Deviation / $NUMBER$ . 0 ) ) ) ) ;
rank: 86
score: 99.53997247869319
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 1 ) ) ) ) ) ;
rank: 86
score: 99.48812527126736
patch: ( standard CaMeL Deviation ? Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 86
score: 99.48303833007813
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) : x ;
rank: 86
score: 99.45042509191177
patch: ( standard CaMeL Deviation * ( standard CaMeL Deviation . 0 ) ) ) ) ;
rank: 87
score: 99.57587890625
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . $NUMBER$ ;
rank: 87
score: 99.571533203125
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 - standard CaMeL Deviation ) ) ) ) ;
rank: 87
score: 99.53089599609375
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 - $NUMBER$ ) ) ) ) ;
rank: 87
score: 99.4942626953125
patch: ( ( float ) Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 87
score: 99.48584702435662
patch: ( double ) Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ;
rank: 87
score: 99.48283081054687
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + x ;
rank: 87
score: 99.48233032226562
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) && true ) ;
rank: 87
score: 99.4502017372533
patch: ( this . Erf . erf ( ( x - mean ) ) ) ) ) ;
rank: 88
score: 99.57542928059895
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) , ( $NUMBER$ . 0 ) ) ) ) ;
rank: 88
score: 99.56871448863636
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) * standard CaMeL Deviation ;
rank: 88
score: 99.56476384943181
patch: ( standard CaMeL Deviation * Math . sqrt ( standard CaMeL Deviation * standard CaMeL Deviation ) ) ) ) ;
rank: 88
score: 99.5385030110677
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 . 0 ) ) ) ) ) ;
rank: 88
score: 99.52911698190789
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . ;
rank: 88
score: 99.4822265625
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) . length ) ) ;
rank: 88
score: 99.45008609169408
patch: - ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 89
score: 99.57539506392045
patch: $NUMBER$ . 0 ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 89
score: 99.568115234375
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 89
score: 99.5641202059659
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) * 0 . 0 ) ;
rank: 89
score: 99.5285580283717
patch: ( double ) standard CaMeL Deviation * Math . sqrt ( 0 . 0 ) ) ) ;
rank: 89
score: 99.48414522058823
patch: ( int ) ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 89
score: 99.4811767578125
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) || ( $NUMBER$ . 0 ) ) ;
rank: 90
score: 99.57464599609375
patch: ( standard CaMeL Deviation ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 90
score: 99.56770405016448
patch: ( double ) Math . sqrt ( $NUMBER$ . 0 * $NUMBER$ . 0 ) ) ) ;
rank: 90
score: 99.49233111213235
patch: * standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 90
score: 99.48385281032986
patch: ( double ) ( double ) Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 90
score: 99.47953965928819
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) : 0 . $NUMBER$ ;
rank: 91
score: 99.57456461588542
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) / ( $NUMBER$ . 0 ) ;
rank: 91
score: 99.56711647727273
patch: ( standard CaMeL Deviation < Math . sqrt ( $NUMBER$ . 0 + $NUMBER$ . 0 ) ) ) ) ;
rank: 91
score: 99.56187855113636
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) , 1 . 0 ) ;
rank: 91
score: 99.52567138671876
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 - double ) ) ) ) ;
rank: 91
score: 99.48236694335938
patch: ( double ) Math . sqrt ( Double . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 91
score: 99.48049587673611
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . min ) ) ) ) ;
rank: 91
score: 99.47716064453125
patch: ( $NUMBER$ . 0 ) ) ) * ( Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 92
score: 99.573974609375
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) , ( $NUMBER$ . 0 ) ) ;
rank: 92
score: 99.56706099076705
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 | $NUMBER$ . 0 ) ) ) ) ;
rank: 92
score: 99.53624267578125
patch: ( standard CaMeL Deviation * Math . sqrt ( 1 . 0 . 0 ) ) ) ) ;
rank: 92
score: 99.48224954044117
patch: ( ( ) * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 92
score: 99.47946166992188
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + false ;
rank: 92
score: 99.47630208333334
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) false ) ;
rank: 92
score: 99.43777626439145
patch: ( standard CaMeL Deviation * ( standard CaMeL Deviation * standard CaMeL Deviation ) ) ) ) ;
rank: 93
score: 99.56676664806548
patch: ( ( float ) standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 93
score: 99.53504527698864
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) , 0 . 0 ) ) ) ;
rank: 93
score: 99.5244140625
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) * /
rank: 93
score: 99.48075358072917
patch: ( standard CaMeL Deviation * Math . sqrt ( $STRING$ . 0 ) ) ) ) ;
rank: 93
score: 99.47933799342105
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) + ) ;
rank: 93
score: 99.47596499794408
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) * 1
rank: 93
score: 99.43758352179276
patch: ( new standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 94
score: 99.53443545386905
patch: Double . sqrt ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 94
score: 99.52439880371094
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 94
score: 99.4803466796875
patch: Math . sqrt ( 1 . 0 ) ) ) ;
rank: 94
score: 99.47889468544408
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ? ) ;
rank: 95
score: 99.57212524414062
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . 1 ;
rank: 95
score: 99.56547407670455
patch: ( standard CaMeL Deviation * Math . min ( $NUMBER$ . 0 , 1 . 0 ) ) ) ) ;
rank: 95
score: 99.48897298177083
patch: ( 1 . 0 ) * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 95
score: 99.48009440104167
patch: ( Double ) Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 95
score: 99.47463553292411
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) )
rank: 96
score: 99.57166544596355
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) * ( $NUMBER$ . 0 ) ) ) ;
rank: 96
score: 99.56513006036931
patch: ( standard CaMeL Deviation * Math . max ( $NUMBER$ . 0 , $NUMBER$ . 0 ) ) ) ) ;
rank: 96
score: 99.5579833984375
patch: ( standard CaMeL Deviation + standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 96
score: 99.4880306846217
patch: ( standard CaMeL Deviation * - Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 96
score: 99.47507838199013
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ $NUMBER$ . 0 ) ) ) ) ;
rank: 96
score: 99.46855163574219
patch: ( Math . sqrt ( $NUMBER$ != 0 . 0 ) ) ) ) ;
rank: 97
score: 99.5333760579427
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) , 0 . $NUMBER$ ) ) ;
rank: 97
score: 99.52264763327206
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) / $NUMBER$ . 0 ;
rank: 97
score: 99.47940767728366
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 97
score: 99.47195595189145
patch: ( standard CaMeL Deviation * Erf . erf ( $NUMBER$ . 0 ) ) ) ) ;
rank: 97
score: 99.46788194444444
patch: ( Math . sqrt ( standard CaMeL Deviation * 0 . 0 ) ) ) ) ;
rank: 98
score: 99.55596368963069
patch: $NUMBER$ . 0 , ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 98
score: 99.53333536783855
patch: ( ( this . standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ) ;
rank: 98
score: 99.48632094439338
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) .
rank: 98
score: 99.47931315104167
patch: ( * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 98
score: 99.47128634982639
patch: Math . sqrt ( $NUMBER$ . 0 ) ) / ( $NUMBER$ . 0 ) ) ;
rank: 99
score: 99.57071940104167
patch: ( 1 . 0 ) ) , ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 99
score: 99.56414240056819
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 : 1 . 0 ) ) ) ) ;
rank: 99
score: 99.5558194247159
patch: ( standard CaMeL Deviation * Math . sqrt ( standard CaMeL Deviation * 1 . 0 ) ) ) ) ;
rank: 99
score: 99.52232666015625
patch: $NUMBER$ . 0 ) / standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 99
score: 99.47900390625
patch: Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ;
rank: 99
score: 99.47108289930556
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) * ;
rank: 99
score: 99.46641031901042
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + 0 . 0 ;
rank: 100
score: 99.5694580078125
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) / standard CaMeL Deviation ) ) ;
rank: 100
score: 99.56305486505681
patch: ( 0 . 0 * standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 100
score: 99.55539772727273
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) + 1 . 0 ) ) ;
rank: 100
score: 99.53116861979167
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) - 0 . $NUMBER$ ;
rank: 100
score: 99.52195338199013
patch: $NUMBER$ . ) * standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 100
score: 99.48384602864583
patch: ( 0 . 0 ) * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 100
score: 99.47871398925781
patch: standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . $NUMBER$ ) ) ) ;
rank: 100
score: 99.46902286305146
patch: ( standard CaMeL Deviation * Math . sqrt ( ) . 0 ) ) ) ;
rank: 100
score: 99.46593560112848
patch: ( Math . sqrt ( ) . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 100
score: 99.4324951171875
patch: ( byte ) standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 101
score: 99.56820824032738
patch: ( $NUMBER$ . 0 + Erf . erf ( ( x - mean ) ) ) ) ) ;
rank: 101
score: 99.56288840553977
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . $NUMBER$ * $NUMBER$ . 0 ) ) ) ) ;
rank: 101
score: 99.53021850585938
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) == 0 ) ;
rank: 101
score: 99.47783813476562
patch: ( ( 1 . 0 ) ) * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 102
score: 99.56786092122395
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . get CaMeL Id ( ) ;
rank: 102
score: 99.5627108487216
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 1 . 0 ) ) ) ) ;
rank: 102
score: 99.55465087890624
patch: ( double ) ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 102
score: 99.530029296875
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) + 0 . $NUMBER$ ) ;
rank: 102
score: 99.48109837582237
patch: ( ( ( standard CaMeL Deviation * 0 . 0 ) ) . 0 ) ) ) ;
rank: 102
score: 99.432080078125
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ + standard CaMeL Deviation ) ) ) ) ;
rank: 103
score: 99.56756591796875
patch: ( $NUMBER$ . 0 ) + ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 103
score: 99.56224476207386
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 . $NUMBER$ ) ) ) ) ;
rank: 103
score: 99.51890733506944
patch: ( double ) standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . ) ) ) ;
rank: 103
score: 99.46759354440789
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . - mean ) ) ) ) ;
rank: 103
score: 99.46339818050987
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + 0 . $NUMBER$ ) ;
rank: 104
score: 99.56679465553977
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) , $NUMBER$ . $NUMBER$ ) ;
rank: 104
score: 99.56126819957386
patch: ( standard CaMeL Deviation > Math . sqrt ( $NUMBER$ . 0 + standard CaMeL Deviation ) ) ) ) ;
rank: 104
score: 99.55434348366477
patch: ( standard CaMeL Deviation * Math . min ( $NUMBER$ . 0 + $NUMBER$ . 0 ) ) ) ) ;
rank: 104
score: 99.5266446200284
patch: ( ( standard CaMeL Deviation * Math . sqrt ( 1 . 0 . 0 ) ) ) ) ) ;
rank: 104
score: 99.51778564453124
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) + $NUMBER$ ) ) ;
rank: 104
score: 99.47990337171052
patch: ( ( ( double ) Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 104
score: 99.46311950683594
patch: ( Math . sqrt ( $NUMBER$ + $NUMBER$ . 0 ) ) ) ) ;
rank: 105
score: 99.5664774576823
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) , standard CaMeL Deviation ) ;
rank: 105
score: 99.56075439453124
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) . 1 ) ) ) ;
rank: 105
score: 99.55310639880952
patch: ( double ) standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . $NUMBER$ . 0 ) ) ) ;
rank: 105
score: 99.51729736328124
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) * / ) ;
rank: 105
score: 99.46534559461806
patch: ( standard CaMeL Deviation * standard CaMeL Deviation ( $NUMBER$ . 0 ) ) ) ) ;
rank: 105
score: 99.46297200520833
patch: ( $NUMBER$ . 0 ) ) ) ;
rank: 106
score: 99.5528231534091
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 + $NUMBER$ ) ) ) ) ;
rank: 106
score: 99.5170962685033
patch: ( standard CaMeL Deviation $NUMBER$ * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 107
score: 99.56634521484375
patch: ( $NUMBER$ . 0 ) ) ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 107
score: 99.5520907315341
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) + $NUMBER$ . 0 ) ) ;
rank: 107
score: 99.52394409179688
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) , 0 ) ;
rank: 107
score: 99.5168816061581
patch: ( standard CaMeL Deviation ) Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 107
score: 99.47828584558823
patch: - standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 107
score: 99.47594451904297
patch: ( double ) Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 107
score: 99.46340762867646
patch: ( $NUMBER$ . 0 ) ) / ( ( $NUMBER$ . 0 ) ) ) ;
rank: 107
score: 99.46110704210069
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + 0 . $NUMBER$ ;
rank: 107
score: 99.43000873766448
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ 1 . 0 ) ) ) ) ;
rank: 108
score: 99.56552956321023
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 , 0 . 0 ) ) ) ) ;
rank: 108
score: 99.55790571732955
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 / $NUMBER$ . $NUMBER$ ) ) ) ) ;
rank: 108
score: 99.55082563920455
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) / $NUMBER$ . 0 ;
rank: 108
score: 99.46290347450658
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ <= 0 . 0 ) ) ) ;
rank: 109
score: 99.5654296875
patch: ( $NUMBER$ . 0 ) ) ) . erf ( ( x - mean ) ) ;
rank: 109
score: 99.55756170099431
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 109
score: 99.55030406605114
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) * 1 . 0 ) ;
rank: 109
score: 99.52379261363636
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) + $NUMBER$ ;
rank: 109
score: 99.47728814019098
patch: ( standard CaMeL Deviation * Float . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 109
score: 99.47548130580357
patch: ( Math . sqrt ( $NUMBER$ . 1 ) ) ) ) ;
rank: 109
score: 99.45909359580592
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) - $NUMBER$
rank: 110
score: 99.5653963955966
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . trim ( ) ;
rank: 110
score: 99.5236328125
patch: ( standard CaMeL Deviation * Math . Double . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 110
score: 99.5161197060033
patch: ( double ) standard CaMeL Deviation * Math . ceil ( $NUMBER$ . 0 ) ) ) ;
rank: 110
score: 99.47684054904514
patch: ( standard CaMeL Deviation * Long . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 110
score: 99.46261935763889
patch: ( standard CaMeL Deviation * Math . sqrt ( erf . 0 ) ) ) ) ;
rank: 110
score: 99.45845112047698
patch: ( $NUMBER$ . 0 ) ) ) : 0 . $NUMBER$ * ( $NUMBER$ . 0 ) ;
rank: 111
score: 99.56534830729167
patch: ( 0 . 0 ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 111
score: 99.55017700195313
patch: $NUMBER$ . 0 ) - standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 111
score: 99.51597193667763
patch: ( standard CaMeL Deviation - Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 111
score: 99.46107884457237
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) != ) ;
rank: 112
score: 99.56483043323864
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) . erf ( ) ) ;
rank: 112
score: 99.55739524147727
patch: ( standard CaMeL Deviation * Math . min ( $NUMBER$ . 0 ) , $NUMBER$ . 0 ) ) ) ;
rank: 112
score: 99.51533588610198
patch: ( double ) standard CaMeL Deviation / Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 112
score: 99.47574191623264
patch: ( standard CaMeL Deviation != Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 112
score: 99.46095677425987
patch: ( standard CaMeL Deviation * ( standard CaMeL Deviation > 0 . 0 ) ) ) ) ;
rank: 113
score: 99.55731756036931
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 << 0 . 0 ) ) ) ) ;
rank: 113
score: 99.54982688210227
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) - $NUMBER$ . 0 ) ) ) ;
rank: 113
score: 99.47522690716912
patch: ( standard CaMeL Deviation * Math . sqrt - $NUMBER$ . 0 ) ) ) ;
rank: 113
score: 99.47272338867188
patch: standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 + $NUMBER$ . 0 ) ) ) ;
rank: 113
score: 99.46064588758681
patch: ( this . erf * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 113
score: 99.4550717002467
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + 1
rank: 113
score: 99.42231830797698
patch: ( , standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 114
score: 99.56362516983695
patch: ( standard CaMeL Deviation * Math . sqrt ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 114
score: 99.55701793323864
patch: ( standard CaMeL Deviation > 0 . 0 ) * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 114
score: 99.47346327039931
patch: ( standard CaMeL Deviation * 0 . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 114
score: 99.47242431640625
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . $NUMBER$ ) ) ) ) ) ;
rank: 114
score: 99.45901828342014
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) / ;
rank: 114
score: 99.45505777994792
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) :
rank: 114
score: 99.42218627929688
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ += $NUMBER$ . 0 ) ) ) ) ;
rank: 115
score: 99.5631612141927
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . ( $NUMBER$ . $NUMBER$ ) ;
rank: 115
score: 99.55623002485795
patch: ( standard CaMeL Deviation > Math . sqrt ( $NUMBER$ . 0 * 0 . 0 ) ) ) ) ;
rank: 115
score: 99.54923872514205
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) + standard CaMeL Deviation ) ) ) ;
rank: 115
score: 99.521484375
patch: ( standard CaMeL Deviation * Math . sqrt ( ( $NUMBER$ . 0 . 0 ) ) ) ) ) ;
rank: 115
score: 99.47215576171875
patch: ( double ) standard CaMeL Deviation ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 115
score: 99.45840614720395
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ != 0 . 0 ) ) ) ;
rank: 115
score: 99.42046042049633
patch: standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 116
score: 99.5627950032552
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) , $NUMBER$ . 0 ) ) ;
rank: 116
score: 99.54921653053977
patch: $NUMBER$ . 0 ) ) + ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 116
score: 99.5211181640625
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) : 0 . 0 ;
rank: 116
score: 99.47118377685547
patch: Math . sqrt ( $NUMBER$ . 0 + $NUMBER$ . 0 ) ) ) ;
rank: 116
score: 99.46981472439236
patch: ( standard CaMeL Deviation * Math . sqrt ( Double . 0 ) ) ) ) ;
rank: 116
score: 99.42024536132813
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) - } ) ;
rank: 117
score: 99.5625
patch: ( $NUMBER$ . 0 ) ) ) - ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 117
score: 99.54889787946429
patch: ( double ) ( standard CaMeL Deviation / Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 117
score: 99.5199862393466
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) + 0 . 0 ) ) ;
rank: 117
score: 99.51449764476104
patch: ( $NUMBER$ . 0 * standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ;
rank: 117
score: 99.46882067228618
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ ) 0 . 0 ) ) ) ;
rank: 117
score: 99.45137023925781
patch: ( Math . sqrt ( $NUMBER$ < $NUMBER$ . 0 ) ) ) ) ;
rank: 117
score: 99.41981811523438
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; * /
rank: 118
score: 99.56223366477273
patch: ( $NUMBER$ . 0 ) ) ) + standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ;
rank: 118
score: 99.5548828125
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 << $NUMBER$ ) ) ) ) ;
rank: 118
score: 99.47035618832237
patch: ( double ) standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 1 ) ) ) ;
rank: 118
score: 99.46616617838542
patch: ( standard CaMeL Deviation > Math . sqrt ( 0 . 0 ) ) ) ) ;
rank: 118
score: 99.45426671645221
patch: ( standard CaMeL Deviation * ( standard CaMeL Deviation * $NUMBER$ ) ) ) ) ;
rank: 118
score: 99.44776746961806
patch: ( Math . sqrt ( $NUMBER$ . 0 | $NUMBER$ . 0 ) ) ) ) ;
rank: 119
score: 99.56209663722827
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) 0 . 0 ) ) ) ) ;
rank: 119
score: 99.55485395951705
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 & $NUMBER$ . 0 ) ) ) ) ;
rank: 119
score: 99.5480724516369
patch: ( double ) ( standard CaMeL Deviation + Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 119
score: 99.51963297526042
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 1 . 0 ) ) ) ) ) ;
rank: 119
score: 99.51407470703126
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) * ;
rank: 119
score: 99.45248252467105
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) - ) ;
rank: 120
score: 99.56129092261905
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . return 0 ;
rank: 120
score: 99.54784046519886
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) / $NUMBER$ . 0 ) ) ;
rank: 120
score: 99.51949637276786
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ] ) ) ) ) ;
rank: 120
score: 99.51363975123355
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . $NUMBER$ ) ) ) ) ) ;
rank: 120
score: 99.45207776521382
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 SIZE ) ) ) ) ;
rank: 120
score: 99.44701334635417
patch: ( $NUMBER$ . 0 ) ) * ( $NUMBER$ . 0 ) ) ;
rank: 120
score: 99.41795518663194
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ * $NUMBER$ ) ) ) ) ;
rank: 121
score: 99.5607401529948
patch: ( $NUMBER$ . 0 ) ) + ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 121
score: 99.54766555059524
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 + $NUMBER$ . 0 ) ) ) ;
rank: 121
score: 99.51923217773438
patch: ( standard CaMeL Deviation . Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ;
rank: 121
score: 99.46309621710526
patch: ( standard CaMeL Deviation * ! Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 121
score: 99.45188395182292
patch: ( standard CaMeL Deviation * Math . read ( $NUMBER$ . 0 ) ) ) ) ;
rank: 121
score: 99.44611273871527
patch: ( $NUMBER$ . 0 ) / Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 121
score: 99.41727905273437
patch: ( standard CaMeL Deviation * Math . sqrt ( standard CaMeL Deviation * $NUMBER$ ) ) ) ) ;
rank: 122
score: 99.55905983664773
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) + standard CaMeL Deviation ) ;
rank: 122
score: 99.553466796875
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 * Math . 0 ) ) ) ) ;
rank: 122
score: 99.5475841703869
patch: ( standard CaMeL Deviation * standard CaMeL Deviation * standard CaMeL Deviation * standard CaMeL Deviation ) ) ) ;
rank: 122
score: 99.51311645507812
patch: ( double ) standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; ;
rank: 122
score: 99.46933322482639
patch: ( standard CaMeL Deviation % Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 122
score: 99.46260892427884
patch: ( standard CaMeL Deviation * Math . 0 ) ) ) ;
rank: 123
score: 99.51854359019886
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) == 0 . $NUMBER$ ) ;
rank: 123
score: 99.46906195746527
patch: ( 0 . 0 + Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 123
score: 99.46241590711806
patch: ( standard CaMeL Deviation * Math . decode ( $NUMBER$ . 0 ) ) ) ) ;
rank: 123
score: 99.4487240439967
patch: ( $NUMBER$ . 0 + Erf . erf ( $NUMBER$ . 0 ) ) ) ) ;
rank: 123
score: 99.44427490234375
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) : 0 ;
rank: 123
score: 99.416552734375
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; * ?
rank: 124
score: 99.55874633789062
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + $NUMBER$ . $NUMBER$ . $NUMBER$ ;
rank: 124
score: 99.44822291324013
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) $STRING$ ) ;
rank: 124
score: 99.44419759114584
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) true ) ;
rank: 125
score: 99.55816095525569
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) : 1 . $NUMBER$ ;
rank: 125
score: 99.55140445106908
patch: ( standard CaMeL Deviation > Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 125
score: 99.51764879728618
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) false ;
rank: 125
score: 99.51285400390626
patch: ( float ) standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 125
score: 99.46085611979167
patch: ( standard CaMeL Deviation ) * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 125
score: 99.4478759765625
patch: ( standard CaMeL Deviation * standard CaMeL Deviation . 0 ) ) ) ;
rank: 125
score: 99.44342400045956
patch: ( ( x - mean ) / ( $NUMBER$ . 0 ) ) ) ) ;
rank: 126
score: 99.55769856770833
patch: ( 1 . 0 ) ) * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 126
score: 99.55031516335227
patch: ( standard CaMeL Deviation * Math . round ( $NUMBER$ . 0 * $NUMBER$ . 0 ) ) ) ) ;
rank: 126
score: 99.51696166992187
patch: ( this . erf ( ) * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 126
score: 99.51209716796875
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 , $NUMBER$ ) ) ) ) ;
rank: 126
score: 99.46847534179688
patch: ( double ) 0 . 0 ) ) ;
rank: 126
score: 99.45990953947368
patch: ( standard CaMeL Deviation * Math . sqrt ( 0 . 0 ) ) ) ) ) ;
rank: 126
score: 99.4466552734375
patch: ( standard CaMeL Deviation * Math . compare ( $NUMBER$ . 0 ) ) ) ) ;
rank: 126
score: 99.44337864925987
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + 0 . 0 ) ;
rank: 127
score: 99.51636759440105
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) + 1 . $NUMBER$ ;
rank: 127
score: 99.51130114103618
patch: ( standard CaMeL Deviation / Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 127
score: 99.46815400965073
patch: Math . sqrt ( $NUMBER$ . max ( $NUMBER$ . 0 ) ) ) ) ;
rank: 127
score: 99.45979139539931
patch: ( standard CaMeL Deviation * this . sqrt ( 0 . 0 ) ) ) ) ;
rank: 127
score: 99.443115234375
patch: ( $NUMBER$ . 0 + $NUMBER$ . 0 ) ) ) ;
rank: 127
score: 99.41555786132812
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ & $NUMBER$ . 0 ) ) ) ) ;
rank: 128
score: 99.55689538043478
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . get ( $NUMBER$ ) ;
rank: 128
score: 99.54534357244319
patch: ( double ) double ) ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 128
score: 99.51606677827381
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . ) ) ) ) ) ;
rank: 128
score: 99.51023236443015
patch: / standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 128
score: 99.44356282552083
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . true ) ) ) ) ;
rank: 128
score: 99.44196319580078
patch: ( $NUMBER$ . Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 129
score: 99.54765181107955
patch: ( standard CaMeL Deviation <= Math . sqrt ( $NUMBER$ . 0 * $NUMBER$ . 0 ) ) ) ) ;
rank: 129
score: 99.5452547940341
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + $NUMBER$ . 0 ;
rank: 129
score: 99.50799005681819
patch: ( standard CaMeL Deviation * $NUMBER$ ) ) ) ;
rank: 129
score: 99.45489501953125
patch: ( standard CaMeL Deviation *= Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 129
score: 99.44173855251736
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) * 0 . 0 ) ;
rank: 129
score: 99.4151547080592
patch: ( || standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 130
score: 99.55601917613636
patch: 0 . 0 ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 130
score: 99.54728560014205
patch: ( standard CaMeL Deviation * Math . sqrt * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 130
score: 99.5147372159091
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) + 0 . 0 ) ) ) ;
rank: 130
score: 99.507568359375
patch: ( double ) ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ;
rank: 130
score: 99.45298365542763
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; _
rank: 130
score: 99.44057103207237
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) : 1
rank: 130
score: 99.4142822265625
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ | $NUMBER$ . 0 ) ) ) ) ;
rank: 131
score: 99.5472745028409
patch: ( standard CaMeL Deviation ? Math . sqrt ( $NUMBER$ . 0 * $NUMBER$ . 0 ) ) ) ) ;
rank: 131
score: 99.54325727982955
patch: ( double ) ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 131
score: 99.51472303602431
patch: Double . standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 131
score: 99.50709838867188
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) / $NUMBER$ ) ;
rank: 131
score: 99.45120578342014
patch: ( standard CaMeL Deviation | Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 131
score: 99.44139946831598
patch: ( standard CaMeL Deviation * Math . TRUE ( $NUMBER$ . 0 ) ) ) ) ;
rank: 131
score: 99.44025621916118
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) * 0
rank: 131
score: 99.41349712171052
patch: ( short ) standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 132
score: 99.5556003736413
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) : 0 . $NUMBER$ ) ;
rank: 132
score: 99.54695268110795
patch: ( standard CaMeL Deviation > $NUMBER$ . 0 ) * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 132
score: 99.4659359580592
patch: ( Double . sqrt ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 132
score: 99.45106724330357
patch: ( Integer . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 132
score: 99.44090511924342
patch: * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 132
score: 99.43888132195724
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) * *
rank: 132
score: 99.4132080078125
patch: ( x * standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 133
score: 99.55530802408855
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . get CaMeL State ( ) ;
rank: 133
score: 99.5468417080966
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 - 1 . 0 ) ) ) ) ;
rank: 133
score: 99.51322428385417
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) , 0 . 0 ) ;
rank: 133
score: 99.50663452148437
patch: ( standard CaMeL Deviation * $NUMBER$ ) * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 133
score: 99.46449681332237
patch: ( Math . sqrt ( Double . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 133
score: 99.45049085115132
patch: ( ( * sqrt * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 133
score: 99.44020589192708
patch: ( standard CaMeL Deviation * Math . FALSE ( $NUMBER$ . 0 ) ) ) ) ;
rank: 133
score: 99.43832736545139
patch: ( Math . sqrt ( $NUMBER$ . 0 ) + $NUMBER$ . 0 ) ) ) ;
rank: 134
score: 99.55470969460227
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . clone ( ) ;
rank: 134
score: 99.54675874255952
patch: ( * standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ;
rank: 134
score: 99.54033868963069
patch: ( standard CaMeL Deviation / Math . sqrt ( $NUMBER$ . 0 + $NUMBER$ . 0 ) ) ) ) ;
rank: 134
score: 99.50617065429688
patch: ( standard CaMeL Deviation * / Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 134
score: 99.4638916015625
patch: ( double ) Math . max ( $NUMBER$ . 0 ) ) ) ;
rank: 134
score: 99.43879968979779
patch: sqrt standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 134
score: 99.43729440789474
patch: ( $NUMBER$ . 0 ) ) ) + 0 . $NUMBER$ * ( $NUMBER$ . 0 ) ;
rank: 135
score: 99.55413818359375
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . ) ;
rank: 135
score: 99.5467196377841
patch: ( Math . sqrt ( $NUMBER$ . 0 + standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ) ;
rank: 135
score: 99.5130948153409
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) + 1 . $NUMBER$ ) ;
rank: 135
score: 99.5052554481908
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) * ) ) ;
rank: 135
score: 99.44988692434211
patch: ( ( standard CaMeL Deviation * Math . sqrt ( 0 . 0 ) ) ) ) ;
rank: 135
score: 99.43347886029412
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ? 0 . $NUMBER$
rank: 135
score: 99.41105346679687
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ >= $NUMBER$ . 0 ) ) ) ) ;
rank: 136
score: 99.5464754971591
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 || $NUMBER$ . 0 ) ) ) ) ;
rank: 136
score: 99.53928444602273
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 * $NUMBER$ ) ) ) ) ;
rank: 136
score: 99.50503058182566
patch: ( double ) standard CaMeL Deviation * Math . floor ( $NUMBER$ . 0 ) ) ) ;
rank: 136
score: 99.46299235026042
patch: ( $NUMBER$ . 0 / Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 136
score: 99.44986122532895
patch: ( standard CaMeL Deviation * ~ Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 136
score: 99.43754747178819
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) - ;
rank: 137
score: 99.55380249023438
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) . erf ( ) ;
rank: 137
score: 99.53896262428977
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) / standard CaMeL Deviation ) ) ) ;
rank: 137
score: 99.512392578125
patch: ( standard CaMeL Deviation * Math . sqrt ( Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ) ;
rank: 137
score: 99.50477294921875
patch: ( double ) double ) standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 137
score: 99.46291775173611
patch: ( Math . sqrt ( $NUMBER$ . 0 / $NUMBER$ . 0 ) ) ) ) ;
rank: 137
score: 99.44968775699013
patch: ( ( - sqrt * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 137
score: 99.40860788445724
patch: ( standard CaMeL Deviation * Math . sqrt ( * $NUMBER$ . 0 ) ) ) ) ;
rank: 138
score: 99.55364379882812
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) - $NUMBER$ ;
rank: 138
score: 99.54543235085227
patch: ( standard CaMeL Deviation * Math . min ( $NUMBER$ . 0 , standard CaMeL Deviation ) ) ) ) ;
rank: 138
score: 99.53888494318181
patch: ( standard CaMeL Deviation + Math . sqrt ( $NUMBER$ . 0 + $NUMBER$ . 0 ) ) ) ) ;
rank: 138
score: 99.512353515625
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) , false ) ;
rank: 138
score: 99.50406044407895
patch: ( double ) $NUMBER$ . 0 ) ) / Math . sqrt ( $NUMBER$ . 0 ) ;
rank: 138
score: 99.46209716796875
patch: ( Math . sqrt ( $NUMBER$ . 0 - $NUMBER$ . 0 ) ) ) ) ;
rank: 139
score: 99.54542125355114
patch: ( standard CaMeL Deviation * Math . min ( $NUMBER$ . 0 / $NUMBER$ . 0 ) ) ) ) ;
rank: 139
score: 99.511962890625
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 1 . 0 ) ) ) ) ;
rank: 139
score: 99.50169613486842
patch: ( double ) standard CaMeL Deviation * Math . abs ( $NUMBER$ . 0 ) ) ) ;
rank: 139
score: 99.46188354492188
patch: standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 1 ) ) ) ;
rank: 139
score: 99.4494564658717
patch: ( ( ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) . 0 ) ) ) ;
rank: 139
score: 99.43665835731908
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 + ) ) ) ) ;
rank: 139
score: 99.40804443359374
patch: ( $NUMBER$ , standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 140
score: 99.5530672940341
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) / standard CaMeL Deviation ) ;
rank: 140
score: 99.54536365327381
patch: ( Math . sqrt ( Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ) ;
rank: 140
score: 99.51189630681819
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + 0 . 1 ;
rank: 140
score: 99.50053100585937
patch: ( double ) standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ] ;
rank: 140
score: 99.46113024259868
patch: Math . sqrt ( $NUMBER$ . Math . sqrt ( 0 . 0 ) ) ) ) ;
rank: 140
score: 99.43473735608552
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . - x ) ) ) ) ;
rank: 140
score: 99.43007405598958
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) || 0 . 0 ) ;
rank: 140
score: 99.40788188733552
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; /
rank: 141
score: 99.55287679036458
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) * ( $NUMBER$ . 0 ) ;
rank: 141
score: 99.54475541548295
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . $NUMBER$ + $NUMBER$ . 0 ) ) ) ) ;
rank: 141
score: 99.53777521306819
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . $NUMBER$ . 0 . 0 ) ) ) ) ;
rank: 141
score: 99.50019274259868
patch: ( standard CaMeL Deviation * Math . max ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 141
score: 99.45999484592014
patch: standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ;
rank: 141
score: 99.44854736328125
patch: ( standard CaMeL Deviation * $NUMBER$ . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 142
score: 99.55263264973958
patch: ( ( 1 . 0 ) * standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 142
score: 99.51156005859374
patch: ( ( standard CaMeL Deviation . Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 142
score: 99.49830845424107
patch: ( standard CaMeL Deviation * / $NUMBER$ . 0 ) ) ) ;
rank: 142
score: 99.45919639185855
patch: ( double ) Math . sqrt ( standard CaMeL Deviation * 0 . 0 ) ) ) ;
rank: 142
score: 99.44698936060855
patch: ( ( Math . sqrt ( $NUMBER$ . 0 ) 1 . 0 ) ) ) ) ;
rank: 142
score: 99.4313103170956
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ,
rank: 142
score: 99.40715942382812
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) - x ) ;
rank: 143
score: 99.5523681640625
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) , $NUMBER$ . 0 ) ;
rank: 143
score: 99.51136363636364
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) = 0 . $NUMBER$ ;
rank: 143
score: 99.459130859375
patch: ( double ) Math . sqrt ( $NUMBER$ . $NUMBER$ ) ) ) ;
rank: 143
score: 99.44668918185764
patch: ( standard CaMeL Deviation && Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 143
score: 99.42731676603618
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) - 1
rank: 144
score: 99.55226440429688
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) , $NUMBER$ ) ;
rank: 144
score: 99.54446411132812
patch: 0 . 0 ) * standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 144
score: 99.53666548295455
patch: $NUMBER$ . 0 * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 144
score: 99.51063121448864
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) - 1 . $NUMBER$ ;
rank: 144
score: 99.49769287109375
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) / $NUMBER$ ) ) ;
rank: 144
score: 99.45890085320724
patch: ( double ) Math . sqrt ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ;
rank: 144
score: 99.4257748252467
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) == 0
rank: 144
score: 99.40616607666016
patch: ( this . erf ( ( x - mean ) ) ) ) ) ;
rank: 145
score: 99.54424493963069
patch: ( standard CaMeL Deviation < Math . sqrt ( $NUMBER$ . 0 * standard CaMeL Deviation ) ) ) ) ;
rank: 145
score: 99.53649321056548
patch: ( double ) this . standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 145
score: 99.51052989130434
patch: ( ( Erf . standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 145
score: 99.497607421875
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) * Math ;
rank: 145
score: 99.45872738486842
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ++ ) ) ) ) ;
rank: 145
score: 99.43077935112848
patch: ( standard CaMeL Deviation * Math . length ( $NUMBER$ . 0 ) ) ) ) ;
rank: 145
score: 99.42293972439236
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) * $NUMBER$ . 0 ) ;
rank: 146
score: 99.55135091145833
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . get CaMeL Name ( ) ;
rank: 146
score: 99.49669799804687
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) . 0 ) ;
rank: 146
score: 99.44416246916118
patch: ( standard CaMeL Deviation * Math . sqrt ( ( $NUMBER$ . 0 ) ) ) ) ;
rank: 146
score: 99.43059624565973
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . false ) ) ) ) ;
rank: 147
score: 99.55120849609375
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + mean ;
rank: 147
score: 99.53605513139205
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) * standard CaMeL Deviation ) ) ;
rank: 147
score: 99.49580463610198
patch: ( double ) 0 . 0 ) ) * Math . sqrt ( $NUMBER$ . 0 ) ;
rank: 147
score: 99.45831620065789
patch: ( standard CaMeL Deviation * Math . sqrt ( long ) 0 . 0 ) ) ) ;
rank: 147
score: 99.42935519748264
patch: ( standard CaMeL Deviation * Math . equals ( $NUMBER$ . 0 ) ) ) ) ;
rank: 147
score: 99.42189025878906
patch: ( Math . sqrt ( $NUMBER$ * $NUMBER$ . 0 ) ) ) ) ;
rank: 148
score: 99.5507175611413
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 148
score: 99.53484552556819
patch: ( standard CaMeL Deviation - Math . sqrt ( $NUMBER$ . 0 / $NUMBER$ . 0 ) ) ) ) ;
rank: 148
score: 99.50967009171195
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 148
score: 99.458154296875
patch: ( double ) Math . min ( $NUMBER$ . 0 ) ) ) ;
rank: 148
score: 99.42009534333882
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ? $STRING$
rank: 148
score: 99.4040860262784
patch: ( ( $NUMBER$ . 0 ) ) ) ) ;
rank: 149
score: 99.5430908203125
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 * $NUMBER$ ) ) ) ) ) ;
rank: 149
score: 99.5092136548913
patch: ( standard CaMeL Deviation * double ) standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 149
score: 99.4942691200658
patch: ( double ) standard CaMeL Deviation * Double . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 149
score: 99.44126539963942
patch: ( standard CaMeL Deviation * false . 0 ) ) ) ;
rank: 149
score: 99.42853104440789
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . - sqrt ) ) ) ) ;
rank: 149
score: 99.42008891858552
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ? 1
rank: 150
score: 99.55012817382813
patch: ( ( $NUMBER$ . 0 ) / Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 150
score: 99.50889282226562
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 + x ) ) ) ) ;
rank: 150
score: 99.49286209909539
patch: ( double ) $NUMBER$ . 0 * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 150
score: 99.45542689732143
patch: ( Math . sqrt ( $NUMBER$ . $NUMBER$ ) ) ) ) ;
rank: 150
score: 99.41940542367789
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 150
score: 99.40340576171874
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + * ;
rank: 151
score: 99.5482421875
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 0 0 ) ) ) ) ;
rank: 151
score: 99.50853382457386
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) / 0 . $NUMBER$ ) ;
rank: 151
score: 99.492724609375
patch: $NUMBER$ . 0 ) ) / standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ;
rank: 151
score: 99.45527086759868
patch: ( standard CaMeL Deviation * Math . sqrt ( float ) 0 . 0 ) ) ) ;
rank: 151
score: 99.43936960320724
patch: ( ( ( float ) Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 152
score: 99.53118341619319
patch: ( standard CaMeL Deviation - Math . sqrt ( $NUMBER$ . 0 + standard CaMeL Deviation ) ) ) ) ;
rank: 152
score: 99.50814819335938
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; break ;
rank: 152
score: 99.492529296875
patch: ( double ) standard CaMeL Deviation * * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 152
score: 99.45462799072266
patch: Math . sqrt ( $NUMBER$ . 0 - $NUMBER$ . 0 ) ) ) ;
rank: 152
score: 99.43846299913194
patch: ( ( float * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 152
score: 99.42714329769737
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ > 0 . 0 ) ) ) ;
rank: 153
score: 99.54129464285714
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ) ;
rank: 153
score: 99.5301025390625
patch: ( standard CaMeL Deviation + Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ;
rank: 153
score: 99.50779215494792
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) + 0 . 0 ) ;
rank: 153
score: 99.45446059283088
patch: ( ( * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 153
score: 99.42693770559211
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) / ) ) ;
rank: 153
score: 99.4185791015625
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + $NUMBER$ ;
rank: 153
score: 99.40132446289063
patch: ( standard CaMeL Deviation * Math . sqrt ( 0 . 0 ) . 0 ) ) ) ;
rank: 154
score: 99.5289306640625
patch: $NUMBER$ . 0 ) ) * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 154
score: 99.507568359375
patch: ( * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ) ;
rank: 154
score: 99.49207763671875
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) * $NUMBER$ ) ) ) ;
rank: 154
score: 99.45416937934027
patch: ( 0 . 0 ) ) * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 154
score: 99.43797471788194
patch: this . standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 154
score: 99.42683241102431
patch: ( standard CaMeL Deviation * Math . sqrt ( SIZE . 0 ) ) ) ) ;
rank: 154
score: 99.40098266601562
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ << $NUMBER$ . 0 ) ) ) ) ;
rank: 155
score: 99.53965541294643
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 * standard CaMeL Deviation ) ) ) ;
rank: 155
score: 99.52863103693181
patch: ( standard CaMeL Deviation * Math . sqrt ( standard CaMeL Deviation + $NUMBER$ . 0 ) ) ) ) ;
rank: 155
score: 99.50631713867188
patch: ( standard CaMeL Deviation * Math . standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 155
score: 99.42683241102431
patch: ( standard CaMeL Deviation * Math . start ( $NUMBER$ . 0 ) ) ) ) ;
rank: 155
score: 99.41791735197368
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) : ;
rank: 156
score: 99.54689719460227
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) , standard CaMeL Deviation ) ) ) ;
rank: 156
score: 99.52826538085938
patch: ( standard CaMeL Deviation / Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ;
rank: 156
score: 99.49176635742188
patch: ( double ) standard CaMeL Deviation * Math . sqrt ( 1 . 0 ) ) ) ) ;
rank: 156
score: 99.43742290296052
patch: ( standard CaMeL Deviation * Math . sqrt ( 0 . 0 . ) ) ) ) ;
rank: 156
score: 99.42609998914931
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ + $NUMBER$ ) ) ) ) ;
rank: 156
score: 99.4178402549342
patch: ( Math . sqrt ( $NUMBER$ + sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 156
score: 99.39871419270834
patch: ( standard CaMeL Deviation * ( standard CaMeL Deviation ) ) ) ) ;
rank: 157
score: 99.54570079985119
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) , ) ;
rank: 157
score: 99.50557084517045
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) - standard CaMeL Deviation ) ) ;
rank: 157
score: 99.49154052734374
patch: ( standard CaMeL Deviation * Math . sqrt ( 1 . 0 ) ) ) ) + 1 ;
rank: 157
score: 99.42554389105902
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ <= $NUMBER$ ) ) ) ) ;
rank: 157
score: 99.41777886284723
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) * 0 . 0 ;
rank: 158
score: 99.54552112926136
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . sqrt ( ) ;
rank: 158
score: 99.52702192826705
patch: ( double ) ( float ) standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 158
score: 99.50511474609375
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 + mean ) ) ) ) ;
rank: 158
score: 99.44823404947917
patch: ( / Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 158
score: 99.43660481770833
patch: ( ( Double * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 158
score: 99.41731984991776
patch: ( Math . sqrt ( $NUMBER$ . 0 ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 159
score: 99.49094848632812
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 * $STRING$ ) ) ) ) ;
rank: 159
score: 99.44822862413194
patch: ( 0 . 0 / Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 159
score: 99.43485260009766
patch: ( float * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 159
score: 99.42373477711396
patch: ( standard CaMeL Deviation * ( this . $NUMBER$ . 0 ) ) ) ) ;
rank: 159
score: 99.41725560238487
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + $NUMBER$ . $NUMBER$ ) ;
rank: 159
score: 99.39654541015625
patch: ( standard CaMeL Deviation * Math . sqrt ( this . $NUMBER$ . 0 ) ) ) ) ;
rank: 160
score: 99.5441006747159
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) . 0 ;
rank: 160
score: 99.5041271391369
patch: ( sqrt ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 160
score: 99.43388366699219
patch: ( standard CaMeL Deviation * Math . sqrt $NUMBER$ . 0 ) ) ) ;
rank: 160
score: 99.42371890419408
patch: ( standard CaMeL Deviation * 0 . 0 ) ) / ( $NUMBER$ . 0 ) ) ;
rank: 160
score: 99.41715923108552
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + }
rank: 160
score: 99.39652099609376
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ) ;
rank: 161
score: 99.52595658735795
patch: ( standard CaMeL Deviation - Math . sqrt ( $NUMBER$ . 0 * $NUMBER$ . 0 ) ) ) ) ;
rank: 161
score: 99.49017693014706
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) * standard CaMeL Deviation ;
rank: 161
score: 99.44729614257812
patch: standard CaMeL Deviation * Math . sqrt ( 0 . 0 ) ) ) ;
rank: 161
score: 99.43382504111842
patch: ( ( double ) ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 161
score: 99.42335340711806
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ ) . 0 ) ) ) ;
rank: 161
score: 99.41691758897569
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + 1 . 0 ;
rank: 161
score: 99.395751953125
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ - standard CaMeL Deviation ) ) ) ) ;
rank: 162
score: 99.5431795987216
patch: Erf . erf ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 162
score: 99.5037841796875
patch: ( this . erf ( ) * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ;
rank: 162
score: 99.49005737304688
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) - 1 ) ) ;
rank: 162
score: 99.42190212673611
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ , $NUMBER$ ) ) ) ) ;
rank: 162
score: 99.41672877261513
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) : $NUMBER$ . $NUMBER$ ) ;
rank: 162
score: 99.3931884765625
patch: ( ( standard CaMeL Deviation * Math . sqrt ( standard CaMeL Deviation ) ) ) ) ) ;
rank: 163
score: 99.53162906044408
patch: ( $NUMBER$ . 0 ] * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 163
score: 99.52513538707386
patch: 1 . 0 ) , ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 163
score: 99.50371759588069
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) , 1 . 0 ) ) ;
rank: 163
score: 99.44626193576389
patch: ( $NUMBER$ . 0 + Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 163
score: 99.43337673611111
patch: ( standard CaMeL Deviation $NUMBER$ Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 163
score: 99.4217758178711
patch: ( standard CaMeL Deviation * sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 163
score: 99.41672092013889
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) - $NUMBER$ . 0 ) ;
rank: 164
score: 99.54213169642857
patch: ( 1 . 0 + Erf . erf ( ( x - mean ) ) ) ) ) ;
rank: 164
score: 99.53133994654605
patch: ( int ) Math . sqrt ( $NUMBER$ . 0 * $NUMBER$ . 0 ) ) ) ;
rank: 164
score: 99.52492453835227
patch: ( standard CaMeL Deviation * Math . max ( $NUMBER$ . 0 + $NUMBER$ . 0 ) ) ) ) ;
rank: 164
score: 99.44625091552734
patch: Math . sqrt ( $NUMBER$ . 0 / $NUMBER$ . 0 ) ) ) ;
rank: 164
score: 99.43320041232639
patch: ( standard CaMeL Deviation || Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 164
score: 99.42136744449013
patch: ( standard CaMeL Deviation * Math . sqrt ( 1 . 0 ) ) ) ) ; }
rank: 164
score: 99.41568332248264
patch: ( Math . sqrt ( $NUMBER$ . 0 ) - $NUMBER$ . 0 ) ) ) ;
rank: 164
score: 99.39228515625
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ % 0 . 0 ) ) ) ) ;
rank: 165
score: 99.54158158735795
patch: ( $NUMBER$ . 0 ) / standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 165
score: 99.53071521577381
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) 0 . 0 ) ) ) ;
rank: 165
score: 99.5034891764323
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) , 0 . 0 ) ) ) ;
rank: 165
score: 99.4895751953125
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) / / ;
rank: 165
score: 99.43218315972223
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ [ 0 ) ) ) ) ;
rank: 165
score: 99.42134363511029
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ ] ) ) ) ) ;
rank: 165
score: 99.41520860460069
patch: ( Math . sqrt ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) )
rank: 166
score: 99.42083062065973
patch: ( standard CaMeL Deviation * Math . sqrt ( false . 0 ) ) ) ) ;
rank: 166
score: 99.41476922286184
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) : 1 . $NUMBER$ ) ;
rank: 167
score: 99.528955078125
patch: ( standard CaMeL Deviation * Math . round ( $NUMBER$ . 0 . 0 ) ) ) ) ;
rank: 167
score: 99.52397017045455
patch: ( $NUMBER$ . 0 - standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 167
score: 99.48824462890624
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) - $NUMBER$ ) ) ;
rank: 167
score: 99.44537353515625
patch: Math . sqrt ( $NUMBER$ . $NUMBER$ ) ) ) ;
rank: 167
score: 99.41367701480263
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 BYTES ) ) ) ) ;
rank: 168
score: 99.53919566761364
patch: ( $NUMBER$ . 0 ) ) , standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 168
score: 99.52882144325658
patch: ( Math . sqrt ( $NUMBER$ . 0 * $NUMBER$ . 0 ) ) ) ) ) ;
rank: 168
score: 99.50313313802083
patch: double . standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 168
score: 99.48792221966912
patch: ( double ) standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ;
rank: 168
score: 99.44495346966912
patch: ( ( Double ) Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 168
score: 99.41259047564338
patch: ( Math . sqrt ( $NUMBER$ . 0 ) 1 . 0 ) ) ) ;
rank: 169
score: 99.52763439360119
patch: Math . sqrt ( $NUMBER$ . 0 ) ) * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 169
score: 99.48690795898438
patch: ( standard CaMeL Deviation - Math . sqrt ( $NUMBER$ . 0 * $NUMBER$ ) ) ) ) ;
rank: 169
score: 99.44432308799342
patch: ( Math . sqrt ( $NUMBER$ . max ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 169
score: 99.42986653645833
patch: ( ( $NUMBER$ . 0 ) * $NUMBER$ . 0 ) ) ) ;
rank: 169
score: 99.41213650173611
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + $NUMBER$ . $NUMBER$ ;
rank: 169
score: 99.39008178710938
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ / standard CaMeL Deviation ) ) ) ) ;
rank: 170
score: 99.53877185639881
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) . erf ( ( x - mean ) ) ;
rank: 170
score: 99.48640272352431
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) + ;
rank: 170
score: 99.42972140842014
patch: ( ( Integer * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 170
score: 99.41965203536184
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ >= 0 . 0 ) ) ) ;
rank: 170
score: 99.41109890407986
patch: ( $NUMBER$ . 0 ) ) - Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 171
score: 99.50221849524456
patch: ( sqrt ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ) ;
rank: 171
score: 99.4861068725586
patch: $NUMBER$ . 0 ) ) / Math . sqrt ( $NUMBER$ . 0 ) ;
rank: 171
score: 99.44378662109375
patch: Math . sqrt ( $NUMBER$ . 0 * $NUMBER$ . 0 ) ) ) ;
rank: 171
score: 99.42938639322917
patch: ( standard CaMeL Deviation * this . sqrt ( ) ) ) ) ;
rank: 171
score: 99.41866726345486
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . x ) ) ) ) ;
rank: 171
score: 99.40989685058594
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) : ) ;
rank: 171
score: 99.38881225585938
patch: ( standard CaMeL Deviation * Math . sqrt ( 1 . 0 ) . 0 ) ) ) ;
rank: 172
score: 99.53810813210227
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) , 1 . $NUMBER$ ) ;
rank: 172
score: 99.52689615885417
patch: ( $NUMBER$ . 0 * standard CaMeL Deviation ( $NUMBER$ . 0 ) ) ) ) ;
rank: 172
score: 99.41853162977431
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ < $NUMBER$ ) ) ) ) ;
rank: 172
score: 99.40976131663604
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ? 1 . $NUMBER$
rank: 173
score: 99.53669084821429
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + mean ) ;
rank: 173
score: 99.52682834201389
patch: ( Math . sqrt ( $NUMBER$ . 0 * standard CaMeL Deviation ) ) ) ) ;
rank: 173
score: 99.48562140213816
patch: ( double ) standard CaMeL Deviation * Math . min ( $NUMBER$ . 0 ) ) ) ;
rank: 173
score: 99.44217258029514
patch: ( 1 . 0 * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 173
score: 99.42876325334821
patch: ( standard CaMeL Deviation * 0 . 0 ) ) ) ) ;
rank: 173
score: 99.41830283717105
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ? ;
rank: 173
score: 99.40884738498264
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) {
rank: 174
score: 99.535888671875
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) == 0 . $NUMBER$ ;
rank: 174
score: 99.52666945684524
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 * $NUMBER$ . 0 ) ) ) ;
rank: 174
score: 99.4853515625
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ) ;
rank: 174
score: 99.42839499080883
patch: ( ( ( $NUMBER$ . 0 ) * $NUMBER$ . 0 ) ) ) ) ;
rank: 174
score: 99.41753472222223
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ != 0 ) ) ) ) ;
rank: 174
score: 99.40870496961806
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + $NUMBER$ . 0 ;
rank: 175
score: 99.52648344494048
patch: ( ( double ) Math . sqrt ( $NUMBER$ . 0 * $NUMBER$ . 0 ) ) ) ) ;
rank: 175
score: 99.48524234169408
patch: ( standard CaMeL Deviation / * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 175
score: 99.4415283203125
patch: Double . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 175
score: 99.42835190716912
patch: ( standard CaMeL Deviation * Math . sqrt > $NUMBER$ . 0 ) ) ) ;
rank: 176
score: 99.5263904389881
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) 1 . 0 ) ) ) ;
rank: 176
score: 99.51995528371711
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ;
rank: 176
score: 99.50108846028645
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) + standard CaMeL Deviation ;
rank: 176
score: 99.48497856987848
patch: ( 1 . 0 ) ) ) * Math . sqrt ( $NUMBER$ . 0 ) ;
rank: 176
score: 99.44075520833333
patch: ( double ) Math . sqrt ( $NUMBER$ . 1 ) ) ) ;
rank: 176
score: 99.407958984375
patch: ( Math . sqrt ( $NUMBER$ > 0 . 0 ) ) ) ) ;
rank: 177
score: 99.52587890625
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 * $NUMBER$ . 0 ) ) ) ;
rank: 177
score: 99.51939174107143
patch: ( short ) ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 177
score: 99.50065104166667
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) - 0 . $NUMBER$ ) ;
rank: 177
score: 99.44035901521382
patch: ( Double ) standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 177
score: 99.41450580797698
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) && ) ;
rank: 178
score: 99.53481657608695
patch: ( Math . sqrt ( $NUMBER$ . 0 ) * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 178
score: 99.52564761513158
patch: ( int ) Math . sqrt ( $NUMBER$ . 0 + $NUMBER$ . 0 ) ) ) ;
rank: 178
score: 99.48473510742187
patch: ( standard CaMeL Deviation * / * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 178
score: 99.43983289930556
patch: Math . sqrt ( double ) Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 178
score: 99.41433876439145
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) == ) ;
rank: 179
score: 99.51801990327381
patch: $NUMBER$ . 0 ) ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 179
score: 99.49937037417763
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ] ) ) ) ;
rank: 179
score: 99.484375
patch: $NUMBER$ ) * standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 179
score: 99.40682180304276
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + 1 . 0 ) ;
rank: 179
score: 99.38253784179688
patch: ( standard CaMeL Deviation * ( standard CaMeL Deviation ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 180
score: 99.5324939546131
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) , ) ) ;
rank: 180
score: 99.4139340049342
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ < 0 . 0 ) ) ) ;
rank: 180
score: 99.40669973273026
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + *
rank: 180
score: 99.38245849609375
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) . max ) ) ;
rank: 181
score: 99.53233271059783
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 0 ) ) ) ) . erf ( ) ;
rank: 181
score: 99.49888916015625
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ? 0 ;
rank: 181
score: 99.48240356445312
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) / * ;
rank: 181
score: 99.436865234375
patch: ( byte ) Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 181
score: 99.41391170726104
patch: ( standard CaMeL Deviation * Math . sqrt ( - mean ) ) ) ) ;
rank: 181
score: 99.4057552939967
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + 1 . $NUMBER$ ) ;
rank: 182
score: 99.53153852982955
patch: 1 . 0 ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 182
score: 99.52518136160714
patch: ( ( int ) standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 182
score: 99.51690383184524
patch: ( standard CaMeL Deviation - standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 182
score: 99.49874877929688
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . $NUMBER$ . 0 ) ) ) ) ) ;
rank: 182
score: 99.41366916232639
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) . erf ( ) ) ) ;
rank: 182
score: 99.40538872612848
patch: ( $NUMBER$ . 0 ) ) * Math . sqrt ( $NUMBER$ . $NUMBER$ ) ) ;
rank: 182
score: 99.38031327097039
patch: ( && standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 183
score: 99.51689220610119
patch: ( double ) standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . $NUMBER$ ) ) ) ;
rank: 183
score: 99.48178335336539
patch: ( standard CaMeL Deviation / $NUMBER$ . 0 ) ) ) ;
rank: 183
score: 99.42533052884616
patch: ( standard CaMeL Deviation * true . 0 ) ) ) ;
rank: 183
score: 99.41362847222223
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . TYPE ) ) ) ) ;
rank: 183
score: 99.380029296875
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ == standard CaMeL Deviation ) ) ) ) ;
rank: 184
score: 99.52430484169408
patch: ( standard CaMeL Deviation > 0 . 0 ? $NUMBER$ : 0 . 0 ) ) ) ;
rank: 184
score: 99.49772505326705
patch: ( ( standard CaMeL Deviation * Math . sqrt ( 0 . 0 . 0 ) ) ) ) ) ;
rank: 184
score: 99.48110622829861
patch: ( standard CaMeL Deviation / Math . sqrt ( 1 . 0 ) ) ) ) ;
rank: 184
score: 99.43248226768092
patch: ( double ) Math . sqrt ( standard CaMeL Deviation . 0 . 0 ) ) ) ;
rank: 184
score: 99.42393583409927
patch: ( standard CaMeL Deviation * standard CaMeL Deviation * 0 . 0 ) ) ) ;
rank: 184
score: 99.3797607421875
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) . start ) ;
rank: 185
score: 99.52935500372024
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 0 ) ) ) ) ;
rank: 185
score: 99.52400716145833
patch: standard CaMeL Deviation * Math . sqrt ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 185
score: 99.5142489346591
patch: ( standard CaMeL Deviation * Math . sqrt ( 1 . 0 + $NUMBER$ . 0 ) ) ) ) ;
rank: 185
score: 99.49740600585938
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . 0 + 0 . $NUMBER$ ;
rank: 185
score: 99.43234688895089
patch: ( Math . abs ( $NUMBER$ . 0 ) ) ) ) ;
rank: 185
score: 99.4048080444336
patch: ( sqrt * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 185
score: 99.37930297851562
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ <= standard CaMeL Deviation ) ) ) ) ;
rank: 186
score: 99.52918061755952
patch: Erf . erf ( ( x - mean ) / ( $NUMBER$ . 0 ) ) ) ) ;
rank: 186
score: 99.513916015625
patch: ( standard CaMeL Deviation - standard CaMeL Deviation ) ) ) ;
rank: 186
score: 99.48026958264802
patch: ( double ) standard CaMeL Deviation ) * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 186
score: 99.43185424804688
patch: Math . sqrt ( $NUMBER$ . 1 ) ) ) ;
rank: 186
score: 99.42085988898026
patch: ( * standard CaMeL Deviation * Math . sqrt ( 0 . 0 ) ) ) ) ;
rank: 186
score: 99.40929236778847
patch: ( standard CaMeL Deviation > 0 . 0 ) ) ) ;
rank: 186
score: 99.37882080078126
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ * Math . $NUMBER$ ) ) ) ) ;
rank: 187
score: 99.51383666992187
patch: $NUMBER$ . 0 , standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 187
score: 99.49651544744319
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) * standard CaMeL Deviation ) ;
rank: 187
score: 99.43160850123355
patch: ( Math . sqrt ( Math . max ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 187
score: 99.40378146701389
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + 1 . $NUMBER$ ;
rank: 188
score: 99.49647739955357
patch: ( Erf . erf ( ) * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 188
score: 99.4786376953125
patch: ( double ) standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) * /
rank: 188
score: 99.40899658203125
patch: ( $NUMBER$ . 0 + Erf . erf ( ( ) ) ) ) ) ;
rank: 188
score: 99.40336778428819
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) : 1 . 0 ;
rank: 189
score: 99.5286281419837
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) : $NUMBER$ . $NUMBER$ ) ;
rank: 189
score: 99.52284458705357
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ] ) ) ) ) ) ;
rank: 189
score: 99.51320578835227
patch: ( standard CaMeL Deviation * Math . sqrt ( standard CaMeL Deviation - standard CaMeL Deviation ) ) ) ) ;
rank: 189
score: 99.49570534446023
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) && 0 . 0 ) ;
rank: 189
score: 99.47855417351974
patch: ( double ) Math . sqrt ( $NUMBER$ . 0 ) ) ) / $NUMBER$ . 0 ;
rank: 189
score: 99.42074245876736
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ||
rank: 189
score: 99.40306939019098
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) * 1 . 0 ;
rank: 189
score: 99.37518310546875
patch: ( x / standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 190
score: 99.5129162016369
patch: ( standard CaMeL Deviation * standard CaMeL Deviation * standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ;
rank: 190
score: 99.47834858141448
patch: ( double ) standard CaMeL Deviation . Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 190
score: 99.43116670496323
patch: Math . sqrt ( Float . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 190
score: 99.42025417751736
patch: ( this . sqrt * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 190
score: 99.40290270353618
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) : 1 . 0 ) ;
rank: 190
score: 99.37466591282895
patch: / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 191
score: 99.52775435014205
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . list ( ) ;
rank: 191
score: 99.47753295898437
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ( ) ) ) ) ) ;
rank: 191
score: 99.40571424696181
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . start ) ) ) ) ;
rank: 192
score: 99.43051629317434
patch: ( Math . sqrt ( Math . abs ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 192
score: 99.41896458675987
patch: ( ( Math . sqrt ( $NUMBER$ . 0 ) 0 . 0 ) ) ) ) ;
rank: 192
score: 99.40562608506944
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ - mean ) ) ) ) ;
rank: 192
score: 99.4025814658717
patch: ( $NUMBER$ . 0 ) ) ) : 0 . 0 * ( $NUMBER$ . 0 ) ;
rank: 193
score: 99.52744989809783
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . max ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 193
score: 99.49462890625
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) + 1 . 0 ) ) ) ;
rank: 193
score: 99.47706298828125
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) / / /
rank: 193
score: 99.43012438322368
patch: ( Math . sqrt ( Math . min ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 193
score: 99.41876898871527
patch: ( standard CaMeL Deviation - Math . sqrt ( 0 . 0 ) ) ) ) ;
rank: 193
score: 99.40558825041118
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) . 0 ) ) ;
rank: 193
score: 99.3714111328125
patch: ( Math . sqrt ( standard CaMeL Deviation * ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 194
score: 99.52723760190217
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . erf ( this ) ;
rank: 194
score: 99.5174560546875
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 / ) ) ) ) ;
rank: 194
score: 99.51251220703125
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) + $NUMBER$ ) ) ) ;
rank: 194
score: 99.49448756167763
patch: ( standard CaMeL Deviation * new Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 194
score: 99.4770572060033
patch: ( double ) standard CaMeL Deviation , Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 195
score: 99.47673950195312
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) + 1 ) ) ;
rank: 196
score: 99.52647094726562
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) - mean ) ;
rank: 196
score: 99.51675575657895
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 float ) ) ) ) ;
rank: 196
score: 99.47653198242188
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . $NUMBER$ ) ) ) ) + 1 ;
rank: 196
score: 99.42812771267361
patch: ( standard CaMeL Deviation ) ) * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 196
score: 99.41731531479779
patch: ( float ) ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 196
score: 99.37042557565789
patch: ( ( ) / ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 197
score: 99.516357421875
patch: ( standard CaMeL Deviation > $NUMBER$ . 0 ) ) ) ;
rank: 197
score: 99.4278628700658
patch: ( $NUMBER$ [ 0 ] * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 197
score: 99.41635613692434
patch: ( ( Math . sqrt ( $NUMBER$ . 0 ) ) 0 . 0 ) ) ) ;
rank: 197
score: 99.40317896792763
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) . ) ;
rank: 197
score: 99.40093030427632
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + $NUMBER$ . 0 ) ;
rank: 197
score: 99.37027587890626
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ % $NUMBER$ . 0 ) ) ) ) ;
rank: 198
score: 99.51602027529762
patch: ( ( / standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 198
score: 99.49418308423913
patch: Double . sqrt ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ;
rank: 198
score: 99.39958360460069
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) + $NUMBER$ . 0 ) ;
rank: 199
score: 99.51592726934524
patch: ( ( long ) standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 199
score: 99.50982375372024
patch: $NUMBER$ . 0 ) * standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 199
score: 99.49396623883929
patch: ( Erf . standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 199
score: 99.47520045230263
patch: ( double ) 1 . 0 ) ) * Math . sqrt ( $NUMBER$ . 0 ) ;
rank: 199
score: 99.42744140625
patch: ( double ) Math . abs ( $NUMBER$ . 0 ) ) ) ;
rank: 199
score: 99.41575792100694
patch: ( standard CaMeL Deviation * $STRING$ . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 199
score: 99.40208524816177
patch: ( standard CaMeL Deviation * Math . sqrt ( 1 . 0 ) ) ) ;
rank: 199
score: 99.39902072482639
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) , 0 . 0 ) ;
rank: 200
score: 99.51549574908088
patch: ( standard CaMeL Deviation * standard CaMeL Deviation - $NUMBER$ . 0 ) ) ) ;
rank: 200
score: 99.49369303385417
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + 0 . $NUMBER$ . $NUMBER$ ;
rank: 200
score: 99.47512817382812
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) * $STRING$ ;
rank: 200
score: 99.42727179276316
patch: ( double ) Math . sqrt ( $NUMBER$ . 0 + standard CaMeL Deviation ) ) ) ;
rank: 200
score: 99.36782497829861
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . Math ) ) ) ) ;
rank: 201
score: 99.52312677556819
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) == 1 . $NUMBER$ ;
rank: 201
score: 99.51453314887152
patch: ( standard CaMeL Deviation > Math . round ( $NUMBER$ . 0 ) ) ) ) ;
rank: 201
score: 99.4749267578125
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 * 1 ) ) ) ) ;
rank: 201
score: 99.42682439630681
patch: ( ( 1 . 0 ) ) ) ) ;
rank: 201
score: 99.41573079427083
patch: ( double . 0 ) * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 201
score: 99.40129852294922
patch: ( $NUMBER$ . 0 + Erf . erf ( ) ) ) ) ;
rank: 201
score: 99.39882405598958
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) , $NUMBER$ . 0 ) ) ;
rank: 202
score: 99.49345703125
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 202
score: 99.47386067708334
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ;
rank: 202
score: 99.42672568873355
patch: standard CaMeL Deviation * ( double ) Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 202
score: 99.41486672794117
patch: ( * ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 202
score: 99.39822726779514
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) && $NUMBER$ . 0 ) ;
rank: 202
score: 99.36626586914062
patch: ( standard CaMeL Deviation * Math . sqrt ( BYTES * 0 . 0 ) ) ) ) ;
rank: 203
score: 99.51273193359376
patch: ( standard CaMeL Deviation * Math . min ( $NUMBER$ . 0 , $NUMBER$ ) ) ) ) ;
rank: 203
score: 99.50798688616071
patch: ( double ) ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . $NUMBER$ ) ) ) ) ;
rank: 203
score: 99.49269797585227
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ? 0 . 0 ;
rank: 203
score: 99.47258911132812
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 + $STRING$ ) ) ) ) ;
rank: 203
score: 99.42623138427734
patch: standard CaMeL Deviation * Math . sqrt ( 1 . 0 ) ) ) ;
rank: 204
score: 99.50785900297619
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 + $NUMBER$ . ) ) ) ) ;
rank: 204
score: 99.47221069335937
patch: ( int ) standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 204
score: 99.4262225811298
patch: ( ( 0 . 0 . 0 ) ) ) ) ;
rank: 204
score: 99.40042114257812
patch: ( standard CaMeL Deviation * Erf . erf ( ) ) ) ) ;
rank: 204
score: 99.3976821899414
patch: ( Math . sqrt ( $NUMBER$ > $NUMBER$ . 0 ) ) ) ) ;
rank: 205
score: 99.52162863991477
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) == $NUMBER$ . $NUMBER$ ;
rank: 205
score: 99.49261765252976
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . ( ) ) ) ) ) ;
rank: 205
score: 99.40040418836806
patch: ( standard CaMeL Deviation * Math . sqrt ( true . 0 ) ) ) ) ;
rank: 205
score: 99.39694053248355
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) : $NUMBER$ . 0 ) ;
rank: 205
score: 99.365576171875
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ -- 0 . 0 ) ) ) ) ;
rank: 206
score: 99.52136761209239
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . erf ( ) ) ;
rank: 206
score: 99.50745849609375
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) , true ) ;
rank: 206
score: 99.49239309210526
patch: ( standard CaMeL Deviation * . Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 206
score: 99.47195595189145
patch: ( double ) $NUMBER$ . 0 ) * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 206
score: 99.4260612936581
patch: ( ( / Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 206
score: 99.40021430121527
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ? ;
rank: 207
score: 99.5210491677989
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . Erf ( ) ;
rank: 207
score: 99.50725763494319
patch: 1 . 0 ) + ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 207
score: 99.42588404605263
patch: ( standard CaMeL Deviation * Math . sqrt ( double ) 0 . 0 ) ) ) ;
rank: 207
score: 99.4000244140625
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . ( ) ) ) ) ) ;
rank: 207
score: 99.39601536800987
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) || *
rank: 208
score: 99.52098499644886
patch: ( 1 . 0 ) / standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 208
score: 99.51146024816177
patch: ( standard CaMeL Deviation * standard CaMeL Deviation / $NUMBER$ . 0 ) ) ) ;
rank: 208
score: 99.50700239701705
patch: ( standard CaMeL Deviation - Math . sqrt ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ) ;
rank: 208
score: 99.4921542080966
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) == 0 . 0 ) ;
rank: 208
score: 99.47158813476562
patch: ( double ) standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) . ;
rank: 208
score: 99.42552354600694
patch: Math . sqrt ( float ) Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 208
score: 99.41204512746711
patch: ( ( standard CaMeL Deviation * standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ) ;
rank: 208
score: 99.39916314019098
patch: ( standard CaMeL Deviation * Math . < ( $NUMBER$ . 0 ) ) ) ) ;
rank: 208
score: 99.39597681949013
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ? true
rank: 209
score: 99.471337890625
patch: ( length * standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 209
score: 99.41155684621711
patch: ( < standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 209
score: 99.39798990885417
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ == $NUMBER$ ) ) ) ) ;
rank: 210
score: 99.51124974300987
patch: ( 0 . 0 ] * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 210
score: 99.471240234375
patch: ( standard CaMeL Deviation * Math . max ( $NUMBER$ . 0 ) ) ) ) + 1 ;
rank: 210
score: 99.41134643554688
patch: double . 0 ) * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 210
score: 99.39760870682566
patch: ( standard CaMeL Deviation * ( standard CaMeL Deviation != 0 . 0 ) ) ) ) ;
rank: 210
score: 99.39584689670139
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) || $NUMBER$ . 0 ) ;
rank: 211
score: 99.5203125
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) == 0 ;
rank: 211
score: 99.50649192116477
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . $NUMBER$ . $NUMBER$ . 0 ) ) ) ) ;
rank: 211
score: 99.49204950747283
patch: ( double ) ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ;
rank: 211
score: 99.47079128689236
patch: ( standard CaMeL Deviation * Math . max ( 1 . 0 ) ) ) ) ;
rank: 211
score: 99.42410098805146
patch: ( ( Integer ) Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 211
score: 99.41050889756944
patch: ( standard CaMeL Deviation * Boolean . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 211
score: 99.39754231770833
patch: ( standard CaMeL Deviation * Math . matches ( $NUMBER$ . 0 ) ) ) ) ;
rank: 211
score: 99.36406860351562
patch: ( $NUMBER$ . 0 ) ) ) ) ;
rank: 212
score: 99.51053873697917
patch: ( standard CaMeL Deviation > Math . min ( $NUMBER$ . 0 ) ) ) ) ;
rank: 212
score: 99.50648082386364
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 / $NUMBER$ ) ) ) ) ;
rank: 212
score: 99.47075805664062
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 * 0 ) ) ) ) ;
rank: 212
score: 99.42347063337054
patch: ( Math . max ( $NUMBER$ . 0 ) ) ) ) ;
rank: 212
score: 99.39686802455357
patch: ( this . erf ( $NUMBER$ . 0 ) ) ) ) ;
rank: 212
score: 99.36387329101562
patch: ( long ) standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 213
score: 99.5196866122159
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) / 0 . 0 ) ) ) ;
rank: 213
score: 99.50913783482143
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 + standard CaMeL Deviation ) ) ) ;
rank: 213
score: 99.50633655894886
patch: ( $NUMBER$ . 0 ) ) * standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 213
score: 99.490966796875
patch: ( standard CaMeL Deviation * Math . ceil ( $NUMBER$ . 0 . 0 ) ) ) ) ;
rank: 213
score: 99.47047729492188
patch: ( standard CaMeL Deviation * $NUMBER$ * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 213
score: 99.42344263980263
patch: ( double ) Math . sqrt ( $NUMBER$ . 0 / 0 . 0 ) ) ) ;
rank: 213
score: 99.40903191817434
patch: ( ( standard CaMeL Deviation * Math . sqrt - $NUMBER$ . 0 ) ) ) ) ;
rank: 213
score: 99.39671325683594
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) .
rank: 213
score: 99.3637631064967
patch: ( standard CaMeL Deviation * Math . sqrt ( standard CaMeL Deviation } ) ) ) ) ;
rank: 214
score: 99.5195645419034
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 0 0 ) ) ) ) ) ;
rank: 214
score: 99.50906982421876
patch: ( * standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 214
score: 99.49090021306819
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) / 0 . 0 ) ;
rank: 214
score: 99.47035522460938
patch: ( standard CaMeL Deviation - Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + 1 ;
rank: 214
score: 99.39665784333882
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) / ( $NUMBER$ . 0 ) ) ;
rank: 214
score: 99.3635498046875
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) . ( $NUMBER$ . 0 ) ) ) ;
rank: 215
score: 99.50625610351562
patch: ( standard CaMeL Deviation * Math . min ( $NUMBER$ . 0 . 0 ) ) ) ) ;
rank: 215
score: 99.42313929966518
patch: ( Math . round ( $NUMBER$ . 0 ) ) ) ) ;
rank: 215
score: 99.39474148220486
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) : $NUMBER$ . 0 ;
rank: 215
score: 99.36325073242188
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) / } ) ;
rank: 216
score: 99.51866455078125
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) , $NUMBER$ ) ) ) ;
rank: 216
score: 99.50899564302884
patch: ( standard CaMeL Deviation - $NUMBER$ . 0 ) ) ) ;
rank: 216
score: 99.5059326171875
patch: ( float ) - standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 216
score: 99.46941731770833
patch: ( double ) standard CaMeL Deviation * / $NUMBER$ . 0 ) ) ;
rank: 216
score: 99.42298648231908
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 1 ) ) ) ) ) ;
rank: 216
score: 99.40712483723958
patch: ( $STRING$ . 0 ) * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 216
score: 99.39618883634868
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) $NUMBER$ ) ) ;
rank: 216
score: 99.39417221966912
patch: ( standard CaMeL Deviation * Math . ( $NUMBER$ . 0 ) ) ) ) ;
rank: 217
score: 99.51866083559783
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + $NUMBER$ . $NUMBER$ ) ;
rank: 217
score: 99.5084228515625
patch: ( standard CaMeL Deviation > Math . sqrt ( $NUMBER$ . 0 * $NUMBER$ ) ) ) ) ;
rank: 217
score: 99.50518243963069
patch: $NUMBER$ . 0 . 0 ) * standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 217
score: 99.48968796502976
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ] ;
rank: 217
score: 99.46900634765625
patch: ( standard CaMeL Deviation * Math . sqrt ( 1 . 0 * $NUMBER$ ) ) ) ) ;
rank: 217
score: 99.42296078330592
patch: ( double ) standard CaMeL Deviation - Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 217
score: 99.39433850740132
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) 0 ) ) ;
rank: 217
score: 99.3937629250919
patch: ( Math . sqrt ( sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 218
score: 99.50812377929688
patch: ( standard CaMeL Deviation < Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ;
rank: 218
score: 99.50417258522727
patch: ( double ) ( - standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 218
score: 99.4896240234375
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) = 0 . 0 ;
rank: 218
score: 99.40574886924342
patch: ( standard CaMeL Deviation > Math . sqrt ( $NUMBER$ . 0 ) 1 ) ) ) ;
rank: 218
score: 99.39297645970395
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) * 0 . $NUMBER$ ) ;
rank: 218
score: 99.36253662109375
patch: Math . sqrt ( Erf . erf ( ( x - mean ) ) ) ) ) ;
rank: 219
score: 99.51798095703126
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ? $NUMBER$ ;
rank: 219
score: 99.50686163651316
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 * ) ) ) ) ;
rank: 219
score: 99.48944091796875
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) - 0 . 0 ) ;
rank: 219
score: 99.46849229600694
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) , ;
rank: 219
score: 99.39328342013889
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . float ) ) ) ) ;
rank: 219
score: 99.3922119140625
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) * *
rank: 220
score: 99.46833881578948
patch: ( standard CaMeL Deviation * / Math . max ( $NUMBER$ . 0 ) ) ) ) ;
rank: 220
score: 99.40554327713816
patch: ( $NUMBER$ . 0 ) * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 220
score: 99.39325272409539
patch: ( standard CaMeL Deviation * standard CaMeL Deviation * ( $NUMBER$ . 0 ) ) ) ) ;
rank: 220
score: 99.39171006944444
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) * 0 . $NUMBER$ ;
rank: 221
score: 99.5172809103261
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) : 1 . $NUMBER$ ) ;
rank: 221
score: 99.48911354758523
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + Math CaMeL Exception ;
rank: 221
score: 99.40528628700658
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ , 0 . ) ) ) ) ;
rank: 221
score: 99.39261024876645
patch: ( standard CaMeL Deviation * ( this . erf ( $NUMBER$ . 0 ) ) ) ) ;
rank: 222
score: 99.48903586647727
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) , 0 . 1 ) ;
rank: 222
score: 99.4666259765625
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) * ) ) ;
rank: 222
score: 99.42103794642857
patch: ( Float . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 222
score: 99.39253504136029
patch: ( standard CaMeL Deviation > Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 223
score: 99.503173828125
patch: ( $NUMBER$ . standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 223
score: 99.46657104492188
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + true ;
rank: 223
score: 99.42095626027961
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . $NUMBER$ ] ) ) ) ) ;
rank: 223
score: 99.40439181857639
patch: ( standard CaMeL Deviation * Math . join ( $NUMBER$ . 0 ) ) ) ) ;
rank: 223
score: 99.3924560546875
patch: ( standard CaMeL Deviation * Math . Long ( $NUMBER$ . 0 ) ) ) ) ;
rank: 223
score: 99.39102783203126
patch: sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 224
score: 99.51539306640625
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) == $NUMBER$ ;
rank: 224
score: 99.48850319602273
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 + mean ) ) ) ) ;
rank: 224
score: 99.46610300164474
patch: ( standard CaMeL Deviation * / Math . sqrt ( 1 . 0 ) ) ) ) ;
rank: 224
score: 99.42069498697917
patch: ( 1 . 0 ) ) * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 224
score: 99.40431614925987
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; .
rank: 224
score: 99.39234161376953
patch: ( standard CaMeL Deviation * Math . sqrt ( x ) ) ) ) ;
rank: 224
score: 99.39078561883224
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ( $NUMBER$ . 0 ) ) ) ;
rank: 224
score: 99.36098807198661
patch: Math . sqrt ( $NUMBER$ . 0 ) . 0 ) ) ;
rank: 225
score: 99.5151034268466
patch: ( $NUMBER$ . 0 ) * standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 225
score: 99.50209554036458
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ] ) ) ) ;
rank: 225
score: 99.46577758789063
patch: ( float ) standard CaMeL Deviation * / Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 225
score: 99.42025417751736
patch: ( Math . sqrt ( $NUMBER$ . 0 / 0 . 0 ) ) ) ) ;
rank: 225
score: 99.39065551757812
patch: ( Math . Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 226
score: 99.51466966711956
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . erf ( null ) ;
rank: 226
score: 99.50038840553977
patch: ( double ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 226
score: 99.42022383840461
patch: ( $STRING$ [ 0 ] * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 226
score: 99.40375719572368
patch: ( standard CaMeL Deviation * int ) Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 226
score: 99.39030376233552
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) || ) ;
rank: 226
score: 99.39000701904297
patch: ( Math . sqrt ( $NUMBER$ <= $NUMBER$ . 0 ) ) ) ) ;
rank: 226
score: 99.360693359375
patch: ( ( standard CaMeL Deviation , Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 227
score: 99.48837890625
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) + 0 . $NUMBER$ ) ;
rank: 227
score: 99.4640754250919
patch: ( double ) standard CaMeL Deviation * Math . sqrt ( $NUMBER$ ) ) ) ;
rank: 227
score: 99.41933722245066
patch: ( Math . sqrt ( $NUMBER$ . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 227
score: 99.39013671875
patch: ( standard CaMeL Deviation * 0 . 0 ) / ( $NUMBER$ . 0 ) ) ) ;
rank: 227
score: 99.38969421386719
patch: ( Math . sqrt ( $NUMBER$ < 0 . 0 ) ) ) ) ;
rank: 227
score: 99.36055297851563
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) . x ) ) ;
rank: 228
score: 99.51411518297698
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . }
rank: 228
score: 99.50061616443452
patch: ( ( Integer ) standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 228
score: 99.49968927556819
patch: ( $NUMBER$ . 0 / standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 228
score: 99.48837280273438
patch: ( standard CaMeL Deviation * Math . sqrt ( 0 . 0 . 0 ) ) ) ) ;
rank: 228
score: 99.41887071397569
patch: ( 0 . 0 | Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 228
score: 99.40326605902777
patch: ( standard CaMeL Deviation * float . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 228
score: 99.38935289884868
patch: ( standard CaMeL Deviation * ( standard CaMeL Deviation <= 0 . 0 ) ) ) ) ;
rank: 228
score: 99.36044311523438
patch: ( $NUMBER$ + standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 229
score: 99.5136385830966
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) , $NUMBER$ ) ;
rank: 229
score: 99.50044177827381
patch: ( ( byte ) standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 229
score: 99.48829142252605
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) - standard CaMeL Deviation ) ;
rank: 229
score: 99.41863692434211
patch: ( double ) 0 . 0 / Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 229
score: 99.40283881293402
patch: ( Math . sqrt * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 229
score: 99.38844807942708
patch: ( standard CaMeL Deviation * Erf . erf ( ( ) ) ) ) ) ;
rank: 229
score: 99.3602783203125
patch: ( standard CaMeL Deviation * ( Erf . erf ( ( ) ) ) ) ) ) ;
rank: 230
score: 99.51356090198864
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . 0 . $NUMBER$ ;
rank: 230
score: 99.49915161132813
patch: 0 . 0 ) + standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 230
score: 99.46320190429688
patch: ( float ) standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) * ;
rank: 230
score: 99.41850200452302
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; null ;
rank: 230
score: 99.38907020970395
patch: ( Math . sqrt ( standard CaMeL Deviation ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 230
score: 99.38816923253677
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) &&
rank: 230
score: 99.36005859375
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ ++ 0 . 0 ) ) ) ) ;
rank: 231
score: 99.5133944424716
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 && $NUMBER$ . 0 ) ) ) ) ;
rank: 231
score: 99.5003173828125
patch: 0 . ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 231
score: 99.49910888671874
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 + float ) ) ) ) ;
rank: 231
score: 99.48792521158855
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) + $NUMBER$ . $NUMBER$ ;
rank: 231
score: 99.46314697265625
patch: ( standard CaMeL Deviation / Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + 1 ;
rank: 231
score: 99.40254934210526
patch: ( standard CaMeL Deviation * Math . sqrt ( 0 . 0 1 ) ) ) ) ;
rank: 231
score: 99.38876003689236
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) * $NUMBER$ . 0 ) ) ;
rank: 231
score: 99.38755289713542
patch: ( standard CaMeL Deviation * Math . trim ( $NUMBER$ . 0 ) ) ) ) ;
rank: 231
score: 99.35994262695313
patch: ( this . standard CaMeL Deviation * Math . sqrt ( standard CaMeL Deviation ) ) ) ) ;
rank: 232
score: 99.49903506324405
patch: ( standard CaMeL Deviation * Math . sqrt ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ;
rank: 232
score: 99.48769309303977
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) && 0 . $NUMBER$ ) ;
rank: 232
score: 99.4176358309659
patch: ( ( 0 . 0 ) ) ) ) ;
rank: 232
score: 99.38832493832237
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) 1 ) ) ;
rank: 232
score: 99.35943924753289
patch: ( ~ standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 233
score: 99.49983723958333
patch: ( standard CaMeL Deviation > Math . abs ( $NUMBER$ . 0 ) ) ) ) ;
rank: 233
score: 99.49892578125
patch: ( standard CaMeL Deviation * Math . abs ( $NUMBER$ . 0 . 0 ) ) ) ) ;
rank: 233
score: 99.4875
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) + x ) ) ) ;
rank: 233
score: 99.40089818050987
patch: ( ( standard CaMeL Deviation ) Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 233
score: 99.38829281455592
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) * 0 . 0 ) ;
rank: 234
score: 99.4998291015625
patch: ( standard CaMeL Deviation * Math . MAX _ VALUE ) ) ) ;
rank: 234
score: 99.4983142671131
patch: $NUMBER$ . 0 ) + standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 234
score: 99.40086605674342
patch: ( standard CaMeL Deviation * long ) Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 234
score: 99.38666092722039
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ : 0 . 0 ) ) ) ;
rank: 234
score: 99.3587158203125
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) . $NUMBER$ ) ) ;
rank: 235
score: 99.51214890252976
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . - $NUMBER$ . 0 ) ) ) ) ;
rank: 235
score: 99.4997326078869
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 / $NUMBER$ . 0 ) ) ) ;
rank: 235
score: 99.4977139559659
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) * 1 . 0 ) ) ;
rank: 235
score: 99.46179877387152
patch: ( standard CaMeL Deviation - Math . sqrt ( 1 . 0 ) ) ) ) ;
rank: 235
score: 99.40003119574652
patch: ( standard CaMeL Deviation [ Math . sqrt ( 0 . 0 ) ) ) ) ;
rank: 235
score: 99.38809543185764
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) && 0 . 0 ) ;
rank: 235
score: 99.38652886284723
patch: ( standard CaMeL Deviation * Math . split ( $NUMBER$ . 0 ) ) ) ) ;
rank: 236
score: 99.51189630681819
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) / 0 . 0 ) ) ;
rank: 236
score: 99.49885639391448
patch: ( standard CaMeL Deviation < Math . sqrt ( $NUMBER$ . 0 ] ) ) ) ) ;
rank: 236
score: 99.48729248046875
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) * x ) ;
rank: 236
score: 99.4617984169408
patch: ( standard CaMeL Deviation * Math . min ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 236
score: 99.41551208496094
patch: standard CaMeL Deviation . Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 236
score: 99.39913779810855
patch: ( ( ( ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ) ) ) ;
rank: 236
score: 99.38802297491776
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + x
rank: 236
score: 99.38587103949652
patch: ( standard CaMeL Deviation * Math . close ( $NUMBER$ . 0 ) ) ) ) ;
rank: 236
score: 99.3583984375
patch: ( standard CaMeL Deviation * ( standard CaMeL Deviation 0 . 0 ) ) ) ) ;
rank: 237
score: 99.5111328125
patch: ( ( x - mean ) / Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 237
score: 99.48675537109375
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) )
rank: 237
score: 99.4150749655331
patch: ( ( long ) Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 237
score: 99.39846319901316
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) .
rank: 237
score: 99.38551161024306
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) true ;
rank: 237
score: 99.35785522460938
patch: ( standard CaMeL Deviation * Math . standard CaMeL Deviation ( $NUMBER$ . 0 ) ) ) ) ;
rank: 238
score: 99.5110394021739
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . max ( mean ) ;
rank: 238
score: 99.49857003348214
patch: Math . sqrt ( $NUMBER$ . 0 * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 238
score: 99.48651677911931
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) | 0 . $NUMBER$ ;
rank: 238
score: 99.46171489514802
patch: ( standard CaMeL Deviation * Math . sqrt ( 1 . 0 ) ) ) ) * ;
rank: 238
score: 99.3984375
patch: ( ( ( ( standard CaMeL Deviation * 0 . 0 ) ) ) ) ) ) ;
rank: 238
score: 99.38677619485294
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ? 0 . 0
rank: 238
score: 99.384765625
patch: ( standard CaMeL Deviation * Math . sqrt ( SIZE ) ) ) ) ;
rank: 238
score: 99.3573974609375
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) . start ) ) ;
rank: 239
score: 99.49737258184524
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ? standard CaMeL Deviation ;
rank: 239
score: 99.48580496651786
patch: Integer . sqrt ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 239
score: 99.41488486842105
patch: ( Integer . sqrt ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 239
score: 99.39830186631944
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) . ;
rank: 239
score: 99.38653564453125
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) - $NUMBER$ ) ;
rank: 239
score: 99.38467068142361
patch: ( standard CaMeL Deviation * Math . SIZE ( $NUMBER$ . 0 ) ) ) ) ;
rank: 240
score: 99.51088645241477
patch: ( 1 . 0 ) ) ) + standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ;
rank: 240
score: 99.49641557173295
patch: $NUMBER$ . 0 ) ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 240
score: 99.4857510653409
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) . 0 ) ) ) ) ;
rank: 240
score: 99.45921566611842
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) , ;
rank: 240
score: 99.41442108154297
patch: Math . sqrt ( standard CaMeL Deviation * 0 . 0 ) ) ) ;
rank: 240
score: 99.39828973067434
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ? $NUMBER$ ;
rank: 240
score: 99.38572933799342
patch: ( $NUMBER$ . 0 ) ) ) + $NUMBER$ . $NUMBER$ * ( $NUMBER$ . 0 ) ;
rank: 240
score: 99.3841552734375
patch: ( standard CaMeL Deviation * ( this . erf ( ) ) ) ) ) ;
rank: 241
score: 99.49700055803571
patch: ( ( double ) Math . sqrt ( $NUMBER$ . 0 + $NUMBER$ . 0 ) ) ) ) ;
rank: 241
score: 99.48563232421876
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) * 0 ) ;
rank: 241
score: 99.39796278211806
patch: ( standard CaMeL Deviation * Character . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 241
score: 99.3856201171875
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) : }
rank: 241
score: 99.38406575520834
patch: ( standard CaMeL Deviation * ( x - mean ) ) ) ) ;
rank: 241
score: 99.35595703125
patch: ( Math . sqrt ( $NUMBER$ . 0 ) . 0 ) ) ) ) ;
rank: 242
score: 99.51052989130434
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . erf ( ( x -
rank: 242
score: 99.49653455946181
patch: ( Math . min ( $NUMBER$ . 0 , $NUMBER$ . 0 ) ) ) ) ;
rank: 242
score: 99.49608212425595
patch: ( double ) ( standard CaMeL Deviation * Math . sqrt ( 1 . 0 ) ) ) ) ;
rank: 242
score: 99.48542865953948
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) true ;
rank: 242
score: 99.45783148871527
patch: ( $NUMBER$ . 0 ) ) ) / Math . sqrt ( $NUMBER$ . 0 ) ;
rank: 242
score: 99.4140689247533
patch: ( standard CaMeL Deviation ( standard CaMeL Deviation ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 242
score: 99.39748806423611
patch: ( ( 0 . Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 243
score: 99.51008744673295
patch: ( $NUMBER$ . 0 ) , standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 243
score: 99.45737868088942
patch: ( standard CaMeL Deviation * $NUMBER$ . $NUMBER$ ) ) ) ;
rank: 243
score: 99.41372198807566
patch: ( Math . round ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 243
score: 99.396875
patch: ( standard CaMeL Deviation * 0 . 0 . 0 ) ) ) ;
rank: 243
score: 99.38357704564145
patch: ( standard CaMeL Deviation * ( standard CaMeL Deviation == 0 . 0 ) ) ) ) ;
rank: 243
score: 99.35545518663194
patch: ( standard CaMeL Deviation * ( standard CaMeL Deviation * ( ) ) ) ) ) ;
rank: 244
score: 99.49623616536458
patch: ( 0 . 0 * standard CaMeL Deviation ( $NUMBER$ . 0 ) ) ) ) ;
rank: 244
score: 99.49586070667614
patch: 0 . 0 ) * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 244
score: 99.45668538411458
patch: ( standard CaMeL Deviation * Math . cos ( $NUMBER$ . 0 ) ) ) ) ;
rank: 244
score: 99.41371556332237
patch: Math . sqrt ( Math . sqrt ( $NUMBER$ . 0 . 1 ) ) ) ) ;
rank: 244
score: 99.39674136513158
patch: ( ( standard CaMeL Deviation > Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 244
score: 99.38319156044408
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) != ) ) ;
rank: 245
score: 99.50937721946023
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) + $NUMBER$ ;
rank: 245
score: 99.49603562127976
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 1 ) ) ) ) ) ;
rank: 245
score: 99.49569847470238
patch: ( double ) ( Math . sqrt ( $NUMBER$ . 0 + $NUMBER$ . 0 ) ) ) ) ;
rank: 245
score: 99.41290283203125
patch: Math . sqrt ( int ) Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 245
score: 99.38488091362848
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) && *
rank: 245
score: 99.38209935238487
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . - erf ) ) ) ) ;
rank: 246
score: 99.50930447048611
patch: ( 1 . 0 ) ) ) . erf ( ( x - mean ) ) ;
rank: 246
score: 99.49581473214286
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) * standard CaMeL Deviation ;
rank: 246
score: 99.49554443359375
patch: 1 . 0 ) , standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 246
score: 99.412841796875
patch: ( double ) standard CaMeL Deviation * Math . sqrt ( standard CaMeL Deviation ) ) ) ;
rank: 246
score: 99.39616176060268
patch: ( standard CaMeL Deviation * Math . sqrt $NUMBER$ ) ) ) ;
rank: 246
score: 99.38448936060855
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) - 0
rank: 246
score: 99.35504471628289
patch: ( ( standard CaMeL Deviation * standard CaMeL Deviation * standard CaMeL Deviation ) ) ) ) ;
rank: 247
score: 99.50886674360795
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . length ( ) ;
rank: 247
score: 99.494677734375
patch: ( ( standard CaMeL Deviation / Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 247
score: 99.4842529296875
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) != 0 ) ;
rank: 247
score: 99.41239420572917
patch: Math . sqrt ( standard CaMeL Deviation ) ) ) ;
rank: 247
score: 99.39518015008224
patch: ( ( Math . sqrt ( $NUMBER$ . 0 ) $NUMBER$ . 0 ) ) ) ) ;
rank: 247
score: 99.38434159128289
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) * ( $NUMBER$ . 0 ) )
rank: 247
score: 99.35402425130208
patch: ( ( $NUMBER$ * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 248
score: 99.5087359884511
patch: Math . sqrt ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ;
rank: 248
score: 99.41224429481908
patch: ( double ) Math . sqrt ( $NUMBER$ . 0 | $NUMBER$ . 0 ) ) ) ;
rank: 248
score: 99.38046746504934
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 1 ) ) ) ) ; }
rank: 248
score: 99.35368909333882
patch: ( boolean ) standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 249
score: 99.49509499289773
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) / 1 . 0 ) ;
rank: 249
score: 99.4938213641827
patch: ( $NUMBER$ . 0 * $NUMBER$ . 0 ) ) ) ;
rank: 249
score: 99.48396439985795
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 + x ) ) ) ) ;
rank: 249
score: 99.45440352590461
patch: ( double ) standard CaMeL Deviation + Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 249
score: 99.39487591911765
patch: ( ( Math . sqrt ( $NUMBER$ . 0 ) 0 ) ) ) ) ;
rank: 249
score: 99.38206571691177
patch: ( ( $NUMBER$ . 0 ) / ( $NUMBER$ . 0 ) ) ) ) ;
rank: 249
score: 99.38040964226974
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . >= $NUMBER$ ) ) ) ) ;
rank: 249
score: 99.35310668945313
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) - 0 ) ;
rank: 250
score: 99.50803541100544
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . equals ( mean ) ;
rank: 250
score: 99.49304780505952
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) $NUMBER$ . 1 ) ) ) ;
rank: 250
score: 99.48343912760417
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) * 0 . $NUMBER$ ) ;
rank: 250
score: 99.41201346261161
patch: ( Math . min ( $NUMBER$ . 0 ) ) ) ) ;
rank: 250
score: 99.38178253173828
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) : $NUMBER$ ;
rank: 250
score: 99.38034539473684
patch: ( standard CaMeL Deviation * Math . sqrt ( ) . sqrt ( ) ) ) ) ;
rank: 250
score: 99.352294921875
patch: ( $NUMBER$ / standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 251
score: 99.50797526041667
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 $NUMBER$ ) ) ) ) ) ;
rank: 251
score: 99.49491577148437
patch: $NUMBER$ . 0 + standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 251
score: 99.49260864257812
patch: ( super . standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 251
score: 99.48310990767045
patch: ( standard CaMeL Deviation * Math . sqrt ( Math . 0 . 0 . 0 ) ) ) ) ;
rank: 251
score: 99.45327919407895
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ^ ;
rank: 251
score: 99.41182454427083
patch: ( standard CaMeL Deviation * Math . sqrt ( Float . 0 ) ) ) ) ;
rank: 251
score: 99.39479466488487
patch: ( standard CaMeL Deviation ( Math . sqrt ( 0 . 0 ) ) ) ) ) ;
rank: 251
score: 99.38075015419408
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) 1 ) ;
rank: 251
score: 99.37938774956598
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . FALSE ) ) ) ) ;
rank: 251
score: 99.35194091796875
patch: ( this . standard CaMeL Deviation * Math . sqrt ( 0 . 0 ) ) ) ) ;
rank: 252
score: 99.50787963867188
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) + mean ) ;
rank: 252
score: 99.48305257161458
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) + 1 . 0 ;
rank: 252
score: 99.45294510690789
patch: ( double ) Math . sqrt ( $NUMBER$ . 0 ) ) ) + 1 . 0 ;
rank: 252
score: 99.41091437088816
patch: ( double standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 252
score: 99.39396587171052
patch: ( ( ( standard CaMeL Deviation * Math . 0 . 0 ) ) ) ) ) ;
rank: 252
score: 99.37938017003677
patch: ( standard CaMeL Deviation * Math . sqrt ( - sqrt ) ) ) ) ;
rank: 253
score: 99.45267062717014
patch: ( double ) standard CaMeL Deviation * $NUMBER$ . 0 ) ) / $NUMBER$ . 0 ;
rank: 253
score: 99.41090494791666
patch: ( int ) Math . sqrt ( 0 . 0 ) ) ) ;
rank: 253
score: 99.39375135633681
patch: super . standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 253
score: 99.38063557942708
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ? $NUMBER$
rank: 253
score: 99.37893337673611
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . Long ) ) ) ) ;
rank: 253
score: 99.35114881727431
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) }
rank: 254
score: 99.49388538707386
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) + standard CaMeL Deviation ) ) ;
rank: 254
score: 99.49197823660714
patch: 0 . 0 ) * Math . sqrt ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 254
score: 99.48248845880681
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) + $NUMBER$ . $NUMBER$ ) ;
rank: 254
score: 99.41042193244485
patch: Math . sqrt ( $NUMBER$ . 0 ( $NUMBER$ . 0 ) ) ) ) ;
rank: 254
score: 99.38047281901042
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) false )
rank: 254
score: 99.35101928710938
patch: 0 . 0 + standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 255
score: 99.49164428710938
patch: ( standard CaMeL Deviation * Math . double CaMeL Value ( $NUMBER$ . 0 ) ) ) ) ;
rank: 255
score: 99.4817756204044
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) )
rank: 255
score: 99.45148026315789
patch: ( standard CaMeL Deviation * Math . ceil ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 255
score: 99.39284939236111
patch: ( standard CaMeL Deviation >> Math . sqrt ( 0 . 0 ) ) ) ) ;
rank: 255
score: 99.38043891059027
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) * 1 . $NUMBER$ ;
rank: 255
score: 99.37843081825658
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . . 0 ) ) ) ) ;
rank: 256
score: 99.50639011548913
patch: Math . sqrt ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 256
score: 99.49360795454545
patch: ( standard CaMeL Deviation * Math . sqrt ( standard CaMeL Deviation * 0 . 0 ) ) ) ) ;
rank: 256
score: 99.49160621279762
patch: ( standard CaMeL Deviation > Math . sqrt ( $NUMBER$ . 0 ) $NUMBER$ . 0 ) ) ) ;
rank: 256
score: 99.48146362304688
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) , null ) ;
rank: 256
score: 99.45084874770221
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) + 1 . 0 ;
rank: 256
score: 99.39189317491319
patch: ( ( $NUMBER$ . 0 ) * sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 257
score: 99.50593705610795
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . abs ( ) ;
rank: 257
score: 99.4933749112216
patch: ( standard CaMeL Deviation * standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . $NUMBER$ ) ) ) ) ;
rank: 257
score: 99.49144287109375
patch: ( ( standard CaMeL Deviation * Math . min ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 257
score: 99.480712890625
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) - 1 . 0 ;
rank: 257
score: 99.45011393229167
patch: ( standard CaMeL Deviation * Math . random ( $NUMBER$ . 0 ) ) ) ) ;
rank: 257
score: 99.40949563419117
patch: ( ( int ) Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 257
score: 99.37783331620066
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) / *
rank: 257
score: 99.37751850328948
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) false ) ) ;
rank: 258
score: 99.5057040127841
patch: ( x - ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 258
score: 99.49284224076705
patch: $NUMBER$ . 0 ) * standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ;
rank: 258
score: 99.49090576171875
patch: ( ( standard CaMeL Deviation * Math . round ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 258
score: 99.48026529947917
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) )
rank: 258
score: 99.44916240985577
patch: ( standard CaMeL Deviation - 1 . 0 ) ) ) ;
rank: 258
score: 99.40907118055556
patch: ( $NUMBER$ . 0 | Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 258
score: 99.39157443576389
patch: ( ( $NUMBER$ . 0 ) - sqrt ( 0 . 0 ) ) ) ) ;
rank: 258
score: 99.37762451171875
patch: ( Math . sqrt ( $NUMBER$ , 0 . 0 ) ) ) ) ;
rank: 258
score: 99.37714979383681
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) . ) ;
rank: 258
score: 99.34931640625
patch: ( standard CaMeL Deviation * Math . sqrt ( ( 0 . 0 ) ) ) ) ) ;
rank: 259
score: 99.50560360863095
patch: Math . sqrt ( $NUMBER$ . 0 ) / Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 259
score: 99.47988059303977
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) . 0 ;
rank: 259
score: 99.39142809416118
patch: ( ( standard CaMeL Deviation * Math . sqrt ( ) . 0 ) ) ) ) ;
rank: 259
score: 99.37590196397569
patch: ( x - mean * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 260
score: 99.50554865056819
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) , $NUMBER$ ) ) ) ;
rank: 260
score: 99.4925870028409
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 << standard CaMeL Deviation ) ) ) ) ;
rank: 260
score: 99.49017624627976
patch: ( standard CaMeL Deviation > 0 . 0 ) ? $NUMBER$ . 0 : $NUMBER$ . 0 ) ) ;
rank: 260
score: 99.4796854654948
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ? 0 . $NUMBER$ ;
rank: 260
score: 99.44767038445724
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . $NUMBER$ ) ) ) ) * ;
rank: 260
score: 99.40888977050781
patch: ( Math . sqrt ( $NUMBER$ . 0 . 1 ) ) ) ) ;
rank: 260
score: 99.39134979248047
patch: ( double ) * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 260
score: 99.37696075439453
patch: ( Math . sqrt ( $NUMBER$ >= $NUMBER$ . 0 ) ) ) ) ;
rank: 260
score: 99.37584092881944
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . Short ) ) ) ) ;
rank: 260
score: 99.34913394325658
patch: ( standard CaMeL Deviation * Math . sqrt ( / $NUMBER$ . 0 ) ) ) ) ;
rank: 261
score: 99.50550426136364
patch: ( $NUMBER$ . 0 ) ) / standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 261
score: 99.49012451171875
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ] ) ) ) ) ) ;
rank: 261
score: 99.4796630859375
patch: ( standard CaMeL Deviation * this . Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 261
score: 99.40787082248264
patch: Math . sqrt ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 261
score: 99.39089626736111
patch: ( standard CaMeL Deviation * super . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 261
score: 99.37618679470486
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) - $NUMBER$ . 0 ) ) ;
rank: 261
score: 99.37496145148026
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 TYPE ) ) ) ) ;
rank: 261
score: 99.34910278320312
patch: ( this . erf ( ) / Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 262
score: 99.48897879464286
patch: ( standard CaMeL Deviation > $NUMBER$ . 0 ? $NUMBER$ . 0 : 0 . 0 ) ) ) ;
rank: 262
score: 99.447265625
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) * ;
rank: 262
score: 99.3907470703125
patch: ( standard CaMeL Deviation ( $NUMBER$ . 0 ) ) ) ) ;
rank: 262
score: 99.34903293185764
patch: ( standard CaMeL Deviation * Math . sqrt ( max . 0 ) ) ) ) ;
rank: 263
score: 99.50502080502717
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) : - $NUMBER$ . $NUMBER$ ;
rank: 263
score: 99.49220106336806
patch: f . standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 263
score: 99.37592516447368
patch: ( $NUMBER$ . 0 ) ) ) : 0 . $NUMBER$ * ( 1 . 0 ) ;
rank: 263
score: 99.37474300986842
patch: ( standard CaMeL Deviation * standard CaMeL Deviation ) ) / ( $NUMBER$ . 0 ) ) ;
rank: 264
score: 99.4920321377841
patch: $NUMBER$ . 0 ) ? ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 264
score: 99.48887416294643
patch: ( standard CaMeL Deviation > $NUMBER$ . 0 ) ? $NUMBER$ . 0 : $NUMBER$ . 0 ) ) ;
rank: 264
score: 99.44651392886513
patch: ( standard CaMeL Deviation + Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 264
score: 99.39017740885417
patch: ( standard CaMeL Deviation , Math . sqrt ( 0 . 0 ) ) ) ) ;
rank: 264
score: 99.37564890008224
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) && *
rank: 264
score: 99.37473016036184
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . <= $NUMBER$ ) ) ) ) ;
rank: 265
score: 99.50460682744566
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . erf ( $STRING$ ) ;
rank: 265
score: 99.49072265625
patch: ( double ) float ) ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 265
score: 99.4431088096217
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) | ;
rank: 265
score: 99.37493133544922
patch: ( Math . sqrt ( $NUMBER$ == 0 . 0 ) ) ) ) ;
rank: 266
score: 99.50418526785714
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . 0 ) ;
rank: 266
score: 99.4906893643466
patch: $NUMBER$ . 0 . 0 ) + standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 266
score: 99.47866821289062
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) - 0 . 0 ;
rank: 266
score: 99.44298031455592
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 * $NUMBER$ ) ) ) ;
rank: 266
score: 99.40664333767361
patch: ( 1 . 0 / Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 266
score: 99.37451171875
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 this ) ) ) ) ;
rank: 267
score: 99.50411783854166
patch: Erf . erf ( ( x - mean ) ) ) ) ;
rank: 267
score: 99.48776084498355
patch: ( float ) Math . sqrt ( $NUMBER$ . 0 * $NUMBER$ . 0 ) ) ) ;
rank: 267
score: 99.47843794389205
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) + $NUMBER$ ) ;
rank: 267
score: 99.40650699013158
patch: Math . sqrt ( Math . sqrt ( $NUMBER$ . 0 . $NUMBER$ ) ) ) ) ;
rank: 267
score: 99.37383069490132
patch: ( standard CaMeL Deviation * Math . sqrt ( short ) $NUMBER$ . 0 ) ) ) ;
rank: 267
score: 99.37356728001645
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ , 0 . 0 ) ) ) ;
rank: 268
score: 99.50389563519022
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . get ( mean ) ;
rank: 268
score: 99.4875720796131
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . $NUMBER$ ) ) ) ) ) ;
rank: 268
score: 99.47841574928977
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) * 0 . $NUMBER$ ;
rank: 268
score: 99.4412841796875
patch: ( double ) Math . sqrt ( $NUMBER$ . 0 ) ) ) * ;
rank: 268
score: 99.40511067708333
patch: ( short ) Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 268
score: 99.37310431985294
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) . ;
rank: 268
score: 99.34614000822368
patch: ( standard CaMeL Deviation * ( standard CaMeL Deviation . erf ( ) ) ) ) ) ;
rank: 269
score: 99.50337524414063
patch: ( ( $NUMBER$ . 0 ) ) ) ) . erf ( ( x - mean ) ) ;
rank: 269
score: 99.40483012952302
patch: ( Math . sqrt ( Math . sqrt ( $NUMBER$ . $NUMBER$ ) ) ) ) ) ;
rank: 269
score: 99.38878716362848
patch: ( ( $NUMBER$ . 0 ) - sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 269
score: 99.37277560763889
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ - $NUMBER$ ) ) ) ) ;
rank: 269
score: 99.3726870888158
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) * 1 . 0 ) ;
rank: 270
score: 99.50331182065217
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) . ( ) ;
rank: 270
score: 99.47758345170455
patch: ( ( this . standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 270
score: 99.44037543402777
patch: $NUMBER$ * standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 270
score: 99.4046566611842
patch: ( double ) Math . sqrt ( $NUMBER$ . 0 - 0 . 0 ) ) ) ;
rank: 270
score: 99.38863975123355
patch: ( standard CaMeL Deviation 1 * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 270
score: 99.37261284722223
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ? 0
rank: 270
score: 99.3724365234375
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) $NUMBER$ ) ;
rank: 271
score: 99.4769287109375
patch: ( standard CaMeL Deviation . standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 271
score: 99.44016627261513
patch: ( standard CaMeL Deviation * Math . sqrt ( double ) $NUMBER$ . 0 ) ) ) ;
rank: 271
score: 99.40451531661184
patch: ( Math . sqrt ( Math . sqrt ( $NUMBER$ . 1 ) ) ) ) ) ;
rank: 271
score: 99.37241082442434
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + 0
rank: 271
score: 99.34550170898437
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) * } ) ;
rank: 272
score: 99.50250854492188
patch: ( ( x - mean ) * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 272
score: 99.48893599076705
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) & 0 . 0 ) ;
rank: 272
score: 99.44014485677083
patch: ( double ) Math . sqrt ( $NUMBER$ . 0 ) ) ) * / ) ;
rank: 272
score: 99.40433542351974
patch: ( double ) Math . sqrt ( standard CaMeL Deviation * standard CaMeL Deviation ) ) ) ;
rank: 272
score: 99.37216525607639
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ ) ) . 0 ) ) ;
rank: 272
score: 99.37198893229167
patch: ( $NUMBER$ . 0 ) / ( $NUMBER$ . 0 ) ) ) ;
rank: 273
score: 99.4766845703125
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) - 1 . $NUMBER$ ) ;
rank: 273
score: 99.43964385986328
patch: ( standard CaMeL Deviation * Math . sqrt ( $STRING$ ) ) ) ) ;
rank: 273
score: 99.40422506893383
patch: Math . sqrt ( Math . sqrt ( $NUMBER$ . 1 ) ) ) ) ;
rank: 273
score: 99.38808306525735
patch: new standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 273
score: 99.37195502387152
patch: ( Math . sqrt ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 274
score: 99.50229279891305
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) == 0 . $NUMBER$ ) ;
rank: 274
score: 99.48883611505681
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . $NUMBER$ / $NUMBER$ . 0 ) ) ) ) ;
rank: 274
score: 99.48520042782738
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) $NUMBER$ ) ) ) ) ;
rank: 274
score: 99.47660522460937
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) , false ) ) ;
rank: 274
score: 99.38779025607639
patch: ( standard CaMeL Deviation < Math . sqrt ( 0 . 0 ) ) ) ) ;
rank: 274
score: 99.37197394120066
patch: ( standard CaMeL Deviation * Math . sqrt ( & 0 . 0 ) ) ) ) ;
rank: 275
score: 99.50177001953125
patch: ( ( $NUMBER$ . 0 ) - Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 275
score: 99.48871404474431
patch: $NUMBER$ . 0 ) + standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ;
rank: 275
score: 99.48481677827381
patch: ( double ) ( Math . sqrt ( $NUMBER$ . 0 * $NUMBER$ . 0 ) ) ) ) ;
rank: 275
score: 99.43922254774306
patch: ( standard CaMeL Deviation * Math . sqrt ( 1 . $NUMBER$ ) ) ) ) ;
rank: 275
score: 99.38764105902777
patch: ( ( $NUMBER$ . Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 275
score: 99.37173622532895
patch: sqrt ( standard CaMeL Deviation * Math . sqrt ( 1 . 0 ) ) ) ) ;
rank: 275
score: 99.34438605057566
patch: ( standard CaMeL Deviation * Math . sqrt ( : $NUMBER$ . 0 ) ) ) ) ;
rank: 276
score: 99.488525390625
patch: ( double ) standard CaMeL Deviation * standard CaMeL Deviation * standard CaMeL Deviation * standard CaMeL Deviation ) ) ;
rank: 276
score: 99.48407946134868
patch: ( double ) Math . sqrt ( $NUMBER$ . 0 * standard CaMeL Deviation ) ) ) ;
rank: 276
score: 99.47588820684524
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 $NUMBER$ ) ) ) ) ;
rank: 276
score: 99.43900339226974
patch: ( standard CaMeL Deviation / Math . sqrt ( $NUMBER$ . 0 ) ) ) ) * ;
rank: 276
score: 99.37169053819444
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) false ;
rank: 276
score: 99.37111529181985
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ? 1 . 0
rank: 276
score: 99.34345703125
patch: ( $NUMBER$ . 0 ) / ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 277
score: 99.4758236533717
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 double ) ) ) ) ;
rank: 277
score: 99.43893914473684
patch: ( $NUMBER$ . 0 * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 277
score: 99.40338134765625
patch: ( double ) 0 . 0 ? $NUMBER$ . 0 : 0 . 0 ) ) ;
rank: 277
score: 99.38701714409723
patch: ( standard CaMeL Deviation * Math . double ( $NUMBER$ . 0 ) ) ) ) ;
rank: 277
score: 99.37151135896382
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) & ) ;
rank: 277
score: 99.34337768554687
patch: ( standard CaMeL Deviation * standard CaMeL Deviation * Math . sqrt ( $NUMBER$ ) ) ) ) ;
rank: 278
score: 99.40331217447917
patch: ( long ) Math . sqrt ( 0 . 0 ) ) ) ;
rank: 278
score: 99.3869384765625
patch: ( ( standard CaMeL Deviation * 1 . 0 ) ) ) ) ;
rank: 278
score: 99.37093098958333
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) / 0 . 0 ) ;
rank: 278
score: 99.34249717310855
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; ?
rank: 279
score: 99.48787434895833
patch: ( double ) ( $NUMBER$ . 0 ) ) ) ;
rank: 279
score: 99.48380533854167
patch: ( byte ) ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 279
score: 99.4752530184659
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) , 0 . 1 ) ) ;
rank: 279
score: 99.43879137541118
patch: ( standard CaMeL Deviation - Math . sqrt ( $NUMBER$ . 0 ) ) ) ) * ;
rank: 279
score: 99.40323036595395
patch: ( double ) Math . sqrt ( $NUMBER$ . 0 + 0 . 0 ) ) ) ;
rank: 279
score: 99.38632041529605
patch: ( standard CaMeL Deviation * * Math . sqrt ( 0 . 0 ) ) ) ) ;
rank: 279
score: 99.37087530838816
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) *
rank: 280
score: 99.50011097301136
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . ( $NUMBER$ ) ;
rank: 280
score: 99.48363095238095
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 * $NUMBER$ ) ) ) ) ) ;
rank: 280
score: 99.47520380434783
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + ( standard CaMeL Deviation ;
rank: 280
score: 99.43854723478618
patch: ( standard CaMeL Deviation * / Math . ceil ( $NUMBER$ . 0 ) ) ) ) ;
rank: 280
score: 99.40300436580883
patch: Math . sqrt ( Math . sqrt ( $NUMBER$ . $NUMBER$ ) ) ) ) ;
rank: 280
score: 99.38606092664931
patch: ( standard CaMeL Deviation += Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 280
score: 99.3709716796875
patch: mean standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 280
score: 99.36988589638158
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) * 1 . $NUMBER$ ) ;
rank: 281
score: 99.50011097301136
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) != 0 . $NUMBER$ ;
rank: 281
score: 99.48348388671874
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 >> $NUMBER$ ) ) ) ) ;
rank: 281
score: 99.47514038085937
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) )
rank: 281
score: 99.43852796052632
patch: ( standard CaMeL Deviation * Math . max ( $NUMBER$ . 0 ) ) ) ) * ;
rank: 281
score: 99.40268283420139
patch: ( 0 . 0 ? Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 281
score: 99.38599917763158
patch: ( ( double ) Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ;
rank: 281
score: 99.36953125
patch: ( $NUMBER$ . 0 ) ) - ( $NUMBER$ . 0 ) ) ;
rank: 282
score: 99.50006713867188
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) != 0 ;
rank: 282
score: 99.4871826171875
patch: 1 . 0 ) ) + standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ;
rank: 282
score: 99.4741719563802
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + 0 . $NUMBER$ . 0 ;
rank: 282
score: 99.438232421875
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) * $NUMBER$ . 0 ;
rank: 282
score: 99.40256219161184
patch: Math . sqrt ( $NUMBER$ * Math . sqrt ( 0 . 0 ) ) ) ) ;
rank: 282
score: 99.38547877261513
patch: ( standard CaMeL Deviation > Math . sqrt ( $NUMBER$ . 0 ) $NUMBER$ ) ) ) ;
rank: 282
score: 99.37020713404605
patch: Math . sqrt ( $NUMBER$ . 0 ) . erf ( $NUMBER$ . 0 ) ) ) ;
rank: 282
score: 99.36948756167763
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) . erf ( $NUMBER$ ) ) ) ;
rank: 283
score: 99.48165283203124
patch: ( ( standard CaMeL Deviation * Math . abs ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 283
score: 99.47412109375
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) * 1 . $NUMBER$ ) ;
rank: 283
score: 99.43791961669922
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) * / ) ;
rank: 283
score: 99.38529887952302
patch: ( standard CaMeL Deviation * Math . sqrt ( 0 . 0 ) ) ) ) ; }
rank: 283
score: 99.36982807360198
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . $NUMBER$ ) ) ) ) ; }
rank: 283
score: 99.36910207648026
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) / $NUMBER$ . 0 ) ;
rank: 284
score: 99.47378141983695
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) - 0 . $NUMBER$ ) ;
rank: 284
score: 99.40220811631944
patch: ( 0 . 0 << Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 284
score: 99.38509328741776
patch: ( standard CaMeL Deviation * Math . sqrt ( ( $NUMBER$ . ) ) ) ) ) ;
rank: 284
score: 99.36845960115132
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + $STRING$
rank: 284
score: 99.341162109375
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ - 0 . 0 ) ) ) ) ;
rank: 285
score: 99.48634338378906
patch: $NUMBER$ . 0 ) ) + Math . sqrt ( $NUMBER$ . 0 ) ;
rank: 285
score: 99.48137817382812
patch: ( standard CaMeL Deviation > Math . sqrt ( $NUMBER$ . 0 . 1 ) ) ) ) ;
rank: 285
score: 99.40177194695724
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . $NUMBER$ 1 ) ) ) ) ;
rank: 285
score: 99.38507401315789
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . ) ) ) ) ) ;
rank: 285
score: 99.36961534288194
patch: ( standard CaMeL Deviation * Math . clone ( $NUMBER$ . 0 ) ) ) ) ;
rank: 285
score: 99.3684146278783
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ? 0 == 0 . $NUMBER$
rank: 286
score: 99.4993312669837
patch: ( $NUMBER$ . 0 ) ) ) [ ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) )
rank: 286
score: 99.47352183948864
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ^ 0 . $NUMBER$ ;
rank: 286
score: 99.43645276521382
patch: ( $NUMBER$ . 0 * double ) Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 286
score: 99.4017693014706
patch: Math . sqrt ( $NUMBER$ . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 286
score: 99.38495836759868
patch: ( ( standard CaMeL Deviation , Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 286
score: 99.36832004123264
patch: ( Math . sqrt ( $NUMBER$ . 0 ) , $NUMBER$ . 0 ) ) ) ;
rank: 286
score: 99.34078979492188
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ > standard CaMeL Deviation ) ) ) ) ;
rank: 287
score: 99.49927819293478
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) : 0 . 0 ) ;
rank: 287
score: 99.48594970703125
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) , this ) ;
rank: 287
score: 99.47340990149456
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 $NUMBER$ . 0 ) ) ) ) ) ;
rank: 287
score: 99.43638209292763
patch: ( float ) standard CaMeL Deviation * Math . sqrt ( 1 . 0 ) ) ) ;
rank: 287
score: 99.36827177159927
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ?
rank: 287
score: 99.36818976151316
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ] ) ;
rank: 288
score: 99.47326078869048
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . $NUMBER$ . 0 ) ) ) ) ; }
rank: 288
score: 99.4012810202206
patch: Math . sqrt ( Math . sqrt ( 0 . 0 ) ) ) ) ;
rank: 288
score: 99.38396538628473
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) /
rank: 288
score: 99.36797417534723
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ == 0 . 0 ) ) ;
rank: 288
score: 99.36728387129934
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ( $NUMBER$ . 0 ) ) ) ) ;
rank: 288
score: 99.340478515625
patch: ( ( standard CaMeL Deviation < Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 289
score: 99.49913441051136
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) + ) ;
rank: 289
score: 99.47921316964286
patch: ( standard CaMeL Deviation > 0 . 0 ) ? $NUMBER$ . 0 : 0 . 0 ) ) ;
rank: 289
score: 99.43611653645833
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) + 1 ;
rank: 289
score: 99.36775716145833
patch: sqrt ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 289
score: 99.36709112870066
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) . 0 ) ) )
rank: 290
score: 99.4991122159091
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) : $NUMBER$ . 0 ;
rank: 290
score: 99.4789806547619
patch: ( int ) standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ;
rank: 290
score: 99.43537454044117
patch: ( 1 . 0 * standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ;
rank: 290
score: 99.40032489483173
patch: / Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 290
score: 99.38271612870066
patch: ( ( ( $NUMBER$ . 0 ) * ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 290
score: 99.34031982421875
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) / ) ) ;
rank: 291
score: 99.48394484747024
patch: ( float ) ( standard CaMeL Deviation - Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 291
score: 99.47245279947917
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) && $NUMBER$ . $NUMBER$ . 0 ) ;
rank: 291
score: 99.43392783717105
patch: ( double ) ) standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 291
score: 99.38221028645833
patch: ( ( 0 . 0 ) * $NUMBER$ . 0 ) ) ) ;
rank: 291
score: 99.36688553659539
patch: ( standard CaMeL Deviation * ( standard CaMeL Deviation >= 0 . 0 ) ) ) ) ;
rank: 292
score: 99.4988680752841
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) - $NUMBER$ . 0 ;
rank: 292
score: 99.43317328559027
patch: ( standard CaMeL Deviation * Math . sqrt ( 0 . $NUMBER$ ) ) ) ) ;
rank: 292
score: 99.40025329589844
patch: Math . sqrt ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ;
rank: 292
score: 99.38210577713816
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ,
rank: 292
score: 99.36659749348958
patch: ( Math . sqrt ( $NUMBER$ . 0 ) | $NUMBER$ . 0 ) ) ) ;
rank: 292
score: 99.34006754557292
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ / $NUMBER$ ) ) ) ) ;
rank: 293
score: 99.49808933423913
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . max ( $NUMBER$ ) ;
rank: 293
score: 99.47214226973684
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) $NUMBER$ ;
rank: 293
score: 99.43295769942434
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) - ;
rank: 293
score: 99.40021110983456
patch: ( long ) ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 293
score: 99.38139262952302
patch: ( ( float ) ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 293
score: 99.3400634765625
patch: ( standard CaMeL Deviation * Math . sqrt ( standard CaMeL Deviation . $NUMBER$ ) ) ) ) ;
rank: 294
score: 99.48296760110294
patch: ( standard CaMeL Deviation - Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 294
score: 99.47836785567434
patch: ( standard CaMeL Deviation < Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 294
score: 99.47209028764205
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) : 1 . 0 ;
rank: 294
score: 99.38121840533088
patch: ( ( standard CaMeL Deviation * 0 . 0 ) ) . 0 ) ) ;
rank: 294
score: 99.36594109786184
patch: ( Math . sqrt ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) *
rank: 294
score: 99.3399658203125
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ * 1 . 0 ) ) ) ) ;
rank: 295
score: 99.4977139559659
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) . length ;
rank: 295
score: 99.48246837797619
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ; ;
rank: 295
score: 99.47815522693452
patch: ( standard CaMeL Deviation > Math . sqrt ( $NUMBER$ . 0 ) 1 . 0 ) ) ) ;
rank: 295
score: 99.47161310369319
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) - standard CaMeL Deviation ;
rank: 295
score: 99.4322445518092
patch: ( double ) Math . sqrt ( $NUMBER$ . 0 ) ) ) * $NUMBER$ . 0 ;
rank: 295
score: 99.38112386067708
patch: ( ( double ) * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 295
score: 99.36639404296875
patch: ( standard CaMeL Deviation * Math . sqrt ( 1 . 1 ) ) ) ) ;
rank: 295
score: 99.36587185329861
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) + $NUMBER$ . 0 ) ) ;
rank: 296
score: 99.48222045898437
patch: ( double ) ( double ) ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 296
score: 99.47814360119048
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 * $NUMBER$ . ) ) ) ) ;
rank: 296
score: 99.43123372395833
patch: ( standard CaMeL Deviation * Math . min ( 1 . 0 ) ) ) ) ;
rank: 296
score: 99.3995132446289
patch: Math . sqrt ( $NUMBER$ . 0 + standard CaMeL Deviation ) ) ) ;
rank: 296
score: 99.365478515625
patch: ( $NUMBER$ . 0 ) ) ) + 0 . 0 * ( $NUMBER$ . 0 ) ;
rank: 296
score: 99.33929764597039
patch: ( + standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 297
score: 99.49734629755434
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . get ( x ) ;
rank: 297
score: 99.38088650173611
patch: ( standard CaMeL Deviation * Math . sqrt ( Long . 0 ) ) ) ) ;
rank: 297
score: 99.36514282226562
patch: ( Math . sqrt ( $NUMBER$ >= 0 . 0 ) ) ) ) ;
rank: 298
score: 99.47916666666667
patch: ( double ) ( standard CaMeL Deviation * Math . abs ( $NUMBER$ . 0 ) ) ) ) ;
rank: 298
score: 99.4778064546131
patch: ( this . standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 298
score: 99.47087296195652
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + 0 . 0 ) ;
rank: 298
score: 99.43022717927632
patch: ( double ) Math . sqrt ( $NUMBER$ . 0 ) ) ) * standard CaMeL Deviation ;
rank: 298
score: 99.38073052300348
patch: ( standard CaMeL Deviation * Math . set ( $NUMBER$ . 0 ) ) ) ) ;
rank: 298
score: 99.33922119140625
patch: ( standard CaMeL Deviation * Math . sqrt ( standard CaMeL Deviation . Math ) ) ) ) ;
rank: 299
score: 99.49686863111413
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . substring ( mean ) ;
rank: 299
score: 99.47674560546875
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ] 0 ) ) ) ) ;
rank: 299
score: 99.39794921875
patch: ( double ) Math . round ( $NUMBER$ . 0 ) ) ) ;
rank: 299
score: 99.38056383634868
patch: ( ( - sqrt ) * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 299
score: 99.36446982935855
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) & 0 . 0 ) ;
rank: 299
score: 99.33900146484375
patch: ( ( standard CaMeL Deviation & Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 300
score: 99.4963711825284
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . Integer ( ) ;
rank: 300
score: 99.4777587890625
patch: 1 . 0 ) / standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 300
score: 99.47054036458333
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 1 . 0 ) ) ) ) ; }
rank: 300
score: 99.42960902622768
patch: ( double ) standard CaMeL Deviation * standard CaMeL Deviation ) ) ;
rank: 300
score: 99.39728546142578
patch: Math . sqrt ( $NUMBER$ . 0 ) ) - 0 . 0 ) ;
rank: 300
score: 99.38040964226974
patch: ( double ) 0 . 0 ) * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 300
score: 99.36420641447368
patch: ( $NUMBER$ . 0 ) ) ) : 0 . $NUMBER$ * ( $NUMBER$ . $NUMBER$ ) ;
rank: 300
score: 99.36419356496711
patch: ( standard CaMeL Deviation * Math . sqrt ( << 0 . 0 ) ) ) ) ;
rank: 301
score: 99.49625651041667
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) + Math . sqrt ( $NUMBER$ . 0 ) ;
rank: 301
score: 99.47645970394737
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 : ) ) ) ) ;
rank: 301
score: 99.39688449435764
patch: ( 0 . 0 . Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 301
score: 99.37956157483552
patch: ( ( ( Integer ) Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 302
score: 99.49571161684783
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) && 0 . $NUMBER$ ) ;
rank: 302
score: 99.47732883029514
patch: ( double ) standard CaMeL Deviation * standard CaMeL Deviation * standard CaMeL Deviation ) ) ;
rank: 302
score: 99.47003495065789
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) )
rank: 302
score: 99.4287045127467
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) . double CaMeL Value ( ) ;
rank: 302
score: 99.39681846217105
patch: ( Math . sqrt ( Float . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 302
score: 99.37953587582237
patch: ( ( $NUMBER$ . ) * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 302
score: 99.36195775082237
patch: ( standard CaMeL Deviation * Math . sqrt ( + $NUMBER$ . 0 ) ) ) ) ;
rank: 302
score: 99.33819986979167
patch: ( ( standard CaMeL Deviation * standard CaMeL Deviation ) ) ) ) ;
rank: 303
score: 99.49557362432066
patch: ( standard CaMeL Deviation * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) )
rank: 303
score: 99.4772216796875
patch: ( standard CaMeL Deviation * Math . Float . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 303
score: 99.39675903320312
patch: ( 0 . Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 303
score: 99.36190635279605
patch: ( standard CaMeL Deviation * Math . sqrt ( 1 . 0 ) ) ) false ) ;
rank: 303
score: 99.3379638671875
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ | 0 . 0 ) ) ) ) ;
rank: 304
score: 99.4955166903409
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) != $NUMBER$ . $NUMBER$ ;
rank: 304
score: 99.37887912326389
patch: ( $NUMBER$ . 0 ) * Math . sqrt ( 0 . 0 ) ) ) ;
rank: 304
score: 99.36245245682566
patch: ( $NUMBER$ . 0 ) ) ) + 1 . $NUMBER$ * ( $NUMBER$ . 0 ) ;
rank: 304
score: 99.36182454427083
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; }
rank: 304
score: 99.33793559827302
patch: ( <= standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 305
score: 99.49545288085938
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) == 1 ;
rank: 305
score: 99.47553943452381
patch: ( standard CaMeL Deviation > $NUMBER$ . 0 ) ? $NUMBER$ . 0 : 0 . 0 ) ) ;
rank: 305
score: 99.4698819247159
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) * ( standard CaMeL Deviation ;
rank: 305
score: 99.42694769965277
patch: ( standard CaMeL Deviation ^ Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 305
score: 99.36176500822368
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) 1 ;
rank: 305
score: 99.33755653782895
patch: ( : standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 306
score: 99.49521706321023
patch: ( mean ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 306
score: 99.47590188419117
patch: ( float ) Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ;
rank: 306
score: 99.47520045230263
patch: ( Math . sqrt ( $NUMBER$ . 0 + $NUMBER$ . 0 ) ) ) ) ) ;
rank: 306
score: 99.42644585503473
patch: ( standard CaMeL Deviation * Math . max ( $NUMBER$ . $NUMBER$ ) ) ) ) ;
rank: 306
score: 99.39457194010417
patch: ( Math . sqrt ( $NUMBER$ . 0 + standard CaMeL Deviation ) ) ) ) ;
rank: 306
score: 99.37807103207237
patch: ( ( $NUMBER$ . 0 ) Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 306
score: 99.36201985677083
patch: ( Math . sqrt ( $NUMBER$ . 0 1 ) ) ) ) ;
rank: 306
score: 99.361083984375
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ == 0 . ) ) ) ) ;
rank: 306
score: 99.33718872070312
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) / x ) ;
rank: 307
score: 99.47544642857143
patch: ( double ) ( Math . sqrt ( $NUMBER$ . 0 ) * $NUMBER$ . 0 ) ) ) ;
rank: 307
score: 99.42569130345395
patch: ( standard CaMeL Deviation / / Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 307
score: 99.39415218955592
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ [ 0 ] ) ) ) ) ;
rank: 307
score: 99.37778607536765
patch: ( ( ( $NUMBER$ . 0 ) - $NUMBER$ . 0 ) ) ) ) ;
rank: 307
score: 99.36164008246527
patch: ( $NUMBER$ . 0 ) ) / Math . sqrt ( $NUMBER$ . $NUMBER$ ) ) ;
rank: 307
score: 99.33717105263158
patch: ( standard CaMeL Deviation * Math . sqrt ( , $NUMBER$ . 0 ) ) ) ) ;
rank: 308
score: 99.49473876953125
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) - 0 ;
rank: 308
score: 99.47543480282738
patch: ( float ) standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . $NUMBER$ . 0 ) ) ) ;
rank: 308
score: 99.46946022727273
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) - 1 . 0 ) ;
rank: 308
score: 99.42374460320724
patch: ( standard CaMeL Deviation * / Math . floor ( $NUMBER$ . 0 ) ) ) ) ;
rank: 308
score: 99.37773301866319
patch: ( Integer . 0 ) * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 308
score: 99.36140950520833
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) * $NUMBER$
rank: 308
score: 99.36051432291667
patch: Math . sqrt ( $NUMBER$ . 0 ) ) - ( $NUMBER$ . 0 ) ) ;
rank: 308
score: 99.33657997532895
patch: : ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 309
score: 99.49459402901786
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ ) 0 . 0 ) ) ) ) ;
rank: 309
score: 99.47518920898438
patch: 1 . 0 ) - standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 309
score: 99.47499302455357
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) * Math . sqrt ( $NUMBER$ . 0 ) ;
rank: 309
score: 99.42322455512152
patch: ( standard CaMeL Deviation * System . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 309
score: 99.39350971422698
patch: ( double ) Math . sqrt ( $NUMBER$ . $NUMBER$ + $NUMBER$ . 0 ) ) ) ;
rank: 309
score: 99.37699167351974
patch: ( *= standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 309
score: 99.36048648231908
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ , $NUMBER$ . 0 ) ) ) ;
rank: 309
score: 99.33652215254934
patch: ( standard CaMeL Deviation * standard CaMeL Deviation * standard CaMeL Deviation . 0 ) ) ) ;
rank: 310
score: 99.47469932154605
patch: ( double ) ( Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ;
rank: 310
score: 99.46915283203126
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) , x ) ) ;
rank: 310
score: 99.42287726151316
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 - ) ) ) ) ;
rank: 310
score: 99.3932243795956
patch: ( double ) Math . sqrt ( $NUMBER$ . 0 . 1 ) ) ) ;
rank: 310
score: 99.37694549560547
patch: ( ( Math . sqrt ( 0 . 0 ) ) ) ) ) ;
rank: 310
score: 99.36116108141448
patch: ( $NUMBER$ . 0 ) ) ) * 0 . $NUMBER$ * ( $NUMBER$ . 0 ) ;
rank: 310
score: 99.36033121744792
patch: ( standard CaMeL Deviation * ( standard CaMeL Deviation * 0 . 0 ) ) ) ;
rank: 310
score: 99.336083984375
patch: ( * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 311
score: 99.47476050967262
patch: ( int ) ( Math . sqrt ( $NUMBER$ . 0 * $NUMBER$ . 0 ) ) ) ) ;
rank: 311
score: 99.4227523803711
patch: $NUMBER$ . 0 ) / Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 311
score: 99.39297921316964
patch: ( Double . sqrt ( 0 . 0 ) ) ) ) ;
rank: 311
score: 99.37660725911458
patch: ( false . 0 ) * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 311
score: 99.36050754123264
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) : $NUMBER$ . $NUMBER$ ;
rank: 312
score: 99.473876953125
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 . 0 ) ) ) ;
rank: 312
score: 99.4681396484375
patch: ( standard CaMeL Deviation * Math . sqrt ( Math . 0 . 0 ) ) ) ) ;
rank: 312
score: 99.4224494485294
patch: ( $NUMBER$ . 0 + standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ;
rank: 312
score: 99.3603515625
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) || 1 . 0 ) ;
rank: 312
score: 99.33589477539063
patch: ( standard CaMeL Deviation * Math . Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 313
score: 99.494384765625
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . erf ( 0 ) ;
rank: 313
score: 99.47388916015625
patch: ( * standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ] ) ) ) ) ;
rank: 313
score: 99.47383045014881
patch: ( double [ ] ) standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 313
score: 99.42196994357639
patch: ( double ) standard CaMeL Deviation * $NUMBER$ . 0 ) ) * standard CaMeL Deviation ;
rank: 313
score: 99.37632242838542
patch: ( standard CaMeL Deviation * null . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 313
score: 99.36012098524306
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) : 1 . $NUMBER$ ;
rank: 313
score: 99.35892526726974
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) . 0 ) ;
rank: 313
score: 99.33480834960938
patch: ( ( $NUMBER$ . 0 + Erf . erf ( ( ) ) ) ) ) ) ;
rank: 314
score: 99.49427379261364
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) , $NUMBER$ ) ) ;
rank: 314
score: 99.47374906994048
patch: ( ( double ) $NUMBER$ . 0 ) ) * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 314
score: 99.46785888671874
patch: ( standard CaMeL Deviation <= Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ;
rank: 314
score: 99.42132889597039
patch: ( standard CaMeL Deviation * / Math . sqrt ( $NUMBER$ . $NUMBER$ ) ) ) ) ;
rank: 314
score: 99.35988255550987
patch: ( standard CaMeL Deviation * Math . sqrt sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 314
score: 99.33474731445312
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) , x ) ;
rank: 315
score: 99.49395197088069
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . value ( ) ;
rank: 315
score: 99.47337646484375
patch: standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 * $NUMBER$ . 0 ) ) ) ;
rank: 315
score: 99.47250366210938
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) , double ) ;
rank: 315
score: 99.46775124289773
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) : 0 . 1 ;
rank: 315
score: 99.42130773207721
patch: ( double ) Math . sqrt ( $NUMBER$ . 0 * $NUMBER$ ) ) ) ;
rank: 315
score: 99.39132690429688
patch: ( Math . sqrt ( $NUMBER$ . 1 . 0 ) ) ) ) ;
rank: 315
score: 99.35972836143092
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ? 0 . $NUMBER$ * $NUMBER$
rank: 316
score: 99.49357804008152
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) == 1 . $NUMBER$ ) ;
rank: 316
score: 99.47329566592262
patch: ( Math . sqrt ( Math . sqrt ( $NUMBER$ . 0 . 1 ) ) ) ) ) ;
rank: 316
score: 99.42084061472039
patch: ( standard CaMeL Deviation * Math . round ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 316
score: 99.3912417763158
patch: ( long ) Math . sqrt ( $NUMBER$ . 0 + $NUMBER$ . 0 ) ) ) ;
rank: 316
score: 99.37516704358552
patch: ( ( 0 . ) * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 316
score: 99.35931075246711
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ? 0 == 0 . 0
rank: 316
score: 99.35753109580592
patch: ( standard CaMeL Deviation * Math . sqrt ( ~ $NUMBER$ . 0 ) ) ) ) ;
rank: 317
score: 99.49301979758523
patch: ( 1 . 0 ) ) , standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 317
score: 99.46764026988636
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) == 0 ) ;
rank: 317
score: 99.42048196231617
patch: ( double ) Math . sqrt ( $NUMBER$ . 0 ) ) ) + 1 ;
rank: 317
score: 99.3910400390625
patch: ( double ) Math . sqrt ( standard CaMeL Deviation ) ) ) ;
rank: 317
score: 99.37491548978366
patch: ( standard CaMeL Deviation * null . 0 ) ) ) ;
rank: 317
score: 99.35749897203948
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . != 0 ) ) ) ) ;
rank: 318
score: 99.4927288552989
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) == $NUMBER$ . $NUMBER$ ) ;
rank: 318
score: 99.47176513671874
patch: ( standard CaMeL Deviation - Math . sqrt ( $NUMBER$ . $NUMBER$ . 0 ) ) ) ) ;
rank: 318
score: 99.46762084960938
patch: ( ( standard CaMeL Deviation << Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 318
score: 99.42042451746323
patch: ( double ) ( double ) standard CaMeL Deviation * $NUMBER$ . 0 ) ) ;
rank: 318
score: 99.37447959498355
patch: ( ( $NUMBER$ . 0 ) * standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ;
rank: 318
score: 99.35828399658203
patch: ( $NUMBER$ . 0 ) ) ) . cumulative CaMeL Probability ( x ) ;
rank: 318
score: 99.35745399876645
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ != 0 . ) ) ) ) ;
rank: 319
score: 99.47304400275735
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 + $NUMBER$ . 0 ) ) ) ;
rank: 319
score: 99.47120576746323
patch: ( double ) Math . sqrt ( $NUMBER$ . $NUMBER$ . 0 ) ) ) ;
rank: 319
score: 99.39000108506944
patch: ( Math . sqrt ( $NUMBER$ . 0 + 0 . 0 ) ) ) ) ;
rank: 319
score: 99.37435913085938
patch: double . 0 * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 319
score: 99.35825482536765
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ? 0 == 0
rank: 319
score: 99.35737690172698
patch: ( standard CaMeL Deviation * Math . sqrt ( float ) $NUMBER$ . 0 ) ) ) ;
rank: 319
score: 99.33418104383681
patch: ( this . $NUMBER$ * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 320
score: 99.47267552425987
patch: ( float ) Math . sqrt ( $NUMBER$ . 0 + $NUMBER$ . 0 ) ) ) ;
rank: 320
score: 99.47077287946429
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 / $NUMBER$ . ) ) ) ) ;
rank: 320
score: 99.4674405184659
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) . 0 ) ) ) ;
rank: 320
score: 99.41973876953125
patch: ( standard CaMeL Deviation * standard CaMeL Deviation * / $NUMBER$ . 0 ) ) ) ;
rank: 320
score: 99.3897476196289
patch: ( $STRING$ * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 320
score: 99.37406158447266
patch: ( this . Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 320
score: 99.35823328354779
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ? 0 == $NUMBER$
rank: 320
score: 99.35723555715461
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) , ) ) ) ;
rank: 320
score: 99.33354356553819
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ * 0 ) ) ) ) ;
rank: 321
score: 99.49233176491477
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . 0 + $NUMBER$ ;
rank: 321
score: 99.4725341796875
patch: ( standard CaMeL Deviation > $NUMBER$ . 0 ? $NUMBER$ : 0 . 0 ) ) ) ;
rank: 321
score: 99.4674405184659
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) || 0 . 0 ) ;
rank: 321
score: 99.41960706208882
patch: ( double ) $NUMBER$ . 0 ) ) + Math . sqrt ( $NUMBER$ . 0 ) ;
rank: 321
score: 99.38906378495066
patch: Math . sqrt ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ ) ) ) ) ;
rank: 321
score: 99.37314740349265
patch: ( ( standard CaMeL Deviation * 0 . 0 . 0 ) ) ) ) ;
rank: 321
score: 99.35810682508681
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) / $NUMBER$ . 0 ) ;
rank: 321
score: 99.3568179481908
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) true ) ) ;
rank: 321
score: 99.33327765213816
patch: ( this . erf ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 322
score: 99.38882107204861
patch: ( 1 . 0 + Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 322
score: 99.37258013556985
patch: ( ( ( 0 . 0 ) * $NUMBER$ . 0 ) ) ) ) ;
rank: 322
score: 99.35679224917763
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . < $NUMBER$ ) ) ) ) ;
rank: 322
score: 99.33295288085938
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) . public ) ) ) ;
rank: 323
score: 99.49225408380681
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) - $NUMBER$ . 0 ) ;
rank: 323
score: 99.46978469122024
patch: $NUMBER$ . 0 ) ) ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 323
score: 99.4667635830966
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) + 0 . 1 ) ;
rank: 323
score: 99.38855743408203
patch: standard CaMeL Deviation - Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 323
score: 99.37235514322917
patch: ( standard CaMeL Deviation 1 Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 323
score: 99.3574951171875
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + $NUMBER$
rank: 324
score: 99.47074381510417
patch: ( Math . sqrt ( $NUMBER$ . 0 * 0 . 0 ) ) ) ) ;
rank: 324
score: 99.46973876953125
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) , $STRING$ ) ;
rank: 324
score: 99.41899956597223
patch: ( standard CaMeL Deviation / Math . sqrt ( $NUMBER$ . $NUMBER$ ) ) ) ) ;
rank: 324
score: 99.38831922743056
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . Double ) ) ) ) ;
rank: 324
score: 99.37226305509868
patch: ( ( standard CaMeL Deviation > 0 . 0 ) * $NUMBER$ . 0 ) ) ) ;
rank: 324
score: 99.35672157689145
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ <= $NUMBER$ . 0 ) ) ) ;
rank: 324
score: 99.3566958778783
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + 0 . $NUMBER$ * $NUMBER$
rank: 325
score: 99.49215262276786
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 0 . 0 ) ) ) ) ;
rank: 325
score: 99.46623091264205
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) + x ;
rank: 325
score: 99.38786878083882
patch: ( double ) Math . sqrt ( $NUMBER$ . 0 - standard CaMeL Deviation ) ) ) ;
rank: 325
score: 99.37197536892361
patch: ( standard CaMeL Deviation * Math . 0 ( $NUMBER$ . 0 ) ) ) ) ;
rank: 325
score: 99.35665090460526
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ? )
rank: 325
score: 99.35592490748355
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) + ) ) ;
rank: 325
score: 99.33131103515625
patch: ( x , standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 326
score: 99.47035522460938
patch: ( standard CaMeL Deviation > Math . sqrt ( $NUMBER$ . 0 . $NUMBER$ ) ) ) ) ;
rank: 326
score: 99.46845935639881
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) . ( ) ) ;
rank: 326
score: 99.46548316592262
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) 0 . $NUMBER$ ) ;
rank: 326
score: 99.41788522820724
patch: ( standard CaMeL Deviation * Math . floor ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 326
score: 99.38722737630208
patch: ( Math . sqrt ( $NUMBER$ . 0 - standard CaMeL Deviation ) ) ) ) ;
rank: 326
score: 99.35573323567708
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) * 1 . 0 ) ;
rank: 326
score: 99.32991333007813
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + null ;
rank: 327
score: 99.47021484375
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 * ( ) ) ) ) ) ;
rank: 327
score: 99.46843872070312
patch: 1 . 0 * standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 327
score: 99.41785952919408
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) * $NUMBER$ . ;
rank: 327
score: 99.3716796875
patch: ( standard CaMeL Deviation * Math . 0 . 0 ) ) ) ;
rank: 327
score: 99.35558319091797
patch: ( Math . sqrt ( $NUMBER$ & 0 . 0 ) ) ) ) ;
rank: 327
score: 99.35508897569444
patch: ( standard CaMeL Deviation * Math . reverse ( $NUMBER$ . 0 ) ) ) ) ;
rank: 327
score: 99.32986789279514
patch: standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) . 0 ) ) ;
rank: 328
score: 99.4914883700284
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ? $NUMBER$ . $NUMBER$ ;
rank: 328
score: 99.38651769301471
patch: ( standard CaMeL Deviation * standard CaMeL Deviation - 1 . 0 ) ) ) ;
rank: 328
score: 99.37158203125
patch: ( ( ( standard CaMeL Deviation * 0 . 0 ) . 0 ) ) ) ) ;
rank: 328
score: 99.35536024305556
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) / $NUMBER$ . 0 ;
rank: 329
score: 99.49123313210227
patch: ( ( standard CaMeL Deviation * Math . sqrt ( ( $NUMBER$ . 0 ) ) ) ) ) ) ;
rank: 329
score: 99.46758674172794
patch: ~ standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 329
score: 99.4651387532552
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) == 0 . $NUMBER$ ) ;
rank: 329
score: 99.38632381663604
patch: ( double ) ( Double . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 329
score: 99.3551494891827
patch: ( Math . ( $NUMBER$ . 0 ) ) ) ) ;
rank: 329
score: 99.32867790670956
patch: ( ) ) / ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 330
score: 99.49116847826087
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + - $NUMBER$ . $NUMBER$ ;
rank: 330
score: 99.46494989809783
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . return 0 . 0 ;
rank: 330
score: 99.37095731847427
patch: ( standard CaMeL Deviation * Math . sqrt , $NUMBER$ . 0 ) ) ) ;
rank: 330
score: 99.35487196180556
patch: ( Math . sqrt ( $NUMBER$ . 0 || $NUMBER$ . 0 ) ) ) ) ;
rank: 330
score: 99.32855224609375
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ; ;
rank: 331
score: 99.49098899147727
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) != 1 . $NUMBER$ ;
rank: 331
score: 99.4697509765625
patch: ( 0 . standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 331
score: 99.46465509588069
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + 0 . mean ;
rank: 331
score: 99.38582570929276
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 1 . ) ) ) ) ;
rank: 331
score: 99.35463460286458
patch: ( standard CaMeL Deviation * Math . << ( $NUMBER$ . 0 ) ) ) ) ;
rank: 331
score: 99.35453527113971
patch: ( ( $NUMBER$ . 0 ) ) / ( $NUMBER$ . 0 ) ) ) ;
rank: 331
score: 99.32851690995066
patch: ( standard CaMeL Deviation * Math . sqrt ( >> 0 . 0 ) ) ) ) ;
rank: 332
score: 99.49097842261905
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) - mean ) ;
rank: 332
score: 99.4697265625
patch: ( Math . sqrt ( $NUMBER$ . 0 ] ) ) ) ) ;
rank: 332
score: 99.4141845703125
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 * $NUMBER$ ) ) ) )
rank: 332
score: 99.38564724392361
patch: ( $NUMBER$ . 0 ? Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 332
score: 99.37057834201389
patch: ( ( Math . sqrt ( $NUMBER$ . 0 ) ) . 0 ) ) ) ;
rank: 332
score: 99.35425522748162
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) 1 . 0 ) ) ;
rank: 332
score: 99.32840126439145
patch: ( Comparable ) standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 333
score: 99.46940532483552
patch: ( ( standard CaMeL Deviation * $NUMBER$ . 0 * $NUMBER$ . 0 ) ) ) ) ;
rank: 333
score: 99.46436157226563
patch: ( ( standard CaMeL Deviation + Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 333
score: 99.41417172080592
patch: ( double ) 0 . 0 ) ) / Math . sqrt ( $NUMBER$ . 0 ) ;
rank: 333
score: 99.38552856445312
patch: Math . max ( $NUMBER$ . 0 ) ) ) ;
rank: 333
score: 99.36994764539931
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) &&
rank: 333
score: 99.35347747802734
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) . 0 ) ) ;
rank: 334
score: 99.490185546875
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) : null ;
rank: 334
score: 99.469140625
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . $NUMBER$ . 1 ) ) ) ) ;
rank: 334
score: 99.46406860351563
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ? ) ;
rank: 334
score: 99.41394856770833
patch: $NUMBER$ . ) * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 334
score: 99.36973063151042
patch: ( standard CaMeL Deviation * Math . out ( $NUMBER$ . 0 ) ) ) ) ;
rank: 334
score: 99.35329861111111
patch: sqrt ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) )
rank: 334
score: 99.32743755139802
patch: ( standard CaMeL Deviation * ( standard CaMeL Deviation * ( x ) ) ) ) ) ;
rank: 335
score: 99.49010699728261
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) != 1 . $NUMBER$ ) ;
rank: 335
score: 99.46500854492187
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) << $NUMBER$ ) ) ) ;
rank: 335
score: 99.41383763363487
patch: ( standard CaMeL Deviation * * Math . max ( $NUMBER$ . 0 ) ) ) ) ;
rank: 335
score: 99.38480377197266
patch: Math . sqrt ( $NUMBER$ . 0 / 0 . 0 ) ) ) ;
rank: 335
score: 99.3685302734375
patch: ( ( ( $NUMBER$ . 0 ) $NUMBER$ . 0 ) ) ) ) ;
rank: 335
score: 99.35232543945312
patch: ( sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 336
score: 99.48966471354167
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) , - mean ) ;
rank: 336
score: 99.4683837890625
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . $NUMBER$ . $NUMBER$ ) ) ) ) ;
rank: 336
score: 99.4631014737216
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) , 1 . $NUMBER$ ) ) ;
rank: 336
score: 99.41363204152961
patch: ( int ) standard CaMeL Deviation * Math . sqrt ( 1 . 0 ) ) ) ;
rank: 336
score: 99.38459858141448
patch: ( Math . sqrt ( Math . round ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 336
score: 99.35221862792969
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) * $NUMBER$ ;
rank: 337
score: 99.48962983630952
patch: Math . sqrt ( $NUMBER$ . 0 ) ) / Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 337
score: 99.46455688476563
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 * float ) ) ) ) ;
rank: 337
score: 99.46258544921875
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . 0 + 0 . 0 ;
rank: 337
score: 99.38433516652961
patch: Math . sqrt ( $NUMBER$ . Math . sqrt ( 1 . 0 ) ) ) ) ;
rank: 337
score: 99.36814371744792
patch: ( ( $NUMBER$ . 0 ) * sqrt ( 0 . 0 ) ) ) ) ;
rank: 337
score: 99.35212537977431
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) true )
rank: 338
score: 99.46409301757812
patch: ( float ) ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 338
score: 99.38414001464844
patch: ( Math . sqrt ( $NUMBER$ . 0 . $NUMBER$ ) ) ) ) ;
rank: 338
score: 99.353759765625
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ >= $NUMBER$ ) ) ) ) ;
rank: 338
score: 99.32587890625
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ; }
rank: 339
score: 99.48871404474431
patch: ( ( standard CaMeL Deviation * ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ) ;
rank: 339
score: 99.4622738486842
patch: double ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 339
score: 99.383740234375
patch: ( char ) Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 339
score: 99.36764865451389
patch: ( ( Long * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 339
score: 99.35372121710526
patch: ( this . standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 339
score: 99.35204399956598
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) : cumulative CaMeL Probability ;
rank: 340
score: 99.46666124131944
patch: ( standard CaMeL Deviation > Math . sqrt ( $NUMBER$ . $NUMBER$ ) ) ) ) ;
rank: 340
score: 99.46273949032738
patch: ( double ) ( standard CaMeL Deviation * Math . sqrt ( 0 . 0 ) ) ) ) ;
rank: 340
score: 99.38358561197917
patch: ( Math . sqrt ( standard CaMeL Deviation . 0 . 0 ) ) ) ) ;
rank: 340
score: 99.35370836759868
patch: ( standard CaMeL Deviation * Math . min ( $NUMBER$ . 0 ) ) ) ) ; }
rank: 340
score: 99.35167643229167
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ? 0
rank: 340
score: 99.32467447916666
patch: ( standard CaMeL Deviation * standard CaMeL Deviation * $NUMBER$ ) ) ) ;
rank: 341
score: 99.48739013671874
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) != $NUMBER$ ;
rank: 341
score: 99.46659128289474
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 int ) ) ) ) ;
rank: 341
score: 99.46153675426136
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) , 1 . 0 ) ) ) ;
rank: 341
score: 99.38330078125
patch: standard CaMeL Deviation * Math . max ( $NUMBER$ . 0 ) ) ) ;
rank: 341
score: 99.35357987253289
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 $STRING$ ) ) ) ) ;
rank: 341
score: 99.35157606336806
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) + 0 . 0 ) ;
rank: 341
score: 99.32443076685855
patch: + ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 342
score: 99.46658664279514
patch: ( Math . sqrt ( $NUMBER$ . 0 * 1 . 0 ) ) ) ) ;
rank: 342
score: 99.46130952380952
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) + standard CaMeL Deviation ;
rank: 342
score: 99.41168619791667
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 * $NUMBER$ ) ) ) ;
rank: 342
score: 99.38330078125
patch: standard CaMeL Deviation ( standard CaMeL Deviation ( $NUMBER$ . 0 ) ) ) ) ;
rank: 342
score: 99.3673957375919
patch: ( standard CaMeL Deviation * Math . sqrt $NUMBER$ $NUMBER$ . 0 ) ) ) ;
rank: 342
score: 99.35067409939236
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) || *
rank: 342
score: 99.32371826171875
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; * *
rank: 343
score: 99.48718792459239
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) != $NUMBER$ . $NUMBER$ ) ;
rank: 343
score: 99.46000532670455
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) - $NUMBER$ . $NUMBER$ ) ;
rank: 343
score: 99.41095291940789
patch: ( standard CaMeL Deviation * / Math . abs ( $NUMBER$ . 0 ) ) ) ) ;
rank: 343
score: 99.38209533691406
patch: standard CaMeL Deviation , Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 343
score: 99.36720904181985
patch: Double . sqrt ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 343
score: 99.35028754340277
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) , 0 . $NUMBER$ ) ;
rank: 343
score: 99.32338995682566
patch: ( $NUMBER$ . 0 + Erf . erf ( ( x ) ) ) ) ) ;
rank: 344
score: 99.4106381064967
patch: ( double ) ( double ) Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 344
score: 99.38148600260416
patch: ( float ) Math . sqrt ( 0 . 0 ) ) ) ;
rank: 344
score: 99.35332930715461
patch: ( standard CaMeL Deviation * Erf . erf ( 0 . 0 ) ) ) ) ;
rank: 344
score: 99.349755859375
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) * ) ;
rank: 345
score: 99.48696067116477
patch: ( ( Math . sqrt ( $NUMBER$ . 0 ) * ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 345
score: 99.46046084449405
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 + standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ;
rank: 345
score: 99.45982294497283
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . return 0 . $NUMBER$ ;
rank: 345
score: 99.38145045230263
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . length ( ) ) ) ) ;
rank: 345
score: 99.36692979600694
patch: ( standard CaMeL Deviation * Math . interrupt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 345
score: 99.353271484375
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; }
rank: 345
score: 99.34896414620536
patch: ( Long . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 346
score: 99.48696067116477
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . close ( ) ;
rank: 346
score: 99.460205078125
patch: ( standard CaMeL Deviation * Math . sqrt ( abs ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 346
score: 99.41019015842014
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . ) ) ) ) ) ;
rank: 346
score: 99.36613384046052
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . $NUMBER$ . ) ) ) ) ;
rank: 346
score: 99.34880913628473
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) * $NUMBER$ . 0 ;
rank: 347
score: 99.45999581473214
patch: ( double ) standard CaMeL Deviation * ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 347
score: 99.38138580322266
patch: ( Math . sqrt ( 0 . 0 . 0 ) ) ) ) ;
rank: 347
score: 99.36587863498264
patch: ( standard CaMeL Deviation * int . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 347
score: 99.35283067491319
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ - sqrt ) ) ) ) ;
rank: 348
score: 99.38014051649306
patch: ( Math . sqrt ( standard CaMeL Deviation * standard CaMeL Deviation ) ) ) ) ;
rank: 348
score: 99.36581759982639
patch: ( standard CaMeL Deviation * Math . sqrt ( length . 0 ) ) ) ) ;
rank: 348
score: 99.35224994860198
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) == ) ) ;
rank: 348
score: 99.34817504882812
patch: ( $NUMBER$ < Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 349
score: 99.48658288043478
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) || 0 . $NUMBER$ ) ;
rank: 349
score: 99.4645751953125
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ] $NUMBER$ ) ) ) ) ;
rank: 349
score: 99.45951334635417
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + 0 . 0 . $NUMBER$ ;
rank: 349
score: 99.40828664679276
patch: ( double ) ( double ) ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ;
rank: 349
score: 99.38005235460069
patch: Math . sqrt ( long ) Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 349
score: 99.36556667751736
patch: ( standard CaMeL Deviation * Double . sqrt ( 0 . 0 ) ) ) ) ;
rank: 350
score: 99.4865191915761
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) == - $NUMBER$ . $NUMBER$ ;
rank: 350
score: 99.45972290039063
patch: ( float * standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 350
score: 99.40826737253289
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) / /
rank: 350
score: 99.37985568576389
patch: standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; ) ;
rank: 350
score: 99.36525181361607
patch: ( standard CaMeL Deviation * - $NUMBER$ . 0 ) ) ) ;
rank: 350
score: 99.3469970703125
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ? $NUMBER$
rank: 351
score: 99.48605213994566
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) != 0 . $NUMBER$ ) ;
rank: 351
score: 99.4642578125
patch: ( this . standard CaMeL Deviation > Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 351
score: 99.37942165798611
patch: ( standard CaMeL Deviation + Math . sqrt ( $NUMBER$ . 1 ) ) ) ) ;
rank: 351
score: 99.36520867598684
patch: ( ( standard CaMeL Deviation > 0 . 0 ) - $NUMBER$ . 0 ) ) ) ;
rank: 351
score: 99.34679412841797
patch: ( $NUMBER$ > Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 352
score: 99.4638916015625
patch: ( Math . sqrt ( $NUMBER$ . 0 * ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 352
score: 99.4593017578125
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) - $NUMBER$ ) ) ) ;
rank: 352
score: 99.4591064453125
patch: ( Math . standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ;
rank: 352
score: 99.37919786241319
patch: ( standard CaMeL Deviation [ Math . sqrt ( $NUMBER$ . 1 ) ) ) ) ;
rank: 352
score: 99.36492598684211
patch: ( standard CaMeL Deviation * Math . sqrt ( 0 . 0 ] ) ) ) ) ;
rank: 352
score: 99.34672546386719
patch: ( Math . sqrt ( standard CaMeL Deviation . 0 ) ) ) ) ;
rank: 352
score: 99.32105777138158
patch: ( Number ) standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 353
score: 99.48537279211956
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) != - 1 . $NUMBER$ ;
rank: 353
score: 99.40783013237848
patch: ( standard CaMeL Deviation * Math . max ( 0 . 0 ) ) ) ) ;
rank: 353
score: 99.36449477251838
patch: ( ( ( standard CaMeL Deviation * Math . 0 ) ) ) ) ) ;
rank: 353
score: 99.35078938802083
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . this ) ) ) ) ;
rank: 353
score: 99.34666612413194
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) : 0 . ) ;
rank: 354
score: 99.37880452473958
patch: ( Math . sqrt ( $NUMBER$ . 0 - 0 . 0 ) ) ) ) ;
rank: 354
score: 99.36418714021382
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) x ) ) ) ;
rank: 354
score: 99.35063733552632
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) + ) ) ) ;
rank: 354
score: 99.34663660386029
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ? 1 == 0
rank: 355
score: 99.46281602647569
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 * standard CaMeL Deviation ;
rank: 355
score: 99.45848499644886
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) + 0 . $NUMBER$ ) ) ;
rank: 355
score: 99.40749640213816
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 Double ) ) ) ) ;
rank: 355
score: 99.37865397135417
patch: standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 355
score: 99.34644911024306
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) + 1 . 0 ) ;
rank: 355
score: 99.32075718470982
patch: Math . sqrt ( ( $NUMBER$ . 0 ) ) ) ) ;
rank: 356
score: 99.48485218394886
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . interrupt ( ) ;
rank: 356
score: 99.46202087402344
patch: ( int ) Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 356
score: 99.45836292613636
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) . $NUMBER$ ;
rank: 356
score: 99.37813568115234
patch: Math . sqrt ( standard CaMeL Deviation * standard CaMeL Deviation ) ) ) ;
rank: 356
score: 99.34996880425348
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . - ) ) ) ) ;
rank: 356
score: 99.34621175130208
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) , 1 . 0 ) ;
rank: 356
score: 99.31867418791118
patch: ( ( standard CaMeL Deviation * ( standard CaMeL Deviation . 0 ) ) ) ) ) ;
rank: 357
score: 99.46187744140624
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 + min ) ) ) ) ;
rank: 357
score: 99.45835571289062
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) + x ) ;
rank: 357
score: 99.37759399414062
patch: Math . sqrt ( $NUMBER$ . 0 ) ) - $NUMBER$ . 0 ) ;
rank: 357
score: 99.3636538856908
patch: ( ( ( standard CaMeL Deviation * Math . 0 ) ) . 0 ) ) ) ;
rank: 357
score: 99.34994845920139
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . TRUE ) ) ) ) ;
rank: 357
score: 99.3184814453125
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ ) ) ) ) ) ;
rank: 358
score: 99.4845660665761
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . erf ( 1 ) ;
rank: 358
score: 99.46185302734375
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 : $NUMBER$ ) ) ) ) ;
rank: 358
score: 99.4583251953125
patch: ( standard CaMeL Deviation * Math . floor ( $NUMBER$ . 0 . 0 ) ) ) ) ;
rank: 358
score: 99.40716873972039
patch: ( standard CaMeL Deviation * / Math . round ( $NUMBER$ . 0 ) ) ) ) ;
rank: 358
score: 99.37754313151042
patch: ( standard CaMeL Deviation . Math . sqrt ( $NUMBER$ . $NUMBER$ ) ) ) ) ;
rank: 358
score: 99.36302354600694
patch: ( standard CaMeL Deviation + Math . sqrt ( 0 . 0 ) ) ) ) ;
rank: 358
score: 99.3495361328125
patch: ( standard CaMeL Deviation * 0 . 0 ) . 0 ) ) ;
rank: 358
score: 99.34524197048611
patch: ( Math . sqrt ( $NUMBER$ == 0 . 0 ) - $NUMBER$ ) ) ) ;
rank: 359
score: 99.48436390269886
patch: ( $NUMBER$ . 0 ) + standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 359
score: 99.46184981496711
patch: ( standard CaMeL Deviation * Math . abs ( $NUMBER$ . 0 ] ) ) ) ) ;
rank: 359
score: 99.40711388221153
patch: ( $NUMBER$ . 0 * standard CaMeL Deviation ) ) ) ;
rank: 359
score: 99.37725830078125
patch: Math . min ( $NUMBER$ . 0 ) ) ) ;
rank: 359
score: 99.36275442023026
patch: ( standard CaMeL Deviation > Math . sqrt ( $NUMBER$ . 0 . ) ) ) ) ;
rank: 359
score: 99.34490288628473
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) * $NUMBER$ . $NUMBER$ ;
rank: 359
score: 99.31777615017361
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ >> 0 ) ) ) ) ;
rank: 360
score: 99.46165771484375
patch: ( / * standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 360
score: 99.45805921052632
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ? 0 ;
rank: 360
score: 99.40643631784539
patch: ( standard CaMeL Deviation * Double . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 360
score: 99.37653944227431
patch: ( $NUMBER$ . 0 . Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 360
score: 99.36265653722427
patch: ( standard CaMeL Deviation * 0 . 0 ) * $NUMBER$ . 0 ) ) ;
rank: 360
score: 99.34912109375
patch: 0 . 0 standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 360
score: 99.34393310546875
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . trim ( ) ;
rank: 360
score: 99.31706799958882
patch: ( $NUMBER$ standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 361
score: 99.457958984375
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) && false ) ;
rank: 361
score: 99.4062435752467
patch: ( standard CaMeL Deviation * Math . min ( $NUMBER$ . 0 ) ) ) ) * ;
rank: 361
score: 99.37613932291667
patch: ( double ) 0 . 0 ? $NUMBER$ . 0 : $NUMBER$ . 0 ) ) ;
rank: 361
score: 99.36205376519098
patch: ( standard CaMeL Deviation << Math . sqrt ( 0 . 0 ) ) ) ) ;
rank: 361
score: 99.34900716145833
patch: ( standard CaMeL Deviation * Math != 0 . 0 ) ) ) ;
rank: 361
score: 99.34365505642361
patch: ( Math . sqrt ( $NUMBER$ . 0 : 0 . 0 ) ) ) ) ;
rank: 361
score: 99.31673583984374
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ? 1 ;
rank: 362
score: 99.48406982421875
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . value ;
rank: 362
score: 99.45643833705357
patch: 1 . 0 ) ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 362
score: 99.4060122841283
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) / $NUMBER$ . ;
rank: 362
score: 99.37590874565973
patch: ( standard CaMeL Deviation ) ) || Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 362
score: 99.36198594835069
patch: ( standard CaMeL Deviation * Math . signum ( $NUMBER$ . 0 ) ) ) ) ;
rank: 362
score: 99.34844970703125
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ != $NUMBER$ ) ) ) ) ;
rank: 362
score: 99.34360080295139
patch: ( Math . sqrt ( $NUMBER$ . 0 , $NUMBER$ . 0 ) ) ) ) ;
rank: 363
score: 99.45790166440217
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + 1 . $NUMBER$ ) ;
rank: 363
score: 99.45642700195313
patch: $NUMBER$ . 0 ) ? standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 363
score: 99.40558938419117
patch: ( standard CaMeL Deviation * 1 . 0 ) ) ) / $NUMBER$ . 0 ;
rank: 363
score: 99.37576114430146
patch: ( double ) Math . sqrt ( $NUMBER$ . 0 ) ) ) ; ) ;
rank: 363
score: 99.36155790441177
patch: ( ( $NUMBER$ . 0 ) * ( $NUMBER$ . 0 ) ) ) ) ;
rank: 363
score: 99.34824732730263
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) this ) ;
rank: 364
score: 99.46127498851104
patch: ( standard CaMeL Deviation * 0 . 0 * $NUMBER$ . 0 ) ) ) ;
rank: 364
score: 99.40513102213542
patch: ( standard CaMeL Deviation * Double . sqrt ( 1 . 0 ) ) ) ) ;
rank: 364
score: 99.37575954861111
patch: ( $NUMBER$ . $NUMBER$ * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 364
score: 99.36127068014706
patch: ( standard CaMeL Deviation * ( $NUMBER$ . 0 . 0 ) ) ) ) ;
rank: 364
score: 99.34817325367646
patch: ( standard CaMeL Deviation * Math . sqrt ( 0 . 0 ) ) ) ;
rank: 364
score: 99.3423713235294
patch: ( ( x - mean ) ) / ( $NUMBER$ . 0 ) ) ) ;
rank: 365
score: 99.4609603881836
patch: 0 . 0 * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 365
score: 99.37546115451389
patch: ( standard CaMeL Deviation + Math . sqrt ( $NUMBER$ . $NUMBER$ ) ) ) ) ;
rank: 365
score: 99.36100499770221
patch: ( ( Math . sqrt ( $NUMBER$ . 0 ) $NUMBER$ ) ) ) ) ;
rank: 365
score: 99.31495496961806
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ == 0 ) ) ) ) ;
rank: 366
score: 99.4835205078125
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ? standard CaMeL Deviation ;
rank: 366
score: 99.46075439453125
patch: ( * * standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 366
score: 99.45684259588069
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) && 1 . 0 ) ;
rank: 366
score: 99.40463595920139
patch: ( standard CaMeL Deviation * Math . ceil ( 1 . 0 ) ) ) ) ;
rank: 366
score: 99.37533569335938
patch: ( int * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 366
score: 99.36100006103516
patch: ( ( ( $NUMBER$ . 0 ) 1 . 0 ) ) ) ) ;
rank: 366
score: 99.34792608963816
patch: ( standard CaMeL Deviation * Math . sqrt ( - 1 . 0 ) ) ) ) ;
rank: 366
score: 99.34226481119792
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) : standard CaMeL Deviation ;
rank: 366
score: 99.31465871710526
patch: ( standard CaMeL Deviation * Math . sqrt ( standard CaMeL Deviation * ) ) ) ) ;
rank: 367
score: 99.45676491477273
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) + ( standard CaMeL Deviation ;
rank: 367
score: 99.37528483072917
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . $STRING$ ) ) ) ) ;
rank: 367
score: 99.34791324013158
patch: ( standard CaMeL Deviation * Math . sqrt ( 1 . 0 ) ) ) ) ; ;
rank: 367
score: 99.342041015625
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) : 0 . 0
rank: 367
score: 99.31451885516827
patch: ( standard CaMeL Deviation * ( x ) ) ) ) ;
rank: 368
score: 99.46068657769098
patch: ( Math . sqrt ( $NUMBER$ . 0 ) * standard CaMeL Deviation ) ) ) ;
rank: 368
score: 99.45531063988095
patch: ( standard CaMeL Deviation - standard CaMeL Deviation * standard CaMeL Deviation * standard CaMeL Deviation ) ) ) ;
rank: 368
score: 99.40443821957237
patch: ( double ) Math . sqrt ( $NUMBER$ . 0 ) ) ) + 0 . 0 ;
rank: 368
score: 99.37469075520833
patch: ( int ) Math . sqrt ( 1 . 0 ) ) ) ;
rank: 368
score: 99.36040581597223
patch: ( standard CaMeL Deviation * double . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 368
score: 99.34771050347223
patch: ( $NUMBER$ * ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 368
score: 99.34181722005208
patch: ( $NUMBER$ . 0 ) ) . erf ( ( $NUMBER$ . 0 ) ) ) ;
rank: 369
score: 99.45490373883929
patch: $NUMBER$ . 0 ) + - standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 369
score: 99.40439324629934
patch: ( double ) standard CaMeL Deviation * / Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 369
score: 99.37444709329044
patch: ( standard CaMeL Deviation * standard CaMeL Deviation - 0 . 0 ) ) ) ;
rank: 369
score: 99.3603451377467
patch: ( ( * ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ) ;
rank: 369
score: 99.34147135416667
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) || 0 . $NUMBER$ ) ;
rank: 369
score: 99.31386847245066
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) - } ;
rank: 370
score: 99.45986938476562
patch: ( Math . sqrt ( $NUMBER$ . 0 * $NUMBER$ . 0 . 0 ) ) ) ) ;
rank: 370
score: 99.45468284970238
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . - standard CaMeL Deviation ) ) ) ) ;
rank: 370
score: 99.37395477294922
patch: ( 1 . Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 370
score: 99.36006887335526
patch: ( ( standard CaMeL Deviation : Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 370
score: 99.33889590992646
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ? $NUMBER$ . $NUMBER$
rank: 371
score: 99.48224487304688
patch: mean ) * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 371
score: 99.45908717105263
patch: ( int ) Math . sqrt ( $NUMBER$ . 0 / $NUMBER$ . 0 ) ) ) ;
rank: 371
score: 99.37385828354779
patch: Math . sqrt ( Math . abs ( $NUMBER$ . 0 ) ) ) ) ;
rank: 371
score: 99.34710015190973
patch: ( standard CaMeL Deviation * this . erf ( $NUMBER$ . 0 ) ) ) ) ;
rank: 371
score: 99.31320529513889
patch: standard CaMeL Deviation * ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 372
score: 99.45396423339844
patch: 1 . 0 ) * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 372
score: 99.37376185825893
patch: ( Integer . sqrt ( 0 . 0 ) ) ) ) ;
rank: 372
score: 99.34684673108552
patch: ( standard CaMeL Deviation * ( - sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 372
score: 99.33784484863281
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + 1 ;
rank: 372
score: 99.31280838815789
patch: ( extends standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 373
score: 99.45791015625
patch: ( * standard CaMeL Deviation ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 373
score: 99.45599975585938
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) + mean ) ) ) ;
rank: 373
score: 99.4537353515625
patch: $NUMBER$ . 0 ) + Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 373
score: 99.40257352941177
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 / $NUMBER$ . 0 ) ) ) ;
rank: 373
score: 99.37332956414474
patch: ( Math . sqrt ( $NUMBER$ . 0 ? $NUMBER$ . 0 ] ) ) ) ) ;
rank: 373
score: 99.35978190104167
patch: ( standard CaMeL Deviation * String . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 373
score: 99.34656575520833
patch: ( $NUMBER$ . 0 ) ) / ( 0 . 0 ) ) ;
rank: 373
score: 99.33749728732639
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ? 0 : 0 ;
rank: 374
score: 99.48106800426136
patch: ( 1 . 0 * standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 374
score: 99.45762803819444
patch: ( standard CaMeL Deviation > Math . max ( $NUMBER$ . 0 ) ) ) ) ;
rank: 374
score: 99.45567737926136
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) || 1 . 0 ) ;
rank: 374
score: 99.34612715871711
patch: ( standard CaMeL Deviation * Math . sqrt ( >= 0 . 0 ) ) ) ) ;
rank: 374
score: 99.3123779296875
patch: ( Serializable ) standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 375
score: 99.48095703125
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) != 1 ;
rank: 375
score: 99.45756225585937
patch: ( this . standard CaMeL Deviation * Math . min ( $NUMBER$ . 0 ) ) ) ) ;
rank: 375
score: 99.45349702380952
patch: ( double ) Math . sqrt ( $NUMBER$ . 0 . 0 + $NUMBER$ . 0 ) ) ) ;
rank: 375
score: 99.3731689453125
patch: Math . abs ( $NUMBER$ . 0 ) ) ) ;
rank: 375
score: 99.35959041819854
patch: ( standard CaMeL Deviation * 0 . 0 - $NUMBER$ . 0 ) ) ) ;
rank: 375
score: 99.33705647786458
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) 1
rank: 375
score: 99.31142064144737
patch: ( standard CaMeL Deviation * Math . sqrt ( standard CaMeL Deviation ) ) ) ) ) ;
rank: 376
score: 99.4804443359375
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) - mean ;
rank: 376
score: 99.45524088541667
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) $NUMBER$ ) ) ) ;
rank: 376
score: 99.35956169577206
patch: ( ( ( $NUMBER$ . 0 ) * 0 . 0 ) ) ) ) ;
rank: 376
score: 99.34600151909723
patch: ( Math . sqrt ( ) ) . erf ( $NUMBER$ . 0 ) ) ) ;
rank: 376
score: 99.33705139160156
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) : x ;
rank: 376
score: 99.310791015625
patch: ( ) standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 377
score: 99.45750732421875
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 % $NUMBER$ ) ) ) ) ;
rank: 377
score: 99.45315987723214
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . $NUMBER$ . 0 ) ) ) ) ) ;
rank: 377
score: 99.39924452039931
patch: ( standard CaMeL Deviation - Math . sqrt ( $NUMBER$ . $NUMBER$ ) ) ) ) ;
rank: 377
score: 99.37271118164062
patch: Math . sqrt ( standard CaMeL Deviation . 0 . 0 ) ) ) ;
rank: 377
score: 99.34549753289474
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . length 0 ) ) ) ) ;
rank: 377
score: 99.33589680989583
patch: ( Math . sqrt ( $NUMBER$ . 0 & $NUMBER$ . 0 ) ) ) ) ;
rank: 377
score: 99.31058542351974
patch: ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 378
score: 99.4548275596217
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ++ ) ) ) ;
rank: 378
score: 99.45291748046876
patch: ( standard CaMeL Deviation - Math . sqrt ( $NUMBER$ . 0 + $NUMBER$ ) ) ) ) ;
rank: 378
score: 99.3722282858456
patch: Math . sqrt ( $NUMBER$ . abs ( $NUMBER$ . 0 ) ) ) ) ;
rank: 378
score: 99.33589680989583
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + standard CaMeL Deviation ;
rank: 379
score: 99.45689086914062
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 1 ) ) ) ) ) ;
rank: 379
score: 99.45448811848958
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . $NUMBER$ . 0 ) ) ) ) + 0 . $NUMBER$ ;
rank: 379
score: 99.45291748046876
patch: ( double ) ( standard CaMeL Deviation * standard CaMeL Deviation * standard CaMeL Deviation ) ) ) ;
rank: 379
score: 99.39797973632812
patch: ( double ) ( standard CaMeL Deviation * standard CaMeL Deviation ) ) ) ;
rank: 379
score: 99.35825482536765
patch: ( ( standard CaMeL Deviation * Math . 0 . 0 ) ) ) ) ;
rank: 379
score: 99.30996704101562
patch: ( Math . sqrt ( $NUMBER$ * 0 . 0 ) ) ) ) ;
rank: 380
score: 99.45444742838542
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) + $NUMBER$ . 0 ;
rank: 380
score: 99.45219494047619
patch: ( double ) ( standard CaMeL Deviation << Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 380
score: 99.39663260323661
patch: ( double ) standard CaMeL Deviation * 1 . 0 ) ) ;
rank: 380
score: 99.37137179904514
patch: ( $NUMBER$ . 0 << Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 380
score: 99.35783555772569
patch: ( double * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ;
rank: 380
score: 99.30975952148438
patch: ( Erf . erf ( ( x - mean ) / ( ) ) ) ) ) ;
rank: 381
score: 99.45670166015626
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 << 1 ) ) ) ) ;
rank: 381
score: 99.45393880208333
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) , 0 . $NUMBER$ ) ) ;
rank: 381
score: 99.45172991071429
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 . ) ) ) ) ;
rank: 381
score: 99.37124794407895
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) x ) ;
rank: 381
score: 99.35738118489583
patch: ( double * ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 381
score: 99.34470728824013
patch: ( standard CaMeL Deviation * Math . sqrt ( 1 . 0 ) ) ) true ) ;
rank: 381
score: 99.33448621961806
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) / 0 . 0 ;
rank: 382
score: 99.47717815896739
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) == - 1 . $NUMBER$ ;
rank: 382
score: 99.45389811197917
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) , 0 . 0 ) ) ;
rank: 382
score: 99.45098586309524
patch: ( double ) ( standard CaMeL Deviation * Math . min ( $NUMBER$ . 0 ) ) ) ) ;
rank: 382
score: 99.37029351128473
patch: ( standard CaMeL Deviation . Math . sqrt ( $NUMBER$ . 1 ) ) ) ) ;
rank: 382
score: 99.34427040501645
patch: ( standard CaMeL Deviation * ( standard CaMeL Deviation < 0 . 0 ) ) ) ) ;
rank: 382
score: 99.33391655815973
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) : 0 . $NUMBER$ }
rank: 383
score: 99.47716175426136
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) - mean ) ;
rank: 383
score: 99.456298828125
patch: ( $NUMBER$ . 0 ? $NUMBER$ . 0 : 0 . 0 ) ) ) ;
rank: 383
score: 99.45351155598958
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ) . 0 ;
rank: 383
score: 99.35646685431985
patch: ( standard CaMeL Deviation * Math . sqrt < $NUMBER$ . 0 ) ) ) ;
rank: 383
score: 99.33359781901042
patch: ( $NUMBER$ . 0 ) ) , Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 383
score: 99.30897827148438
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) - * ;
rank: 384
score: 99.47699529474431
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) . 1 ;
rank: 384
score: 99.45613606770833
patch: ( standard CaMeL Deviation > Math . sqrt ( $NUMBER$ . 0 * standard CaMeL Deviation ) ) ) ;
rank: 384
score: 99.4532470703125
patch: ( standard CaMeL Deviation * Math . Double ( $NUMBER$ . 0 ) ) ) ) ;
rank: 384
score: 99.3949333639706
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . ; ) ) ) ;
rank: 384
score: 99.35625542534723
patch: ( standard CaMeL Deviation * Math . concat ( $NUMBER$ . 0 ) ) ) ) ;
rank: 384
score: 99.34400699013158
patch: ( standard CaMeL Deviation * standard CaMeL Deviation ) / ( $NUMBER$ . 0 ) ) ) ;
rank: 384
score: 99.33353000217014
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) - 0 . 0 ) ;
rank: 385
score: 99.47694614955357
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) != - $NUMBER$ ;
rank: 385
score: 99.45297639266305
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) $NUMBER$ . 0 ) ) ) ) ;
rank: 385
score: 99.39457872178819
patch: ( $NUMBER$ . 0 * standard CaMeL Deviation * / $NUMBER$ . 0 ) ) ) ;
rank: 385
score: 99.36893956801471
patch: ( double ) Math . sqrt ( $NUMBER$ . 0 . $NUMBER$ ) ) ) ;
rank: 385
score: 99.35616048177083
patch: ( ( sqrt * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 385
score: 99.34373715049342
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 short ) ) ) ) ;
rank: 386
score: 99.47690651633523
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . Double ( ) ;
rank: 386
score: 99.4555419921875
patch: ( this . standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ;
rank: 386
score: 99.45289195667614
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) , $NUMBER$ . $NUMBER$ ) ) ;
rank: 386
score: 99.36878119574652
patch: ( standard CaMeL Deviation - Math . sqrt ( $NUMBER$ . 1 ) ) ) ) ;
rank: 386
score: 99.35596988075658
patch: ( standard CaMeL Deviation > Math . sqrt ( $NUMBER$ . 0 1 ) ) ) ) ;
rank: 386
score: 99.3435417624081
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 1 ) ) ) ;
rank: 386
score: 99.33317735460069
patch: ( Math . sqrt ( $NUMBER$ . ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 387
score: 99.4526611328125
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) , x ) ) ) ;
rank: 387
score: 99.44810791015625
patch: ( x + standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 387
score: 99.39424641927083
patch: ( standard CaMeL Deviation * / Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 387
score: 99.36875915527344
patch: standard CaMeL Deviation * Math . min ( $NUMBER$ . 0 ) ) ) ;
rank: 387
score: 99.34351264105902
patch: ( standard CaMeL Deviation * Math . $NUMBER$ ( $NUMBER$ . 0 ) ) ) ) ;
rank: 387
score: 99.30806274414063
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + max ;
rank: 388
score: 99.45389133029514
patch: ( Math . sqrt ( $NUMBER$ . 0 * $NUMBER$ . $NUMBER$ ) ) ) ) ;
rank: 388
score: 99.45265625
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 + Erf . erf ( ) ) ) ) ) ;
rank: 388
score: 99.4480712890625
patch: ( standard CaMeL Deviation - Math . sqrt ( $NUMBER$ . 0 . $NUMBER$ ) ) ) ) ;
rank: 388
score: 99.36873372395833
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) * standard CaMeL Deviation ) ;
rank: 388
score: 99.35564826516544
patch: ( standard CaMeL Deviation * Math . sqrt <= $NUMBER$ . 0 ) ) ) ;
rank: 388
score: 99.33141326904297
patch: ( Math . sqrt ( ( x - mean ) ) ) ) ) ;
rank: 389
score: 99.45218912760417
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) = 0 . $NUMBER$ ;
rank: 389
score: 99.39336480034723
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ,
rank: 389
score: 99.36845567491319
patch: ( standard CaMeL Deviation [ Math . sqrt ( $NUMBER$ . $NUMBER$ ) ) ) ) ;
rank: 389
score: 99.35555227179276
patch: ( ( ( * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ) ;
rank: 389
score: 99.33127728630515
patch: ( sqrt ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 389
score: 99.30714925130208
patch: ( this . erf . erf ( ( x - mean ) ) ) ) ) ;
rank: 390
score: 99.47597868546195
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) != - $NUMBER$ . $NUMBER$ ;
rank: 390
score: 99.44739350818452
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) + $NUMBER$ . 0 ) ) ;
rank: 390
score: 99.39179823133681
patch: ( standard CaMeL Deviation / Math . max ( $NUMBER$ . 0 ) ) ) ) ;
rank: 390
score: 99.35553942228618
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) . $NUMBER$ ;
rank: 390
score: 99.34253607855902
patch: ( standard CaMeL Deviation * Math . sqrt ( x - mean ) ) ) ) ;
rank: 390
score: 99.30687798394098
patch: ( ( Math . sqrt ( $NUMBER$ . 0 ) . 0 ) ) ) ) ;
rank: 391
score: 99.45290013363487
patch: ( standard CaMeL Deviation * Math . abs ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 391
score: 99.45163981119792
patch: ( ( standard CaMeL Deviation * ( Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ) ) ;
rank: 391
score: 99.39133588005515
patch: ( double ) $NUMBER$ * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 391
score: 99.36643880208334
patch: ( long ) Math . sqrt ( 1 . 0 ) ) ) ;
rank: 391
score: 99.34130859375
patch: ( standard CaMeL Deviation * Math . x ( $NUMBER$ . 0 ) ) ) ) ;
rank: 391
score: 99.33022891773896
patch: ( / ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 392
score: 99.4755526455966
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) . $NUMBER$ ;
rank: 392
score: 99.45208740234375
patch: ( ( double ) $NUMBER$ . 0 ) ) ) ;
rank: 392
score: 99.39125569661458
patch: ( standard CaMeL Deviation * / standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ;
rank: 392
score: 99.36638047960069
patch: 0 . 0 ? standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ;
rank: 392
score: 99.35541534423828
patch: ( float ) Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 392
score: 99.34117216222427
patch: ( standard CaMeL Deviation * ( ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 392
score: 99.33007134331598
patch: ( Math . sqrt ( $NUMBER$ . 0 ) / $NUMBER$ . 0 ) ) ) ;
rank: 393
score: 99.4754971590909
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . $NUMBER$ . $NUMBER$ ;
rank: 393
score: 99.45164184570312
patch: ( ( standard CaMeL Deviation >> Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 393
score: 99.3662971047794
patch: Math . sqrt ( Math . sqrt ( 1 . 0 ) ) ) ) ;
rank: 393
score: 99.35493738511029
patch: ( ( Math . sqrt ( $NUMBER$ . 0 ) 1 ) ) ) ) ;
rank: 393
score: 99.32769775390625
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) && 1 . 0 ) ;
rank: 393
score: 99.30596245659723
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ / 0 ) ) ) ) ;
rank: 394
score: 99.44589233398438
patch: ( double ) * standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 394
score: 99.39073350694444
patch: ( standard CaMeL Deviation * Math . ceil ( $NUMBER$ . $NUMBER$ ) ) ) ) ;
rank: 394
score: 99.3541618795956
patch: ( ( ( standard CaMeL Deviation * 1 . 0 ) ) ) ) ) ;
rank: 394
score: 99.33830710018383
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . $NUMBER$ ) ) ) ;
rank: 394
score: 99.3275146484375
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) , *
rank: 395
score: 99.45090619255515
patch: ( standard CaMeL Deviation ? $NUMBER$ . 0 : 0 . 0 ) ) ) ;
rank: 395
score: 99.45062866210938
patch: ( Math . standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 395
score: 99.39055718315973
patch: ( double ) standard CaMeL Deviation * $NUMBER$ . 0 ) ) * $NUMBER$ . 0 ;
rank: 395
score: 99.35403603001645
patch: ( ( standard CaMeL Deviation * 0 . 0 ) ) - 0 . 0 ) ) ;
rank: 395
score: 99.33799342105263
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ * 0 . 0 ) ) ) ;
rank: 395
score: 99.32701958550348
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) + $NUMBER$ . $NUMBER$ ) ;
rank: 395
score: 99.30522717927632
patch: ( standard CaMeL Deviation * Math . sqrt ( long ) $NUMBER$ . 0 ) ) ) ;
rank: 396
score: 99.47444458007813
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . true ;
rank: 396
score: 99.45076293945313
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) . 1 ) ) ;
rank: 396
score: 99.45045006793478
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 396
score: 99.44584728422619
patch: $NUMBER$ . 0 ) ) + Math . sqrt ( Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 396
score: 99.33749728732639
patch: ( standard CaMeL Deviation ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 396
score: 99.32667371961806
patch: ( $NUMBER$ . 0 ) ) ) ? 0 . $NUMBER$ * ( $NUMBER$ . 0 )
rank: 397
score: 99.47437686011905
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) != 0 ) ;
rank: 397
score: 99.45034790039062
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) + 0 ) ;
rank: 397
score: 99.3897216796875
patch: ( double ) standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ;
rank: 397
score: 99.36423627068015
patch: ( double ) $NUMBER$ . Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 397
score: 99.35377903988487
patch: ( standard CaMeL Deviation * Math . min ( $NUMBER$ . 0 1 ) ) ) ) ;
rank: 397
score: 99.33701459099265
patch: ( standard CaMeL Deviation <= Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 397
score: 99.32630750868056
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) - 0 . 0 ;
rank: 398
score: 99.4741543856534
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + mean ( ) ;
rank: 398
score: 99.44553833007812
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) + $STRING$ ) ;
rank: 398
score: 99.38920762803819
patch: ( standard CaMeL Deviation - Math . sqrt ( standard CaMeL Deviation ) ) ) ) ;
rank: 398
score: 99.36388442095588
patch: ( ( Float ) Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 398
score: 99.35361735026042
patch: ( standard CaMeL Deviation * 0 . 0 ( $NUMBER$ . 0 ) ) ) ) ;
rank: 398
score: 99.33699035644531
patch: ( $NUMBER$ / Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 398
score: 99.30438232421875
patch: ( standard CaMeL Deviation * Math . sqrt ( standard CaMeL Deviation ; ) ) ) ;
rank: 399
score: 99.45011393229167
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) + 0 . 1 ;
rank: 399
score: 99.44482421875
patch: scale ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 399
score: 99.38853544347427
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) / 1 . 0 ;
rank: 399
score: 99.36337076822916
patch: ( ( 0 . 0 + $NUMBER$ . 0 ) ) ) ) ;
rank: 399
score: 99.33614095052083
patch: ( standard CaMeL Deviation * Math . delete ( $NUMBER$ . 0 ) ) ) ) ;
rank: 400
score: 99.47371773097827
patch: ( standard CaMeL Deviation * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 400
score: 99.45008433948864
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; } } ) ;
rank: 400
score: 99.388427734375
patch: ( double ) 1 . 0 ) ) ;
rank: 400
score: 99.36329752604166
patch: ( int ) Math . max ( $NUMBER$ . 0 ) ) ) ;
rank: 400
score: 99.33591037326389
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ + mean ) ) ) ) ;
rank: 400
score: 99.30317239200367
patch: ( standard CaMeL Deviation * Math . sqrt ( ) . $NUMBER$ ) ) ) ;
rank: 401
score: 99.45006306966145
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + ( 1 . 0 ) ;
rank: 401
score: 99.44965209960938
patch: ( standard CaMeL Deviation > Math . sqrt ( $NUMBER$ . 0 + $NUMBER$ ) ) ) ) ;
rank: 401
score: 99.4435791015625
patch: ( double ) float ) standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 401
score: 99.38833279079861
patch: ( 1 . 0 ) ) ) / Math . sqrt ( $NUMBER$ . 0 ) ;
rank: 401
score: 99.3631591796875
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ; ) ) ) ;
rank: 401
score: 99.33582221137152
patch: ( standard CaMeL Deviation * ( Math . sqrt ( $NUMBER$ ) ) ) ) ) ;
rank: 401
score: 99.32502577039931
patch: ( Math . ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 402
score: 99.44996134440105
patch: ( standard CaMeL Deviation - ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 402
score: 99.4435546875
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) , float ) ;
rank: 402
score: 99.38822937011719
patch: ( double ) ( standard CaMeL Deviation * 1 . 0 ) ) ) ;
rank: 402
score: 99.35230255126953
patch: ( byte * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 402
score: 99.33579508463542
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ > $NUMBER$ ) ) ) ) ;
rank: 402
score: 99.32486979166667
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + $NUMBER$ + $NUMBER$ ;
rank: 402
score: 99.30211117393092
patch: ( & standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 403
score: 99.4727783203125
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) | $NUMBER$ . $NUMBER$ ;
rank: 403
score: 99.44994099934895
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 1 . 0 ) ) ) ) + 0 . $NUMBER$ ;
rank: 403
score: 99.44923753004808
patch: ( 0 . 0 * $NUMBER$ . 0 ) ) ) ;
rank: 403
score: 99.35219997829861
patch: ( standard CaMeL Deviation * false . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 403
score: 99.33484564887152
patch: ( standard CaMeL Deviation * Math . >= ( $NUMBER$ . 0 ) ) ) ) ;
rank: 403
score: 99.32449340820312
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) - $NUMBER$ ) ) ;
rank: 404
score: 99.44939630681819
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) / $NUMBER$ . $NUMBER$ ) ;
rank: 404
score: 99.44805586965461
patch: ( * standard CaMeL Deviation * Math . min ( $NUMBER$ . 0 ) ) ) ) ;
rank: 404
score: 99.38680013020833
patch: ( standard CaMeL Deviation * Math . format ( $NUMBER$ . 0 ) ) ) ) ;
rank: 404
score: 99.36286926269531
patch: standard CaMeL Deviation + Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 404
score: 99.35219319661458
patch: ( ( standard CaMeL Deviation * Math . sqrt $NUMBER$ . 0 ) ) ) ) ;
rank: 404
score: 99.33457318474265
patch: ( standard CaMeL Deviation * Math . min ( $NUMBER$ . 0 ) ) ) ;
rank: 404
score: 99.30152587890625
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + this ;
rank: 405
score: 99.4489501953125
patch: ( standard CaMeL Deviation == ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 405
score: 99.32332117417279
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) : 0 ) ;
rank: 405
score: 99.30121926700367
patch: ( ( $NUMBER$ . 0 ) ) ) / ( $NUMBER$ . 0 ) ) ;
rank: 406
score: 99.47243430397727
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . equals ( ) ;
rank: 406
score: 99.44885864257813
patch: ( standard CaMeL Deviation & Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ;
rank: 406
score: 99.44575769761029
patch: ( standard CaMeL Deviation > 0 . 0 * $NUMBER$ . 0 ) ) ) ;
rank: 406
score: 99.44172973632813
patch: ( double ) standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ] ) ) ) ;
rank: 406
score: 99.38636690027573
patch: ( standard CaMeL Deviation * 1 . 0 ) ) ) * standard CaMeL Deviation ;
rank: 406
score: 99.35136144301471
patch: ( * sqrt * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 406
score: 99.32307703354779
patch: ( $NUMBER$ . 0 ) ) * Math . sqrt ( $NUMBER$ . 0 ) )
rank: 407
score: 99.47242272418478
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . erf ( ( x - mean ) ) ;
rank: 407
score: 99.44855608258929
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) [ 0 ] ;
rank: 407
score: 99.44103393554687
patch: $NUMBER$ . 0 ) | standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 407
score: 99.38600667317708
patch: ( standard CaMeL Deviation * Math . min ( $NUMBER$ . $NUMBER$ ) ) ) ) ;
rank: 407
score: 99.3512824563419
patch: ( standard CaMeL Deviation * this . sqrt ( ) . 0 ) ) ) ;
rank: 407
score: 99.32304551866319
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) , $NUMBER$ . 0 ) ;
rank: 408
score: 99.47181396484375
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . false ;
rank: 408
score: 99.38560655381944
patch: ( float ) standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 408
score: 99.36244603207237
patch: ( standard CaMeL Deviation [ Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 408
score: 99.33373345269098
patch: ( standard CaMeL Deviation * ( this . erf ( ( ) ) ) ) ) ;
rank: 408
score: 99.30048571134868
patch: ( x standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 409
score: 99.44845448369566
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; return 0 . $NUMBER$ ;
rank: 409
score: 99.3623111122533
patch: ( int ) standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . $NUMBER$ ) ) ) ;
rank: 409
score: 99.35115559895833
patch: ( ( standard CaMeL Deviation - $NUMBER$ . 0 ) ) ) ) ;
rank: 409
score: 99.32216509650735
patch: erf standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 410
score: 99.47138904389881
patch: ( - ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 410
score: 99.4404541015625
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) << $NUMBER$ ) ;
rank: 410
score: 99.38449276194854
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) + 1 . $NUMBER$ ;
rank: 410
score: 99.362060546875
patch: ( standard CaMeL Deviation * 0 . 0 + $NUMBER$ . 0 ) ) ) ;
rank: 410
score: 99.29977256373355
patch: ( standard CaMeL Deviation * Math . sqrt ( >> $NUMBER$ . 0 ) ) ) ) ;
rank: 411
score: 99.47109840029762
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) 1 . $NUMBER$ ;
rank: 411
score: 99.44820149739583
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) - 1 . $NUMBER$ ;
rank: 411
score: 99.44479851973684
patch: ( standard CaMeL Deviation <= Math . sqrt ( $NUMBER$ . 0 ] ) ) ) ) ;
rank: 411
score: 99.33278401692708
patch: ( standard CaMeL Deviation * Math . insert ( $NUMBER$ . 0 ) ) ) ) ;
rank: 411
score: 99.32185363769531
patch: ( Math . sqrt ( $NUMBER$ & $NUMBER$ . 0 ) ) ) ) ;
rank: 412
score: 99.47071475074405
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) $NUMBER$ . $NUMBER$ ;
rank: 412
score: 99.44819568452381
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) false ;
rank: 412
score: 99.44460577713816
patch: ( char ) standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 412
score: 99.38387044270833
patch: ( double ) standard CaMeL Deviation * standard CaMeL Deviation * $NUMBER$ . 0 ) ) ;
rank: 412
score: 99.36149516858552
patch: ( double ) Math . sqrt ( $NUMBER$ . 0 ) ) - 0 . 0 ) ;
rank: 412
score: 99.35063340928819
patch: ( Double . 0 ) * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 412
score: 99.29880885074013
patch: & ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 413
score: 99.47005208333333
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . erf ( }
rank: 413
score: 99.44788614908855
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) * ( $NUMBER$ . 0 ) ) ;
rank: 413
score: 99.444580078125
patch: ( String ) Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 413
score: 99.38314480251736
patch: ( standard CaMeL Deviation * Math . max ( $NUMBER$ . 1 ) ) ) ) ;
rank: 413
score: 99.36138556985294
patch: ( double ) 0 . Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 413
score: 99.35050746372768
patch: ( standard CaMeL Deviation * * $NUMBER$ . 0 ) ) ) ;
rank: 413
score: 99.33246527777777
patch: ( standard CaMeL Deviation * ( * ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 413
score: 99.32128143310547
patch: ( $NUMBER$ >= Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 413
score: 99.29866536458333
patch: ( standard CaMeL Deviation * Math . sqrt ( FALSE . 0 ) ) ) ) ;
rank: 414
score: 99.47003784179688
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) == ) ;
rank: 414
score: 99.44756525213069
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) + false ;
rank: 414
score: 99.43916015625
patch: ( double ) ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . ) ) ) ) ;
rank: 414
score: 99.38218858506944
patch: ( double ) $NUMBER$ . 0 ) ) * Math . sqrt ( $NUMBER$ . 0 ;
rank: 414
score: 99.36055715460526
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ ; 0 . 0 ) ) ) ;
rank: 414
score: 99.332373046875
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) )
rank: 414
score: 99.32045084635416
patch: ( $NUMBER$ . 0 ) ) ) * ( $NUMBER$ . 0 ) ;
rank: 415
score: 99.44431023848684
patch: ( int ) Math . sqrt ( $NUMBER$ . 0 * standard CaMeL Deviation ) ) ) ;
rank: 415
score: 99.35019100413604
patch: ( ( standard CaMeL Deviation * $NUMBER$ . 0 . 0 ) ) ) ) ;
rank: 415
score: 99.33207433363971
patch: ( standard CaMeL Deviation * ( $NUMBER$ . 0 ) . 0 ) ) ) ;
rank: 415
score: 99.31941492417279
patch: ( standard CaMeL Deviation * Math . sqrt ( 1 . 0 ) ) ) )
rank: 416
score: 99.44736328125
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) * Math . sqrt ( $NUMBER$ . 0 )
rank: 416
score: 99.38123914930556
patch: ( standard CaMeL Deviation / Math . sqrt ( 0 . 0 ) ) ) ) ;
rank: 416
score: 99.36010064019098
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) - 0 . 0 ) ) ;
rank: 416
score: 99.33195226332721
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ , ) ) ) ) ;
rank: 417
score: 99.46808733258929
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 * Erf ) ) ) ) ;
rank: 417
score: 99.44683283025569
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) != 0 . $NUMBER$ ) ;
rank: 417
score: 99.44377698396382
patch: ( 1 . 0 ] * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 417
score: 99.43855590820313
patch: $NUMBER$ . 0 ) || standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 417
score: 99.35980583639706
patch: Math . sqrt ( $NUMBER$ . max ( 0 . 0 ) ) ) ) ;
rank: 417
score: 99.33156331380208
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) . 0 ;
rank: 417
score: 99.31816864013672
patch: ( $NUMBER$ <= Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 418
score: 99.46733165922619
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) == - $NUMBER$ ;
rank: 418
score: 99.44666058084239
patch: ( Math . sqrt ( $NUMBER$ . 0 ) , Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 418
score: 99.44365234375
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ? $NUMBER$ . 0 ] ) ;
rank: 418
score: 99.35885184151786
patch: ( Math . sqrt ( standard CaMeL Deviation ) ) ) ) ;
rank: 418
score: 99.34881998697917
patch: ( standard CaMeL Deviation * this . 0 . 0 ) ) ) ;
rank: 418
score: 99.33108859592014
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ % $NUMBER$ ) ) ) ) ;
rank: 418
score: 99.31764849494485
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ? 0 < $NUMBER$
rank: 419
score: 99.46709914434524
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . return 1 ;
rank: 419
score: 99.44636336616848
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) double CaMeL Value ( ) ) ) ) ;
rank: 419
score: 99.443115234375
patch: ( int ) Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ;
rank: 419
score: 99.43811616443452
patch: 1 . 0 ) * standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 419
score: 99.37958122702206
patch: standard CaMeL Deviation * / Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 419
score: 99.35865614149306
patch: ( Math . sqrt ( $NUMBER$ . $NUMBER$ + $NUMBER$ . 0 ) ) ) ) ;
rank: 419
score: 99.34872436523438
patch: double . 0 . Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 420
score: 99.44283896998355
patch: ( * standard CaMeL Deviation * Math . round ( $NUMBER$ . 0 ) ) ) ) ;
rank: 420
score: 99.43806966145833
patch: ( standard CaMeL Deviation - Math . abs ( $NUMBER$ . 0 ) ) ) ) ;
rank: 420
score: 99.34860568576389
patch: ( standard CaMeL Deviation * Math . min ( 0 . 0 ) ) ) ) ;
rank: 420
score: 99.3161262063419
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) : 0 . $NUMBER$ ) ;
rank: 420
score: 99.29437614889706
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ ++ ) ) ) ) ;
rank: 421
score: 99.46641322544643
patch: ( ( $NUMBER$ . 0 ) 0 . 0 ) ) ) ;
rank: 421
score: 99.44600830078124
patch: ( ( standard CaMeL Deviation * Double . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 421
score: 99.44271850585938
patch: ( double ) Math . sqrt ( $NUMBER$ . 0 * $NUMBER$ . 0 ) ) ) ) ;
rank: 421
score: 99.43789672851562
patch: ( standard CaMeL Deviation * Math . min ( $NUMBER$ , $NUMBER$ . 0 ) ) ) ) ;
rank: 421
score: 99.37797995174633
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) / $NUMBER$ . $NUMBER$ ;
rank: 421
score: 99.35826958550348
patch: ( 1 . 0 ? Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 421
score: 99.31484087775735
patch: ( Math . sqrt ( abs ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 421
score: 99.29354519314236
patch: ( x - sqrt * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 422
score: 99.46626209077381
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + - mean ;
rank: 422
score: 99.43773803710937
patch: $NUMBER$ . 0 ) == standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 422
score: 99.37711827895221
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) + 0 . 0 ;
rank: 422
score: 99.34843444824219
patch: ( ( ( $NUMBER$ . 0 ) 0 . 0 ) ) ) ) ;
rank: 422
score: 99.32912190755208
patch: ( standard CaMeL Deviation > Math . sqrt ( 1 . 0 ) ) ) ) ;
rank: 422
score: 99.31404383042279
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + $NUMBER$ ) ;
rank: 423
score: 99.46620396205357
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) != - 1 ;
rank: 423
score: 99.445595703125
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . cumulative CaMeL Probability ( x ) ;
rank: 423
score: 99.44103285845588
patch: ( standard CaMeL Deviation > $NUMBER$ . 0 * $NUMBER$ . 0 ) ) ) ;
rank: 423
score: 99.35783168247768
patch: Math . sqrt ( $NUMBER$ . 0 . 1 ) ) ) ;
rank: 423
score: 99.32897231158088
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) -
rank: 423
score: 99.3134765625
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + 0 ;
rank: 424
score: 99.44549005681819
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) , 0 ) ;
rank: 424
score: 99.44076102120536
patch: ( * standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ;
rank: 424
score: 99.37560221354167
patch: ( double ) Double . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 424
score: 99.35782199435764
patch: standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 1 ) ) ) ;
rank: 424
score: 99.34828814338235
patch: ( - sqrt * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 424
score: 99.31300982306985
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ == 0 . 0 ) ;
rank: 425
score: 99.46599469866071
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) == - 1 ;
rank: 425
score: 99.44476873224431
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) && $NUMBER$ . 0 ) ;
rank: 425
score: 99.44061569940476
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 / standard CaMeL Deviation ) ) ) ;
rank: 425
score: 99.37540690104167
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ) / $NUMBER$ . 0 ;
rank: 425
score: 99.35768037683823
patch: Math . sqrt ( Integer . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 425
score: 99.34828694661458
patch: ( true . 0 ) * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 425
score: 99.32718912760417
patch: ( standard CaMeL Deviation * Math == 0 . 0 ) ) ) ;
rank: 425
score: 99.31070149739584
patch: sqrt ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 425
score: 99.29043399586396
patch: ( ( standard CaMeL Deviation * ( standard CaMeL Deviation ) ) ) ) ) ;
rank: 426
score: 99.46523902529762
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) == 0 ) ;
rank: 426
score: 99.44469105113636
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) * $NUMBER$ . $NUMBER$ ) ;
rank: 426
score: 99.3572998046875
patch: Math . sqrt ( $NUMBER$ . 0 - 0 . 0 ) ) ) ;
rank: 426
score: 99.34797219669117
patch: ( ( standard CaMeL Deviation * 0 . 0 ) . 0 ) ) ) ;
rank: 426
score: 99.31029555376838
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + 0 . $NUMBER$
rank: 426
score: 99.28948974609375
patch: ( standard CaMeL Deviation extends Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 427
score: 99.44024336965461
patch: ( standard CaMeL Deviation < 0 . 0 ? $NUMBER$ : 0 . 0 ) ) ) ;
rank: 427
score: 99.37518669577206
patch: ( double ) ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ) ;
rank: 427
score: 99.35710906982422
patch: ( double + Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 427
score: 99.3479362936581
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 - $NUMBER$ . 0 ) ) ) ;
rank: 427
score: 99.32659233940973
patch: ( standard CaMeL Deviation * Math . value ( $NUMBER$ . 0 ) ) ) ) ;
rank: 427
score: 99.31007385253906
patch: ( $NUMBER$ . 0 ) ) ) . cumulative CaMeL Probability ( $STRING$ ) ;
rank: 427
score: 99.28721788194444
patch: Math . sqrt ( $NUMBER$ . 0 ) / ( $NUMBER$ . 0 ) ) ) ;
rank: 428
score: 99.44431559244792
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) : 0 . $NUMBER$ . $NUMBER$ ;
rank: 428
score: 99.44008382161458
patch: ( Math . sqrt ( $NUMBER$ . $NUMBER$ * $NUMBER$ . 0 ) ) ) ) ;
rank: 428
score: 99.35678280101104
patch: ( long ) Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ;
rank: 428
score: 99.30821940104167
patch: ( $NUMBER$ . 0 ) ) ) . cumulative CaMeL Probability ( ) ;
rank: 429
score: 99.46466936383929
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . length ) ;
rank: 429
score: 99.43989114200367
patch: ( Math . sqrt ( $NUMBER$ . 0 ) $NUMBER$ . 0 ) ) ) ;
rank: 429
score: 99.37412396599265
patch: $NUMBER$ . 0 * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 429
score: 99.35648345947266
patch: ( double / Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 429
score: 99.32605658637152
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ == 0 . 0 ) ) )
rank: 430
score: 99.44429931640624
patch: ( ( standard CaMeL Deviation <= Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 430
score: 99.43519897460938
patch: ( standard CaMeL Deviation * Math . max ( $NUMBER$ . 0 . 0 ) ) ) ) ;
rank: 430
score: 99.37411678538604
patch: ( double ) Math . sqrt ( $NUMBER$ . 0 ) ) ) * ) ;
rank: 430
score: 99.35572725183823
patch: standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 1 ) ) ) ;
rank: 430
score: 99.32512350643383
patch: ( standard CaMeL Deviation * Math . max ( $NUMBER$ . 0 ) ) ) ;
rank: 430
score: 99.30712127685547
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + x ;
rank: 431
score: 99.46407470703124
patch: $NUMBER$ ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 431
score: 99.43952941894531
patch: ( ( double ) standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ;
rank: 431
score: 99.43487870065789
patch: ~ ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 431
score: 99.37409524356617
patch: standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) * ;
rank: 431
score: 99.35557454427084
patch: ( double ) Math . sqrt ( $STRING$ . 0 ) ) ) ;
rank: 431
score: 99.34653727213542
patch: ( ( 0 . 0 ) - sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 431
score: 99.30701401654412
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + 0 . 0
rank: 431
score: 99.28561401367188
patch: ( standard CaMeL Deviation * ( ) ) ) ) ;
rank: 432
score: 99.44424293154762
patch: ( floor ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 432
score: 99.43929036458333
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 * 0 . 0 ) ) ) ;
rank: 432
score: 99.37295871310764
patch: ( standard CaMeL Deviation + Math . sqrt ( 1 . 0 ) ) ) ) ;
rank: 432
score: 99.34640842013889
patch: ( standard CaMeL Deviation * Math . sqrt ( start . 0 ) ) ) ) ;
rank: 432
score: 99.32344563802083
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . default ) ) ) ) ;
rank: 432
score: 99.30694580078125
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) . length ) ;
rank: 432
score: 99.28497992621527
patch: ( Math . sqrt ( ( $NUMBER$ . 0 ) . 0 ) ) ) ) ;
rank: 433
score: 99.43911903782895
patch: ( standard CaMeL Deviation * Math . round ( $NUMBER$ . 0 ] ) ) ) ) ;
rank: 433
score: 99.43444213867187
patch: ( standard CaMeL Deviation << Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ;
rank: 433
score: 99.35516764322917
patch: ( int ) Math . min ( $NUMBER$ . 0 ) ) ) ;
rank: 433
score: 99.3461052389706
patch: ( ( double ) Math . sqrt ( 0 . 0 ) ) ) ) ;
rank: 433
score: 99.32101779513889
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . >= ) ) ) ) ;
rank: 433
score: 99.30657958984375
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) : 0 . 0 ;
rank: 434
score: 99.4634765625
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . FALSE ;
rank: 434
score: 99.37271554129464
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) / ;
rank: 434
score: 99.35488712086396
patch: ( double ) Math . sqrt ( 0 . 0 . 0 ) ) ) ;
rank: 434
score: 99.31985134548611
patch: ( standard CaMeL Deviation * Math . >> ( $NUMBER$ . 0 ) ) ) ) ;
rank: 434
score: 99.30651041666667
patch: ( Math . sqrt ( $NUMBER$ $NUMBER$ . 0 ) ) ) ) ;
rank: 435
score: 99.37254503038194
patch: ( standard CaMeL Deviation ) Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 435
score: 99.34527994791667
patch: ( ( $NUMBER$ . 0 ) * 0 . 0 ) ) ) ;
rank: 436
score: 99.44366455078125
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + ( standard CaMeL Deviation ) ;
rank: 436
score: 99.43880208333333
patch: ( standard CaMeL Deviation * Math . min ( $NUMBER$ . 0 , $NUMBER$ . 0 ) ) ) ;
rank: 436
score: 99.37164713541667
patch: ( standard CaMeL Deviation * Math . Na CaMeL N ) ) ) ;
rank: 436
score: 99.35406494140625
patch: Math . sqrt ( $NUMBER$ . 0 - standard CaMeL Deviation ) ) ) ;
rank: 436
score: 99.30197143554688
patch: ( true * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 437
score: 99.46233258928571
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) , ) ;
rank: 437
score: 99.44348725818452
patch: ( standard CaMeL Deviation * Math . sqrt ( ( . 0 . 0 ) ) ) ) ) ;
rank: 437
score: 99.43812471277573
patch: ( standard CaMeL Deviation * Math . sqrt * $NUMBER$ . 0 ) ) ) ;
rank: 437
score: 99.3714958639706
patch: ( double [ ] ) Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 437
score: 99.34495713975694
patch: ( standard CaMeL Deviation >= Math . sqrt ( 0 . 0 ) ) ) ) ;
rank: 437
score: 99.30196380615234
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) : 1 ;
rank: 438
score: 99.44338060461956
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; return 0 . 0 ;
rank: 438
score: 99.43775770399306
patch: ( standard CaMeL Deviation * standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ) ;
rank: 438
score: 99.3447624655331
patch: ! standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 438
score: 99.30174153645834
patch: ( $NUMBER$ . 0 ) * ( $NUMBER$ . 0 ) ) ) ;
rank: 438
score: 99.27905951605902
patch: ( ( $NUMBER$ / Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 439
score: 99.46177455357143
patch: Erf . erf ( ( x - mean ) / ( standard CaMeL Deviation ) ) ) ) ;
rank: 439
score: 99.44321986607143
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) * ) ;
rank: 439
score: 99.37110188802083
patch: ( standard CaMeL Deviation * Double . MIN _ VALUE ) ) ) ;
rank: 439
score: 99.30149841308594
patch: ( Math . sqrt ( $NUMBER$ . 0 + $NUMBER$ ) ) ) ) ;
rank: 440
score: 99.43357340494792
patch: $NUMBER$ . 0 ) * ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 440
score: 99.367919921875
patch: ( double ) standard CaMeL Deviation ) ) ;
rank: 440
score: 99.3528823852539
patch: standard CaMeL Deviation ) * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 440
score: 99.34466552734375
patch: ( ( 0 . 0 ) * sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 441
score: 99.46126516241776
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) )
rank: 441
score: 99.44309596011513
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; else
rank: 441
score: 99.43693462171052
patch: ( Math . sqrt ( $NUMBER$ . 0 ] * $NUMBER$ . 0 ) ) ) ) ;
rank: 441
score: 99.43348911830357
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) * $NUMBER$ . 0 ) ) ;
rank: 441
score: 99.35279038373162
patch: ( double ) Math . sqrt ( $NUMBER$ . length ( ) ) ) ) ;
rank: 441
score: 99.34372965494792
patch: ( standard CaMeL Deviation = Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 441
score: 99.31942928538604
patch: ( standard CaMeL Deviation * 0 . ( $NUMBER$ . 0 ) ) ) ) ;
rank: 442
score: 99.4606997841283
patch: Erf . erf ( ( x - mean ) / standard CaMeL Deviation ) ) ) ;
rank: 442
score: 99.4367431640625
patch: ( Math . sqrt ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ) ;
rank: 442
score: 99.3663330078125
patch: ( double ) $NUMBER$ ) ) * Math . sqrt ( $NUMBER$ . 0 ) ;
rank: 442
score: 99.3525749655331
patch: ( ( double ) Math . min ( $NUMBER$ . 0 ) ) ) ) ;
rank: 442
score: 99.31887637867646
patch: ( standard CaMeL Deviation Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 442
score: 99.2996467141544
patch: ( Math . sqrt ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) )
rank: 443
score: 99.46008882068452
patch: Erf . erf ( ( ( x - mean ) / standard CaMeL Deviation ) ) ) ) ;
rank: 443
score: 99.43653700086806
patch: ( 1 . 0 * standard CaMeL Deviation ( $NUMBER$ . 0 ) ) ) ) ;
rank: 443
score: 99.36511948529412
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) / $NUMBER$ . 0 ) ;
rank: 443
score: 99.35221099853516
patch: Math . sqrt ( $NUMBER$ . 0 ) * $NUMBER$ . 0 ) ) ;
rank: 443
score: 99.34337022569444
patch: ( standard CaMeL Deviation * Math . sqrt ( x . 0 ) ) ) ) ;
rank: 444
score: 99.4600830078125
patch: ( standard CaMeL Deviation * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) )
rank: 444
score: 99.34298366970486
patch: ( standard CaMeL Deviation * Number . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 444
score: 99.31824448529412
patch: ( standard CaMeL Deviation * ( $NUMBER$ != 0 . 0 ) ) ) ) ;
rank: 444
score: 99.29820905412946
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) * ;
rank: 444
score: 99.27370876736111
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ > 0 ) ) ) ) ;
rank: 445
score: 99.36402803308823
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) * 1 . 0 ;
rank: 445
score: 99.31669347426471
patch: ( standard CaMeL Deviation * Erf . erf ( ( ) ) ) ) ;
rank: 446
score: 99.46000366210937
patch: standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) + 0 . $NUMBER$ ;
rank: 446
score: 99.44216086647727
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) * $NUMBER$ ) ;
rank: 446
score: 99.43431899126838
patch: ( 0 . 0 * standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ;
rank: 446
score: 99.3638427734375
patch: ( $NUMBER$ . 0 * standard CaMeL Deviation * / ) ) ) ;
rank: 446
score: 99.34249538845486
patch: ( ( double ) ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ) ;
rank: 446
score: 99.29779411764706
patch: ( ( x - mean ) * ( $NUMBER$ . 0 ) ) ) ) ;
rank: 447
score: 99.45968191964286
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . erf ( )
rank: 447
score: 99.44197387695313
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) , $STRING$ ) ) ;
rank: 447
score: 99.43390213815789
patch: ( Math . abs ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 447
score: 99.43133866159539
patch: $NUMBER$ . - standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 447
score: 99.36306762695312
patch: ( double ) Math . sqrt ( $NUMBER$ . 0 ) ) ) / ;
rank: 447
score: 99.34983197380515
patch: Math . min ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 447
score: 99.34201388888889
patch: standard CaMeL Deviation * Math . sqrt ( ( $NUMBER$ . 0 ) ) ) ) ;
rank: 448
score: 99.45948428199405
patch: ( standard CaMeL Deviation * Math . sqrt ( ( $NUMBER$ . 0 ) 0 ) ) ) ) ;
rank: 448
score: 99.44189453125
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) double ) ) ) ;
rank: 448
score: 99.43107299804687
patch: ( standard CaMeL Deviation * Math . sqrt ( standard CaMeL Deviation * double ) ) ) ) ;
rank: 448
score: 99.36188299005681
patch: ( $NUMBER$ . 0 * $NUMBER$ ) ) ) ;
rank: 448
score: 99.34981496710526
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; false ;
rank: 448
score: 99.34186469184027
patch: ( Math . 0 ) * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 448
score: 99.31448364257812
patch: ( Math . sqrt ( $NUMBER$ <= 0 . 0 ) ) ) ) ;
rank: 448
score: 99.29685974121094
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ? 0 ;
rank: 448
score: 99.27154541015625
patch: ( $NUMBER$ , Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 449
score: 99.45943777901786
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . get ) ;
rank: 449
score: 99.4326107627467
patch: ( byte ) Math . sqrt ( $NUMBER$ . 0 * $NUMBER$ . 0 ) ) ) ;
rank: 449
score: 99.36183794806985
patch: ( double ) $NUMBER$ ) * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 449
score: 99.34969656808036
patch: ( double ) standard CaMeL Deviation * 0 . 0 ) ) ;
rank: 449
score: 99.31304462139423
patch: ( standard CaMeL Deviation != 0 . 0 ) ) ) ;
rank: 449
score: 99.29627900965073
patch: ( ( x + mean ) / ( $NUMBER$ . 0 ) ) ) ) ;
rank: 450
score: 99.45905412946429
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) , ) ) ) ;
rank: 450
score: 99.43219866071429
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 : 0 . 0 ) ) ) ;
rank: 450
score: 99.34165852864584
patch: ( ( standard CaMeL Deviation * Math . 0 ) ) ) ) ;
rank: 450
score: 99.31290690104167
patch: ( standard CaMeL Deviation * ( 0 . 0 ) ) ) ) ;
rank: 450
score: 99.29607077205883
patch: ( standard CaMeL Deviation > Math . sqrt ( $NUMBER$ . 0 ) ) ) )
rank: 450
score: 99.27053493923611
patch: ( standard CaMeL Deviation * Math . sqrt ( null . 0 ) ) ) ) ;
rank: 451
score: 99.45894949776786
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + - $NUMBER$ ;
rank: 451
score: 99.44160600142045
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ; break ;
rank: 451
score: 99.43216959635417
patch: ( 0 . 0 ) ) ) * Math . sqrt ( $NUMBER$ . 0 ) ;
rank: 451
score: 99.43016415550595
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) * $NUMBER$ . ) ;
rank: 451
score: 99.34947374131944
patch: ( double ) 0 . 0 ? 0 . 0 : 0 . 0 ) ) ;
rank: 451
score: 99.31259155273438
patch: ( $NUMBER$ . 0 ) ) . erf ( $NUMBER$ . 0 ) ) ;
rank: 452
score: 99.4413174715909
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) - $NUMBER$ ) ;
rank: 452
score: 99.42988891601563
patch: $NUMBER$ . 0 / standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 452
score: 99.35938218060662
patch: ( standard CaMeL Deviation / Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 452
score: 99.34932454427083
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) + standard CaMeL Deviation ) ;
rank: 452
score: 99.34143784466912
patch: ( ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) . 0 ) ) ;
rank: 452
score: 99.31209622896634
patch: ( standard CaMeL Deviation <= 0 . 0 ) ) ) ;
rank: 452
score: 99.29534553079044
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) 1 . 0 ) ;
rank: 452
score: 99.26924641927083
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ , 0 ) ) ) ) ;
rank: 453
score: 99.44124348958333
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) - $NUMBER$ . $NUMBER$ ;
rank: 453
score: 99.43194289434524
patch: ( standard CaMeL Deviation > Math . sqrt ( $NUMBER$ . 0 * $NUMBER$ . 0 ) ) ) ;
rank: 453
score: 99.34905242919922
patch: ( double ) Math . sqrt ( $NUMBER$ . 0 1 ) ) ) ;
rank: 453
score: 99.34109317555146
patch: ( standard CaMeL Deviation * standard CaMeL Deviation * Math . 0 ) ) ) ;
rank: 453
score: 99.30992889404297
patch: ( standard CaMeL Deviation * - ( $NUMBER$ . 0 ) ) ) ) ;
rank: 453
score: 99.29515165441177
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) /
rank: 454
score: 99.45803351151316
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . x 0 ) ) ) ) ;
rank: 454
score: 99.43174743652344
patch: ( double ) Math . sqrt ( $NUMBER$ . 0 ] ) ) ) ;
rank: 454
score: 99.35862630208334
patch: ( double ) Math . ceil ( $NUMBER$ . 0 ) ) ) ;
rank: 454
score: 99.34902774586396
patch: ( * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ;
rank: 455
score: 99.4404629794034
patch: ( standard CaMeL Deviation * Math . sqrt ( 1 . 0 ) ) ) ) + 0 . $NUMBER$ ;
rank: 455
score: 99.43165347450658
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 ? $NUMBER$ : 0 . 0 ) ) ) ;
rank: 455
score: 99.35823328354779
patch: ( standard CaMeL Deviation $NUMBER$ * standard CaMeL Deviation $NUMBER$ . 0 ) ) ) ;
rank: 455
score: 99.34899184283088
patch: Math . sqrt ( Math . min ( $NUMBER$ . 0 ) ) ) ) ;
rank: 455
score: 99.34060668945312
patch: ( ( $NUMBER$ . 0 ) * $NUMBER$ . 0 ) ) ) ) ;
rank: 455
score: 99.30937643612133
patch: ( standard CaMeL Deviation * Math . sqrt ( ) ) . 0 ) ) ;
rank: 455
score: 99.29418131510417
patch: ( Math . sqrt ( $NUMBER$ . 0 $NUMBER$ ) ) ) ) ;
rank: 456
score: 99.45767066592262
patch: ( Erf . erf ( ( x - mean ) / standard CaMeL Deviation ) ) ) ) ;
rank: 456
score: 99.4404296875
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + 0 . ) ;
rank: 456
score: 99.43117804276316
patch: ( ? standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 456
score: 99.429150390625
patch: ( double ) Math . sqrt ( $NUMBER$ . 0 + $NUMBER$ . 0 ) ) ) ) ;
rank: 456
score: 99.35819789341518
patch: ( standard CaMeL Deviation * double ) $NUMBER$ . 0 ) ) ;
rank: 456
score: 99.34897030101104
patch: ( ( ) / Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 456
score: 99.340576171875
patch: ( standard CaMeL Deviation * new ( $NUMBER$ . 0 ) ) ) ) ;
rank: 456
score: 99.30929744944854
patch: ( standard CaMeL Deviation * ( $NUMBER$ == 0 . 0 ) ) ) ) ;
rank: 456
score: 99.29383760340073
patch: ( ( standard CaMeL Deviation * ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 457
score: 99.43947435461956
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + Math . sqrt ( $NUMBER$ . 0 ) ;
rank: 457
score: 99.35783168247768
patch: ( standard CaMeL Deviation * / standard CaMeL Deviation ) ) ) ;
rank: 457
score: 99.34896850585938
patch: standard CaMeL Deviation * Math . abs ( $NUMBER$ . 0 ) ) ) ;
rank: 457
score: 99.33983561197917
patch: ( ( $NUMBER$ . 0 * $NUMBER$ . 0 ) ) ) ) ;
rank: 457
score: 99.29360782398896
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ? 0 > $NUMBER$
rank: 458
score: 99.45713588169643
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) / Math . sqrt ( $NUMBER$ . 0 ) ;
rank: 458
score: 99.43100457442434
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ? $NUMBER$ . 0 ] ;
rank: 458
score: 99.3486263877467
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; ) ;
rank: 458
score: 99.30833524816177
patch: ( standard CaMeL Deviation >= Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 458
score: 99.2934211282169
patch: ( ) / ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 458
score: 99.26072064568015
patch: ( standard CaMeL Deviation * standard CaMeL Deviation . erf ( ) ) ) ) ;
rank: 459
score: 99.438720703125
patch: ( this . standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ; }
rank: 459
score: 99.43100120907738
patch: ( standard CaMeL Deviation > Math . sqrt ( $NUMBER$ . 0 + $NUMBER$ . 0 ) ) ) ;
rank: 459
score: 99.42854817708333
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) * $NUMBER$ . 0 ;
rank: 459
score: 99.35697428385417
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ;
rank: 459
score: 99.34860229492188
patch: Math . sqrt ( $NUMBER$ . 0 + 0 . 0 ) ) ) ;
rank: 459
score: 99.338623046875
patch: ( standard CaMeL Deviation > 0 . 0 ) * $NUMBER$ . 0 ) ) ;
rank: 459
score: 99.30683135986328
patch: ( standard CaMeL Deviation * Math . sqrt ( max ) ) ) ) ;
rank: 459
score: 99.29258099724265
patch: ( % ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 459
score: 99.25991821289062
patch: ( Math . sqrt ( $NUMBER$ / 0 . 0 ) ) ) ) ;
rank: 460
score: 99.45643920898438
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . x ;
rank: 460
score: 99.4385986328125
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) )
rank: 460
score: 99.43037494860198
patch: ( standard CaMeL Deviation > Math . sqrt ( $NUMBER$ . 0 ) 0 ) ) ) ;
rank: 460
score: 99.35685460707721
patch: ( $NUMBER$ . 0 - standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ;
rank: 460
score: 99.34853001644737
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . start ( ) ) ) ) ;
rank: 460
score: 99.33837890625
patch: ( standard CaMeL Deviation * $STRING$ . 0 ) ) ) ;
rank: 461
score: 99.43836059570313
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . mean ) ) ) ) ;
rank: 461
score: 99.43030366443452
patch: ( standard CaMeL Deviation > Math . sqrt ( $NUMBER$ . 0 + standard CaMeL Deviation ) ) ) ;
rank: 461
score: 99.42791137695312
patch: 1 . 0 , standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 461
score: 99.33819221047794
patch: ( standard CaMeL Deviation * Math . sqrt [ 0 . 0 ) ) ) ;
rank: 461
score: 99.30587768554688
patch: ( standard CaMeL Deviation * standard CaMeL Deviation $NUMBER$ . 0 ) ) ) ;
rank: 461
score: 99.2923355102539
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) + $NUMBER$ ) ;
rank: 461
score: 99.25696563720703
patch: ( Math . sqrt ( $NUMBER$ / $NUMBER$ . 0 ) ) ) ) ;
rank: 462
score: 99.43809925426136
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) - 0 . 1 ;
rank: 462
score: 99.34773254394531
patch: Math . sqrt ( $NUMBER$ . 0 * 0 . 0 ) ) ) ;
rank: 462
score: 99.33736419677734
patch: ( double * Math . sqrt ( 0 . 0 ) ) ) ) ;
rank: 462
score: 99.30586511948529
patch: ( standard CaMeL Deviation * Math < ( $NUMBER$ . 0 ) ) ) ) ;
rank: 462
score: 99.292236328125
patch: ( standard CaMeL Deviation * Math . sqrt ( 0 . 0 ) ) ) )
rank: 462
score: 99.2564697265625
patch: ( ( x - mean ) ) ) ) ;
rank: 463
score: 99.45488048735119
patch: ( ) / ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 463
score: 99.43809750205592
patch: ( standard CaMeL Deviation . Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; }
rank: 463
score: 99.4301693564967
patch: ( byte ) Math . sqrt ( $NUMBER$ . 0 + $NUMBER$ . 0 ) ) ) ;
rank: 463
score: 99.3564812155331
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) + 0 . $NUMBER$ ;
rank: 463
score: 99.34765625
patch: Math . sqrt ( $NUMBER$ . 0 , $NUMBER$ . 0 ) ) ) ;
rank: 463
score: 99.33656939338235
patch: ( ( standard CaMeL Deviation * Math . sqrt ( ) ) ) ) ) ;
rank: 464
score: 99.43803478422619
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . $NUMBER$ ) ;
rank: 464
score: 99.43009868421052
patch: ( $NUMBER$ . 0 ] * standard CaMeL Deviation ( $NUMBER$ . 0 ) ) ) ) ;
rank: 464
score: 99.35645249310662
patch: ( double ) standard CaMeL Deviation * $NUMBER$ . 0 ) ) * / ) ;
rank: 464
score: 99.34713745117188
patch: ( long * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 464
score: 99.30521886488971
patch: ( standard CaMeL Deviation * Math . sqrt ( ( ) ) ) ) ) ;
rank: 464
score: 99.2909294577206
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ? 1 != 0
rank: 464
score: 99.25430118336396
patch: ( ( ) ) * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 465
score: 99.43780517578125
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) > 0 ) ;
rank: 465
score: 99.42992485894098
patch: ( standard CaMeL Deviation < Math . min ( $NUMBER$ . 0 ) ) ) ) ;
rank: 465
score: 99.42723324424342
patch: ( double ) Math . sqrt ( $NUMBER$ . 0 . 0 . 0 ) ) ) ;
rank: 465
score: 99.35637555803571
patch: ( double ) $NUMBER$ . 0 ) ) / $NUMBER$ . 0 ;
rank: 465
score: 99.34668782552083
patch: ( ( 0 . 0 * $NUMBER$ . 0 ) ) ) ) ;
rank: 465
score: 99.33614773220486
patch: ( ( double * Math . sqrt ( 0 . 0 ) ) ) ) ) ;
rank: 465
score: 99.30514322916666
patch: ( $NUMBER$ . 0 + ( $NUMBER$ . 0 ) ) ) ) ;
rank: 465
score: 99.29071807861328
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) * $NUMBER$ ) ;
rank: 465
score: 99.2515869140625
patch: ( x - mean ) ) ) ;
rank: 466
score: 99.43778911389802
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) int ) ) ) ;
rank: 466
score: 99.42964252672698
patch: ( standard CaMeL Deviation ? Math . sqrt ( $NUMBER$ . 0 ] ) ) ) ) ;
rank: 466
score: 99.4272216796875
patch: standard CaMeL Deviation * Math . sqrt ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ;
rank: 466
score: 99.3548583984375
patch: ( double ) standard CaMeL Deviation * / standard CaMeL Deviation ) ) ;
rank: 466
score: 99.33584359975961
patch: ( standard CaMeL Deviation - 0 . 0 ) ) ) ;
rank: 466
score: 99.30366785386029
patch: ( $NUMBER$ . 0 ) ) * ( ( $NUMBER$ . 0 ) ) ) ;
rank: 466
score: 99.29048426011029
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ? 1 == $NUMBER$
rank: 467
score: 99.45302862870066
patch: ( ( $NUMBER$ . 0 ) * ( ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 467
score: 99.4375390625
patch: ( standard CaMeL Deviation * double ) ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 467
score: 99.42943050986842
patch: ( Math . sqrt ( $NUMBER$ . 0 ) * $NUMBER$ . 0 ) ) ) ) ;
rank: 467
score: 99.35437774658203
patch: ( standard CaMeL Deviation * ( double ) $NUMBER$ . 0 ) ) ) ;
rank: 467
score: 99.3357795266544
patch: ( standard CaMeL Deviation * 0 . 0 ) ) , 0 . 0 ) ;
rank: 467
score: 99.3033088235294
patch: ( standard CaMeL Deviation < Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 468
score: 99.45263671875
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ==
rank: 468
score: 99.43732244318181
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) - ( standard CaMeL Deviation ;
rank: 468
score: 99.4292853860294
patch: ( standard CaMeL Deviation * standard CaMeL Deviation / 0 . 0 ) ) ) ;
rank: 468
score: 99.42635345458984
patch: ( double ) ( $NUMBER$ . 0 + $NUMBER$ . 0 ) ) ) ;
rank: 468
score: 99.35324276194854
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 * standard CaMeL Deviation ) ) ) ;
rank: 468
score: 99.33565027573529
patch: ( standard CaMeL Deviation * this . 0 . 0 . 0 ) ) ) ;
rank: 468
score: 99.30328010110294
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ catch ) ) ) ) ;
rank: 468
score: 99.28919893152573
patch: ( Math . sqrt ( $NUMBER$ == 0 . 0 ) false ) ) ) ;
rank: 469
score: 99.45211791992188
patch: mean * ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 469
score: 99.43729831861413
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + 0 . $NUMBER$ } ;
rank: 469
score: 99.42874484592014
patch: ( Math . abs ( $NUMBER$ . 0 * $NUMBER$ . 0 ) ) ) ) ;
rank: 469
score: 99.35246725643383
patch: ( double ) Math . sqrt ( $NUMBER$ . 0 ) ) ) * / ;
rank: 469
score: 99.34617213199013
patch: standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) - standard CaMeL Deviation ;
rank: 469
score: 99.30272001378677
patch: ( standard CaMeL Deviation * ( this . erf . 0 ) ) ) ) ;
rank: 469
score: 99.28762582632211
patch: ( $NUMBER$ . 0 ) ) ) : 0 . 0 ;
rank: 470
score: 99.45173950195313
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) : false ;
rank: 470
score: 99.43705240885417
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) , Math . sqrt ( $NUMBER$ . 0 ) )
rank: 470
score: 99.42842102050781
patch: ( Math . sqrt ( $NUMBER$ . 0 * $NUMBER$ ) ) ) ) ;
rank: 470
score: 99.4257080078125
patch: ( standard CaMeL Deviation * Math . sqrt ( Double . 0 . 0 ) ) ) ) ;
rank: 470
score: 99.35240071614584
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) * / ;
rank: 470
score: 99.34541151258681
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) || standard CaMeL Deviation ) ;
rank: 470
score: 99.33243136935764
patch: ( Math . sqrt ( $NUMBER$ . 0 ) * 0 . 0 ) ) ) ;
rank: 470
score: 99.30157111672794
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) +
rank: 470
score: 99.28742980957031
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) : 0 . $NUMBER$ ;
rank: 470
score: 99.25009390024039
patch: ( standard CaMeL Deviation == 0 . 0 ) ) ) ;
rank: 471
score: 99.43693033854167
patch: ( standard CaMeL Deviation * Math . >> Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 471
score: 99.42835150824652
patch: ( standard CaMeL Deviation * Math . sleep ( $NUMBER$ . 0 ) ) ) ) ;
rank: 471
score: 99.35222516741071
patch: ( double ) $NUMBER$ . 0 ) ) * standard CaMeL Deviation ;
rank: 471
score: 99.34495785361842
patch: standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) + standard CaMeL Deviation ;
rank: 471
score: 99.33226860894098
patch: ( ( standard CaMeL Deviation > 0 . 0 ) 1 . 0 ) ) ) ;
rank: 471
score: 99.30055865119485
patch: ( standard CaMeL Deviation * Erf . erf ( $NUMBER$ ) ) ) ) ;
rank: 471
score: 99.28708321707589
patch: sqrt ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ;
rank: 472
score: 99.43690074573864
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) + 1 ;
rank: 472
score: 99.42543431332237
patch: ( float ) standard CaMeL Deviation * Math . abs ( $NUMBER$ . 0 ) ) ) ;
rank: 472
score: 99.35218912760416
patch: ( double ) standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . ;
rank: 472
score: 99.33183458116319
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) throws
rank: 472
score: 99.28662109375
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) :
rank: 473
score: 99.4506591796875
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . SIZE ;
rank: 473
score: 99.43670043945312
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) , true ) ) ;
rank: 473
score: 99.35214029947916
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) * ) ;
rank: 473
score: 99.34466193704044
patch: Math . sqrt ( Math . max ( $NUMBER$ . 0 ) ) ) ) ;
rank: 473
score: 99.28644561767578
patch: ( $NUMBER$ . 0 ) ) * sqrt ( $NUMBER$ . 0 ) ) ;
rank: 473
score: 99.2470703125
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ ) ) ) ) ) ;
rank: 474
score: 99.43667204483695
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + 0 . $NUMBER$ ; }
rank: 474
score: 99.42515869140625
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) * $STRING$ ) ) ;
rank: 474
score: 99.35181535993304
patch: ( standard CaMeL Deviation * 1 . 0 ) ) ) ) ;
rank: 474
score: 99.34463019120066
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ( ) ) ) ) ;
rank: 474
score: 99.33076171875
patch: ( Math . sqrt ( $NUMBER$ . 0 ) 0 ) ) ) ;
rank: 474
score: 99.2989501953125
patch: ( standard CaMeL Deviation * 0 . $NUMBER$ ) ) ) ;
rank: 474
score: 99.28598022460938
patch: ( false * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 474
score: 99.2458267211914
patch: ( $NUMBER$ == Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 475
score: 99.43646240234375
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) , 0 . 0 ) ) ) ;
rank: 475
score: 99.42410438939145
patch: ( float ) standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . $NUMBER$ ) ) ) ;
rank: 475
score: 99.3516512784091
patch: ( standard CaMeL Deviation * $STRING$ ) ) ) ;
rank: 475
score: 99.34347373560855
patch: ( standard CaMeL Deviation . Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 475
score: 99.33067491319444
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 475
score: 99.28461052389706
patch: ( << ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 476
score: 99.42755126953125
patch: ( Math . sqrt ( $NUMBER$ . 0 * $NUMBER$ . 1 ) ) ) ) ;
rank: 476
score: 99.42406548394098
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; ;
rank: 476
score: 99.35116577148438
patch: $NUMBER$ . $NUMBER$ ) * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 476
score: 99.33057358685662
patch: ( ( ( 1 . 0 ) * $NUMBER$ . 0 ) ) ) ) ;
rank: 476
score: 99.28395182291666
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + *
rank: 477
score: 99.44825439453125
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) / $NUMBER$ ) ) ) ;
rank: 477
score: 99.43552468039773
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ? 0 ;
rank: 477
score: 99.4240478515625
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) + $STRING$ ) ) ;
rank: 477
score: 99.34999302455357
patch: ( float ) standard CaMeL Deviation * $NUMBER$ . 0 ) ) ;
rank: 477
score: 99.34266764322916
patch: ( Math . sqrt ( $NUMBER$ . 0 . ) ) ) ) ;
rank: 477
score: 99.23795318603516
patch: ( Erf . erf ( ( x - mean ) ) ) ) ;
rank: 478
score: 99.44820363898026
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . 0
rank: 478
score: 99.43467310855263
patch: double ) ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 478
score: 99.42709585336539
patch: ( standard CaMeL Deviation > standard CaMeL Deviation ) ) ) ;
rank: 478
score: 99.42371215820313
patch: ( Math . sqrt ( $NUMBER$ . 0 . 0 + $NUMBER$ . 0 ) ) ) ) ;
rank: 478
score: 99.34894875919117
patch: ( $NUMBER$ . 0 * standard CaMeL Deviation * standard CaMeL Deviation ) ) ) ;
rank: 478
score: 99.34249538845486
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) - standard CaMeL Deviation ) ;
rank: 478
score: 99.32989860983456
patch: ( standard CaMeL Deviation * Math . 0 . 0 . 0 ) ) ) ;
rank: 478
score: 99.29462747012867
patch: ( standard CaMeL Deviation * Math . sqrt ( . 0 ) ) ) ) ;
rank: 478
score: 99.28300924862133
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ? $NUMBER$ == 0
rank: 479
score: 99.44771118164063
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) - ) ;
rank: 479
score: 99.43437056107955
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) * 0 . 0 ;
rank: 479
score: 99.42684133429276
patch: ( double ) Math . min ( $NUMBER$ . 0 , $NUMBER$ . 0 ) ) ) ;
rank: 479
score: 99.32820398667279
patch: ( standard CaMeL Deviation * Math . sqrt > 0 . 0 ) ) ) ;
rank: 479
score: 99.29436178768383
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) {
rank: 479
score: 99.28277228860294
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ? $NUMBER$ . 0
rank: 479
score: 99.2368896484375
patch: ( Erf . erf ( x - mean ) ) ) ) ;
rank: 480
score: 99.43430582682292
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) , 0 . $NUMBER$ ) ;
rank: 480
score: 99.42616182215073
patch: ( standard CaMeL Deviation ? $NUMBER$ . 0 : $NUMBER$ . 0 ) ) ) ;
rank: 480
score: 99.42290900735294
patch: ( standard CaMeL Deviation - standard CaMeL Deviation * standard CaMeL Deviation ) ) ) ;
rank: 480
score: 99.34207356770834
patch: ( float ) Math . sqrt ( 1 . 0 ) ) ) ;
rank: 480
score: 99.3279670266544
patch: ( ( ( 0 . 0 ) - $NUMBER$ . 0 ) ) ) ) ;
rank: 480
score: 99.28260803222656
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ) ;
rank: 481
score: 99.44614868164062
patch: standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) + $NUMBER$ . $NUMBER$ ;
rank: 481
score: 99.43369547526042
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) = 0 . 0 ;
rank: 481
score: 99.42601182725694
patch: ( Math . min ( $NUMBER$ . 0 ) , $NUMBER$ . 0 ) ) ) ;
rank: 481
score: 99.34792073567708
patch: ( standard CaMeL Deviation * $NUMBER$ . ) ) ) ;
rank: 481
score: 99.34193179481908
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . max ( ) ) ) ) ;
rank: 481
score: 99.32765826056985
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 ) * $NUMBER$ . 0 ) ) ;
rank: 481
score: 99.28201293945312
patch: ( Math . sqrt ( $NUMBER$ : 0 . 0 ) ) ) ) ;
rank: 481
score: 99.23452962239584
patch: ( this . erf . erf ( ( ) ) ) ) ) ;
rank: 482
score: 99.44596557617187
patch: ( ( 1 . 0 ) * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 482
score: 99.43367513020833
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . 0 * 0 . $NUMBER$ ;
rank: 482
score: 99.42579409950658
patch: ( String ) standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 482
score: 99.34656700721153
patch: ( standard CaMeL Deviation + 1 . 0 ) ) ) ;
rank: 482
score: 99.34107208251953
patch: Math . sqrt $NUMBER$ Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 482
score: 99.29363654641544
patch: ( standard CaMeL Deviation * ( $NUMBER$ <= 0 . 0 ) ) ) ) ;
rank: 482
score: 99.28189849853516
patch: ( $NUMBER$ & Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 482
score: 99.2333740234375
patch: ( this . standard CaMeL Deviation * standard CaMeL Deviation ) ) ) ;
rank: 483
score: 99.43318939208984
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) )
rank: 483
score: 99.42099338107639
patch: ( standard CaMeL Deviation * Math . sum ( $NUMBER$ . 0 ) ) ) ) ;
rank: 483
score: 99.34581083409927
patch: ( standard CaMeL Deviation * 1 . 0 ) ) ) + 1 . 0 ;
rank: 483
score: 99.23336791992188
patch: ( $NUMBER$ . 0 ) ) / ( $NUMBER$ . 0 ) ) ) ;
rank: 484
score: 99.44519721137152
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) !=
rank: 484
score: 99.42570415296052
patch: ( * Math . sqrt ( $NUMBER$ . 0 * $NUMBER$ . 0 ) ) ) ) ;
rank: 484
score: 99.34556669347427
patch: ( standard CaMeL Deviation - standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ;
rank: 484
score: 99.34088134765625
patch: ( double ? Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 484
score: 99.32733561197917
patch: ( ( standard CaMeL Deviation - 0 . 0 ) ) ) ) ;
rank: 484
score: 99.293017578125
patch: ( standard CaMeL Deviation * ( 1 . 0 ) ) ) ) ;
rank: 484
score: 99.2812271118164
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) . $NUMBER$ ) ) ;
rank: 485
score: 99.4449462890625
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . erf ( ) ;
rank: 485
score: 99.43295433407738
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ? 0 . $NUMBER$
rank: 485
score: 99.42021484375
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) + start ) ;
rank: 485
score: 99.33984375
patch: Math . sqrt ( Math . sqrt ( standard CaMeL Deviation ) ) ) ) ;
rank: 485
score: 99.29234403722427
patch: ( standard CaMeL Deviation * ( $NUMBER$ * 0 . 0 ) ) ) ) ;
rank: 485
score: 99.28096516927083
patch: ( $NUMBER$ . 0 ) ) ) / ( $NUMBER$ . 0 ) ;
rank: 485
score: 99.23267364501953
patch: ( standard CaMeL Deviation * ( standard CaMeL Deviation } ) ) ) ) ;
rank: 486
score: 99.4448486328125
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) != ) ;
rank: 486
score: 99.4329501065341
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ? 1 . $NUMBER$ ;
rank: 486
score: 99.42475043402777
patch: ( standard CaMeL Deviation < Math . round ( $NUMBER$ . 0 ) ) ) ) ;
rank: 486
score: 99.34535217285156
patch: ( double ) double ) Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 486
score: 99.33973524305556
patch: ( standard CaMeL Deviation < Math . sqrt ( $NUMBER$ . 1 ) ) ) ) ;
rank: 486
score: 99.29217170266544
patch: ( standard CaMeL Deviation * Math . contains ( $NUMBER$ . 0 ) ) ) ;
rank: 486
score: 99.2803955078125
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + ) ;
rank: 486
score: 99.23244065504808
patch: ( standard CaMeL Deviation . erf ( ) ) ) ) ;
rank: 487
score: 99.42442491319444
patch: ( standard CaMeL Deviation > Math . sqrt ( $NUMBER$ . 1 ) ) ) ) ;
rank: 487
score: 99.3448486328125
patch: $NUMBER$ ) * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 487
score: 99.32675606863839
patch: ( ( ( double ) $NUMBER$ . 0 ) ) ) ) ;
rank: 487
score: 99.29209271599265
patch: ( $NUMBER$ . 0 ) ) - ( ( $NUMBER$ . 0 ) ) ) ;
rank: 487
score: 99.28005083869485
patch: ( - ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 488
score: 99.41938219572368
patch: ( double ) Math . sqrt ( $NUMBER$ . 0 . $NUMBER$ . 0 ) ) ) ;
rank: 488
score: 99.3391825358073
patch: Math . round ( $NUMBER$ . 0 ) ) ) ;
rank: 488
score: 99.27973489200367
patch: ( Math . sqrt ( $NUMBER$ . 0 ) * $NUMBER$ . 0 ) ) )
rank: 489
score: 99.44404907226563
patch: mean ) ) + ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 489
score: 99.43154907226562
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) - 0 . $NUMBER$ . $NUMBER$ ;
rank: 489
score: 99.34458295036765
patch: ( 1 . 0 + standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ;
rank: 489
score: 99.33778599330357
patch: ( Integer . max ( $NUMBER$ . 0 ) ) ) ) ;
rank: 489
score: 99.32538713727679
patch: ( standard CaMeL Deviation ( 0 . 0 ) ) ) ) ;
rank: 489
score: 99.29067095588235
patch: ( standard CaMeL Deviation * Math . sqrt ( - $NUMBER$ ) ) ) ) ;
rank: 489
score: 99.231689453125
patch: ( $NUMBER$ . 0 ) / ( ( $NUMBER$ . 0 ) ) ) ) ;
rank: 490
score: 99.42375745271382
patch: ( long ) Math . sqrt ( $NUMBER$ . 0 * $NUMBER$ . 0 ) ) ) ;
rank: 490
score: 99.34408748851104
patch: ( standard CaMeL Deviation - Math . sqrt ( $NUMBER$ . 0 ) ) ) )
rank: 490
score: 99.2886603860294
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ == ) ) ) ) ;
rank: 490
score: 99.23164636948529
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ * ) ) ) ) ;
rank: 491
score: 99.43132218070652
patch: ( standard CaMeL Deviation * ! standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 491
score: 99.34384334788604
patch: ( double ) standard CaMeL Deviation * / standard CaMeL Deviation * / ) ) ;
rank: 491
score: 99.32483628216912
patch: ( ( standard CaMeL Deviation * $NUMBER$ . 0 ) . 0 ) ) ) ;
rank: 491
score: 99.2884162454044
patch: ( standard CaMeL Deviation * ( Math . sqrt ( ) ) ) ) ) ;
rank: 491
score: 99.27943420410156
patch: ( $NUMBER$ . 0 ) ) / sqrt ( $NUMBER$ . 0 ) ) ;
rank: 492
score: 99.43099975585938
patch: ( standard CaMeL Deviation - ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 492
score: 99.3435809795673
patch: ( standard CaMeL Deviation * $NUMBER$ . 1 ) ) ) ;
rank: 492
score: 99.33568396935097
patch: ( standard CaMeL Deviation + 0 . 0 ) ) ) ;
rank: 492
score: 99.28815774356617
patch: ( standard CaMeL Deviation * ( standard CaMeL Deviation * sqrt ) ) ) ) ;
rank: 492
score: 99.27908145680146
patch: ( Math . sqrt ( / ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 492
score: 99.2289810180664
patch: ( $NUMBER$ . 0 ) / ( $NUMBER$ . 0 ) ) ) ) ;
rank: 493
score: 99.34281158447266
patch: ( double ) ( standard CaMeL Deviation - standard CaMeL Deviation ) ) ) ;
rank: 493
score: 99.3355712890625
patch: ( standard CaMeL Deviation . 0 . 0 * $NUMBER$ . 0 ) ) ) ;
rank: 493
score: 99.32300618489583
patch: ( ( 1 . 0 ) * $NUMBER$ . 0 ) ) ) ;
rank: 493
score: 99.28810119628906
patch: ( standard CaMeL Deviation * ( standard CaMeL Deviation * ) ) ) ) ;
rank: 493
score: 99.2790771484375
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ] ) ) ) ;
rank: 494
score: 99.4426513671875
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . erf ;
rank: 494
score: 99.43084161931819
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) | 0 . 0 ;
rank: 494
score: 99.42336018880208
patch: ( Integer . sqrt ( $NUMBER$ . 0 * $NUMBER$ . 0 ) ) ) ) ;
rank: 494
score: 99.41683349609374
patch: ( double ) ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) )
rank: 494
score: 99.22870744977679
patch: ( ( ) / ( $NUMBER$ . 0 ) ) ) ) ;
rank: 495
score: 99.44263916015625
patch: ( $NUMBER$ . 0 ) ) ) . erf ( ( x - x - mean ) ) ;
rank: 495
score: 99.43017578125
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) + Math CaMeL Exception ;
rank: 495
score: 99.34217026654412
patch: ( $NUMBER$ . 0 * standard CaMeL Deviation * 1 . 0 ) ) ) ;
rank: 495
score: 99.33542767693015
patch: ( Math . sqrt ( $NUMBER$ . 0 ) 0 . 0 ) ) ) ;
rank: 495
score: 99.32270364200367
patch: ( ( byte ) Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 495
score: 99.287744140625
patch: ( x - mean ) / ( $NUMBER$ . 0 ) ) ) ;
rank: 496
score: 99.41641055836396
patch: ( standard CaMeL Deviation + Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 496
score: 99.3420769186581
patch: ( standard CaMeL Deviation * standard CaMeL Deviation * $NUMBER$ . $NUMBER$ ) ) ) ;
rank: 496
score: 99.33531951904297
patch: ( Math . sqrt ( $NUMBER$ . $NUMBER$ . 0 ) ) ) ) ;
rank: 496
score: 99.32238051470588
patch: ( Double . * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 496
score: 99.28554400275735
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ ) ) ) ) ; }
rank: 497
score: 99.44038696289063
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) : true ;
rank: 497
score: 99.34182942708334
patch: ( standard CaMeL Deviation * standard CaMeL Deviation * / ) ) ) ;
rank: 497
score: 99.32224934895834
patch: ( ( $NUMBER$ . 0 ) - $NUMBER$ . 0 ) ) ) ;
rank: 497
score: 99.278271484375
patch: ( Math . sqrt ( - $NUMBER$ . 0 ) ) ) ) ;
rank: 498
score: 99.34145220588235
patch: ( standard CaMeL Deviation / Math . sqrt ( $NUMBER$ . 0 ) ) ) )
rank: 498
score: 99.27783203125
patch: ( $NUMBER$ != 0 . 0 ) ) ) ;
rank: 499
score: 99.43932495117187
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . $STRING$ ;
rank: 499
score: 99.4222476356908
patch: ( standard CaMeL Deviation <= Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 499
score: 99.34133013556985
patch: $NUMBER$ . 0 * Math . sqrt ( $NUMBER$ . 0 ) ) ) * ;
rank: 499
score: 99.32106119791666
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 ) . 0 ) ) ;
rank: 499
score: 99.28447409237133
patch: ( standard CaMeL Deviation * ( $NUMBER$ . 0 ) ) . 0 ) ) ;
rank: 499
score: 99.27758026123047
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) : 0 .
rank: 499
score: 99.22496840533088
patch: ( byte ) ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 500
score: 99.42915852864583
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) | 0 . $NUMBER$ ;
rank: 500
score: 99.3405517578125
patch: ( double ) Math . floor ( $NUMBER$ . 0 ) ) ) ;
rank: 500
score: 99.3343864889706
patch: ( standard CaMeL Deviation * 0 . 0 / $NUMBER$ . 0 ) ) ) ;
rank: 500
score: 99.32036994485294
patch: ( ( double * standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ) ;
rank: 500
score: 99.28363396139706
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ||
rank: 500
score: 99.22440831801471
patch: ( ( x - mean ) ) ) / ( $NUMBER$ . 0 ) ) ;
rank: 501
score: 99.43928608141448
patch: erf ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 501
score: 99.42166298314145
patch: ( standard CaMeL Deviation ? Math . sqrt ( $NUMBER$ . 0 ) ] ) ) ) ;
rank: 501
score: 99.33429718017578
patch: ( $NUMBER$ . Math . sqrt ( 0 . 0 ) ) ) ) ;
rank: 502
score: 99.42161051432292
patch: ( Math . sqrt ( $NUMBER$ . 0 : $NUMBER$ . 0 ) ) ) ) ;
rank: 502
score: 99.33924775965073
patch: $NUMBER$ . 0 ) ) * ( standard CaMeL Deviation * $NUMBER$ . 0 ) ;
rank: 502
score: 99.33346121651786
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) ; ) ;
rank: 502
score: 99.31903076171875
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; ) ;
rank: 502
score: 99.28304850260416
patch: ( standard CaMeL Deviation * standard CaMeL Deviation ) . 0 ) ) ;
rank: 502
score: 99.27601036658653
patch: ( $NUMBER$ . 0 ) * $NUMBER$ . 0 ) ) ;
rank: 503
score: 99.42854110054348
patch: ( standard CaMeL Deviation * - standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 503
score: 99.42156018708882
patch: ( standard CaMeL Deviation ? Math . sqrt ( $NUMBER$ . 0 ) ) ] ) ) ;
rank: 503
score: 99.318115234375
patch: ( double ) Math . sqrt ( $NUMBER$ . 0 . ) ) ) ;
rank: 503
score: 99.27503159466912
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) : 0 . 0 ) ;
rank: 503
score: 99.22348920036765
patch: : standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 504
score: 99.43829345703125
patch: ( ( standard CaMeL Deviation && Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 504
score: 99.42848802649456
patch: ( float ) ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ;
rank: 504
score: 99.33247644761029
patch: standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; ;
rank: 504
score: 99.27489516314338
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ? 1 < $NUMBER$
rank: 505
score: 99.42848714192708
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + 1 . $NUMBER$ . $NUMBER$ ;
rank: 505
score: 99.41277398003473
patch: $NUMBER$ . standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 505
score: 99.33246721540179
patch: ( Double . max ( $NUMBER$ . 0 ) ) ) ) ;
rank: 505
score: 99.3174057006836
patch: ( double . Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 505
score: 99.28175264246323
patch: ( standard CaMeL Deviation * ( this . 0 . 0 ) ) ) ) ;
rank: 505
score: 99.27439970128677
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ? 0 != 0
rank: 505
score: 99.22210286458333
patch: ( standard CaMeL Deviation . erf ( ( ) ) ) ) ) ;
rank: 506
score: 99.43765258789062
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) : $STRING$ ;
rank: 506
score: 99.41928335336539
patch: ( standard CaMeL Deviation + $NUMBER$ . 0 ) ) ) ;
rank: 506
score: 99.33866613051471
patch: ( $NUMBER$ . 0 ) ) ) * Math . sqrt ( $NUMBER$ . 0 ;
rank: 506
score: 99.31694793701172
patch: ( * * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 506
score: 99.22206025965073
patch: ( $NUMBER$ . Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 507
score: 99.43666585286458
patch: mean ) / standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 507
score: 99.42738850911458
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ) . $NUMBER$ ;
rank: 507
score: 99.41923442639802
patch: ( Math . sqrt ( $NUMBER$ . 0 / $NUMBER$ . 0 ) ) ) ) ) ;
rank: 507
score: 99.33191789899554
patch: Math . sqrt ( $NUMBER$ . 0 . $NUMBER$ ) ) ) ;
rank: 507
score: 99.31626263786765
patch: ( double * * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 507
score: 99.27354431152344
patch: ( Math . sqrt ( $NUMBER$ . 0 ) * $NUMBER$ ) ) ) ;
rank: 507
score: 99.22047334558823
patch: ( ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ) ;
rank: 508
score: 99.43567504882813
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) - mean ) ) ;
rank: 508
score: 99.41182668585526
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 } ) ) ) ) ;
rank: 508
score: 99.33788344439338
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) * ;
rank: 508
score: 99.33176676432292
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) || ;
rank: 508
score: 99.28132629394531
patch: sqrt ( standard CaMeL Deviation * ( $NUMBER$ . 0 ) ) ) ) ;
rank: 508
score: 99.27318572998047
patch: ( Math . sqrt ( $NUMBER$ . 0 - $NUMBER$ ) ) ) ) ;
rank: 508
score: 99.21943215762867
patch: standard CaMeL Deviation * ( standard CaMeL Deviation * 0 . 0 ) ) ) ;
rank: 509
score: 99.43565063476562
patch: ( ( $NUMBER$ . 0 + Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 509
score: 99.33766084558823
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . $NUMBER$ ) ) ) )
rank: 509
score: 99.33164978027344
patch: ( standard CaMeL Deviation . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 509
score: 99.31598455255681
patch: ( standard CaMeL Deviation * null ) ) ) ;
rank: 509
score: 99.2812859030331
patch: ( standard CaMeL Deviation * Math . sqrt ( - x ) ) ) ) ;
rank: 509
score: 99.272607421875
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) * *
rank: 509
score: 99.21579415457589
patch: ( this . erf ( x - mean ) ) ) ) ;
rank: 510
score: 99.42705743963069
patch: ( ( x - standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 510
score: 99.33757019042969
patch: ( double ) ( standard CaMeL Deviation / $NUMBER$ . 0 ) ) ) ;
rank: 510
score: 99.3314273231908
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; true ;
rank: 510
score: 99.3157958984375
patch: ( * ( standard CaMeL Deviation * 0 . 0 ) ) ) ) ;
rank: 510
score: 99.27232947716347
patch: ( $NUMBER$ . 0 ) ) ) : 0 . $NUMBER$ ;
rank: 510
score: 99.21437581380208
patch: ( * ( $NUMBER$ . 0 ) ) ) ) ;
rank: 511
score: 99.426708984375
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . double CaMeL Value ( ) ) ;
rank: 511
score: 99.41045783547794
patch: $NUMBER$ . 0 ) * ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ;
rank: 511
score: 99.33137512207031
patch: ( double ) ( standard CaMeL Deviation * 0 . 0 ) ) ) ;
rank: 511
score: 99.31534576416016
patch: ( Integer . Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 511
score: 99.2809589092548
patch: ( standard CaMeL Deviation >= 0 . 0 ) ) ) ;
rank: 511
score: 99.27172088623047
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ? 1 ;
rank: 512
score: 99.42623901367188
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + ( 0 . 0 ) ;
rank: 512
score: 99.33741861979166
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) - 1 ;
rank: 512
score: 99.31489114200367
patch: ( standard CaMeL Deviation * 0 . 0 ) * 0 . 0 ) ) ;
rank: 512
score: 99.28070427389706
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . public ) ) ) ;
rank: 512
score: 99.27153015136719
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ? 0 . 0
rank: 512
score: 99.2130355834961
patch: ( standard CaMeL Deviation * Math . <= $NUMBER$ . 0 ) ) ) ;
rank: 513
score: 99.41737196180556
patch: 0 . standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 513
score: 99.33733053768383
patch: $NUMBER$ . 0 * ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ;
rank: 513
score: 99.31429290771484
patch: 32 . 0 ) * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 513
score: 99.2804314108456
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ == 0 . 0 ) )
rank: 513
score: 99.27122497558594
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) + 0 . $NUMBER$ ;
rank: 513
score: 99.20976911272321
patch: ( x - sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 514
score: 99.41707611083984
patch: ( ( * standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ) ;
rank: 514
score: 99.40975791529605
patch: ( standard CaMeL Deviation - Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; ;
rank: 514
score: 99.33622472426471
patch: ( standard CaMeL Deviation / $NUMBER$ . 0 ) ) ) / $NUMBER$ . 0 ;
rank: 514
score: 99.33091735839844
patch: Math . sqrt ( $NUMBER$ . 0 | $NUMBER$ . 0 ) ) ) ;
rank: 514
score: 99.31327550551471
patch: ( ( 0 . 0 ) * ( $NUMBER$ . 0 ) ) ) ) ;
rank: 515
score: 99.42581176757812
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ? 0 . 0 ;
rank: 515
score: 99.41669060202206
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 , $NUMBER$ . 0 ) ) ) ;
rank: 515
score: 99.40919896175987
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . $NUMBER$ . 0 ) ) ) ;
rank: 515
score: 99.33570772058823
patch: ( double ) standard CaMeL Deviation * Math . sqrt ( $STRING$ ) ) ) ;
rank: 515
score: 99.2799933938419
patch: sqrt ( standard CaMeL Deviation * sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 515
score: 99.270263671875
patch: ( $NUMBER$ . 0 ) ) * Math . sqrt ( $NUMBER$ ) ) ;
rank: 515
score: 99.20773315429688
patch: ( this . erf $NUMBER$ . 0 ) ) ) ;
rank: 516
score: 99.42577514648437
patch: ( standard CaMeL Deviation >= Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ;
rank: 516
score: 99.41658528645833
patch: ( Math . sqrt ( $NUMBER$ . 0 . 0 . 0 ) ) ) ) ;
rank: 516
score: 99.33529663085938
patch: ( double ) standard CaMeL Deviation * $NUMBER$ ) ) ;
rank: 516
score: 99.3297348022461
patch: Math . sqrt ( $NUMBER$ . 0 ) ) - 1 . 0 ) ;
rank: 516
score: 99.31215533088235
patch: ( ( ( standard CaMeL Deviation - 0 . 0 ) ) ) ) ) ;
rank: 516
score: 99.27802590762867
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . length ) ) ) ;
rank: 516
score: 99.2700946514423
patch: * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 516
score: 99.20760904947916
patch: ( ) ) / Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 517
score: 99.42572312127976
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) false ) ;
rank: 517
score: 99.33525534237133
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) / standard CaMeL Deviation ;
rank: 517
score: 99.31205531529018
patch: ( ( $NUMBER$ . 0 ) 1 . 0 ) ) ) ;
rank: 518
score: 99.43045204564145
patch: ( ( $NUMBER$ . 0 ) / ( ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 518
score: 99.41604275173611
patch: ( Math . round ( $NUMBER$ . 0 * $NUMBER$ . 0 ) ) ) ) ;
rank: 518
score: 99.33470052083334
patch: $NUMBER$ . 0 * standard CaMeL Deviation * $NUMBER$ . 0 ) ) ;
rank: 518
score: 99.27780151367188
patch: ( $NUMBER$ + Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 518
score: 99.26891217912946
patch: ( $NUMBER$ . 0 ) ) ) : 0 . $NUMBER$ ) ;
rank: 518
score: 99.20645345052084
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; ;
rank: 519
score: 99.4303042763158
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) != 0
rank: 519
score: 99.42566935221355
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + 0 . $NUMBER$ ) ;
rank: 519
score: 99.4157485961914
patch: ( Math . sqrt ( $NUMBER$ . 0 ) . 1 ) ) ) ;
rank: 519
score: 99.40800206801471
patch: <= standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 519
score: 99.33416748046875
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) + ;
rank: 519
score: 99.32938639322917
patch: ( long ) Math . max ( $NUMBER$ . 0 ) ) ) ;
rank: 519
score: 99.311474609375
patch: ( standard CaMeL Deviation * this . $NUMBER$ . 0 ) ) ) ;
rank: 519
score: 99.27771714154412
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ + ) ) ) ) ;
rank: 519
score: 99.26789855957031
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) * x ) ;
rank: 520
score: 99.42876519097223
patch: ( 1 . 0 ) / Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 520
score: 99.33275553385417
patch: ( $NUMBER$ . 0 * standard CaMeL Deviation * $NUMBER$ ) ) ) ;
rank: 520
score: 99.329345703125
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ; * /
rank: 520
score: 99.31134796142578
patch: ( * ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ) ;
rank: 520
score: 99.2677001953125
patch: ( Math . sqrt ( $NUMBER$ >> 0 . 0 ) ) ) ) ;
rank: 521
score: 99.33255767822266
patch: ( double ) standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ;
rank: 521
score: 99.32920927159927
patch: ( $NUMBER$ . 0 ? $NUMBER$ . 0 : $NUMBER$ . 0 ) ) ) ;
rank: 521
score: 99.31110696231617
patch: ( standard CaMeL Deviation * 0 . 0 | $NUMBER$ . 0 ) ) ) ;
rank: 521
score: 99.27695599724265
patch: ( $NUMBER$ == 0 . 0 ) ) - ( $NUMBER$ . 0 ) ) ;
rank: 521
score: 99.26769256591797
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) - x ) ;
rank: 521
score: 99.20520782470703
patch: ( * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 522
score: 99.41347249348958
patch: ( Math . sqrt ( $NUMBER$ . 0 + $NUMBER$ . $NUMBER$ ) ) ) ) ;
rank: 522
score: 99.33190104166667
patch: ( double ) ( double ) ( $NUMBER$ . 0 ) ) ) ;
rank: 522
score: 99.32897135416667
patch: ( int ) Math . abs ( $NUMBER$ . 0 ) ) ) ;
rank: 522
score: 99.27656555175781
patch: ( standard CaMeL Deviation * ( long ) $NUMBER$ . 0 ) ) ) ;
rank: 522
score: 99.26766531808036
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ?
rank: 523
score: 99.4248555501302
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + 0 . 0 . 0 ;
rank: 523
score: 99.33186340332031
patch: $NUMBER$ . 0 * Math . max ( $NUMBER$ . 0 ) ) ) ;
rank: 523
score: 99.32869720458984
patch: ( Double * Math . sqrt ( 0 . 0 ) ) ) ) ;
rank: 523
score: 99.31066131591797
patch: ( ( Double . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 523
score: 99.27653234145221
patch: ( standard CaMeL Deviation * ( $NUMBER$ + $NUMBER$ . 0 ) ) ) ) ;
rank: 524
score: 99.42482591711956
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ) ) ;
rank: 524
score: 99.33132498604911
patch: ( standard CaMeL Deviation * double ) standard CaMeL Deviation ) ) ;
rank: 524
score: 99.3103386374081
patch: ( ( ( standard CaMeL Deviation - $NUMBER$ . 0 ) ) ) ) ) ;
rank: 524
score: 99.26500701904297
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) - $NUMBER$ ;
rank: 524
score: 99.20289611816406
patch: ( Math . sqrt ( $NUMBER$ == $NUMBER$ . 0 ) ) ) ) ;
rank: 525
score: 99.4256083170573
patch: ( ( $NUMBER$ . 0 ) 0 ) ) ) ;
rank: 525
score: 99.42472534179687
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) , 0 ) ) ;
rank: 525
score: 99.41307915581598
patch: ( Math . abs ( $NUMBER$ . 0 + $NUMBER$ . 0 ) ) ) ) ;
rank: 525
score: 99.33074481670673
patch: ( standard CaMeL Deviation * 1 . $NUMBER$ ) ) ) ;
rank: 525
score: 99.32840983072917
patch: ( standard CaMeL Deviation < Math . sqrt ( $NUMBER$ . $NUMBER$ ) ) ) ) ;
rank: 525
score: 99.3101806640625
patch: ( standard CaMeL Deviation > 0 . 0 ) - $NUMBER$ . 0 ) ) ;
rank: 525
score: 99.20271809895833
patch: ( $NUMBER$ . 0 ) / ( 0 . 0 ) ) ) ;
rank: 526
score: 99.4253288717831
patch: Erf . erf ( ( x - mean ) / mean ) ) ) ;
rank: 526
score: 99.4061215049342
patch: ( double ) standard CaMeL Deviation * Math . sqrt ( $STRING$ . 0 ) ) ) ;
rank: 526
score: 99.32984270368304
patch: Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 526
score: 99.31015450613839
patch: ( ( $NUMBER$ . 0 ) $NUMBER$ . 0 ) ) ) ;
rank: 526
score: 99.27571375229779
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ <= ) ) ) ) ;
rank: 526
score: 99.26309407552084
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) 0 ) ;
rank: 527
score: 99.32768249511719
patch: ( standard CaMeL Deviation * ( double ) standard CaMeL Deviation ) ) ) ;
rank: 527
score: 99.32731628417969
patch: 0 . 0 + Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 527
score: 99.30950568704044
patch: ( standard CaMeL Deviation * Math . sqrt - 0 . 0 ) ) ) ;
rank: 527
score: 99.2618408203125
patch: ( $NUMBER$ << Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 527
score: 99.19971720377605
patch: ( $NUMBER$ . 0 ) . ( ) ) ) ;
rank: 528
score: 99.40440538194444
patch: m . standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 528
score: 99.2613296508789
patch: ( Math . sqrt ( $NUMBER$ | $NUMBER$ . 0 ) ) ) ) ;
rank: 528
score: 99.1990966796875
patch: ( floor * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 529
score: 99.42404656661184
patch: Erf . erf ( ( ( x - mean ) / mean ) ) ) ) ;
rank: 529
score: 99.41228170955883
patch: 0 . 0 ) * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 529
score: 99.4035888671875
patch: $NUMBER$ . 0 ) + standard CaMeL Deviation * $NUMBER$ . 0 ) ;
rank: 529
score: 99.3271484375
patch: standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ? standard CaMeL Deviation ;
rank: 529
score: 99.32614135742188
patch: ( standard CaMeL Deviation $NUMBER$ . 0 ) ) ) ;
rank: 529
score: 99.30902862548828
patch: ( ( ( 0 . 0 ) 1 . 0 ) ) ) ) ;
rank: 529
score: 99.26128387451172
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ? 0 . $NUMBER$
rank: 530
score: 99.40279134114583
patch: d . standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 530
score: 99.32631548713235
patch: ( double ) Math . sqrt ( $NUMBER$ . 0 ( ) ) ) ) ;
rank: 530
score: 99.32445526123047
patch: ( double ) Math . sqrt ( $NUMBER$ . 0 ) ) ) + ;
rank: 530
score: 99.30874454273896
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) , 0 . 0 ) ;
rank: 530
score: 99.2738037109375
patch: ( standard CaMeL Deviation * 0 . 1 ) ) ) ;
rank: 530
score: 99.26083170572916
patch: ( $NUMBER$ . 0 ) ) ) : ( $NUMBER$ . 0 ) ;
rank: 531
score: 99.42421361019737
patch: ( 1 . 0 + Erf . erf ( $NUMBER$ . 0 ) ) ) ) ;
rank: 531
score: 99.41093893612133
patch: ( standard CaMeL Deviation * Math . sqrt / $NUMBER$ . 0 ) ) ) ;
rank: 531
score: 99.40218313116776
patch: ( float ) standard CaMeL Deviation / Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 531
score: 99.32602163461539
patch: ( ( $NUMBER$ . 0 . 0 ) ) ) ) ;
rank: 531
score: 99.32393646240234
patch: 1 . 0 ) ) * Math . sqrt ( $NUMBER$ . 0 ) ;
rank: 531
score: 99.30869427849265
patch: ( standard CaMeL Deviation * Math . sqrt ( 0 . ) ) ) ) ;
rank: 531
score: 99.27296447753906
patch: sqrt ( $NUMBER$ . 0 ) ) / ( $NUMBER$ . 0 ) ) ;
rank: 531
score: 99.1976806640625
patch: ( throws Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 532
score: 99.42413330078125
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) * ( standard CaMeL Deviation ) ) ;
rank: 532
score: 99.41063735064338
patch: ( $NUMBER$ . 0 ? $NUMBER$ . 0 : 1 . 0 ) ) ) ;
rank: 532
score: 99.3260009765625
patch: ( long ) Math . min ( $NUMBER$ . 0 ) ) ) ;
rank: 532
score: 99.30839320591518
patch: ( standard CaMeL Deviation * - 0 . 0 ) ) ) ;
rank: 532
score: 99.26043701171875
patch: ( $NUMBER$ . 0 ) ) ) . cumulative CaMeL Probability ( 0 ) ;
rank: 533
score: 99.42406616210937
patch: ( standard CaMeL Deviation , Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ;
rank: 533
score: 99.32024739583333
patch: $NUMBER$ . 0 ) ) * Math . sqrt ( $NUMBER$ . 0 ;
rank: 533
score: 99.26026153564453
patch: ( Math . sqrt ( $NUMBER$ != $NUMBER$ . 0 ) ) ) ) ;
rank: 534
score: 99.42406165081522
patch: ( Math . sqrt ( $NUMBER$ . 0 ) / Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 534
score: 99.41019933363971
patch: ( 0 . 0 ? $NUMBER$ . 0 : 0 . 0 ) ) ) ;
rank: 534
score: 99.32586669921875
patch: ( Double . abs ( $NUMBER$ . 0 ) ) ) ) ;
rank: 534
score: 99.31978062220982
patch: ( double ) standard CaMeL Deviation * double . 0 ) ) ;
rank: 534
score: 99.30641802619485
patch: ( standard CaMeL Deviation * standard CaMeL Deviation * 1 . 0 ) ) ) ;
rank: 534
score: 99.25946044921875
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) + 0 . 0 ;
rank: 535
score: 99.42396036783855
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) * Math . sqrt ( $NUMBER$ . 0 ) )
rank: 535
score: 99.41934364720395
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) . erf ( $NUMBER$ . 0 ) ;
rank: 535
score: 99.41019287109376
patch: ( ( double ) standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 535
score: 99.32505798339844
patch: Math . sqrt ( $NUMBER$ . 0 ) ) - standard CaMeL Deviation ) ;
rank: 535
score: 99.2591796875
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ ) ) ) )
rank: 536
score: 99.4238525390625
patch: ( standard CaMeL Deviation * Math . Integer . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 536
score: 99.40971544053819
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 + standard CaMeL Deviation ;
rank: 536
score: 99.3997802734375
patch: ( double ) ( standard CaMeL Deviation * Math . sqrt $NUMBER$ . 0 ) ) ) ;
rank: 536
score: 99.3249267578125
patch: ( ( 0 . 0 * 0 . 0 ) ) ) ) ;
rank: 536
score: 99.31838754507211
patch: ( $NUMBER$ . 0 / $NUMBER$ . 0 ) ) ) ;
rank: 536
score: 99.3056640625
patch: ( ( standard CaMeL Deviation * Math . sqrt $NUMBER$ ) ) ) ) ;
rank: 536
score: 99.25890299479167
patch: ( $NUMBER$ . 0 ) ) || ( $NUMBER$ . 0 ) ) ;
rank: 537
score: 99.4236083984375
patch: ( standard CaMeL Deviation * this . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ;
rank: 537
score: 99.41825358072917
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 0 ) ) ) )
rank: 537
score: 99.32481474034927
patch: ( double ) Math . sqrt ( $NUMBER$ . 1 . 0 ) ) ) ;
rank: 537
score: 99.31783040364583
patch: $NUMBER$ . 0 ) * standard CaMeL Deviation * $NUMBER$ . 0 ) ;
rank: 537
score: 99.264697265625
patch: ( standard CaMeL Deviation * Math < 0 . 0 ) ) ) ;
rank: 537
score: 99.25795491536458
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) )
rank: 538
score: 99.32467651367188
patch: standard CaMeL Deviation * Math . sqrt ( standard CaMeL Deviation ) ) ) ;
rank: 538
score: 99.31676483154297
patch: ( standard CaMeL Deviation * Math . max ( $NUMBER$ ) ) ) ) ;
rank: 538
score: 99.30396379743304
patch: ( * standard CaMeL Deviation * 0 . 0 ) ) ) ;
rank: 538
score: 99.2568115234375
patch: ( - Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 539
score: 99.42318725585938
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) , null ) ) ;
rank: 539
score: 99.39799669053819
patch: ( standard CaMeL Deviation - Math . min ( $NUMBER$ . 0 ) ) ) ) ;
rank: 539
score: 99.31647491455078
patch: ( standard CaMeL Deviation * 1 . 0 ) ) ) * / ) ;
rank: 539
score: 99.30393353630515
patch: ( standard CaMeL Deviation * Math . sqrt != $NUMBER$ . 0 ) ) ) ;
rank: 539
score: 99.25655924479166
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) - $NUMBER$
rank: 540
score: 99.407958984375
patch: ( standard CaMeL Deviation > Math . sqrt ( $NUMBER$ . 0 ] ) ) ) ;
rank: 540
score: 99.3162353515625
patch: ( double ) standard CaMeL Deviation * $NUMBER$ . 0 ) ) * ;
rank: 540
score: 99.26261901855469
patch: ( standard CaMeL Deviation * ( float ) $NUMBER$ . 0 ) ) ) ;
rank: 540
score: 99.18656921386719
patch: ( standard CaMeL Deviation * Math . sqrt 1 . 0 ) ) ) ;
rank: 541
score: 99.4230724516369
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . return $NUMBER$ ;
rank: 541
score: 99.41350640190973
patch: ( standard CaMeL Deviation ) / Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 541
score: 99.40770806206598
patch: ( standard CaMeL Deviation < Math . abs ( $NUMBER$ . 0 ) ) ) ) ;
rank: 541
score: 99.32408040364584
patch: ( ( ( 0 . 0 . 0 ) ) ) ) ) ;
rank: 541
score: 99.31256103515625
patch: ( standard CaMeL Deviation * Math . sqrt ( 1 ) ) ) ) ;
rank: 541
score: 99.30378723144531
patch: ( Double . Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 541
score: 99.18638509114584
patch: ( this . standard CaMeL Deviation * 0 . 0 ) ) ) ;
rank: 542
score: 99.42302856445312
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 * x ) ) ) ) ;
rank: 542
score: 99.32347869873047
patch: ( double ) Math . sqrt ( $NUMBER$ . 0 ) ) ) ; ;
rank: 542
score: 99.31224646935097
patch: ( $NUMBER$ . 0 ) ) ) / $NUMBER$ . 0 ;
rank: 542
score: 99.25332845052084
patch: ( 0 . 0 ) ) / ( $NUMBER$ . 0 ) ) ;
rank: 542
score: 99.18589782714844
patch: ( $NUMBER$ . standard CaMeL Deviation ( $NUMBER$ . 0 ) ) ) ) ;
rank: 543
score: 99.42279052734375
patch: ( standard CaMeL Deviation != null ) + Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 543
score: 99.41300142728366
patch: ( $NUMBER$ . 0 ) ) ) . erf ( ) ;
rank: 543
score: 99.39647081163194
patch: scale * standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 543
score: 99.32320462740384
patch: ( ( 0 . 0 . 1 ) ) ) ) ;
rank: 543
score: 99.31224060058594
patch: $NUMBER$ . $NUMBER$ ) ) * Math . sqrt ( $NUMBER$ . 0 ) ;
rank: 543
score: 99.26210715553977
patch: ( this . erf ( ) ) ) ) ;
rank: 543
score: 99.25262044270833
patch: ( Math . sqrt ( 1 . 0 ) ) ) ) ) ;
rank: 544
score: 99.4123599403783
patch: Erf . erf ( ( x - mean ) / $NUMBER$ . 0 ) ) ) ;
rank: 544
score: 99.39547390407986
patch: s . standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 544
score: 99.32309299045139
patch: ( ( double ) Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 544
score: 99.26179504394531
patch: ( standard CaMeL Deviation * Math . sqrt ( BYTES ) ) ) ) ;
rank: 545
score: 99.42258911132812
patch: ( ( standard CaMeL Deviation * Math . ceil ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 545
score: 99.40639919704861
patch: ( $NUMBER$ . 0 ] * standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ;
rank: 545
score: 99.322998046875
patch: ( standard CaMeL Deviation . 0 . 0 + $NUMBER$ . 0 ) ) ) ;
rank: 545
score: 99.31084333147321
patch: ( standard CaMeL Deviation * 1 . 0 ) ) ) * ;
rank: 545
score: 99.25108924278847
patch: ( $NUMBER$ . 0 ) ) ) + 0 . $NUMBER$ ;
rank: 546
score: 99.42251188858695
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + - 0 . $NUMBER$ ;
rank: 546
score: 99.32283782958984
patch: ( x * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 546
score: 99.26012420654297
patch: ( standard CaMeL Deviation * ( $NUMBER$ . 0 ) ) ) ) ; }
rank: 546
score: 99.25091552734375
patch: ( Math . sqrt ( $NUMBER$ % $NUMBER$ . 0 ) ) ) ) ;
rank: 546
score: 99.18189239501953
patch: ( * ( standard CaMeL Deviation * standard CaMeL Deviation ) ) ) ) ;
rank: 547
score: 99.40572102864583
patch: ( $NUMBER$ . 0 * Math . min ( $NUMBER$ . 0 ) ) ) ) ;
rank: 547
score: 99.32258605957031
patch: ( - double ) Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 547
score: 99.30271911621094
patch: Double . 0 ) * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 547
score: 99.25982666015625
patch: ( standard CaMeL Deviation * erf ( $NUMBER$ . 0 ) ) ) ) ;
rank: 547
score: 99.25079752604167
patch: standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) )
rank: 548
score: 99.32233428955078
patch: ( Double * Math . sqrt ( 1 . 0 ) ) ) ) ;
rank: 548
score: 99.30933430989583
patch: ( standard CaMeL Deviation * 1 . 0 ) ) ) + 1 ;
rank: 548
score: 99.25836651141827
patch: ( this . erf ( ( ) ) ) ) ) ;
rank: 548
score: 99.25041198730469
patch: ( Math . min ( $NUMBER$ , $NUMBER$ . 0 ) ) ) ) ;
rank: 548
score: 99.18025716145833
patch: ( this . erf ( ) . erf ( ) ) ) ) ;
rank: 549
score: 99.40861430921052
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) [ 0
rank: 549
score: 99.32201276506696
patch: ( standard CaMeL Deviation * - 1 . 0 ) ) ) ;
rank: 549
score: 99.30258358226104
patch: ( ( ( 0 . 0 ) * 0 . 0 ) ) ) ) ;
rank: 549
score: 99.2503890991211
patch: ( Math . max ( $NUMBER$ , $NUMBER$ . 0 ) ) ) ) ;
rank: 549
score: 99.1796875
patch: ( x ) ) / Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 550
score: 99.42201450892857
patch: ( this . standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ; }
rank: 550
score: 99.40463595920139
patch: ( $NUMBER$ . 0 + standard CaMeL Deviation ( $NUMBER$ . 0 ) ) ) ) ;
rank: 550
score: 99.39248996310764
patch: ( Double . sqrt ( $NUMBER$ . 0 + $NUMBER$ . 0 ) ) ) ) ;
rank: 550
score: 99.32184709821429
patch: Math . sqrt ( standard CaMeL Deviation . 0 ) ) ) ;
rank: 550
score: 99.30829729352679
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ; ;
rank: 550
score: 99.25751953125
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) . ) ) ;
rank: 550
score: 99.2501449584961
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) * 1 ;
rank: 551
score: 99.39204676011029
patch: ( standard CaMeL Deviation * Math . abs ( $NUMBER$ . 0 ) ) ) ;
rank: 551
score: 99.3078857421875
patch: ( double ) ) Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 551
score: 99.30206298828125
patch: ( ( * standard CaMeL Deviation * 0 . 0 ) ) ) ) ;
rank: 551
score: 99.249267578125
patch: ( $NUMBER$ . 0 + sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 552
score: 99.40425618489583
patch: ( standard CaMeL Deviation ( $NUMBER$ . 0 * $NUMBER$ . 0 ) ) ) ) ;
rank: 552
score: 99.39191436767578
patch: $NUMBER$ . 0 ) , Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 552
score: 99.32101440429688
patch: ( ( ( 0 . 0 ) 0 . 0 ) ) ) ) ;
rank: 552
score: 99.30699811662946
patch: ( double ) $NUMBER$ . 0 ) ) * $NUMBER$ . 0 ;
rank: 552
score: 99.24922943115234
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) , $NUMBER$ ) ) ;
rank: 553
score: 99.42156372070312
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) * false ) ;
rank: 553
score: 99.40407307942708
patch: * Math . sqrt ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 553
score: 99.30632781982422
patch: $NUMBER$ . $NUMBER$ * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 553
score: 99.3017937155331
patch: ( ( - Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 553
score: 99.24840494791667
patch: ( Math . sqrt ( $NUMBER$ . 0 ) $NUMBER$ ) ) ) ;
rank: 554
score: 99.42142917798913
patch: ( ( standard CaMeL Deviation * ( Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ) ;
rank: 554
score: 99.39026596966912
patch: $NUMBER$ . 0 ) , ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ;
rank: 554
score: 99.3192889873798
patch: Math . sqrt ( $NUMBER$ . 0 1 ) ) ) ;
rank: 554
score: 99.3060531616211
patch: $NUMBER$ . 0 ) ) + Double . sqrt ( $NUMBER$ . 0 ) ;
rank: 554
score: 99.3014628092448
patch: ( ( * $NUMBER$ . 0 ) ) ) ) ;
rank: 554
score: 99.24764251708984
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) , $NUMBER$ ) ;
rank: 555
score: 99.42123046875
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ , Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 555
score: 99.40345764160156
patch: ( int ) Math . sqrt ( $NUMBER$ . 0 ] ) ) ) ;
rank: 555
score: 99.38787163628473
patch: $NUMBER$ . 0 ) * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ;
rank: 555
score: 99.31903435202206
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ( $NUMBER$ . 0 ) ) ;
rank: 555
score: 99.30123901367188
patch: ( ( ( 0 . 0 ) $NUMBER$ . 0 ) ) ) ) ;
rank: 555
score: 99.25333404541016
patch: ( standard CaMeL Deviation * Math . < $NUMBER$ . 0 ) ) ) ;
rank: 555
score: 99.1738750751202
patch: ( ( $NUMBER$ . 0 ) . 0 ) ) ) ;
rank: 556
score: 99.4211956521739
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ] ) ) ) ) ) ;
rank: 556
score: 99.40387321920956
patch: Erf . erf ( ( ( x - mean ) ) ) ) ) ;
rank: 556
score: 99.31852641858552
patch: ( double ) Math . sqrt ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 556
score: 99.30110437729779
patch: ( ( double * standard CaMeL Deviation * 0 . 0 ) ) ) ) ;
rank: 556
score: 99.25285200639205
patch: ( standard CaMeL Deviation * mean ) ) ) ;
rank: 557
score: 99.421044921875
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) + ( standard CaMeL Deviation ;
rank: 557
score: 99.3023681640625
patch: ( double ) standard CaMeL Deviation * Math . sqrt ( ) ) ) ;
rank: 557
score: 99.2999038696289
patch: ( standard CaMeL Deviation ? Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 557
score: 99.25285121372768
patch: ( standard CaMeL Deviation * Erf . 0 ) ) ) ;
rank: 557
score: 99.17280578613281
patch: ( standard CaMeL Deviation * ( - standard CaMeL Deviation ) ) ) ) ;
rank: 558
score: 99.42099609375
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) - 0 . $NUMBER$ ) ;
rank: 558
score: 99.4019775390625
patch: standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) . length ;
rank: 558
score: 99.3179180438702
patch: ( 0 . 0 + $NUMBER$ . 0 ) ) ) ;
rank: 558
score: 99.30185546875
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 / $NUMBER$ ) ) ) ;
rank: 558
score: 99.25218200683594
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ == 0 . 0 )
rank: 558
score: 99.2432861328125
patch: ( Math . sqrt ( short ) $NUMBER$ . 0 ) ) ) ;
rank: 558
score: 99.17247772216797
patch: ( x / Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 559
score: 99.4207255045573
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) + $NUMBER$ . 0 ) ) ) ;
rank: 559
score: 99.40263536241319
patch: ( ( double ) Math . sqrt ( $NUMBER$ . 0 ] ) ) ) ) ;
rank: 559
score: 99.38574936810662
patch: ( standard CaMeL Deviation - standard CaMeL Deviation - standard CaMeL Deviation ) ) ) ;
rank: 559
score: 99.3177490234375
patch: 0 . 0 || Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 559
score: 99.30176544189453
patch: ( standard CaMeL Deviation * / ( $NUMBER$ . 0 ) ) ) ) ;
rank: 559
score: 99.29735610064338
patch: ( standard CaMeL Deviation > 0 . 0 ) - 0 . 0 ) ) ;
rank: 559
score: 99.2422103881836
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) * 0 . 0 ;
rank: 559
score: 99.17134602864583
patch: ( ) ) / ( $NUMBER$ . 0 ) ) ;
rank: 560
score: 99.4025519875919
patch: ( standard CaMeL Deviation > 0 . 0 / $NUMBER$ . 0 ) ) ) ;
rank: 560
score: 99.39924621582031
patch: ( $NUMBER$ . 0 ) ) ) . erf ( $NUMBER$ . 0 ) ;
rank: 560
score: 99.3175277709961
patch: 0 . 0 / Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 560
score: 99.29684244791666
patch: ( standard CaMeL Deviation * 0 . 0 ) ) ) ; ) ;
rank: 560
score: 99.25093841552734
patch: ( standard CaMeL Deviation * ( this . erf ( ) ) ) ) ;
rank: 560
score: 99.24176432291667
patch: ( Math . sqrt ( $NUMBER$ != 0 . 0 ) ) ) )
rank: 561
score: 99.40218353271484
patch: 0 . 0 ) * standard CaMeL Deviation ( $NUMBER$ . 0 ) ) ;
rank: 561
score: 99.38518608940973
patch: ( double ) Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ;
rank: 561
score: 99.31747872488839
patch: 0 . Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 561
score: 99.30030059814453
patch: ( double ) standard CaMeL Deviation * $NUMBER$ . 0 . 0 ) ) ;
rank: 561
score: 99.17092895507812
patch: ( standard CaMeL Deviation * ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 562
score: 99.3171157836914
patch: ( long ) Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 562
score: 99.2996826171875
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) + $STRING$ ;
rank: 562
score: 99.295751953125
patch: ( standard CaMeL Deviation * $NUMBER$ . sqrt ( ) ) ) ) ;
rank: 562
score: 99.24917602539062
patch: ( standard CaMeL Deviation * ( * 0 . 0 ) ) ) ) ;
rank: 562
score: 99.24109649658203
patch: ( $NUMBER$ . 0 ) ) - sqrt ( $NUMBER$ . 0 ) ) ;
rank: 562
score: 99.17017618815105
patch: ( standard CaMeL Deviation 0 . 0 ) ) ) ;
rank: 563
score: 99.40177408854167
patch: ( boolean ) Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 563
score: 99.39845784505208
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) , }
rank: 563
score: 99.38447122012867
patch: $NUMBER$ . 0 ) * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 563
score: 99.317041015625
patch: ( long ) Math . sqrt ( $NUMBER$ . $NUMBER$ ) ) ) ;
rank: 563
score: 99.29922485351562
patch: ( int ) ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ;
rank: 563
score: 99.29573328354779
patch: ( ( ( $NUMBER$ . 0 * $NUMBER$ . 0 ) ) ) ) ) ;
rank: 563
score: 99.24899291992188
patch: ( standard CaMeL Deviation * Math . iterator ( $NUMBER$ ) ) ) ) ;
rank: 563
score: 99.24070387620192
patch: ( $NUMBER$ . 0 ) ) * 0 . 0 ) ;
rank: 563
score: 99.16999053955078
patch: ( mean * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 564
score: 99.42008109714673
patch: ( standard CaMeL Deviation * long ) standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 564
score: 99.40103488498264
patch: ( Math . sqrt ( $NUMBER$ . 0 + $NUMBER$ . 1 ) ) ) ) ;
rank: 564
score: 99.39839680989583
patch: standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) + $NUMBER$ ;
rank: 564
score: 99.3837890625
patch: ( double ) ( $NUMBER$ . 0 . 0 ) ) ) ;
rank: 564
score: 99.31690216064453
patch: ( value * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 564
score: 99.29902866908482
patch: ( double ) standard CaMeL Deviation * $NUMBER$ . $NUMBER$ ) ) ;
rank: 564
score: 99.29536437988281
patch: ( ( standard CaMeL Deviation ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 564
score: 99.2403076171875
patch: ( Math . sqrt ( $NUMBER$ < $NUMBER$ . 0 ) ) ) )
rank: 565
score: 99.4199282997533
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) length ) ;
rank: 565
score: 99.31643194901316
patch: ( double * standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 565
score: 99.29898071289062
patch: $NUMBER$ . 0 * Math . sqrt ( 1 . 0 ) ) ) ;
rank: 565
score: 99.24845064603366
patch: ( standard CaMeL Deviation < 0 . 0 ) ) ) ;
rank: 565
score: 99.24019681490384
patch: ( $NUMBER$ . 0 ) ) / 0 . 0 ) ;
rank: 565
score: 99.16946411132812
patch: ( Math . sqrt ( $NUMBER$ - $NUMBER$ . 0 ) ) ) ) ;
rank: 566
score: 99.4198486328125
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) * ( 1 . 0 ) ) ;
rank: 566
score: 99.40024142795139
patch: ( standard CaMeL Deviation > 0 . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 566
score: 99.39568413628473
patch: ( x - mean ) / Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 566
score: 99.38294893152573
patch: ( double ) Math . round ( $NUMBER$ . 0 . 0 ) ) ) ;
rank: 566
score: 99.2969970703125
patch: ( standard CaMeL Deviation - Math . sqrt ( $NUMBER$ ) ) ) ) ;
rank: 566
score: 99.24738311767578
patch: ( standard CaMeL Deviation * Math . sqrt ( short ) ) ) ) ;
rank: 566
score: 99.23929595947266
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) : false ;
rank: 566
score: 99.16940307617188
patch: ( Math . sqrt ( 0 . 0 ) . 0 ) ) ) ;
rank: 567
score: 99.41978963216145
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + 1 . $NUMBER$ . 0 ;
rank: 567
score: 99.39959357766544
patch: || standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 567
score: 99.38262067522321
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ;
rank: 567
score: 99.31583345853366
patch: ( ( 1 . 0 . 0 ) ) ) ) ;
rank: 567
score: 99.296875
patch: ( double ) standard CaMeL Deviation * $NUMBER$ . 0 * $NUMBER$ ) ) ;
rank: 567
score: 99.2935562133789
patch: ( float ) * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 567
score: 99.168115234375
patch: ( standard CaMeL Deviation * ( standard CaMeL Deviation ; ) ) ) ;
rank: 568
score: 99.41978759765625
patch: ( standard CaMeL Deviation * Math . float CaMeL Value ( $NUMBER$ . 0 ) ) ) ) ;
rank: 568
score: 99.39942932128906
patch: 0 . 0 ) / Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 568
score: 99.31562805175781
patch: ( Double . standard CaMeL Deviation ( $NUMBER$ . 0 ) ) ) ) ;
rank: 568
score: 99.29681865985577
patch: ( double ) ( double ) $NUMBER$ . 0 ) ) ;
rank: 568
score: 99.29327751608456
patch: ( ( standard CaMeL Deviation * this . sqrt ( ) ) ) ) ) ;
rank: 568
score: 99.24627130681819
patch: ( $NUMBER$ * 0 . 0 ) ) ) ;
rank: 568
score: 99.23858235677083
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) : $NUMBER$
rank: 568
score: 99.16803741455078
patch: ( standard CaMeL Deviation * Math . sqrt ( 0 ) ) ) ) ;
rank: 569
score: 99.39871036305146
patch: ( $NUMBER$ . 0 ? 0 . 0 : 0 . 0 ) ) ) ;
rank: 569
score: 99.38119506835938
patch: 1 . 0 ) ) + Math . sqrt ( $NUMBER$ . 0 ) ;
rank: 569
score: 99.29646519252232
patch: ( int ) standard CaMeL Deviation * $NUMBER$ . 0 ) ) ;
rank: 569
score: 99.29305013020833
patch: ( ( 0 . 0 ) * 0 . 0 ) ) ) ;
rank: 569
score: 99.16690266927084
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) , ) ;
rank: 570
score: 99.41940307617188
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) - 1 . 0 ;
rank: 570
score: 99.392822265625
patch: standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) . 0 ;
rank: 570
score: 99.37967258029514
patch: ( double ) ( standard CaMeL Deviation * $NUMBER$ . 0 . 0 ) ) ) ;
rank: 570
score: 99.31543731689453
patch: ( double ) - Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 570
score: 99.29635620117188
patch: ( standard CaMeL Deviation * Math . sqrt ( double ) ) ) ) ;
rank: 570
score: 99.24530436197917
patch: ( standard CaMeL Deviation * ( $NUMBER$ . $NUMBER$ ) ) ) ) ;
rank: 570
score: 99.23801676432292
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) )
rank: 570
score: 99.165673828125
patch: Math . sqrt ( $NUMBER$ . 0 ) . 0 ) ) ) ;
rank: 571
score: 99.4193115234375
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + erf ;
rank: 571
score: 99.39823404947917
patch: ( Math . min ( $NUMBER$ . 0 + $NUMBER$ . 0 ) ) ) ) ;
rank: 571
score: 99.37914360894098
patch: ( standard CaMeL Deviation - Math . ceil ( $NUMBER$ . 0 ) ) ) ) ;
rank: 571
score: 99.24513938210227
patch: ( $NUMBER$ * $NUMBER$ . 0 ) ) ) ;
rank: 572
score: 99.39818657769098
patch: ( Math . sqrt ( $NUMBER$ . 0 + 1 . 0 ) ) ) ) ;
rank: 572
score: 99.39118957519531
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) + $NUMBER$ . $NUMBER$ ;
rank: 572
score: 99.29483468191964
patch: ( standard CaMeL Deviation * / 1 . 0 ) ) ) ;
rank: 572
score: 99.29151204427083
patch: ( * Math . sqrt ( 0 . 0 ) ) ) ) ;
rank: 572
score: 99.2449462890625
patch: ( standard CaMeL Deviation * 0 . sqrt ( ) ) ) ) ;
rank: 572
score: 99.23775482177734
patch: ( $NUMBER$ != Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 573
score: 99.3979851217831
patch: ( standard CaMeL Deviation > 0 . 0 + $NUMBER$ . 0 ) ) ) ;
rank: 573
score: 99.39053344726562
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) . erf ( ) ;
rank: 573
score: 99.31488444010417
patch: ( long ) Math . sqrt ( $NUMBER$ . 1 ) ) ) ;
rank: 573
score: 99.29480743408203
patch: ( Double . ) Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 573
score: 99.24339294433594
patch: ( standard CaMeL Deviation * Math . sqrt ( sqrt ) ) ) ) ;
rank: 573
score: 99.23721749441964
patch: ( $NUMBER$ . 0 ) ) ) : 0 . 0 ) ;
rank: 574
score: 99.38978407118056
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) . to CaMeL String ( ) ;
rank: 574
score: 99.31484985351562
patch: Math . sqrt ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 574
score: 99.29476165771484
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) . ;
rank: 574
score: 99.29065659466912
patch: ( standard CaMeL Deviation * 0 . 0 ) ) , $NUMBER$ . 0 ) ;
rank: 574
score: 99.24327850341797
patch: ( standard CaMeL Deviation * Math . sqrt ( float ) ) ) ) ;
rank: 574
score: 99.23720005580357
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) {
rank: 575
score: 99.38962131076389
patch: ( $NUMBER$ . 0 ) ) ) + Math . sqrt ( $NUMBER$ . 0 ) ;
rank: 575
score: 99.24324253627232
patch: ( standard CaMeL Deviation * ( $NUMBER$ . 0 ) ) ) ;
rank: 575
score: 99.23715209960938
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) : $STRING$ ;
rank: 575
score: 99.15914481026786
patch: ( Erf . erf ( ( ) ) ) ) ) ;
rank: 576
score: 99.41822645399306
patch: Integer . standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 576
score: 99.39666069878473
patch: ( Math . sqrt ( $NUMBER$ . 0 : 1 . 0 ) ) ) ) ;
rank: 576
score: 99.31372884114583
patch: ( int ) Math . sqrt ( $NUMBER$ . $NUMBER$ ) ) ) ;
rank: 576
score: 99.2939224243164
patch: ( double ) Math . sqrt ( 1 . 0 ) ) ) ) ;
rank: 576
score: 99.28966567095588
patch: ( ( standard CaMeL Deviation * 0 . sqrt ( ) ) ) ) ) ;
rank: 576
score: 99.24260711669922
patch: ( this . Erf . erf ( ( ) ) ) ) ) ;
rank: 577
score: 99.41801525297619
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + ( ) ;
rank: 577
score: 99.38797336154514
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . long ) ) ) ) ;
rank: 577
score: 99.31324005126953
patch: ( $NUMBER$ . standard CaMeL Deviation ( 0 . 0 ) ) ) ) ;
rank: 577
score: 99.29363250732422
patch: $NUMBER$ . 0 ) - Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 577
score: 99.23616027832031
patch: ( Math . sqrt ( $NUMBER$ << 0 . 0 ) ) ) ) ;
rank: 577
score: 99.15472005208333
patch: ( ) ) * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 578
score: 99.41797892252605
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) - 0 . $NUMBER$ ) ;
rank: 578
score: 99.39616563585069
patch: ( Math . min ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ) ;
rank: 578
score: 99.37508816189236
patch: ( double ) ( float ) Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 578
score: 99.2356689453125
patch: ( ) * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 579
score: 99.39593146829044
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 * 0 . 0 ) ) ) ;
rank: 579
score: 99.2933349609375
patch: ( double ) standard CaMeL Deviation * $NUMBER$ . 0 ) ) * ) ;
rank: 579
score: 99.2398193359375
patch: ( x - mean ) ) / ( $NUMBER$ . 0 ) ) ;
rank: 580
score: 99.4177754720052
patch: ( standard CaMeL Deviation * Math . sqrt ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) )
rank: 580
score: 99.39543914794922
patch: ( ( double ) $NUMBER$ . 0 * $NUMBER$ . 0 ) ) ) ;
rank: 580
score: 99.37405215992646
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) * $NUMBER$ . 0 ) ;
rank: 580
score: 99.3116226196289
patch: standard CaMeL Deviation * Double . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 580
score: 99.29266357421875
patch: ( double ) Math . sqrt ( $NUMBER$ . 0 ) ) )
rank: 580
score: 99.23881392045455
patch: ( $NUMBER$ == 0 . 0 ) ) ) ;
rank: 580
score: 99.14676607572116
patch: ( standard CaMeL Deviation >> 0 . 0 ) ) ) ;
rank: 581
score: 99.39516872829861
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ? standard CaMeL Deviation ;
rank: 581
score: 99.31116536458333
patch: ( standard CaMeL Deviation [ standard CaMeL Deviation . 0 ) ) ) ;
rank: 581
score: 99.29246520996094
patch: ( double ) $NUMBER$ . 0 ) ) . double CaMeL Value ( ) ;
rank: 581
score: 99.28880092075893
patch: ( this . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 581
score: 99.23870849609375
patch: sqrt ( standard CaMeL Deviation * 0 . 0 ) ) ) ;
rank: 581
score: 99.146728515625
patch: Math . sqrt ( $NUMBER$ * $NUMBER$ . 0 ) ) ) ;
rank: 582
score: 99.41734375
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) + 0 . 0 ) ;
rank: 582
score: 99.29200744628906
patch: ( standard CaMeL Deviation * / standard CaMeL Deviation * / ) ) ) ;
rank: 582
score: 99.2378158569336
patch: ( standard CaMeL Deviation * Math . min ( $NUMBER$ ) ) ) ) ;
rank: 582
score: 99.23310546875
patch: ( $NUMBER$ . 0 ) ) . cumulative CaMeL Probability ( ) ) ;
rank: 582
score: 99.14615885416667
patch: ( standard CaMeL Deviation >> ( $NUMBER$ . 0 ) ) ) ) ;
rank: 583
score: 99.416748046875
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ++ ) ) ;
rank: 583
score: 99.3948974609375
patch: ( Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ) ;
rank: 583
score: 99.31111414292279
patch: ( standard CaMeL Deviation ( standard CaMeL Deviation ( $NUMBER$ ) ) ) ) ) ;
rank: 583
score: 99.29110514322916
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) + $NUMBER$ ;
rank: 583
score: 99.23760114397321
patch: ( standard CaMeL Deviation * 0 . 0 ) ) ) ; }
rank: 583
score: 99.23190307617188
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) - x ;
rank: 583
score: 99.14354654947917
patch: ( , Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 584
score: 99.30995279947916
patch: ( ( 1 . 0 + $NUMBER$ . 0 ) ) ) ) ;
rank: 584
score: 99.28934420072116
patch: ( standard CaMeL Deviation * / . 0 ) ) ) ;
rank: 584
score: 99.28741455078125
patch: ( ( standard CaMeL Deviation * 0 . 0 ) ) ) ) ) ;
rank: 584
score: 99.23727213541666
patch: ( $NUMBER$ . 0 ) ) / ( 1 . 0 ) ) ;
rank: 584
score: 99.14165852864583
patch: ( x - standard CaMeL Deviation * standard CaMeL Deviation ) ) ) ;
rank: 585
score: 99.41655883789062
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) + false ) ;
rank: 585
score: 99.39443969726562
patch: 0 . 0 ) ) * Math . sqrt ( $NUMBER$ . 0 ) ;
rank: 585
score: 99.37255181206598
patch: $NUMBER$ . 0 . 0 ) * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 585
score: 99.30967610677084
patch: ( int ) Math . sqrt ( $NUMBER$ . 1 ) ) ) ;
rank: 585
score: 99.28927408854166
patch: ( double ) standard CaMeL Deviation * $NUMBER$ . 0 ) ) / ;
rank: 585
score: 99.23649597167969
patch: ( standard CaMeL Deviation * Math . sqrt ( start ) ) ) ) ;
rank: 585
score: 99.1408447265625
patch: ( standard CaMeL Deviation * this . standard CaMeL Deviation ) ) ) ;
rank: 586
score: 99.41639775815217
patch: ( standard CaMeL Deviation * Math . sqrt ( sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ) ;
rank: 586
score: 99.39403618706598
patch: * standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 586
score: 99.37844509548611
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . Integer ) ) ) ) ;
rank: 586
score: 99.3724724264706
patch: $NUMBER$ . 0 ) + ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ;
rank: 586
score: 99.30866555606617
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ( 0 . 0 ) ) ;
rank: 586
score: 99.28916931152344
patch: ( float ) ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ;
rank: 586
score: 99.23067220052083
patch: ( $NUMBER$ . 0 ) ) ) : ( $NUMBER$ . $NUMBER$ ) ;
rank: 587
score: 99.30840192522321
patch: ( Double . sqrt ( 1 . 0 ) ) ) ) ;
rank: 587
score: 99.28853665865384
patch: ( 1 . 0 * standard CaMeL Deviation ) ) ) ;
rank: 587
score: 99.23406575520833
patch: ( standard CaMeL Deviation * ( this . erf ) ) ) ) ;
rank: 588
score: 99.37835015190973
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) + ( $NUMBER$ . 0 ) ;
rank: 588
score: 99.308349609375
patch: ( double ) standard CaMeL Deviation . 0 . 0 ) ) ;
rank: 588
score: 99.28850555419922
patch: $NUMBER$ . 0 * Math . min ( $NUMBER$ . 0 ) ) ) ;
rank: 588
score: 99.23375592912946
patch: ( standard CaMeL Deviation * ( - sqrt ) ) ) ) ;
rank: 588
score: 99.22991536458333
patch: ( Math . sqrt ( $NUMBER$ , $NUMBER$ . 0 ) ) ) )
rank: 589
score: 99.39244249131944
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ? $NUMBER$ . 0 ;
rank: 589
score: 99.37751770019531
patch: standard CaMeL Deviation ) / Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 589
score: 99.37128044577206
patch: >= standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 589
score: 99.30828857421875
patch: Math . sqrt ( $NUMBER$ . 0 - 1 . 0 ) ) ) ;
rank: 589
score: 99.28806849888393
patch: ( long ) standard CaMeL Deviation * $NUMBER$ . 0 ) ) ;
rank: 589
score: 99.2854736328125
patch: ( ( standard CaMeL Deviation + 0 . 0 ) ) ) ) ;
rank: 589
score: 99.22984212239584
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) / ) ;
rank: 590
score: 99.39157284007354
patch: ( standard CaMeL Deviation > $NUMBER$ . 0 + $NUMBER$ . 0 ) ) ) ;
rank: 590
score: 99.30755615234375
patch: ( double * Math . sqrt ( 1 . 0 ) ) ) ) ;
rank: 590
score: 99.28365325927734
patch: ( ( 0 . 0 ) * $NUMBER$ . 0 ) ) ) ) ;
rank: 590
score: 99.2332763671875
patch: ( standard CaMeL Deviation * standard CaMeL Deviation ) ) . 0 ) ;
rank: 591
score: 99.41584123883929
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ? ;
rank: 591
score: 99.39157284007354
patch: ( standard CaMeL Deviation > $NUMBER$ . 0 / $NUMBER$ . 0 ) ) ) ;
rank: 591
score: 99.37718200683594
patch: standard CaMeL Deviation / Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 591
score: 99.23237609863281
patch: ( standard CaMeL Deviation * Math . sqrt ( erf ) ) ) ) ;
rank: 591
score: 99.22909109933036
patch: ( Math . erf ( $NUMBER$ . 0 ) ) ) ) ;
rank: 592
score: 99.37100830078126
patch: ( float ) $NUMBER$ . 0 ) ) ;
rank: 592
score: 99.28658294677734
patch: ( double ) standard CaMeL Deviation * standard CaMeL Deviation * / ) ) ;
rank: 592
score: 99.28269958496094
patch: 0 . 0 . Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 592
score: 99.13533528645833
patch: ( ( ) . erf ( $NUMBER$ . 0 ) ) ) ) ;
rank: 593
score: 99.37601047092014
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) >
rank: 593
score: 99.30591583251953
patch: ( ( ) ) Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 593
score: 99.23117065429688
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ,
rank: 593
score: 99.22887369791667
patch: ( $NUMBER$ . 0 ) ) | ( $NUMBER$ . 0 ) ) ;
rank: 593
score: 99.1351318359375
patch: ( & Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 594
score: 99.41532817639802
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) length ) ) ) ;
rank: 594
score: 99.390869140625
patch: ( standard CaMeL Deviation * standard CaMeL Deviation + $NUMBER$ . 0 ) ) ) ;
rank: 594
score: 99.28556315104167
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) * $NUMBER$ ) ;
rank: 594
score: 99.23005676269531
patch: ( standard CaMeL Deviation * ( int ) $NUMBER$ . 0 ) ) ) ;
rank: 594
score: 99.13265555245536
patch: ( Boolean . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 595
score: 99.41525268554688
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) >> $NUMBER$ ) ;
rank: 595
score: 99.37413872612848
patch: ( x - mean ) ) ) . erf ( ( x - mean ) ) ;
rank: 595
score: 99.30547688802083
patch: ( ( $NUMBER$ . 0 + $NUMBER$ . 0 ) ) ) ) ;
rank: 595
score: 99.28541564941406
patch: $NUMBER$ . 0 * Math . round ( $NUMBER$ . 0 ) ) ) ;
rank: 595
score: 99.22769927978516
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ ] ) ) ) ;
rank: 595
score: 99.13169508713942
patch: standard CaMeL Deviation * ( $NUMBER$ . 0 ) ) ) ;
rank: 596
score: 99.37175750732422
patch: Math . sqrt ( $NUMBER$ . 0 ) , $NUMBER$ . 0 ) ) ;
rank: 596
score: 99.36851671006944
patch: $NUMBER$ . 0 ) / ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 596
score: 99.28163655598958
patch: ( standard CaMeL Deviation * 0 . ) ) ) ;
rank: 596
score: 99.22767052283653
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) ; }
rank: 596
score: 99.22530924479166
patch: ( Math . sqrt ( * $NUMBER$ . 0 ) ) ) ) ;
rank: 597
score: 99.38899993896484
patch: ( super . standard CaMeL Deviation ( $NUMBER$ . 0 ) ) ) ) ;
rank: 597
score: 99.37120903862848
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . int ) ) ) ) ;
rank: 597
score: 99.2251727764423
patch: Erf . erf ( $NUMBER$ . 0 ) ) ) ;
rank: 598
score: 99.38894473805146
patch: ( $NUMBER$ . 0 * $NUMBER$ . 0 * $NUMBER$ . 0 ) ) ) ;
rank: 598
score: 99.36962127685547
patch: ( erf * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 598
score: 99.36660587086396
patch: ( standard CaMeL Deviation - Math . sqrt ( $NUMBER$ . ) ) ) ) ;
rank: 598
score: 99.3013916015625
patch: ( ( 1 . 0 * $NUMBER$ . 0 ) ) ) ) ;
rank: 598
score: 99.28475952148438
patch: ( double ) ) * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 598
score: 99.28056989397321
patch: ( ( standard CaMeL Deviation * 0 . ) ) ) ) ;
rank: 598
score: 99.22740173339844
patch: ( this . erf ( ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 598
score: 99.2241943359375
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + }
rank: 599
score: 99.30007934570312
patch: Math . sqrt ( $NUMBER$ . 0 ) ) + $NUMBER$ . 0 ) ;
rank: 599
score: 99.28475247896634
patch: ( $NUMBER$ . 0 ) ) ) * standard CaMeL Deviation ;
rank: 599
score: 99.27999114990234
patch: ( standard CaMeL Deviation * Math . sqrt $NUMBER$ . $NUMBER$ ) ) ) ;
rank: 600
score: 99.38741629464286
patch: ( $NUMBER$ . 0 ] * $NUMBER$ . 0 ) ) ) ;
rank: 600
score: 99.30006510416666
patch: 0 . 0 ? $NUMBER$ . 0 : 0 . 0 ) ) ;
rank: 600
score: 99.28189290364584
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) * $NUMBER$ ;
rank: 600
score: 99.2799301147461
patch: ( ! double ) Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 600
score: 99.21978759765625
patch: Math . sqrt ( $NUMBER$ , $NUMBER$ . 0 ) ) ) ;
rank: 601
score: 99.4136474609375
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) {
rank: 601
score: 99.29999186197917
patch: ( standard CaMeL Deviation * 0 . 0 . $NUMBER$ ) ) ) ;
rank: 601
score: 99.28153483072917
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) / ) ;
rank: 601
score: 99.27954915364583
patch: ( ( standard CaMeL Deviation >> 0 . 0 ) ) ) ) ;
rank: 601
score: 99.22562408447266
patch: ( standard CaMeL Deviation * Math . |= $NUMBER$ . 0 ) ) ) ;
rank: 601
score: 99.21968587239583
patch: ( Math . sqrt ( $NUMBER$ . 0 ) . 0 ) ) )
rank: 602
score: 99.41355590820312
patch: ( ( standard CaMeL Deviation >= Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 602
score: 99.28052629743304
patch: ( standard CaMeL Deviation * * standard CaMeL Deviation ) ) ) ;
rank: 602
score: 99.27822265625
patch: ( double * standard CaMeL Deviation * 0 . 0 ) ) ) ;
rank: 602
score: 99.21929931640625
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) *
rank: 602
score: 99.12596842447917
patch: ( ( standard CaMeL Deviation != 0 . 0 ) ) ) ) ;
rank: 603
score: 99.41309655230978
patch: ( standard CaMeL Deviation * float ) standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 603
score: 99.35957605698529
patch: standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 0 ) ) ) ;
rank: 603
score: 99.2994893391927
patch: ( double ) ( 0 . 0 ) ) ) ;
rank: 603
score: 99.27921549479167
patch: ( double ) ( 1 . 0 ) ) ) ;
rank: 603
score: 99.27730560302734
patch: ( standard CaMeL Deviation * Math . sqrt 0 . 0 ) ) ) ;
rank: 603
score: 99.2189453125
patch: ( $NUMBER$ . 0 ) ) + ( $NUMBER$ . 0 ) ) ;
rank: 603
score: 99.12588936941964
patch: ( Void . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 604
score: 99.35916900634766
patch: Math . sqrt ( $NUMBER$ . 0 ) ) , $NUMBER$ . 0 ) ;
rank: 604
score: 99.29944661458333
patch: ( float ) Math . max ( $NUMBER$ . 0 ) ) ) ;
rank: 604
score: 99.221533203125
patch: ( $NUMBER$ . 0 ) ) / ( $NUMBER$ . $NUMBER$ ) ) ;
rank: 604
score: 99.21822415865384
patch: ( $NUMBER$ . 0 ) ) ) + 0 . 0 ;
rank: 605
score: 99.412548828125
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) && false ;
rank: 605
score: 99.3561150045956
patch: standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) , ) ;
rank: 605
score: 99.27662658691406
patch: false . 0 ) * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 605
score: 99.27632649739583
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) * ;
rank: 605
score: 99.21793619791667
patch: ( Math . sqrt ( ( $NUMBER$ . 0 ) ) ) ) )
rank: 605
score: 99.1244140625
patch: ( Math . sqrt ( $NUMBER$ . 0 ) . ) ) ) ;
rank: 606
score: 99.41246337890625
patch: ( standard CaMeL Deviation * Math . sqrt ( 1 . 1 . 0 ) ) ) ) ;
rank: 606
score: 99.27625383649554
patch: ( double ) standard CaMeL Deviation * / $NUMBER$ . ) ) ;
rank: 606
score: 99.27521158854167
patch: ( ( standard CaMeL Deviation , $NUMBER$ . 0 ) ) ) ) ;
rank: 606
score: 99.21790364583333
patch: ( Math . sqrt ( $NUMBER$ . 0 ) 1 ) ) ) ;
rank: 606
score: 99.12430826822917
patch: ( standard CaMeL Deviation * Math . standard CaMeL Deviation ) ) ) ;
rank: 607
score: 99.41243286132813
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) - x ;
rank: 607
score: 99.3572998046875
patch: ( float ) Math . sqrt ( $NUMBER$ . $NUMBER$ . 0 ) ) ) ;
rank: 607
score: 99.29812825520834
patch: ( ( 0 . 0 + 0 . 0 ) ) ) ) ;
rank: 607
score: 99.27540806361607
patch: ( double ) $NUMBER$ . 0 / $NUMBER$ . 0 ) ) ;
rank: 607
score: 99.21969839242789
patch: ( $NUMBER$ * ( $NUMBER$ . 0 ) ) ) ) ;
rank: 607
score: 99.21788736979167
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ? ;
rank: 607
score: 99.12372233072917
patch: ( ( standard CaMeL Deviation == 0 . 0 ) ) ) ) ;
rank: 608
score: 99.4124043782552
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) * ( 1 . 0 ) ) ;
rank: 608
score: 99.38259708180146
patch: ( standard CaMeL Deviation > 0 . 0 * standard CaMeL Deviation ) ) ) ;
rank: 608
score: 99.29781668526786
patch: ( standard CaMeL Deviation * double ) 0 . 0 ) ) ;
rank: 608
score: 99.27540690104166
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) / $NUMBER$ ;
rank: 608
score: 99.21966145833333
patch: ( standard CaMeL Deviation * ( $NUMBER$ . 1 ) ) ) ) ;
rank: 608
score: 99.2176025390625
patch: ( $NUMBER$ . 0 ) ) ) : ( 1 . 0 ) ;
rank: 608
score: 99.12286783854167
patch: ( ! Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 609
score: 99.38257553998162
patch: ( standard CaMeL Deviation > $NUMBER$ . 0 * standard CaMeL Deviation ) ) ) ;
rank: 609
score: 99.2975082397461
patch: Math . sqrt ( $NUMBER$ . 0 ) ) + 0 . 0 ) ;
rank: 609
score: 99.27522495814732
patch: ( double ) Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 609
score: 99.2164794921875
patch: ( standard CaMeL Deviation * 0 . 0 ) ) . 0 ) ;
rank: 609
score: 99.21640625
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ? 1
rank: 609
score: 99.12218424479167
patch: ( ( x ) / ( $NUMBER$ . 0 ) ) ) ) ;
rank: 610
score: 99.3530044555664
patch: 1 . 0 ) + Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 610
score: 99.2974853515625
patch: ( Integer . sqrt ( 1 . 0 ) ) ) ) ;
rank: 610
score: 99.27366536458334
patch: ( ( standard CaMeL Deviation * true . 0 ) ) ) ) ;
rank: 610
score: 99.21647505326705
patch: ( standard CaMeL Deviation * sqrt ) ) ) ;
rank: 610
score: 99.21632737379808
patch: ( $NUMBER$ . 0 ) ) , 0 . 0 ) ;
rank: 611
score: 99.4113057454427
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) - 0 . 0 ) ;
rank: 611
score: 99.38254681755515
patch: ( $NUMBER$ . 0 * $NUMBER$ . 0 + $NUMBER$ . 0 ) ) ) ;
rank: 611
score: 99.35282628676471
patch: ( standard CaMeL Deviation * Math . round ( $NUMBER$ . 0 ) ) ) ;
rank: 611
score: 99.33868408203125
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) + 1 . $NUMBER$ ;
rank: 611
score: 99.29666900634766
patch: Math . sqrt ( $NUMBER$ . 0 * standard CaMeL Deviation ) ) ) ;
rank: 611
score: 99.21563313802083
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) ? 0 . $NUMBER$
rank: 611
score: 99.12100923978366
patch: ( this . erf . erf ( ) ) ) ) ;
rank: 612
score: 99.29652315027573
patch: ( standard CaMeL Deviation ? Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 612
score: 99.27290852864583
patch: ( ( $NUMBER$ . 0 ) ) * $NUMBER$ . 0 ) ) ;
rank: 612
score: 99.27171223958334
patch: ( standard CaMeL Deviation * Double . MAX _ VALUE ) ) ) ;
rank: 612
score: 99.21518380301339
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) : 0 ;
rank: 612
score: 99.12062174479166
patch: ( standard CaMeL Deviation + ( standard CaMeL Deviation ) ) ) ) ;
rank: 613
score: 99.41095581054688
patch: ( standard CaMeL Deviation * Math . * ( $NUMBER$ . 0 . 0 ) ) ) ) ;
rank: 613
score: 99.38114420572917
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 . $NUMBER$ ) ) ) ;
rank: 613
score: 99.33558756510416
patch: ( ( $NUMBER$ . 0 ) ) ) ) . erf ( ) ;
rank: 613
score: 99.29583333333333
patch: ( ( 1 . 0 / $NUMBER$ . 0 ) ) ) ) ;
rank: 613
score: 99.2717056274414
patch: ( ( double * sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 613
score: 99.27121407645089
patch: $NUMBER$ * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 613
score: 99.21509728064903
patch: ( $NUMBER$ . 0 ) ) - $NUMBER$ . 0 ) ;
rank: 613
score: 99.11899820963542
patch: ( / ( $NUMBER$ . 0 ) ) ) ) ;
rank: 614
score: 99.38103889016544
patch: ( standard CaMeL Deviation - $NUMBER$ . 0 * $NUMBER$ . 0 ) ) ) ;
rank: 614
score: 99.33342742919922
patch: ( 1 . 0 ) ) ) . erf ( $NUMBER$ . 0 ) ;
rank: 614
score: 99.29425455729167
patch: ( int ) Math . round ( $NUMBER$ . 0 ) ) ) ;
rank: 614
score: 99.26853590745192
patch: ( double ) standard CaMeL Deviation * $NUMBER$ . ) ) ;
rank: 614
score: 99.2140625
patch: ( Math . sqrt ( $NUMBER$ . 0 BYTES ) ) ) ) ;
rank: 614
score: 99.21263709435097
patch: ( standard CaMeL Deviation * ( $NUMBER$ ) ) ) ) ;
rank: 614
score: 99.11774088541667
patch: ( this . erf ( ( x - mean ) ) ) ) ;
rank: 615
score: 99.41070265997024
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ] ;
rank: 615
score: 99.33217075892857
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) . 0 ;
rank: 615
score: 99.29376627604167
patch: ( float ) Math . min ( $NUMBER$ . 0 ) ) ) ;
rank: 615
score: 99.27123260498047
patch: ( ( Integer . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 615
score: 99.26736215444711
patch: ( $NUMBER$ . 0 - standard CaMeL Deviation ) ) ) ;
rank: 615
score: 99.21357073102679
patch: ( $NUMBER$ . 0 + Erf . $NUMBER$ ) ) ) ;
rank: 615
score: 99.21255696614584
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ ) ) ) ;
rank: 616
score: 99.4106953938802
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + 0 . 0 ) ;
rank: 616
score: 99.35031307444854
patch: ( double ) Math . abs ( $NUMBER$ . 0 . 0 ) ) ) ;
rank: 616
score: 99.29207356770833
patch: ( ( $NUMBER$ . 0 / $NUMBER$ . 0 ) ) ) ) ;
rank: 616
score: 99.27108764648438
patch: ( ( ( 1 . 0 ) $NUMBER$ . 0 ) ) ) ) ;
rank: 616
score: 99.26591352982955
patch: ( double ) $NUMBER$ . 0 ) ) ) ;
rank: 616
score: 99.21232096354167
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) != ) ;
rank: 617
score: 99.34940831801471
patch: $NUMBER$ . 0 , ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ;
rank: 617
score: 99.33114858774039
patch: ( 1 . 0 ) ) ) . erf ( ) ;
rank: 617
score: 99.29061686197916
patch: ( long ) Math . abs ( $NUMBER$ . 0 ) ) ) ;
rank: 617
score: 99.2657958984375
patch: ( 1 . 0 * standard CaMeL Deviation * / ) ) ) ;
rank: 617
score: 99.2118896484375
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) $STRING$ ) ;
rank: 617
score: 99.21088115985577
patch: ( $NUMBER$ . 0 ) ) . erf ( ) ) ;
rank: 618
score: 99.37958170572917
patch: ( 0 . 0 ? $NUMBER$ : 0 . 0 ) ) ) ;
rank: 618
score: 99.26427408854167
patch: ( standard CaMeL Deviation * Double . POSITIVE _ INFINITY ) ) ) ;
rank: 618
score: 99.211767578125
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ] ) ;
rank: 618
score: 99.21079915364584
patch: ( standard CaMeL Deviation * ( x - sqrt ) ) ) ) ;
rank: 618
score: 99.11640276227679
patch: ( $NUMBER$ . 0 + $NUMBER$ . 0 ) ) ) ) ;
rank: 619
score: 99.37945556640625
patch: ( ( double ) standard CaMeL Deviation * standard CaMeL Deviation ) ) ) ;
rank: 619
score: 99.3306884765625
patch: ( Math . sqrt ( $NUMBER$ . 0 0 ) ) ) ) ;
rank: 619
score: 99.29007161458334
patch: standard CaMeL Deviation * standard CaMeL Deviation - $NUMBER$ . 0 ) ) ;
rank: 619
score: 99.27018519810268
patch: ( ( ( float ) $NUMBER$ . 0 ) ) ) ) ;
rank: 619
score: 99.2642352764423
patch: ( standard CaMeL Deviation * Math . PI ) ) ) ;
rank: 619
score: 99.21131184895833
patch: ( ( standard CaMeL Deviation > 0 . 0 ) ) ) ) ;
rank: 619
score: 99.11586350661058
patch: ( this . erf ( ) . 0 ) ) ) ;
rank: 620
score: 99.40966796875
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ) ] ;
rank: 620
score: 99.37941607306985
patch: ( 0 . 0 * $NUMBER$ . 0 * $NUMBER$ . 0 ) ) ) ;
rank: 620
score: 99.28895670572916
patch: ( double ) standard CaMeL Deviation ( $NUMBER$ . 0 ) ) ) ;
rank: 620
score: 99.2697509765625
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ; ) ;
rank: 620
score: 99.26407063802084
patch: ( standard CaMeL Deviation * / $NUMBER$ . 0 ) ) ) ) ;
rank: 621
score: 99.40949096679688
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) + x ) ) ;
rank: 621
score: 99.37854721966912
patch: ( 0 . 0 ? 0 . 0 : 0 . 0 ) ) ) ;
rank: 621
score: 99.28877766927083
patch: 0 . 0 ? $NUMBER$ . 0 : $NUMBER$ . 0 ) ) ;
rank: 621
score: 99.26970672607422
patch: ( ( ( 1 . 0 ) 1 . 0 ) ) ) ) ;
rank: 621
score: 99.26295979817708
patch: ( standard CaMeL Deviation * double ) $NUMBER$ ) ) ;
rank: 621
score: 99.20987374441964
patch: ( this . erf ( 0 . 0 ) ) ) ) ;
rank: 621
score: 99.20877278645834
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ? $STRING$
rank: 621
score: 99.11319173177084
patch: Math . sqrt ( $NUMBER$ . 0 ) . ( ) ) ) ;
rank: 622
score: 99.409326171875
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) <= 0 ) ;
rank: 622
score: 99.37776692708333
patch: ( standard CaMeL Deviation * Math . MIN _ VALUE ) ) ) ;
rank: 622
score: 99.32677459716797
patch: Math . sqrt ( $NUMBER$ . 0 ) / $NUMBER$ . 0 ) ) ;
rank: 622
score: 99.28870391845703
patch: ( standard CaMeL Deviation * ( double ) 0 . 0 ) ) ) ;
rank: 622
score: 99.26249186197917
patch: ( standard CaMeL Deviation * new double [ 0 ] ) ) ) ;
rank: 622
score: 99.20928400213069
patch: ( Math . sqrt ( ) ) ) ) ;
rank: 623
score: 99.28842163085938
patch: Math . sqrt ( $NUMBER$ . 0 || $NUMBER$ . 0 ) ) ) ;
rank: 623
score: 99.26900227864583
patch: ( ( double ) 0 . 0 ) ) ) ;
rank: 623
score: 99.26219831194196
patch: ( double ) $NUMBER$ . 0 ) ) / standard CaMeL Deviation ;
rank: 623
score: 99.20782063802083
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) : ;
rank: 623
score: 99.20664876302084
patch: ( standard CaMeL Deviation * Math <= 0 . 0 ) ) ) ;
rank: 623
score: 99.1112548828125
patch: ( Math . sqrt ( 0 . 0 ) ) ) ) ) ;
rank: 624
score: 99.37685922475961
patch: ( standard CaMeL Deviation < $NUMBER$ . 0 ) ) ) ;
rank: 624
score: 99.28835623604911
patch: ( double ) Math . sqrt ( $NUMBER$ . ) ) ) ;
rank: 624
score: 99.26841735839844
patch: ( Integer * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 624
score: 99.26102120535714
patch: ( double ) standard CaMeL Deviation / $NUMBER$ . 0 ) ) ;
rank: 624
score: 99.20780726841518
patch: ( $NUMBER$ + sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 624
score: 99.20659993489583
patch: ( 1 . 0 ) ) / ( $NUMBER$ . 0 ) ) ;
rank: 624
score: 99.11089680989583
patch: ( standard CaMeL Deviation * ( false . 0 ) ) ) ) ;
rank: 625
score: 99.32503255208333
patch: ( 1 . 0 ) / ( $NUMBER$ . 0 ) ) ) ;
rank: 625
score: 99.2596435546875
patch: $NUMBER$ . 0 ) * Math . sqrt ( $NUMBER$ . 0 ) ;
rank: 625
score: 99.20728352864583
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) == ) ;
rank: 626
score: 99.40805451766305
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) : 0 . $NUMBER$ ; }
rank: 626
score: 99.26765659877232
patch: ( standard CaMeL Deviation * 0 . 0 ] ) ) ) ;
rank: 626
score: 99.25927734375
patch: $NUMBER$ . 0 ) ) * Math . sqrt ( $NUMBER$ . ) ;
rank: 626
score: 99.20659993489583
patch: ( $NUMBER$ . 0 ) ) ) + ( $NUMBER$ . 0 ) ;
rank: 626
score: 99.109716796875
patch: Math . sqrt ( ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 627
score: 99.32241641773896
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) . max ( mean ) ;
rank: 627
score: 99.28629557291667
patch: ( ( 0 . 0 << 0 . 0 ) ) ) ) ;
rank: 627
score: 99.2676010131836
patch: ( ( ( standard CaMeL Deviation * 0 . 0 ) ) ) ) ;
rank: 627
score: 99.259130859375
patch: ( standard CaMeL Deviation * 1 . 0 * $NUMBER$ ) ) ) ;
rank: 627
score: 99.206396484375
patch: ( Math . sqrt ( double ) $NUMBER$ . 0 ) ) ) ;
rank: 627
score: 99.10940987723214
patch: ( standard CaMeL Deviation * - standard CaMeL Deviation ) ) ) ;
rank: 628
score: 99.407587890625
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) + 1 . $NUMBER$ ) ;
rank: 628
score: 99.34017944335938
patch: ( float ) ( $NUMBER$ . 0 ) ) ) ;
rank: 628
score: 99.32088470458984
patch: standard CaMeL Deviation ) ) . erf ( ( x - mean ) ) ;
rank: 628
score: 99.28624616350446
patch: Math . sqrt ( $NUMBER$ . 1 . 0 ) ) ) ;
rank: 628
score: 99.26731770833334
patch: ( ( $NUMBER$ . 0 ) * standard CaMeL Deviation ) ) ) ;
rank: 628
score: 99.2567138671875
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) . ;
rank: 628
score: 99.20603590745192
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) *
rank: 628
score: 99.20210484095982
patch: ( this . Erf . erf ( ) ) ) ) ;
rank: 628
score: 99.10791015625
patch: ( standard CaMeL Deviation * standard CaMeL Deviation ) ) ) ) ;
rank: 629
score: 99.4075439453125
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 , x ) ) ) ) ;
rank: 629
score: 99.2852554321289
patch: Math . sqrt ( $NUMBER$ . 0 ) - $NUMBER$ . 0 ) ) ;
rank: 629
score: 99.26717122395833
patch: ( double * standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ;
rank: 629
score: 99.2054443359375
patch: ( Math . sqrt ( $NUMBER$ == 0 . 0 ) ) ) ;
rank: 629
score: 99.20156028053977
patch: ( standard CaMeL Deviation * x ) ) ) ;
rank: 630
score: 99.37436810661765
patch: ( 0 . 0 + standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ;
rank: 630
score: 99.33888346354166
patch: ( standard CaMeL Deviation - standard CaMeL Deviation * $NUMBER$ ) ) ) ;
rank: 630
score: 99.2558349609375
patch: ( standard CaMeL Deviation * Integer . MIN _ VALUE ) ) ) ;
rank: 630
score: 99.20530598958334
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) $NUMBER$ ) ) ;
rank: 630
score: 99.20150320870536
patch: ( Math . mean ( $NUMBER$ . 0 ) ) ) ) ;
rank: 631
score: 99.33880615234375
patch: ( Double . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ;
rank: 631
score: 99.3196159811581
patch: ( ( ( x - mean ) / 0 . 0 ) ) ) ) ;
rank: 631
score: 99.28501790364584
patch: ( float ) Math . sqrt ( $NUMBER$ . $NUMBER$ ) ) ) ;
rank: 631
score: 99.26622009277344
patch: ( standard CaMeL Deviation > 0 . 0 ) 1 . 0 ) ) ;
rank: 631
score: 99.25480143229167
patch: ( float ) standard CaMeL Deviation * / $NUMBER$ . 0 ) ) ;
rank: 631
score: 99.2046142578125
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) , ) ) ;
rank: 631
score: 99.10601806640625
patch: ( ( ) ) ) ) ;
rank: 632
score: 99.25332641601562
patch: ( double ) standard CaMeL Deviation * / ) ) ;
rank: 632
score: 99.10538736979167
patch: ( ( standard CaMeL Deviation * ( x ) ) ) ) ) ;
rank: 633
score: 99.40673217773437
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) , 1 ) ;
rank: 633
score: 99.372314453125
patch: ( 0 . 0 ] * $NUMBER$ . 0 ) ) ) ;
rank: 633
score: 99.284521484375
patch: Math . sqrt ( sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 633
score: 99.26575469970703
patch: ( $STRING$ . Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 633
score: 99.25230916341145
patch: ( double ) $NUMBER$ . 0 * $NUMBER$ ) ) ;
rank: 633
score: 99.20309244791666
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) && *
rank: 633
score: 99.1052001953125
patch: ( $NUMBER$ * standard CaMeL Deviation * standard CaMeL Deviation ) ) ) ;
rank: 634
score: 99.40669973273026
patch: ( erf standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 634
score: 99.37197696461396
patch: ( int ) Math . sqrt ( $NUMBER$ . 0 . 1 ) ) ) ;
rank: 634
score: 99.26560756138393
patch: ( ( 0 . 0 ) 1 . 0 ) ) ) ;
rank: 634
score: 99.20252278645833
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ] ) ) ;
rank: 634
score: 99.19949776785714
patch: ( standard CaMeL Deviation * Math . sqrt ( standard CaMeL Deviation *
rank: 635
score: 99.40654907226562
patch: ( standard CaMeL Deviation * Math . sqrt ( 1 . $NUMBER$ . 0 ) ) ) ) ;
rank: 635
score: 99.37156048943015
patch: ( $NUMBER$ . 0 * $NUMBER$ . 0 / $NUMBER$ . 0 ) ) ) ;
rank: 635
score: 99.28326822916667
patch: ( standard CaMeL Deviation * standard CaMeL Deviation - $NUMBER$ ) ) ) ;
rank: 635
score: 99.26531219482422
patch: ( ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ) ) ;
rank: 635
score: 99.25141252790179
patch: ( double ) $NUMBER$ . 0 ) ) + 0 . 0 ;
rank: 635
score: 99.202197265625
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) || *
rank: 635
score: 99.10443987165179
patch: ( ( ) ) / ( $NUMBER$ . 0 ) ) ) ;
rank: 636
score: 99.40609580592105
patch: ( standard CaMeL Deviation * Math . ( $NUMBER$ . 0 . 0 ) ) ) ) ;
rank: 636
score: 99.37119427849265
patch: ( ( double ) standard CaMeL Deviation ( $NUMBER$ . 0 ) ) ) ) ;
rank: 636
score: 99.33750287224265
patch: $NUMBER$ . 0 ) * / Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 636
score: 99.31723022460938
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) . start ( ) ;
rank: 636
score: 99.28257533482143
patch: ( Integer . abs ( $NUMBER$ . 0 ) ) ) ) ;
rank: 636
score: 99.26517740885417
patch: ( ( $NUMBER$ . 0 ) * 1 . 0 ) ) ) ;
rank: 636
score: 99.25122884114583
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) - 1 ) ;
rank: 636
score: 99.19728190104166
patch: ( standard CaMeL Deviation * standard CaMeL Deviation * sqrt ) ) ) ;
rank: 636
score: 99.1012714092548
patch: ( $NUMBER$ / ( $NUMBER$ . 0 ) ) ) ) ;
rank: 637
score: 99.265087890625
patch: ( ( standard CaMeL Deviation * false . 0 ) ) ) ) ;
rank: 637
score: 99.20148577008929
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) +
rank: 637
score: 99.19645182291667
patch: ( $NUMBER$ . - sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 637
score: 99.09822300502232
patch: ( ( ) . erf ( ( ) ) ) ) ) ;
rank: 638
score: 99.36955710018383
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 * 1 . 0 ) ) ) ;
rank: 638
score: 99.31633758544922
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) - $NUMBER$ . $NUMBER$ ;
rank: 638
score: 99.28168131510417
patch: ( ( 1 . 0 / 0 . 0 ) ) ) ) ;
rank: 638
score: 99.2497089092548
patch: ( double ) $NUMBER$ . 0 ) ) * / ) ;
rank: 638
score: 99.2007080078125
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) false ) ) ;
rank: 638
score: 99.09808349609375
patch: ( Erf . erf ( ) ) ) ) ;
rank: 639
score: 99.40580078125
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) . return 0 . 0 ;
rank: 639
score: 99.26470184326172
patch: ( standard CaMeL Deviation * Math . sqrt [ $NUMBER$ ] ) ) ) ;
rank: 639
score: 99.24756731305804
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ] ;
rank: 639
score: 99.19563802083333
patch: ( $NUMBER$ . $NUMBER$ ) ) / ( $NUMBER$ . 0 ) ) ;
rank: 639
score: 99.0979755108173
patch: ( ( standard CaMeL Deviation . 0 ) ) ) ) ;
rank: 640
score: 99.36830491286058
patch: ( standard CaMeL Deviation > 1 . 0 ) ) ) ;
rank: 640
score: 99.33480834960938
patch: Math . min ( $NUMBER$ . 0 , $NUMBER$ . 0 ) ) ) ;
rank: 640
score: 99.28090994698661
patch: ( Long . sqrt ( 0 . 0 ) ) ) ) ;
rank: 640
score: 99.19996744791666
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + ;
rank: 640
score: 99.09712727864583
patch: ( long ) ( $NUMBER$ . 0 ) ) ) ;
rank: 641
score: 99.40550696331522
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + 0 . ( ) ;
rank: 641
score: 99.31355503627232
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) . length ;
rank: 641
score: 99.280615234375
patch: ( standard CaMeL Deviation * 0 . 0 . 1 ) ) ) ;
rank: 641
score: 99.26358032226562
patch: ( ( $NUMBER$ . 0 ) * 0 . 0 ) ) ) ) ;
rank: 641
score: 99.24608561197917
patch: ( standard CaMeL Deviation * $NUMBER$ ) ) ) * standard CaMeL Deviation ;
rank: 641
score: 99.19965471540179
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) false )
rank: 641
score: 99.09474875710227
patch: ( x - $NUMBER$ . 0 ) ) ) ;
rank: 642
score: 99.36772604549633
patch: ( Math . sqrt ( $NUMBER$ . 0 ) $NUMBER$ . 1 ) ) ) ;
rank: 642
score: 99.31313189338235
patch: ( ( 1 . 0 ) / ( $NUMBER$ . 0 ) ) ) ) ;
rank: 642
score: 99.28047398158482
patch: Math . sqrt ( $NUMBER$ . length ( ) ) ) ) ;
rank: 642
score: 99.26339721679688
patch: ( ( float ) $NUMBER$ . 0 ) ) ) ;
rank: 642
score: 99.24578450520833
patch: ( double ) - standard CaMeL Deviation * $NUMBER$ . 0 ) ) ;
rank: 642
score: 99.19884314903847
patch: ( $NUMBER$ . ( $NUMBER$ . 0 ) ) ) ) ;
rank: 642
score: 99.0929424579327
patch: ( standard CaMeL Deviation != 1 . 0 ) ) ) ;
rank: 643
score: 99.40512566817434
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) int ) ) ;
rank: 643
score: 99.31275939941406
patch: ( standard CaMeL Deviation * Math . sqrt ( false ) ) ) ) ;
rank: 643
score: 99.26337541852679
patch: ( standard CaMeL Deviation * * 0 . 0 ) ) ) ;
rank: 643
score: 99.24551156850961
patch: ( standard CaMeL Deviation * / $NUMBER$ . ) ) ) ;
rank: 643
score: 99.19878743489583
patch: ( 0 . 0 ) ) * ( $NUMBER$ . 0 ) ) ;
rank: 643
score: 99.09189077524039
patch: ( ( $NUMBER$ * $NUMBER$ . 0 ) ) ) ) ;
rank: 644
score: 99.3672103881836
patch: ( * double ) Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 644
score: 99.31196812220982
patch: mean ) / Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 644
score: 99.27994210379464
patch: ( Math . floor ( $NUMBER$ . 0 ) ) ) ) ;
rank: 644
score: 99.26289367675781
patch: ( ( Double . sqrt ( 0 . 0 ) ) ) ) ) ;
rank: 644
score: 99.245458984375
patch: ( 1 . 0 * standard CaMeL Deviation * $NUMBER$ ) ) ) ;
rank: 644
score: 99.19873046875
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) . ) ;
rank: 644
score: 99.18865966796875
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ; }
rank: 644
score: 99.0906982421875
patch: 0 . 0 ) / ( $NUMBER$ . 0 ) ) ;
rank: 645
score: 99.4048382302989
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) || 0 . 0 ) ;
rank: 645
score: 99.27931431361607
patch: Math . sqrt ( $NUMBER$ * 0 . 0 ) ) ) ;
rank: 645
score: 99.26249186197917
patch: ( ( 0 . 0 ) - $NUMBER$ . 0 ) ) ) ;
rank: 645
score: 99.2452880859375
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 ) * $NUMBER$ ) ) ;
rank: 645
score: 99.19829915364583
patch: ( Math . sqrt ( $NUMBER$ > 0 . 0 ) ) ) )
rank: 645
score: 99.0906231219952
patch: ( standard CaMeL Deviation == $NUMBER$ . 0 ) ) ) ;
rank: 646
score: 99.27886199951172
patch: ( double ) Math . sqrt ( 0 . 0 ) ) ) ) ;
rank: 646
score: 99.24444580078125
patch: ( standard CaMeL Deviation / $NUMBER$ . 0 ) ) ) ) ;
rank: 646
score: 99.19828287760417
patch: ( Math . sqrt ( $NUMBER$ . 0 double ) ) ) ) ;
rank: 646
score: 99.1865985576923
patch: ( standard CaMeL Deviation * erf . 0 ) ) ) ;
rank: 646
score: 99.09007045200893
patch: ( * standard CaMeL Deviation * standard CaMeL Deviation ) ) ) ;
rank: 647
score: 99.36618221507354
patch: ( standard CaMeL Deviation ? $NUMBER$ . 0 : 1 . 0 ) ) ) ;
rank: 647
score: 99.32868194580078
patch: 1 . 0 ) / Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 647
score: 99.27871704101562
patch: Math . sqrt ( $NUMBER$ . 0 ) * standard CaMeL Deviation ) ) ;
rank: 647
score: 99.2442626953125
patch: ( standard CaMeL Deviation * 1 . 0 ) ) ) / ;
rank: 647
score: 99.18649727957589
patch: ( standard CaMeL Deviation * standard CaMeL Deviation $NUMBER$ ) ) ) ;
rank: 647
score: 99.0881817157452
patch: ( this . ( x - mean ) ) ) ) ;
rank: 648
score: 99.3661117553711
patch: ( float ) Math . sqrt ( $NUMBER$ . 0 ] ) ) ) ;
rank: 648
score: 99.31028837316177
patch: ( 1 . 0 ) / ( ( $NUMBER$ . 0 ) ) ) ) ;
rank: 648
score: 99.2440518465909
patch: ( standard CaMeL Deviation * / ) ) ) ;
rank: 648
score: 99.19685872395833
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) : 0 ;
rank: 649
score: 99.40399780273438
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ] ) ) ) ) ;
rank: 649
score: 99.31017348345588
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 0 ) ) )
rank: 649
score: 99.2774188701923
patch: ( 0 . 0 / $NUMBER$ . 0 ) ) ) ;
rank: 649
score: 99.24390462239583
patch: ( $NUMBER$ . 0 ) ) ) . double CaMeL Value ( ) ;
rank: 649
score: 99.19676862444196
patch: ( Math . sqrt ( $NUMBER$ == 0 . 0 ) ? $NUMBER$
rank: 649
score: 99.1839111328125
patch: ( standard CaMeL Deviation * Math >= 0 . 0 ) ) ) ;
rank: 650
score: 99.30902862548828
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) : $NUMBER$ . $NUMBER$ ;
rank: 650
score: 99.27733503069196
patch: Math . sqrt ( 0 . 0 . 0 ) ) ) ;
rank: 650
score: 99.25818634033203
patch: ( ( standard CaMeL Deviation * * $NUMBER$ . 0 ) ) ) ) ;
rank: 650
score: 99.24363606770834
patch: ( standard CaMeL Deviation * Math . POSITIVE _ INFINITY ) ) ) ;
rank: 650
score: 99.19658551897321
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) / ;
rank: 651
score: 99.32350510817308
patch: $NUMBER$ . 0 ) * ( $NUMBER$ . 0 ) ) ;
rank: 651
score: 99.27721296037946
patch: ( Float . sqrt ( 0 . 0 ) ) ) ) ;
rank: 651
score: 99.08066030649039
patch: $NUMBER$ . 0 ) / ( $NUMBER$ . 0 ) ) ;
rank: 652
score: 99.40266498766448
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) float ) ) ) ;
rank: 652
score: 99.36505485983456
patch: ( standard CaMeL Deviation ? 0 . 0 : 0 . 0 ) ) ) ;
rank: 652
score: 99.32221984863281
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ;
rank: 652
score: 99.30754089355469
patch: standard CaMeL Deviation . erf ( ( x - mean ) ) ) ) ;
rank: 652
score: 99.27711838942308
patch: ( standard CaMeL Deviation . 0 . 0 ) ) ) ;
rank: 652
score: 99.25757774939903
patch: ( standard CaMeL Deviation * Integer . 0 ) ) ) ;
rank: 652
score: 99.243359375
patch: ( Double . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 652
score: 99.19518229166667
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ? true
rank: 652
score: 99.07876352163461
patch: ( standard CaMeL Deviation , standard CaMeL Deviation ) ) ) ;
rank: 653
score: 99.40238444010417
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) + ( standard CaMeL Deviation ) ) ;
rank: 653
score: 99.36498305376838
patch: ( 0 . 0 * $NUMBER$ . 0 + $NUMBER$ . 0 ) ) ) ;
rank: 653
score: 99.27621895926339
patch: ( $NUMBER$ . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 653
score: 99.24335588727679
patch: ( standard CaMeL Deviation * float ) $NUMBER$ . 0 ) ) ;
rank: 653
score: 99.1787109375
patch: ( standard CaMeL Deviation * 0 . ( ) ) ) ) ;
rank: 653
score: 99.07840401785714
patch: ( $STRING$ . max ( $NUMBER$ . 0 ) ) ) ) ;
rank: 654
score: 99.40199346127717
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + 1 . 0 ) ;
rank: 654
score: 99.36494715073529
patch: ( 0 . 0 * $NUMBER$ . 0 / $NUMBER$ . 0 ) ) ) ;
rank: 654
score: 99.31938934326172
patch: ( double ) ( $NUMBER$ . 0 * $NUMBER$ . 0 ) ) ) ;
rank: 654
score: 99.30084228515625
patch: $NUMBER$ . 0 ) ) . erf ( ( x - mean ) ) ;
rank: 654
score: 99.276123046875
patch: ( Math . sqrt ( double ) 0 . 0 ) ) ) ;
rank: 654
score: 99.19410118689903
patch: ( $NUMBER$ . 0 ) ) + $NUMBER$ . 0 ) ;
rank: 654
score: 99.07730538504464
patch: ( Short . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 655
score: 99.31753743489584
patch: $NUMBER$ . 0 ) , standard CaMeL Deviation * $NUMBER$ . 0 ) ;
rank: 655
score: 99.30078125
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) + $NUMBER$ ;
rank: 655
score: 99.27547200520833
patch: ( ( $NUMBER$ . 0 / 0 . 0 ) ) ) ) ;
rank: 655
score: 99.256689453125
patch: ( standard CaMeL Deviation * false . 0 . 0 ) ) ) ;
rank: 655
score: 99.17584635416667
patch: ( this . erf ( ) / 0 . 0 ) ) ) ;
rank: 656
score: 99.3640998391544
patch: ( standard CaMeL Deviation * 0 . 0 , $NUMBER$ . 0 ) ) ) ;
rank: 656
score: 99.30010223388672
patch: ( 1 . 0 ) ) ) . cumulative CaMeL Probability ( x ) ;
rank: 656
score: 99.27506510416667
patch: ( Double ) Math . sqrt ( 0 . 0 ) ) ) ;
rank: 656
score: 99.25541687011719
patch: ( ( ( $NUMBER$ . 0 ) ) 0 . 0 ) ) ) ;
rank: 656
score: 99.24224446614583
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) / $NUMBER$ ) ;
rank: 656
score: 99.1756591796875
patch: ( $NUMBER$ . 0 + mean ) ) ) ;
rank: 657
score: 99.40146355879934
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ] ) ) ;
rank: 657
score: 99.36351776123047
patch: 0 . 0 ) + Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 657
score: 99.31527709960938
patch: ( double ) ( $NUMBER$ . 0 / $NUMBER$ . 0 ) ) ) ;
rank: 657
score: 99.29936981201172
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) . trim ( ) ;
rank: 657
score: 99.27494303385417
patch: ( double ) standard CaMeL Deviation ( 0 . 0 ) ) ) ;
rank: 657
score: 99.25508939302884
patch: ( ( double * $NUMBER$ . 0 ) ) ) ) ;
rank: 657
score: 99.19304547991071
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) /
rank: 657
score: 99.1756591796875
patch: ( standard CaMeL Deviation & 0 . 0 ) ) ) ;
rank: 657
score: 99.07488141741071
patch: ( $NUMBER$ . max ( $NUMBER$ . 0 ) ) ) ) ;
rank: 658
score: 99.36344640395221
patch: ( standard CaMeL Deviation ? 0 . 0 : $NUMBER$ . 0 ) ) ) ;
rank: 658
score: 99.27462768554688
patch: Math . sqrt ( $NUMBER$ . 0 ) ) * 0 . 0 ) ;
rank: 658
score: 99.2414794921875
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) * / ) ;
rank: 658
score: 99.19268329326923
patch: ( $NUMBER$ . 0 ) ) * $NUMBER$ . 0 ) ;
rank: 658
score: 99.07449776785714
patch: ( ( ) . ( $NUMBER$ . 0 ) ) ) ) ;
rank: 659
score: 99.36261345358456
patch: ( 0 . 0 ? $NUMBER$ . 0 : 1 . 0 ) ) ) ;
rank: 659
score: 99.27428327287946
patch: ( Double . sqrt ( $NUMBER$ . 1 ) ) ) ) ;
rank: 659
score: 99.24056570870536
patch: Deviation . Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 659
score: 99.191650390625
patch: ( $NUMBER$ . 0 ) ) ) + $NUMBER$ . $NUMBER$ ;
rank: 659
score: 99.17403157552083
patch: ( standard CaMeL Deviation ) ) / ( $NUMBER$ . 0 ) ) ;
rank: 659
score: 99.07425631009616
patch: ( $NUMBER$ . 0 ) . ( $NUMBER$ ) ) ) ;
rank: 660
score: 99.40015665690105
patch: ( ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ) ) ;
rank: 660
score: 99.31382649739584
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 + $NUMBER$ ) ) ) ;
rank: 660
score: 99.29820963541667
patch: ( ( $NUMBER$ . 0 ) / $NUMBER$ . 0 ) ) ) ;
rank: 660
score: 99.27420247395834
patch: ( Number ) Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 660
score: 99.25309535435268
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 ] ) ) ) ;
rank: 660
score: 99.24007975260416
patch: ( standard CaMeL Deviation * $NUMBER$ * $NUMBER$ . 0 ) ) ) ;
rank: 660
score: 99.1903564453125
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) $NUMBER$ ) ;
rank: 660
score: 99.07101876395089
patch: ( ( standard CaMeL Deviation * ( ) ) ) ) ) ;
rank: 661
score: 99.3998779296875
patch: ( Erf . erf ( $NUMBER$ . 0 ) ) ) ) ;
rank: 661
score: 99.29764556884766
patch: ( mean ) * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 661
score: 99.27419809194711
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) ; ;
rank: 661
score: 99.18941243489583
patch: ( Math . sqrt ( $NUMBER$ > $NUMBER$ . 0 ) ) ) )
rank: 661
score: 99.06930106026786
patch: Math . sqrt ( $NUMBER$ . 0 ) . $NUMBER$ ) ) ;
rank: 662
score: 99.39961574388587
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ? 0 . $NUMBER$ } ;
rank: 662
score: 99.29599609375
patch: ( ( $NUMBER$ . 0 ) / 0 . 0 ) ) ) ;
rank: 663
score: 99.29466247558594
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) . clone ( ) ;
rank: 663
score: 99.27157389322916
patch: ( ( 0 . 0 / 0 . 0 ) ) ) ) ;
rank: 663
score: 99.2386944110577
patch: ( standard CaMeL Deviation * Double . 0 ) ) ) ;
rank: 663
score: 99.18894856770834
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) *
rank: 663
score: 99.17098795572916
patch: ( standard CaMeL Deviation > ( $NUMBER$ . 0 ) ) ) ) ;
rank: 663
score: 99.06557992788461
patch: ( standard CaMeL Deviation * Math . $NUMBER$ ) ) ) ;
rank: 664
score: 99.3587646484375
patch: ( $NUMBER$ . 0 ? $NUMBER$ : 0 . 0 ) ) ) ;
rank: 664
score: 99.25141252790179
patch: ( standard CaMeL Deviation * * 1 . 0 ) ) ) ;
rank: 664
score: 99.23863932291667
patch: ( standard CaMeL Deviation * $NUMBER$ ) * $NUMBER$ . 0 ) ) ;
rank: 664
score: 99.18807547433036
patch: ( $NUMBER$ . 0 ) ) ) + 0 . $NUMBER$ ) ;
rank: 664
score: 99.06376429966518
patch: ( ( ) * ( $NUMBER$ . 0 ) ) ) ) ;
rank: 665
score: 99.35819185697116
patch: ( 1 . 0 * $NUMBER$ . 0 ) ) ) ;
rank: 665
score: 99.29064178466797
patch: ( ( $NUMBER$ . 0 ) 0 ) ) ) . erf ( ) ;
rank: 665
score: 99.271240234375
patch: ( ( 0 . 0 / $NUMBER$ . 0 ) ) ) ) ;
rank: 665
score: 99.24899291992188
patch: ( ( standard CaMeL Deviation ( 0 . 0 ) ) ) ) ) ;
rank: 665
score: 99.23827311197917
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) * Math ;
rank: 665
score: 99.1858379657452
patch: ( $NUMBER$ . 0 ) ) , $NUMBER$ . 0 ) ;
rank: 665
score: 99.16969401041666
patch: ( standard CaMeL Deviation * ( this . $NUMBER$ ) ) ) ) ;
rank: 665
score: 99.06336321149554
patch: ( ( ) . erf ( ) . 0 ) ) ) ;
rank: 666
score: 99.39918053668478
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) , - 0 . 0 ) ;
rank: 666
score: 99.29058837890625
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) . 0 ;
rank: 666
score: 99.24889264787946
patch: ( standard CaMeL Deviation * 0 . 0 . ) ) ) ;
rank: 666
score: 99.23672688802084
patch: ( double ) standard CaMeL Deviation * $NUMBER$ . 0 ) ) + ;
rank: 666
score: 99.18491432883523
patch: ( $NUMBER$ . 0 + $NUMBER$ ) ) ) ;
rank: 667
score: 99.39908500339673
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + 0 . 0 } ;
rank: 667
score: 99.35386305588942
patch: ( 0 . 0 * standard CaMeL Deviation ) ) ) ;
rank: 667
score: 99.28919982910156
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) . length ( ) ;
rank: 667
score: 99.27062174479167
patch: standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . ) ) ) ;
rank: 667
score: 99.24790261008523
patch: ( double * $NUMBER$ . 0 ) ) ) ;
rank: 667
score: 99.23638361150569
patch: ( 1 . 0 * $NUMBER$ ) ) ) ;
rank: 667
score: 99.18466622488839
patch: Math . sqrt ( $NUMBER$ != 0 . 0 ) ) ) ;
rank: 667
score: 99.16844831194196
patch: ( standard CaMeL Deviation * sqrt $NUMBER$ . 0 ) ) ) ;
rank: 667
score: 99.0586407001202
patch: ( ( x - $NUMBER$ . 0 ) ) ) ) ;
rank: 668
score: 99.39898681640625
patch: ( ( x - standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ) ;
rank: 668
score: 99.3536148071289
patch: ( / ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ) ;
rank: 668
score: 99.27042643229167
patch: ( float ) Math . sqrt ( $NUMBER$ . 1 ) ) ) ;
rank: 668
score: 99.23572649274554
patch: ( standard CaMeL Deviation * $NUMBER$ . $NUMBER$ ) ) ) ) ;
rank: 668
score: 99.18320719401042
patch: ( - ( $NUMBER$ . 0 ) ) ) ) ;
rank: 668
score: 99.16826171875
patch: ( standard CaMeL Deviation * Erf . erf ( ) ) ) ;
rank: 669
score: 99.35153198242188
patch: ( int ) $NUMBER$ . 0 ) ) ;
rank: 669
score: 99.2887954711914
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) + $NUMBER$ . 0 ;
rank: 669
score: 99.23541729266827
patch: $NUMBER$ . 0 ) * standard CaMeL Deviation * / ) ;
rank: 669
score: 99.18285260881696
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ? $NUMBER$
rank: 669
score: 99.16773274739583
patch: ( standard CaMeL Deviation * 0 . 0 + $NUMBER$ ) ) ) ;
rank: 670
score: 99.39833577473958
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) + ( $NUMBER$ . 0 ) ) ) ) ;
rank: 670
score: 99.2353046123798
patch: ( $NUMBER$ . 0 ) ) ) + 1 . 0 ;
rank: 670
score: 99.18123081752232
patch: Math . sqrt ( $NUMBER$ + $NUMBER$ . 0 ) ) ) ;
rank: 670
score: 99.16771589006696
patch: ( $NUMBER$ . - ( $NUMBER$ . 0 ) ) ) ) ;
rank: 670
score: 99.05571637834821
patch: ( ( ) ) . erf ( ( ) ) ) ) ;
rank: 671
score: 99.39712524414062
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) + 0 . 0 ) ) ;
rank: 671
score: 99.2873306274414
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) : 1 . $NUMBER$ ;
rank: 671
score: 99.24618530273438
patch: ( ( 1 . 0 ) * $NUMBER$ . 0 ) ) ) ) ;
rank: 671
score: 99.1811014811198
patch: ( $NUMBER$ . 0 ) ) ) ? 0 . $NUMBER$
rank: 671
score: 99.05553327287946
patch: ( standard CaMeL Deviation * standard CaMeL Deviation * ) ) ) ;
rank: 672
score: 99.3965480638587
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) , 0 . $NUMBER$ ) ;
rank: 672
score: 99.34962463378906
patch: ( Math . sqrt ( $NUMBER$ . 0 ) . $NUMBER$ ) ) ) ;
rank: 672
score: 99.30474853515625
patch: $NUMBER$ . 0 , Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 672
score: 99.28585815429688
patch: ( $NUMBER$ . 0 ) ) ) . erf ( $NUMBER$ . $NUMBER$ ) ;
rank: 672
score: 99.26810709635417
patch: ( ( 1 . 0 * 0 . 0 ) ) ) ) ;
rank: 672
score: 99.24603678385417
patch: ( ( $NUMBER$ . 0 ) ) - 0 . 0 ) ) ;
rank: 672
score: 99.2316143329327
patch: ( double ) standard CaMeL Deviation $NUMBER$ . 0 ) ) ;
rank: 672
score: 99.17915562220982
patch: ( Math . $NUMBER$ ( $NUMBER$ . 0 ) ) ) ) ;
rank: 672
score: 99.16648763020834
patch: ( standard CaMeL Deviation * ( $STRING$ . 0 ) ) ) ) ;
rank: 672
score: 99.05539376395089
patch: standard CaMeL Deviation * Math . sqrt ( $NUMBER$ ) ) ) ;
rank: 673
score: 99.34881998697917
patch: ( * standard CaMeL Deviation ( $NUMBER$ . 0 ) ) ) ) ;
rank: 673
score: 99.28485107421875
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) . get ( ) ;
rank: 673
score: 99.26805013020834
patch: ( ( standard CaMeL Deviation . 0 . 0 ) ) ) ) ;
rank: 673
score: 99.23028094951923
patch: ( $NUMBER$ . 0 + standard CaMeL Deviation ) ) ) ;
rank: 673
score: 99.1785888671875
patch: ( Math . sqrt ( $NUMBER$ ) ) ) ) ;
rank: 674
score: 99.396240234375
patch: -= ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 674
score: 99.2848388671875
patch: ( ( $NUMBER$ . 0 ) - standard CaMeL Deviation ) ) ) ;
rank: 674
score: 99.26790945870536
patch: ( ( 0 . 0 ) 0 . 0 ) ) ) ;
rank: 674
score: 99.23015887920673
patch: $NUMBER$ . 0 * standard CaMeL Deviation * / ) ) ;
rank: 674
score: 99.05361502511161
patch: ( $NUMBER$ . / ( $NUMBER$ . 0 ) ) ) ) ;
rank: 675
score: 99.28418731689453
patch: Math . sqrt ( $NUMBER$ . 0 ) ) / $NUMBER$ . 0 ) ;
rank: 675
score: 99.267236328125
patch: standard CaMeL Deviation * standard CaMeL Deviation * $NUMBER$ . 0 ) ) ;
rank: 675
score: 99.24566180889423
patch: ( standard CaMeL Deviation << 0 . 0 ) ) ) ;
rank: 675
score: 99.2295673076923
patch: ( $NUMBER$ . 0 ) ) ) * $NUMBER$ . 0 ;
rank: 675
score: 99.1754619891827
patch: ( $NUMBER$ . 0 | $NUMBER$ . 0 ) ) ) ;
rank: 675
score: 99.16446126302084
patch: ( standard CaMeL Deviation * Math . 1 . 0 ) ) ) ;
rank: 676
score: 99.39536539713542
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) * 0 . $NUMBER$ ) ;
rank: 676
score: 99.34687805175781
patch: 0 . 0 ) || Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 676
score: 99.30177525111607
patch: ( float ) standard CaMeL Deviation * standard CaMeL Deviation ) ) ;
rank: 676
score: 99.2838134765625
patch: ( 1 . 0 + $NUMBER$ . 0 ) ) ) ;
rank: 676
score: 99.24443359375
patch: ( ( $NUMBER$ . 0 ) ) * 0 . 0 ) ) ;
rank: 676
score: 99.22721644810268
patch: ( standard CaMeL Deviation * float ) standard CaMeL Deviation ) ) ;
rank: 676
score: 99.17519309303977
patch: ( $NUMBER$ . 0 ) ) ) : 0 ;
rank: 676
score: 99.16424967447917
patch: ( $NUMBER$ . 0 ) ) * ( 0 . 0 ) ) ;
rank: 676
score: 99.05157470703125
patch: ( $NUMBER$ . ( ) ) ) ) ;
rank: 677
score: 99.39510769314236
patch: ( Math . sqrt ( $NUMBER$ . 0 ) , 0 . 0 ) ) ) ;
rank: 677
score: 99.26608511117789
patch: ( ( 0 . 0 . $NUMBER$ ) ) ) ) ;
rank: 677
score: 99.22642164963942
patch: ( standard CaMeL Deviation + standard CaMeL Deviation ) ) ) ;
rank: 677
score: 99.0515606219952
patch: ( standard CaMeL Deviation * Math . FALSE ) ) ) ;
rank: 678
score: 99.3947117017663
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) - 0 . 0 ) ;
rank: 678
score: 99.2831298828125
patch: ( $NUMBER$ . 0 * ( $NUMBER$ . 0 ) ) ) ) ;
rank: 678
score: 99.22641225961539
patch: ( standard CaMeL Deviation * double . 0 ) ) ) ;
rank: 678
score: 99.1728515625
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) )
rank: 678
score: 99.16297258649554
patch: ( standard CaMeL Deviation * 0 . 0 ) ) ) ; ;
rank: 678
score: 99.05110990084134
patch: ( super . erf ( ( ) ) ) ) ) ;
rank: 679
score: 99.3946533203125
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 , ) ) ) ) ;
rank: 679
score: 99.34587097167969
patch: ( ( float ) standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ;
rank: 679
score: 99.28287506103516
patch: ( $NUMBER$ . 0 ) ) ) . erf ( 1 . 0 ) ;
rank: 679
score: 99.17273888221153
patch: ( Math . sqrt ( 1 . 0 ) ) ) )
rank: 679
score: 99.16212047230114
patch: ( $NUMBER$ <= 0 . 0 ) ) ) ;
rank: 679
score: 99.05034528459821
patch: ( x . equals ( $NUMBER$ . 0 ) ) ) ) ;
rank: 680
score: 99.39449055989583
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) + $NUMBER$ . 0 ) ) ) ) ;
rank: 680
score: 99.264892578125
patch: ( Comparable ) Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 680
score: 99.24095740685097
patch: ( standard CaMeL Deviation , $NUMBER$ . 0 ) ) ) ;
rank: 680
score: 99.22297807173295
patch: ( double ) $NUMBER$ . 0 ) ) * ;
rank: 680
score: 99.17155238560268
patch: ( $NUMBER$ . 0 ) ) / ( $NUMBER$ . 0 ) )
rank: 680
score: 99.16136756310097
patch: ( standard CaMeL Deviation * x - sqrt ) ) ) ;
rank: 680
score: 99.05031331380208
patch: ( byte ) ( $NUMBER$ . 0 ) ) ) ;
rank: 681
score: 99.34484100341797
patch: ( Math . sqrt ( $NUMBER$ . 0 << $NUMBER$ ) ) ) ) ;
rank: 681
score: 99.299267578125
patch: $NUMBER$ . 0 ) ) + standard CaMeL Deviation * $NUMBER$ . 0 ;
rank: 681
score: 99.26436360677083
patch: ( / Math . sqrt ( 0 . 0 ) ) ) ) ;
rank: 681
score: 99.24046223958334
patch: ( ( 0 . 0 ) ) * $NUMBER$ . 0 ) ) ;
rank: 681
score: 99.16098022460938
patch: ( standard CaMeL Deviation * 0 . 0 ) ) ;
rank: 681
score: 99.04952566964286
patch: Math . sqrt ( $NUMBER$ / $NUMBER$ . 0 ) ) ) ;
rank: 682
score: 99.39316193953805
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) , 0 . $NUMBER$ ) ; }
rank: 682
score: 99.29918561662946
patch: ( double ) $NUMBER$ . 0 * $NUMBER$ . 0 ) ) ;
rank: 682
score: 99.15987723214286
patch: ( standard CaMeL Deviation * standard CaMeL Deviation ) ) ) ; }
rank: 683
score: 99.39237253289474
patch: ( standard CaMeL Deviation * short ) Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 683
score: 99.26388346354166
patch: ( ( $NUMBER$ . 0 * 0 . 0 ) ) ) ) ;
rank: 683
score: 99.23916015625
patch: ( ( standard CaMeL Deviation * 0 . $NUMBER$ ) ) ) ) ;
rank: 683
score: 99.17086356026786
patch: ( $NUMBER$ . 0 ) ) . erf ( $NUMBER$ ) ) ;
rank: 683
score: 99.04867788461539
patch: ( x / ( $NUMBER$ . 0 ) ) ) ) ;
rank: 684
score: 99.39232381184895
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ) + $NUMBER$ ;
rank: 684
score: 99.298876953125
patch: ( float ) Math . abs ( $NUMBER$ . 0 ) ) ) ;
rank: 684
score: 99.27748325892857
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 )
rank: 684
score: 99.2386474609375
patch: ( standard CaMeL Deviation * Math . 0 . $NUMBER$ ) ) ) ;
rank: 684
score: 99.22201538085938
patch: ( standard CaMeL Deviation * / $NUMBER$ ) ) ) ;
rank: 684
score: 99.1703592936198
patch: ( $NUMBER$ . 0 ) ) ) : 0 . 0
rank: 684
score: 99.15796508789063
patch: ( standard CaMeL Deviation * ) ) ) ;
rank: 685
score: 99.39229329427083
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) + ( $NUMBER$ . 0 ) ) ;
rank: 685
score: 99.29532623291016
patch: 1 . 0 ) , Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 685
score: 99.27601623535156
patch: mean ) / ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 685
score: 99.26258850097656
patch: Math . sqrt ( $NUMBER$ . 0 ) ) * $NUMBER$ . 0 ) ;
rank: 685
score: 99.2379638671875
patch: ( standard CaMeL Deviation * false . sqrt ( ) ) ) ) ;
rank: 685
score: 99.2205810546875
patch: ( standard CaMeL Deviation - 1 ) ) ) ;
rank: 685
score: 99.16977163461539
patch: ( $NUMBER$ . 0 ) ) ) * 0 . 0 ;
rank: 686
score: 99.2751708984375
patch: ( ( $NUMBER$ . 0 ) - 0 . 0 ) ) ) ;
rank: 686
score: 99.23661295572917
patch: ( standard CaMeL Deviation * true . 0 . 0 ) ) ) ;
rank: 686
score: 99.15572684151786
patch: ( standard CaMeL Deviation * Math . sqrt ( ) ) ) ;
rank: 686
score: 99.0458984375
patch: ( standard CaMeL Deviation != $NUMBER$ . 0 ) ) ) ;
rank: 687
score: 99.39186604817708
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) , 0 . 0 ) ;
rank: 687
score: 99.27488708496094
patch: sqrt ( $NUMBER$ . 0 ) / ( $NUMBER$ . 0 ) ) ) ;
rank: 687
score: 99.23660481770834
patch: ( ( standard CaMeL Deviation , 0 . 0 ) ) ) ) ;
rank: 687
score: 99.1693448153409
patch: ( $NUMBER$ > 0 . 0 ) ) ) ;
rank: 687
score: 99.15451485770089
patch: ( standard CaMeL Deviation * Math . < $NUMBER$ ) ) ) ;
rank: 687
score: 99.04544503348214
patch: ( standard CaMeL Deviation * Math . sqrt 0 ) ) ) ;
rank: 688
score: 99.27289690290179
patch: mean ) ) . erf ( ( x - mean ) ) ;
rank: 688
score: 99.23633684430804
patch: ( ( ( double ) 0 . 0 ) ) ) ) ;
rank: 688
score: 99.21752057756696
patch: ( double ) 0 . 0 ) ) * standard CaMeL Deviation ;
rank: 688
score: 99.16919817243304
patch: sqrt * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 688
score: 99.15279715401786
patch: ( standard CaMeL Deviation * ( - mean ) ) ) ) ;
rank: 688
score: 99.04501577524039
patch: ( standard CaMeL Deviation == 1 . 0 ) ) ) ;
rank: 689
score: 99.39173380533855
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ; } } ) ;
rank: 689
score: 99.29209798177084
patch: 1 . 0 ) + standard CaMeL Deviation * $NUMBER$ . 0 ) ;
rank: 689
score: 99.27125767299107
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) + ) ;
rank: 689
score: 99.261474609375
patch: Math . sqrt ( double ) 0 . 0 ) ) ;
rank: 689
score: 99.23493303571429
patch: ( ( 0 . 0 ) $NUMBER$ . 0 ) ) ) ;
rank: 689
score: 99.21575927734375
patch: ( double ) ( standard CaMeL Deviation * $NUMBER$ ) ) ) ;
rank: 689
score: 99.16856032151442
patch: ( $NUMBER$ . 0 ) + $NUMBER$ . 0 ) ) ;
rank: 689
score: 99.15230618990384
patch: ( standard CaMeL Deviation * Math . TRUE ) ) ) ;
rank: 689
score: 99.04470590444711
patch: ( ( this . $NUMBER$ . 0 ) ) ) ) ;
rank: 690
score: 99.39134724934895
patch: ( ( standard CaMeL Deviation * Math . sqrt ( ( $NUMBER$ . 0 . 0 ) ) ) ) ) ) ;
rank: 690
score: 99.27092742919922
patch: Math . sqrt ( $NUMBER$ . 0 ) / 0 . 0 ) ) ;
rank: 690
score: 99.26133626302084
patch: ( ( ( 0 . 0 . 1 ) ) ) ) ) ;
rank: 690
score: 99.2346923828125
patch: ( *= Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 690
score: 99.16820350060097
patch: ( $NUMBER$ . 0 ) ) / $NUMBER$ . 0 ) ;
rank: 690
score: 99.1521465594952
patch: ( standard CaMeL Deviation * 0 . length ) ) ) ;
rank: 690
score: 99.04281616210938
patch: ( this . erf 0 . 0 ) ) ) ;
rank: 691
score: 99.39128311820652
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) , - 0 . $NUMBER$ ) ;
rank: 691
score: 99.23444010416667
patch: ( ( standard CaMeL Deviation + $NUMBER$ . 0 ) ) ) ) ;
rank: 691
score: 99.21319580078125
patch: ( double ) $NUMBER$ . 0 ) ) + 1 . 0 ;
rank: 691
score: 99.1671142578125
patch: - Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 691
score: 99.15154474431819
patch: ( this . x - mean ) ) ) ;
rank: 692
score: 99.33932291666666
patch: ( standard CaMeL Deviation > Math . MAX _ VALUE ) ) ) ;
rank: 692
score: 99.28933715820312
patch: 1 . 0 ) ) / Math . sqrt ( $NUMBER$ . 0 ) ;
rank: 692
score: 99.26126534598214
patch: ( Double . sqrt ( $NUMBER$ . $NUMBER$ ) ) ) ) ;
rank: 692
score: 99.2119140625
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) * /
rank: 692
score: 99.16690499441964
patch: ( Math . sqrt ( $NUMBER$ == 0 . 0 ) ) ;
rank: 692
score: 99.15016526442308
patch: ( this . erf * 0 . 0 ) ) ) ;
rank: 692
score: 99.04140799386161
patch: ( standard CaMeL Deviation * $NUMBER$ standard CaMeL Deviation ) ) ) ;
rank: 693
score: 99.39051310221355
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) * ( 1 . 0 ) ;
rank: 693
score: 99.33890533447266
patch: true . 0 ) * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 693
score: 99.288232421875
patch: ( standard CaMeL Deviation * 1 . 0 . 0 ) ) ) ;
rank: 693
score: 99.26947021484375
patch: Math . sqrt ( $NUMBER$ . 0 ) ) / standard CaMeL Deviation ) ;
rank: 693
score: 99.26124790736607
patch: ( double ) ( 0 . 0 . 0 ) ) ) ;
rank: 693
score: 99.16688755580357
patch: Math . sqrt ( $NUMBER$ < $NUMBER$ . 0 ) ) ) ;
rank: 693
score: 99.14990234375
patch: ( standard CaMeL Deviation * sqrt ( ) ) ) ) ;
rank: 694
score: 99.28730119977679
patch: ( double ) $NUMBER$ . 0 + $NUMBER$ . 0 ) ) ;
rank: 694
score: 99.25904947916666
patch: ( long ) Math . round ( $NUMBER$ . 0 ) ) ) ;
rank: 694
score: 99.2108623798077
patch: ( standard CaMeL Deviation * 1 . 1 ) ) ) ;
rank: 694
score: 99.1661846454327
patch: ( Math . sqrt ( $NUMBER$ == 0 . 0 ) ;
rank: 694
score: 99.14909144810268
patch: ( standard CaMeL Deviation * 0 . - sqrt ) ) ) ;
rank: 695
score: 99.38960774739583
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) - ( standard CaMeL Deviation ) ) ;
rank: 695
score: 99.26609802246094
patch: ( mean ) / Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 695
score: 99.16603306361607
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) true )
rank: 696
score: 99.2839599609375
patch: ( double ) ( float ) ( $NUMBER$ . 0 ) ) ) ;
rank: 696
score: 99.26589965820312
patch: ( standard CaMeL Deviation * Math . sqrt ( true ) ) ) ) ;
rank: 696
score: 99.25835774739583
patch: ( ( 0 . 0 . 0 . 0 ) ) ) ) ;
rank: 696
score: 99.23153483072916
patch: ( ( 1 . 0 ) * 0 . 0 ) ) ) ;
rank: 696
score: 99.2103740985577
patch: ( double ) ( $NUMBER$ . 0 ) ) ) ) ;
rank: 696
score: 99.16444614955357
patch: ( $NUMBER$ . 0 ) ) ) + 0 . 0 ) ;
rank: 696
score: 99.0380859375
patch: ( >> ( $NUMBER$ . 0 ) ) ) ) ;
rank: 697
score: 99.38920261548913
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) - 1 . $NUMBER$ ) ;
rank: 697
score: 99.2652359008789
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) - 0 . $NUMBER$ ;
rank: 697
score: 99.25824846540179
patch: ( ( / 0 . 0 . 0 ) ) ) ) ;
rank: 697
score: 99.23119303385417
patch: ( ( standard CaMeL Deviation * $NUMBER$ . $NUMBER$ ) ) ) ) ;
rank: 697
score: 99.20967320033482
patch: ( standard CaMeL Deviation * 1 . 0 ) ) ) + ;
rank: 697
score: 99.14622279575893
patch: ( standard CaMeL Deviation * Math == 0 . 0 ) ) ;
rank: 698
score: 99.38889478600544
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) && 0 . 0 ) ;
rank: 698
score: 99.26511928013393
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) . $NUMBER$ ;
rank: 698
score: 99.25732421875
patch: ( ( 1 . 0 | $NUMBER$ . 0 ) ) ) ) ;
rank: 698
score: 99.23030598958333
patch: ( ( standard CaMeL Deviation << 0 . 0 ) ) ) ) ;
rank: 698
score: 99.20956856863839
patch: ( double ) standard CaMeL Deviation ) * standard CaMeL Deviation ) ;
rank: 698
score: 99.14432198660714
patch: sqrt ( standard CaMeL Deviation * standard CaMeL Deviation ) ) ) ;
rank: 699
score: 99.38852326766305
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + 0 . 0 ; }
rank: 699
score: 99.33699544270833
patch: ( Integer ) Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 699
score: 99.28220912388393
patch: Math . sqrt ( $NUMBER$ . $NUMBER$ . 0 ) ) ) ;
rank: 699
score: 99.25693922776442
patch: ( $NUMBER$ . ( 1 . 0 ) ) ) ) ;
rank: 699
score: 99.20947265625
patch: ( standard CaMeL Deviation / $NUMBER$ . 0 ) ) ) * ;
rank: 699
score: 99.03372896634616
patch: Math . sqrt ( $NUMBER$ . 0 ) ) false ) ;
rank: 700
score: 99.3883056640625
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ? $NUMBER$ : 0 . 0 ) ;
rank: 700
score: 99.25506184895833
patch: ( ( 1 . 0 - $NUMBER$ . 0 ) ) ) ) ;
rank: 700
score: 99.22947591145834
patch: 0 . ) * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 700
score: 99.2093505859375
patch: ( double ) $NUMBER$ . 0 ) ) + 0 . $NUMBER$ ;
rank: 700
score: 99.14198811848958
patch: ( standard CaMeL Deviation * - sqrt ) ) ) ;
rank: 701
score: 99.27953287760417
patch: ( float ) Math . ceil ( $NUMBER$ . 0 ) ) ) ;
rank: 701
score: 99.25486537388393
patch: ( ( 1 . 0 ) 1 . 0 ) ) ) ;
rank: 701
score: 99.22934792258523
patch: ( double * 0 . 0 ) ) ) ;
rank: 701
score: 99.20848737444196
patch: ( standard CaMeL Deviation - 1 . 0 ) ) ) ) ;
rank: 701
score: 99.16001674107143
patch: ( $NUMBER$ . 0 ) ) * ( $NUMBER$ . 0 ) )
rank: 701
score: 99.03163452148438
patch: ( * $NUMBER$ . 0 ) ) ) ;
rank: 702
score: 99.38785807291667
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) + 0 . $NUMBER$ * x ;
rank: 702
score: 99.33580017089844
patch: 0 . 0 , Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 702
score: 99.2547137920673
patch: ( $NUMBER$ . 0 - $NUMBER$ . 0 ) ) ) ;
rank: 702
score: 99.22820575420673
patch: ( ( Double * $NUMBER$ . 0 ) ) ) ) ;
rank: 702
score: 99.20830426897321
patch: ( double ) standard CaMeL Deviation * / . 0 ) ) ;
rank: 702
score: 99.15977260044643
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) : ) ;
rank: 702
score: 99.14098249162946
patch: ( Math . sqrt ( $NUMBER$ . length ) ) ) ) ;
rank: 702
score: 99.03065074573864
patch: ( $NUMBER$ + $NUMBER$ . 0 ) ) ) ;
rank: 703
score: 99.20816744290866
patch: ( double ) standard CaMeL Deviation * $NUMBER$ . 0 ) ;
rank: 703
score: 99.15960223858173
patch: ( $NUMBER$ . 0 ) ) ) + 1 . $NUMBER$ ;
rank: 703
score: 99.03017171223958
patch: ( this . erf 1 . 0 ) ) ) ;
rank: 704
score: 99.22645670572916
patch: ( ( * sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 704
score: 99.15850830078125
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) + $NUMBER$
rank: 704
score: 99.14047677176339
patch: ( standard CaMeL Deviation * 0 . 0 ) ) . ) ;
rank: 705
score: 99.25123009314903
patch: Math . sqrt ( $NUMBER$ . 0 ) ) , ) ;
rank: 705
score: 99.22621256510416
patch: ( ( $NUMBER$ . 0 ) ) - $NUMBER$ . 0 ) ) ;
rank: 705
score: 99.028564453125
patch: : Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 706
score: 99.38643391927083
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) + 0 . 0 ) ) ) ;
rank: 706
score: 99.33319091796875
patch: standard CaMeL Deviation * Math . round ( $NUMBER$ . 0 ) ) ) ;
rank: 706
score: 99.27602713448661
patch: ( standard CaMeL Deviation - standard CaMeL Deviation ) ) ) ) ;
rank: 706
score: 99.22607421875
patch: ( double * sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 706
score: 99.20684814453125
patch: $NUMBER$ . 0 ) ) * Math . sqrt ( $NUMBER$ ) ;
rank: 706
score: 99.15626743861607
patch: ( Byte . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 706
score: 99.13853236607143
patch: ( standard CaMeL Deviation * 0 . 0 ) ) false ) ;
rank: 707
score: 99.251513671875
patch: ( long ) 0 . 0 ) ) ;
rank: 707
score: 99.24864783653847
patch: ( ( $NUMBER$ . 0 ) - mean ) ) ) ;
rank: 707
score: 99.22576032366071
patch: ( ( standard CaMeL Deviation * $NUMBER$ . ) ) ) ) ;
rank: 707
score: 99.20667613636364
patch: ( standard CaMeL Deviation * 1 ) ) ) ;
rank: 707
score: 99.15548001802884
patch: ( $NUMBER$ . 0 ) ) ) * 0 . $NUMBER$ ;
rank: 707
score: 99.13791329520089
patch: ( standard CaMeL Deviation > 0 . 0 ) ) false ) ;
rank: 707
score: 99.02679912860577
patch: ( x ) ) / ( $NUMBER$ . 0 ) ) ;
rank: 708
score: 99.20572916666667
patch: ( $NUMBER$ . 0 * double ) $NUMBER$ ) ) ;
rank: 708
score: 99.15331159319196
patch: ( Math . sqrt ( x - mean ) ) ) ) ;
rank: 708
score: 99.13784354073661
patch: sqrt ( ) . erf ( $NUMBER$ . 0 ) ) ) ;
rank: 709
score: 99.24913736979167
patch: ( ( 0 . 0 + standard CaMeL Deviation ) ) ) ) ;
rank: 709
score: 99.24492536272321
patch: ( ( $NUMBER$ . $NUMBER$ ) 0 . 0 ) ) ) ;
rank: 709
score: 99.2252530184659
patch: ( standard CaMeL Deviation * false ) ) ) ;
rank: 709
score: 99.20367901141827
patch: $NUMBER$ . 0 * ( $NUMBER$ . 0 ) ) ) ;
rank: 709
score: 99.15033428485577
patch: ( $NUMBER$ . 0 ) ) , 1 . 0 ) ;
rank: 709
score: 99.13705679086539
patch: ( $NUMBER$ + ( $NUMBER$ . 0 ) ) ) ) ;
rank: 709
score: 99.02649864783653
patch: Erf . erf ( standard CaMeL Deviation ) ) ) ;
rank: 710
score: 99.3833072060033
patch: Integer . standard CaMeL Deviation ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 710
score: 99.27318522135417
patch: ( float ) Math . round ( $NUMBER$ . 0 ) ) ) ;
rank: 710
score: 99.22369384765625
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 . ) ) ) ;
rank: 711
score: 99.3831787109375
patch: ( Math . sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ; }
rank: 711
score: 99.24810791015625
patch: ( Math . sleep ( $NUMBER$ . 0 ) ) ) ) ;
rank: 711
score: 99.2439453125
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) . return 0 ;
rank: 711
score: 99.22137044270833
patch: ( * Double . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 711
score: 99.20256805419922
patch: ( double ) $NUMBER$ ) ) ;
rank: 711
score: 99.1368916829427
patch: ( standard CaMeL Deviation > 0 . 0 ) ) ;
rank: 712
score: 99.24378662109375
patch: ( $NUMBER$ . 0 0 ) ) ) ;
rank: 712
score: 99.19892229352679
patch: ( standard CaMeL Deviation * float $NUMBER$ . 0 ) ) ) ;
rank: 712
score: 99.14688546316964
patch: ( Math . sqrt ( false . 0 ) ) ) ) ;
rank: 712
score: 99.13609095982143
patch: ( standard CaMeL Deviation * 0 . - mean ) ) ) ;
rank: 713
score: 99.38308715820312
patch: ( standard CaMeL Deviation == ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 713
score: 99.33037567138672
patch: ( Math . abs ( $NUMBER$ . 0 . 0 ) ) ) ) ;
rank: 713
score: 99.26929582868304
patch: ( float ) ( $NUMBER$ . 0 . 0 ) ) ) ;
rank: 713
score: 99.24800931490384
patch: Math . sqrt ( float ) 0 . 0 ) ) ;
rank: 713
score: 99.24169108072917
patch: ( ( ( x - mean ) / mean ) ) ) ) ;
rank: 713
score: 99.19811139787946
patch: $NUMBER$ . 0 * ( double ) $NUMBER$ . 0 ) ) ;
rank: 713
score: 99.14362444196429
patch: ( Math . sqrt ( $NUMBER$ [ 0 ) ) ) ) ;
rank: 713
score: 99.13550821940105
patch: ( this . erf ( ( ) ) ) ) ;
rank: 714
score: 99.38292100694444
patch: ( ( x - Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 714
score: 99.22060546875
patch: ( ( 0 . 0 ) * 1 . 0 ) ) ) ;
rank: 714
score: 99.1980731670673
patch: ( 1 . 0 / $NUMBER$ . 0 ) ) ) ;
rank: 714
score: 99.02406819661458
patch: ( ) / ( $NUMBER$ . 0 ) ) ) ;
rank: 715
score: 99.26142578125
patch: ( double ) standard CaMeL Deviation * standard CaMeL Deviation ) ) ) ;
rank: 715
score: 99.24641636439732
patch: ( Integer . min ( $NUMBER$ . 0 ) ) ) ) ;
rank: 715
score: 99.2412109375
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) . 1 ;
rank: 715
score: 99.1976787860577
patch: ( standard CaMeL Deviation / 1 . 0 ) ) ) ;
rank: 715
score: 99.13325805664063
patch: ( $NUMBER$ . 0 ) ) ) ; }
rank: 716
score: 99.3824462890625
patch: ( standard CaMeL Deviation == * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 716
score: 99.3282470703125
patch: ( standard CaMeL Deviation > 0 . 0 * $NUMBER$ ) ) ) ;
rank: 716
score: 99.26122233072917
patch: ( double ) standard CaMeL Deviation * Math . sqrt $NUMBER$ ) ) ;
rank: 716
score: 99.24095740685097
patch: Math . sqrt ( $NUMBER$ . 0 0 ) ) ) ;
rank: 716
score: 99.19730922154018
patch: ( double ) 0 . 0 ) ) / $NUMBER$ . 0 ;
rank: 716
score: 99.02128462357955
patch: ( $NUMBER$ . 0 ) . 0 ) ) ;
rank: 717
score: 99.382080078125
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) * 0 . 0 ) ;
rank: 717
score: 99.24472280649039
patch: ( 0 . 0 | $NUMBER$ . 0 ) ) ) ;
rank: 717
score: 99.21897536057692
patch: ( ( double * 0 . 0 ) ) ) ) ;
rank: 717
score: 99.19612339564732
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) * ) ;
rank: 717
score: 99.14247349330357
patch: ( Math . sqrt ( true . 0 ) ) ) ) ;
rank: 717
score: 99.01986929086539
patch: ( ( x - 1 . 0 ) ) ) ) ;
rank: 718
score: 99.3818359375
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) / ( standard CaMeL Deviation ) ) ;
rank: 718
score: 99.327978515625
patch: ( $NUMBER$ . 0 * standard CaMeL Deviation ( ) ) ) ) ;
rank: 718
score: 99.26044921875
patch: ( standard CaMeL Deviation * Math . $NUMBER$ . 0 ) ) ) ;
rank: 718
score: 99.19602614182692
patch: ( 1 . 0 ) ) ) / $NUMBER$ . 0 ;
rank: 718
score: 99.14227764423077
patch: ( $NUMBER$ . 0 ) ) ) + $NUMBER$ . 0 ;
rank: 718
score: 99.13199556790866
patch: ( this . erf * $NUMBER$ . 0 ) ) ) ;
rank: 718
score: 99.01824951171875
patch: ( ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 719
score: 99.32766723632812
patch: ( byte ) Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 719
score: 99.2593994140625
patch: ( float ) 0 . 0 ) ) ;
rank: 719
score: 99.2426513671875
patch: ( int ) 0 . 0 ) ) ;
rank: 719
score: 99.19560023716518
patch: ( double ) 1 . 0 ) ) * standard CaMeL Deviation ;
rank: 719
score: 99.13161057692308
patch: ( ) . erf ( $NUMBER$ . 0 ) ) ) ;
rank: 720
score: 99.38046104029605
patch: ( standard CaMeL Deviation * <= Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 720
score: 99.24248395647321
patch: ( Long . max ( $NUMBER$ . 0 ) ) ) ) ;
rank: 720
score: 99.1416727701823
patch: ( $NUMBER$ . 0 ) ) ) ? 1 . $NUMBER$
rank: 721
score: 99.38040500217014
patch: Number . standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 721
score: 99.32720184326172
patch: 0 . $NUMBER$ ) * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 721
score: 99.25811360677083
patch: ( standard CaMeL Deviation * $NUMBER$ . $NUMBER$ . 0 ) ) ) ;
rank: 721
score: 99.19429524739583
patch: ( double ) $NUMBER$ . 0 ) ) + 1 ;
rank: 721
score: 99.12802358774039
patch: ( standard CaMeL Deviation * mean . 0 ) ) ) ;
rank: 721
score: 99.01211313100961
patch: Erf . erf ( x - mean ) ) ) ;
rank: 722
score: 99.32718098958334
patch: ( $NUMBER$ . 0 . 0 * $NUMBER$ . 0 ) ) ) ;
rank: 722
score: 99.24176494891827
patch: ( ( $NUMBER$ . 0 . 1 ) ) ) ) ;
rank: 722
score: 99.23490084134616
patch: ( $NUMBER$ . 0 + 0 . 0 ) ) ) ;
rank: 722
score: 99.21704915364583
patch: ( standard CaMeL Deviation * super . sqrt ( ) ) ) ) ;
rank: 722
score: 99.19369506835938
patch: ( standard CaMeL Deviation * 1 . ) ) ) ;
rank: 722
score: 99.14027622767857
patch: sqrt ( $NUMBER$ . 0 + $NUMBER$ . 0 ) ) ) ;
rank: 722
score: 99.01160606971153
patch: ( $NUMBER$ . 0 ) / $NUMBER$ . 0 ) ) ;
rank: 723
score: 99.37934705946181
patch: ( standard CaMeL Deviation * Math . Float ( $NUMBER$ . 0 ) ) ) ) ;
rank: 723
score: 99.32601928710938
patch: ( Math . round ( $NUMBER$ . 0 . 0 ) ) ) ) ;
rank: 723
score: 99.2401592548077
patch: ( 0 . 0 * 0 . 0 ) ) ) ;
rank: 723
score: 99.21697998046875
patch: ( ( double ) ( $NUMBER$ . 0 ) ) ) ) ;
rank: 723
score: 99.19331498579545
patch: ( $NUMBER$ . 0 ) ) ) + 1 ;
rank: 723
score: 99.14021439985795
patch: ( $NUMBER$ . 0 ) ) ) : ) ;
rank: 723
score: 99.01143704927884
patch: ( ( ( x - mean ) ) ) ) ) ;
rank: 724
score: 99.25623372395833
patch: $NUMBER$ . 0 ) - standard CaMeL Deviation * $NUMBER$ . 0 ) ;
rank: 724
score: 99.23969377790179
patch: ( Float . max ( $NUMBER$ . 0 ) ) ) ) ;
rank: 724
score: 99.23308771306819
patch: mean ) / ( $NUMBER$ . 0 ) ) ;
rank: 724
score: 99.21678670247395
patch: double . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 724
score: 99.19314575195312
patch: ( double ) $NUMBER$ . 0 ) ) * ) ;
rank: 724
score: 99.13999430338542
patch: ( $NUMBER$ . 0 ) ) ) + 0 . $NUMBER$
rank: 724
score: 99.01141357421875
patch: ( $NUMBER$ . 0 ) . 0 ) ) ) ;
rank: 725
score: 99.25406087239584
patch: $NUMBER$ . 0 ) * standard CaMeL Deviation * standard CaMeL Deviation ) ;
rank: 725
score: 99.23300606863839
patch: ( $NUMBER$ . 0 ) ) ) . erf ( $NUMBER$ ) ;
rank: 725
score: 99.19263634314903
patch: ( standard CaMeL Deviation * random . 0 ) ) ) ;
rank: 725
score: 99.12579345703125
patch: Math . sqrt ( $NUMBER$ == 0 . 0 ) ) ) ;
rank: 726
score: 99.37780083550348
patch: ( standard CaMeL Deviation double ) Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 726
score: 99.23946940104166
patch: ( long ) Math . sqrt ( standard CaMeL Deviation ) ) ) ;
rank: 726
score: 99.2160400390625
patch: ( ( ( Double * $NUMBER$ . 0 ) ) ) ) ) ;
rank: 726
score: 99.19054303850446
patch: ( double ) standard CaMeL Deviation * $NUMBER$ . 1 ) ) ;
rank: 726
score: 99.1390380859375
patch: ( $NUMBER$ . 0 ) ) ) & 0 . 0 ) ;
rank: 726
score: 99.01029829545455
patch: ( standard CaMeL Deviation . 0 ) ) ) ;
rank: 727
score: 99.37765984786184
patch: >> ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 727
score: 99.24492536272321
patch: $NUMBER$ . 0 ) ) ;
rank: 727
score: 99.23125348772321
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) + 0 ;
rank: 727
score: 99.19046456473214
patch: ( standard CaMeL Deviation $NUMBER$ . 0 . 0 ) ) ) ;
rank: 727
score: 99.13882211538461
patch: ( Math . sqrt ( - mean ) ) ) ) ;
rank: 727
score: 99.12302943638393
patch: ( standard CaMeL Deviation * ( . 0 ) ) ) ) ;
rank: 728
score: 99.23816856971153
patch: ( double ) ( double ) 0 . 0 ) ) ;
rank: 728
score: 99.23109537760416
patch: Erf . erf ( ( $NUMBER$ . 0 ) ) ) ) ;
rank: 728
score: 99.21463216145834
patch: ( < Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 728
score: 99.1899658203125
patch: ( $NUMBER$ . 0 ) ) ) * ;
rank: 728
score: 99.13819231305804
patch: ( $NUMBER$ . 0 ) ( $NUMBER$ . 0 ) ) ) ;
rank: 729
score: 99.32403564453125
patch: ( ( double ) $NUMBER$ . 0 / $NUMBER$ . 0 ) ) ) ;
rank: 729
score: 99.2291729266827
patch: ( ( $NUMBER$ . 0 + mean ) ) ) ) ;
rank: 729
score: 99.1898193359375
patch: ( double ) standard CaMeL Deviation * / $NUMBER$ ) ) ;
rank: 729
score: 99.0052020733173
patch: ( x - ( $NUMBER$ . 0 ) ) ) ) ;
rank: 730
score: 99.23762730189732
patch: ( standard CaMeL Deviation * standard CaMeL Deviation ] ) ) ) ;
rank: 730
score: 99.21339768629808
patch: ( standard CaMeL Deviation * 0 . 0 ) ) ) {
rank: 730
score: 99.18949672154018
patch: ( standard CaMeL Deviation * double ) 1 . 0 ) ) ;
rank: 730
score: 99.00416056315105
patch: ( $NUMBER$ . 0 ) ) / ( ) ) ;
rank: 731
score: 99.37601047092014
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) , 0 . 0 ) ) ;
rank: 731
score: 99.2362060546875
patch: ( ( 1 . 0 ) 0 . 0 ) ) ) ;
rank: 731
score: 99.22642299107143
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) + mean ;
rank: 731
score: 99.13747151692708
patch: ( standard CaMeL Deviation * 0 . 0 ) ) )
rank: 731
score: 99.11915806361607
patch: ( $NUMBER$ . 0 ) ) / ( ( ) ) ) ;
rank: 731
score: 99.00377478966347
patch: ( ( $NUMBER$ / $NUMBER$ . 0 ) ) ) ) ;
rank: 732
score: 99.23610276442308
patch: ( $NUMBER$ . 0 / 0 . 0 ) ) ) ;
rank: 732
score: 99.22557721819196
patch: ( $NUMBER$ . 0 ) ) ) . erf ( x ) ;
rank: 732
score: 99.21280343191964
patch: ( double . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 732
score: 99.18885387073864
patch: ( $NUMBER$ . 0 * double ) ) ) ;
rank: 732
score: 99.13444301060268
patch: ( $NUMBER$ . 0 ) ) ) + $NUMBER$ . $NUMBER$ ) ;
rank: 732
score: 99.11858258928571
patch: ( standard CaMeL Deviation * ( x - mean ) ) ) ;
rank: 733
score: 99.37478976779514
patch: ( standard CaMeL Deviation * Math . sqrt ( Integer . 0 ) ) ) ) ;
rank: 733
score: 99.32157679966518
patch: ( $NUMBER$ . 0 ] * standard CaMeL Deviation ) ) ) ;
rank: 733
score: 99.24200846354167
patch: ( float ) ( double ) ( $NUMBER$ . 0 ) ) ) ;
rank: 733
score: 99.23606520432692
patch: ( ( 1 . 0 . 1 ) ) ) ) ;
rank: 733
score: 99.22178548177084
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) . ( ) ;
rank: 733
score: 99.21231282552084
patch: ( standard CaMeL Deviation * Math . sqrt [ $NUMBER$ ) ) ) ;
rank: 733
score: 99.18881661551339
patch: ( double ) standard CaMeL Deviation ) ) + standard CaMeL Deviation ;
rank: 733
score: 99.00087668678977
patch: ( $NUMBER$ , 0 . 0 ) ) ) ;
rank: 734
score: 99.37407090928819
patch: Long . standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 734
score: 99.24188232421875
patch: ( int ) ( $NUMBER$ . 0 ) ) ) ;
rank: 734
score: 99.23415120442708
patch: standard CaMeL Deviation ( 0 . 0 ) ) ) ;
rank: 734
score: 99.18825120192308
patch: ( standard CaMeL Deviation - 1 . $NUMBER$ ) ) ) ;
rank: 734
score: 99.11610630580357
patch: ( standard CaMeL Deviation * Math . >= $NUMBER$ ) ) ) ;
rank: 734
score: 98.99869478665866
patch: standard CaMeL Deviation ) / ( $NUMBER$ . 0 ) ) ;
rank: 735
score: 99.37352837456598
patch: ( standard CaMeL Deviation * Math . sqrt ( . . 0 ) ) ) ) ;
rank: 735
score: 99.24148763020834
patch: $NUMBER$ . 0 , standard CaMeL Deviation * $NUMBER$ . 0 ) ) ;
rank: 735
score: 99.23387799944196
patch: ( ( 1 . 0 ) $NUMBER$ . 0 ) ) ) ;
rank: 735
score: 99.18763950892857
patch: ( double ) ( standard CaMeL Deviation * $STRING$ ) ) ) ;
rank: 735
score: 99.13395552201705
patch: ( $NUMBER$ . 0 ) ) ) + $NUMBER$ ;
rank: 735
score: 99.1160000887784
patch: ( $NUMBER$ < 0 . 0 ) ) ) ;
rank: 735
score: 98.99740835336539
patch: ( ( $NUMBER$ + $NUMBER$ . 0 ) ) ) ) ;
rank: 736
score: 99.37168974034927
patch: double standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 736
score: 99.3192889873798
patch: ( standard CaMeL Deviation <= $NUMBER$ . 0 ) ) ) ;
rank: 736
score: 99.23322002704327
patch: Math . sqrt ( $NUMBER$ . 0 $NUMBER$ ) ) ) ;
rank: 736
score: 99.21614583333333
patch: ( 1 . 0 ) ) ) . cumulative CaMeL Probability ( ) ;
rank: 736
score: 99.21118977864583
patch: ( Math . sqrt ( $NUMBER$ ) 0 . 0 ) ) ) ;
rank: 736
score: 99.1873067220052
patch: ( $NUMBER$ . 0 ) ) ) * / ) ;
rank: 736
score: 99.13377162388393
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ? 0
rank: 736
score: 98.9957784016927
patch: ( << ( $NUMBER$ . 0 ) ) ) ) ;
rank: 737
score: 99.3189453125
patch: ( double ) $NUMBER$ . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 737
score: 99.24093191964286
patch: ( double ) $NUMBER$ . 0 ) * $NUMBER$ . 0 ) ;
rank: 737
score: 99.21558430989583
patch: ( ( x - mean ) ) ) ) . erf ( ) ;
rank: 737
score: 99.21101888020833
patch: ( ( * 0 . 0 ) ) ) ) ;
rank: 738
score: 99.31658935546875
patch: ( $NUMBER$ . 0 * $NUMBER$ . 0 ) ) ) ) ;
rank: 738
score: 99.23066929408482
patch: ( Double . min ( $NUMBER$ . 0 ) ) ) ) ;
rank: 738
score: 99.21498209635416
patch: ( standard CaMeL Deviation ? Math . sqrt ( $NUMBER$ . 0 ) )
rank: 738
score: 99.18672688802083
patch: ( standard CaMeL Deviation * 1 . 0 ) ) ;
rank: 738
score: 99.13133021763393
patch: ( standard CaMeL Deviation * ( $NUMBER$ . 0 ) ) ) )
rank: 739
score: 99.31576334635416
patch: ( Integer . length ( ) * $NUMBER$ . 0 ) ) ) ;
rank: 739
score: 99.22995431082589
patch: Math . sqrt ( $NUMBER$ . 0 ( ) ) ) ) ;
rank: 739
score: 99.13123497596153
patch: ( Math . sqrt ( 0 . 0 ) ) ) )
rank: 739
score: 98.99486365685097
patch: ( Math . sqrt ( ) . 0 ) ) ) ;
rank: 740
score: 99.31575520833333
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 . 1 ) ) ) ;
rank: 740
score: 99.22947184244792
patch: Double . max ( $NUMBER$ . 0 ) ) ) ;
rank: 740
score: 99.20686848958333
patch: ( ( 0 . 0 ) ) * 0 . 0 ) ) ;
rank: 740
score: 99.13027719350961
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) + $NUMBER$
rank: 740
score: 98.9938495342548
patch: ( ( ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 741
score: 99.31454264322916
patch: ( $NUMBER$ . standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ;
rank: 741
score: 99.24003092447917
patch: ( standard CaMeL Deviation * Double . 0 . 0 ) ) ) ;
rank: 741
score: 99.12601318359376
patch: ( - $NUMBER$ . 0 ) ) ) ;
rank: 742
score: 99.36553596047794
patch: ( Erf . erf ( ( x - x ) ) ) ) ) ;
rank: 742
score: 99.23954264322917
patch: 1 . 0 ) * standard CaMeL Deviation * $NUMBER$ . 0 ) ;
rank: 742
score: 99.22750418526786
patch: Math . sqrt ( $NUMBER$ . MAX _ VALUE ) ) ) ;
rank: 742
score: 99.20653279622395
patch: ( ( - $NUMBER$ . 0 ) ) ) ) ;
rank: 742
score: 99.18381173270089
patch: ( standard CaMeL Deviation * / $NUMBER$ . $NUMBER$ ) ) ) ;
rank: 742
score: 99.11101825420673
patch: ( standard CaMeL Deviation > 0 . $NUMBER$ ) ) ) ;
rank: 743
score: 99.23880208333334
patch: ( double ) ( double ) ( 0 . 0 ) ) ) ;
rank: 743
score: 99.22698974609375
patch: 0 . 0 ? Math . sqrt ( $NUMBER$ . 0 ) ;
rank: 743
score: 99.18370710100446
patch: ( double ) $NUMBER$ . 0 ) ) + standard CaMeL Deviation ;
rank: 743
score: 99.1239764873798
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) *
rank: 743
score: 99.1106426532452
patch: ( $NUMBER$ . $NUMBER$ + $NUMBER$ . 0 ) ) ) ;
rank: 743
score: 98.9894550030048
patch: ( ( standard CaMeL Deviation * $NUMBER$ ) ) ) ) ;
rank: 744
score: 99.36337619357639
patch: ( 1 . 0 ) ) ) + Math . sqrt ( $NUMBER$ . 0 ) ;
rank: 744
score: 99.23866373697916
patch: $NUMBER$ . 0 ) ? 0 . 0 : 0 . 0 ) ;
rank: 744
score: 99.2266094501202
patch: ( 0 . 0 + standard CaMeL Deviation ) ) ) ;
rank: 744
score: 99.20844184027777
patch: ( 1 . 0 ) ) ) ;
rank: 744
score: 99.20529409555289
patch: ( standard CaMeL Deviation , 0 . 0 ) ) ) ;
rank: 744
score: 99.18348039899554
patch: ( double ) ( $NUMBER$ . 0 * double ) ) ) ;
rank: 744
score: 99.12026742788461
patch: ( $NUMBER$ . 0 ) - $NUMBER$ . 0 ) ) ;
rank: 744
score: 99.1097412109375
patch: ( standard CaMeL Deviation * 0 . 0 $NUMBER$ ) ) ) ;
rank: 745
score: 99.23846028645833
patch: ( $NUMBER$ . 0 / ( $NUMBER$ . 0 ) ) ) ) ;
rank: 745
score: 99.18328387920673
patch: ( standard CaMeL Deviation * float . 0 ) ) ) ;
rank: 745
score: 99.11892465444711
patch: ( - sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 745
score: 98.98750443892045
patch: ( $NUMBER$ / $NUMBER$ . 0 ) ) ) ;
rank: 746
score: 99.36107680376838
patch: ( Math . sqrt ( ( . 0 . 0 ) ) ) ) ) ;
rank: 746
score: 99.238330078125
patch: ( ( standard CaMeL Deviation - standard CaMeL Deviation ) ) ) ) ;
rank: 746
score: 99.22636195591518
patch: ( $NUMBER$ . 0 ( $NUMBER$ . 0 ) ) ) ) ;
rank: 746
score: 99.20734049479167
patch: ( ( x - mean ) / standard CaMeL Deviation ) ) ) ;
rank: 746
score: 99.20359497070312
patch: ( * 0 . 0 ) ) ) ;
rank: 746
score: 99.1800537109375
patch: ( standard CaMeL Deviation * $NUMBER$ ) ) ) ) ;
rank: 746
score: 99.11753336588542
patch: ( $NUMBER$ . 0 ) ) ) ? 0 == $NUMBER$
rank: 746
score: 98.98512776692708
patch: ( standard CaMeL Deviation . ( ) ) ) ) ;
rank: 747
score: 99.2380126953125
patch: $NUMBER$ . 0 ) * $NUMBER$ . 0 * $NUMBER$ . 0 ) ;
rank: 747
score: 99.20602651742789
patch: ( ( $NUMBER$ . 0 ) - $NUMBER$ ) ) ) ;
rank: 747
score: 99.2032958984375
patch: ( ( ( $NUMBER$ . 0 ) ) . 0 ) ) ) ;
rank: 747
score: 99.17789400540866
patch: $NUMBER$ . 0 ) ) / ( $NUMBER$ . 0 ) ;
rank: 748
score: 99.20561872209821
patch: mean * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 748
score: 99.20243617466518
patch: double . Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 748
score: 99.17601600060097
patch: ( standard CaMeL Deviation / $NUMBER$ . $NUMBER$ ) ) ) ;
rank: 748
score: 99.10456986860795
patch: ( $NUMBER$ >= 0 . 0 ) ) ) ;
rank: 749
score: 99.35599093967014
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . ] ) ) ) ) ;
rank: 749
score: 99.23655598958334
patch: ( standard CaMeL Deviation * Long . MIN _ VALUE ) ) ) ;
rank: 749
score: 99.22528076171875
patch: Math . sqrt ( this . 0 . 0 ) ) ) ;
rank: 749
score: 99.20149448939732
patch: ( standard CaMeL Deviation * 0 . 0 1 ) ) ) ;
rank: 749
score: 99.17442908653847
patch: ( 1 . 0 ) ) ) * standard CaMeL Deviation ;
rank: 749
score: 99.10374098557692
patch: ( standard CaMeL Deviation * ( $STRING$ ) ) ) ) ;
rank: 749
score: 98.98183969350961
patch: ( $NUMBER$ ) ) / ( $NUMBER$ . 0 ) ) ;
rank: 750
score: 99.30787071814903
patch: ( standard CaMeL Deviation >> $NUMBER$ . 0 ) ) ) ;
rank: 750
score: 99.22505405970982
patch: ( Math . sqrt ( $STRING$ . 0 ) ) ) ) ;
rank: 750
score: 99.19988141741071
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) - $NUMBER$ ;
rank: 750
score: 99.17432579627403
patch: ( standard CaMeL Deviation * / . $NUMBER$ ) ) ) ;
rank: 750
score: 99.1146991436298
patch: ( $NUMBER$ . 0 ) ) ) : 1 . 0 ;
rank: 750
score: 99.10281137319711
patch: ( standard CaMeL Deviation * sqrt . 0 ) ) ) ;
rank: 751
score: 99.3075439453125
patch: ( 0 . 0 * $NUMBER$ . 0 * $NUMBER$ ) ) ) ;
rank: 751
score: 99.23379952566964
patch: $NUMBER$ . Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 751
score: 99.22458321707589
patch: Math . sqrt ( Double . 0 . 0 ) ) ) ;
rank: 751
score: 99.19761439732143
patch: standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) )
rank: 751
score: 99.17388446514423
patch: ( standard CaMeL Deviation ) * standard CaMeL Deviation ) ) ;
rank: 751
score: 99.11438927283653
patch: ( $NUMBER$ . 0 ) ) ) * 1 . 0 ;
rank: 752
score: 99.16658528645833
patch: ( double ) $NUMBER$ . 0 ) ) - 1 ;
rank: 752
score: 99.11304649939903
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) * $NUMBER$
rank: 752
score: 98.97803673377403
patch: ( standard CaMeL Deviation * ( false ) ) ) ) ;
rank: 753
score: 99.30697428385416
patch: ( $NUMBER$ . 0 ? $NUMBER$ . 0 : $NUMBER$ ) ) ) ;
rank: 753
score: 99.2287128155048
patch: $NUMBER$ . 0 ) * ( 1 . 0 ) ) ;
rank: 753
score: 99.22231038411458
patch: standard CaMeL Deviation ( $NUMBER$ . 0 ) ) ) ;
rank: 753
score: 99.19723074776786
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) : $NUMBER$ ;
rank: 753
score: 99.19646344866071
patch: ( - standard CaMeL Deviation * 0 . 0 ) ) ) ;
rank: 753
score: 99.16574331430289
patch: ( double ) ( $NUMBER$ . 0 ) ) ) * ;
rank: 753
score: 99.11226399739583
patch: ( $NUMBER$ . 0 ) ) ) ? 0 . 0
rank: 753
score: 99.09845440204327
patch: ( standard CaMeL Deviation * x . 0 ) ) ) ;
rank: 753
score: 98.9775057705966
patch: ( this . $NUMBER$ . 0 ) ) ) ;
rank: 754
score: 99.35102674696181
patch: ( standard CaMeL Deviation . Math . sqrt ( 1 . 0 ) ) ) ) ;
rank: 754
score: 99.22763893821023
patch: ( double ) 0 . 0 ) ) ) ;
rank: 754
score: 99.22225516183036
patch: ( ( double ) ( 0 . 0 ) ) ) ) ;
rank: 754
score: 99.19655198317308
patch: ( $NUMBER$ . 0 ) / 0 . 0 ) ) ;
rank: 754
score: 99.19645552201705
patch: ( standard CaMeL Deviation * true ) ) ) ;
rank: 754
score: 99.16561185396634
patch: ( standard CaMeL Deviation * Long . 0 ) ) ) ;
rank: 755
score: 99.34992133246527
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ] ) ) ;
rank: 755
score: 99.30545247395834
patch: ( standard CaMeL Deviation > $NUMBER$ . 0 * $NUMBER$ ) ) ) ;
rank: 755
score: 99.22189767020089
patch: ( Math . ceil ( $NUMBER$ . 0 ) ) ) ) ;
rank: 755
score: 99.1964111328125
patch: ( standard CaMeL Deviation * Math . 0 ) ) ) ) ;
rank: 755
score: 99.16489664713542
patch: ( double ) standard CaMeL Deviation * $STRING$ ) ) ;
rank: 755
score: 99.11034138997395
patch: ( $NUMBER$ . 0 ) ) 1 . 0 ) ;
rank: 756
score: 99.30530657087054
patch: 0 . standard CaMeL Deviation ( $NUMBER$ . 0 ) ) ) ;
rank: 756
score: 99.22508893694196
patch: L ) * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 756
score: 99.22188895089286
patch: ( $STRING$ . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 756
score: 99.18886496803977
patch: ( 1 . 0 + mean ) ) ) ;
rank: 756
score: 99.10906427556819
patch: ( $NUMBER$ < $NUMBER$ . 0 ) ) ) ;
rank: 756
score: 99.09583629261364
patch: ( standard CaMeL Deviation * erf ) ) ) ;
rank: 757
score: 99.30515950520834
patch: ( standard CaMeL Deviation * standard CaMeL Deviation ( ) ) ) ) ;
rank: 757
score: 99.21990497295673
patch: Math . sqrt $NUMBER$ ( $NUMBER$ . 0 ) ) ) ;
rank: 757
score: 99.1639404296875
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) * ;
rank: 757
score: 99.10750732421874
patch: ( $NUMBER$ . 0 ) ) ) + $NUMBER$
rank: 758
score: 99.34644232855902
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) , 0 . $NUMBER$ ) ) ;
rank: 758
score: 99.22160121372768
patch: ( double ) 0 . 0 * $NUMBER$ . 0 ) ) ;
rank: 758
score: 99.21982985276442
patch: ( double ) Math . sqrt ( $NUMBER$ ) ) ) ;
rank: 758
score: 99.18772379557292
patch: ( ( $NUMBER$ . 0 0 ) ) ) ) ;
rank: 758
score: 99.16327373798077
patch: ( 1 . 0 - standard CaMeL Deviation ) ) ) ;
rank: 758
score: 99.10518704927884
patch: ( $NUMBER$ . 0 ) ) ) * 1 . $NUMBER$ ;
rank: 758
score: 98.97455303485577
patch: ( standard CaMeL Deviation 0 . ( ) ) ) ) ;
rank: 759
score: 99.34597439236111
patch: ( standard CaMeL Deviation -= Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 759
score: 99.30391438802083
patch: ( 0 . 0 . 0 * $NUMBER$ . 0 ) ) ) ;
rank: 759
score: 99.21945190429688
patch: ( double ) $NUMBER$ . 0 . 0 ) ) ;
rank: 759
score: 99.1923116048177
patch: ( ( float ) 0 . 0 ) ) ) ;
rank: 759
score: 99.18666428786058
patch: ( $NUMBER$ . 0 , $NUMBER$ . 0 ) ) ) ;
rank: 759
score: 99.09104567307692
patch: ( x - mean * 0 . 0 ) ) ) ;
rank: 759
score: 98.97357177734375
patch: ( standard CaMeL Deviation 1 . 0 ) ) ) ;
rank: 760
score: 99.30379231770833
patch: ( $NUMBER$ . 0 * $NUMBER$ . 0 * $NUMBER$ ) ) ) ;
rank: 760
score: 99.22098482572116
patch: 1 . 0 ) * ( $NUMBER$ . 0 ) ) ;
rank: 760
score: 99.21883138020833
patch: Math . sqrt ( $STRING$ . 0 ) ) ) ;
rank: 760
score: 99.1856689453125
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) + 1 ;
rank: 760
score: 99.1626446063702
patch: ( standard CaMeL Deviation % $NUMBER$ . 0 ) ) ) ;
rank: 760
score: 99.10287710336539
patch: ( $NUMBER$ . 0 ) ) ) : $NUMBER$ . 0 ;
rank: 760
score: 98.97238393930289
patch: Math . sqrt ( $NUMBER$ . 0 ) ) true ) ;
rank: 761
score: 99.34377712673611
patch: Dimension . standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 761
score: 99.21858433314732
patch: ( Long . sqrt ( 1 . 0 ) ) ) ) ;
rank: 761
score: 99.18992106119792
patch: Long . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 761
score: 99.1848614032452
patch: sqrt Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 761
score: 99.16261643629808
patch: ( standard CaMeL Deviation * max . 0 ) ) ) ;
rank: 761
score: 99.09909057617188
patch: ( $NUMBER$ . 0 ) ) ) ? 0 == 0
rank: 762
score: 99.3031982421875
patch: ( standard CaMeL Deviation * 0 . 0 * $NUMBER$ ) ) ) ;
rank: 762
score: 99.21845354352679
patch: ( standard CaMeL Deviation * float ) 0 . 0 ) ) ;
rank: 762
score: 99.18378557477679
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) . ) ;
rank: 762
score: 99.09794108072917
patch: ( $NUMBER$ . 0 ) ) ) + 0 . 0
rank: 762
score: 98.97084554036458
patch: ( ( ) . erf ( ) ) ) ) ;
rank: 763
score: 99.30289132254464
patch: ( standard CaMeL Deviation - $NUMBER$ . 0 ) ) ) ) ;
rank: 763
score: 99.21782575334821
patch: ( Float . abs ( $NUMBER$ . 0 ) ) ) ) ;
rank: 763
score: 99.18271108774039
patch: ( $NUMBER$ . 0 ) , $NUMBER$ . 0 ) ) ;
rank: 763
score: 99.0976092998798
patch: ( Math . sqrt ( $NUMBER$ ] ) ) ) ) ;
rank: 763
score: 98.97043863932292
patch: ( short ) ( $NUMBER$ . 0 ) ) ) ;
rank: 764
score: 99.30225481305804
patch: ( standard CaMeL Deviation > 0 . 0 ) ) ) ) ;
rank: 764
score: 99.21753801618304
patch: ( 0 . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 764
score: 99.18780517578125
patch: ( ( ( float ) 0 . 0 ) ) ) ) ;
rank: 764
score: 99.18093436104911
patch: Math . sqrt ( $NUMBER$ . 0 ) ) , $NUMBER$ ) ;
rank: 764
score: 99.09431966145833
patch: ( $NUMBER$ . 0 ) ) ) + $NUMBER$ . $NUMBER$
rank: 764
score: 99.0830829326923
patch: ( standard CaMeL Deviation * 0 . SIZE ) ) ) ;
rank: 764
score: 98.96924845377605
patch: ( Math . sqrt $NUMBER$ . 0 ) ) ) ;
rank: 765
score: 99.21744478665866
patch: ( 0 . 0 / 0 . 0 ) ) ) ;
rank: 765
score: 99.18689903846153
patch: ( standard CaMeL Deviation : 0 . 0 ) ) ) ;
rank: 765
score: 99.178955078125
patch: ( 1 . 0 ) ) ) + 0 . $NUMBER$ ;
rank: 765
score: 99.09415377103366
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) )
rank: 766
score: 99.3348029641544
patch: ( standard CaMeL Deviation * Math . sqrt double $NUMBER$ . 0 ) ) ) ;
rank: 766
score: 99.18450055803571
patch: ( ( $NUMBER$ . 0 ) ) 0 . 0 ) ) ;
rank: 766
score: 99.17877666766827
patch: ( $NUMBER$ . 0 * 0 . 0 ) ) ) ;
rank: 766
score: 99.15711558948864
patch: ( double ) $NUMBER$ . 0 ) ) + ;
rank: 766
score: 99.07997639973958
patch: ( standard CaMeL Deviation == 0 . 0 ) ) ;
rank: 766
score: 98.96231079101562
patch: ( ( ) / $NUMBER$ . 0 ) ) ) ;
rank: 767
score: 99.29965444711539
patch: ( standard CaMeL Deviation < standard CaMeL Deviation ) ) ) ;
rank: 767
score: 99.21582903180804
patch: ( 0 . 0 ? $NUMBER$ . 0 ] ) ) ) ;
rank: 767
score: 99.20768229166667
patch: Math . ceil ( $NUMBER$ . 0 ) ) ) ;
rank: 767
score: 99.18375941685268
patch: ( ! standard CaMeL Deviation * 0 . 0 ) ) ) ;
rank: 767
score: 99.17783028738839
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) == 0 ;
rank: 767
score: 98.95700073242188
patch: ( % ( $NUMBER$ . 0 ) ) ) ) ;
rank: 768
score: 99.2994384765625
patch: ( standard CaMeL Deviation - $NUMBER$ . 0 . 0 ) ) ) ;
rank: 768
score: 99.21515362079327
patch: ( 0 . 0 - $NUMBER$ . 0 ) ) ) ;
rank: 768
score: 99.18323692908653
patch: ( standard CaMeL Deviation * 0 . 0 ) ) ) .
rank: 768
score: 98.95688883463542
patch: ( standard CaMeL Deviation * ( standard CaMeL Deviation ; }
rank: 769
score: 99.2982421875
patch: ( int ) standard CaMeL Deviation ( $NUMBER$ . 0 ) ) ) ;
rank: 769
score: 99.18259840745192
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) {
rank: 769
score: 99.15073805588942
patch: ( $NUMBER$ . 0 * 1 . 0 ) ) ) ;
rank: 769
score: 99.09109262319711
patch: ( $NUMBER$ . 0 ) ) ) : $NUMBER$ . $NUMBER$ ;
rank: 769
score: 98.95604451497395
patch: ( this . erf ( x ) ) ) ) ;
rank: 770
score: 99.2977803548177
patch: ( ( int ) $NUMBER$ . 0 ) ) ) ;
rank: 770
score: 99.20598754882812
patch: ( float ) 1 . 0 ) ) ;
rank: 770
score: 99.15070049579327
patch: ( $NUMBER$ . 0 ) ) ) / standard CaMeL Deviation ;
rank: 770
score: 98.95464533025569
patch: ( x - 1 . 0 ) ) ) ;
rank: 771
score: 99.21278599330357
patch: ( ( standard CaMeL Deviation ) 0 . 0 ) ) ) ;
rank: 771
score: 99.18192232572116
patch: ( ( $NUMBER$ . 0 ) ) . 0 ) ) ;
rank: 771
score: 99.1759502704327
patch: ( x - mean ) ) ) . erf ( ) ;
rank: 771
score: 99.15035306490384
patch: $NUMBER$ . 0 ) ) * ( $NUMBER$ . 0 ) ;
rank: 771
score: 99.0902987393466
patch: ( $NUMBER$ . 0 ) ) - $NUMBER$ ) ;
rank: 771
score: 98.95089721679688
patch: ( , ( x - mean ) ) ) ) ;
rank: 772
score: 99.32085822610294
patch: ( Math . sqrt ( $NUMBER$ . 0 $NUMBER$ . 0 ) ) ) ) ;
rank: 772
score: 99.29480794270833
patch: ( 0 . 0 * standard CaMeL Deviation ( ) ) ) ) ;
rank: 772
score: 99.18159993489583
patch: Float . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 772
score: 99.14983661358173
patch: ( standard CaMeL Deviation * Float . 0 ) ) ) ;
rank: 772
score: 99.07137357271634
patch: ( standard CaMeL Deviation * 0 . null ) ) ) ;
rank: 773
score: 99.31857299804688
patch: ( standard CaMeL Deviation * Math . double ) $NUMBER$ . 0 ) ) ;
rank: 773
score: 99.2945048014323
patch: ( standard CaMeL Deviation [ $NUMBER$ ] ) ) ) ;
rank: 773
score: 99.18104771205357
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 1 ) ) ) ;
rank: 773
score: 99.14957369290866
patch: ( standard CaMeL Deviation * $STRING$ . $NUMBER$ ) ) ) ;
rank: 773
score: 99.07021859975961
patch: ( standard CaMeL Deviation * Math < $NUMBER$ ) ) ) ;
rank: 773
score: 98.94889322916667
patch: ( standard CaMeL Deviation . 0 ) ) ) ) ;
rank: 774
score: 99.29450334821429
patch: ( / standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ;
rank: 774
score: 99.21074567522321
patch: Math . sqrt ( $NUMBER$ . 0 ) ) - $NUMBER$ ) ;
rank: 774
score: 99.1800067608173
patch: ( ( Double * 0 . 0 ) ) ) ) ;
rank: 774
score: 99.17422921316964
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) . value ;
rank: 774
score: 99.14893595377605
patch: ( standard CaMeL Deviation * float ) $NUMBER$ ) ) ;
rank: 774
score: 99.08721923828125
patch: ( $NUMBER$ . 0 ) 1 . 0 ) ) ;
rank: 774
score: 99.06959885817308
patch: ( standard CaMeL Deviation * ( start ) ) ) ) ;
rank: 774
score: 98.94866333007812
patch: ( long ) $NUMBER$ . 0 ) ) ;
rank: 775
score: 99.29409993489584
patch: ( Math . abs ( $NUMBER$ . 0 ] ) ) ) ) ;
rank: 775
score: 99.1787109375
patch: ( $NUMBER$ . 0 ) * 0 . 0 ) ) ;
rank: 775
score: 99.17303936298077
patch: ( 1 . 0 + standard CaMeL Deviation ) ) ) ;
rank: 775
score: 99.08688589242789
patch: ( $NUMBER$ . 0 ) ) ) : 1 . $NUMBER$ ;
rank: 775
score: 98.9485196200284
patch: ( $NUMBER$ >> 0 . 0 ) ) ) ;
rank: 776
score: 99.2093505859375
patch: Math . sqrt ( $NUMBER$ . max ( ) ) ) ) ;
rank: 776
score: 99.17858014787946
patch: ( float . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 776
score: 99.14772542317708
patch: ( standard CaMeL Deviation * Double . ) ) ) ;
rank: 776
score: 98.94594319661458
patch: ( $NUMBER$ . 0 + Erf ) ) ) ;
rank: 777
score: 99.3118034811581
patch: ( Erf . erf ( ( x - erf ) ) ) ) ) ;
rank: 777
score: 99.29271589006696
patch: ( standard CaMeL Deviation > $NUMBER$ . 0 ) ) ) ) ;
rank: 777
score: 99.20890299479167
patch: ( ( / 0 . 0 ) ) ) ) ;
rank: 777
score: 99.19798060825893
patch: ( Character . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 777
score: 99.17266376201923
patch: ( $NUMBER$ . 0 + x - mean ) ) ) ;
rank: 777
score: 99.14772385817308
patch: $NUMBER$ . 0 ) ) / Math . sqrt ( ) ;
rank: 777
score: 99.08563701923077
patch: ( standard CaMeL Deviation * 0 . 0 ) ) ) *
rank: 777
score: 99.06754244290866
patch: ( standard CaMeL Deviation * $NUMBER$ . length ) ) ) ;
rank: 777
score: 98.94585626775569
patch: ( $NUMBER$ <= $NUMBER$ . 0 ) ) ) ;
rank: 778
score: 99.30943298339844
patch: ( standard CaMeL Deviation * double ) ( $NUMBER$ . 0 ) ) ) ;
rank: 778
score: 99.29253743489583
patch: ( 0 . 0 * ( $NUMBER$ . 0 ) ) ) ) ;
rank: 778
score: 99.17673165457589
patch: ( ( ( Double ) $NUMBER$ . 0 ) ) ) ) ;
rank: 778
score: 99.14434344951923
patch: ( 1 . 0 ) ) ) + 1 . 0 ;
rank: 778
score: 99.08519568810097
patch: ( $NUMBER$ . 0 ) ) ) + standard CaMeL Deviation ;
rank: 778
score: 98.9453369140625
patch: ( new x - mean ) ) ) ;
rank: 779
score: 99.30866555606617
patch: ( Erf . Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 779
score: 99.20753696986607
patch: ( ( double ) 0 . 0 . 0 ) ) ) ;
rank: 779
score: 99.14365456321023
patch: ( double ) $NUMBER$ . 0 ) ) / ;
rank: 779
score: 99.08446326622597
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) ? 0
rank: 779
score: 99.06502591646634
patch: ( standard CaMeL Deviation * Math . 1 ) ) ) ;
rank: 779
score: 98.94351196289062
patch: ( this . $NUMBER$ . 0 ) ) ) ) ;
rank: 780
score: 99.30708312988281
patch: ( ceil * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 780
score: 99.2068379720052
patch: ( ( / $NUMBER$ . 0 ) ) ) ) ;
rank: 780
score: 99.19517008463542
patch: $NUMBER$ . 0 ( $NUMBER$ . 0 ) ) ) ;
rank: 780
score: 99.17578125
patch: ( ( ( $NUMBER$ . 0 ) 0 ) ) ) ) ;
rank: 780
score: 99.08343036358173
patch: ( $NUMBER$ . 0 ) ) ) ? 0 : 0 ;
rank: 780
score: 99.06446422230114
patch: ( $NUMBER$ . length ( ) ) ) ) ;
rank: 781
score: 99.20610700334821
patch: ( int ) standard CaMeL Deviation * 0 . 0 ) ) ;
rank: 781
score: 99.173828125
patch: ( this . sqrt ( 0 . 0 ) ) ) ) ;
rank: 781
score: 99.1683349609375
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) ? $NUMBER$ ;
rank: 781
score: 99.14234337439903
patch: ( double ) standard CaMeL Deviation * $NUMBER$ . 0 ) )
rank: 781
score: 99.08280029296876
patch: ( $NUMBER$ . 0 ) ) false ) ;
rank: 781
score: 99.0626220703125
patch: ( $NUMBER$ . 0 + $NUMBER$ . $NUMBER$ ) ) ) ;
rank: 782
score: 99.20607503255208
patch: Arrays . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 782
score: 99.19396100725446
patch: $NUMBER$ . 0 ) , ( double ) 0 . 0 ) ;
rank: 782
score: 99.17364501953125
patch: ( double * sqrt ( 0 . 0 ) ) ) ) ;
rank: 782
score: 99.16716657366071
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) == $NUMBER$ ;
rank: 782
score: 99.14226825420673
patch: ( standard CaMeL Deviation * new . 0 ) ) ) ;
rank: 782
score: 99.0816180889423
patch: ( $NUMBER$ . 0 ) ) - 0 . 0 ) ;
rank: 782
score: 99.06119478665866
patch: ( this . erf ( $NUMBER$ . 0 ) ) ) ;
rank: 782
score: 98.93951970880681
patch: ( $NUMBER$ , $NUMBER$ . 0 ) ) ) ;
rank: 783
score: 99.16607666015625
patch: sqrt . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 783
score: 99.14131303267045
patch: ( double ) - 1 . 0 ) ) ;
rank: 783
score: 99.0813457782452
patch: ( $NUMBER$ . 0 ) ) || 0 . 0 ) ;
rank: 783
score: 98.93812866210938
patch: ( $NUMBER$ . 0 ) ) ) ; ;
rank: 784
score: 99.2916259765625
patch: ( standard CaMeL Deviation > 0 . 0 . 0 ) ) ) ;
rank: 784
score: 99.20289963942308
patch: Math . sqrt ( long ) 0 . 0 ) ) ;
rank: 784
score: 99.19172886439732
patch: ( standard CaMeL Deviation * long ) $NUMBER$ . 0 ) ) ;
rank: 784
score: 99.14119779146634
patch: ( standard CaMeL Deviation * / $NUMBER$ . 0 ) ) ;
rank: 784
score: 99.08070882161458
patch: ( $NUMBER$ . 0 ) ) ) ? $NUMBER$ . $NUMBER$
rank: 785
score: 99.30226045496323
patch: ( Erf . erf ( ( x - start ) ) ) ) ) ;
rank: 785
score: 99.29141438802084
patch: ( $NUMBER$ . 0 * $NUMBER$ . 0 . 0 ) ) ) ;
rank: 785
score: 99.17216273716518
patch: ( standard CaMeL Deviation * / 0 . 0 ) ) ) ;
rank: 785
score: 99.16484723772321
patch: standard CaMeL Deviation ) / sqrt ( $NUMBER$ . 0 ) ) ;
rank: 785
score: 99.1396484375
patch: ( double ) $NUMBER$ . 0 ) ) * / ;
rank: 785
score: 98.93258666992188
patch: ( $NUMBER$ . 0 ) / ( ) ) ) ;
rank: 786
score: 99.30124080882354
patch: ( standard CaMeL Deviation * Math . double CaMeL Value ( ) ) ) ) ;
rank: 786
score: 99.29023960658482
patch: ( 0 . 0 ] * standard CaMeL Deviation ) ) ) ;
rank: 786
score: 99.2011249248798
patch: ( ( 0 . 0 << $NUMBER$ ) ) ) ) ;
rank: 786
score: 99.1717529296875
patch: ( ( - sqrt * $NUMBER$ . 0 ) ) ) ) ;
rank: 786
score: 99.16428920200893
patch: Math . sqrt ( $NUMBER$ . 0 ) / $NUMBER$ ) ) ;
rank: 786
score: 99.13802083333333
patch: ( double ) 0 . 0 * $NUMBER$ ) ) ;
rank: 786
score: 99.0787353515625
patch: ( $NUMBER$ . 0 ) ) + 0 . 0 ) ;
rank: 786
score: 99.05755145733173
patch: ( this . ( $NUMBER$ . 0 ) ) ) ) ;
rank: 786
score: 98.92972412109376
patch: ( ( ) . 0 ) ) ) ;
rank: 787
score: 99.28989821213942
patch: ( standard CaMeL Deviation / 0 . 0 ) ) ) ;
rank: 787
score: 99.18924386160714
patch: ( double ) ( $NUMBER$ . 0 << $NUMBER$ ) ) ) ;
rank: 787
score: 99.17151817908653
patch: ( ( Integer * $NUMBER$ . 0 ) ) ) ) ;
rank: 787
score: 99.16396859975961
patch: ( 1 . 0 ) ) ) + $NUMBER$ . $NUMBER$ ;
rank: 787
score: 99.13785807291667
patch: $NUMBER$ . 0 ) ) * standard CaMeL Deviation ) ;
rank: 787
score: 99.07786051432292
patch: ( $NUMBER$ . 0 ) ) ) ? 1 . 0
rank: 788
score: 99.29702758789062
patch: ( length * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 788
score: 99.2891357421875
patch: ( ( standard CaMeL Deviation / $NUMBER$ . 0 ) ) ) ) ;
rank: 788
score: 99.17109898158482
patch: ( ( ( Integer ) $NUMBER$ . 0 ) ) ) ) ;
rank: 788
score: 99.16039100060097
patch: ( ( $NUMBER$ . 0 ) + mean ) ) ) ;
rank: 788
score: 99.07749586838942
patch: ( $NUMBER$ . 0 : 0 . 0 ) ) ) ;
rank: 788
score: 99.05687537560097
patch: ( standard CaMeL Deviation > 0 . 1 ) ) ) ;
rank: 788
score: 98.92803955078125
patch: ( ) . ( $NUMBER$ . 0 ) ) ) ;
rank: 789
score: 99.29520416259766
patch: ( standard CaMeL Deviation * Math . float $NUMBER$ . 0 ) ) ) ;
rank: 789
score: 99.28875732421875
patch: ( int ) standard CaMeL Deviation ) ) ;
rank: 789
score: 99.20064603365384
patch: Math . sqrt ( 0 . 0 ) ) ) ) ;
rank: 789
score: 99.18588692801339
patch: ( double ) $NUMBER$ . 0 , $NUMBER$ . 0 ) ) ;
rank: 789
score: 99.17029747596153
patch: ( standard CaMeL Deviation [ Math . 0 ) ) ) ;
rank: 789
score: 99.15992082868304
patch: mean ) * Math . sqrt ( $NUMBER$ . 0 ) ) ;
rank: 789
score: 98.92739868164062
patch: ( $NUMBER$ . ( ) . 0 ) ) ) ;
rank: 790
score: 99.29512293198529
patch: ( standard CaMeL Deviation * Math . char CaMeL Value ( ) ) ) ) ;
rank: 790
score: 99.16924579326923
patch: ( 1 . 0 ) * $NUMBER$ . 0 ) ) ;
rank: 790
score: 99.05611478365384
patch: ( $NUMBER$ << ( $NUMBER$ . 0 ) ) ) ) ;
rank: 790
score: 98.92530314127605
patch: ( ) ) * ( $NUMBER$ . 0 ) ) ;
rank: 791
score: 99.19745744977679
patch: Math . sqrt ( $NUMBER$ . 0 + sqrt ) ) ) ;
rank: 791
score: 99.07528921274039
patch: ( $NUMBER$ > ( $NUMBER$ . 0 ) ) ) ) ;
rank: 791
score: 99.0557861328125
patch: ( standard CaMeL Deviation * standard CaMeL Deviation ) ) ;
rank: 791
score: 98.9229227701823
patch: ( + ( $NUMBER$ . 0 ) ) ) ) ;
rank: 792
score: 99.29393813189338
patch: ( ( standard CaMeL Deviation * this . $NUMBER$ . 0 ) ) ) ) ;
rank: 792
score: 99.19712477463942
patch: ( 0 . ( 1 . 0 ) ) ) ) ;
rank: 792
score: 99.18451799665179
patch: ( double ) ( 1 . 0 . 0 ) ) ) ;
rank: 792
score: 99.16863141741071
patch: ( ! standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ;
rank: 792
score: 99.15885103665866
patch: ( $NUMBER$ . 0 , 0 . 0 ) ) ) ;
rank: 792
score: 99.133544921875
patch: ( double ) - $NUMBER$ . 0 ) ) ;
rank: 792
score: 99.05557016225961
patch: ( $NUMBER$ * ( 0 . 0 ) ) ) ) ;
rank: 792
score: 98.92290581597223
patch: ( ( x ) ) ) ) ;
rank: 793
score: 99.1951904296875
patch: Math . arraycopy ( $NUMBER$ . 0 . 0 ) ) ) ;
rank: 793
score: 99.18404134114583
patch: $NUMBER$ . 0 ) * $NUMBER$ . 0 ) ) ;
rank: 793
score: 99.16713169642857
patch: ( ( 0 . * $NUMBER$ . 0 ) ) ) ) ;
rank: 793
score: 99.13136800130208
patch: ( double ) $NUMBER$ . 0 ) ) / ) ;
rank: 793
score: 98.92201741536458
patch: ( & ( $NUMBER$ . 0 ) ) ) ) ;
rank: 794
score: 99.2864501953125
patch: 0 . ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ;
rank: 794
score: 99.19484299879808
patch: ( 0 . 0 - standard CaMeL Deviation ) ) ) ;
rank: 794
score: 99.18291766826923
patch: ( standard CaMeL Deviation * Math . Float ) ) ) ;
rank: 794
score: 99.16712297712054
patch: ( standard CaMeL Deviation * false . 0 ) ) ) ) ;
rank: 794
score: 99.156494140625
patch: ( 1 . 0 ) ) ) . erf ( $NUMBER$ ) ;
rank: 794
score: 99.1310147372159
patch: ( $NUMBER$ . 0 / $NUMBER$ ) ) ) ;
rank: 794
score: 99.07443472055289
patch: ( $NUMBER$ . 0 ) ) ) : cumulative CaMeL Probability ;
rank: 794
score: 99.052001953125
patch: ( standard CaMeL Deviation * Math . sqrt ) ) ) ;
rank: 794
score: 98.92058771306819
patch: ( ( ) / ( ) ) ) ) ;
rank: 795
score: 99.18096454326923
patch: ( double ) double ) ( $NUMBER$ . 0 ) ) ;
rank: 795
score: 99.16700090680804
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 $NUMBER$ ) ) ) ;
rank: 795
score: 99.12975135216347
patch: $NUMBER$ . 0 * $NUMBER$ ) ) / $NUMBER$ . 0 ;
rank: 796
score: 99.28778076171875
patch: ( double ) Erf . erf ( $NUMBER$ . 0 ) ) ) ;
rank: 796
score: 99.28626302083333
patch: ( super . standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ;
rank: 796
score: 99.15491594587054
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) != 0 ;
rank: 796
score: 99.12967623197116
patch: ( $NUMBER$ . 0 / standard CaMeL Deviation ) ) ) ;
rank: 796
score: 99.07230318509616
patch: ( $NUMBER$ < ( $NUMBER$ . 0 ) ) ) ) ;
rank: 796
score: 98.91851806640625
patch: ( ( ) ) . erf ( ) ) ) ;
rank: 797
score: 99.19330303485577
patch: ( 1 . 0 | $NUMBER$ . 0 ) ) ) ;
rank: 797
score: 99.16502162388393
patch: ( ( - sqrt * 0 . 0 ) ) ) ) ;
rank: 797
score: 99.15284075055804
patch: standard CaMeL Deviation ( ( x - mean ) ) ) ) ;
rank: 797
score: 98.91682572798295
patch: ( ( x / mean ) ) ) ) ;
rank: 798
score: 99.16487943209134
patch: Double . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 798
score: 99.15259728064903
patch: ( 1 . 0 ) / $NUMBER$ . 0 ) ) ;
rank: 798
score: 99.12718787560097
patch: ( $NUMBER$ . 0 ) ) ) - 1 . 0 ;
rank: 798
score: 99.0716044108073
patch: ( $NUMBER$ . 0 ) ) ) : 0 . $NUMBER$
rank: 798
score: 99.04510498046875
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) ?
rank: 798
score: 98.91645951704545
patch: ( x / $NUMBER$ . 0 ) ) ) ;
rank: 799
score: 99.19228786892361
patch: ( 0 . 0 ) ) ) ;
rank: 799
score: 99.1239346590909
patch: ( standard CaMeL Deviation - $NUMBER$ ) ) ) ;
rank: 799
score: 98.91378784179688
patch: ( Math . sqrt 1 . 0 ) ) ) ;
rank: 800
score: 99.1920166015625
patch: ( 0 . 0 + 0 . 0 ) ) ) ;
rank: 800
score: 99.16435895647321
patch: ( ( ( * $NUMBER$ . 0 ) ) ) ) ) ;
rank: 800
score: 99.14980061848958
patch: ( ( 1 . 0 ) 0 ) ) ) ;
rank: 800
score: 99.0699932391827
patch: ( Math . sqrt ( $NUMBER$ . ) ) ) ) ;
rank: 800
score: 98.91297496448864
patch: ( x - sqrt ( ) ) ) ) ;
rank: 801
score: 99.17247517903645
patch: ( float ) ( 1 . 0 ) ) ) ;
rank: 801
score: 99.16431535993304
patch: ( ( * sqrt * 0 . 0 ) ) ) ) ;
rank: 801
score: 99.14947979266827
patch: ( ( $NUMBER$ . 0 ) * x ) ) ) ;
rank: 801
score: 99.12253981370192
patch: ( double ) ( double ) standard CaMeL Deviation ) ) ;
rank: 802
score: 99.27814190204327
patch: ( standard CaMeL Deviation & $NUMBER$ . 0 ) ) ) ;
rank: 802
score: 99.27728271484375
patch: ( standard CaMeL Deviation * Math . double $NUMBER$ . 0 ) ) ) ;
rank: 802
score: 99.17214133522727
patch: ( double ) 1 . 0 ) ) ) ;
rank: 802
score: 99.14913504464286
patch: ( ( $NUMBER$ . 0 ) 0 . $NUMBER$ ) ) ) ;
rank: 802
score: 99.122216796875
patch: ( double ) 0 . $NUMBER$ ) ) ;
rank: 802
score: 99.03675426136364
patch: ( $NUMBER$ / 0 . 0 ) ) ) ;
rank: 803
score: 99.27668762207031
patch: ( standard CaMeL Deviation * Math . float ) $NUMBER$ . 0 ) ) ;
rank: 803
score: 99.18976702008929
patch: ( $NUMBER$ . 0 ? $NUMBER$ . 0 ] ) ) ) ;
rank: 803
score: 99.16330392020089
patch: ( - standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ;
rank: 803
score: 99.14649376502403
patch: ( 1 . 0 + x - mean ) ) ) ;
rank: 803
score: 99.068359375
patch: ( $NUMBER$ . 0 ) ) ) + cumulative CaMeL Probability ;
rank: 803
score: 98.90760294596355
patch: ( Math . sqrt ( x ) ) ) ) ;
rank: 804
score: 99.27669583834134
patch: ( standard CaMeL Deviation <= standard CaMeL Deviation ) ) ) ;
rank: 804
score: 99.18902587890625
patch: ( double ) 0 . 0 . 0 ) ) ;
rank: 804
score: 99.1461651141827
patch: standard CaMeL Deviation ) / ( standard CaMeL Deviation ) ) ;
rank: 804
score: 99.12105618990384
patch: $NUMBER$ . 0 ) ) * Math . sqrt ( ) ;
rank: 804
score: 98.9067049893466
patch: ( ( $NUMBER$ . $NUMBER$ ) ) ) ) ;
rank: 805
score: 99.27650669642857
patch: ( 1 . 0 ] * $NUMBER$ . 0 ) ) ) ;
rank: 805
score: 99.27488490513393
patch: ( sqrt ( $NUMBER$ . 0 . 0 ) ) ) ) ;
rank: 805
score: 99.16277204241071
patch: ( ( $NUMBER$ . 0 ) * $NUMBER$ . ) ) ) ;
rank: 805
score: 99.1201171875
patch: ( standard CaMeL Deviation * length ) ) ) ;
rank: 805
score: 99.06778658353366
patch: ( ( x - mean ) . 0 ) ) ) ;
rank: 805
score: 99.0277099609375
patch: ( $NUMBER$ == 0 . 0 ) ) false ) ;
rank: 805
score: 98.90497436523438
patch: ( $NUMBER$ . 0 1 ) ) ) ;
rank: 806
score: 99.16269155649039
patch: ( 0 . 0 ) * $NUMBER$ . 0 ) ) ;
rank: 806
score: 99.1192626953125
patch: ( double ) Math . sqrt ( $NUMBER$ . 0 ) ;
rank: 806
score: 99.02713012695312
patch: ( standard CaMeL Deviation * - mean ) ) ) ;
rank: 806
score: 98.90480735085227
patch: ( $NUMBER$ * standard CaMeL Deviation ) ) ) ;
rank: 807
score: 99.27481079101562
patch: 0 . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 807
score: 99.27336120605469
patch: ( standard CaMeL Deviation * Math . sqrt ( 1 . 0 ) ) )
rank: 807
score: 99.18709309895833
patch: Math . sqrt ( Double . 0 ) ) ) ;
rank: 807
score: 99.16162109375
patch: ( ( float * $NUMBER$ . 0 ) ) ) ) ;
rank: 807
score: 99.1603291829427
patch: $NUMBER$ . 0 ) / $NUMBER$ . 0 ) ) ;
rank: 807
score: 99.11915940504808
patch: ( $NUMBER$ . 0 ) ) ) / $NUMBER$ . $NUMBER$ ;
rank: 807
score: 99.06158447265625
patch: ( $NUMBER$ . 0 ) ) ) * 0 . $NUMBER$
rank: 807
score: 99.02274169921876
patch: Math . sqrt ( $NUMBER$ ) ) ) ;
rank: 807
score: 98.90221058238636
patch: ( x - standard CaMeL Deviation ) ) ) ;
rank: 808
score: 99.15994966947116
patch: $NUMBER$ . 0 ) * ( 0 . 0 ) ) ;
rank: 808
score: 99.15977125901442
patch: ( * sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 808
score: 99.11836751302083
patch: ( double ) $NUMBER$ . 0 ) ) + $NUMBER$ ;
rank: 808
score: 99.06070963541667
patch: ( $NUMBER$ . 0 ) ) ) ? 0 < $NUMBER$
rank: 808
score: 99.02189127604167
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ instanceof
rank: 808
score: 98.9020663174716
patch: ( standard CaMeL Deviation * Math ) ) ) ;
rank: 809
score: 99.27345493861607
patch: ( $NUMBER$ . 0 ? $NUMBER$ . 0 : ) ) ) ;
rank: 809
score: 99.1848856608073
patch: Double . sqrt ( 0 . 0 ) ) ) ;
rank: 809
score: 99.15914481026786
patch: ( ( * sqrt * $NUMBER$ . 0 ) ) ) ) ;
rank: 809
score: 99.13887845552884
patch: ( 1 . 0 + 0 . 0 ) ) ) ;
rank: 809
score: 99.11686197916667
patch: ( double ) $NUMBER$ . 0 ) ) + ) ;
rank: 809
score: 99.05584161931819
patch: ( $NUMBER$ . 0 ) ) ) : $NUMBER$ ;
rank: 810
score: 99.2718734741211
patch: ( Math . sqrt ( Math . 0 . 0 ) ) ) ) ;
rank: 810
score: 99.27177211216518
patch: ( * standard CaMeL Deviation - $NUMBER$ . 0 ) ) ) ;
rank: 810
score: 99.18459647042411
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) ; * /
rank: 810
score: 99.1370098407452
patch: ( $NUMBER$ . 0 ) ) / standard CaMeL Deviation ) ;
rank: 810
score: 99.11583455403645
patch: ( double ) $NUMBER$ . 0 + $NUMBER$ ) ) ;
rank: 810
score: 99.0555419921875
patch: ( $NUMBER$ . 0 ) ) ) + 1 . $NUMBER$
rank: 810
score: 98.9011563387784
patch: ( standard CaMeL Deviation * } ) ) ) ;
rank: 811
score: 99.26994977678571
patch: ( 0 . 0 * $NUMBER$ . 0 ) ) ) ) ;
rank: 811
score: 99.13680326021634
patch: ( $NUMBER$ . 0 ) ) ) - $NUMBER$ . $NUMBER$ ;
rank: 811
score: 99.10866292317708
patch: ( double ) $NUMBER$ . 0 / $NUMBER$ ) ) ;
rank: 811
score: 99.05518687855114
patch: ( $NUMBER$ > $NUMBER$ . 0 ) ) ) ;
rank: 811
score: 98.89975992838542
patch: ( long ) ( 1 . 0 ) ) ) ;
rank: 812
score: 99.15771484375
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) .
rank: 812
score: 99.14923095703125
patch: ( float ) ( 0 . 0 ) ) ) ;
rank: 812
score: 99.05237833658855
patch: ( $NUMBER$ . 0 + $NUMBER$ . 0 ) ) )
rank: 812
score: 98.89607377485795
patch: ( ( x - x ) ) ) ) ;
rank: 813
score: 99.26969909667969
patch: ( this . erf ( ( x - x ) ) ) ) ) ;
rank: 813
score: 99.2684814453125
patch: ( $NUMBER$ . 0 ] ) ) ) ;
rank: 813
score: 99.14909224076705
patch: ( standard CaMeL Deviation << $NUMBER$ ) ) ) ;
rank: 813
score: 99.10469563802083
patch: ( standard CaMeL Deviation ) $NUMBER$ . 0 ) ) ;
rank: 813
score: 99.05210182883523
patch: ( $NUMBER$ . 0 ) ) ) * $NUMBER$ ;
rank: 813
score: 98.89516194661458
patch: ( this . $NUMBER$ . ( ) ) ) ) ;
rank: 814
score: 99.26833670479911
patch: ( int ) standard CaMeL Deviation * standard CaMeL Deviation ) ) ;
rank: 814
score: 99.15688852163461
patch: ( ( double ) $NUMBER$ . 0 ) ) ) ) ;
rank: 814
score: 99.13307542067308
patch: ( $NUMBER$ . 0 + 1 . 0 ) ) ) ;
rank: 814
score: 99.01031494140625
patch: ( this . erf ( $NUMBER$ ) ) ) ) ;
rank: 815
score: 99.26585388183594
patch: ( long ) Erf . erf ( $NUMBER$ . 0 ) ) ) ;
rank: 815
score: 99.1566913311298
patch: ( ( $NUMBER$ . 0 ) * $NUMBER$ ) ) ) ;
rank: 815
score: 99.1456768329327
patch: $NUMBER$ . 0 ) + ( $NUMBER$ . 0 ) ) ;
rank: 815
score: 99.12935697115384
patch: ( 1 . ( $NUMBER$ . 0 ) ) ) ) ;
rank: 815
score: 99.10152180989583
patch: ( double ) $NUMBER$ . 0 ) ) + $STRING$ ;
rank: 815
score: 99.0460917154948
patch: ( $NUMBER$ . 0 ) ) ) ? 0 > $NUMBER$
rank: 815
score: 98.89157104492188
patch: ( $NUMBER$ * $NUMBER$ . 0 ) ) ) ) ;
rank: 816
score: 99.2636210123698
patch: ( ( long ) $NUMBER$ . 0 ) ) ) ;
rank: 816
score: 99.14563927283653
patch: 1 . 0 ) * ( 1 . 0 ) ) ;
rank: 816
score: 99.12930063100961
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) + ;
rank: 816
score: 99.10065252130681
patch: ( $NUMBER$ . 0 ) ) ) * ) ;
rank: 816
score: 99.04529825846355
patch: ( $NUMBER$ . 0 ) ) ) ? 1 == 0
rank: 817
score: 99.17950439453125
patch: ( ( / 1 . 0 ) ) ) ) ;
rank: 817
score: 99.15548270089286
patch: ( standard CaMeL Deviation * true . 0 ) ) ) ) ;
rank: 817
score: 99.12760103665866
patch: ( 1 . 0 ) / 0 . 0 ) ) ;
rank: 817
score: 99.100390625
patch: ( $NUMBER$ . 0 ) ) ) / ;
rank: 817
score: 99.04429117838542
patch: ( $NUMBER$ . 0 ) ) ) * 0 . 0
rank: 817
score: 99.00497436523438
patch: Math . mean ( $NUMBER$ . 0 ) ) ) ;
rank: 817
score: 98.89093017578125
patch: ( $NUMBER$ . 0 $NUMBER$ ) ) ) ;
rank: 818
score: 99.15302385602679
patch: ( ( $NUMBER$ . * $NUMBER$ . 0 ) ) ) ) ;
rank: 818
score: 99.14015706380208
patch: Math . floor ( $NUMBER$ . 0 ) ) ) ;
rank: 818
score: 99.12677471454327
patch: ( ( x - x - mean ) ) ) ) ;
rank: 818
score: 99.09840698242188
patch: ( 1 . 0 ) ) ) ) ;
rank: 818
score: 99.04341264204545
patch: ( $NUMBER$ >= $NUMBER$ . 0 ) ) ) ;
rank: 818
score: 99.00316365559895
patch: Math . sqrt ( $NUMBER$ . length ) ) ) ;
rank: 818
score: 98.89093017578125
patch: ( * standard CaMeL Deviation . 0 ) ) ) ;
rank: 819
score: 99.17919921875
patch: ( double + $NUMBER$ . 0 ) ) ) ;
rank: 819
score: 99.13978160511364
patch: ( float ) $NUMBER$ . 0 ) ) ) ;
rank: 819
score: 99.04022827148438
patch: ( $NUMBER$ . 0 ) ) ) * $NUMBER$
rank: 819
score: 99.0025126139323
patch: ( $NUMBER$ . 0 ) ) 0 . 0 ) ;
rank: 819
score: 98.890869140625
patch: ( standard CaMeL Deviation >> ( ) ) ) ) ;
rank: 820
score: 99.1786776455966
patch: ( standard CaMeL Deviation [ 0 ) ) ) ;
rank: 820
score: 99.12389197716347
patch: ( ( standard CaMeL Deviation * x ) ) ) ) ;
rank: 820
score: 99.0385986328125
patch: ( $NUMBER$ . 0 ) ) true ) ;
rank: 820
score: 99.00234985351562
patch: ( standard CaMeL Deviation <= 0 . 0 ) ) ;
rank: 821
score: 99.1776123046875
patch: ( ( 0 . 0 + sqrt ) ) ) ) ;
rank: 821
score: 99.0945536295573
patch: ( standard CaMeL Deviation * $STRING$ . ) ) ) ;
rank: 821
score: 99.03786214192708
patch: ( Math . sqrt ( $NUMBER$ == 0 . 0 )
rank: 822
score: 99.25653076171875
patch: ( Math . sqrt ( 1 . 0 . 0 ) ) ) ) ;
rank: 822
score: 99.17722731370192
patch: ( 1 . 0 - $NUMBER$ . 0 ) ) ) ;
rank: 822
score: 99.15074811662946
patch: ( standard CaMeL Deviation * 0 . 0 ) ) , ) ;
rank: 822
score: 99.094482421875
patch: ( $NUMBER$ . 0 * $NUMBER$ ) ) ) ) ;
rank: 822
score: 99.00117631392045
patch: ( $NUMBER$ . 0 - mean ) ) ) ;
rank: 823
score: 99.25433349609375
patch: ( standard CaMeL Deviation * new $NUMBER$ . 0 ) ) ) ;
rank: 823
score: 98.88438831676136
patch: ( $STRING$ . length ( ) ) ) ) ;
rank: 824
score: 99.1742655436198
patch: ( double ) Math . 0 . 0 ) ) ;
rank: 824
score: 99.14942345252403
patch: ( standard CaMeL Deviation ] 0 . 0 ) ) ) ;
rank: 824
score: 99.13202373798077
patch: ( double ) sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 824
score: 99.11559448242187
patch: ( 1 . 0 0 ) ) ) ;
rank: 824
score: 99.0911356608073
patch: ( double ) $NUMBER$ * $NUMBER$ . 0 ) ) ;
rank: 824
score: 98.99932861328125
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) +
rank: 824
score: 98.88375854492188
patch: ( $NUMBER$ . * $NUMBER$ . 0 ) ) ) ;
rank: 825
score: 99.14773559570312
patch: ( ( * 1 . 0 ) ) ) ) ;
rank: 825
score: 99.08692423502605
patch: Deviation . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 825
score: 98.99913533528645
patch: Erf . erf ( ( ) ) ) ) ;
rank: 826
score: 99.08669026692708
patch: $NUMBER$ . 0 ) ) ) / $NUMBER$ . 0 ;
rank: 826
score: 99.02527965198864
patch: Math . sqrt ( $NUMBER$ . 0 ) ) )
rank: 826
score: 98.87943115234376
patch: ( ) . erf ( ) ) ) ;
rank: 827
score: 99.17307535807292
patch: ( ( 0 . 0 . ) ) ) ) ;
rank: 827
score: 99.13140869140625
patch: ( double ) $NUMBER$ . $NUMBER$ ) ) ;
rank: 827
score: 99.08630981445313
patch: $NUMBER$ . 0 ) ) * / ) ;
rank: 827
score: 99.02348188920455
patch: ( $NUMBER$ . ( $NUMBER$ ) ) ) ) ;
rank: 827
score: 98.99733664772727
patch: ( standard CaMeL Deviation - mean ) ) ) ;
rank: 827
score: 98.87409002130681
patch: ( ( standard CaMeL Deviation ) ) ) ) ;
rank: 828
score: 99.24878801618304
patch: ( Long . abs ( $NUMBER$ . 0 ) ) ) ) ;
rank: 828
score: 99.17117309570312
patch: Double . abs ( $NUMBER$ . 0 ) ) ) ;
rank: 828
score: 99.14669095552884
patch: ( ( ( 0 . 0 ) ) ) ) ) ;
rank: 828
score: 99.11150653545673
patch: Math . sqrt ( $NUMBER$ . 0 ) 0 ) ) ;
rank: 828
score: 99.08462524414062
patch: ( standard CaMeL Deviation * 1 . 0 ) ) )
rank: 828
score: 99.02235921223958
patch: ( sqrt ( 1 . 0 ) ) ) ) ;
rank: 828
score: 98.99585978190105
patch: ( standard CaMeL Deviation * ) . 0 ) ) ;
rank: 828
score: 98.8740567294034
patch: ( x * $NUMBER$ . 0 ) ) ) ;
rank: 829
score: 99.23777553013393
patch: double . erf ( ( x - mean ) ) ) ) ;
rank: 829
score: 99.17084209735577
patch: ( ( Integer * 0 . 0 ) ) ) ) ;
rank: 829
score: 99.14645620492789
patch: ( standard CaMeL Deviation > Math . 0 ) ) ) ;
rank: 829
score: 99.13116924579327
patch: ( double ) ( float ) $NUMBER$ . 0 ) ) ;
rank: 829
score: 99.08457253196023
patch: ( standard CaMeL Deviation * double ) ) ) ;
rank: 829
score: 98.9957608309659
patch: ( $NUMBER$ . 0 + x ) ) ) ;
rank: 830
score: 99.24794224330357
patch: ( byte ) standard CaMeL Deviation * $NUMBER$ . 0 ) ) ;
rank: 830
score: 99.11061448317308
patch: ( ( $NUMBER$ . 0 ) * mean ) ) ) ;
rank: 830
score: 99.08452814275569
patch: ( $NUMBER$ . 0 ) ) ) - 1 ;
rank: 830
score: 98.99434407552083
patch: ( standard CaMeL Deviation != 0 . 0 ) ) ;
rank: 831
score: 99.16983032226562
patch: ( int ) ( 0 . 0 ) ) ) ;
rank: 831
score: 99.1433574969952
patch: ( standard CaMeL Deviation * this . $NUMBER$ ) ) ) ;
rank: 831
score: 99.1104736328125
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) false ;
rank: 831
score: 99.0844217936198
patch: ( int ) standard CaMeL Deviation * $NUMBER$ ) ) ;
rank: 831
score: 99.01776123046875
patch: ( $NUMBER$ . 0 ) ) ) * 1 . $NUMBER$
rank: 831
score: 98.99384099786931
patch: ( $NUMBER$ : 0 . 0 ) ) ) ;
rank: 832
score: 99.24581204927884
patch: ( $NUMBER$ . 0 * $NUMBER$ . $NUMBER$ ) ) ) ;
rank: 832
score: 99.1697489420573
patch: ( standard CaMeL Deviation ; 0 . 0 ) ) ;
rank: 832
score: 99.14312274639423
patch: ( ( float * 0 . 0 ) ) ) ) ;
rank: 832
score: 99.1260098544034
patch: $NUMBER$ . 0 ) * $NUMBER$ . 0 ) ;
rank: 832
score: 99.10984450120192
patch: ( standard CaMeL Deviation ) ) ) . erf ( ) ;
rank: 832
score: 99.07884632457386
patch: ( 1 . 0 ) ) ) + 1 ;
rank: 832
score: 99.01575724283855
patch: ( $NUMBER$ . 0 ) ) ) ? $NUMBER$ == 0
rank: 833
score: 99.23531341552734
patch: ( ( standard CaMeL Deviation * double ) $NUMBER$ . 0 ) ) ) ;
rank: 833
score: 99.1095721905048
patch: ( 1 . 0 ) , $NUMBER$ . 0 ) ) ;
rank: 833
score: 99.0784912109375
patch: ( double ) Double . MIN _ VALUE ) ) ;
rank: 833
score: 98.9898173014323
patch: ( standard CaMeL Deviation * - $NUMBER$ ) ) ) ;
rank: 834
score: 99.23517608642578
patch: ( Math . Double . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 834
score: 99.13958270733173
patch: ( ( 0 . 0 ) ) . 0 ) ) ;
rank: 834
score: 99.1251690204327
patch: $NUMBER$ . 0 ) ) + 0 . 0 * $NUMBER$ ;
rank: 834
score: 99.10953463040866
patch: ( 1 . 0 , $NUMBER$ . 0 ) ) ) ;
rank: 834
score: 99.07790305397727
patch: ( standard CaMeL Deviation >> $NUMBER$ ) ) ) ;
rank: 835
score: 99.24083455403645
patch: ( ( double ) standard CaMeL Deviation ) ) ) ;
rank: 835
score: 99.23492431640625
patch: ( Math . sqrt ( $NUMBER$ . 0 ) + mean ) ) ) ;
rank: 835
score: 99.16778094951923
patch: ( ( $NUMBER$ . 0 . $NUMBER$ ) ) ) ) ;
rank: 835
score: 99.10931396484375
patch: ( $NUMBER$ . 0 ) ) ) . ( ) ;
rank: 835
score: 99.07741292317708
patch: ( standard CaMeL Deviation / $NUMBER$ . ) ) ) ;
rank: 835
score: 98.98877970377605
patch: Math . iterator ( $NUMBER$ . 0 ) ) ) ;
rank: 835
score: 98.8699462890625
patch: ( long ) 1 . 0 ) ) ;
rank: 836
score: 99.2345199584961
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 . 0 )
rank: 836
score: 99.16769643930289
patch: ( ( 0 . 1 . 0 ) ) ) ) ;
rank: 836
score: 99.1356201171875
patch: ( standard CaMeL Deviation * Number . 0 ) ) ) ;
rank: 836
score: 99.10874586838942
patch: ( $NUMBER$ . 0 ) / standard CaMeL Deviation ) ) ;
rank: 836
score: 99.0762430826823
patch: $NUMBER$ . 0 ) ) * Math . sqrt ( ;
rank: 836
score: 98.98817027698864
patch: ( $NUMBER$ & 0 . 0 ) ) ) ;
rank: 836
score: 98.86809624565973
patch: ( x - x ) ) ) ;
rank: 837
score: 99.16764009915866
patch: ( ( 1 . 0 . $NUMBER$ ) ) ) ) ;
rank: 837
score: 99.13556377704327
patch: ( standard CaMeL Deviation * length . 0 ) ) ) ;
rank: 837
score: 99.1051494891827
patch: ( ( standard CaMeL Deviation * mean ) ) ) ) ;
rank: 837
score: 99.0119295987216
patch: ( sqrt * $NUMBER$ . 0 ) ) ) ;
rank: 837
score: 98.86760919744319
patch: ( $NUMBER$ . 0 ) ) ) + ) ;
rank: 838
score: 99.23369140625
patch: ( new Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 838
score: 99.16663707386364
patch: ( 0 . 0 . 0 ) ) ) ;
rank: 838
score: 99.1344463641827
patch: ( standard CaMeL Deviation * list . 0 ) ) ) ;
rank: 838
score: 99.07480875651042
patch: ( 1 . 0 * double ) $NUMBER$ ) ) ;
rank: 838
score: 98.97923583984375
patch: ( standard CaMeL Deviation ] ) ) ) ;
rank: 839
score: 99.2394510904948
patch: ( ( Integer ) $NUMBER$ . 0 ) ) ) ;
rank: 839
score: 99.23257446289062
patch: ( standard CaMeL Deviation * Math . float 0 . 0 ) ) ) ;
rank: 839
score: 99.16541466346153
patch: ( Math . sqrt - $NUMBER$ . 0 ) ) ) ;
rank: 839
score: 99.1340801532452
patch: ( ( standard CaMeL Deviation * null ) ) ) ) ;
rank: 839
score: 99.12032063802083
patch: ( double ) this . $NUMBER$ . 0 ) ) ;
rank: 839
score: 99.10443584735577
patch: Math . sqrt ( $NUMBER$ . 0 ) , ) ) ;
rank: 839
score: 98.97848510742188
patch: ( this . erf . ( ) ) ) ) ;
rank: 839
score: 98.86497913707386
patch: ( else . erf ( ) ) ) ) ;
rank: 840
score: 99.23221588134766
patch: ( Math . sqrt ( $NUMBER$ . 0 ) + x ) ) ) ;
rank: 840
score: 99.10340294471153
patch: ( 1 . 0 ) ) ) + 1 . $NUMBER$ ;
rank: 840
score: 99.07146661931819
patch: ( 1 . 0 * double ) ) ) ;
rank: 840
score: 98.86402476917614
patch: ( $NUMBER$ . 0 ( ) ) ) ) ;
rank: 841
score: 99.2364501953125
patch: * Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 841
score: 99.1623065655048
patch: ( 1 . 0 / 0 . 0 ) ) ) ;
rank: 841
score: 99.07005818684895
patch: ( $NUMBER$ . 0 * double ) 1 ) ) ;
rank: 841
score: 98.9737060546875
patch: ( $NUMBER$ == 0 . 0 ) ) ;
rank: 842
score: 99.23634556361607
patch: true . Math . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 842
score: 99.06988525390625
patch: ( standard CaMeL Deviation / $NUMBER$ . 0 ) ) ;
rank: 842
score: 99.009033203125
patch: ( $NUMBER$ . 0 ) ) * $NUMBER$ ) ;
rank: 842
score: 98.97130237926136
patch: ( $NUMBER$ << 0 . 0 ) ) ) ;
rank: 842
score: 98.8566650390625
patch: ( ! $NUMBER$ . 0 ) ) ) ;
rank: 843
score: 99.231103515625
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ] ;
rank: 843
score: 99.13197835286458
patch: Integer . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 843
score: 99.11839803059895
patch: ( double ) Integer . MAX _ VALUE ) ) ;
rank: 843
score: 99.06987970525569
patch: ( double ) standard CaMeL Deviation ) ) ) ;
rank: 843
score: 98.97081502278645
patch: sqrt standard CaMeL Deviation * 0 . 0 ) ) ;
rank: 843
score: 98.85631214488636
patch: ( ( ) . ( ) ) ) ) ;
rank: 844
score: 99.23406512920673
patch: ( standard CaMeL Deviation : $NUMBER$ . 0 ) ) ) ;
rank: 844
score: 99.23049926757812
patch: ( this . erf ( ( x - start ) ) ) ) ) ;
rank: 844
score: 99.11576021634616
patch: ( $NUMBER$ . 0 ) ) + 1 . 0 ) ;
rank: 844
score: 99.10054837740384
patch: ( ( $NUMBER$ . 0 ) ) ) ) . 0 ;
rank: 844
score: 99.0693359375
patch: ( 1 . 0 ) ) ) * / ) ;
rank: 844
score: 98.85565185546875
patch: ( - 1 . 0 ) ) ) ;
rank: 845
score: 99.23033905029297
patch: ( x - Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 845
score: 99.1611572265625
patch: ( / $NUMBER$ . 0 ) ) ) ;
rank: 845
score: 99.12862141927083
patch: ( ( Double ) $NUMBER$ . 0 ) ) ) ;
rank: 845
score: 99.09979717548077
patch: ( 0 . 0 ) ) ) . erf ( ) ;
rank: 845
score: 99.06783040364583
patch: ( standard CaMeL Deviation * long ) $NUMBER$ ) ) ;
rank: 845
score: 98.97031656901042
patch: ( standard CaMeL Deviation * Erf ) ) ) ;
rank: 845
score: 98.85530229048295
patch: ( x - 0 . 0 ) ) ) ;
rank: 846
score: 99.15999661959134
patch: standard CaMeL Deviation * Math . sqrt ( ) ) ) ;
rank: 846
score: 99.1284930889423
patch: ( standard CaMeL Deviation * this . 0 ) ) ) ;
rank: 846
score: 99.06719360351562
patch: ( $NUMBER$ . 0 ) ) ) + ;
rank: 846
score: 99.00810102982955
patch: ( $NUMBER$ . 0 ) ) ) + 0 ;
rank: 846
score: 98.95880889892578
patch: ( - mean ) ) ) ;
rank: 846
score: 98.85529119318181
patch: ( ( x > mean ) ) ) ) ;
rank: 847
score: 99.22112630208333
patch: ( case Math . sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 847
score: 99.15981820913461
patch: ( 1 . ( 1 . 0 ) ) ) ) ;
rank: 847
score: 99.12471829927884
patch: ( standard CaMeL Deviation * null . $NUMBER$ ) ) ) ;
rank: 847
score: 99.11426720252403
patch: ( Integer . 0 + $NUMBER$ . 0 ) ) ) ;
rank: 847
score: 99.0980694110577
patch: ( ( $NUMBER$ . 0 - $NUMBER$ ) ) ) ) ;
rank: 847
score: 99.06329900568181
patch: ( standard CaMeL Deviation + $STRING$ ) ) ) ;
rank: 847
score: 99.00344016335227
patch: ( Math != 0 . 0 ) ) ) ;
rank: 847
score: 98.95654296875
patch: ( $NUMBER$ . - mean ) ) ) ;
rank: 847
score: 98.8549471768466
patch: ( ( x + mean ) ) ) ) ;
rank: 848
score: 99.1597391764323
patch: ( double ) Math . sqrt ( ) ) ) ;
rank: 848
score: 99.09789021809895
patch: mean ) / sqrt ( $NUMBER$ . 0 ) ) ;
rank: 848
score: 99.0619608561198
patch: ( double ) standard CaMeL Deviation * $NUMBER$ . 0 ;
rank: 848
score: 98.95619895241477
patch: ( mean * 0 . 0 ) ) ) ;
rank: 848
score: 98.85396118164063
patch: standard CaMeL Deviation * ( ) ) ) ;
rank: 849
score: 99.22902268629808
patch: 0 . 0 ? $NUMBER$ : 0 . 0 ) ) ;
rank: 849
score: 99.06178792317708
patch: $NUMBER$ . 0 ) ) * standard CaMeL Deviation * /
rank: 849
score: 99.0025634765625
patch: ( $NUMBER$ . 0 ) ) ) ? 0 ;
rank: 849
score: 98.9542236328125
patch: sqrt ( ) . erf ( ) ) ) ;
rank: 849
score: 98.85333806818181
patch: ( $NUMBER$ . 0 ) ) ) ; ) ;
rank: 850
score: 99.22802124023437
patch: ( byte ) 0 . 0 ) ) ;
rank: 850
score: 99.2158954326923
patch: ( ( standard CaMeL Deviation * $STRING$ ) ) ) ) ;
rank: 850
score: 99.09589092548077
patch: ( $NUMBER$ . 0 ) , 0 . 0 ) ) ;
rank: 850
score: 99.0017422762784
patch: ( $NUMBER$ . 0 ) * $NUMBER$ ) ) ;
rank: 851
score: 99.21356201171875
patch: ( standard CaMeL Deviation * Math . float ) $NUMBER$ ) ) ;
rank: 851
score: 99.1566874186198
patch: ( standard CaMeL Deviation ) 0 . 0 ) ) ;
rank: 851
score: 99.12185434194711
patch: ( standard CaMeL Deviation * 0 . 0 ) ) ) ||
rank: 851
score: 99.10600142045455
patch: $NUMBER$ . 0 ) / $NUMBER$ . 0 ) ;
rank: 851
score: 99.05954996744792
patch: ( double ) 1 . 0 * $NUMBER$ ) ) ;
rank: 851
score: 98.99759928385417
patch: ( Math . ( $NUMBER$ . 0 ) ) ) )
rank: 851
score: 98.84767659505208
patch: ( x - sqrt ) ) ) ;
rank: 852
score: 99.21129557291667
patch: ( standard CaMeL Deviation == new double [ 0 ] ) ) ) ;
rank: 852
score: 99.10300699869792
patch: ( double [ ] ) 0 . 0 ) ) ;
rank: 852
score: 99.09519606370192
patch: ( ( $NUMBER$ . 0 ) 0 . ) ) ) ;
rank: 852
score: 99.05742853338069
patch: ( standard CaMeL Deviation + 1 ) ) ) ;
rank: 853
score: 99.22591458834134
patch: ( standard CaMeL Deviation > $NUMBER$ . $NUMBER$ ) ) ) ;
rank: 853
score: 99.15304800180289
patch: Math . sqrt ( $NUMBER$ . 0 ) $NUMBER$ ) ) ;
rank: 853
score: 99.1026944247159
patch: ( standard CaMeL Deviation + $NUMBER$ ) ) ) ;
rank: 853
score: 99.09511155348558
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) ] ;
rank: 853
score: 99.05662027994792
patch: ( standard CaMeL Deviation * . 0 ) ) ) ;
rank: 853
score: 98.94611150568181
patch: sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 854
score: 99.2236083984375
patch: ( * standard CaMeL Deviation ) ) ) ;
rank: 854
score: 99.2007080078125
patch: ( standard CaMeL Deviation != null ) + $NUMBER$ . 0 ) ) ;
rank: 854
score: 99.1167743389423
patch: ( standard CaMeL Deviation * false . $NUMBER$ ) ) ) ;
rank: 854
score: 99.10219319661458
patch: OS . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 854
score: 99.09464205228366
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) ? ;
rank: 854
score: 98.94517933238636
patch: ( standard CaMeL Deviation > $NUMBER$ ) ) ) ;
rank: 854
score: 98.84507057883523
patch: ( ( x * mean ) ) ) ) ;
rank: 855
score: 99.22290978064903
patch: ( standard CaMeL Deviation << $NUMBER$ . 0 ) ) ) ;
rank: 855
score: 99.09283916766827
patch: mean ) / ( ( $NUMBER$ . 0 ) ) ) ;
rank: 855
score: 98.99204711914062
patch: ( $NUMBER$ . 0 ) ) ) ? 0
rank: 855
score: 98.9447021484375
patch: ( erf * 0 . 0 ) ) ) ;
rank: 856
score: 99.1970947265625
patch: ( ( $NUMBER$ . 0 ) , 0 . 0 ) ) ) ;
rank: 856
score: 99.10032145182292
patch: ( standard CaMeL Deviation - standard CaMeL Deviation ) ) ;
rank: 856
score: 99.09255746694711
patch: Math . sqrt ( $NUMBER$ . 0 ) ) ) 1 ;
rank: 856
score: 99.0551045735677
patch: ( double ) $NUMBER$ ) ) / $NUMBER$ . 0 ;
rank: 856
score: 98.99041748046875
patch: ( ~ ( $NUMBER$ . 0 ) ) ) ) ;
rank: 856
score: 98.94412231445312
patch: ( $NUMBER$ . 0 + ) ) ) ;
rank: 857
score: 99.1964599609375
patch: ( 1 . 0 ) ) * ( 1 . 0 ) ) ;
rank: 857
score: 99.14760335286458
patch: Math . sleep ( $NUMBER$ . 0 ) ) ) ;
rank: 857
score: 99.09214274088542
patch: ( ( $NUMBER$ . $NUMBER$ ) 0 ) ) ) ;
rank: 857
score: 98.98963512073864
patch: ( $NUMBER$ . 0 - $NUMBER$ ) ) ) ;
rank: 857
score: 98.84046519886364
patch: ( super . erf ( ) ) ) ) ;
rank: 858
score: 99.2200176532452
patch: ( ( double ) $NUMBER$ . 0 ] ) ) ) ;
rank: 858
score: 99.1942138671875
patch: ( Erf . erf ( 0 . 0 ) ) ) ) ;
rank: 858
score: 99.14668782552083
patch: ( ( Double ) 0 . 0 ) ) ) ;
rank: 858
score: 99.11328125
patch: ( ( standard CaMeL Deviation * true ) ) ) ) ;
rank: 858
score: 99.0960693359375
patch: ( double ) Math . sqrt ( $NUMBER$ . 0 ;
rank: 858
score: 99.09182504507211
patch: ( $NUMBER$ . 0 ) ) ) - 0 . $NUMBER$ ;
rank: 858
score: 99.0544766512784
patch: ( length * $NUMBER$ . 0 ) ) ) ;
rank: 858
score: 98.98850319602273
patch: ( $NUMBER$ . 0 ) ) ) + x ;
rank: 858
score: 98.8404296875
patch: ( $NUMBER$ . 0 ) ) , ) ;
rank: 859
score: 99.21907958984374
patch: ( 0 . 0 ] ) ) ) ;
rank: 859
score: 99.14571126302083
patch: ( ( long ) 0 . 0 ) ) ) ;
rank: 859
score: 99.09408569335938
patch: $NUMBER$ . 0 * $NUMBER$ . 0 ) ) ) ;
rank: 859
score: 99.09168419471153
patch: ( $NUMBER$ . 0 - 0 . 0 ) ) ) ;
rank: 859
score: 99.05413263494319
patch: ( standard CaMeL Deviation / $NUMBER$ ) ) ) ;
rank: 859
score: 98.98826090494792
patch: ( $NUMBER$ . 0 ) ) ) ? 1 == $NUMBER$
rank: 859
score: 98.94098455255681
patch: ( Integer . sqrt ( ) ) ) ) ;
rank: 860
score: 99.21815185546875
patch: ( byte ) $NUMBER$ . 0 ) ) ;
rank: 860
score: 99.19109235491071
patch: ( * ( $NUMBER$ . 0 . 0 ) ) ) ) ;
rank: 860
score: 99.14402077414773
patch: ( Double * $NUMBER$ . 0 ) ) ) ;
rank: 860
score: 99.11228590745192
patch: ( ( 0 . 0 ) * $NUMBER$ ) ) ) ;
rank: 860
score: 99.0916748046875
patch: ( $NUMBER$ . 0 ) ) ) . return 0 ;
rank: 860
score: 99.05372203480114
patch: ( $NUMBER$ . 0 ) ) ) * / ;
rank: 860
score: 98.98760986328125
patch: ( $NUMBER$ . 0 ) ) ) ? 1 != 0
rank: 860
score: 98.93971946022727
patch: ( x - mean . 0 ) ) ) ;
rank: 860
score: 98.83991033380681
patch: ( ( false . 0 ) ) ) ) ;
rank: 861
score: 99.14317908653847
patch: Math . sqrt ( 1 . 0 ) ) ) ) ;
rank: 861
score: 99.09328206380208
patch: $NUMBER$ . 0 ) ( $NUMBER$ . 0 ) ) ;
rank: 861
score: 99.09119591346153
patch: ( $NUMBER$ . 0 ) , 1 . 0 ) ) ;
rank: 861
score: 99.05343627929688
patch: ( double ) $NUMBER$ . 0 ) ) * $NUMBER$ ;
rank: 861
score: 98.987060546875
patch: ( $NUMBER$ != 0 . 0 ) ) ) ) ;
rank: 861
score: 98.83970947265625
patch: ( 0 . 0 ) ) ) ) ;
rank: 862
score: 99.18977864583333
patch: ( Math . sqrt ( $NUMBER$ . 0 ) , ) ) ) ;
rank: 862
score: 99.11160982572116
patch: ( Math . sqrt * $NUMBER$ . 0 ) ) ) ;
rank: 862
score: 99.09129842122395
patch: ( double ) ( $STRING$ . 0 ) ) ) ;
rank: 862
score: 99.08775745738636
patch: ( 1 . 0 + $NUMBER$ ) ) ) ;
rank: 862
score: 99.0534159342448
patch: $NUMBER$ . ) * standard CaMeL Deviation * / ) ;
rank: 862
score: 98.98617553710938
patch: ( $NUMBER$ . 0 ) ) ) ? 0 != 0
rank: 862
score: 98.838232421875
patch: ( >> 0 . 0 ) ) ) ;
rank: 863
score: 99.18597005208333
patch: ( 1 . 0 ) ) * ( $NUMBER$ . 0 ) ) ;
rank: 863
score: 99.14188842773437
patch: ( / 0 . 0 ) ) ) ;
rank: 863
score: 99.0846659342448
patch: sqrt ( $NUMBER$ . 0 . 0 ) ) ) ;
rank: 863
score: 99.05190022786458
patch: ( double ) ( standard CaMeL Deviation ) ) ) ;
rank: 863
score: 98.9858907063802
patch: ( $NUMBER$ . 0 ) ) ) * $NUMBER$ . $NUMBER$
rank: 863
score: 98.83684747869319
patch: ( standard CaMeL Deviation * 0 ) ) ) ;
rank: 864
score: 99.1853759765625
patch: ( Math . sqrt ( $NUMBER$ . 0 ) double ) ) ) ;
rank: 864
score: 99.134033203125
patch: Math . sqrt ( $STRING$ ) ) ) ;
rank: 864
score: 99.1081034342448
patch: ( ( 0 . 0 ) 0 ) ) ) ;
rank: 864
score: 99.05103648792614
patch: ( 0 . 0 * $NUMBER$ ) ) ) ;
rank: 864
score: 98.83663940429688
patch: ( + $NUMBER$ . 0 ) ) ) ;
rank: 865
score: 99.13332112630208
patch: Double . sqrt ( 1 . 0 ) ) ) ;
rank: 865
score: 99.10788981119792
patch: ( ( $NUMBER$ . 0 . ) ) ) ) ;
rank: 865
score: 99.08109907670455
patch: ( $NUMBER$ . 0 << $NUMBER$ ) ) ) ;
rank: 865
score: 99.05598958333333
patch: ( ( $NUMBER$ ) 0 . 0 ) ) ) ;
rank: 865
score: 99.04927201704545
patch: ( double ) standard CaMeL Deviation * ) ) ;
rank: 865
score: 98.83643687855114
patch: ( standard CaMeL Deviation != null ) ) ) ;
rank: 866
score: 99.21322866586539
patch: ( $NUMBER$ . $NUMBER$ * $NUMBER$ . 0 ) ) ) ;
rank: 866
score: 99.0807596842448
patch: ( double ) Double . Na CaMeL N ) ) ;
rank: 866
score: 99.04917602539062
patch: ( 1 . 0 ) ) ) * ;
rank: 866
score: 98.83542702414773
patch: ( $STRING$ . erf ( ) ) ) ) ;
rank: 867
score: 99.18258463541666
patch: ( 1 . 0 ) ) * ( 0 . 0 ) ) ;
rank: 867
score: 99.13101196289062
patch: ( long ) ( 0 . 0 ) ) ) ;
rank: 867
score: 99.1052579012784
patch: ( double * standard CaMeL Deviation ) ) ) ;
rank: 867
score: 99.0487772623698
patch: ( standard CaMeL Deviation * $NUMBER$ ) ) ) + ;
rank: 867
score: 99.046630859375
patch: mean ) ) . erf ( $NUMBER$ . 0 ) ;
rank: 867
score: 98.98427327473958
patch: ( $NUMBER$ . 0 ) ) ) ? 0 != $NUMBER$
rank: 867
score: 98.83518288352273
patch: ( $NUMBER$ . abs ( ) ) ) ) ;
rank: 868
score: 99.21140700120192
patch: ( 0 . 0 * $NUMBER$ . $NUMBER$ ) ) ) ;
rank: 868
score: 99.18074544270833
patch: ( ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0 )
rank: 868
score: 99.10361891526442
patch: ( standard CaMeL Deviation * Math . err ) ) ) ;
rank: 868
score: 99.04831949869792
patch: ( double ) ) ( $NUMBER$ . 0 ) ) ;
rank: 868
score: 98.98361206054688
patch: sqrt ( $NUMBER$ . 0 ) . 0 ) ) ;
rank: 869
score: 99.21140700120192
patch: 0 . 0 ) * ( $NUMBER$ . 0 ) ) ;
rank: 869
score: 99.10318697415866
patch: ( ( standard CaMeL Deviation * false ) ) ) ) ;
rank: 869
score: 99.04806518554688
patch: $NUMBER$ . 0 ) ) / Math . sqrt ( ;
rank: 869
score: 98.9833984375
patch: ( $NUMBER$ . 0 ) ) ) ? $NUMBER$ == $NUMBER$
rank: 869
score: 98.91298606178977
patch: ( $NUMBER$ - $NUMBER$ . 0 ) ) ) ;
rank: 870
score: 99.2113506610577
patch: ( standard CaMeL Deviation < 1 . 0 ) ) ) ;
rank: 870
score: 99.18068150111607
patch: ( standard CaMeL Deviation * Math . double ) $NUMBER$ ) ) ;
rank: 870
score: 99.12850952148438
patch: Math . sqrt ( 0 . $NUMBER$ ) ) ) ;
rank: 870
score: 99.10301717122395
patch: ( * ( 0 . 0 ) ) ) ) ;
rank: 870
score: 99.04680841619319
patch: $NUMBER$ . 0 ) ) * standard CaMeL Deviation ;
rank: 870
score: 99.0400899251302
patch: standard CaMeL Deviation ( x - mean ) ) ) ;
rank: 870
score: 98.98198908025569
patch: ( $NUMBER$ . 0 ) ) ) : x ;
rank: 871
score: 99.21128493088942
patch: ( $NUMBER$ . 0 * $NUMBER$ . 1 ) ) ) ;
rank: 871
score: 99.180615234375
patch: ( ( $NUMBER$ . 0 ) ) ) ) + 0 . $NUMBER$ ;
rank: 871
score: 99.10077373798077
patch: ( standard CaMeL Deviation * super . 0 ) ) ) ;
rank: 871
score: 99.04563210227273
patch: ( double ) ( double ) $NUMBER$ ) ) ;
rank: 871
score: 99.04002888997395
patch: sqrt . erf ( $NUMBER$ . 0 ) ) ) ;
rank: 871
score: 98.91053355823864
patch: ( this . erf . 0 ) ) ) ;
rank: 871
score: 98.82648259943181
patch: ( $NUMBER$ . 0 ) ) ) ; * ?
rank: 872
score: 99.21075439453125
patch: ( float ) standard CaMeL Deviation ) ) ;
rank: 872
score: 99.1803466796875
patch: ( 1 . 0 ) ) ) + ( 1 . 0 ) ;
rank: 872
score: 99.1261319247159
patch: ( Double * 0 . 0 ) ) ) ;
rank: 872
score: 99.07715861002605
patch: $NUMBER$ . 0 ) + 1 . 0 ) ) ;
rank: 872
score: 99.04517618815105
patch: ( standard CaMeL Deviation [ 0 ] ) ) ) ;
rank: 872
score: 98.82599431818181
patch: ( x / 0 . 0 ) ) ) ;
rank: 873
score: 99.07700417258523
patch: ( standard CaMeL Deviation * start ) ) ) ;
rank: 873
score: 99.0442403157552
patch: ( double ) $NUMBER$ ) ) * standard CaMeL Deviation ;
rank: 873
score: 98.905029296875
patch: ( Math . mean ( ) ) ) ) ;
rank: 874
score: 99.09995524088542
patch: ( ( double ) 1 . 0 ) ) ) ;
rank: 874
score: 99.03494262695312
patch: ( $NUMBER$ . 0 . 0 0 ) ) ) ;
rank: 874
score: 98.9041748046875
patch: ( this . sqrt ( ) ) ) ) ;
rank: 875
score: 99.17564290364584
patch: ( Math . sqrt ( ( . 0 ) ) ) ) ) ;
rank: 875
score: 99.09726969401042
patch: ( ( $NUMBER$ . 0 1 ) ) ) ) ;
rank: 875
score: 99.04300944010417
patch: ( double ) $NUMBER$ . 0 ) ) ) * ;
rank: 875
score: 98.9032870205966
patch: sqrt ( $NUMBER$ . 0 ) ) ) ; }
rank: 875
score: 98.8221102627841
patch: standard CaMeL Deviation * ( x ) ) ) ;
rank: 876
score: 99.17547607421875
patch: ( erf ( $NUMBER$ . 0 ) ) ) ) ;
rank: 876
score: 99.122314453125
patch: ( $NUMBER$ . 0 . 0 ) ) ) ;
rank: 876
score: 99.0740254720052
patch: $NUMBER$ . 0 + $NUMBER$ . 0 ) ) ) ;
rank: 876
score: 99.03501198508523
patch: ( double ) 0 . 0 ) ) * ;
rank: 876
score: 98.90232155539773
patch: ( $NUMBER$ == 0 . $NUMBER$ ) ) ) ;
rank: 877
score: 99.03391335227273
patch: ( standard CaMeL Deviation * max ) ) ) ;
rank: 877
score: 99.03269449869792
patch: mean . erf ( $NUMBER$ . 0 ) ) ) ;
rank: 877
score: 98.81847534179687
patch: ( ~ $NUMBER$ . 0 ) ) ) ;
rank: 878
score: 99.172265625
patch: ( $NUMBER$ . 0 ) ) ) + ( 1 . 0 ) ;
rank: 878
score: 99.1215311686198
patch: ( ( int ) 0 . 0 ) ) ) ;
rank: 878
score: 99.07235717773438
patch: $NUMBER$ . 0 ) ) ( 0 . 0 ) ;
rank: 878
score: 98.89945845170455
patch: - sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 879
score: 99.17145182291667
patch: ( Math . sqrt ( $NUMBER$ . 0 ) ) ) ) false ;
rank: 879
score: 99.12017822265625
patch: Double . min ( $NUMBER$ . 0 ) ) ) ;
rank: 879
score: 99.09609985351562
patch: ( ( 0 . 0 1 ) ) ) ) ;
rank: 879
score: 99.03092817826705
patch: ( double ) * $NUMBER$ . 0 ) ) ;
rank: 879
score: 99.0260721842448
patch: ( 1 . 0 ) ) ) . ( ) ;
rank: 879
score: 98.96057739257813
patch: ( $NUMBER$ . 0 ) ) ) : $NUMBER$
rank: 879
score: 98.81756036931819
patch: ( $NUMBER$ + 0 . 0 ) ) ) ;
rank: 880
score: 99.20412973257211
patch: ( standard CaMeL Deviation & standard CaMeL Deviation ) ) ) ;
rank: 880
score: 99.11976114908855
patch: ( double ) standard CaMeL Deviation . 0 ) ) ;
rank: 880
score: 99.02895285866477
patch: ( double ) 0 . 0 ) ) + ;
rank: 880
score: 98.95546653053977
patch: ( $NUMBER$ . 0 ) ) + $NUMBER$ ) ;
rank: 880
score: 98.8169278231534
patch: ( $NUMBER$ == $NUMBER$ . 0 ) ) ) ;
rank: 881
score: 99.06756591796875
patch: ( double ) $NUMBER$ . 1 ) ) ;
rank: 881
score: 98.9544677734375
patch: ( $NUMBER$ != $NUMBER$ . 0 ) ) ) ;
rank: 882
score: 99.1175048828125
patch: ( / 1 . 0 ) ) ) ;
rank: 882
score: 99.09470778245192
patch: ( ( Long * $NUMBER$ . 0 ) ) ) ) ;
rank: 882
score: 99.06711832682292
patch: ( int ) ( 1 . 0 ) ) ) ;
rank: 882
score: 99.02490234375
patch: ( $NUMBER$ . 0 ) ) ) / ) ;
rank: 883
score: 99.15985576923077
patch: ( sqrt ( $NUMBER$ . 0 ) ) ) ) ; }
rank: 883
score: 99.10917154947917
patch: Math . sqrt ( $NUMBER$ . null ) ) ) ;
rank: 883
score: 99.0941162109375
patch: ( standard CaMeL Deviation * $NUMBER$ . 0 ) ) ) ||
rank: 883
score: 99.06592814127605
patch: $NUMBER$ . 0 ) ) ) + 0 . 0 ;
rank: 883
score: 98.95240367542614
patch: ( $NUMBER$ . 0 ) ) , $NUMBER$ ) ;
rank: 883
score: 98.811279296875
patch: ( $NUMBER$ . 0 ) ) ) ; * /
rank: 884
score: 99.15859549386161
patch: ( standard CaMeL Deviation * long ) standard CaMeL Deviation ) ) ;
rank: 884
score: 99.10819498697917
patch: ( Math . sqrt ( $STRING$ ) ) ) ) ;
rank: 884
score: 99.09389085036058
patch: ( double . 0 ) * $NUMBER$ . 0 ) ) ;
rank: 884
score: 99.06434122721355
patch: ( $NUMBER$ . 0 . 0 ) ) ) ) ;
rank: 884
score: 99.02440795898437
patch: ( double ) ) $NUMBER$ . 0 ) ;
rank: 884
score: 98.95009543678977
patch: ( sqrt ( $NUMBER$ . 0 ) ) ) )
rank: 884
score: 98.87807006835938
patch: ( standard CaMeL Deviation ++ ) ) ) ;
rank: 884
score: 98.80982666015625
patch: ( standard CaMeL Deviation } ) ) ) ;
rank: 885
score: 99.20004507211539
patch: ( $STRING$ . 0 * $NUMBER$ . 0 ) ) ) ;
rank: 885
score: 99.15643310546875
patch: ( floor ( $NUMBER$ . 0 ) ) ) ) ;
rank: 885
score: 99.10633544921875
patch: ( long ) standard CaMeL Deviation ) ) ;
rank: 885
score: 99.09376017252605
patch: double . sqrt ( 0 . 0 ) ) ) ;
rank: 885
score: 99.022705078125
patch: ( standard CaMeL Deviation * floor ) ) ) ;
rank: 885
score: 99.01411946614583
patch: ( ( $NUMBER$ . 0 ) $NUMBER$ ) ) ) ;
rank: 885
score: 98.94600053267045
patch: ( $NUMBER$ . 0 ) ) ) ? 1 ;
rank: 885
score: 98.8779296875
patch: ( $NUMBER$ != 0 . $NUMBER$ ) ) ) ;
rank: 885
score: 98.80158025568181
patch: ( x - erf . 0 ) ) ) ;
rank: 886
score: 99.19655198317308
patch: ( standard CaMeL Deviation == standard CaMeL Deviation ) ) ) ;
rank: 886
score: 99.1549580891927
patch: ( ( $NUMBER$ . 0 ) ) ) ) ; }
rank: 886
score: 99.02240545099431
patch: ( $NUMBER$ . 0 * $STRING$ ) ) ) ;
rank: 887
score: 99.15243094308036
patch: ( ( sqrt ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 887
score: 99.0510965983073
patch: $NUMBER$ . 0 ) * / $NUMBER$ . 0 ) ;
rank: 887
score: 99.02149547230114
patch: ( double ) 1 . 0 ) ) * ;
rank: 887
score: 99.01304117838542
patch: ( 1 . 0 ) ) ) . return 0 ;
rank: 887
score: 98.793310546875
patch: ( x / ( ) ) ) ) ;
rank: 888
score: 99.15113176618304
patch: ( standard CaMeL Deviation * Math . sqrt double ) ) ) ;
rank: 888
score: 99.10282389322917
patch: ( ( Integer ) 0 . 0 ) ) ) ;
rank: 888
score: 99.01283957741477
patch: ( $NUMBER$ . 0 ) ) ) + mean ;
rank: 888
score: 98.79182572798295
patch: ( this . 0 . 0 ) ) ) ;
rank: 889
score: 99.19530029296875
patch: ( sqrt $NUMBER$ . 0 ) ) ) ;
rank: 889
score: 99.14801494891827
patch: ( ( x - 0 . 0 ) ) ) ) ;
rank: 889
score: 99.04898071289062
patch: ( double ) double . MIN _ VALUE ) ) ;
rank: 889
score: 99.01204057173295
patch: ( 1 . 0 ) ) ) + $NUMBER$ ;
rank: 889
score: 98.94130859375
patch: ( $NUMBER$ . 0 ) ) ) : 0
rank: 889
score: 98.86674360795455
patch: Math . sqrt ( - mean ) ) ) ;
rank: 889
score: 98.7853515625
patch: - ( $NUMBER$ . 0 ) ) ) ;
rank: 890
score: 99.19275841346153
patch: ( standard CaMeL Deviation - $NUMBER$ . $NUMBER$ ) ) ) ;
rank: 890
score: 99.08046653053977
patch: ( float * 0 . 0 ) ) ) ;
rank: 890
score: 99.01920166015626
patch: ( $NUMBER$ . 0 * ) ) ) ;
rank: 890
score: 98.7830810546875
patch: ( standard CaMeL Deviation != length ) ) ) ;
rank: 891
score: 99.09914143880208
patch: ( double ) Math . MAX _ VALUE ) ) ;
rank: 891
score: 99.07917924360795
patch: ( float * $NUMBER$ . 0 ) ) ) ;
rank: 891
score: 99.04776000976562
patch: ( double ) float CaMeL Value ( ) ) ) ;
rank: 891
score: 99.00719105113636
patch: mean ) / ( standard CaMeL Deviation ) ) ;
rank: 891
score: 98.86640625
patch: ( this . erf ( ) ) ) ;
rank: 892
score: 99.14515904017857
patch: double . erf ( ( x - x ) ) ) ) ;
rank: 892
score: 99.07705688476562
patch: ( * ( 1 . 0 ) ) ) ) ;
rank: 892
score: 99.0475186434659
patch: ( float ) 0 . 0 ) ) ) ;
rank: 892
score: 99.01556951349431
patch: ( double ) $NUMBER$ . 0 ) ) ; ;
rank: 892
score: 98.93551635742188
patch: ( $NUMBER$ . 0 ) ) * ) ;
rank: 892
score: 98.86229359019886
patch: ( standard CaMeL Deviation - sqrt ) ) ) ;
rank: 893
score: 99.18907674153645
patch: ( ( byte ) $NUMBER$ . 0 ) ) ) ;
rank: 893
score: 99.098876953125
patch: ( double + 0 . 0 ) ) ) ;
rank: 893
score: 99.04677327473958
patch: ( double ) Float . MIN _ VALUE ) ) ;
rank: 893
score: 99.01423783735795
patch: $NUMBER$ . 0 ) ) / $NUMBER$ . 0 ;
rank: 893
score: 98.99678178267045
patch: ( $NUMBER$ . 0 * 0 ) ) ) ;
rank: 893
score: 98.93439275568181
patch: ( 0 . 0 + $NUMBER$ ) ) ) ;
rank: 893
score: 98.86228637695312
patch: ( this . ( ) ) ) ) ;
rank: 893
score: 98.78138563368056
patch: ( standard CaMeL Deviation ) ) ) ;
rank: 894
score: 99.04634602864583
patch: $NUMBER$ . 0 ) ) + 0 . 0 ) ;
rank: 894
score: 99.01286177201705
patch: ( 1 . 0 / $NUMBER$ ) ) ) ;
rank: 894
score: 98.93283913352273
patch: ( $NUMBER$ . 0 ) ) - x ) ;
rank: 895
score: 99.07323201497395
patch: int . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 895
score: 99.04562377929688
patch: ( double ) Integer . MIN _ VALUE ) ) ;
rank: 895
score: 99.01176313920455
patch: ( double ) standard CaMeL Deviation $NUMBER$ ) ) ;
rank: 895
score: 98.99045632102273
patch: ( $NUMBER$ . 0 0 0 ) ) ) ;
rank: 895
score: 98.9315673828125
patch: ( short ) $NUMBER$ . 0 ) ) ;
rank: 895
score: 98.85615678267045
patch: ( $NUMBER$ . sqrt ( ) ) ) ) ;
rank: 896
score: 99.04451127485795
patch: $NUMBER$ . 0 * $NUMBER$ . 0 ) ) ;
rank: 896
score: 98.9311190518466
patch: ( $NUMBER$ . 0 ) ) ) : 1 ;
rank: 896
score: 98.85551313920455
patch: ( $NUMBER$ | 0 . 0 ) ) ) ;
rank: 896
score: 98.7807950106534
patch: ( true + $NUMBER$ . 0 ) ) ) ;
rank: 897
score: 99.12022986778847
patch: ( ( standard CaMeL Deviation * start ) ) ) ) ;
rank: 897
score: 99.09391276041667
patch: ( ( 1 . 0 ) ) ) ) ) ;
rank: 897
score: 99.00965465198864
patch: ( $NUMBER$ . 0 ) ) ) + $STRING$ ;
rank: 897
score: 98.92522638494319
patch: ( $NUMBER$ . 0 ) ) ) ) ) ;
rank: 898
score: 99.11899636008523
patch: ( ( x - start ) ) ) ) ;
rank: 898
score: 99.09318033854167
patch: ( double ) $NUMBER$ . 0 . 1 ) ) ;
rank: 898
score: 99.0712381998698
patch: String . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 898
score: 99.0089444247159
patch: ( double ) double ) $NUMBER$ . 0 ) ;
rank: 898
score: 98.97437633167614
patch: ( $NUMBER$ . 0 ) + mean ) ) ;
rank: 898
score: 98.91856800426136
patch: ( $NUMBER$ . 0 ) ) ) - $NUMBER$ ;
rank: 898
score: 98.84947374131944
patch: ( $NUMBER$ . $NUMBER$ ) ) ) ;
rank: 898
score: 98.77776544744319
patch: ( x + $NUMBER$ . 0 ) ) ) ;
rank: 899
score: 99.17842923677884
patch: ( 0 . 0 > $NUMBER$ . 0 ) ) ) ;
rank: 899
score: 99.03688742897727
patch: ( double ) ( $NUMBER$ . ) ) ) ;
rank: 899
score: 99.00705788352273
patch: ( $NUMBER$ . 0 - double ) ) ) ;
rank: 899
score: 98.97322387695313
patch: erf ( $NUMBER$ . 0 ) ) ) ;
rank: 899
score: 98.91840154474431
patch: ( true * $NUMBER$ . 0 ) ) ) ;
rank: 899
score: 98.84778442382813
patch: sqrt ( 0 . 0 ) ) ) ;
rank: 899
score: 98.77296752929688
patch: ( $NUMBER$ . 0 ) ) ) ; *
rank: 900
score: 99.11652483258929
patch: ( ( Erf . erf ( ) ) ) ) ) ;
rank: 900
score: 99.09236653645833
patch: ( double ) 0 . 0 . 1 ) ) ;
rank: 900
score: 99.00397283380681
patch: ( standard CaMeL Deviation * exp ) ) ) ;
rank: 900
score: 98.91766357421875
patch: ( ( $NUMBER$ . 0 ) ) ) )
rank: 900
score: 98.84443969726563
patch: ( standard CaMeL Deviation != ) ) ) ;
rank: 900
score: 98.76754150390624
patch: ( this . erf $NUMBER$ ) ) ) ;
rank: 901
score: 99.09138997395833
patch: 0 . max ( $NUMBER$ . 0 ) ) ) ;
rank: 901
score: 99.0037841796875
patch: ( $NUMBER$ . 0 * 1 ) ) ) ;
rank: 901
score: 98.97272283380681
patch: ( $NUMBER$ . 0 ) ) ) == 0 ;
rank: 901
score: 98.84288330078125
patch: sqrt ( x - mean ) ) ) ;
rank: 902
score: 99.06597900390625
patch: ( ( * sqrt . 0 ) ) ) ) ;
rank: 902
score: 99.00051047585227
patch: ( new double [ 0 ] ) ) ) ;
rank: 902
score: 98.76427612304687
patch: ( - 0 . 0 ) ) ) ;
rank: 903
score: 99.08731079101562
patch: ( $NUMBER$ . 0 ; 0 . 0 ) ) ;
rank: 903
score: 99.02866432883523
patch: $NUMBER$ . 0 ) + 1 . 0 ) ;
rank: 903
score: 98.99763627485795
patch: ( double ) $NUMBER$ . 0 ) ) - ;
rank: 903
score: 98.91253107244319
patch: ( $NUMBER$ . 0 ) ) ) * 0 ;
rank: 904
score: 99.1138916015625
patch: ( standard CaMeL Deviation * Math . >> $NUMBER$ ) ) ) ;
rank: 904
score: 99.06156005859376
patch: ( * 1 . 0 ) ) ) ;
rank: 904
score: 98.99547230113636
patch: ( double [ 0 . 0 ) ) ) ;
rank: 904
score: 98.971923828125
patch: ( ( $NUMBER$ . 0 ) 0 ) ) )
rank: 904
score: 98.76141357421875
patch: ( false . 0 ) ) ) ;
rank: 905
score: 99.17550893930289
patch: ( $NUMBER$ . 0 > $NUMBER$ . 0 ) ) ) ;
rank: 905
score: 99.08651733398438
patch: ( 0 . 0 ; 0 . 0 ) ) ;
rank: 905
score: 99.06046549479167
patch: ( ( - sqrt . 0 ) ) ) ) ;
rank: 905
score: 98.91224254261364
patch: ( $NUMBER$ . 0 ) - $NUMBER$ ) ) ;
rank: 905
score: 98.83590359157986
patch: ( $NUMBER$ - mean ) ) ) ;
rank: 906
score: 99.0861104329427
patch: Math . sqrt ( Float . 0 ) ) ) ;
rank: 906
score: 99.06040445963542
patch: ( ( - 0 . 0 ) ) ) ) ;
rank: 906
score: 98.99428488991477
patch: ( standard CaMeL Deviation - start ) ) ) ;
rank: 906
score: 98.911181640625
patch: ( $NUMBER$ != 0 . 0 ) ) )
rank: 906
score: 98.83499145507812
patch: ( $NUMBER$ != 0 . 0 ) ) ;
rank: 906
score: 98.76075439453125
patch: ( < $NUMBER$ . 0 ) ) ) ;
rank: 907
score: 99.17467322716347
patch: ( 0 . 0 * $NUMBER$ . 1 ) ) ) ;
rank: 907
score: 99.10916841947116
patch: ( ( ( x - x ) ) ) ) ) ;
rank: 907
score: 99.02175467354911
patch: 1 . 0 ) ) ;
rank: 907
score: 98.9892578125
patch: ( double [ ] ) null ) ) ;
rank: 907
score: 98.96416681463069
patch: ( $NUMBER$ . 0 ) / $NUMBER$ ) ) ;
rank: 907
score: 98.91058904474431
patch: ( $NUMBER$ . 0 ) ) ) : $STRING$ ;
rank: 907
score: 98.83292236328126
patch: ( $NUMBER$ . 0 ) ) / ) ;
rank: 907
score: 98.75594753689236
patch: ( x + mean ) ) ) ;
rank: 908
score: 99.02033025568181
patch: ( double ) / $NUMBER$ . 0 ) ) ;
rank: 908
score: 98.98774857954545
patch: ( standard CaMeL Deviation * format ) ) ) ;
rank: 908
score: 98.83251953125
patch: ( <= 0 . 0 ) ) ) ;
rank: 908
score: 98.75472412109374
patch: ( == 0 . 0 ) ) ) ;
rank: 909
score: 99.1739971454327
patch: ( 0 . 0 * 1 . 0 ) ) ) ;
rank: 909
score: 99.10716029575893
patch: ( standard CaMeL Deviation * 1 . 0 ) ) ) ; }
rank: 909
score: 99.0821866122159
patch: ( Double . sqrt ( ) ) ) ) ;
rank: 909
score: 99.05642700195312
patch: ( ( 0 . 0 ) $NUMBER$ ) ) ) ;
rank: 909
score: 98.82999267578126
patch: ( $NUMBER$ $NUMBER$ . 0 ) ) ) ;
rank: 909
score: 98.7486083984375
patch: ( $NUMBER$ . $NUMBER$ ) ) ) ) ;
rank: 910
score: 99.17385629507211
patch: ( standard CaMeL Deviation >> 1 . 0 ) ) ) ;
rank: 910
score: 99.10653250558036
patch: double . erf ( ( x - start ) ) ) ) ;
rank: 910
score: 99.08177693684895
patch: ( ( 0 . 0 ) ) ) ) ) ;
rank: 910
score: 99.0116299715909
patch: $NUMBER$ . 0 + $NUMBER$ . 0 ) ) ;
rank: 910
score: 98.95818536931819
patch: ( 1 . 0 + x ) ) ) ;
rank: 910
score: 98.90514026988636
patch: ( $NUMBER$ . 0 ) ) ) * 1 ;
rank: 910
score: 98.82447509765625
patch: ( $NUMBER$ . 0 ) ) != ) ;
rank: 911
score: 99.17156982421875
patch: * standard CaMeL Deviation * $NUMBER$ . 0 ) ) ;
rank: 911
score: 99.0530293782552
patch: this . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 911
score: 99.00666947798295
patch: ( float ) - 1 . 0 ) ) ;
rank: 911
score: 98.985107421875
patch: ( double [ 0 ] ) ) ) ;
rank: 911
score: 98.82431030273438
patch: ( & 0 . 0 ) ) ) ;
rank: 911
score: 98.74625244140626
patch: ( <= $NUMBER$ . 0 ) ) ) ;
rank: 912
score: 99.170166015625
patch: ( Integer . length ( ) ) ) ) ;
rank: 912
score: 99.08059692382812
patch: ( 0 . ( ) ) ) ) ;
rank: 912
score: 99.05218505859375
patch: ( double * $NUMBER$ . 0 ) ) ) ) ;
rank: 912
score: 99.0053939819336
patch: $NUMBER$ . 0 ) ) ) ;
rank: 912
score: 98.9555331143466
patch: ( $NUMBER$ . 0 ) ) - mean ) ;
rank: 912
score: 98.9038418856534
patch: ( false * $NUMBER$ . 0 ) ) ) ;
rank: 913
score: 99.16941324869792
patch: $NUMBER$ . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 913
score: 99.08043416341145
patch: ( 0 . 0 . 0 ) ) ) ) ;
rank: 913
score: 99.05125935872395
patch: ( ( 0 . 0 $NUMBER$ ) ) ) ) ;
rank: 913
score: 98.98292125355114
patch: ( $NUMBER$ . 0 ) ) - 1 ) ;
rank: 913
score: 98.9028564453125
patch: ( $NUMBER$ . 0 ) ) ) - $NUMBER$
rank: 913
score: 98.74295654296876
patch: ( : $NUMBER$ . 0 ) ) ) ;
rank: 914
score: 99.08714881310097
patch: ( ( standard CaMeL Deviation * min ) ) ) ) ;
rank: 914
score: 99.04864501953125
patch: ( ( standard CaMeL Deviation * ) ) ) ) ;
rank: 914
score: 98.90160369873047
patch: ( $NUMBER$ . 0 ) ) )
rank: 914
score: 98.8109619140625
patch: sqrt ( standard CaMeL Deviation ) ) ) ;
rank: 914
score: 98.74209594726562
patch: ( += $NUMBER$ . 0 ) ) ) ;
rank: 915
score: 99.0732754794034
patch: ( 0 . 0 << $NUMBER$ ) ) ) ;
rank: 915
score: 98.99289772727273
patch: ( float ) 1 . 0 ) ) ) ;
rank: 915
score: 98.94391424005681
patch: ( 1 . 0 ) + mean ) ) ;
rank: 916
score: 99.04648844401042
patch: ( ( $NUMBER$ . 0 $NUMBER$ ) ) ) ) ;
rank: 916
score: 98.99034534801136
patch: ( standard CaMeL Deviation * short ) ) ) ;
rank: 916
score: 98.97865988991477
patch: ( double ) double ) 0 . 0 ) ;
rank: 916
score: 98.7385009765625
patch: ( $NUMBER$ / ( ) ) ) ) ;
rank: 917
score: 99.1549580891927
patch: ( ( byte ) 0 . 0 ) ) ) ;
rank: 917
score: 99.04644220525569
patch: ( double * 1 . 0 ) ) ) ;
rank: 917
score: 98.97862659801136
patch: ( 1 . 0 ) ) ) * ) ;
rank: 917
score: 98.94082641601562
patch: ( $NUMBER$ . 0 ) 0 ) ) ;
rank: 917
score: 98.89464222301136
patch: ( ( $NUMBER$ . 0 ) ) ) ) *
rank: 917
score: 98.73157348632813
patch: ( $NUMBER$ . 0 ) ) ) ; /
rank: 918
score: 99.08159930889423
patch: ( new sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 918
score: 98.98677201704545
patch: $NUMBER$ . 0 ) ) + 0 . 0 ;
rank: 918
score: 98.93975275213069
patch: ( $NUMBER$ . 0 ) ) ) == $NUMBER$ ;
rank: 918
score: 98.8910799893466
patch: ( $NUMBER$ . 0 ) ) / x ) ;
rank: 918
score: 98.73091430664063
patch: ( false . 0 ) ) ) ) ;
rank: 919
score: 98.973876953125
patch: ( double ) - standard CaMeL Deviation ) ) ;
rank: 919
score: 98.79271240234375
patch: ( < 0 . 0 ) ) ) ;
rank: 919
score: 98.72507934570312
patch: ( != 0 . 0 ) ) ) ;
rank: 920
score: 99.07791841947116
patch: ( standard CaMeL Deviation * Math . sqrt ( $NUMBER$ . 0
rank: 920
score: 99.05372203480114
patch: ( double ) - 0 . 0 ) ) ;
rank: 920
score: 99.0433858235677
patch: float . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 920
score: 98.98492986505681
patch: ( float ) - $NUMBER$ . 0 ) ) ;
rank: 920
score: 98.97197265625
patch: ( double 0 . 0 ) ) ) ;
rank: 920
score: 98.9380770596591
patch: ( $NUMBER$ . 0 ) ) ) != 0 ;
rank: 920
score: 98.88835005326705
patch: ( $NUMBER$ . 0 ) ) ) : false ;
rank: 920
score: 98.7903076171875
patch: sqrt ( $NUMBER$ . $NUMBER$ ) ) ) ;
rank: 920
score: 98.72495524088542
patch: ( * ( ) ) ) ) ;
rank: 921
score: 99.05116965553977
patch: ( ( 0 . $NUMBER$ ) ) ) ) ;
rank: 921
score: 98.9821444424716
patch: ( standard CaMeL Deviation * long ) ) ) ;
rank: 921
score: 98.97101384943181
patch: ( standard CaMeL Deviation * BYTES ) ) ) ;
rank: 921
score: 98.93698952414773
patch: ( 1 . 0 ) ) ) + ) ;
rank: 921
score: 98.8883389559659
patch: ( $NUMBER$ . 0 ) ) * x ) ;
rank: 921
score: 98.79026489257812
patch: ( standard CaMeL Deviation > ) ) ) ;
rank: 921
score: 98.72059326171875
patch: ( x - mean ) ) ) ) ;
rank: 922
score: 99.04058837890625
patch: ( ( - 1 . 0 ) ) ) ) ;
rank: 922
score: 98.93641246448864
patch: ( $NUMBER$ . 0 ) ) ) . 0 ;
rank: 922
score: 98.7203125
patch: ( ( - mean ) ) ) ) ;
rank: 923
score: 99.0386962890625
patch: ( * * $NUMBER$ . 0 ) ) ) ;
rank: 923
score: 98.97266734730114
patch: $NUMBER$ . 0 ) ) + 1 . 0 ;
rank: 923
score: 98.96597900390626
patch: ( 1 . 0 ) ) ) / ;
rank: 923
score: 98.8878173828125
patch: ( $NUMBER$ . 0 ) ) ) : true ;
rank: 923
score: 98.78181966145833
patch: ( $NUMBER$ * $NUMBER$ ) ) ) ;
rank: 924
score: 99.146484375
patch: true . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 924
score: 99.0692471590909
patch: ( 1 . 0 . 0 ) ) ) ;
rank: 924
score: 99.04736328125
patch: ( $STRING$ + $NUMBER$ . 0 ) ) ) ;
rank: 924
score: 99.03671264648438
patch: ( ( *= $NUMBER$ . 0 ) ) ) ) ;
rank: 924
score: 98.9659756747159
patch: ( double ) 1 . 0 ) ) + ;
rank: 924
score: 98.9359463778409
patch: ( $NUMBER$ . 0 ) ) + mean ) ;
rank: 924
score: 98.71272583007813
patch: ( x - mean . ) ) ) ;
rank: 925
score: 99.0674161044034
patch: ( ( x - max ) ) ) ) ;
rank: 925
score: 99.04489968039773
patch: standard CaMeL Deviation * standard CaMeL Deviation ) ) ;
rank: 925
score: 99.03641764322917
patch: ( * $NUMBER$ . 0 . 0 ) ) ) ;
rank: 925
score: 98.96895141601563
patch: ( int ) 1 . 0 ) ) ;
rank: 925
score: 98.9287997159091
patch: ( $NUMBER$ . 0 ) ) ) ? $NUMBER$ ;
rank: 925
score: 98.88533935546874
patch: ( $NUMBER$ . 0 ) ) ) ? $NUMBER$
rank: 925
score: 98.77560424804688
patch: sqrt ( 1 . 0 ) ) ) ;
rank: 925
score: 98.71126302083333
patch: ( x / mean ) ) ) ;
rank: 926
score: 99.04441139914773
patch: ( $STRING$ * 0 . 0 ) ) ) ;
rank: 926
score: 98.96518776633523
patch: ( standard CaMeL Deviation ( ) ) ) ) ;
rank: 926
score: 98.92859996448864
patch: $NUMBER$ ) / ( $NUMBER$ . 0 ) ) ;
rank: 926
score: 98.77545166015625
patch: ( $NUMBER$ + mean ) ) ) ;
rank: 926
score: 98.7074951171875
patch: ( || $NUMBER$ . 0 ) ) ) ;
rank: 927
score: 99.137939453125
patch: ( byte ) standard CaMeL Deviation ) ) ;
rank: 927
score: 99.04391479492188
patch: Math . sqrt ( x ) ) ) ;
rank: 927
score: 99.03462727864583
patch: ( ( float ) 1 . 0 ) ) ) ;
rank: 927
score: 98.96607555042614
patch: $NUMBER$ . 0 ) * 1 . 0 ) ;
rank: 927
score: 98.96351207386364
patch: ( double ) 0 . 0 ) ) / ;
rank: 927
score: 98.92606811523437
patch: mean ( $NUMBER$ . 0 ) ) ) ;
rank: 927
score: 98.77368774414063
patch: ( short ) 0 . 0 ) ) ;
rank: 928
score: 99.1370849609375
patch: ( int ) standard CaMeL Deviation ( ) ) ) ;
rank: 928
score: 99.0595233623798
patch: ( ( ( x - start ) ) ) ) ) ;
rank: 928
score: 99.03371175130208
patch: ( ( Long ) $NUMBER$ . 0 ) ) ) ;
rank: 928
score: 98.92249644886364
patch: ( 1 . 0 ) ) ) + 0 ;
rank: 928
score: 98.88311157226562
patch: ( $NUMBER$ . 0 ) ) $NUMBER$ ) ;
rank: 928
score: 98.70352783203126
patch: ( , $NUMBER$ . 0 ) ) ) ;
rank: 929
score: 99.05866033380681
patch: ( ( x - erf ) ) ) ) ;
rank: 929
score: 98.96357865767045
patch: $NUMBER$ . 0 ) + 0 . 0 ) ;
rank: 929
score: 98.9595947265625
patch: ( double ) double ) standard CaMeL Deviation ) ;
rank: 929
score: 98.92066539417614
patch: ( 1 . 0 ) ) ) + mean ;
rank: 929
score: 98.88246848366477
patch: ( start * $NUMBER$ . 0 ) ) ) ;
rank: 929
score: 98.76510620117188
patch: ( >= 0 . 0 ) ) ) ;
rank: 930
score: 99.1322733561198
patch: ( ( float ) standard CaMeL Deviation ) ) ) ;
rank: 930
score: 99.05300668569711
patch: ( sqrt sqrt ( $NUMBER$ . 0 ) ) ) ) ;
rank: 930
score: 99.03679865056819
patch: ( $STRING$ * $NUMBER$ . 0 ) ) ) ;
rank: 930
score: 99.03036499023438
patch: ( ( << 0 . 0 ) ) ) ) ;
rank: 930
score: 98.96305708451705
patch: $NUMBER$ . 0 ) + $NUMBER$ . 0 ) ;
rank: 930
score: 98.91916725852273
patch: ( 1 . 0 ) / $NUMBER$ ) ) ;
rank: 930
score: 98.76451416015625
patch: * ( $NUMBER$ . 0 ) ) ) ;
rank: 931
score: 99.13016764322917
patch: ( ( double ) $NUMBER$ . $NUMBER$ ) ) ) ;
rank: 931
score: 98.75906982421876
patch: ( $NUMBER$ > 0 . 0 ) ) ;
rank: 931
score: 98.698876953125
patch: ( ) ) / 0 . 0 ) ;
rank: 932
score: 99.05027262369792
patch: ( ( 1 . 0 ) ) ) ) ; }
rank: 932
score: 99.02858479817708
patch: Short . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 932
score: 98.95728648792614
patch: ( standard CaMeL Deviation * float ) ) ) ;
rank: 932
score: 98.91718084161931
patch: ( 1 . 0 ) ) ) : 0 ;
rank: 933
score: 99.0266825358073
patch: ( double * 0 . 0 ) ) ) ) ;
rank: 933
score: 98.9495849609375
patch: ( 1 . 0 ) ) ) + ;
rank: 933
score: 98.91596013849431
patch: ( 0 . 0 + mean ) ) ) ;
rank: 933
score: 98.7549560546875
patch: ( $NUMBER$ . 0 ) ) ? ) ;
rank: 933
score: 98.6917724609375
patch: ( $STRING$ . ( ) ) ) ) ;
rank: 934
score: 99.02674449573864
patch: ( Double * standard CaMeL Deviation ) ) ) ;
rank: 934
score: 99.02398681640625
patch: ( * 0 . 0 . 0 ) ) ) ;
rank: 934
score: 98.95989435369319
patch: 1 . 0 ) * $NUMBER$ . 0 ) ;
rank: 934
score: 98.94483184814453
patch: ( double ) 1 ) ) ;
rank: 934
score: 98.9153164950284
patch: ( x - x - mean ) ) ) ;
rank: 934
score: 98.86683959960938
patch: ( $NUMBER$ . 0 ) ) ] ) ;
rank: 934
score: 98.69172973632813
patch: ( $NUMBER$ . 0 ) ) + ) ;
rank: 935
score: 99.04489135742188
patch: ( round ( $NUMBER$ . 0 ) ) ) ) ;
rank: 935
score: 99.02070756392045
patch: ( standard CaMeL Deviation * value ) ) ) ;
rank: 935
score: 98.95963134765626
patch: signum ( $NUMBER$ . 0 ) ) ) ;
rank: 935
score: 98.94266357421876
patch: / standard CaMeL Deviation * / ) ) ;
rank: 935
score: 98.9148837002841
patch: ( $NUMBER$ . 0 ) ) ) : null ;
rank: 935
score: 98.69104614257813
patch: ( : 0 . 0 ) ) ) ;
rank: 936
score: 99.12459309895833
patch: ( int ) Math . MAX _ VALUE ) ) ;
rank: 936
score: 99.0404052734375
patch: ( 1 . 0 ) ) ) ; } } ) ;
rank: 936
score: 98.95386962890625
patch: ( float ) $NUMBER$ . $NUMBER$ ) ) ;
rank: 936
score: 98.94208374023438
patch: ( double ) 0 . 1 ) ) ;
rank: 936
score: 98.9144620028409
patch: ( $NUMBER$ . 0 + erf ) ) ) ;
rank: 936
score: 98.86213989257813
patch: ( $NUMBER$ . 0 ) ) ) ? ;
rank: 936
score: 98.75216674804688
patch: sqrt ( $NUMBER$ . 1 ) ) ) ;
rank: 937
score: 99.02473588423295
patch: ( double / 0 . 0 ) ) ) ;
rank: 937
score: 98.95196533203125
patch: scale ( $NUMBER$ . 0 ) ) ) ;
rank: 937
score: 98.9376708984375
patch: ( standard CaMeL Deviation * $NUMBER$ ) ) ;
rank: 937
score: 98.91102905273438
patch: ( 1 . 0 $NUMBER$ ) ) ) ;
rank: 937
score: 98.74983520507813
patch: ( x - mean ) ) ) ; }
rank: 937
score: 98.68895263671875
patch: ( ( $NUMBER$ . 0 ) ) ) ;
rank: 938
score: 99.03094012920673
patch: ( $NUMBER$ . 0 ) ) ) ; } } ) ;
rank: 938
score: 98.94859730113636
patch: ( Double . 0 . 0 ) ) ) ;
rank: 938
score: 98.937255859375
patch: ( standard CaMeL Deviation ) ) ) ) ;
rank: 938
score: 98.68873291015625
patch: ( boolean ) $NUMBER$ . 0 ) ) ;
rank: 939
score: 99.02971857244319
patch: ( ( x - min ) ) ) ) ;
rank: 939
score: 99.02138449928977
patch: ( value * 0 . 0 ) ) ) ;
rank: 939
score: 98.94844193892045
patch: 1 . 0 ) / $NUMBER$ . 0 ) ;
rank: 939
score: 98.932275390625
patch: ( double ) double . 0 ) ) ;
rank: 939
score: 98.85908338758681
patch: ( $NUMBER$ . 0 ) ) ) *
rank: 939
score: 98.6884765625
patch: ( ) ) . erf ( ) ) ;
rank: 940
score: 99.02833048502605
patch: ( standard CaMeL Deviation == new double ) ) ) ;
rank: 940
score: 98.99753639914773
patch: ( * $NUMBER$ . 0 ) ) ) ) ;
rank: 940
score: 98.94800914417614
patch: $NUMBER$ . 0 / $NUMBER$ . 0 ) ) ;
rank: 940
score: 98.93007202148438
patch: ( double ) ) 0 . 0 ) ;
rank: 940
score: 98.85772705078125
patch: ( $NUMBER$ == 0 . 0 ) ) )
rank: 940
score: 98.74675903320312
patch: ( $NUMBER$ . 0 ) ) == ) ;
rank: 940
score: 98.68783569335938
patch: ( new 1 . 0 ) ) ) ;
rank: 941
score: 99.11859130859375
patch: ( double ) standard CaMeL Deviation ( ) ) ) ;
rank: 941
score: 99.02609252929688
patch: ( erf ( 0 . 0 ) ) ) ) ;
rank: 941
score: 99.02028198242188
patch: ( 1 . ( ) ) ) ) ;
rank: 941
score: 98.68735758463542
patch: ( ) ) ) ;
rank: 942
score: 99.118408203125
patch: ( int ) $NUMBER$ . 0 ) ) ) ;
rank: 942
score: 98.92764282226562
patch: size ( $NUMBER$ . 0 ) ) ) ;
rank: 942
score: 98.68723754882812
patch: ( byte ) 1 . 0 ) ) ;
rank: 943
score: 98.98241577148437
patch: ( - sqrt . 0 ) ) ) ;
rank: 943
score: 98.92581787109376
patch: ( double ) 1 . $NUMBER$ ) ) ;
rank: 943
score: 98.85169677734375
patch: ( $NUMBER$ . 0 ) ) ) + }
rank: 943
score: 98.84552001953125
patch: ( 1 . 0 ) ) , ) ;
rank: 943
score: 98.74110717773438
patch: ( $NUMBER$ . - sqrt ) ) ) ;
rank: 944
score: 99.0236307779948
patch: ( sqrt ( 0 . 0 ) ) ) ) ;
rank: 944
score: 99.01543634588069
patch: ( ( 1 . $NUMBER$ ) ) ) ) ;
rank: 944
score: 98.84326782226563
patch: ( $NUMBER$ . 0 ) ) ) * *
rank: 944
score: 98.74046630859375
patch: ( $NUMBER$ . - $NUMBER$ ) ) ) ;
rank: 944
score: 98.6846923828125
patch: ( ( x - mean ) ) ) ;
rank: 945
score: 99.01436157226563
patch: ( double $NUMBER$ . 0 ) ) ) ;
rank: 945
score: 98.98079057173295
patch: ( double . sqrt ( ) ) ) ) ;
rank: 945
score: 98.91753472222223
patch: ( double ) double ) $NUMBER$ ) ;
rank: 945
score: 98.90999755859374
patch: ( double ) float CaMeL Value ) ) ;
rank: 945
score: 98.84298095703124
patch: ( $NUMBER$ . 0 ) ) 0 ) ;
rank: 945
score: 98.84122721354167
patch: ( 1 . $NUMBER$ ) ) ) ;
rank: 945
score: 98.73945922851563
patch: ( $NUMBER$ 1 . 0 ) ) ) ;
rank: 946
score: 99.11014811197917
patch: ( standard CaMeL Deviation > standard CaMeL Deviation ) ) ;
rank: 946
score: 98.99972534179688
patch: double . erf ( $NUMBER$ . 0 ) ) ) ;
rank: 946
score: 98.90624321831598
patch: $NUMBER$ . 0 * $NUMBER$ ) ) ;
rank: 946
score: 98.83778076171875
patch: ( $NUMBER$ . 0 ) ) ) ? $STRING$
rank: 946
score: 98.73912353515625
patch: ( $NUMBER$ <= 0 . 0 ) ) ;
rank: 947
score: 99.011865234375
patch: ( double ) true . 0 ) ) ;
rank: 947
score: 98.73782958984376
patch: ( $NUMBER$ . 0 SIZE ) ) ) ;
rank: 947
score: 98.68219672309027
patch: ( / ( ) ) ) ) ;
rank: 948
score: 99.1041259765625
patch: ( ( int ) standard CaMeL Deviation ) ) ) ;
rank: 948
score: 99.00860040838069
patch: ( length * 0 . 0 ) ) ) ;
rank: 948
score: 98.99341837565105
patch: ( standard CaMeL Deviation * $STRING$ ) ) ) ; }
rank: 948
score: 98.90894165039063
patch: ( double ) Integer . 0 ) ) ;
rank: 948
score: 98.83572387695312
patch: ( $NUMBER$ . 0 ) ) ) false ;
rank: 948
score: 98.68173217773438
patch: ( << $NUMBER$ . 0 ) ) ) ;
rank: 949
score: 99.10177612304688
patch: ( $NUMBER$ . 0 ) $NUMBER$ . 0 ) ) ;
rank: 949
score: 99.00565962357955
patch: standard CaMeL Deviation * 0 . 0 ) ) ;
rank: 949
score: 98.99306233723958
patch: ( standard CaMeL Deviation * new double ) ) ) ;
rank: 949
score: 98.90694580078124
patch: ( double ) Double . 0 ) ) ;
rank: 949
score: 98.83568115234375
patch: sqrt ( $NUMBER$ . 0 ) ) ) *
rank: 949
score: 98.71946207682292
patch: ( $NUMBER$ . 1 ) ) ) ;
rank: 950
score: 99.00510475852273
patch: ( Double . length ( ) ) ) ) ;
rank: 950
score: 98.97553045099431
patch: ( * * 0 . 0 ) ) ) ;
rank: 950
score: 98.71577962239583
patch: ( x > mean ) ) ) ;
rank: 950
score: 98.67694091796875
patch: 0 . 0 ) ) ;
rank: 951
score: 98.9741543856534
patch: ( * 0 . 0 ) ) ) ) ;
rank: 951
score: 98.9036636352539
patch: ( double ) sqrt ) ) ;
rank: 951
score: 98.88914794921875
patch: ( 1 . 0 * ) ) ) ;
rank: 951
score: 98.82760620117188
patch: ( $NUMBER$ . 0 ) $NUMBER$ ) ) ;
rank: 951
score: 98.67680053710937
patch: ( standard CaMeL Deviation == ) ) ) ;
rank: 952
score: 98.97245649857955
patch: ( byte * 0 . 0 ) ) ) ;
rank: 952
score: 98.90338812934027
patch: $NUMBER$ . 0 . 0 ) ) ;
rank: 952
score: 98.82258911132813
patch: ( 1 . 0 ) 0 ) ) ;
rank: 952
score: 98.70182969835069
patch: ( $NUMBER$ <= $NUMBER$ ) ) ) ;
rank: 953
score: 98.99725952148438
patch: ( - standard CaMeL Deviation ) ) ) ;
rank: 953
score: 98.9868672688802
patch: ( ( x - double ) mean ) ) ) ;
rank: 953
score: 98.89683837890625
patch: ( double ) ( x ) ) ) ;
rank: 953
score: 98.88454182942708
patch: ( double [ ] ) ) ) ;
rank: 953
score: 98.82190551757813
patch: ( 0 . 0 0 ) ) ) ;
rank: 953
score: 98.81193237304687
patch: ( $NUMBER$ > 0 . 0 ) ) )
rank: 953
score: 98.69934760199652
patch: ( $NUMBER$ < $NUMBER$ ) ) ) ;
rank: 953
score: 98.674853515625
patch: ( new $NUMBER$ . 0 ) ) ) ;
rank: 954
score: 98.98586018880208
patch: ( standard CaMeL Deviation * - x ) ) ) ;
rank: 954
score: 98.89559326171874
patch: ( float ) 0 . $NUMBER$ ) ) ;
rank: 954
score: 98.82149658203124
patch: standard CaMeL Deviation ( x ) ) ) ;
rank: 954
score: 98.69094509548611
patch: ( sqrt ( ) ) ) ) ;
rank: 954
score: 98.67390950520833
patch: ( true . 0 ) ) ) ;
rank: 955
score: 98.9843037923177
patch: ( abs ( $NUMBER$ . 0 ) ) ) ) ;
rank: 955
score: 98.97153542258523
patch: ( ( $STRING$ . 0 ) ) ) ) ;
rank: 955
score: 98.87822875976562
patch: ( $NUMBER$ . 0 ) ) ) ] ;
rank: 955
score: 98.68813747829861
patch: ( $NUMBER$ [ 0 ) ) ) ;
rank: 955
score: 98.67332763671875
patch: ( standard CaMeL Deviation -- ) ) ) ;
rank: 956
score: 98.89229125976563
patch: ( double ) Float . 0 ) ) ;
rank: 956
score: 98.87714385986328
patch: ( int ) $NUMBER$ ) ) ;
rank: 956
score: 98.67725965711806
patch: ( x >= mean ) ) ) ;
rank: 957
score: 98.98719371448864
patch: ( 0 . 0 . 1 ) ) ) ;
rank: 957
score: 98.87573852539063
patch: $NUMBER$ . 0 * $NUMBER$ ) ) ) ;
rank: 957
score: 98.80860595703125
patch: ( $NUMBER$ . 0 ) ) ) ? true
rank: 957
score: 98.67009887695312
patch: ( * ( x ) ) ) ) ;
rank: 958
score: 98.9868408203125
patch: ( ( 0 . ) ) ) ) ;
rank: 958
score: 98.9837137858073
patch: Dimension . sqrt ( $NUMBER$ . 0 ) ) ) ;
rank: 958
score: 98.96828002929688
patch: ( * sqrt . 0 ) ) ) ;
rank: 958
score: 98.8752212524414
patch: ( double ) 0 ) ) ;
rank: 958
score: 98.80677490234375
patch: ( $NUMBER$ . 0 ) ) x ) ;
rank: 958
score: 98.66909790039062
patch: ( ( ( ) ) ) ) ) ;
rank: 958
score: 98.6595687866211
patch: ( + mean ) ) ) ;
rank: 959
score: 98.98475952148438
patch: standard CaMeL Deviation ( $NUMBER$ ) ) ) ;
rank: 959
score: 98.96407063802083
patch: ( standard CaMeL Deviation * false ) ) ) ; }
rank: 959
score: 98.80674438476562
patch: ( $NUMBER$ . 0 ) ) 1 ) ;
rank: 959
score: 98.668115234375
patch: ( ( ) . $NUMBER$ ) ) ) ;
rank: 959
score: 98.64595540364583
patch: ( null - mean ) ) ) ;
rank: 960
score: 98.98208618164062
patch: ( Double ) 0 . 0 ) ) ;
rank: 960
score: 98.96458851207386
patch: ( double * sqrt . 0 ) ) ) ;
rank: 960
score: 98.960302734375
patch: ( 1 . 0 ) ) ) ; }
rank: 960
score: 98.80757446289063
patch: / ( $NUMBER$ . 0 ) ) ) ;
rank: 961
score: 99.06558837890626
patch: ( 1 . 0 ] ) ) ) ;
rank: 961
score: 98.976416015625
patch: ( ( 1 . ) ) ) ) ;
rank: 961
score: 98.9602762858073
patch: ( standard CaMeL Deviation != null double ) ) ) ;
rank: 961
score: 98.86978149414062
patch: $NUMBER$ . 0 ) , ( ) ) ;
rank: 961
score: 98.8609619140625
patch: ( standard CaMeL Deviation $NUMBER$ ) ) ) ;
rank: 961
score: 98.80742797851562
patch: ( $NUMBER$ . 0 ) ) ) 1 ;
rank: 961
score: 98.8005859375
patch: ( $NUMBER$ . 0 ) ) ) + x
rank: 961
score: 98.66256713867188
patch: ( ( $NUMBER$ . ) ) ) ) ;
rank: 961
score: 98.63832600911458
patch: ( this . erf ) ) ) ;
rank: 962
score: 98.86094970703125
patch: ( double ) standard CaMeL Deviation * / ;
rank: 962
score: 98.799658203125
patch: ( $NUMBER$ . 0 ) ) ) : ;
rank: 962
score: 98.63028293185764
patch: ( int - mean ) ) ) ;
rank: 963
score: 98.86010131835937
patch: ( double ) $NUMBER$ * $NUMBER$ ) ) ;
rank: 963
score: 98.85212707519531
patch: ( double ) $STRING$ ) ) ;
rank: 963
score: 98.79864501953125
patch: ( $NUMBER$ . 0 ) ] ) ) ;
rank: 964
score: 99.04969371448864
patch: ( Long . length ( ) ) ) ) ;
rank: 964
score: 98.9671630859375
patch: ( 1 . 0 1 ) ) ) ;
rank: 964
score: 98.85112762451172
patch: ( double ) x ) ) ;
rank: 964
score: 98.84505886501736
patch: ( double ) $NUMBER$ ) ) ) ;
rank: 964
score: 98.64898003472223
patch: ( ) ) / ( ) ) ;
rank: 964
score: 98.62653266059027
patch: ( x * mean ) ) ) ;
rank: 965
score: 98.80713653564453
patch: 1 . 0 ) ) ) ;
rank: 965
score: 98.62494574652777
patch: ( $NUMBER$ - sqrt ) ) ) ;
rank: 966
score: 99.04902787642045
patch: ( $NUMBER$ . 0 >> $NUMBER$ ) ) ) ;
rank: 966
score: 98.9634765625
patch: ( $NUMBER$ [ 0 ] ) ) ) ;
rank: 966
score: 98.76359049479167
patch: ( value - mean ) ) ) ;
rank: 966
score: 98.64121500651042
patch: ( ) / ( ) ) ) ;
rank: 966
score: 98.61759440104167
patch: ( T - mean ) ) ) ;
rank: 967
score: 98.95867309570312
patch: ( 0 . 0 1 ) ) ) ;
rank: 967
score: 98.94610040838069
patch: ( ( x - sqrt ) ) ) ) ;
rank: 967
score: 98.94310413707386
patch: ( float * standard CaMeL Deviation ) ) ) ;
rank: 967
score: 98.7743911743164
patch: ( double ) start ) ) ;
rank: 967
score: 98.63866509331598
patch: ( byte - mean ) ) ) ;
rank: 967
score: 98.60869004991319
patch: ( long - mean ) ) ) ;
rank: 968
score: 99.04254705255681
patch: ( 0 . 0 >> $NUMBER$ ) ) ) ;
rank: 968
score: 98.79508972167969
patch: ( float ) $NUMBER$ ) ) ;
rank: 968
score: 98.6351318359375
patch: ( x ) ) ) ;
rank: 968
score: 98.60645209418402
patch: ( x < mean ) ) ) ;
rank: 969
score: 98.95647515190973
patch: ( ( ) ] ) ) ) ;
rank: 969
score: 98.78990173339844
patch: ( double ) ) $NUMBER$ ) ;
rank: 969
score: 98.73200988769531
patch: ( double ) false ) ) ;
rank: 969
score: 98.61575656467014
patch: ( x - } ) ) ) ;
rank: 969
score: 98.59532335069444
patch: ( $NUMBER$ > $NUMBER$ ) ) ) ;
rank: 970
score: 99.0392733487216
patch: ( int ) 0 . 0 ) ) ) ;
rank: 970
score: 98.95628051757812
patch: ( double 1 . 0 ) ) ) ;
rank: 970
score: 98.94025213068181
patch: ( sqrt * 0 . 0 ) ) ) ;
rank: 970
score: 98.78607788085938
patch: ( $NUMBER$ . 0 ) ) ) + *
rank: 970
score: 98.76980590820312
patch: ( long ) $NUMBER$ ) ) ;
rank: 970
score: 98.72352600097656
patch: ( double ) null ) ) ;
rank: 971
score: 99.03532270951705
patch: ( byte ) 0 . 0 ) ) ) ;
rank: 971
score: 98.9540283203125
patch: ( double ) $STRING$ . 0 ) ) ;
rank: 971
score: 98.94020385742188
patch: ( << 0 . 0 ) ) ) ;
rank: 971
score: 98.78587036132812
patch: ( $NUMBER$ . 0 ) ) ) ? )
rank: 971
score: 98.7540283203125
patch: ( double ) $NUMBER$ . ) ) ;
rank: 971
score: 98.72821723090277
patch: ( double - mean ) ) ) ;
rank: 971
score: 98.71878051757812
patch: ( double ) value ) ) ;
rank: 971
score: 98.60223388671875
patch: ( ( $NUMBER$ ) ) ) ) ;
rank: 972
score: 98.93781072443181
patch: ( x * 0 . 0 ) ) ) ;
rank: 972
score: 98.73774719238281
patch: ( double ) length ) ) ;
rank: 972
score: 98.71244981553819
patch: ( x - erf ) ) ) ;
rank: 972
score: 98.58734130859375
patch: ( short - mean ) ) ) ;
rank: 973
score: 98.72075059678819
patch: ( length * $NUMBER$ ) ) ) ;
rank: 973
score: 98.58659362792969
patch: ( $NUMBER$ . 0 ) ) ;
rank: 974
score: 98.93580932617188
patch: ( double ) false . 0 ) ) ;
rank: 974
score: 98.89870383522727
patch: ( ( x - length ) ) ) ) ;
rank: 974
score: 98.781005859375
patch: ( $NUMBER$ . 0 ) ) ) )
rank: 974
score: 98.6709976196289
patch: ( double ) min ) ) ;
rank: 974
score: 98.55276489257812
patch: ( x - mean ) ) ;
rank: 975
score: 99.01331787109375
patch: ( int ) $NUMBER$ . $NUMBER$ ) ) ;
rank: 975
score: 98.65896267361111
patch: ( x - $NUMBER$ ) ) ) ;
rank: 975
score: 98.65312957763672
patch: ( double ) sum ) ) ;
rank: 975
score: 98.50495910644531
patch: ( $NUMBER$ ] ) ) ) ;
rank: 976
score: 98.93319702148438
patch: ( double ) Math . 0 ) ) ;
rank: 976
score: 98.91683959960938
patch: ( *= 0 . 0 ) ) ) ;
rank: 976
score: 98.88979270241477
patch: ( ( x - abs ) ) ) ) ;
rank: 976
score: 98.77955932617188
patch: ( - mean . 0 ) ) ) ;
rank: 976
score: 98.71992492675781
patch: ( double ) double ) ) ;
rank: 976
score: 98.65282331194196
patch: standard CaMeL Deviation ) ) ;
rank: 976
score: 98.50758192274306
patch: ( >> ( ) ) ) ) ;
rank: 976
score: 98.50418526785714
patch: sqrt ( ) ) ) ;
rank: 977
score: 98.90324096679687
patch: ( [ 0 . 0 ) ) ) ;
rank: 977
score: 98.88828346946023
patch: ( ( x - value ) ) ) ) ;
rank: 977
score: 98.68461608886719
patch: $NUMBER$ . 0 ) ) * ;
rank: 977
score: 98.64921569824219
patch: ( double ) mean ) ) ;
rank: 977
score: 98.63531494140625
patch: ( float ) sqrt ) ) ;
rank: 977
score: 98.50522189670139
patch: ( null . 0 ) ) ) ;
rank: 977
score: 98.50013732910156
patch: sqrt ( $NUMBER$ ) ) ) ;
rank: 978
score: 99.00274047851562
patch: ( char ) $NUMBER$ . 0 ) ) ;
rank: 978
score: 98.62765502929688
patch: 0 . 0 ) ) ) ;
rank: 978
score: 98.49698893229167
patch: ( SIZE . 0 ) ) ) ;
rank: 978
score: 98.49176025390625
patch: ( * mean ) ) ) ;
rank: 979
score: 98.6211166381836
patch: ( float ) $STRING$ ) ) ;
rank: 979
score: 98.5813980102539
patch: ( float ) mean ) ) ;
rank: 979
score: 98.4859390258789
patch: ( long ) x ) ) ;
rank: 980
score: 98.97235107421875
patch: ( / standard CaMeL Deviation ) ) ) ;
rank: 980
score: 98.92362670898437
patch: ( $STRING$ [ 0 ] ) ) ) ;
rank: 980
score: 98.63406372070312
patch: ( double ) ( double ) ;
rank: 980
score: 98.62028503417969
patch: ( float ) x ) ) ;
rank: 980
score: 98.57198333740234
patch: ( int ) mean ) ) ;
rank: 980
score: 98.46497344970703
patch: ( << mean ) ) ) ;
rank: 980
score: 98.46453857421875
patch: ( - x ) ) ) ;
rank: 981
score: 98.96864624023438
patch: ( int ) $NUMBER$ . 1 ) ) ;
rank: 981
score: 98.876220703125
patch: ( *= $NUMBER$ . 0 ) ) ) ;
rank: 981
score: 98.86562278053977
patch: ( 1 . 1 . 0 ) ) ) ;
rank: 981
score: 98.63043212890625
patch: $NUMBER$ . 0 ) ) + ;
rank: 981
score: 98.61396789550781
patch: ( double ) true ) ) ;
rank: 981
score: 98.56941223144531
patch: ( x - mean ) ) )
rank: 981
score: 98.45820617675781
patch: ( $NUMBER$ * ) ) ) ;
rank: 981
score: 98.4027328491211
patch: ( $NUMBER$ . ) ) ) ;
rank: 982
score: 98.96806640625
patch: ( char ) 0 . 0 ) ) ;
rank: 982
score: 98.62584686279297
patch: / $NUMBER$ . 0 ) ) ;
rank: 982
score: 98.3999252319336
patch: ( new x ) ) ) ;
rank: 983
score: 98.9670654296875
patch: ( sqrt 1 . 0 ) ) ) ;
rank: 983
score: 98.81979370117188
patch: ( ( double ) mean ) ) ) ;
rank: 983
score: 98.58187866210938
patch: $NUMBER$ . 0 ) ) / ;
rank: 983
score: 98.44420623779297
patch: sqrt ( x ) ) ) ;
rank: 983
score: 98.397705078125
patch: ( -- x ) ) ) ;
rank: 984
score: 98.90635986328125
patch: ( Double ) $NUMBER$ . 0 ) ) ;
rank: 984
score: 98.78670654296874
patch: ( ( double ) x ) ) ) ;
rank: 984
score: 98.6556396484375
patch: ( start - mean ) ) ) ;
rank: 984
score: 98.58818817138672
patch: ( double ) max ) ) ;
rank: 984
score: 98.51936340332031
patch: ( 1 . 0 ) ) )
rank: 984
score: 98.43258666992188
patch: ( ~ mean ) ) ) ;
rank: 985
score: 98.67512342664931
patch: ( $STRING$ . 0 ) ) ) ;
rank: 985
score: 98.57802036830357
patch: $NUMBER$ . $NUMBER$ ) ) ;
rank: 985
score: 98.56967599051339
patch: 32 . 0 ) ) ;
rank: 985
score: 98.48460388183594
patch: ( long ) mean ) ) ;
rank: 985
score: 98.42405700683594
patch: ( . 0 ) ) ) ;
rank: 985
score: 98.39582170758929
patch: ( $NUMBER$ ) ) ) ;
rank: 986
score: 98.41761016845703
patch: ( / mean ) ) ) ;
rank: 986
score: 98.39346313476562
patch: ( x ) ) ) ) ;
rank: 987
score: 98.5416488647461
patch: double $NUMBER$ . 0 ) ) ;
rank: 987
score: 98.45096261160714
patch: $NUMBER$ . 1 ) ) ;
rank: 987
score: 98.41620635986328
patch: ( ) . 0 ) ) ;
rank: 987
score: 98.38188934326172
patch: ( byte ) $NUMBER$ ) ) ;
rank: 988
score: 98.45879364013672
patch: ( byte ) mean ) ) ;
rank: 988
score: 98.38262067522321
patch: 8 . 0 ) ) ;
rank: 988
score: 98.37246268136161
patch: ( standard CaMeL Deviation * (
rank: 988
score: 98.31914411272321
patch: ( start ) ) ) ;
rank: 989
score: 98.945703125
patch: ( << 1 . 0 ) ) ) ;
rank: 989
score: 98.55250549316406
patch: ( float ) 1 ) ) ;
rank: 989
score: 98.37941196986607
patch: 16 . 0 ) ) ;
rank: 989
score: 98.37313079833984
patch: ( byte ) x ) ) ;
rank: 989
score: 98.31283133370536
patch: double . 0 ) ) ;
rank: 989
score: 98.29779924665179
patch: ( mean ) ) ) ;
rank: 990
score: 98.94505615234375
patch: ( standard CaMeL Deviation >> ) ) ) ;
rank: 990
score: 98.80448404947917
patch: ( $STRING$ [ 0 ) ) ) ;
rank: 990
score: 98.44512067522321
patch: ( double ) ) ) ;
rank: 990
score: 98.22268240792411
patch: 0 . $NUMBER$ ) ) ;
rank: 990
score: 98.09507242838542
patch: $NUMBER$ . 0 ) ;
rank: 991
score: 98.9408203125
patch: ( char ) standard CaMeL Deviation ) ) ;
rank: 991
score: 98.25566755022321
patch: double . $NUMBER$ ) ) ;
rank: 991
score: 98.22041625976563
patch: mean ) ) ;
rank: 991
score: 98.06504313151042
patch: $NUMBER$ . ) ) ;
rank: 992
score: 98.34004211425781
patch: ( short ) x ) ) ;
rank: 992
score: 98.25178745814732
patch: ( ( standard CaMeL Deviation *
rank: 992
score: 98.16719273158482
patch: ( $NUMBER$ . 0 ) )
rank: 992
score: 97.984423828125
patch: $NUMBER$ ) ) ;
rank: 993
score: 98.40620422363281
patch: ( 0 . 0 ) ) )
rank: 993
score: 98.2426249186198
patch: ( standard CaMeL Deviation *
rank: 993
score: 97.7581298828125
patch: L ) ) ;
rank: 994
score: 97.74109497070313
patch: scale ) ) ;
rank: 995
score: 98.71778021918402
patch: double . 0 . 0 ) ) ;
rank: 995
score: 97.68095703125
patch: $STRING$ ) ) ;
rank: 995
score: 97.574609375
patch: double ) ) ;
rank: 995
score: 97.436181640625
patch: erf ) ) ;
rank: 996
score: 98.69468180338542
patch: ( double . 0 ) ) ) ;
rank: 996
score: 98.09376743861607
patch: ( false ) ) ) ;
rank: 996
score: 97.70064086914063
patch: ( double ) ;
rank: 996
score: 97.66263427734376
patch: width ) ) ;
rank: 996
score: 97.44572143554687
patch: y ) ) ;
rank: 996
score: 97.43200073242187
patch: x ) ) ;
rank: 997
score: 98.66142272949219
patch: ( int ) false ) ) ;
rank: 997
score: 97.6608154296875
patch: now ) ) ;
rank: 997
score: 97.41941528320312
patch: sqrt ) ) ;
rank: 997
score: 97.39373779296875
patch: $NUMBER$ . ;
rank: 998
score: 98.59672546386719
patch: ( - sqrt ) ) ) ;
rank: 998
score: 98.49004255022321
patch: Double . 0 ) ) ;
rank: 998
score: 97.649560546875
patch: time ) ) ;
rank: 998
score: 96.49999237060547
patch: ) ) ;
rank: 998
score: 95.98470052083333
patch: ( (
rank: 998
score: 95.03287760416667
patch: ( standard
rank: 999
score: 97.61640625
patch: true ) ) ;
rank: 999
score: 97.3750244140625
patch: Deviation ) ) ;
rank: 999
score: 96.3821029663086
patch: ( x ;
rank: 999
score: 94.97643025716145
patch: ( $NUMBER$
rank: 999
score: 94.80938720703125
patch: (
rank: 1000
score: 97.59007568359375
patch: 1 ) ) ;
rank: 1000
score: 95.33644612630208
patch: $NUMBER$ ;
rank: 1000
score: 93.47407531738281
patch: double
rank: 1000
score: 92.71723937988281
patch: erf
