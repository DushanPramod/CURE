rank: 1
score: 99.8465067545573
patch: return - val 1 ;
rank: 1
score: 99.55757141113281
patch: return 0 ;
rank: 1
score: 99.55457763671875
patch: return val 1 ;
rank: 1
score: 99.52088012695313
patch: return - 1 ;
rank: 1
score: 99.43392333984374
patch: return - 1 ; return - val 1 ;
rank: 2
score: 99.57094319661458
patch: return - val $NUMBER$ ;
rank: 2
score: 99.428466796875
patch: return - 1 ; return - 1 ;
rank: 3
score: 99.48392740885417
patch: return - val 1 ; case 1 :
rank: 3
score: 99.48151104266827
patch: throw new Arithmetic CaMeL Exception ( $STRING$ + val 1 ) ;
rank: 3
score: 99.43345289963942
patch: return Long . parse CaMeL Long ( - val 1 ) ;
rank: 3
score: 99.36936950683594
patch: return - 1 ; - 1 ;
rank: 3
score: 99.26203918457031
patch: return - val 1 ; break ;
rank: 4
score: 99.43084247295673
patch: return Long . value CaMeL Of ( - val 1 ) ;
rank: 4
score: 99.385498046875
patch: return safe CaMeL Multiply ( val 1 ) ;
rank: 4
score: 99.36503295898437
patch: return - val 1 ; - - 1 ;
rank: 4
score: 99.33433024088542
patch: return - 1 1 ;
rank: 4
score: 99.2687744140625
patch: return 0 ; case 1 : return 0 ;
rank: 4
score: 99.24320678710937
patch: return val 1 ; return - val 1 ;
rank: 5
score: 99.41048177083333
patch: return Long . value CaMeL Of ( - val 1 ;
rank: 5
score: 99.361474609375
patch: return - val 1 ; return - 1 ;
rank: 5
score: 99.3104248046875
patch: return safe CaMeL Multiply ( val $NUMBER$ ) ;
rank: 5
score: 99.30730523003473
patch: return - val 1 * val 1 ;
rank: 5
score: 99.26865234375
patch: return - 0 ;
rank: 6
score: 99.39969889322917
patch: return val 1 * - val 1 ;
rank: 6
score: 99.3603182705966
patch: return - val 1 ; return - val 1 ;
rank: 6
score: 99.33949788411458
patch: return val 1 ; case 1 : return val 1 ;
rank: 6
score: 99.30308532714844
patch: return val 1 * val 1 ;
rank: 6
score: 99.29735717773437
patch: return 0 ; case 0 : return 0 ;
rank: 6
score: 99.28838641826923
patch: throw new Arithmetic CaMeL Exception ( $STRING$ + val $NUMBER$ ) ;
rank: 6
score: 99.28748914930556
patch: return - $NUMBER$ ; return - 1 ;
rank: 6
score: 99.27146218039773
patch: throw new Arithmetic CaMeL Exception ( val 1 ) ;
rank: 7
score: 99.39461059570313
patch: return - val 1 | - val 1 ;
rank: 7
score: 99.33338165283203
patch: return val 1 ; case 1 :
rank: 7
score: 99.31729125976562
patch: return - val 1 ; return val 1 ;
rank: 7
score: 99.30223846435547
patch: return val 1 * val $NUMBER$ ;
rank: 7
score: 99.28382568359375
patch: return - 1 ; } return - 1 ;
rank: 7
score: 99.26128680889423
patch: return val 1 . safe CaMeL Multiply ( val 1 ) ;
rank: 7
score: 99.21868024553571
patch: return - 1 ; break ;
rank: 8
score: 99.32264200846355
patch: throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ;
rank: 8
score: 99.28267996651786
patch: return - val 1 1 ;
rank: 8
score: 99.27848815917969
patch: return ( long ) val 1 ;
rank: 8
score: 99.2540283203125
patch: return safe CaMeL Multiply ( val 1 , 0 ) ;
rank: 9
score: 99.36924391526442
patch: return Integer . parse CaMeL Int ( - val 1 ) ;
rank: 9
score: 99.29818960336539
patch: return - val 1 ; case 1 : return val 1 ;
rank: 9
score: 99.29806857638889
patch: return 0 ; return - val 1 ;
rank: 9
score: 99.28142700195312
patch: return - $NUMBER$ ;
rank: 9
score: 99.248779296875
patch: return val $NUMBER$ ;
rank: 9
score: 99.21780056423611
patch: case 1 : return - val 1 ;
rank: 9
score: 99.21259099786931
patch: return val 1 * val 1 * val $NUMBER$ ;
rank: 9
score: 99.17451985677083
patch: return - val 1 ; val 1 {
rank: 10
score: 99.36769456129808
patch: return Long . parse CaMeL Int ( - val 1 ) ;
rank: 10
score: 99.29718017578125
patch: return val 1 ; case 1 : return - 1 ;
rank: 10
score: 99.29613037109375
patch: return - val 1 ; return - 0 ;
rank: 10
score: 99.2308837890625
patch: throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ + val 1 ) ;
rank: 10
score: 99.22978864397321
patch: return 0 * val 1 ;
rank: 10
score: 99.21478949652777
patch: return - val 1 * val $NUMBER$ ;
rank: 10
score: 99.18378240411931
patch: return 0 ; case 1 : return val 1 ;
rank: 10
score: 99.16808471679687
patch: return - val 1 ; max / 1 ;
rank: 11
score: 99.36744181315105
patch: return Long . parse CaMeL Long ( - val 1 ;
rank: 11
score: 99.28458658854167
patch: return - 1 ; case 1 : return - 1 ;
rank: 11
score: 99.28330993652344
patch: return 0 ; return - 1 ;
rank: 11
score: 99.2470703125
patch: return - 1 ; else return - 1 ;
rank: 11
score: 99.22256673177084
patch: throw new Arithmetic CaMeL Exception ( $STRING$ + val 1 + $STRING$ ) ;
rank: 11
score: 99.2170181274414
patch: return - 1 * val 1 ;
rank: 11
score: 99.20638020833333
patch: return safe CaMeL Multiply ( val 1 , 1 ) ;
rank: 11
score: 99.16573660714286
patch: return - - val 1 ;
rank: 12
score: 99.35406494140625
patch: return val 1 & - val 1 ;
rank: 12
score: 99.2803955078125
patch: return - 1 ; ; - 1 ;
rank: 12
score: 99.26710001627605
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ) ;
rank: 12
score: 99.22733154296876
patch: return - $NUMBER$ + - - val 1 ;
rank: 12
score: 99.22205528846153
patch: throw new Runtime CaMeL Exception ( $STRING$ + val 1 ) ;
rank: 12
score: 99.19877624511719
patch: return ( - val 1 ) ;
rank: 12
score: 99.18133544921875
patch: throw new Arithmetic CaMeL Exception ( $STRING$ ) ;
rank: 12
score: 99.16220925071023
patch: return safe CaMeL Multiply ( - val 1 ) ;
rank: 13
score: 99.3523661295573
patch: return Long . parse CaMeL Long ( val 1 ) ;
rank: 13
score: 99.26129619891827
patch: return - val 1 ; case 1 : return - 1 ;
rank: 13
score: 99.25722927517361
patch: return - val 1 ; - 1 ;
rank: 13
score: 99.21346609933036
patch: return val 1 . safe CaMeL Multiply ( - val 1 ) ;
rank: 13
score: 99.1874667080966
patch: return val 1 . long CaMeL Value ( ) ;
rank: 13
score: 99.155908203125
patch: return ( val 1 * val $NUMBER$ ) ;
rank: 14
score: 99.33880615234375
patch: return Integer . parse CaMeL Int ( val 1 ) ;
rank: 14
score: 99.25596788194444
patch: return - 1 ; return - 0 ;
rank: 14
score: 99.25371759588069
patch: return Math . abs ( - val 1 ) ;
rank: 14
score: 99.20672137920673
patch: return safe CaMeL Multiply ( val 1 , val $NUMBER$ ) ;
rank: 14
score: 99.18669891357422
patch: return ( int ) val 1 ;
rank: 14
score: 99.175
patch: return 0 * val 1 * val $NUMBER$ ;
rank: 14
score: 99.16192626953125
patch: return - val 1 * - val 1 ;
rank: 14
score: 99.15574137369792
patch: return val 1 ? 0 : 0 ;
rank: 14
score: 99.1100741299716
patch: return - 1 ; return - 1 ; break ;
rank: 15
score: 99.32974947415866
patch: return - Long . value CaMeL Of ( val 1 ) ;
rank: 15
score: 99.24840630425348
patch: return - val $NUMBER$ ; case 1 :
rank: 15
score: 99.23253173828125
patch: return - $NUMBER$ ; return - val 1 ;
rank: 15
score: 99.20315551757812
patch: throw new Arithmetic CaMeL Exception ( $STRING$ + val 1 ,
rank: 15
score: 99.18414306640625
patch: return super . safe CaMeL Multiply ( val 1 ) ;
rank: 15
score: 99.1603495279948
patch: return safe CaMeL Multiply ( val 1 , $NUMBER$ ) ;
rank: 15
score: 99.10557725694444
patch: return - 1 ; return val 1 ;
rank: 16
score: 99.32745830829327
patch: return - Long . value CaMeL Of ( - val 1 ;
rank: 16
score: 99.24796549479167
patch: return Math . min ( val 1 , val 1 ;
rank: 16
score: 99.21682739257812
patch: return - $NUMBER$ 1 ;
rank: 16
score: 99.20027669270833
patch: throw new Arithmetic CaMeL Exception ( $STRING$ + val 1 ;
rank: 16
score: 99.16353607177734
patch: return val 1 ; case 0 :
rank: 16
score: 99.15830688476562
patch: return 0 * val 1 * val 1 ;
rank: 16
score: 99.1387451171875
patch: return 0 ; case $NUMBER$ : return 0 ;
rank: 16
score: 99.10161590576172
patch: return - 1 ; val 1 {
rank: 17
score: 99.31955190805289
patch: return Long . value CaMeL Of ( - val $NUMBER$ ) ;
rank: 17
score: 99.2449722290039
patch: return - 1 ; case 1 :
rank: 17
score: 99.19514770507813
patch: return val 1 ? 0 : val 1 ;
rank: 17
score: 99.14772727272727
patch: return - 1 ; case 0 : return 0 ;
rank: 17
score: 99.13950602213542
patch: safe CaMeL Multiply ( val 1 , val $NUMBER$ ) ;
rank: 17
score: 99.13806830512152
patch: return - val 1 ; case 0 :
rank: 17
score: 99.08560519748264
patch: return - 1 + - val 1 ;
rank: 18
score: 99.30592854817708
patch: return Long . parse CaMeL Int ( val 1 ) ;
rank: 18
score: 99.24293101917614
patch: throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ;
rank: 18
score: 99.20444064670139
patch: return - $NUMBER$ + - val 1 ;
rank: 18
score: 99.14137268066406
patch: return val 1 * - 1 ;
rank: 18
score: 99.13799370659723
patch: return - val 1 * - 1 ;
rank: 18
score: 99.13158569335937
patch: return ( val 1 * val 1 ) ;
rank: 18
score: 99.13046264648438
patch: return - val 1 . long CaMeL Value ( ) ;
rank: 19
score: 99.30448404947917
patch: return Long . value CaMeL Of ( val 1 ) ;
rank: 19
score: 99.24256388346355
patch: throw new Unsupported CaMeL Operation CaMeL Exception ( $STRING$ ) ;
rank: 19
score: 99.19874267578125
patch: return - val 1 ; - 1 ; ;
rank: 19
score: 99.19584825303819
patch: return - 1 ; return - $NUMBER$ ;
rank: 19
score: 99.12733043323864
patch: return 0 ; case 0 : return val 1 ;
rank: 19
score: 99.12203979492188
patch: return super . safe CaMeL Multiply ( val $NUMBER$ ) ;
rank: 19
score: 99.07965698242188
patch: return - 1 ; break ; - 1 ;
rank: 20
score: 99.302978515625
patch: return - val 1 | - val $NUMBER$ ;
rank: 20
score: 99.19869656032986
patch: return - 1 ; - 1 ; ;
rank: 20
score: 99.18626573350694
patch: return - Integer . MAX _ VALUE ;
rank: 20
score: 99.17552490234375
patch: return 0 ? - 1 : val 1 ;
rank: 20
score: 99.123974609375
patch: return - val 1 ? 0 : 0 ;
rank: 20
score: 99.07284545898438
patch: return - val 1 ; - 1 * /
rank: 21
score: 99.29678344726562
patch: return Integer . parse CaMeL Int ( - val 1 ;
rank: 21
score: 99.19818115234375
patch: return - 1 ; - - 1 ;
rank: 21
score: 99.18198852539062
patch: return - $NUMBER$ ; } return - 1 ;
rank: 21
score: 99.17149658203125
patch: return val 1 ? val 1 : 0 ;
rank: 21
score: 99.12701416015625
patch: return - - 1 ;
rank: 21
score: 99.11521218039773
patch: return val 1 . double CaMeL Value ( ) ;
rank: 21
score: 99.0704833984375
patch: return - 1 + - - val 1 ;
rank: 22
score: 99.2932598407452
patch: return Integer . value CaMeL Of ( - val 1 ) ;
rank: 22
score: 99.23366292317708
patch: return - val 1 ; case $NUMBER$ :
rank: 22
score: 99.191845703125
patch: return - val 1 ; - 1 1 ;
rank: 22
score: 99.17138671875
patch: return val 1 ? - 1 : 0 ;
rank: 22
score: 99.11643763950893
patch: return 0 * - 1 ;
rank: 22
score: 99.1064224243164
patch: case 1 : return val 1 ;
rank: 22
score: 99.10635811941964
patch: return ( val 1 ) ;
rank: 22
score: 99.06505584716797
patch: return - 1 ; return 1 ;
rank: 23
score: 99.29275512695312
patch: return Long . parse CaMeL Int ( - val 1 ;
rank: 23
score: 99.23092651367188
patch: return - 1 ; case 1 : return val 1 ;
rank: 23
score: 99.18843383789063
patch: return - val 1 ; ; - 1 ;
rank: 23
score: 99.10612487792969
patch: return ( - val $NUMBER$ ) ;
rank: 23
score: 99.10344904119319
patch: return val 1 ; case 0 : return 0 ;
rank: 23
score: 99.09824829101562
patch: return ( val 1 - val 1 ) ;
rank: 23
score: 99.05753580729167
patch: return - 1 ; val 1 { return - 1 ;
rank: 24
score: 99.28774789663461
patch: return Long . value CaMeL Of ( - val 1 1 ;
rank: 24
score: 99.22384643554688
patch: throw new Null CaMeL Pointer CaMeL Exception ( $STRING$ ) ;
rank: 24
score: 99.18795776367188
patch: return - - 1 ; return - 1 ;
rank: 24
score: 99.16860727163461
patch: throw new Arithmetic CaMeL Exception ( $STRING$ + val 1 + $STRING$
rank: 24
score: 99.11277262369792
patch: return - val 1 * val 1 * val $NUMBER$ ;
rank: 24
score: 99.09578080610795
patch: return 0 ; case 0 : return - 1 ;
rank: 24
score: 99.09576416015625
patch: case 0 : return - val 1 ;
rank: 24
score: 99.03980848524306
patch: return val 1 ; return val 1 ;
rank: 25
score: 99.28655450994319
patch: return Long . value CaMeL Of ( val 1 ;
rank: 25
score: 99.2228291829427
patch: return Math . max ( val 1 , val 1 ;
rank: 25
score: 99.0958964029948
patch: return val 1 ; case 0 : return val 1 ;
rank: 25
score: 99.0955322265625
patch: return ( val 1 - val $NUMBER$ ) ;
rank: 25
score: 99.03980431189903
patch: return - 1 ; val 1 { return - val 1 ;
rank: 26
score: 99.22069202769886
patch: return 0 ; case 1 : return - 1 ;
rank: 26
score: 99.17881469726562
patch: return - 1 ; - 1 ; ; ;
rank: 26
score: 99.16664123535156
patch: return 0 + - val 1 ;
rank: 26
score: 99.16017456054688
patch: return 0 ? val 1 : val 1 ;
rank: 26
score: 99.111572265625
patch: return val 1 * val $NUMBER$ * val $NUMBER$ ;
rank: 26
score: 99.094482421875
patch: return ( val 1 + val $NUMBER$ ) ;
rank: 26
score: 99.03583526611328
patch: return - val 1 ; val 1
rank: 27
score: 99.2123514811198
patch: return val 1 ; case 1 : return val $NUMBER$ ;
rank: 27
score: 99.16637073863636
patch: return - $NUMBER$ ? - 1 : - 1 ;
rank: 27
score: 99.15929303850446
patch: return - val 1 . safe CaMeL Multiply ( val 1 ) ;
rank: 27
score: 99.10793235085227
patch: return val 1 * val 1 * val 1 ;
rank: 27
score: 99.09309692382813
patch: return ( ( long ) val 1 ) ;
rank: 27
score: 99.08820936414931
patch: case $NUMBER$ : return - val 1 ;
rank: 27
score: 99.08562677556819
patch: return - 1 ; case 1 : return 0 ;
rank: 27
score: 99.0353012084961
patch: return val 1 + val 1 ;
rank: 28
score: 99.27511596679688
patch: return Long . value CaMeL Of ( - val $NUMBER$ ;
rank: 28
score: 99.17210693359375
patch: return - 0 ; return - val 1 ;
rank: 28
score: 99.15848795572917
patch: return val 1 ; return - 1 ;
rank: 28
score: 99.15225558810764
patch: return 0 ? 0 : val 1 ;
rank: 28
score: 99.086669921875
patch: return ( val 1 + val 1 ) ;
rank: 28
score: 99.07115681966145
patch: return - val 1 . double CaMeL Value ( ) ;
rank: 28
score: 99.03379991319444
patch: return - val 1 ; - 1 :
rank: 29
score: 99.27446153428819
patch: return - val 1 - val 1 ;
rank: 29
score: 99.20612444196429
patch: return - val 1 ; case 1 : return - val 1 ;
rank: 29
score: 99.16376953125
patch: return - 1 ; return - - 1 ;
rank: 29
score: 99.15150803786058
patch: throw new Arithmetic CaMeL Exception ( $STRING$ , val 1 ) ;
rank: 29
score: 99.07615152994792
patch: return 0 * 0 * val 1 ;
rank: 29
score: 99.07073296440973
patch: return ( long ) - val 1 ;
rank: 29
score: 99.02845110212054
patch: return val 1 ; break ;
rank: 30
score: 99.2736065204327
patch: return Long . parse CaMeL Long ( - val $NUMBER$ ) ;
rank: 30
score: 99.1982421875
patch: return - val 1 ; ; case 1 :
rank: 30
score: 99.1614990234375
patch: return - 1 ; - val 1 ;
rank: 30
score: 99.15714721679687
patch: return 0 ; else return - val 1 ;
rank: 30
score: 99.086083984375
patch: return - val 1 * - val $NUMBER$ ;
rank: 30
score: 99.0783358487216
patch: return val 1 ; case 1 : return 0 ;
rank: 30
score: 99.07360229492187
patch: return ( - 1 * val 1 ) ;
rank: 30
score: 99.0675800030048
patch: return - val 1 ; case 0 : return val 1 ;
rank: 30
score: 99.0169677734375
patch: return - val 1 ; return - - val 1 ;
rank: 31
score: 99.27345106336806
patch: return val 1 | - val 1 ;
rank: 31
score: 99.15322265625
patch: return - 1 ; } return - $NUMBER$ ;
rank: 31
score: 99.14888000488281
patch: try { return - val 1 ;
rank: 31
score: 99.08475748697917
patch: safe CaMeL Multiply ( val 1 , val 1 ) ;
rank: 31
score: 99.06971435546875
patch: return 0 * - 1 * val 1 ;
rank: 31
score: 99.01388985770089
patch: return - val 1 ; val 1 { return - val 1 ;
rank: 32
score: 99.26847839355469
patch: return val 1 - val 1 ;
rank: 32
score: 99.18871131310097
patch: throw new Unsupported CaMeL Operation CaMeL Exception ( val 1 ) ;
rank: 32
score: 99.15150282118056
patch: return - $NUMBER$ * - val 1 ;
rank: 32
score: 99.14744737413194
patch: return - 0 ; return - 1 ;
rank: 32
score: 99.06959533691406
patch: return - 1 * - 1 ;
rank: 32
score: 99.05667114257812
patch: return val $NUMBER$ * val 1 ;
rank: 32
score: 99.01034206814236
patch: return - 1 ; - 1 * /
rank: 33
score: 99.18851412259616
patch: return val 1 ; case 1 : return - val 1 ;
rank: 33
score: 99.14475504557292
patch: return Integer . value CaMeL Of ( - 1 ) ;
rank: 33
score: 99.13414713541667
patch: throw new Arithmetic CaMeL Exception ( $STRING$ + val 1 , $STRING$ ) ;
rank: 33
score: 99.13267686631944
patch: return - - 1 ; - 1 ;
rank: 33
score: 99.06964789496527
patch: return new Integer ( val 1 ) ;
rank: 33
score: 99.05947043678977
patch: throw new Arithmetic CaMeL Exception ( - 1 ) ;
rank: 33
score: 99.00914306640625
patch: return - val 1 - - val 1 ;
rank: 34
score: 99.2639911358173
patch: return Long . parse CaMeL Double ( - val 1 ) ;
rank: 34
score: 99.18789438100961
patch: throw new Illegal CaMeL Argument CaMeL Exception ( val 1 ) ;
rank: 34
score: 99.14148559570313
patch: return 0 ? - 1 : - 1 ;
rank: 34
score: 99.13362943209134
patch: return safe CaMeL Multiply ( val 1 , val 1 ) ;
rank: 34
score: 99.13008117675781
patch: return - 1 ; return 0 ;
rank: 34
score: 99.05788352272727
patch: return 0 ; case - 1 : return 0 ;
rank: 34
score: 99.051513671875
patch: return val $NUMBER$ * val $NUMBER$ ;
rank: 34
score: 99.00823974609375
patch: return - val 1 ; return 1 ;
rank: 35
score: 99.14073350694444
patch: return - val 1 + val 1 ;
rank: 35
score: 99.12735595703126
patch: return - val 1 + - val 1 ;
rank: 35
score: 99.06604875837054
patch: switch ( val 1 ) {
rank: 35
score: 99.05763938210227
patch: throw new Arithmetic CaMeL Exception ( val $NUMBER$ ) ;
rank: 35
score: 99.03956604003906
patch: return ( long ) val $NUMBER$ ;
rank: 35
score: 99.007568359375
patch: return - 1 ; val 1 { return val 1 ;
rank: 36
score: 99.26036580403645
patch: return Long . parse CaMeL Long ( - 1 ) ;
rank: 36
score: 99.1862460049716
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ;
rank: 36
score: 99.13837432861328
patch: return - $NUMBER$ + val 1 ;
rank: 36
score: 99.12691243489583
patch: return 0 ? val 1 : 0 ;
rank: 36
score: 99.12493896484375
patch: return - val 1 ; else return - val 1 ;
rank: 37
score: 99.25867638221153
patch: return - val 1 ; default : return - val 1 ;
rank: 37
score: 99.13832785866477
patch: return - val 1 ; return - val $NUMBER$ ;
rank: 37
score: 99.12464599609375
patch: return 0 ? 0 : - val 1 ;
rank: 37
score: 99.11804962158203
patch: return 0 ; - - 1 ;
rank: 37
score: 99.07212320963542
patch: return safe CaMeL Multiply ( val 1 , $STRING$ ) ;
rank: 37
score: 99.05669555664062
patch: return 0 * - $NUMBER$ * val 1 ;
rank: 37
score: 99.03404651988636
patch: return val 1 . int CaMeL Value ( ) ;
rank: 37
score: 98.9962666829427
patch: return - 1 ; return - 1 ; - 1 ;
rank: 38
score: 99.25607299804688
patch: return Integer . value CaMeL Of ( - val 1 ;
rank: 38
score: 99.1345458984375
patch: return - $NUMBER$ ; else return - 1 ;
rank: 38
score: 99.06694030761719
patch: return - val 1 * 0 ;
rank: 38
score: 99.05714246961806
patch: return new long ( val 1 ) ;
rank: 38
score: 99.05060424804688
patch: return val 1 * 0 * val $NUMBER$ ;
rank: 39
score: 99.25435697115384
patch: return Long . parse CaMeL Long ( - val 1 1 ;
rank: 39
score: 99.17527553013393
patch: return Math . min ( val 1 , 0 . 0 ) ;
rank: 39
score: 99.12783813476562
patch: return - 1 ; }
rank: 39
score: 99.11752554086539
patch: return val 1 . safe CaMeL Multiply ( val $NUMBER$ ) ;
rank: 39
score: 99.11367797851562
patch: return - $NUMBER$ ; - 1 ;
rank: 39
score: 99.02300555889423
patch: return ( val 1 ) . long CaMeL Value ( ) ;
rank: 40
score: 99.25082632211539
patch: return Long . value CaMeL Of ( val 1 ) . ;
rank: 40
score: 99.12765163845486
patch: return 0 ; else return - 1 ;
rank: 40
score: 99.11343383789062
patch: return 0 ; - val 1 ;
rank: 40
score: 99.10897122896634
patch: throw new Arithmetic CaMeL Exception ( $STRING$ , val $NUMBER$ ) ;
rank: 40
score: 99.06477864583333
patch: return safe CaMeL Multiply ( val 1 , false ) ;
rank: 40
score: 99.04888361150569
patch: throw new Arithmetic CaMeL Exception ( long 1 ) ;
rank: 40
score: 99.04883422851563
patch: case - 1 : return - val 1 ;
rank: 40
score: 99.02280002170139
patch: return ( int ) - val 1 ;
rank: 40
score: 98.99445258246527
patch: return val 1 + - val 1 ;
rank: 41
score: 99.248291015625
patch: return - Long . value CaMeL Of ( - 1 ) ;
rank: 41
score: 99.17356520432692
patch: return Math . min ( val 1 , val 1 ) ;
rank: 41
score: 99.10919189453125
patch: return - - 1 ; - - 1 ;
rank: 41
score: 99.10801696777344
patch: return 0 ? 0 : 0 ;
rank: 41
score: 99.01880900065105
patch: return Long . long CaMeL Value ( val 1 ) ;
rank: 41
score: 98.99385209517045
patch: return - val 1 ; break ; - 1 ;
rank: 42
score: 99.2462870279948
patch: return Long . value CaMeL Of ( - 1 ) ;
rank: 42
score: 99.17255859375
patch: return Math . abs ( val 1 ) ;
rank: 42
score: 99.10911051432292
patch: return - 1 ; ; - 0 ;
rank: 42
score: 99.04790496826172
patch: return - $NUMBER$ * val 1 ;
rank: 42
score: 99.04249156605114
patch: return 0 ; case $NUMBER$ : return val 1 ;
rank: 42
score: 99.01827298677884
patch: return - super . safe CaMeL Multiply ( val 1 ) ;
rank: 43
score: 99.24370783025569
patch: return Long . parse CaMeL Long ( val 1 ;
rank: 43
score: 99.1220947265625
patch: return - $NUMBER$ - - - val 1 ;
rank: 43
score: 99.1076171875
patch: return - val 1 ; - val 1 ;
rank: 43
score: 99.05452473958333
patch: return Integer . value CaMeL Of ( val 1 ) ;
rank: 43
score: 99.02592329545455
patch: throw new Arithmetic CaMeL Exception ( $STRING$ + val 1
rank: 43
score: 99.01475016276042
patch: return Long . value CaMeL Of ( val $NUMBER$ ) ;
rank: 43
score: 98.99315795898437
patch: return - 1 ; break ; val 1 {
rank: 44
score: 99.23641967773438
patch: return Integer . parse CaMeL Int ( - 1 ) ;
rank: 44
score: 99.15949041193181
patch: return Math . round ( - val 1 ) ;
rank: 44
score: 99.1219482421875
patch: return - $NUMBER$ * - - val 1 ;
rank: 44
score: 99.10299343532986
patch: return 0 ? - 1 : 0 ;
rank: 44
score: 99.09966486150569
patch: return - 1 ; else return - val 1 ;
rank: 44
score: 99.0514248934659
patch: return - 1 * val 1 * val 1 ;
rank: 44
score: 99.04343668619792
patch: return - val 1 * - $NUMBER$ ;
rank: 44
score: 99.02376302083333
patch: return new Long ( val 1 ) ;
rank: 44
score: 98.99237615411931
patch: return - val 1 ; - 1 / * /
rank: 45
score: 99.23277587890625
patch: return - val 1 / - val 1 ;
rank: 45
score: 99.15643310546875
patch: return - Math . abs ( - val 1 ) ;
rank: 45
score: 99.0989990234375
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + val 1 ) ;
rank: 45
score: 99.09376220703125
patch: return - 1 ; return - 1 ; ;
rank: 45
score: 99.04959106445312
patch: return in . safe CaMeL Multiply ( val 1 ) ;
rank: 45
score: 99.04310191761364
patch: return safe CaMeL Multiply ( val 1 1 ) ;
rank: 45
score: 99.02264959161931
patch: return - 0 ; case 1 : return 0 ;
rank: 45
score: 99.01249389648437
patch: return ( val 1 / val $NUMBER$ ) ;
rank: 45
score: 98.990087890625
patch: return - 1 ; val 1 / 1 ;
rank: 46
score: 99.2282206217448
patch: return - Long . value CaMeL Of ( val 1 ;
rank: 46
score: 99.15516880580357
patch: return - Long . parse CaMeL Long ( - val 1 ) ;
rank: 46
score: 99.0454813639323
patch: return safe CaMeL Multiply ( val $NUMBER$ , 0 ) ;
rank: 46
score: 99.02254486083984
patch: return - - - val 1 ;
rank: 46
score: 99.01070731026786
patch: return ( val $NUMBER$ ) ;
rank: 46
score: 98.98851776123047
patch: return - 1 + val 1 ;
rank: 47
score: 99.2259521484375
patch: return Long . Na CaMeL N ? - 1 : 0 ;
rank: 47
score: 99.15338604266827
patch: throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ 1 ) ;
rank: 47
score: 99.118994140625
patch: return - 1 1 ; return - 1 ;
rank: 47
score: 99.09156290690105
patch: return - 1 ; - 1 ; return - 1 ;
rank: 47
score: 99.0909912109375
patch: return - 0 ? 0 : val 1 ;
rank: 47
score: 99.04271443684895
patch: return - val 1 * val 1 * val 1 ;
rank: 47
score: 99.0357421875
patch: return val 1 * 0 * val 1 ;
rank: 47
score: 98.9874496459961
patch: return - val 1 ; System ;
rank: 48
score: 99.22523193359375
patch: return - val 1 ; case - 1 :
rank: 48
score: 99.15034702845982
patch: return - Long . parse CaMeL Int ( - val 1 ) ;
rank: 48
score: 99.11459350585938
patch: return Integer . value CaMeL Of ( - $NUMBER$ ) ;
rank: 48
score: 99.0902099609375
patch: return - - val 1 ; return - val 1 ;
rank: 48
score: 99.04188028971355
patch: return Math . max ( val 1 , 0 ) ;
rank: 48
score: 99.03202819824219
patch: return val 1 * - $NUMBER$ ;
rank: 48
score: 99.0203857421875
patch: safe CaMeL Multiply ( val 1 , 0 ) ;
rank: 48
score: 99.00756225585937
patch: return ( val 1 / val 1 ) ;
rank: 48
score: 98.9831210049716
patch: return - 1 ; return val 1 ; break ;
rank: 49
score: 99.22429063585069
patch: return val 1 & - val $NUMBER$ ;
rank: 49
score: 99.14947979266827
patch: return - Long . parse CaMeL Int ( val 1 ) ;
rank: 49
score: 99.1138671875
patch: return - val $NUMBER$ ; return - 1 ;
rank: 49
score: 99.089111328125
patch: return - 1 ; return - - val 1 ;
rank: 49
score: 99.0860595703125
patch: throw new Arithmetic CaMeL Exception ( val 1 , $STRING$ ) ;
rank: 49
score: 99.03138427734375
patch: return - 1 * 0 * val 1 ;
rank: 49
score: 99.0055264559659
patch: return val $NUMBER$ . long CaMeL Value ( ) ;
rank: 49
score: 98.98196411132812
patch: return - val 1 ; break ; break ;
rank: 50
score: 99.22190504807692
patch: return - Long . value CaMeL Of ( - val $NUMBER$ ;
rank: 50
score: 99.14930216471355
patch: return Math . abs ( val 1 * val 1 ;
rank: 50
score: 99.08849334716797
patch: return 0 ; return val 1 ;
rank: 50
score: 99.08527221679688
patch: return - 1 ? 0 : val 1 ;
rank: 50
score: 99.03678385416667
patch: throw new Arithmetic CaMeL Exception ( $STRING$ + $STRING$ ) ;
rank: 50
score: 99.01533813476563
patch: return - new Integer ( val 1 ) ;
rank: 50
score: 98.98076171875
patch: return val 1 + - - val 1 ;
rank: 51
score: 99.22141520182292
patch: return val 1 * - val $NUMBER$ ;
rank: 51
score: 99.1484844501202
patch: return - val 1 ; case 1 : return val $NUMBER$ ;
rank: 51
score: 99.11329650878906
patch: return - val 1 val 1 ;
rank: 51
score: 99.08702087402344
patch: return - 0 ; - 1 ;
rank: 51
score: 99.08264973958333
patch: throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ + val $NUMBER$ ) ;
rank: 51
score: 99.03621049360795
patch: return val 1 * val $NUMBER$ * val 1 ;
rank: 51
score: 99.01353759765625
patch: case 1 : return - - val 1 ;
rank: 51
score: 98.99798583984375
patch: return - val 1 . get CaMeL Long ( ) ;
rank: 51
score: 98.9757568359375
patch: return val 1 ; break ; - 1 ;
rank: 52
score: 99.22022840711806
patch: return val 1 - - val 1 ;
rank: 52
score: 99.14780836838942
patch: return Math . max ( val 1 , val 1 ) ;
rank: 52
score: 99.11058349609375
patch: return - val 1 ; return - $NUMBER$ ;
rank: 52
score: 99.08543090820312
patch: return - val 1 ; - 1 * ;
rank: 52
score: 99.08187662760416
patch: return val 1 . safe CaMeL Multiply ( val 1 , 0 ) ;
rank: 52
score: 99.03477478027344
patch: return 0 * - val 1 ;
rank: 52
score: 99.02569580078125
patch: switch ( val $NUMBER$ ) {
rank: 52
score: 98.9748779296875
patch: return - val 1 ; max / $NUMBER$ ;
rank: 53
score: 99.21769205729167
patch: return Long . parse CaMeL Int ( - 1 ) ;
rank: 53
score: 99.14711216517857
patch: throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ + val 1 ;
rank: 53
score: 99.07993570963542
patch: return - $NUMBER$ ; ; - 1 ;
rank: 53
score: 99.0252352627841
patch: return safe CaMeL Multiply 1 ( val 1 ) ;
rank: 53
score: 99.00804554332386
patch: return ( - 1 ) ? 0 : 0 ;
rank: 53
score: 98.99489339192708
patch: return Long . long CaMeL Value ( val $NUMBER$ ) ;
rank: 54
score: 99.21607384314903
patch: return Double . Na CaMeL N ? - 1 : 0 ;
rank: 54
score: 99.14620971679688
patch: return val 1 ; case $NUMBER$ : return val 1 ;
rank: 54
score: 99.10921902126736
patch: return - $NUMBER$ ; return - $NUMBER$ ;
rank: 54
score: 99.077880859375
patch: return val 1 . safe CaMeL Multiply ( val 1 1 ) ;
rank: 54
score: 99.03340657552083
patch: return val 1 . safe CaMeL Multiply ( 1 ) ;
rank: 54
score: 99.02375932173295
patch: return - ( val 1 * val 1 ) ;
rank: 54
score: 99.00588156960227
patch: return - 0 ; case 0 : return 0 ;
rank: 54
score: 98.9727294921875
patch: return - 1 ; / / val 1 ;
rank: 55
score: 99.14019305889423
patch: return - Long . parse CaMeL Long ( val 1 ) ;
rank: 55
score: 99.1070068359375
patch: return - $NUMBER$ + - - val $NUMBER$ ;
rank: 55
score: 99.07662527901786
patch: return val 1 . safe CaMeL Multiply ( - val $NUMBER$ ) ;
rank: 55
score: 98.988671875
patch: return ( ( long ) val $NUMBER$ ) ;
rank: 55
score: 98.96961388221153
patch: return - val 1 ; val 1 { return val 1 ;
rank: 56
score: 99.1376444498698
patch: return val $NUMBER$ ; case 1 : return val 1 ;
rank: 56
score: 99.0782470703125
patch: return - - 1 ; return - val 1 ;
rank: 56
score: 99.07660319010417
patch: return val 1 . safe CaMeL Multiply ( 1 , val $NUMBER$ ) ;
rank: 56
score: 99.0189697265625
patch: return 0 ; case 0 : return 1 ;
rank: 56
score: 98.98865424262152
patch: return - val $NUMBER$ * val $NUMBER$ ;
rank: 56
score: 98.96782892400569
patch: return - 1 ; val 1 { return 1 ;
rank: 57
score: 99.21226149338942
patch: return Integer . parse CaMeL Int ( - val $NUMBER$ ) ;
rank: 57
score: 99.13712252103366
patch: return - val 1 ; case $NUMBER$ : return val 1 ;
rank: 57
score: 99.1015292080966
patch: return - 1 1 ; else return - 1 ;
rank: 57
score: 99.07353071732955
patch: return val 1 ? - 1 : val 1 ;
rank: 57
score: 99.00401722301136
patch: return safe CaMeL Multiply ( - val $NUMBER$ ) ;
rank: 57
score: 98.96751403808594
patch: return - val 1 ; * /
rank: 58
score: 99.2119369506836
patch: return Long . MIN _ VALUE ;
rank: 58
score: 99.13687838040866
patch: return - 1 ; case 1 : return - val 1 ;
rank: 58
score: 99.0985616048177
patch: return - 1 ; } else { return - 1 ;
rank: 58
score: 99.01533726283482
patch: return val 1 * 0 ;
rank: 58
score: 98.9674541766827
patch: return val 1 ; val 1 { return - val 1 ;
rank: 59
score: 99.2115987141927
patch: return val 1 ; default : return - val 1 ;
rank: 59
score: 99.13613455636161
patch: return Math . max ( val 1 , 0 . 0 ) ;
rank: 59
score: 99.09505004882813
patch: return - $NUMBER$ 1 ; return - 1 ;
rank: 59
score: 99.07585005326705
patch: return 0 ; try { return - val 1 ;
rank: 59
score: 99.07120361328126
patch: return val 1 ? 0 : - 1 ;
rank: 59
score: 99.03098366477273
patch: return - 1 * val 1 * val $NUMBER$ ;
rank: 59
score: 98.98737335205078
patch: return val 1 || val 1 ;
rank: 60
score: 99.20914713541667
patch: throw new Illegal CaMeL Argument CaMeL Exception ( 1 ) ;
rank: 60
score: 99.13473745492789
patch: throw new Illegal CaMeL State CaMeL Exception ( val 1 ) ;
rank: 60
score: 99.09419759114583
patch: return - val 1 & - 1 ;
rank: 60
score: 99.07491455078124
patch: return - - 1 ; return - 0 ;
rank: 60
score: 99.07036798650569
patch: return - val 1 ? 0 : val 1 ;
rank: 60
score: 99.03006998697917
patch: safe CaMeL Multiply ( val 1 , - 1 ) ;
rank: 60
score: 99.01130981445313
patch: return $NUMBER$ ; case 0 : return 0 ;
rank: 60
score: 98.98263784555289
patch: return - val 1 . index CaMeL Of ( $STRING$ ) ;
rank: 60
score: 98.9601717862216
patch: return - val 1 ; val 1 / 1 ;
rank: 61
score: 99.20858154296874
patch: return - val 1 & - val 1 ;
rank: 61
score: 99.13198020241477
patch: return - val 1 ; break ; case 1 :
rank: 61
score: 99.0621337890625
patch: throw new Arithmetic CaMeL Exception ( val 1 , val $NUMBER$ ) ;
rank: 61
score: 99.005712890625
patch: return val 1 * val 1 * 0 ;
rank: 61
score: 98.99267578125
patch: return - 0 ? 0 : 0 ;
rank: 62
score: 99.20570725661058
patch: return Long . parse CaMeL Int ( - val $NUMBER$ ) ;
rank: 62
score: 99.1291748046875
patch: return Math . abs ( - val 1 ;
rank: 62
score: 99.07371168870192
patch: return - val 1 ; try { return - val 1 ;
rank: 62
score: 99.0589599609375
patch: return val 1 . safe CaMeL Multiply ( 0 , val $NUMBER$ ) ;
rank: 62
score: 98.95693137428977
patch: return - 1 ; - 1 + val 1 ;
rank: 63
score: 99.2038907137784
patch: return Integer . parse CaMeL Int ( val 1 ;
rank: 63
score: 99.128662109375
patch: return - val $NUMBER$ ; case 1 : return val 1 ;
rank: 63
score: 99.09149169921875
patch: return - val 1 ; } return null ;
rank: 63
score: 99.07335205078125
patch: return - 1 ; - 1 ; 1 ;
rank: 63
score: 99.02225341796876
patch: return 1 ; case 0 : return 0 ;
rank: 63
score: 98.98751068115234
patch: case 0 : return val 1 ;
rank: 63
score: 98.9718487079327
patch: return safe CaMeL Multiply ( val 1 , - $NUMBER$ ) ;
rank: 63
score: 98.95430908203124
patch: return - 1 ; return - 1 ; else
rank: 64
score: 99.20172119140625
patch: return - val 1 ; default : return - 1 ;
rank: 64
score: 99.12797037760417
patch: return Math . abs ( - val 1 1 ) ;
rank: 64
score: 99.0891446200284
patch: return - $NUMBER$ + - - - val 1 ;
rank: 64
score: 99.0723544034091
patch: return - val 1 ; - 1 ; ; ;
rank: 64
score: 99.05689697265625
patch: return - 1 ? val 1 : 0 ;
rank: 64
score: 99.0172119140625
patch: return - val 1 ; case 0 : return 0 ;
rank: 64
score: 98.98617553710938
patch: return 1 ; case 1 : return 0 ;
rank: 64
score: 98.95420143821023
patch: return - val 1 ; break ; val 1 {
rank: 65
score: 99.20011393229167
patch: return Long . parse CaMeL Long ( - val $NUMBER$ ;
rank: 65
score: 99.08836534288194
patch: return 0 ; } return - 1 ;
rank: 65
score: 99.07136366102431
patch: return - 0 ; ; - 1 ;
rank: 65
score: 99.05477701822916
patch: return val 1 . safe CaMeL Multiply ( 1 , val 1 ) ;
rank: 65
score: 98.95202026367187
patch: return - val 1 ; - val 1 :
rank: 66
score: 99.19993082682292
patch: return Long . parse CaMeL Long ( val $NUMBER$ ) ;
rank: 66
score: 99.12546950120192
patch: return Double . parse CaMeL Long ( - val 1 ) ;
rank: 66
score: 99.08676583426339
patch: return - val 1 ; }
rank: 66
score: 99.06554158528645
patch: return - 1 ; try { return - val 1 ;
rank: 66
score: 99.05399576822917
patch: return val 1 . safe CaMeL Multiply ( $STRING$ + val 1 ) ;
rank: 66
score: 98.97019449869792
patch: return ( safe CaMeL Multiply ( val 1 ) ) ;
rank: 66
score: 98.95201619466145
patch: return 0 ; val 1 { return - val 1 ;
rank: 67
score: 99.19851449819711
patch: return Long . POSITIVE _ INFINITY ? 0 : - 1 ;
rank: 67
score: 99.06529541015625
patch: return 0 ; return - - val 1 ;
rank: 67
score: 98.96877034505208
patch: return Integer . value CaMeL Of ( val $NUMBER$ ) ;
rank: 68
score: 99.1232401529948
patch: return val 1 ; case $NUMBER$ : return - 1 ;
rank: 68
score: 99.06389770507812
patch: return - val 1 ; ; val 1 ;
rank: 68
score: 99.01008911132813
patch: return ( ( int ) val 1 ) ;
rank: 68
score: 98.99002838134766
patch: return - 1 * - $NUMBER$ ;
rank: 68
score: 98.97355143229167
patch: return - value 1 ;
rank: 68
score: 98.96687622070313
patch: return ( val $NUMBER$ * val $NUMBER$ ) ;
rank: 68
score: 98.9463778409091
patch: return - 1 ; val 1 { return 0 ;
rank: 69
score: 99.1980731670673
patch: return - Long . value CaMeL Of ( val $NUMBER$ ) ;
rank: 69
score: 99.12244762073864
patch: return 1 ; case 1 : return - 1 ;
rank: 69
score: 99.0810546875
patch: return - $NUMBER$ - - val 1 ;
rank: 69
score: 99.06226695667614
patch: return - val 1 ; 0 + val 1 ;
rank: 69
score: 99.05179036458334
patch: throw new Arithmetic CaMeL Exception ( $STRING$ + val $NUMBER$ + $STRING$ ) ;
rank: 69
score: 98.98797607421875
patch: return ( val 1 * - 1 ) ;
rank: 69
score: 98.9720230102539
patch: case 1 : return - 1 ;
rank: 69
score: 98.96537950303819
patch: return - val $NUMBER$ * val 1 ;
rank: 69
score: 98.94590541294643
patch: return - val 1 ; max
rank: 70
score: 99.12129720052083
patch: return - val 1 ; case 1 ;
rank: 70
score: 99.0805155436198
patch: return Double . value CaMeL Of ( - val 1 ;
rank: 70
score: 99.0509521484375
patch: return val 1 . safe CaMeL Multiply ( 0 , val 1 ) ;
rank: 70
score: 98.96441180889423
patch: return safe CaMeL Multiply ( val 1 , - 1 ) ;
rank: 70
score: 98.9442138671875
patch: return - val 1 ; -- val 1 ;
rank: 71
score: 99.1953594501202
patch: return Integer . parse CaMeL Int ( - val 1 1 ;
rank: 71
score: 99.1209208170573
patch: return Math . min ( - 1 , val 1 ;
rank: 71
score: 99.079443359375
patch: return - $NUMBER$ ? - 1 : 0 ;
rank: 71
score: 99.06077880859375
patch: return - val 1 ; 0 * * ;
rank: 71
score: 99.05059814453125
patch: return val 1 ? 0 : 1 ;
rank: 71
score: 99.00390625
patch: return - val 1 ; case 1 : return 0 ;
rank: 71
score: 98.98258833451705
patch: return - $NUMBER$ ; case 0 : return 0 ;
rank: 71
score: 98.96673583984375
patch: return 0 ; case 1 : return 1 ;
rank: 71
score: 98.94331498579545
patch: return - 1 ; break ; return - 1 ;
rank: 72
score: 99.11957659040179
patch: return - val 1 ; ;
rank: 72
score: 99.07938842773437
patch: return - $NUMBER$ + - - - 1 ;
rank: 72
score: 99.05942604758523
patch: if - val 1 ; return - val 1 ;
rank: 72
score: 99.05052490234375
patch: return 0 ? val 1 : val $NUMBER$ ;
rank: 72
score: 99.00248209635417
patch: return safe CaMeL Multiply ( val 1 , true ) ;
rank: 72
score: 98.98201293945313
patch: return true ; case 0 : return 0 ;
rank: 72
score: 98.96435546875
patch: return - - 0 ;
rank: 72
score: 98.95855712890625
patch: return ( safe CaMeL Multiply ( val $NUMBER$ ) ) ;
rank: 72
score: 98.94265747070312
patch: return - 1 ; / 1 ;
rank: 73
score: 99.1914395419034
patch: return Long . parse CaMeL Int ( val 1 ;
rank: 73
score: 99.11942915482955
patch: throw new Null CaMeL Pointer CaMeL Exception ( $STRING$ ;
rank: 73
score: 99.05878363715277
patch: return - 1 ; ; - 1 :
rank: 73
score: 99.05049351283482
patch: return - val 1 . safe CaMeL Multiply ( val $NUMBER$ ) ;
rank: 73
score: 99.00216674804688
patch: return safe CaMeL Multiply ( val $NUMBER$ , 1 ) ;
rank: 73
score: 98.98048095703125
patch: return - ( 0 + val 1 ) ;
rank: 73
score: 98.96412489149306
patch: return val 1 ? 1 : 0 ;
rank: 73
score: 98.9566650390625
patch: return ( double ) val 1 ;
rank: 74
score: 99.18995079627403
patch: return Double . parse CaMeL Double ( - val 1 ) ;
rank: 74
score: 99.07814719460227
patch: return - 1 ; } return - val 1 ;
rank: 74
score: 99.05827026367187
patch: return 0 ; value return - val 1 ;
rank: 74
score: 99.04954223632812
patch: return - 0 ? val 1 : 0 ;
rank: 74
score: 99.00131564670139
patch: return - val 1 * - 0 ;
rank: 74
score: 98.95604529747597
patch: return - super . safe CaMeL Multiply ( val $NUMBER$ ) ;
rank: 75
score: 99.18964092548077
patch: return - Double . value CaMeL Of ( val 1 ) ;
rank: 75
score: 99.11834161931819
patch: return - 1 ; default : return - 1 ;
rank: 75
score: 99.07499476841518
patch: return - 1 val 1 ;
rank: 75
score: 99.05772094726562
patch: return - val 1 ; ; - 0 ;
rank: 75
score: 99.04792131696429
patch: throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ + val 1 ,
rank: 75
score: 98.97355513139205
patch: return 0 ; case - $NUMBER$ : return 0 ;
rank: 75
score: 98.95357572115384
patch: return ( val 1 ) . double CaMeL Value ( ) ;
rank: 75
score: 98.94042358398437
patch: return - 1 ; - 1 ; * /
rank: 76
score: 99.18896484375
patch: throw new Illegal CaMeL Argument CaMeL Exception ( 1 1 ) ;
rank: 76
score: 99.11770395132211
patch: return Long . parse CaMeL Int ( val 1 1 ) ;
rank: 76
score: 99.07485961914062
patch: throw new Runtime CaMeL Exception ( $STRING$ + val 1 ;
rank: 76
score: 99.05769653320313
patch: return - val 1 ; ; - 1 :
rank: 76
score: 99.04651896158855
patch: throw new Arithmetic CaMeL Exception ( $STRING$ + val $NUMBER$ ,
rank: 76
score: 98.99771118164062
patch: return - val 1 * val $NUMBER$ * val $NUMBER$ ;
rank: 76
score: 98.97211303710938
patch: return 0 ; case 0 : return $NUMBER$ ;
rank: 76
score: 98.96017456054688
patch: return value 1 ;
rank: 76
score: 98.95102163461539
patch: return safe CaMeL Multiply ( ( long ) val 1 ) ;
rank: 76
score: 98.93909912109375
patch: return - val 1 ; 1 / * /
rank: 77
score: 99.11664287860577
patch: return Math . min ( val 1 , - val 1 ;
rank: 77
score: 99.07396443684895
patch: return Double . value CaMeL Of ( - 1 ) ;
rank: 77
score: 99.04642740885417
patch: return val 1 . safe CaMeL Multiply ( 0 ) ;
rank: 77
score: 98.99589399857955
patch: return val $NUMBER$ * val 1 * val $NUMBER$ ;
rank: 77
score: 98.97001509232955
patch: return ( safe CaMeL Multiply ( val 1 ) ;
rank: 77
score: 98.9560791015625
patch: return ( long ) - - val 1 ;
rank: 77
score: 98.95009358723958
patch: return ( Long ) - val 1 ;
rank: 78
score: 99.18622295673077
patch: return Long . parse CaMeL Int ( - val 1 1 ;
rank: 78
score: 99.1163330078125
patch: return $NUMBER$ ; case 1 : return - 1 ;
rank: 78
score: 99.03984723772321
patch: throw new Arithmetic CaMeL Exception ( val 1 , val 1 ) ;
rank: 78
score: 98.99270629882812
patch: return val 1 * 1 * val $NUMBER$ ;
rank: 78
score: 98.95490056818181
patch: return val 1 ? 0 : - val $NUMBER$ ;
rank: 78
score: 98.94776153564453
patch: return ( Long ) val 1 ;
rank: 79
score: 99.18592529296875
patch: return val 1 * - - val 1 ;
rank: 79
score: 99.11496988932292
patch: return Math . ceil ( val 1 * val 1 ;
rank: 79
score: 99.05652618408203
patch: return 0 ; return - 0 ;
rank: 79
score: 98.99022420247395
patch: return - val 1 . equals ( val 1 ) ;
rank: 79
score: 98.96681518554688
patch: throw new Arithmetic CaMeL Exception ( val 1 ;
rank: 79
score: 98.95163981119792
patch: return - $NUMBER$ ? 0 : 0 ;
rank: 79
score: 98.947119140625
patch: return ( ( double ) val 1 ) ;
rank: 79
score: 98.93276977539062
patch: return - val 1 ; val 1 { return 1 ;
rank: 80
score: 99.18479410807292
patch: return Long . parse CaMeL Double ( - val 1 ;
rank: 80
score: 99.07003173828124
patch: return - 1 ; return - val $NUMBER$ ;
rank: 80
score: 99.0557861328125
patch: return - val 1 ; 0 : return - val 1 ;
rank: 80
score: 99.03735961914063
patch: return - val 1 ? 1 : 0 ;
rank: 80
score: 98.96528843470982
patch: return - 1 * 0 ;
rank: 80
score: 98.95143432617188
patch: return $NUMBER$ ; case 1 : return 0 ;
rank: 80
score: 98.94422064887152
patch: return - val 1 || val 1 ;
rank: 80
score: 98.9324951171875
patch: return - 1 ; System ;
rank: 81
score: 99.18478393554688
patch: return val 1 - - - val 1 ;
rank: 81
score: 99.06615193684895
patch: return Math . value CaMeL Of ( - 1 ) ;
rank: 81
score: 99.0371805826823
patch: return val 1 . safe CaMeL Multiply ( $STRING$ ) ;
rank: 81
score: 98.98825073242188
patch: return - - val 1 * val 1 ;
rank: 81
score: 98.9650146484375
patch: return 0 * val 1 * - 1 ;
rank: 81
score: 98.946044921875
patch: safe CaMeL Multiply ( val 1 ) ;
rank: 81
score: 98.9322509765625
patch: return - 1 + - - - val 1 ;
rank: 82
score: 99.18408203125
patch: return Long . Na CaMeL N ? 0 : - 1 ;
rank: 82
score: 99.11289469401042
patch: return val $NUMBER$ ; case 1 : return - 1 ;
rank: 82
score: 99.06607055664062
patch: return - 1 ; else return val 1 ;
rank: 82
score: 99.05267944335938
patch: return - val 1 ; while - 1 ;
rank: 82
score: 99.03667805989583
patch: return super . safe CaMeL Multiply ( val 1 , val $NUMBER$ ) ;
rank: 82
score: 98.96447143554687
patch: return - 1 * $STRING$ + val 1 ;
rank: 82
score: 98.94519805908203
patch: case $NUMBER$ : return val 1 ;
rank: 82
score: 98.94111633300781
patch: return ( int ) val $NUMBER$ ;
rank: 83
score: 99.1826680501302
patch: return Integer . parse CaMeL Int ( val $NUMBER$ ) ;
rank: 83
score: 99.111083984375
patch: return - 1 ; case $NUMBER$ : return - 1 ;
rank: 83
score: 99.05251242897727
patch: return - 1 ; - 1 ; - 1 ;
rank: 83
score: 99.0350341796875
patch: return val 1 ? val 1 : val $NUMBER$ ;
rank: 83
score: 98.98513793945312
patch: return ( val 1 & - 1 ) ;
rank: 83
score: 98.96365017361111
patch: return ( 0 + val 1 ) ;
rank: 83
score: 98.94234619140624
patch: case val 1 : return - val 1 ;
rank: 83
score: 98.94100189208984
patch: return val $NUMBER$ ; case 0 :
rank: 84
score: 99.1804950420673
patch: return Double . value CaMeL Of ( - val 1 ) ;
rank: 84
score: 99.11078350360577
patch: return - val 1 ; case $NUMBER$ : return - 1 ;
rank: 84
score: 99.0623779296875
patch: return - val 1 ; } return - 1 ;
rank: 84
score: 99.0521952311198
patch: return - val 1 ; value return - val 1 ;
rank: 84
score: 99.0331698330966
patch: return val 1 ? val 1 : val 1 ;
rank: 84
score: 98.940478515625
patch: case - $NUMBER$ : return - val 1 ;
rank: 84
score: 98.92973188920455
patch: return - 1 ; * / return - 1 ;
rank: 85
score: 99.18018188476563
patch: return - val 1 / - val $NUMBER$ ;
rank: 85
score: 99.10967145647321
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + val 1 ;
rank: 85
score: 99.06215413411458
patch: return - $NUMBER$ ; case 1 : return - 1 ;
rank: 85
score: 99.03265380859375
patch: return 0 ; case 1 : return - val 1 ;
rank: 85
score: 98.9613924893466
patch: return - val 1 * 0 * val $NUMBER$ ;
rank: 85
score: 98.93769182477679
patch: case 1 : return 0 ;
rank: 85
score: 98.93629039417614
patch: return val 1 . float CaMeL Value ( ) ;
rank: 86
score: 99.17844645182292
patch: return Long . parse CaMeL Double ( val 1 ) ;
rank: 86
score: 99.0581766764323
patch: return - 1 ; - 1 : return - 1 ;
rank: 86
score: 99.0490214029948
patch: return - 1 ; val 1 = - val 1 ;
rank: 86
score: 99.02950345552884
patch: throw new Runtime CaMeL Exception ( $STRING$ + val $NUMBER$ ) ;
rank: 86
score: 98.97962646484375
patch: return 1 * val 1 * val $NUMBER$ ;
rank: 86
score: 98.9610595703125
patch: return val 1 * case 0 : return 0 ;
rank: 86
score: 98.93642356178977
patch: return - ( val 1 * val $NUMBER$ ) ;
rank: 86
score: 98.9357666015625
patch: return - val 1 . - val $NUMBER$ ;
rank: 86
score: 98.92838287353516
patch: return val 1 ; val 1 {
rank: 87
score: 99.17742309570312
patch: return - val $NUMBER$ | - val 1 ;
rank: 87
score: 99.1085205078125
patch: return Long . parse CaMeL Long ( - val 1 1 ) ;
rank: 87
score: 99.05677490234375
patch: return - $NUMBER$ ? - 1 : 1 ;
rank: 87
score: 99.04892578125
patch: return - val 1 ; - - 0 ;
rank: 87
score: 98.97721724076705
patch: return val 1 . safe CaMeL Multiply ( ) ;
rank: 87
score: 98.934228515625
patch: return ( val $NUMBER$ * val 1 ) ;
rank: 87
score: 98.92774115668402
patch: return - 1 ; max / 1 ;
rank: 88
score: 99.10806978665866
patch: return Long . parse CaMeL Long ( val 1 1 ) ;
rank: 88
score: 99.0561190518466
patch: return - 1 ; } else return - 1 ;
rank: 88
score: 99.04869495738636
patch: return - - val 1 ; - - 1 ;
rank: 88
score: 99.02884928385417
patch: return val 1 ? 1 : 1 ;
rank: 88
score: 98.97717895507813
patch: return 1 * val 1 * val 1 ;
rank: 88
score: 98.95897216796875
patch: return $NUMBER$ * val 1 * val $NUMBER$ ;
rank: 88
score: 98.93367513020833
patch: return Math . max ( 0 , val 1 ) ;
rank: 88
score: 98.92594770951705
patch: return - 1 + - val 1 ; break ;
rank: 89
score: 99.17662217881944
patch: return val 1 % - val 1 ;
rank: 89
score: 99.10693359375
patch: return Math . ceil ( - val 1 ) ;
rank: 89
score: 99.05604137073864
patch: return - $NUMBER$ ? - 1 : val 1 ;
rank: 89
score: 99.04839477539062
patch: return - val 1 ; 0 return 0 ;
rank: 89
score: 98.9520975748698
patch: return 0 * 0 ;
rank: 89
score: 98.93320719401042
patch: return val $NUMBER$ ; case 0 : return val 1 ;
rank: 90
score: 99.17364971454327
patch: return Integer . value CaMeL Of ( - val $NUMBER$ ) ;
rank: 90
score: 99.02418212890625
patch: return val 1 ? val $NUMBER$ : 0 ;
rank: 90
score: 98.93310546875
patch: return Double . value CaMeL Of ( val 1 ) ;
rank: 90
score: 98.93202903053977
patch: return 0 ; case 1 : return val $NUMBER$ ;
rank: 90
score: 98.92464599609374
patch: return - val 1 ; min / 1 ;
rank: 91
score: 99.10671997070312
patch: return Math . min ( val $NUMBER$ , val 1 ;
rank: 91
score: 99.05562744140624
patch: return - 1 - - - val 1 ;
rank: 91
score: 99.04827270507812
patch: if - 1 ; return - val 1 ;
rank: 91
score: 99.0239990234375
patch: return - val 1 ? $NUMBER$ : 0 ;
rank: 91
score: 98.94960239955357
patch: return 0 * - $NUMBER$ ;
rank: 91
score: 98.93306187220982
patch: return ( - val 1 ) . long CaMeL Value ( ) ;
rank: 91
score: 98.93125406901042
patch: return safe CaMeL Multiply ( $STRING$ ) ;
rank: 91
score: 98.92455444335937
patch: return - val 1 && - val 1 ;
rank: 92
score: 99.17152756911058
patch: return Integer . parse CaMeL Long ( - val 1 ) ;
rank: 92
score: 99.10651189630681
patch: return - Math . abs ( val 1 ) ;
rank: 92
score: 99.05521240234376
patch: return - $NUMBER$ ; } return - $NUMBER$ ;
rank: 92
score: 99.04762573242188
patch: return - 1 ; ; return - 1 ;
rank: 92
score: 99.02323404947917
patch: return val 1 ? 0 : $NUMBER$ ;
rank: 92
score: 98.94808620876736
patch: case - 1 : return - 1 ;
rank: 92
score: 98.9313631924716
patch: return val 1 . to CaMeL String ( ) ;
rank: 92
score: 98.92891845703124
patch: return - new Long ( val 1 ) ;
rank: 93
score: 99.17146131727431
patch: return - val 1 / val 1 ;
rank: 93
score: 99.1063741048177
patch: return Math . min ( val 1 , val $NUMBER$ ;
rank: 93
score: 99.05458984375
patch: return - 1 ; else return - $NUMBER$ ;
rank: 93
score: 99.0455655184659
patch: return - - val 1 ; return - 1 ;
rank: 93
score: 99.02293090820312
patch: return 0 ? val 1 : - 1 ;
rank: 93
score: 98.9477294921875
patch: return 0 * - $NUMBER$ * val $NUMBER$ ;
rank: 93
score: 98.93094889322917
patch: return safe CaMeL Multiply ( 0 , val $NUMBER$ ) ;
rank: 93
score: 98.92847551618304
patch: return - - val $NUMBER$ ;
rank: 93
score: 98.92292616102431
patch: return - 1 ; -- val 1 ;
rank: 94
score: 99.17058856670673
patch: return Long . value CaMeL Of ( - val $NUMBER$ 1 ;
rank: 94
score: 99.05423990885417
patch: return Double . value CaMeL Of ( - $NUMBER$ ) ;
rank: 94
score: 99.04515584309895
patch: return - val 1 ; - 1 + val 1 ;
rank: 94
score: 99.02261788504464
patch: throw new Arithmetic CaMeL Exception ( $STRING$ + val 1 + $STRING$ +
rank: 94
score: 98.96604410807292
patch: return 0 ; case 0 : return - val 1 ;
rank: 94
score: 98.94708251953125
patch: return $NUMBER$ * val 1 * val 1 ;
rank: 94
score: 98.9300537109375
patch: return Double . value CaMeL Of ( val $NUMBER$ ) ;
rank: 94
score: 98.9264248934659
patch: return 0 ; case $NUMBER$ : return - 1 ;
rank: 94
score: 98.91982199928977
patch: return val 1 ; return - - val 1 ;
rank: 95
score: 99.17000638521634
patch: return - Double . value CaMeL Of ( - val 1 ;
rank: 95
score: 99.10526529947917
patch: return - val 1 ; default : return val 1 ;
rank: 95
score: 99.05293412642045
patch: return - $NUMBER$ 1 ; else return - 1 ;
rank: 95
score: 99.02184244791667
patch: return - val 1 . safe CaMeL Multiply ( - val 1 ) ;
rank: 95
score: 98.96571180555556
patch: return - 1 * - val 1 ;
rank: 95
score: 98.9468017578125
patch: return 0 * - 1 * val $NUMBER$ ;
rank: 95
score: 98.92623901367188
patch: if ( val $NUMBER$ != val 1 ) {
rank: 95
score: 98.9195889559659
patch: return val 1 ; else return - val 1 ;
rank: 96
score: 99.1696307842548
patch: return Double . Na CaMeL N ? 0 : - 1 ;
rank: 96
score: 99.10506766183036
patch: return Math . min ( - val 1 , 0 . 0 ;
rank: 96
score: 99.05130615234376
patch: return 0 ; } return - val 1 ;
rank: 96
score: 98.96519165039062
patch: return - val 1 * - - 1 ;
rank: 96
score: 98.92526584201389
patch: case - 1 : return val 1 ;
rank: 96
score: 98.9167724609375
patch: return - 1 ; - 1 / * /
rank: 97
score: 99.16946750217014
patch: return - val 1 | val 1 ;
rank: 97
score: 99.10440402560764
patch: return Math . abs ( val 1 ;
rank: 97
score: 99.03412475585938
patch: return - 1 ; while - val 1 ;
rank: 97
score: 98.92337036132812
patch: long val 1 = val 1 ;
rank: 98
score: 99.10440063476562
patch: return val 1 ; break ; case 1 :
rank: 98
score: 99.048828125
patch: return - $NUMBER$ + - - - val $NUMBER$ ;
rank: 98
score: 99.03391520182292
patch: return - 1 ; while - 1 ;
rank: 98
score: 99.02005208333334
patch: throw new Runtime CaMeL Exception ( $STRING$ + val 1 + $STRING$ ) ;
rank: 98
score: 98.95916748046875
patch: return - 1 ; case 0 : return val 1 ;
rank: 98
score: 98.92343971946023
patch: return safe CaMeL Multiply ( 1 , 0 ) ;
rank: 98
score: 98.92111206054688
patch: return val 1 ? 0 : val $NUMBER$ ;
rank: 98
score: 98.91394653320313
patch: return - val 1 ; ; / * /
rank: 99
score: 99.03388807508681
patch: return - 1 ; return 0 ; ;
rank: 99
score: 98.93633478338069
patch: return val 1 * case 1 : return 0 ;
rank: 99
score: 98.9227294921875
patch: return true ; case 1 : return 0 ;
rank: 99
score: 98.91962280273438
patch: return ( val $NUMBER$ / val $NUMBER$ ) ;
rank: 99
score: 98.91385498046876
patch: return - val 1 ; 1 / 1 ;
rank: 100
score: 99.10150824652777
patch: result = - val 1 ; break ;
rank: 100
score: 99.04818386501736
patch: return val $NUMBER$ ; return - 1 ;
rank: 100
score: 99.03219604492188
patch: return - - 1 ; return val 1 ;
rank: 100
score: 99.01494489397321
patch: throw new Arithmetic CaMeL Exception ( $STRING$ + val 1 + $STRING$ ,
rank: 100
score: 98.9551669034091
patch: return - val 1 * 1 * val $NUMBER$ ;
rank: 100
score: 98.92075417258523
patch: return ( ( long ) - val 1 ) ;
rank: 100
score: 98.91179865056819
patch: return - val 1 ; val 1 return 0 ;
rank: 101
score: 99.10122244698661
patch: return Long . parse CaMeL Int ( - val 1 1 ) ;
rank: 101
score: 99.04587131076389
patch: return - $NUMBER$ ; return val 1 ;
rank: 101
score: 99.03171115451389
patch: if - 1 ; return - 1 ;
rank: 101
score: 99.01398577008929
patch: return val 1 . safe CaMeL Multiply ( 1 , 0 ) ;
rank: 101
score: 98.93443714488636
patch: return safe CaMeL Multiply ( val 1 ) ; }
rank: 102
score: 99.1630859375
patch: return Long . parse CaMeL Long ( - 1 1 ) ;
rank: 102
score: 99.10107421875
patch: return - val 1 ; case val 1 :
rank: 102
score: 99.04524536132813
patch: return val 1 ; } return - 1 ;
rank: 102
score: 99.02817789713542
patch: return - val 1 ; ; return - val 1 ;
rank: 102
score: 98.933349609375
patch: return $STRING$ ; case 0 : return 0 ;
rank: 102
score: 98.91905381944444
patch: return - 1 ? 0 : 0 ;
rank: 102
score: 98.91461181640625
patch: return - val $NUMBER$ ; case 0 :
rank: 102
score: 98.91063435872395
patch: return - val 1 ; val 1 { return 0 ;
rank: 103
score: 99.16252136230469
patch: return Long . MAX _ VALUE ;
rank: 103
score: 99.09926194411058
patch: return - val $NUMBER$ ; case 1 : return - 1 ;
rank: 103
score: 99.04234822591145
patch: return - 1 ; } else { return - $NUMBER$ ;
rank: 103
score: 99.02764337713069
patch: return - val 1 ; else return val 1 ;
rank: 103
score: 98.94991048177083
patch: return - val 1 * val $NUMBER$ * val 1 ;
rank: 103
score: 98.91733620383523
patch: return 1 ; case 1 : return val 1 ;
rank: 103
score: 98.91260528564453
patch: return ( float ) val 1 ;
rank: 103
score: 98.9104715983073
patch: return val 1 ; val 1 { return val 1 ;
rank: 104
score: 99.1617431640625
patch: return - Long . MAX _ VALUE ;
rank: 104
score: 99.09845525568181
patch: throw new Unsupported CaMeL Operation CaMeL Exception ( $STRING$ ;
rank: 104
score: 99.04110717773438
patch: return - val 1 ? - 1 : - 1 ;
rank: 104
score: 99.026123046875
patch: return - val 1 ; case - 1 ;
rank: 104
score: 98.94978332519531
patch: return 1 ;
rank: 104
score: 98.9311856356534
patch: return 0 safe CaMeL Multiply ( val 1 ) ;
rank: 104
score: 98.91529430042614
patch: return safe CaMeL Multiply ( 0 , 0 ) ;
rank: 104
score: 98.91206665039063
patch: return - val 1 . max ( ) ;
rank: 105
score: 99.0408047762784
patch: return - val 1 ? - 1 : 0 ;
rank: 105
score: 99.023291015625
patch: return - 1 ; return - - 0 ;
rank: 105
score: 98.9464599609375
patch: return 0 + val 1 * val 1 ;
rank: 105
score: 98.92931365966797
patch: case 0 : return - 1 ;
rank: 105
score: 98.91519775390626
patch: case $NUMBER$ : return - - val 1 ;
rank: 105
score: 98.91187540690105
patch: return Math . max ( 0 , val $NUMBER$ ) ;
rank: 105
score: 98.91000600961539
patch: return - val 1 ; return - val 1 ; break ;
rank: 106
score: 99.160400390625
patch: return Long . parse CaMeL Long ( - 1 ;
rank: 106
score: 99.09788161057692
patch: return Math . min ( val 1 , 0 . 0 ;
rank: 106
score: 99.0398193359375
patch: return val $NUMBER$ ; return - val 1 ;
rank: 106
score: 99.02324884588069
patch: return - - val 1 ; return val 1 ;
rank: 106
score: 98.9139071377841
patch: return - $NUMBER$ ; case 1 : return 0 ;
rank: 106
score: 98.91075439453125
patch: long safe CaMeL Multiply ( val 1 ) ;
rank: 106
score: 98.9081143465909
patch: return - val 1 ; - 1 / 1 ;
rank: 107
score: 99.15916859019886
patch: return val 1 ; default : return - 1 ;
rank: 107
score: 99.09726784446023
patch: return Math . floor ( - val 1 ) ;
rank: 107
score: 99.02317116477273
patch: return - 1 ; ; return - val 1 ;
rank: 107
score: 98.941357421875
patch: return val 1 * 1 * val 1 ;
rank: 107
score: 98.92626953125
patch: return new Double ( val 1 ) ;
rank: 107
score: 98.9105975811298
patch: return safe CaMeL Multiply ( ( int ) val 1 ) ;
rank: 107
score: 98.9077657063802
patch: return - 1 ; return - val 1 ; break ;
rank: 108
score: 99.1590576171875
patch: return Double . POSITIVE _ INFINITY ? 0 : - 1 ;
rank: 108
score: 99.03880615234375
patch: return val 1 ; return - val $NUMBER$ ;
rank: 108
score: 99.02279052734374
patch: return - - 1 ; ; - 1 ;
rank: 108
score: 99.00569291548295
patch: return val 1 ? 0 : - val 1 ;
rank: 108
score: 98.94088745117188
patch: return - 1 ; case 0 : return - 1 ;
rank: 108
score: 98.91046752929688
patch: return ( val $NUMBER$ / val 1 ) ;
rank: 108
score: 98.90735880533855
patch: return - val 1 ; max return - val 1 ;
rank: 109
score: 99.1554842862216
patch: return Long . value CaMeL Of ( - 1 ;
rank: 109
score: 99.095703125
patch: return Long . parse CaMeL Long ( - val $NUMBER$ 1 ) ;
rank: 109
score: 99.0217793782552
patch: return - val 1 ; 0 + - val 1 ;
rank: 109
score: 99.00432671440973
patch: return val 1 ? $NUMBER$ : 1 ;
rank: 109
score: 98.94074041193181
patch: return - val 1 * 1 * val 1 ;
rank: 109
score: 98.92329545454545
patch: return - 1 ; case 0 : return 1 ;
rank: 109
score: 98.9115878018466
patch: return ( - $NUMBER$ ) ? 0 : 0 ;
rank: 109
score: 98.91033257378473
patch: if ( val $NUMBER$ != val 1 )
rank: 109
score: 98.90630425347223
patch: return - 1 ; break ; break ;
rank: 110
score: 99.15368041992187
patch: return - ( long ) - val 1 ;
rank: 110
score: 99.01988525390625
patch: return - val 1 ; * ; * ;
rank: 110
score: 98.92287772042411
patch: return $NUMBER$ * val 1 ;
rank: 110
score: 98.90985717773438
patch: return - val 1 . length ( ) ;
rank: 110
score: 98.9076904296875
patch: return - 0 ? - 1 : 0 ;
rank: 110
score: 98.90629069010417
patch: return - val 1 ; return val 1 ; break ;
rank: 111
score: 99.15310668945312
patch: return - val 1 ^ - val 1 ;
rank: 111
score: 99.092041015625
patch: return val 1 ; default : return val 1 ;
rank: 111
score: 99.03631036931819
patch: return - $NUMBER$ ? val 1 : - 1 ;
rank: 111
score: 99.01796264648438
patch: return 0 ; try { return - 1 ;
rank: 111
score: 99.00356619698661
patch: return 0 + val 1 ;
rank: 111
score: 98.93512517755681
patch: return val 1 . equals ( val 1 ) ;
rank: 111
score: 98.90826970880681
patch: return - val 1 ? 0 : val $NUMBER$ ;
rank: 111
score: 98.9036865234375
patch: return val 1 ; return val 1 ; break ;
rank: 112
score: 99.15181477864583
patch: return Long . parse CaMeL Int ( val $NUMBER$ ) ;
rank: 112
score: 99.091796875
patch: return Long . parse CaMeL Int ( - val $NUMBER$ 1 ) ;
rank: 112
score: 99.03594970703125
patch: return - $NUMBER$ val 1 ;
rank: 112
score: 99.0177001953125
patch: return - 1 ; - 1 ; return - val 1 ;
rank: 112
score: 99.00345865885417
patch: return val 1 ? $NUMBER$ : 0 ;
rank: 113
score: 99.09156212439903
patch: return Math . max ( val 1 , - val 1 ;
rank: 113
score: 99.03578694661458
patch: return - 0 + - val 1 ;
rank: 113
score: 99.0167236328125
patch: return - val 1 ; 0 * ; ;
rank: 113
score: 99.00334028764205
patch: return - val 1 ? val 1 : 0 ;
rank: 113
score: 98.92841186523438
patch: return - ( val 1 & 1 ) ;
rank: 113
score: 98.9203768643466
patch: super . safe CaMeL Multiply ( val 1 ) ;
rank: 113
score: 98.90648735894098
patch: return - $STRING$ ? 0 : 0 ;
rank: 113
score: 98.90330287388393
patch: return - 1 ; * /
rank: 114
score: 99.1498272235577
patch: return Integer . value CaMeL Of ( - val 1 1 ;
rank: 114
score: 99.035400390625
patch: return - 0 ; } return - 1 ;
rank: 114
score: 99.01536051432292
patch: return 0 ; return - val 1 ; - 1 ;
rank: 114
score: 99.00038248697916
patch: throw new Arithmetic CaMeL Exception ( $STRING$ + $STRING$ + val 1 ) ;
rank: 114
score: 98.90596147017045
patch: safe CaMeL Multiply ( $STRING$ + val 1 ) ;
rank: 114
score: 98.90382737379808
patch: return Math . max ( val 1 , val $NUMBER$ ) ;
rank: 114
score: 98.90309651692708
patch: return - val 1 ; - val 1 / 1 ;
rank: 115
score: 99.1452303799716
patch: return Integer . value CaMeL Of ( val 1 ;
rank: 115
score: 99.03350151909723
patch: return - $NUMBER$ + - - 1 ;
rank: 115
score: 99.01326497395833
patch: return - val 1 ; 0 * /
rank: 115
score: 98.919189453125
patch: return 0 * val 1 * - $NUMBER$ ;
rank: 115
score: 98.9056063565341
patch: return safe CaMeL Multiply ( , val 1 ) ;
rank: 115
score: 98.9013671875
patch: return - val 1 ; - 1 / - 1 ;
rank: 116
score: 99.086181640625
patch: return Double . parse CaMeL Long ( val 1 ) ;
rank: 116
score: 99.01190185546875
patch: return - val 1 ; - - $NUMBER$ ;
rank: 116
score: 98.92139892578125
patch: return 0 + val 1 * val $NUMBER$ ;
rank: 116
score: 98.91810302734375
patch: return false ; case 0 : return 0 ;
rank: 116
score: 98.90033428485577
patch: return - val 1 ; val 1 return - val 1 ;
rank: 117
score: 99.14093017578125
patch: return - ( - val 1 ) ;
rank: 117
score: 99.08485921223958
patch: return Math . max ( val 1 , val $NUMBER$ ;
rank: 117
score: 99.03341674804688
patch: return - 1 ; if return - 1 ;
rank: 117
score: 99.00772094726562
patch: return - - val 1 ; - 1 ;
rank: 117
score: 98.99998982747395
patch: throw new Runtime CaMeL Exception ( $STRING$ + val 1 ,
rank: 117
score: 98.917822265625
patch: return 0 * - 1 * - $NUMBER$ ;
rank: 117
score: 98.90404052734375
patch: return - val 1 ? 0 : 1 ;
rank: 117
score: 98.90024636008523
patch: return - $NUMBER$ ; return - 1 ; break ;
rank: 117
score: 98.900146484375
patch: return - val $NUMBER$ ; case 0 : return val 1 ;
rank: 118
score: 99.14070951021634
patch: return Long . value CaMeL Of ( - 1 1 ) ;
rank: 118
score: 99.0073750813802
patch: return - val 1 ; 0 return - val 1 ;
rank: 118
score: 98.91930042613636
patch: return val 1 * val 1 * - 1 ;
rank: 118
score: 98.91779119318181
patch: return - val 1 * 0 * val 1 ;
rank: 118
score: 98.9036532315341
patch: return true ; case 1 : return val 1 ;
rank: 118
score: 98.89995868389423
patch: return safe CaMeL Multiply ( val $NUMBER$ , val $NUMBER$ ) ;
rank: 118
score: 98.89960394965277
patch: return - 1 ; / / * /
rank: 119
score: 99.13966721754808
patch: return Long . value CaMeL Of ( val 1 1 ) ;
rank: 119
score: 99.08259721235795
patch: return $NUMBER$ ; case 1 : return val 1 ;
rank: 119
score: 99.03187255859375
patch: return - 1 1 * - val 1 ;
rank: 119
score: 99.00507202148438
patch: return - val 1 ; / - 1 ;
rank: 119
score: 98.9968994140625
patch: return in . safe CaMeL Multiply ( val 1 , val $NUMBER$ ) ;
rank: 119
score: 98.91681463068181
patch: return val 1 * - $NUMBER$ * val $NUMBER$ ;
rank: 119
score: 98.91680908203125
patch: if ( val $NUMBER$ != 0 ) return val 1 ;
rank: 119
score: 98.9031494140625
patch: return new Integer ( - val 1 ) ;
rank: 119
score: 98.8997314453125
patch: return safe CaMeL Multiply ( - 1 ) ;
rank: 120
score: 99.08257587139423
patch: return Integer . parse CaMeL Int ( val 1 1 ) ;
rank: 120
score: 99.03032769097223
patch: return val 1 ; return - $NUMBER$ ;
rank: 120
score: 99.0048828125
patch: return 0 ; return - 1 ; val 1 ;
rank: 120
score: 98.99472045898438
patch: return safe CaMeL Multiply ( 0 , val 1 ) ;
rank: 120
score: 98.91619262695312
patch: return val 1 * 0 * - $NUMBER$ ;
rank: 120
score: 98.90024820963542
patch: return ( val 1 * 0 ) ;
rank: 120
score: 98.89950561523438
patch: long val $NUMBER$ = val 1 ;
rank: 120
score: 98.89605712890625
patch: return - 1 ; return val 1 + val 1 ;
rank: 121
score: 99.08194986979167
patch: return Math . abs ( val 1 - val 1 ;
rank: 121
score: 98.99466646634616
patch: return - val 1 . safe CaMeL Multiply ( 0 ) ;
rank: 121
score: 98.9155502319336
patch: return - 1 * val $NUMBER$ ;
rank: 121
score: 98.9000577059659
patch: return - safe CaMeL Multiply ( val 1 ) ;
rank: 121
score: 98.89939575195312
patch: return - val 1 . - val 1 ;
rank: 121
score: 98.89593505859375
patch: return - 1 ; - 1 + - val 1 ;
rank: 122
score: 99.13650512695312
patch: return Integer . parse CaMeL Int ( - val $NUMBER$ ;
rank: 122
score: 99.08116658528645
patch: return Math . min ( val 1 , 1 ) ;
rank: 122
score: 99.02696644176136
patch: return - 1 ; this . return - 1 ;
rank: 122
score: 98.99368722098214
patch: throw new Arithmetic CaMeL Exception ( $STRING$ + val 1 + $STRING$ ;
rank: 122
score: 98.90919325086806
patch: return - - 1 * val 1 ;
rank: 123
score: 99.08103590745192
patch: return val 1 ; case 1 : return - val $NUMBER$ ;
rank: 123
score: 99.02688937717014
patch: return 0 ; } return - $NUMBER$ ;
rank: 123
score: 99.00283813476562
patch: if - val 1 ; else return - val 1 ;
rank: 123
score: 98.99286295572917
patch: return val 1 . safe CaMeL Multiply ( val 1 , $NUMBER$ ) ;
rank: 123
score: 98.91454399956598
patch: return ( val 1 * val 1 ;
rank: 123
score: 98.90818277994792
patch: if ( val 1 != 0 ) return val 1 ;
rank: 123
score: 98.89945678710937
patch: return - val $NUMBER$ ? 0 : 0 ;
rank: 123
score: 98.89537896050348
patch: return ( Double ) - val 1 ;
rank: 123
score: 98.89418029785156
patch: return val 1 ; / 1 ;
rank: 124
score: 99.02567545572917
patch: return - $NUMBER$ ; - 1 : return - 1 ;
rank: 124
score: 99.0013916015625
patch: return - val 1 ; case val 1 ;
rank: 124
score: 98.99281663161058
patch: return val $NUMBER$ . safe CaMeL Multiply ( val 1 ) ;
rank: 124
score: 98.89485931396484
patch: return ( Double ) val 1 ;
rank: 125
score: 99.13596598307292
patch: return Boolean . value CaMeL Of ( - val 1 ;
rank: 125
score: 99.0797627766927
patch: return Math . max ( val 1 , 1 ) ;
rank: 125
score: 99.0232266512784
patch: return 0 ? - 1 : - val 1 ;
rank: 125
score: 99.00115966796875
patch: return - val 1 ; else return 0 ;
rank: 125
score: 98.99257986886161
patch: return val 1 . safe CaMeL Multiply ( 0 , 0 ) ;
rank: 125
score: 98.9131103515625
patch: return ( - $NUMBER$ * val 1 ) ;
rank: 125
score: 98.89466857910156
patch: return val 1 || val $NUMBER$ ;
rank: 125
score: 98.8927001953125
patch: return - val 1 ; break ; return - val 1 ;
rank: 126
score: 99.13170447716347
patch: return Long . value CaMeL Of ( - 1 ) . ;
rank: 126
score: 99.07960094105114
patch: return - val 1 ; case 1 : break ;
rank: 126
score: 99.02235107421875
patch: return - $NUMBER$ ? 1 : - 1 ;
rank: 126
score: 99.00017700195312
patch: return - - 1 ; - 1 ; ;
rank: 126
score: 98.89248657226562
patch: return val 1 . compare CaMeL To ( 0 ) ;
rank: 126
score: 98.89231178977273
patch: return - 1 ; - val 1 / 1 ;
rank: 127
score: 99.0211181640625
patch: return - 0 1 ;
rank: 127
score: 98.9998446377841
patch: return 0 ; - 1 ; return - 1 ;
rank: 127
score: 98.99179311899039
patch: throw new Arithmetic CaMeL Exception ( $STRING$ + - 1 ) ;
rank: 127
score: 98.91167658025569
patch: return true ; case 0 : return - 1 ;
rank: 127
score: 98.90594482421875
patch: return - val 1 * 1 ;
rank: 127
score: 98.89597389914773
patch: return val 1 ; case $NUMBER$ : return 0 ;
rank: 127
score: 98.89178466796875
patch: return - val 1 ; - 1 : return - val 1 ;
rank: 128
score: 99.12955322265626
patch: return - val 1 & - val $NUMBER$ ;
rank: 128
score: 99.07847243088942
patch: return Math . min ( - 1 , val 1 ) ;
rank: 128
score: 99.01970880681819
patch: return - val 1 ; return - - 1 ;
rank: 128
score: 98.99948556082589
patch: return 0 ; - 1 ;
rank: 128
score: 98.99143763950893
patch: throw new Arithmetic CaMeL Exception ( $STRING$ + val 1 1 ) ;
rank: 128
score: 98.91127707741477
patch: return - 1 * - $NUMBER$ * val 1 ;
rank: 128
score: 98.9046630859375
patch: return val 1 * $NUMBER$ * val $NUMBER$ ;
rank: 128
score: 98.89585367838542
patch: return ( val 1 + 0 ) ;
rank: 129
score: 99.12904188368056
patch: return val 1 ^ - val 1 ;
rank: 129
score: 99.07683715820312
patch: return - - val 1 ; case 1 :
rank: 129
score: 99.01918723366477
patch: return - $NUMBER$ ? - 1 : - $NUMBER$ ;
rank: 129
score: 98.89578247070312
patch: return - new long ( val 1 ) ;
rank: 129
score: 98.89058743990384
patch: return safe CaMeL Multiply ( ( long ) val $NUMBER$ ) ;
rank: 129
score: 98.88804117838542
patch: return - $NUMBER$ ; val 1 { return - 1 ;
rank: 130
score: 99.12573920355902
patch: return - Long . MIN _ VALUE ;
rank: 130
score: 99.07640729631696
patch: throw new Illegal CaMeL Argument CaMeL Exception ( val 1 + $STRING$ ;
rank: 130
score: 99.0190673828125
patch: return - $NUMBER$ ? 0 : - 1 ;
rank: 130
score: 98.99658881293402
patch: return - $NUMBER$ ; return - 0 ;
rank: 130
score: 98.91078491210938
patch: return 0 * - $NUMBER$ * - $NUMBER$ ;
rank: 130
score: 98.89500732421875
patch: return case 1 : return - val 1 ;
rank: 130
score: 98.88739013671875
patch: return val 1 ; return - val 1 ; break ;
rank: 131
score: 99.12572564019098
patch: return val 1 << - val 1 ;
rank: 131
score: 99.01906331380208
patch: return Short . value CaMeL Of ( - 1 ) ;
rank: 131
score: 98.99651489257812
patch: return - val 1 ; 0 * * /
rank: 131
score: 98.99000901442308
patch: return val 1 . safe CaMeL Multiply ( - 1 ) ;
rank: 131
score: 98.91056685014205
patch: return val 1 * - 1 * val $NUMBER$ ;
rank: 131
score: 98.90293190696023
patch: if ( val $NUMBER$ != 0 ) return 0 ;
rank: 131
score: 98.88873969184027
patch: long val $NUMBER$ = - val 1 ;
rank: 131
score: 98.88735129616477
patch: return - 1 ; return - 1 ; 1 ;
rank: 132
score: 99.12559000651042
patch: return Double . parse CaMeL Double ( val 1 ) ;
rank: 132
score: 99.0183817545573
patch: throw new Runtime CaMeL Exception ( $STRING$ + - 1 ;
rank: 132
score: 98.99561656605114
patch: return - 1 ; - 1 ; - 1 {
rank: 132
score: 98.98937049278847
patch: return - val 1 . safe CaMeL Multiply ( 1 ) ;
rank: 132
score: 98.88707139756944
patch: return - val 1 ; ; * /
rank: 133
score: 99.12521362304688
patch: return - 1 ; default : return - val 1 ;
rank: 133
score: 99.0740966796875
patch: if ( val 1 == 0 ) return val 1 ;
rank: 133
score: 98.99534912109375
patch: return - val 1 ; while - 0 ;
rank: 133
score: 98.98797607421875
patch: throw new Arithmetic CaMeL Exception ( $STRING$ + 0 ) ;
rank: 133
score: 98.89486694335938
patch: return long == 0 ? 0 : 0 ;
rank: 133
score: 98.88626098632812
patch: return - val 1 ; return - 1 ; break ;
rank: 133
score: 98.8814697265625
patch: long val 1 = - val 1 ;
rank: 134
score: 99.0142822265625
patch: return - $NUMBER$ ? - 1 : - val 1 ;
rank: 134
score: 98.99516465928819
patch: return false ; return - val 1 ;
rank: 134
score: 98.98731689453125
patch: return - val 1 ? 0 : $NUMBER$ ;
rank: 134
score: 98.90900421142578
patch: return true ;
rank: 134
score: 98.9000244140625
patch: return - ( safe CaMeL Multiply ( val 1 ) ;
rank: 134
score: 98.89412841796874
patch: return - 1 : return - val 1 ;
rank: 134
score: 98.88621012369792
patch: return - - val 1 ; break ;
rank: 135
score: 99.07269841974431
patch: throw new Unsupported CaMeL Operation CaMeL Exception ( ) ;
rank: 135
score: 99.01334838867187
patch: return 0 ; * * return - 1 ;
rank: 135
score: 98.9945956143466
patch: return - 1 ; return 0 ; val 1 ;
rank: 135
score: 98.908837890625
patch: return 0 ; case 0 : return true ;
rank: 135
score: 98.8985595703125
patch: return val $NUMBER$ * val 1 * val 1 ;
rank: 135
score: 98.89332275390625
patch: return - $STRING$ ;
rank: 135
score: 98.88437721946023
patch: return val 1 ; return - 1 ; break ;
rank: 135
score: 98.88020324707031
patch: return - 1 ; case 0 :
rank: 136
score: 99.124267578125
patch: return val 1 | - val $NUMBER$ ;
rank: 136
score: 99.07176862444196
patch: return - val 1 ; case 1 : return - val $NUMBER$ ;
rank: 136
score: 99.0132080078125
patch: return - val 1 ; return val $NUMBER$ ;
rank: 136
score: 98.99447970920139
patch: return val 1 ; return - 0 ;
rank: 136
score: 98.90845947265625
patch: return - $NUMBER$ * 0 * val 1 ;
rank: 136
score: 98.88364479758523
patch: return - 1 ; - 1 + - 1 ;
rank: 136
score: 98.87996732271634
patch: return val 1 . compare CaMeL To ( val 1 ) ;
rank: 137
score: 99.12273700420673
patch: return Long . parse CaMeL Int ( - 1 1 ) ;
rank: 137
score: 99.01319469105114
patch: return 0 ? val 1 : - val 1 ;
rank: 137
score: 98.994384765625
patch: return - val 1 ; else return - 1 ;
rank: 137
score: 98.90780639648438
patch: return - 1 * val 1 * 0 ;
rank: 137
score: 98.89265747070313
patch: case 0 : return - - val 1 ;
rank: 137
score: 98.88062633167614
patch: return - val 1 ; - 1 * / /
rank: 138
score: 99.12271118164062
patch: return Long . parse CaMeL Int ( - val $NUMBER$ ;
rank: 138
score: 99.07111065204327
patch: return Math . min ( val 1 , val 1 1 ;
rank: 138
score: 98.992529296875
patch: return - - 0 ; return - 1 ;
rank: 138
score: 98.9827880859375
patch: return val 1 ? val 1 : 1 ;
rank: 138
score: 98.8976162997159
patch: return - ( val 1 & - 1 ) ;
rank: 138
score: 98.89110565185547
patch: return - $STRING$ + val 1 ;
rank: 138
score: 98.8802157315341
patch: return - val 1 ; - 1 ; * /
rank: 139
score: 99.12176513671875
patch: return Integer . value CaMeL Of ( - val $NUMBER$ ;
rank: 139
score: 99.06976318359375
patch: return Math . max ( - 1 , val 1 ;
rank: 139
score: 98.99193226207386
patch: return - 1 ; try { return - 1 ;
rank: 139
score: 98.9826416015625
patch: return 0 ? - val 1 : 0 ;
rank: 139
score: 98.9068603515625
patch: return 0 * val 1 * 0 ;
rank: 139
score: 98.89079938616071
patch: return ( - 1 ) ;
rank: 139
score: 98.87617323133681
patch: return ( Integer ) - val 1 ;
rank: 140
score: 99.12139892578125
patch: return Double . parse CaMeL Double ( - val 1 ;
rank: 140
score: 99.0694580078125
patch: return Math . min ( val 1 , - 1 ;
rank: 140
score: 98.98197798295455
patch: return val 1 ? val 1 : - 1 ;
rank: 140
score: 98.90663655598958
patch: return 0 * $STRING$ + val 1 ;
rank: 140
score: 98.8758877840909
patch: return - val 1 ; val 1 / $NUMBER$ ;
rank: 140
score: 98.87557983398438
patch: return safe CaMeL Multiply ( - $NUMBER$ ) ;
rank: 141
score: 99.12137858072917
patch: return Long . value CaMeL Of ( - 1 1 ;
rank: 141
score: 99.00684814453125
patch: return - val 1 : - val 1 ;
rank: 141
score: 98.9917724609375
patch: return - $STRING$ ; return - val 1 ;
rank: 141
score: 98.98162841796875
patch: return - 1 ? - 1 : 0 ;
rank: 141
score: 98.9057373046875
patch: return Math ? - 1 : val 1 ;
rank: 141
score: 98.88985595703124
patch: return Integer ? 0 : - val 1 ;
rank: 141
score: 98.87562144886364
patch: return - val 1 ; - 1 / / /
rank: 142
score: 99.12095133463542
patch: return Long . value CaMeL Of ( val 1 1 ;
rank: 142
score: 99.06661551339286
patch: return Math . min ( val 1 , - val 1 ) ;
rank: 142
score: 99.00497436523438
patch: return - 1 ; } return val 1 ;
rank: 142
score: 98.99139404296875
patch: return - val 1 ; 0 | - val 1 ;
rank: 142
score: 98.98155721028645
patch: throw new Arithmetic CaMeL Exception ( $STRING$ + val 1 +
rank: 142
score: 98.88846435546876
patch: return ( - 1 ) + val 1 ;
rank: 142
score: 98.87534586588542
patch: return - val 1 ; max / 0 / 1 ;
rank: 142
score: 98.87065972222223
patch: return ( long ) - val $NUMBER$ ;
rank: 143
score: 99.12070875901442
patch: return Integer . parse CaMeL Int ( - 1 1 ) ;
rank: 143
score: 99.0021084872159
patch: return - 1 1 ; else return - $NUMBER$ ;
rank: 143
score: 98.99124484592014
patch: return true ; return - val 1 ;
rank: 143
score: 98.90521795099431
patch: return safe CaMeL Multiply $NUMBER$ ( val 1 ) ;
rank: 143
score: 98.88801713423295
patch: return 0 ; case 1 : return - 0 ;
rank: 143
score: 98.87467817826705
patch: return - val 1 ; - 1 / / ;
rank: 143
score: 98.87020169771634
patch: return val 1 . compare CaMeL To ( val $NUMBER$ ) ;
rank: 144
score: 99.0661288174716
patch: return Math . abs ( - val 1 1 ;
rank: 144
score: 99.00018310546875
patch: return val 1 ; return - - 1 ;
rank: 144
score: 98.99112548828126
patch: return - - 1 ; - val 1 ;
rank: 144
score: 98.98042602539063
patch: return val 1 ? - $NUMBER$ : 0 ;
rank: 144
score: 98.89422607421875
patch: return - val $NUMBER$ * val 1 * val $NUMBER$ ;
rank: 144
score: 98.87436745383523
patch: return - 1 ; return - $NUMBER$ ; break ;
rank: 145
score: 99.11907348632812
patch: return - val 1 ; case 1 : ;
rank: 145
score: 99.06599934895833
patch: return Math . ; case 1 : return - 1 ;
rank: 145
score: 98.99105224609374
patch: if - val 1 ; return - 1 ;
rank: 145
score: 98.8935791015625
patch: return ( - 1 + val 1 ) ;
rank: 145
score: 98.88779296875
patch: return Math ? 0 : - val 1 ;
rank: 145
score: 98.87021706321023
patch: return - 1 ; return - 1 ; val 1
rank: 145
score: 98.86775207519531
patch: return ( Integer ) val 1 ;
rank: 146
score: 99.11789957682292
patch: return Long . parse CaMeL Long ( - 1 1 ;
rank: 146
score: 99.06598772321429
patch: return - val 1 ; case $NUMBER$ : return - val 1 ;
rank: 146
score: 98.99082253196023
patch: return 0 ; return - 1 ; - 1 ;
rank: 146
score: 98.97880249023437
patch: return - val 1 ? $NUMBER$ : 1 ;
rank: 146
score: 98.90413818359374
patch: return 0 * val $NUMBER$ * val 1 ;
rank: 146
score: 98.89302368164063
patch: return - 1 * 1 * val 1 ;
rank: 146
score: 98.8876708984375
patch: return - 0 ? 0 : - 1 ;
rank: 146
score: 98.86962890625
patch: return - val $NUMBER$ ; return - val 1 ;
rank: 146
score: 98.86646446814903
patch: return safe CaMeL Multiply ( val $NUMBER$ , - 1 ) ;
rank: 147
score: 99.11763509114583
patch: return - val 1 - val $NUMBER$ ;
rank: 147
score: 98.98763699001736
patch: return - 0 ; return - 0 ;
rank: 147
score: 98.97855318509616
patch: return val 1 . safe CaMeL Multiply ( 0 1 ) ;
rank: 147
score: 98.90323638916016
patch: return - 0 * val 1 ;
rank: 147
score: 98.89301147460938
patch: return - ( val 1 , 0 ) ;
rank: 147
score: 98.88593084161931
patch: return - ( val 1 - val $NUMBER$ ) ;
rank: 147
score: 98.8694559733073
patch: return - 1 ; * / return - val 1 ;
rank: 147
score: 98.86498260498047
patch: return val 1 ? val 1 ;
rank: 148
score: 99.11756896972656
patch: return val 1 & - 1 ;
rank: 148
score: 99.06432166466347
patch: return Math . min ( val 1 , - 1 ) ;
rank: 148
score: 98.9989013671875
patch: return - 1 ? - 1 : - 1 ;
rank: 148
score: 98.98700561523438
patch: return 0 ; return - 1 ; 1 ;
rank: 148
score: 98.90288628472223
patch: throw new Arithmetic CaMeL Exception ( $STRING$ ;
rank: 148
score: 98.8924560546875
patch: throw new Arithmetic CaMeL Exception ( $STRING$ + val $NUMBER$ ;
rank: 148
score: 98.88553466796876
patch: return new long ( - val 1 ) ;
rank: 148
score: 98.86456976996527
patch: double val $NUMBER$ = - val 1 ;
rank: 149
score: 99.11653275923295
patch: return Integer . parse CaMeL Int ( - 1 ;
rank: 149
score: 99.06394264914773
patch: return - 1 ; default : return val 1 ;
rank: 149
score: 98.9986239346591
patch: return - val 1 ; } return - $NUMBER$ ;
rank: 149
score: 98.98688299005681
patch: return - val 1 ; 0 ; - 1 ;
rank: 149
score: 98.97755784254808
patch: return - val 1 . safe CaMeL Multiply ( $STRING$ ) ;
rank: 149
score: 98.8917236328125
patch: safe CaMeL Multiply ( val 1 , 1 ) ;
rank: 149
score: 98.88358154296876
patch: return ( - 1 ) - val 1 ;
rank: 149
score: 98.86660427517361
patch: return - val 1 ; / * /
rank: 149
score: 98.86190456814236
patch: if ( val 1 != val 1 )
rank: 150
score: 99.11541193181819
patch: return Long . value CaMeL Of ( val $NUMBER$ ;
rank: 150
score: 99.06280517578125
patch: return Math . round ( val 1 ) ;
rank: 150
score: 98.99860174005681
patch: return - 1 1 ; else return val 1 ;
rank: 150
score: 98.98662651909723
patch: return - $NUMBER$ ; - 1 ; ;
rank: 150
score: 98.90094757080078
patch: return - $NUMBER$ * - 1 ;
rank: 150
score: 98.86510120738636
patch: return - 1 ; return - 1 ; * /
rank: 150
score: 98.86180419921875
patch: return ( ( float ) val 1 ) ;
rank: 151
score: 99.11525472005208
patch: return val 1 / - val 1 ;
rank: 151
score: 99.06196812220982
patch: result = - val 1 ;
rank: 151
score: 98.99851481119792
patch: return Short . value CaMeL Of ( - $NUMBER$ ) ;
rank: 151
score: 98.98562622070312
patch: return - 1 ; val 1 ;
rank: 151
score: 98.89977349175348
patch: return 0 * 0 * val $NUMBER$ ;
rank: 151
score: 98.89150390625
patch: return - - val 1 * val $NUMBER$ ;
rank: 151
score: 98.87915649414063
patch: return 0 ; case 1 : return $NUMBER$ ;
rank: 152
score: 99.11441040039062
patch: return - Long . value CaMeL Of ( - 1 ;
rank: 152
score: 99.06126990685097
patch: return Math . max ( val 1 , 0 . 0 ;
rank: 152
score: 98.9983243075284
patch: return - $NUMBER$ - - - - val 1 ;
rank: 152
score: 98.98533935546875
patch: return - val 1 ; 1 return 0 ;
rank: 152
score: 98.9756610576923
patch: return val 1 . safe CaMeL Multiply ( 1 1 ) ;
rank: 152
score: 98.8788818359375
patch: return val 1 ? - 0 : 0 ;
rank: 152
score: 98.86280406605114
patch: return 0 ; val 1 { return val 1 ;
rank: 152
score: 98.85659790039062
patch: return val 1 ; case 0 : return val $NUMBER$ ;
rank: 153
score: 99.1141826923077
patch: return - Integer . value CaMeL Of ( val 1 ) ;
rank: 153
score: 99.05884399414063
patch: return val 1 ; case 1 : break ;
rank: 153
score: 98.98528374565973
patch: return - 1 ; - - $NUMBER$ ;
rank: 153
score: 98.975048828125
patch: return val 1 . safe CaMeL Multiply ( val 1 , 1 ) ;
rank: 153
score: 98.89864501953124
patch: return - ( 0 * val 1 ) ;
rank: 153
score: 98.8911865234375
patch: return val 1 * $NUMBER$ * val 1 ;
rank: 153
score: 98.87825775146484
patch: return safe CaMeL Multiply ( ) ;
rank: 153
score: 98.86146036783855
patch: return - 1 ; return - 1 ; val 1 {
rank: 153
score: 98.85427856445312
patch: return - val 1 ? val 1 : val 1 ;
rank: 154
score: 99.11395733173077
patch: return - val $NUMBER$ ; default : return - val 1 ;
rank: 154
score: 99.05767352764423
patch: return Math . min ( val $NUMBER$ , val 1 ) ;
rank: 154
score: 98.99786376953125
patch: return - 0 ; else return - 1 ;
rank: 154
score: 98.9848299893466
patch: return - val 1 ; double - val 1 ;
rank: 154
score: 98.97430826822917
patch: return val 1 . safe CaMeL Multiply ( 1 * val 1 ) ;
rank: 154
score: 98.89045854048295
patch: return - ( - 1 * val 1 ) ;
rank: 154
score: 98.85939534505208
patch: return - 1 ; val 1 return - val 1 ;
rank: 155
score: 99.1137362393466
patch: return - val 1 ; default : return 0 ;
rank: 155
score: 99.05742536272321
patch: return - Long . parse CaMeL Long ( val 1 1 ) ;
rank: 155
score: 98.99702758789063
patch: return 0 ; else { return - 1 ;
rank: 155
score: 98.98480224609375
patch: return $STRING$ ; return - val 1 ;
rank: 155
score: 98.97420925564236
patch: return val 1 . - val 1 ;
rank: 155
score: 98.89701538085937
patch: return 0 * - 1 * - 1 ;
rank: 155
score: 98.8565673828125
patch: return - $NUMBER$ ; val 1 { return - val 1 ;
rank: 155
score: 98.85118272569444
patch: return - val 1 || val $NUMBER$ ;
rank: 156
score: 99.1126708984375
patch: return Long . value CaMeL Of ( - val 1 ; ;
rank: 156
score: 99.05689697265625
patch: return Math . ceil ( val 1 ) ;
rank: 156
score: 98.9962158203125
patch: return - Integer . length ( - 1 ) ;
rank: 156
score: 98.9847412109375
patch: return 0 ; val 1 + val 1 ;
rank: 156
score: 98.973876953125
patch: return super . safe CaMeL Multiply ( val 1 , val 1 ) ;
rank: 156
score: 98.87568803267045
patch: return - ( val 1 - val 1 ) ;
rank: 156
score: 98.85651991102431
patch: return - 1 ; break ; * /
rank: 156
score: 98.85110473632812
patch: return val $NUMBER$ ; case 1 :
rank: 157
score: 99.1122802734375
patch: return - val 1 % - val 1 ;
rank: 157
score: 99.05550711495536
patch: return - Long . parse CaMeL Int ( val 1 1 ) ;
rank: 157
score: 98.99595133463542
patch: return - $NUMBER$ ; } else { return - 1 ;
rank: 157
score: 98.98418634588069
patch: return 0 ; val 1 = - val 1 ;
rank: 157
score: 98.89647327769886
patch: return - 1 * - 1 * val 1 ;
rank: 157
score: 98.87535264756944
patch: return 0 : return - val 1 ;
rank: 157
score: 98.85370744977679
patch: return - $NUMBER$ ; break ;
rank: 157
score: 98.85110473632812
patch: return value CaMeL Of ( val 1 ) ;
rank: 158
score: 99.11186079545455
patch: return Long . parse CaMeL Int ( - 1 ;
rank: 158
score: 98.99547661675348
patch: return 0 ; else return - $NUMBER$ ;
rank: 158
score: 98.98309326171875
patch: return - 1 ; - 1 ; - - 1 ;
rank: 158
score: 98.97372436523438
patch: return 0 ? - 1 : - 0 ;
rank: 158
score: 98.89610460069444
patch: return 0 * 0 * - 1 ;
rank: 158
score: 98.88972778320313
patch: return - ( val 1 + 1 ) ;
rank: 158
score: 98.85340465198864
patch: return - 1 ; break ; return val 1 ;
rank: 158
score: 98.85018920898438
patch: if ( val 1 != val 1 ) {
rank: 159
score: 99.11021071213942
patch: return - Integer . value CaMeL Of ( - val 1 ;
rank: 159
score: 99.0542704264323
patch: return Double . parse CaMeL Int ( val 1 ) ;
rank: 159
score: 98.99515380859376
patch: return - 1 ; return - 1 1 ;
rank: 159
score: 98.98132934570313
patch: return - 1 ; return 0 ; 1 ;
rank: 159
score: 98.97353515625
patch: return val 1 ? 0 : - 0 ;
rank: 159
score: 98.85302734375
patch: return - val 1 ; val 1 return 1 ;
rank: 159
score: 98.84982534555289
patch: return val 1 * safe CaMeL Multiply ( val 1 ) ;
rank: 160
score: 99.11015319824219
patch: return - val 1 ; default :
rank: 160
score: 99.05418701171875
patch: return Math . floor ( val 1 ) ;
rank: 160
score: 98.99486694335937
patch: return - 1 + - - val $NUMBER$ ;
rank: 160
score: 98.97287423270089
patch: return val 1 . safe CaMeL Multiply ( val 1 ) ; }
rank: 160
score: 98.87278053977273
patch: return 0 ; case 0 : return val $NUMBER$ ;
rank: 160
score: 98.8523418719952
patch: return - 1 ; return - 1 ; return - 1 ;
rank: 160
score: 98.84873610276442
patch: return safe CaMeL Multiply ( ( int ) val $NUMBER$ ) ;
rank: 161
score: 99.109619140625
patch: return Long . POSITIVE _ INFINITY ? - 1 : 0 ;
rank: 161
score: 99.05309119591347
patch: return Math . abs ( val 1 * val 1 ) ;
rank: 161
score: 98.99401177300348
patch: return - 1 - - val 1 ;
rank: 161
score: 98.97265625
patch: return safe CaMeL Multiply ( val 1 * val $NUMBER$ ) ;
rank: 161
score: 98.88816139914773
patch: return - val 1 * $NUMBER$ * val 1 ;
rank: 161
score: 98.85231526692708
patch: return - 1 ; / - 1 ;
rank: 161
score: 98.84824625651042
patch: return - val 1 ? val 1 : val $NUMBER$ ;
rank: 162
score: 99.1084317294034
patch: return Long . - ( - val 1 ) ;
rank: 162
score: 98.98074001736111
patch: return 0 ; return - - 1 ;
rank: 162
score: 98.85044167258523
patch: return - val 1 ; break ; - $NUMBER$ ;
rank: 163
score: 99.05148315429688
patch: return - val 1 ; case ;
rank: 163
score: 98.99331665039062
patch: return 0 ; return - $NUMBER$ ;
rank: 163
score: 98.980224609375
patch: return - val 1 ; val 1 = - val 1 ;
rank: 163
score: 98.97150127704327
patch: throw new Arithmetic CaMeL Exception ( val 1 + $STRING$ ) ;
rank: 163
score: 98.89303588867188
patch: return - ( 0 - val 1 ) ;
rank: 163
score: 98.88534545898438
patch: return - ( val 1 * val 1 ;
rank: 163
score: 98.8717373934659
patch: return - ( val 1 + val $NUMBER$ ) ;
rank: 163
score: 98.85020862926136
patch: return - val 1 ; 1 / / * /
rank: 164
score: 99.10625751201923
patch: return Long . parse CaMeL Double ( - val $NUMBER$ ) ;
rank: 164
score: 99.04998779296875
patch: return - 1 ; case $NUMBER$ : return val 1 ;
rank: 164
score: 98.993212890625
patch: return - $NUMBER$ ; return - val $NUMBER$ ;
rank: 164
score: 98.97894287109375
patch: } return - val 1 ;
rank: 164
score: 98.89258422851563
patch: return ( - 1 * val $NUMBER$ ) ;
rank: 164
score: 98.8821688565341
patch: return - val 1 * val 1 * 0 ;
rank: 164
score: 98.87005615234375
patch: case 1 : return - val $NUMBER$ ;
rank: 164
score: 98.8480557528409
patch: return - 1 ; return 1 ; - 1 ;
rank: 164
score: 98.84547932942708
patch: double val 1 = - val 1 ;
rank: 165
score: 99.10570678710937
patch: return - ( int ) - val 1 ;
rank: 165
score: 99.0494854266827
patch: return Math . max ( val 1 , val 1 1 ;
rank: 165
score: 98.97642822265625
patch: return 0 ; - 1 ; - 1 ;
rank: 165
score: 98.8918789950284
patch: throw new Exception ( $STRING$ + val 1 ) ;
rank: 165
score: 98.84793795072116
patch: return - val 1 ; return val 1 + val 1 ;
rank: 165
score: 98.84544154575893
patch: return safe CaMeL Multiply ( val 1 , - val $NUMBER$ ) ;
rank: 166
score: 99.1053936298077
patch: return - Double . Na CaMeL N ? 0 : 0 ;
rank: 166
score: 98.99150390625
patch: throw new Runtime CaMeL Exception ( $STRING$ ) ;
rank: 166
score: 98.89168090820313
patch: return 0 * val $NUMBER$ * val $NUMBER$ ;
rank: 166
score: 98.88034396701389
patch: return 0 * 1 * val 1 ;
rank: 166
score: 98.86898193359374
patch: return new Long ( - val 1 ) ;
rank: 166
score: 98.84761555989583
patch: return - val 1 ; - 1 + - 1 ;
rank: 167
score: 99.10425821940105
patch: return Integer . parse CaMeL Long ( val 1 ) ;
rank: 167
score: 98.9756103515625
patch: return - val 1 ; 0 * / /
rank: 167
score: 98.89075317382813
patch: return - val 1 * 0 * 0 ;
rank: 167
score: 98.88006036931819
patch: if ( val 1 != 0 ) return 0 ;
rank: 167
score: 98.86859893798828
patch: return Integer ? 0 : 0 ;
rank: 167
score: 98.84383544921874
patch: long safe CaMeL Multiply ( val $NUMBER$ ) ;
rank: 168
score: 98.99025268554688
patch: return 0 1 * - - val 1 ;
rank: 168
score: 98.97533569335937
patch: return - val 1 ; 0 ; * ;
rank: 168
score: 98.9685567220052
patch: return 0 ; case 1 : return 0 . 1 ;
rank: 168
score: 98.89066162109376
patch: return ( val 1 & val $NUMBER$ ) ;
rank: 168
score: 98.87838745117188
patch: if ( val $NUMBER$ != - 1 ) return 0 ;
rank: 168
score: 98.84690348307292
patch: return - 1 ; return val 1 ; - 1 ;
rank: 168
score: 98.84258161272321
patch: return val 1 . long CaMeL Value ( ) + val 1 ;
rank: 169
score: 99.10219163161058
patch: return Long . parse CaMeL Long ( - val $NUMBER$ 1 ;
rank: 169
score: 99.04635184151786
patch: return Math . max ( - val 1 , 0 . 0 ;
rank: 169
score: 98.98975626627605
patch: throw new Runtime CaMeL Exception ( $STRING$ + val $NUMBER$ ;
rank: 169
score: 98.97337510850694
patch: return - 1 ; ; - $NUMBER$ ;
rank: 169
score: 98.8904296875
patch: return - 1 * 0 * val $NUMBER$ ;
rank: 169
score: 98.86845703125
patch: return $STRING$ ; case 1 : return 0 ;
rank: 169
score: 98.84599304199219
patch: return val 1 ; return 1 ;
rank: 169
score: 98.84194711538461
patch: return safe CaMeL Multiply ( val $NUMBER$ , - $NUMBER$ ) ;
rank: 170
score: 99.10036996694711
patch: return Integer . value CaMeL Of ( val 1 ) . ;
rank: 170
score: 98.98893432617187
patch: return - $NUMBER$ - - - val $NUMBER$ ;
rank: 170
score: 98.97265625
patch: return - 1 ; return 1 ; ;
rank: 170
score: 98.96720377604167
patch: throw new Arithmetic CaMeL Exception ( $STRING$ , $STRING$ ) ;
rank: 170
score: 98.89004516601562
patch: return val 1 * 0 * - 1 ;
rank: 170
score: 98.84559733072916
patch: return - val 1 ; val 1 { return - - val 1 ;
rank: 171
score: 99.1002685546875
patch: return - val $NUMBER$ | - val $NUMBER$ ;
rank: 171
score: 99.04583740234375
patch: return val 1 ; case $NUMBER$ :
rank: 171
score: 98.98873562282986
patch: return - $NUMBER$ + - val $NUMBER$ ;
rank: 171
score: 98.8455810546875
patch: return - val 1 ; - 1 / / * /
rank: 171
score: 98.84092203776042
patch: return safe CaMeL Multiply ( val $NUMBER$ , $NUMBER$ ) ;
rank: 172
score: 98.86744384765625
patch: return - $NUMBER$ : return - val 1 ;
rank: 172
score: 98.84468217329545
patch: return - 1 ; * / return val 1 ;
rank: 172
score: 98.8406982421875
patch: long val 1 = val $NUMBER$ ;
rank: 173
score: 99.09751539963942
patch: return - Long . parse CaMeL Long ( - val 1 ;
rank: 173
score: 99.04551188151042
patch: return Math . max ( val 1 , - 1 ;
rank: 173
score: 98.9878262606534
patch: return val 1 ? - 1 : - 1 ;
rank: 173
score: 98.97208251953126
patch: return - 1 ; while - - 1 ;
rank: 173
score: 98.88661887428977
patch: return - $NUMBER$ * val 1 * val $NUMBER$ ;
rank: 173
score: 98.86732177734375
patch: return ( val 1 > val $NUMBER$ ) ;
rank: 173
score: 98.84011501736111
patch: long val $NUMBER$ = - val $NUMBER$ ;
rank: 174
score: 99.09568434495192
patch: return - val 1 ; default : return - 1 ; }
rank: 174
score: 99.04436383928571
patch: return Integer . parse CaMeL Int ( - val 1 1 ) ;
rank: 174
score: 98.97002495659723
patch: return - $NUMBER$ ; - - 1 ;
rank: 174
score: 98.96539916992188
patch: return val 1 ? val 1 : $NUMBER$ ;
rank: 174
score: 98.88591974431819
patch: return val 1 * - 1 * val 1 ;
rank: 174
score: 98.87601143973214
patch: return 1 * val 1 ;
rank: 174
score: 98.86577758789062
patch: return long == 0 ? 1 : 0 ;
rank: 174
score: 98.84355024857955
patch: return - val 1 - - - val 1 ;
rank: 174
score: 98.84005737304688
patch: return Math . min ( 0 , val 1 ) ;
rank: 175
score: 99.095654296875
patch: return ( val 1 & - val 1 ;
rank: 175
score: 98.96469948508523
patch: return - 1 ? val 1 : val 1 ;
rank: 175
score: 98.88536987304687
patch: return 0 ; case 0 : return false ;
rank: 175
score: 98.86573621961806
patch: return - Math ? 0 : 0 ;
rank: 175
score: 98.84290660511364
patch: return - val 1 ; max / - 1 ;
rank: 175
score: 98.83951509915866
patch: return safe CaMeL Multiply ( val $NUMBER$ , val 1 ) ;
rank: 176
score: 99.04278564453125
patch: return - 1 ; case 1 : return val $NUMBER$ ;
rank: 176
score: 98.968310546875
patch: return - 1 ; return 0 ; ; ;
rank: 176
score: 98.96184430803571
patch: return val 1 . safe CaMeL Multiply ( val $NUMBER$ 1 ) ;
rank: 176
score: 98.87551047585227
patch: return - val 1 * $NUMBER$ * val $NUMBER$ ;
rank: 176
score: 98.86506791548295
patch: return - ( val 1 + val 1 ) ;
rank: 176
score: 98.84189181857639
patch: return val 1 ; - 1 * /
rank: 177
score: 99.0947998046875
patch: return - ( Long ) - val 1 ;
rank: 177
score: 99.0426025390625
patch: return - val $NUMBER$ ; case 1 : return - val 1 ;
rank: 177
score: 98.96822415865384
patch: return - val 1 ; - 1 + - val 1 ;
rank: 177
score: 98.96173650568181
patch: return - 1 ? - 1 : val 1 ;
rank: 177
score: 98.87479248046876
patch: return - ( val 1 * val $NUMBER$ ;
rank: 177
score: 98.8649169921875
patch: return val 1 * 0 - val $NUMBER$ ;
rank: 177
score: 98.84142049153645
patch: return val 1 ; return val 1 + val 1 ;
rank: 177
score: 98.83838500976563
patch: double safe CaMeL Multiply ( val 1 ) ;
rank: 178
score: 99.0931865985577
patch: return Long . parse CaMeL Double ( - val 1 1 ;
rank: 178
score: 98.98567199707031
patch: return - $NUMBER$ - val 1 ;
rank: 178
score: 98.96739705403645
patch: return - val 1 ; try { return - 1 ;
rank: 178
score: 98.96138916015624
patch: return val 1 ? $NUMBER$ : val 1 ;
rank: 178
score: 98.88338894314236
patch: return 0 * 0 * - $NUMBER$ ;
rank: 178
score: 98.8411356608073
patch: return false ; val 1 { return - val 1 ;
rank: 179
score: 98.9853271484375
patch: return val 1 ; else return - 1 ;
rank: 179
score: 98.96709594726562
patch: return - val 1 ; value return 0 ;
rank: 179
score: 98.96126708984374
patch: return 0 ? val 1 : - 0 ;
rank: 179
score: 98.84105428059895
patch: return - 1 ; break ; return - val 1 ;
rank: 179
score: 98.8371826171875
patch: return ( ( double ) val $NUMBER$ ) ;
rank: 180
score: 99.04031137319711
patch: return Math . abs ( val 1 - val 1 ) ;
rank: 180
score: 98.98506673177083
patch: return - $NUMBER$ ? val 1 : - val 1 ;
rank: 180
score: 98.9666519165039
patch: return - val 1 ; 0 ;
rank: 180
score: 98.9606201171875
patch: return val 1 ? 1 : val 1 ;
rank: 180
score: 98.88285688920455
patch: return safe CaMeL Multiply ( val 1 , 0 ;
rank: 180
score: 98.8695068359375
patch: return - ( val 1 + val 1 ;
rank: 180
score: 98.86181640625
patch: return ( val 1 ) ? 0 : 0 ;
rank: 181
score: 99.08638509114583
patch: return Integer . parse CaMeL Long ( - val 1 ;
rank: 181
score: 99.04025503305289
patch: return val 1 ; case $NUMBER$ : return - val 1 ;
rank: 181
score: 98.98484293619792
patch: return Double . value CaMeL Of ( - val $NUMBER$ ;
rank: 181
score: 98.96562364366319
patch: return - 0 ; - 1 ; ;
rank: 181
score: 98.95797729492188
patch: return val 1 . index CaMeL Of ( $STRING$ ) ;
rank: 181
score: 98.88191053602431
patch: return safe CaMeL Multiply ( val 1 ;
rank: 181
score: 98.84071858723958
patch: return - 1 ; double - 1 ;
rank: 181
score: 98.83363172743056
patch: long val 1 = - val $NUMBER$ ;
rank: 182
score: 99.08492337740384
patch: return Long . MAX _ VALUE ? 0 : - 1 ;
rank: 182
score: 99.04015241350446
patch: throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ; case 1 :
rank: 182
score: 98.98419189453125
patch: return - 1 ; } else {
rank: 182
score: 98.95750325520834
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + val $NUMBER$ ) ;
rank: 182
score: 98.8817138671875
patch: return 0 ; case 0 : return $STRING$ ;
rank: 182
score: 98.86076049804687
patch: return 0 ; case $NUMBER$ : return 1 ;
rank: 182
score: 98.8406982421875
patch: return - val 1 ; break ; return val 1 ;
rank: 182
score: 98.8328857421875
patch: return val 1 . long CaMeL Value ( ) + val $NUMBER$ ;
rank: 183
score: 99.0848388671875
patch: return Long . parse CaMeL Long ( val $NUMBER$ ;
rank: 183
score: 99.03998480902777
patch: return val 1 ; ; case 1 :
rank: 183
score: 98.98411976207386
patch: return - Integer . length ( val 1 ) ;
rank: 183
score: 98.95728648792614
patch: return val 1 ? - 1 : val $NUMBER$ ;
rank: 183
score: 98.88116455078125
patch: return case 0 : return - val 1 ;
rank: 183
score: 98.86052911931819
patch: return new long ( val 1 , 0 ) ;
rank: 183
score: 98.83130821814903
patch: return Math . min ( val 1 , val $NUMBER$ ) ;
rank: 184
score: 99.08433024088542
patch: return Double . Na CaMeL N ? 0 : 0 ;
rank: 184
score: 99.038818359375
patch: return Math . abs ( val 1 / val 1 ;
rank: 184
score: 98.98394775390625
patch: return - $NUMBER$ + - - - - val 1 ;
rank: 184
score: 98.965087890625
patch: return - val 1 ; - - 1 1 ;
rank: 184
score: 98.95702311197917
patch: return val 1 . safe CaMeL Multiply ( $STRING$ + val $NUMBER$ ) ;
rank: 184
score: 98.8684814453125
patch: return val 1 * 0 + val 1 ;
rank: 184
score: 98.83877328725961
patch: return - 1 ; val 1 { return - - 1 ;
rank: 184
score: 98.83123779296875
patch: return ( Number ) val 1 ;
rank: 185
score: 99.08424729567308
patch: return Math . max ( val 1 , - 1 ) ;
rank: 185
score: 99.03766741071429
patch: return Math . max ( val 1 , - val 1 ) ;
rank: 185
score: 98.98203531901042
patch: return - 1 ; val 1 : return - 1 ;
rank: 185
score: 98.96504516601563
patch: return - val 1 ; - 1 / ;
rank: 185
score: 98.9570068359375
patch: throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ + val 1 + $STRING$
rank: 185
score: 98.8802490234375
patch: return - 1 ; case 0 : return true ;
rank: 185
score: 98.8677469889323
patch: return val 1 ; case 0 : return - 1 ;
rank: 185
score: 98.86036987304688
patch: return val 1 ) ? 0 : 0 ;
rank: 185
score: 98.83791775173611
patch: return - val 1 ; val $NUMBER$ {
rank: 185
score: 98.82988739013672
patch: return ( ) - val 1 ;
rank: 186
score: 99.08387169471153
patch: return val 1 ; default : return - val 1 ; }
rank: 186
score: 99.03741455078125
patch: return Math . round ( val 1 * val 1 ;
rank: 186
score: 98.98130289713542
patch: return - 1 ; else { return - 1 ; }
rank: 186
score: 98.9646329012784
patch: return - 1 ; return 1 ; val 1 ;
rank: 186
score: 98.95644309303977
patch: return - 0 ? - 1 : val 1 ;
rank: 186
score: 98.87996215820313
patch: return val 1 * 0 + val $NUMBER$ ;
rank: 186
score: 98.85993957519531
patch: return Math ? 0 : 0 ;
rank: 186
score: 98.83749389648438
patch: return - 1 ; try
rank: 186
score: 98.82931753305289
patch: return val 1 ; case 0 : return - val 1 ;
rank: 187
score: 99.08267916165866
patch: return Double . parse CaMeL Int ( - val 1 ) ;
rank: 187
score: 99.03731595552884
patch: return Math . abs ( - val 1 * val 1 ;
rank: 187
score: 98.96458129882812
patch: return - 1 ; ; - - 1 ;
rank: 187
score: 98.87986924913194
patch: throw new Arithmetic CaMeL Exception ( ) ;
rank: 187
score: 98.85993041992188
patch: case val $NUMBER$ : return - val 1 ;
rank: 187
score: 98.83645395132211
patch: return - val 1 ; - 1 : return val 1 ;
rank: 188
score: 98.9557393391927
patch: return 0 ; case 0 : return 0 . 1 ;
rank: 188
score: 98.8794677734375
patch: return ( val 1 & val 1 ) ;
rank: 188
score: 98.86615545099431
patch: return val 1 . equals ( val $NUMBER$ ) ;
rank: 188
score: 98.8363545735677
patch: return - 1 ; * / { return - 1 ;
rank: 188
score: 98.826171875
patch: { return - val 1 ;
rank: 189
score: 99.08147723858173
patch: return - val 1 ? - 1 : - val 1 ;
rank: 189
score: 99.0366719563802
patch: return - val 1 ; case 1 : return 1 ;
rank: 189
score: 98.98100142045455
patch: return - 1 1 ; } return - 1 ;
rank: 189
score: 98.9634521484375
patch: return - $NUMBER$ ; return - - 1 ;
rank: 189
score: 98.87901722301136
patch: return val 1 * - $NUMBER$ * val 1 ;
rank: 189
score: 98.83493381076389
patch: return - val 1 ; / 1 ;
rank: 190
score: 99.08090444711539
patch: return Long . value CaMeL Of ( val $NUMBER$ ) . ;
rank: 190
score: 99.03611403245192
patch: return Math . min ( val 1 , val $NUMBER$ 1 ;
rank: 190
score: 98.98089599609375
patch: return - 1 1 1 ;
rank: 190
score: 98.96344604492188
patch: return - val 1 ; - val 1 {
rank: 190
score: 98.8788174715909
patch: return - 1 ; case 0 : return $NUMBER$ ;
rank: 190
score: 98.85808771306819
patch: return 1 ; case 0 : return val 1 ;
rank: 190
score: 98.83352661132812
patch: return - val 1 ; 1 ;
rank: 190
score: 98.82510811941964
patch: return val 1 . long CaMeL Value ( ) ; case 0 :
rank: 191
score: 99.08071899414062
patch: return Double . MIN _ VALUE ;
rank: 191
score: 98.96341959635417
patch: return 1 ; return - val 1 ;
rank: 191
score: 98.95387776692708
patch: return 0 ; case - 1 : return val 1 ;
rank: 191
score: 98.83277723524306
patch: return - val 1 ; return 0 ;
rank: 191
score: 98.82454740084134
patch: return - val 1 ; case 0 : return val $NUMBER$ ;
rank: 192
score: 99.08067908653847
patch: return Long . Na CaMeL N ? 1 : - 1 ;
rank: 192
score: 98.97991265190973
patch: return 0 ; return - val $NUMBER$ ;
rank: 192
score: 98.96262613932292
patch: return - val 1 ; value * - val 1 ;
rank: 192
score: 98.95379083806819
patch: return - 0 ? val 1 : val 1 ;
rank: 192
score: 98.85782470703126
patch: return ( val 1 > val 1 ) ;
rank: 192
score: 98.83208759014423
patch: return - 1 ; - 1 * / return - 1 ;
rank: 192
score: 98.82193697415866
patch: return val 1 . long CaMeL Value ( ) . value ;
rank: 193
score: 99.07954915364583
patch: return - Long . value CaMeL Of ( val $NUMBER$ ;
rank: 193
score: 99.0349833170573
patch: return Math . min ( val $NUMBER$ , 1 ) ;
rank: 193
score: 98.96116129557292
patch: return - val 1 ; 0 : return val 1 ;
rank: 193
score: 98.95196533203125
patch: throw new new Arithmetic CaMeL Exception ( $STRING$ + val 1 ) ;
rank: 193
score: 98.86419677734375
patch: return - val 1 * val 1 * - 1 ;
rank: 193
score: 98.82982635498047
patch: return - val 1 ; System /
rank: 193
score: 98.82167561848958
patch: return Math . min ( 0 , val $NUMBER$ ) ;
rank: 194
score: 99.07857666015624
patch: return - val 1 - - val $NUMBER$ ;
rank: 194
score: 99.03441365559895
patch: if ( val 1 == 0 ) return - 1 ;
rank: 194
score: 98.97903442382812
patch: return - 1 ; case 1 : return - $NUMBER$ ;
rank: 194
score: 98.9499267578125
patch: return val 1 ? - 1 : $NUMBER$ ;
rank: 194
score: 98.8759432705966
patch: return ( - val 1 * val 1 ) ;
rank: 194
score: 98.86277077414773
patch: return val $NUMBER$ ; case 0 : return 0 ;
rank: 194
score: 98.85695578835227
patch: return ( val 1 + - val $NUMBER$ ) ;
rank: 194
score: 98.8296890258789
patch: return - 1 ; - 1 :
rank: 194
score: 98.82035006009616
patch: return - val 1 . get CaMeL Long ( $STRING$ ) ;
rank: 195
score: 99.078173828125
patch: return val 1 * - val 1 1 ;
rank: 195
score: 99.03406778971355
patch: return val $NUMBER$ ; case 1 : return val $NUMBER$ ;
rank: 195
score: 98.97844904119319
patch: return - $NUMBER$ + - - - - 1 ;
rank: 195
score: 98.96070445667614
patch: return - val 1 + - - val 1 ;
rank: 195
score: 98.9498779296875
patch: return - val 1 ? 1 : 1 ;
rank: 195
score: 98.87485080295139
patch: return 0 * $NUMBER$ * val 1 ;
rank: 195
score: 98.86232299804688
patch: return - val 1 * - - $NUMBER$ ;
rank: 195
score: 98.85610129616477
patch: return ( val 1 ? 0 : 0 ) ;
rank: 195
score: 98.8292744954427
patch: return - 1 ; / / / / val 1 ;
rank: 195
score: 98.81939697265625
patch: double val $NUMBER$ = - val $NUMBER$ ;
rank: 196
score: 99.07803109975961
patch: return - Long . value CaMeL Of ( val 1 1 ;
rank: 196
score: 98.97822709517045
patch: return - 1 ; / * return - 1 ;
rank: 196
score: 98.96053059895833
patch: return 0 ; - 1 ; return - val 1 ;
rank: 196
score: 98.87380981445312
patch: return 0 * - $NUMBER$ * - 1 ;
rank: 196
score: 98.86212713068181
patch: return - 1 * val $NUMBER$ * val 1 ;
rank: 196
score: 98.8557373046875
patch: return ( val $NUMBER$ - val 1 ) ;
rank: 196
score: 98.82843017578125
patch: return - 1 ; return - 1 + val 1 ;
rank: 196
score: 98.81920447716347
patch: return safe CaMeL Multiply ( ( double ) val 1 ) ;
rank: 197
score: 99.07773844401042
patch: return Long . parse CaMeL Long ( val 1 1 ;
rank: 197
score: 98.9771240234375
patch: return - $NUMBER$ * - - val $NUMBER$ ;
rank: 197
score: 98.95955716646634
patch: return - 1 ; val 1 : return - val 1 ;
rank: 197
score: 98.94853515625
patch: return in . safe CaMeL Multiply ( val 1 , val 1 ) ;
rank: 197
score: 98.87358262803819
patch: return Math ? - 1 : 0 ;
rank: 197
score: 98.86196067116477
patch: return - ( - 1 + val 1 ) ;
rank: 197
score: 98.85566850142045
patch: return val $NUMBER$ ; case 1 : return 0 ;
rank: 197
score: 98.81917898995536
patch: return - val 1 ; case 0 : return - val 1 ;
rank: 198
score: 99.07743013822116
patch: return Double . Na CaMeL N ? 1 : - 1 ;
rank: 198
score: 99.03334554036458
patch: return Math . floor ( val 1 * val 1 ;
rank: 198
score: 98.97574462890626
patch: return - val 1 + - val $NUMBER$ ;
rank: 198
score: 98.95922173394098
patch: return - val 1 ; val 1 ;
rank: 198
score: 98.9482666015625
patch: throw new Arithmetic CaMeL Exception ( $STRING$ + val $NUMBER$ , $STRING$ ) ;
rank: 198
score: 98.8734463778409
patch: return true ; case 0 : return val 1 ;
rank: 198
score: 98.85562744140626
patch: return - - 0 ? 0 : 0 ;
rank: 198
score: 98.8276875813802
patch: return - 1 ; val 1 { return - $NUMBER$ ;
rank: 199
score: 99.07729763454861
patch: return - Double . MAX _ VALUE ;
rank: 199
score: 98.95895724826389
patch: return - 1 ; ; 1 * ;
rank: 199
score: 98.94727783203125
patch: return val 1 ? - 1 : 1 ;
rank: 199
score: 98.86040704900569
patch: return 0 * - val 1 * val 1 ;
rank: 199
score: 98.82434844970703
patch: return - val 1 ; / /
rank: 199
score: 98.81700303819444
patch: return ( int ) - val $NUMBER$ ;
rank: 200
score: 99.07675405649039
patch: return Double . POSITIVE _ INFINITY ? - 1 : 0 ;
rank: 200
score: 98.97321111505681
patch: return - $NUMBER$ ; } return - val 1 ;
rank: 200
score: 98.95827229817708
patch: return - $NUMBER$ ; - val 1 ;
rank: 200
score: 98.94596557617187
patch: return - $NUMBER$ ? 0 : val 1 ;
rank: 200
score: 98.8600341796875
patch: return val 1 * val 1 * 1 ;
rank: 200
score: 98.85504150390625
patch: case 1 : switch ( val 1 ) {
rank: 200
score: 98.82412484975961
patch: return - val 1 ; * / return - val 1 ;
rank: 200
score: 98.81395374644886
patch: long val $NUMBER$ = val 1 * val $NUMBER$ ;
rank: 201
score: 99.03141276041667
patch: return Math . abs - val 1 ; case 1 :
rank: 201
score: 98.97300026633523
patch: return - val 1 ? - 1 : 1 ;
rank: 201
score: 98.87071644176136
patch: return - $NUMBER$ * val 1 * val 1 ;
rank: 201
score: 98.8598965731534
patch: return 0 ; case 0 : return - 0 ;
rank: 201
score: 98.85408158735795
patch: return val 1 * val 1 - val $NUMBER$ ;
rank: 202
score: 99.07569376627605
patch: return - Math . ceil ( - val 1 ) ;
rank: 202
score: 98.9729248046875
patch: return - $NUMBER$ - - - - 1 ;
rank: 202
score: 98.95748197115384
patch: return - val 1 ; else { return - val 1 ;
rank: 202
score: 98.86994018554688
patch: return ( val 1 & - $NUMBER$ ) ;
rank: 202
score: 98.82305908203125
patch: return val 1 ; try { return - val 1 ;
rank: 202
score: 98.8118667602539
patch: long val $NUMBER$ = val $NUMBER$ ;
rank: 203
score: 99.07550518329327
patch: return Long . parse CaMeL Long ( - - val 1 ;
rank: 203
score: 99.03064982096355
patch: if ( val 1 == 0 ) return val $NUMBER$ ;
rank: 203
score: 98.97249755859374
patch: return - val 1 ; } return false ;
rank: 203
score: 98.85933837890624
patch: return - val $NUMBER$ * - val 1 ;
rank: 203
score: 98.8116226196289
patch: return - val 1 . length ;
rank: 204
score: 99.07527669270833
patch: return - Double . value CaMeL Of ( val 1 ;
rank: 204
score: 99.03046123798077
patch: return - val 1 ; case 0 : return - 1 ;
rank: 204
score: 98.9573745727539
patch: return true ; return - 1 ;
rank: 204
score: 98.943115234375
patch: return 0 ? val 1 : 1 ;
rank: 204
score: 98.86923217773438
patch: return 0 1 * val 1 ;
rank: 204
score: 98.85120239257813
patch: return - ( val 1 + 0 ) ;
rank: 204
score: 98.82042518028847
patch: return - val 1 ; return val 1 - val 1 ;
rank: 204
score: 98.81110975477431
patch: return ( Number ) - val 1 ;
rank: 205
score: 99.07504611545139
patch: return - val $NUMBER$ - val 1 ;
rank: 205
score: 99.03043619791667
patch: return Math . min ( val 1 , 0 ) ;
rank: 205
score: 98.97109985351562
patch: return - val 1 ? 0 : - val 1 ;
rank: 205
score: 98.95735931396484
patch: return false ; return - 1 ;
rank: 205
score: 98.9430401141827
patch: throw new Runtime CaMeL Exception ( $STRING$ + val 1 + $STRING$
rank: 205
score: 98.86915893554688
patch: return - 1 * 0 * - $NUMBER$ ;
rank: 205
score: 98.85099653764205
patch: return ( - 0 ) ? 0 : 0 ;
rank: 205
score: 98.81972092848558
patch: return - 1 ; return - 1 + - val 1 ;
rank: 206
score: 99.03035794771634
patch: return Math . min ( val 1 , - val $NUMBER$ ;
rank: 206
score: 98.970166015625
patch: return 0 ; / * return - 1 ;
rank: 206
score: 98.95640055338542
patch: return - 0 ; return val 1 ;
rank: 206
score: 98.94219563802083
patch: throw new Arithmetic CaMeL Exception ( $STRING$ + val 1 . length ) ;
rank: 206
score: 98.86849365234374
patch: return case - 1 : return val 1 ;
rank: 206
score: 98.85084117542614
patch: return 0 ; case 1 : return - $NUMBER$ ;
rank: 206
score: 98.81939227764423
patch: return - val 1 ; val 1 { return - 1 ;
rank: 206
score: 98.80929565429688
patch: return ( ( int ) val $NUMBER$ ) ;
rank: 207
score: 98.86817626953125
patch: return Integer ? - 1 : val 1 ;
rank: 207
score: 98.8584493001302
patch: if ( val 1 != - 1 ) return 0 ;
rank: 207
score: 98.8171895345052
patch: return - $NUMBER$ ; val 1 { return val 1 ;
rank: 207
score: 98.80905983664773
patch: return - val 1 ? val $NUMBER$ : 0 ;
rank: 208
score: 99.07419996995192
patch: return Long . value CaMeL Of ( - ( val 1 ;
rank: 208
score: 99.02970668247768
patch: return Long . value CaMeL Of ( - val 1 1 ) ;
rank: 208
score: 98.9693094889323
patch: return val 1 1 ;
rank: 208
score: 98.95599365234375
patch: return 0 ; value = - val 1 ;
rank: 208
score: 98.94175368088942
patch: throw new Arithmetic CaMeL Exception ( $STRING$ + val $NUMBER$ + $STRING$
rank: 208
score: 98.85697798295455
patch: return val 1 * val 1 * - $NUMBER$ ;
rank: 208
score: 98.81716918945312
patch: return - val 1 ; val 1 return val 1 ;
rank: 209
score: 99.07363656850961
patch: return Long . parse CaMeL Long ( - ( val 1 ;
rank: 209
score: 99.02864583333333
patch: return Math . max ( val $NUMBER$ , val 1 ;
rank: 209
score: 98.96781921386719
patch: return - $NUMBER$ ; return 0 ;
rank: 209
score: 98.95596313476562
patch: return - 1 ; - 1 ; return val 1 ;
rank: 209
score: 98.868017578125
patch: return - 1 * - $NUMBER$ * 0 ;
rank: 209
score: 98.85645751953125
patch: long val 1 = val 1 ; break ;
rank: 209
score: 98.84948120117187
patch: return - case 1 : return val 1 ;
rank: 209
score: 98.8169657389323
patch: return - val 1 ; return - val 1 1 ;
rank: 210
score: 99.07278442382812
patch: return - val 1 ; } return - val 1 ;
rank: 210
score: 99.02752685546875
patch: return val 1 ; case $NUMBER$ : return val $NUMBER$ ;
rank: 210
score: 98.96749267578124
patch: return - $NUMBER$ * - - - 1 ;
rank: 210
score: 98.95586603338069
patch: return - val 1 ; ; return val 1 ;
rank: 210
score: 98.94083251953126
patch: return val 1 * val 1 * val $NUMBER$
rank: 210
score: 98.867919921875
patch: return 0 * val $NUMBER$ ;
rank: 210
score: 98.8561503092448
patch: if ( val $NUMBER$ != 0 ) return - 1 ;
rank: 210
score: 98.84928588867187
patch: return 0 * 0 ? 0 : 0 ;
rank: 210
score: 98.8168233235677
patch: return - 1 ; val 1 { return - 0 ;
rank: 210
score: 98.80732727050781
patch: return val 1 && val 1 ;
rank: 211
score: 98.95558471679688
patch: return 0 ; ; return - val 1 ;
rank: 211
score: 98.94022623697917
patch: throw new Runtime CaMeL Exception ( $STRING$ + val 1 , $STRING$ ) ;
rank: 211
score: 98.867919921875
patch: throw new Arithmetic CaMeL Exception ( $STRING$ ) ; }
rank: 211
score: 98.8491543856534
patch: throw new Error ( $STRING$ + val 1 ) ;
rank: 211
score: 98.81640625
patch: return - 1 ; - 1 return - val 1 ;
rank: 211
score: 98.80651092529297
patch: double val 1 = val 1 ;
rank: 212
score: 99.07198079427083
patch: return - Double . MIN _ VALUE ;
rank: 212
score: 99.026123046875
patch: return Math . abs ( val 1 1 ;
rank: 212
score: 98.96587579900569
patch: return - 0 1 ; else return - 1 ;
rank: 212
score: 98.9553555575284
patch: return - val 1 ; - - - 1 ;
rank: 212
score: 98.8673095703125
patch: case - 1 : return 0 ;
rank: 212
score: 98.84912109375
patch: return 1 ; case $NUMBER$ : return 0 ;
rank: 212
score: 98.80568150111607
patch: return val 1 . long CaMeL Value ( ) ; case 1 :
rank: 213
score: 99.07187124399039
patch: return - Long . value CaMeL Of ( - 1 1 ;
rank: 213
score: 99.0260009765625
patch: return Long . parse CaMeL Int ( val 1 1 ;
rank: 213
score: 98.96561889648437
patch: return - 1 1 - - val 1 ;
rank: 213
score: 98.85413275824652
patch: return val 1 * - - 1 ;
rank: 213
score: 98.84822221235795
patch: return val 1 * val $NUMBER$ - val $NUMBER$ ;
rank: 213
score: 98.81626383463542
patch: return - 1 ; / * / return - 1 ;
rank: 213
score: 98.80558558872768
patch: return - val 1 . long CaMeL Value ( ) . value ;
rank: 214
score: 99.02535306490384
patch: return Math . min ( - val 1 , val 1 ;
rank: 214
score: 98.96467590332031
patch: return 0 + - val $NUMBER$ ;
rank: 214
score: 98.95503743489583
patch: return - 1 ; ; val 1 ;
rank: 214
score: 98.93797200520834
patch: throw new Arithmetic CaMeL Exception ( $STRING$ + val 1 . value ) ;
rank: 214
score: 98.86638726128473
patch: return 0 * - 1 * 0 ;
rank: 214
score: 98.81558227539062
patch: return - val 1 ; System .
rank: 214
score: 98.80355130709134
patch: return Math . max ( val 1 , - $NUMBER$ ) ;
rank: 215
score: 99.07083129882812
patch: return - val 1 << - val 1 ;
rank: 215
score: 98.96388753255208
patch: return - $NUMBER$ * - - 1 ;
rank: 215
score: 98.95421491350446
patch: return - val 1 ; * / { return - val 1 ;
rank: 215
score: 98.93783133370536
patch: throw new Arithmetic CaMeL Exception ( $STRING$ + val 1 , $STRING$ ,
rank: 215
score: 98.85284423828125
patch: return ( val 1 << val 1 ) ;
rank: 215
score: 98.8131612141927
patch: return - val 1 ; val 1 / - 1 ;
rank: 216
score: 99.07078247070312
patch: return - val 1 ^ - val $NUMBER$ ;
rank: 216
score: 99.02401394314236
patch: if ( val 1 == - 1 )
rank: 216
score: 98.96260986328124
patch: return 0 ; else return - val $NUMBER$ ;
rank: 216
score: 98.95420328776042
patch: return 0 ; return - 1 ; return - 1 ;
rank: 216
score: 98.81266276041667
patch: return val 1 ; val 1 return - val 1 ;
rank: 216
score: 98.80158996582031
patch: double val $NUMBER$ = val 1 ;
rank: 217
score: 99.02395629882812
patch: return Math . abs ( val 1 * val $NUMBER$ ;
rank: 217
score: 98.96260579427083
patch: return - val 1 ? - 1 : val 1 ;
rank: 217
score: 98.95408935546875
patch: return - val 1 ; long - 1 ;
rank: 217
score: 98.93707744891827
patch: throw new Arithmetic CaMeL Exception ( 1 + val 1 ) ;
rank: 217
score: 98.81241861979167
patch: return - val 1 ; break ; return - 1 ;
rank: 217
score: 98.80136343149039
patch: return safe CaMeL Multiply ( - 1 , val $NUMBER$ ) ;
rank: 218
score: 99.07009652944711
patch: return Long . parse CaMeL Long ( - val 1 ; ;
rank: 218
score: 99.02371920072116
patch: return Math . max ( - 1 , val 1 ) ;
rank: 218
score: 98.96221923828125
patch: return Integer . value CaMeL Of ( val 1 1 ;
rank: 218
score: 98.9539306640625
patch: return - val 1 ; ; return 0 ;
rank: 218
score: 98.93701850043402
patch: return val 1 ? 1 : $NUMBER$ ;
rank: 218
score: 98.86392822265626
patch: return null ; case 0 : return 0 ;
rank: 218
score: 98.8495205965909
patch: return - 1 ; case 1 : return 1 ;
rank: 218
score: 98.8118896484375
patch: return ( - val 1 ; return - val 1 ;
rank: 218
score: 98.80021837022569
patch: return - val 1 && val 1 ;
rank: 219
score: 99.06949462890626
patch: return val 1 * - - val $NUMBER$ ;
rank: 219
score: 98.95298073508523
patch: return - 1 ; value return - val 1 ;
rank: 219
score: 98.93695537860577
patch: return val 1 . safe CaMeL Multiply ( $NUMBER$ 1 ) ;
rank: 219
score: 98.86369018554687
patch: return 0 * case 1 : return 0 ;
rank: 219
score: 98.84927978515626
patch: return - 1 . 1 * val 1 ;
rank: 219
score: 98.84624689275569
patch: return val 1 * 0 ? 0 : 0 ;
rank: 219
score: 98.81116594587054
patch: return - val 1 ; try
rank: 219
score: 98.79908752441406
patch: return val 1 - val $NUMBER$ ;
rank: 220
score: 99.0217754657452
patch: return val 1 ; ; case 1 : return val 1 ;
rank: 220
score: 98.9525655110677
patch: return - 1 ; else { return - val 1 ;
rank: 220
score: 98.9368896484375
patch: return val 1 . safe CaMeL Multiply ( 1 * val $NUMBER$ ) ;
rank: 220
score: 98.8636807528409
patch: return val 1 ; case 0 : return 1 ;
rank: 220
score: 98.84922096946023
patch: return val $NUMBER$ * val $NUMBER$ * val $NUMBER$ ;
rank: 220
score: 98.84566921657986
patch: return - - - - val 1 ;
rank: 220
score: 98.81002807617188
patch: return - 1 ; val $NUMBER$ { return - 1 ;
rank: 221
score: 98.96099298650569
patch: return - 1 + - - - val $NUMBER$ ;
rank: 221
score: 98.95198567708333
patch: return - 1 ; - - 0 ;
rank: 221
score: 98.93679373604911
patch: throw new Arithmetic CaMeL Exception ( $STRING$ + val 1 , ) ;
rank: 221
score: 98.86363636363636
patch: return val 1 ; case 0 : return true ;
rank: 221
score: 98.84487082741477
patch: return - 0 ; case $NUMBER$ : return 0 ;
rank: 221
score: 98.80971272786458
patch: return - $NUMBER$ ; return - 1 ; - 1 ;
rank: 221
score: 98.79696219308036
patch: return val 1 . long CaMeL Value ( ) - val 1 ;
rank: 222
score: 99.06630295973558
patch: return Double . value CaMeL Of ( - val $NUMBER$ ) ;
rank: 222
score: 99.0216064453125
patch: return val 1 ; case 1 : return - $NUMBER$ ;
rank: 222
score: 98.95189412434895
patch: return - val 1 ; 1 return - val 1 ;
rank: 222
score: 98.93547227647569
patch: return 0 ? 0 : - 0 ;
rank: 222
score: 98.8624267578125
patch: return val 1 * 0 . 1 ;
rank: 222
score: 98.84863959418402
patch: return - val $NUMBER$ * - 1 ;
rank: 222
score: 98.84465680803571
patch: case 0 : return 0 ;
rank: 223
score: 99.06627400716145
patch: return Long . parse CaMeL Int ( - 1 1 ;
rank: 223
score: 98.96060180664062
patch: return - 0 + - - val 1 ;
rank: 223
score: 98.95162527901786
patch: return - val 1 ; - 1 ; return - val 1 ;
rank: 223
score: 98.84772406684027
patch: return ( val 1 & 1 ) ;
rank: 223
score: 98.84433419363839
patch: return - - - 1 ;
rank: 223
score: 98.80931599934895
patch: return val 1 ; return - 1 ; - 1 ;
rank: 224
score: 98.9602559407552
patch: return val 1 ; - 1 : return - 1 ;
rank: 224
score: 98.93518676757813
patch: return 0 ; case 1 : return val 1
rank: 224
score: 98.86175537109375
patch: return - ( $STRING$ + val 1 ) ;
rank: 224
score: 98.84400523792614
patch: return $STRING$ ; case 1 : return val 1 ;
rank: 224
score: 98.80679086538461
patch: return - 1 ; return - val 1 ; - 1 ;
rank: 224
score: 98.79619598388672
patch: return Math . - val 1 ;
rank: 225
score: 99.06479714133523
patch: return Long . parse CaMeL Double ( val 1 ;
rank: 225
score: 99.0200907389323
patch: if ( val 1 == Double . Na CaMeL N ;
rank: 225
score: 98.9600341796875
patch: return - 1 1 / - val 1 ;
rank: 225
score: 98.95075017755681
patch: return - val 1 ; ; return - 1 ;
rank: 225
score: 98.84712727864583
patch: return - 1 ; case - 1 : return 0 ;
rank: 225
score: 98.84349822998047
patch: return - - - val $NUMBER$ ;
rank: 225
score: 98.80620574951172
patch: return - - 1 ; break ;
rank: 225
score: 98.79610866970486
patch: double val 1 = - val $NUMBER$ ;
rank: 226
score: 99.06449127197266
patch: return - ( - val 1 ;
rank: 226
score: 99.01784104567308
patch: return Math . max ( val 1 , val $NUMBER$ 1 ;
rank: 226
score: 98.95991821289063
patch: return - ( Integer ) - val 1 ;
rank: 226
score: 98.9504864032452
patch: return - val 1 ; - 1 return - val 1 ;
rank: 226
score: 98.84337700737848
patch: return - val 1 + val $NUMBER$ ;
rank: 226
score: 98.80620465959821
patch: return - val 1 ; val $NUMBER$ { return - val 1 ;
rank: 226
score: 98.7958514873798
patch: return val 1 * safe CaMeL Multiply ( val $NUMBER$ ) ;
rank: 227
score: 98.95972900390625
patch: return 1 + - - - val 1 ;
rank: 227
score: 98.95001220703125
patch: return - 0 ; - 1 ; ; ;
rank: 227
score: 98.9329833984375
patch: throw new Arithmetic CaMeL Exception ( 0 + val 1 ) ;
rank: 227
score: 98.84328002929688
patch: return val 1 * 0 - val 1 ;
rank: 227
score: 98.80471801757812
patch: return val 1 ; break ; return - val 1 ;
rank: 227
score: 98.79569868607955
patch: long val 1 = val 1 * val $NUMBER$ ;
rank: 228
score: 99.06326998197116
patch: return - Double . value CaMeL Of ( - val $NUMBER$ ;
rank: 228
score: 99.01531512920673
patch: return - 1 ; case - 1 : return - 1 ;
rank: 228
score: 98.94894409179688
patch: return - val 1 ; while val 1 ;
rank: 228
score: 98.84058227539063
patch: return ( val $NUMBER$ + val 1 ) ;
rank: 228
score: 98.80463409423828
patch: return - val $NUMBER$ ; break ;
rank: 229
score: 99.06297718394886
patch: return ( val 1 & - val 1 ) ;
rank: 229
score: 99.01449245876736
patch: return Math . abs - val 1 ;
rank: 229
score: 98.95768432617187
patch: return 0 ; val 1 = - 1 ;
rank: 229
score: 98.94866333007812
patch: return - 1 ; val 1 = 0 ;
rank: 229
score: 98.86024305555556
patch: return Math ? 0 : val 1 ;
rank: 229
score: 98.83984985351563
patch: return - new Double ( val 1 ) ;
rank: 229
score: 98.79466247558594
patch: return val 1 ? val $NUMBER$ ;
rank: 230
score: 99.06290690104167
patch: return val $NUMBER$ * - val 1 ;
rank: 230
score: 99.0138408954327
patch: if ( val 1 == - 1 ) return val 1 ;
rank: 230
score: 98.95763050426136
patch: return - $NUMBER$ ? val 1 : val 1 ;
rank: 230
score: 98.94835205078125
patch: return - val 1 ; 0 ; * /
rank: 230
score: 98.93177141462054
patch: return - val 1 . safe CaMeL Multiply ( 0 1 ) ;
rank: 230
score: 98.85994262695313
patch: return - 1 * - 1 * 0 ;
rank: 230
score: 98.84587097167969
patch: return val 1 * - 0 ;
rank: 230
score: 98.8394775390625
patch: return val 1 ? - val 1 : 0 ;
rank: 230
score: 98.80286583533653
patch: return val 1 ; return - val 1 ; - 1 ;
rank: 230
score: 98.79165414663461
patch: double val $NUMBER$ = safe CaMeL Multiply ( val 1 ) ;
rank: 231
score: 99.0620625813802
patch: return System . current CaMeL Time CaMeL Millis ( ) ;
rank: 231
score: 98.93061967329545
patch: return val 1 . add ( val 1 ) ;
rank: 231
score: 98.85985218394886
patch: return $NUMBER$ ; case 0 : return - 1 ;
rank: 231
score: 98.84557495117187
patch: return ( ( byte ) val 1 ) ;
rank: 231
score: 98.83870072798295
patch: return ( val 1 + - val 1 ) ;
rank: 231
score: 98.8009784405048
patch: return - 1 ; - 1 : return - val 1 ;
rank: 232
score: 99.06201782226563
patch: return Math . ceil ( - val 1 ;
rank: 232
score: 99.01325073242188
patch: return - val 1 ; case val $NUMBER$ :
rank: 232
score: 98.85928955078126
patch: return val 1 * val $NUMBER$ * 0 ;
rank: 232
score: 98.80096435546875
patch: return - 1 ; break ; val 1 { return - 1 ;
rank: 233
score: 99.06138258713942
patch: return Double . Na CaMeL N ? $NUMBER$ : - 1 ;
rank: 233
score: 98.95604112413194
patch: return - val 1 & val 1 ;
rank: 233
score: 98.946044921875
patch: return - val 1 ; 0 * - val 1 ;
rank: 233
score: 98.92923409598214
patch: throw new Arithmetic CaMeL Exception ( $STRING$ + val 1 ) ; }
rank: 233
score: 98.85923461914062
patch: return val 1 * - 1 * 0 ;
rank: 233
score: 98.84474875710227
patch: return 0 ; case val 1 : return 0 ;
rank: 233
score: 98.83785400390624
patch: return null ; case 1 : return 0 ;
rank: 233
score: 98.7891616821289
patch: return val 1 == - 1 ;
rank: 234
score: 99.0123760516827
patch: if ( val 1 == - 1 ) return - 1 ;
rank: 234
score: 98.95599365234375
patch: return - 1 1 ; else return 1 ;
rank: 234
score: 98.94563598632813
patch: return - val 1 ; 0 * ; /
rank: 234
score: 98.85922241210938
patch: return ( val 1 * - $NUMBER$ ) ;
rank: 234
score: 98.8442715731534
patch: return val 1 * val $NUMBER$ * - 1 ;
rank: 234
score: 98.83734685724431
patch: long val 1 = val 1 ; return 0 ;
rank: 234
score: 98.8008563701923
patch: return - val 1 ; - 1 / - val 1 ;
rank: 234
score: 98.78813032670455
patch: return val 1 ? val $NUMBER$ : val $NUMBER$ ;
rank: 235
score: 99.06033325195312
patch: return Integer . parse CaMeL Int ( - 1 1 ;
rank: 235
score: 98.95590209960938
patch: return $NUMBER$ ? - 1 : - 1 ;
rank: 235
score: 98.94521755642361
patch: return - $NUMBER$ ; ; - 1 :
rank: 235
score: 98.9283916766827
patch: return val 1 . safe CaMeL Multiply ( 0 ) ; }
rank: 235
score: 98.83720703125
patch: return - value 1 ? 0 : 0 ;
rank: 235
score: 98.80011455829327
patch: return - val 1 ; return - - - val 1 ;
rank: 235
score: 98.78620741102431
patch: return - val 1 == val 1 ;
rank: 236
score: 99.06014310396634
patch: return - Double . value CaMeL Of ( val $NUMBER$ ) ;
rank: 236
score: 99.0115966796875
patch: return Math . round ( - val 1 ;
rank: 236
score: 98.94498697916667
patch: return - 1 ; - 1 ; return - 0 ;
rank: 236
score: 98.9282958984375
patch: return val 1 ? $NUMBER$ : - 1 ;
rank: 236
score: 98.85861206054688
patch: return 0 * 0 * - val 1 ;
rank: 236
score: 98.83719889322917
patch: return new Number ( val 1 ) ;
rank: 236
score: 98.80000813802083
patch: return - val 1 ; val 1 { return $NUMBER$ ;
rank: 236
score: 98.78566196986607
patch: return safe CaMeL Multiply ( val 1 , - val 1 ) ;
rank: 237
score: 99.01050914417614
patch: return val 1 == 0 ? 0 : 0 ;
rank: 237
score: 98.954833984375
patch: return - $NUMBER$ 1 ; else return - $NUMBER$ ;
rank: 237
score: 98.92789035373264
patch: return 0 ? val 1 : $NUMBER$ ;
rank: 237
score: 98.85842895507812
patch: return - 1 * $NUMBER$ * val 1 ;
rank: 237
score: 98.84149724786931
patch: if ( val 1 == 0 ) return 0 ;
rank: 237
score: 98.83595106336806
patch: return new Integer ( val $NUMBER$ ) ;
rank: 237
score: 98.79917399088542
patch: return - val 1 ; - 1 / / / /
rank: 237
score: 98.78530883789062
patch: return val 1 ? - val 1 : val 1 ;
rank: 238
score: 99.05872599283855
patch: return - ( val 1 & - val 1 ) ;
rank: 238
score: 98.95406087239583
patch: return 0 ? - val 1 : - val 1 ;
rank: 238
score: 98.94385875355114
patch: return - val 1 ; value - val 1 ;
rank: 238
score: 98.92666015625
patch: return val 1 . safe CaMeL Multiply ( val 1 , $STRING$ ) ;
rank: 238
score: 98.8583251953125
patch: throw new Arithmetic CaMeL Exception ( long ) ;
rank: 238
score: 98.83591715494792
patch: return - $NUMBER$ : return val 1 ;
rank: 238
score: 98.7835693359375
patch: return ( double ) - val 1 ;
rank: 239
score: 98.95383126395089
patch: return - 0 val 1 ;
rank: 239
score: 98.94359479631696
patch: return - val 1 ; val 1 : return - val 1 ;
rank: 239
score: 98.92532784598214
patch: return - val 1 . safe CaMeL Multiply ( 1 1 ) ;
rank: 239
score: 98.85797674005681
patch: return $NUMBER$ ; case - 1 : return 0 ;
rank: 239
score: 98.83575439453125
patch: return val 1 + val $NUMBER$ ;
rank: 239
score: 98.79888916015625
patch: return - 1 ; return val 1 - val 1 ;
rank: 240
score: 98.95372425426136
patch: return Integer . value CaMeL Of ( - 1 ;
rank: 240
score: 98.94359241832386
patch: return - - val 1 ; return - 0 ;
rank: 240
score: 98.92405482700893
patch: throw new Arithmetic CaMeL Exception ( $STRING$ + val 1 . get CaMeL
rank: 240
score: 98.85765491832386
patch: return $STRING$ ; case 0 : return val 1 ;
rank: 240
score: 98.79830228365384
patch: return - 1 ; value 1 { return - val 1 ;
rank: 240
score: 98.78123121995192
patch: return safe CaMeL Multiply ( val 1 ) ; case 0 :
rank: 241
score: 99.05820875901442
patch: return - val 1 ; default : return - val $NUMBER$ ;
rank: 241
score: 99.00917746803977
patch: return val 1 ; case 1 : return 1 ;
rank: 241
score: 98.94354248046875
patch: return 0 ; return - 1 ; ; - 1 ;
rank: 241
score: 98.92399291992187
patch: return - $NUMBER$ ? val 1 : 0 ;
rank: 241
score: 98.85651245117188
patch: return - 1 * 0 * - 1 ;
rank: 241
score: 98.8339111328125
patch: return new long ( val 1 1 ) ;
rank: 241
score: 98.79718017578125
patch: return - 1 ; for - 1 : - 1 ;
rank: 241
score: 98.78118426983173
patch: long val $NUMBER$ = safe CaMeL Multiply ( val 1 ) ;
rank: 242
score: 99.00863882211539
patch: return - Long . parse CaMeL Int ( - val 1 ;
rank: 242
score: 98.94269353693181
patch: return - 1 ; ; - 1 ; * /
rank: 242
score: 98.92398507254464
patch: return safe CaMeL Multiply ( val 1 1 , val $NUMBER$ ) ;
rank: 242
score: 98.8561123934659
patch: throw new Double ( $STRING$ + val 1 ) ;
rank: 242
score: 98.84006569602273
patch: return - ( ( int ) val 1 ) ;
rank: 242
score: 98.83384874131944
patch: return value 1 ? 0 : 0 ;
rank: 242
score: 98.79707845052083
patch: return - val 1 ; - 1 : return 1 ;
rank: 242
score: 98.77993338448661
patch: return - val 1 . index CaMeL Of ( val 1 ) ;
rank: 243
score: 98.94256122295673
patch: return - val 1 ; * ? return - val 1 ;
rank: 243
score: 98.92189534505208
patch: return 0 ; else return val 1 ;
rank: 243
score: 98.84004720052083
patch: if ( val 1 != 0 ) return - 1 ;
rank: 243
score: 98.83271928267045
patch: return null ; case 1 : return val 1 ;
rank: 243
score: 98.79672241210938
patch: return - 1 ; break ; val 1 / 1 ;
rank: 243
score: 98.77876420454545
patch: return val 1 ? val $NUMBER$ : val 1 ;
rank: 244
score: 99.05696411132813
patch: return ( val 1 & - val $NUMBER$ ;
rank: 244
score: 99.00783469460227
patch: if ( val 1 ; return - val 1 ;
rank: 244
score: 98.952490234375
patch: return - 1 1 ; else return 0 ;
rank: 244
score: 98.92176231971153
patch: return val 1 . safe CaMeL Multiply ( - val 1 ;
rank: 244
score: 98.85527886284723
patch: return ( $STRING$ + val 1 ) ;
rank: 244
score: 98.8391845703125
patch: return - ( val 1 , 1 ) ;
rank: 244
score: 98.83131239149306
patch: return safe CaMeL Multiply ( 1 ) ;
rank: 244
score: 98.79618326822917
patch: return - 1 ; - 1 : return val 1 ;
rank: 244
score: 98.77860514322917
patch: return ( safe CaMeL Multiply ( val 1 , val $NUMBER$ ) ) ;
rank: 245
score: 99.0558612530048
patch: return val 1 ? - val 1 : - val 1 ;
rank: 245
score: 99.00771859975961
patch: return Long . parse CaMeL Int ( - val $NUMBER$ 1 ;
rank: 245
score: 98.92149522569444
patch: return val 1 ? $NUMBER$ : $NUMBER$ ;
rank: 245
score: 98.83125813802083
patch: return - 1 : return val 1 ;
rank: 245
score: 98.7957294170673
patch: return - 1 ; if val 1 : return - 1 ;
rank: 246
score: 99.05537923177083
patch: return - val 1 / val $NUMBER$ ;
rank: 246
score: 98.95142211914063
patch: return 0 ; } else return - 1 ;
rank: 246
score: 98.9413311298077
patch: return - val 1 ; - 1 ; return - 1 ;
rank: 246
score: 98.92127482096355
patch: return val 1 . safe CaMeL Multiply ( val 1 ;
rank: 246
score: 98.85413818359375
patch: return $NUMBER$ * - 1 * val 1 ;
rank: 246
score: 98.8379239169034
patch: return - ( ( long ) val 1 ) ;
rank: 246
score: 98.79519217354911
patch: return - val 1 ; compare 1 : return - val 1 ;
rank: 246
score: 98.77762858072917
patch: return - val 1 ? val 1 ;
rank: 247
score: 99.05518517127403
patch: return Long . - ( val 1 * val 1 ) ;
rank: 247
score: 99.00675659179687
patch: if ( - val 1 == - 1 )
rank: 247
score: 98.94036395733173
patch: return - 1 ; ; - 1 : return - 1 ;
rank: 247
score: 98.83009168836806
patch: return - Integer ? 0 : 0 ;
rank: 247
score: 98.7938461303711
patch: return - 1 ; / * /
rank: 247
score: 98.77748616536458
patch: return ( - val 1 ) . - val 1 ;
rank: 248
score: 99.05518517127403
patch: return - Double . POSITIVE _ INFINITY ? 0 : 0 ;
rank: 248
score: 98.93991921164773
patch: return - val 1 ; ; - 1 * /
rank: 248
score: 98.92096819196429
patch: return - val 1 . safe CaMeL Multiply ( $NUMBER$ 1 ) ;
rank: 248
score: 98.79286702473958
patch: return 1 ; val 1 { return - val 1 ;
rank: 248
score: 98.77739606584821
patch: return val 1 . double CaMeL Value ( ) + val 1 ;
rank: 249
score: 99.05507249098558
patch: return Math . max ( - 1 , - 1 ) ;
rank: 249
score: 98.94980690696023
patch: return - 1 ; - 1 : return 1 ;
rank: 249
score: 98.93974473741319
patch: return - 1 ; - 0 ; ;
rank: 249
score: 98.83561567826705
patch: return - 1 * val 1 * - 1 ;
rank: 249
score: 98.82941284179688
patch: return - Math ? 0 : val 1 ;
rank: 249
score: 98.7927958170573
patch: return val 1 ; * / return - val 1 ;
rank: 249
score: 98.77677095853366
patch: return Math . max ( val $NUMBER$ , val $NUMBER$ ) ;
rank: 250
score: 99.05431189903847
patch: return Long . Na CaMeL N ? $NUMBER$ : - 1 ;
rank: 250
score: 99.00597205528847
patch: return Math . ceil ( - val 1 * val 1 ;
rank: 250
score: 98.94973754882812
patch: return - 1 ; } else { return val 1 ;
rank: 250
score: 98.93940565321181
patch: return - 0 ; - - 1 ;
rank: 250
score: 98.91980852399554
patch: throw new Arithmetic CaMeL Exception ( $STRING$ + val 1 $NUMBER$ ) ;
rank: 250
score: 98.82924582741477
patch: return - - val 1 ? 0 : 0 ;
rank: 250
score: 98.79278094951923
patch: return - val 1 ; return - 1 ; - 1 ;
rank: 251
score: 99.05404897836539
patch: return Integer . value CaMeL Of ( - 1 1 ) ;
rank: 251
score: 99.00537787543402
patch: return - val $NUMBER$ ; case $NUMBER$ :
rank: 251
score: 98.94909057617187
patch: return - 1 ; else = - 1 ;
rank: 251
score: 98.85202365451389
patch: return - 1 * 0 * 0 ;
rank: 251
score: 98.8353515625
patch: return - - val 1 * - 1 ;
rank: 251
score: 98.82896423339844
patch: return Double . - val 1 ;
rank: 251
score: 98.79269409179688
patch: return - 1 ; return - 1 ; return 1 ;
rank: 252
score: 99.05386962890626
patch: return - val 1 || - val 1 ;
rank: 252
score: 99.00525841346153
patch: return - val $NUMBER$ ; case 1 : return val $NUMBER$ ;
rank: 252
score: 98.918310546875
patch: return - val 1 ? $NUMBER$ : $NUMBER$ ;
rank: 252
score: 98.85181274414063
patch: return $NUMBER$ * - $NUMBER$ * val 1 ;
rank: 252
score: 98.79188889723558
patch: return - 1 ; return val 1 + - val 1 ;
rank: 252
score: 98.77476149338942
patch: return val 1 ; case - 1 : return val 1 ;
rank: 253
score: 99.0534159342448
patch: return val 1 ; default : return - 1 ; }
rank: 253
score: 99.00517578125
patch: return $NUMBER$ ; case 1 : return 1 ;
rank: 253
score: 98.91761271158855
patch: return 0 ; case $NUMBER$ : return - val 1 ;
rank: 253
score: 98.85179901123047
patch: return - $NUMBER$ * - $NUMBER$ ;
rank: 253
score: 98.82843627929688
patch: return new Double ( - val 1 ) ;
rank: 253
score: 98.79006958007812
patch: return - val 1 ; max / - val 1 ;
rank: 253
score: 98.7735262784091
patch: return - val $NUMBER$ ? 0 : val 1 ;
rank: 254
score: 99.05295817057292
patch: return - val 1 | val $NUMBER$ ;
rank: 254
score: 99.0050381747159
patch: return Math . abs ( val 1 1 ) ;
rank: 254
score: 98.9467041015625
patch: return - 1 ; } return - $NUMBER$ :
rank: 254
score: 98.91709798177084
patch: throw new Arithmetic CaMeL Exception ( $STRING$ + $STRING$ + val $NUMBER$ ) ;
rank: 254
score: 98.85164018110795
patch: return $NUMBER$ ; case 0 : return val 1 ;
rank: 254
score: 98.8277587890625
patch: val 1 = val 1 * val $NUMBER$ ;
rank: 254
score: 98.78994516225961
patch: return - 1 ; - val 1 : return - 1 ;
rank: 254
score: 98.77249145507812
patch: return val $NUMBER$ ? 0 : val 1 ;
rank: 255
score: 99.00482647235577
patch: return Math . min ( - val 1 , 1 ) ;
rank: 255
score: 98.94611150568181
patch: return - $NUMBER$ 1 ; else return val 1 ;
rank: 255
score: 98.91702706473214
patch: return val 1 . safe CaMeL Multiply ( $STRING$ + val 1 ;
rank: 255
score: 98.78987630208333
patch: return - val 1 ; return - val 1 ; else
rank: 255
score: 98.77217240767045
patch: long val $NUMBER$ = val $NUMBER$ * val $NUMBER$ ;
rank: 256
score: 99.05234938401442
patch: return Double . value CaMeL Of ( - val 1 1 ;
rank: 256
score: 98.94589233398438
patch: return 1 ; else return - val 1 ;
rank: 256
score: 98.85122680664062
patch: throw ( Arithmetic CaMeL Exception ) val 1 ;
rank: 256
score: 98.7884990985577
patch: return - 1 ; return - 1 ; return val 1 ;
rank: 257
score: 98.9458516438802
patch: return - 1 ; - 1 : return - $NUMBER$ ;
rank: 257
score: 98.9366455078125
patch: return - 1 ; while - 0 ;
rank: 257
score: 98.83372192382812
patch: return Long ? - 1 : val 1 ;
rank: 257
score: 98.82676391601562
patch: safe CaMeL Multiply ( - val 1 ) ;
rank: 257
score: 98.78839111328125
patch: return - val 1 ; / ;
rank: 257
score: 98.77015032087054
patch: return val 1 . long CaMeL Value ( ) - val $NUMBER$ ;
rank: 258
score: 99.00446026141827
patch: return Math . max ( val 1 , - val $NUMBER$ ;
rank: 258
score: 98.94566761363636
patch: return - $NUMBER$ - - - - val $NUMBER$ ;
rank: 258
score: 98.93454996744792
patch: return 0 ; return - 1 ; - val 1 ;
rank: 258
score: 98.91624098557692
patch: return - val 1 . safe CaMeL Multiply ( $NUMBER$ ) ;
rank: 258
score: 98.850830078125
patch: return - $NUMBER$ * $STRING$ + val 1 ;
rank: 258
score: 98.8324862393466
patch: return 0 * - val 1 * val $NUMBER$ ;
rank: 258
score: 98.78760782877605
patch: return - val 1 ; abs - - val 1 ;
rank: 258
score: 98.76989067925348
patch: return val 1 ? - val 1 ;
rank: 259
score: 99.05166625976562
patch: return - val $NUMBER$ ; default : return - 1 ;
rank: 259
score: 99.00307992788461
patch: return Math . abs ( val 1 ) ; case 1 :
rank: 259
score: 98.945556640625
patch: return Short . value CaMeL Of ( - val 1 ;
rank: 259
score: 98.93409312855114
patch: return - val 1 ; ; - val 1 :
rank: 259
score: 98.91574331430289
patch: throw new Arithmetic CaMeL Exception ( $STRING$ + value 1 ) ;
rank: 259
score: 98.83226182725694
patch: return - ( long ) val 1 ;
rank: 259
score: 98.82491455078124
patch: case 1 : { return - val 1 ;
rank: 259
score: 98.78753192608173
patch: return - 1 ; val 1 { return - val $NUMBER$ ;
rank: 259
score: 98.76942952473958
patch: return - val 1 ? val $NUMBER$ : val $NUMBER$ ;
rank: 260
score: 99.00307006835938
patch: return - 1 ; break ; case 1 :
rank: 260
score: 98.9454678622159
patch: return - 1 ; - 1 : return 0 ;
rank: 260
score: 98.93407093394886
patch: return - 1 ; else { return - 1 ;
rank: 260
score: 98.8487881747159
patch: return $STRING$ ; case 0 : return - 1 ;
rank: 260
score: 98.83211669921874
patch: return 0 * 1 * - val 1 ;
rank: 260
score: 98.82459174262152
patch: return val $NUMBER$ ? 0 : 0 ;
rank: 260
score: 98.78701782226562
patch: return - val 1 ; - 1 : - 1 ;
rank: 261
score: 99.05032113882211
patch: return - - Long . value CaMeL Of ( val 1 ;
rank: 261
score: 99.00245884486607
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ; case 1 :
rank: 261
score: 98.9452392578125
patch: return - $NUMBER$ ; else return val 1 ;
rank: 261
score: 98.91373116629464
patch: throw new Arithmetic CaMeL Exception ( val 1 + val 1 ) ;
rank: 261
score: 98.84804958767361
patch: return $NUMBER$ * 0 * val 1 ;
rank: 261
score: 98.83208550347223
patch: return - - 1 * - 1 ;
rank: 261
score: 98.82457386363636
patch: return true ; case 1 : return - 1 ;
rank: 261
score: 98.78676932198661
patch: return - val 1 ; val 1 { return - val $NUMBER$ ;
rank: 261
score: 98.7674560546875
patch: return val 1 . long CaMeL Value ( ) * val 1 ;
rank: 262
score: 99.05031174879808
patch: return Math . min ( - 1 , - 1 ) ;
rank: 262
score: 98.94469105113636
patch: return - 1 ; } else return - $NUMBER$ ;
rank: 262
score: 98.93304443359375
patch: return - val 1 ; - 1 ; - 1 ;
rank: 262
score: 98.91324869791667
patch: return val 1 . safe CaMeL Multiply ( val 1 , true ) ;
rank: 262
score: 98.84801136363636
patch: throw new Throwable ( $STRING$ + val 1 ) ;
rank: 262
score: 98.83172052556819
patch: return - val 1 * 0 + val 1 ;
rank: 262
score: 98.8242696126302
patch: return - - $NUMBER$ ;
rank: 262
score: 98.78578404017857
patch: return - val 1 ; System
rank: 263
score: 99.05018107096355
patch: throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ 1 ;
rank: 263
score: 99.00205641526442
patch: return val $NUMBER$ ; case 1 : return - val 1 ;
rank: 263
score: 98.9324239095052
patch: return - val 1 ; 0 / ; - 1 ;
rank: 263
score: 98.9126220703125
patch: return - val 1 . safe CaMeL Multiply ( - val $NUMBER$ ) ;
rank: 263
score: 98.84690348307292
patch: throw new Arithmetic CaMeL Exception ( $STRING$ +
rank: 263
score: 98.82421875
patch: return new int ( val 1 ) ;
rank: 263
score: 98.78553263346355
patch: return - val 1 ; abs return - val 1 ;
rank: 264
score: 99.04989624023438
patch: return Long . Na CaMeL N ? 0 : 0 ;
rank: 264
score: 99.00197531960227
patch: return - Math . abs ( - val 1 ;
rank: 264
score: 98.94455973307292
patch: return - $NUMBER$ ; val 1 : return - 1 ;
rank: 264
score: 98.9320068359375
patch: if - 1 1 ; return - val 1 ;
rank: 264
score: 98.91219075520833
patch: return val 1 * val 1 * 0 . 1 ;
rank: 264
score: 98.84660200639205
patch: return 0 1 ; case 0 : return 0 ;
rank: 264
score: 98.83102416992188
patch: long val 1 = 0 ; return 0 ;
rank: 264
score: 98.82283325195313
patch: return Double == 0 ? 0 : 0 ;
rank: 264
score: 98.78506033761161
patch: return - 1 ; return - 1 ; return - val 1 ;
rank: 265
score: 99.04978590745192
patch: return Integer . parse CaMeL Int ( - val $NUMBER$ 1 ;
rank: 265
score: 99.0007080078125
patch: result = - 1 ; return - 1 ;
rank: 265
score: 98.94413248697917
patch: return - Integer . value CaMeL Of ( val 1 ;
rank: 265
score: 98.93180338541667
patch: return - val 1 ; * ? return - 1 ;
rank: 265
score: 98.91211615668402
patch: return 0 ? 0 : - 1 ;
rank: 265
score: 98.84647827148437
patch: return Math . Double ( val 1 ) ;
rank: 265
score: 98.82215576171875
patch: return false ; case 1 : return 0 ;
rank: 265
score: 98.78305053710938
patch: return - 1 ; return $NUMBER$ ;
rank: 265
score: 98.76653180803571
patch: return val 1 . double CaMeL Value ( ) + val $NUMBER$ ;
rank: 266
score: 99.04952298677884
patch: return Double . parse CaMeL Double ( - val 1 1 ;
rank: 266
score: 98.9994784268466
patch: return Math . abs ( - val $NUMBER$ ) ;
rank: 266
score: 98.9440185546875
patch: return - $NUMBER$ 1 * - val 1 ;
rank: 266
score: 98.9303311434659
patch: return - 1 ; val 1 + val 1 ;
rank: 266
score: 98.829736328125
patch: return 0 long val 1 * val 1 ;
rank: 266
score: 98.822021484375
patch: return val 1 ? $STRING$ : $STRING$ ;
rank: 266
score: 98.78243314302884
patch: return ( - val 1 1 ; return - val 1 ;
rank: 266
score: 98.76491292317708
patch: return - val 1 ? val $NUMBER$ : val 1 ;
rank: 267
score: 99.04949481670673
patch: return - Integer . value CaMeL Of ( - 1 ) ;
rank: 267
score: 98.99883563701923
patch: return Long . value CaMeL Of ( val 1 1 1 ;
rank: 267
score: 98.94388427734376
patch: return - 0 1 ; return - 1 ;
rank: 267
score: 98.92963201349431
patch: return - val 1 ; - 1 ; / /
rank: 267
score: 98.84568481445312
patch: return 0 * case 0 : return 0 ;
rank: 267
score: 98.8297119140625
patch: return 0 long val 1 * val $NUMBER$ ;
rank: 267
score: 98.8215576171875
patch: return - - $NUMBER$ ? 0 : 0 ;
rank: 267
score: 98.78223595252403
patch: return - 1 ; val 1 { - - val 1 ;
rank: 268
score: 98.99868774414062
patch: return val 1 / val 1 ;
rank: 268
score: 98.94384765625
patch: return - $NUMBER$ ; / * return - 1 ;
rank: 268
score: 98.92947048611111
patch: return - - 0 ; - 1 ;
rank: 268
score: 98.90994698660714
patch: return val 1 . safe CaMeL Multiply ( val 1 , 0 ;
rank: 268
score: 98.84528142755681
patch: return false ; case 0 : return - 1 ;
rank: 268
score: 98.8294677734375
patch: return - val 1 * + val 1 ;
rank: 268
score: 98.82090065696023
patch: return ( val 1 * - val $NUMBER$ ) ;
rank: 268
score: 98.7821044921875
patch: return - $NUMBER$ ; val 1 {
rank: 268
score: 98.76309640066964
patch: return val 1 . long CaMeL Value ( ) ? val 1 ;
rank: 269
score: 98.99840291341145
patch: return $NUMBER$ ; case 1 : return - val 1 ;
rank: 269
score: 98.92933485243056
patch: return - 1 ; - $NUMBER$ ; ;
rank: 269
score: 98.84469943576389
patch: return val 1 * 0 * 0 ;
rank: 269
score: 98.82941228693181
patch: return - 1 ; case $NUMBER$ : return 0 ;
rank: 269
score: 98.82017933238636
patch: throw new Arithmetic CaMeL Exception ( $STRING$ + val $NUMBER$
rank: 269
score: 98.78193010602679
patch: return val 1 ; System ;
rank: 270
score: 98.94279341264205
patch: return - 1 - - - - val 1 ;
rank: 270
score: 98.92763264973958
patch: return - 1 ; ; - 0 :
rank: 270
score: 98.90966796875
patch: return - 0 ? 0 : - val 1 ;
rank: 270
score: 98.82823486328125
patch: return - ( val 1 & $NUMBER$ ) ;
rank: 270
score: 98.81978759765624
patch: case 1 : case 1 : return 0 ;
rank: 270
score: 98.78086500901442
patch: return - val 1 ; return - val 1 ; * /
rank: 270
score: 98.76284790039062
patch: return safe CaMeL Multiply ( val $NUMBER$ , false ) ;
rank: 271
score: 98.99766031901042
patch: if ( val 1 < 0 ) return val 1 ;
rank: 271
score: 98.94268188476562
patch: return - $NUMBER$ ; else return - $NUMBER$ ;
rank: 271
score: 98.90833333333333
patch: throw new Arithmetic CaMeL Exception ( $STRING$ + 0 + val 1 ) ;
rank: 271
score: 98.8443603515625
patch: return 1 ; case 0 : return - 1 ;
rank: 271
score: 98.82699584960938
patch: return Integer . max ( val 1 ) ;
rank: 271
score: 98.7625732421875
patch: return - ( val $NUMBER$ * val $NUMBER$ ) ;
rank: 272
score: 98.9970703125
patch: return Math . min ( - val 1 , val 1 ) ;
rank: 272
score: 98.9263583096591
patch: return - - val 1 ; ; - 1 ;
rank: 272
score: 98.82656028053977
patch: return - val 1 * val 1 * 1 ;
rank: 272
score: 98.78035736083984
patch: return - val 1 ; / ?
rank: 273
score: 99.04734497070312
patch: return val 1 | - - val 1 ;
rank: 273
score: 98.92629172585227
patch: return - 1 ; return 0 ; - 1 ;
rank: 273
score: 98.90790666852679
patch: throw new Arithmetic CaMeL Exception ( $STRING$ + val 1 + ) ;
rank: 273
score: 98.8439208984375
patch: return - val 1 * 0 . 1 ;
rank: 273
score: 98.81880187988281
patch: return - 0 + val 1 ;
rank: 273
score: 98.77904256184895
patch: return val 1 ; return val 1 ; - 1 ;
rank: 273
score: 98.76214599609375
patch: return val 1 . long CaMeL Value ( ) ; }
rank: 274
score: 99.04605102539062
patch: return - val $NUMBER$ ; case - 1 :
rank: 274
score: 98.99644978841145
patch: return - Long . parse CaMeL Int ( val 1 ;
rank: 274
score: 98.92610307173295
patch: return - 1 ; - 1 ; val 1 {
rank: 274
score: 98.84370640345982
patch: return $NUMBER$ * - 1 ;
rank: 274
score: 98.8179043856534
patch: return ( - 1 ) ? 1 : 0 ;
rank: 274
score: 98.77796349158653
patch: return - val 1 ; - 1 / / val 1 ;
rank: 275
score: 99.04570978338069
patch: return - ( val 1 & - val 1 ;
rank: 275
score: 98.99639423076923
patch: return - val 1 ; case $NUMBER$ : return val $NUMBER$ ;
rank: 275
score: 98.92609405517578
patch: return - 1 ; - 0 ;
rank: 275
score: 98.84324951171875
patch: case 0 : return 0 * val 1 ;
rank: 275
score: 98.8247782389323
patch: switch ( 0 ) { case 0 : return 0 ;
rank: 275
score: 98.8174161044034
patch: return val 1 * val 1 + val $NUMBER$ ;
rank: 275
score: 98.77781168619792
patch: return true ; val 1 { return - val 1 ;
rank: 275
score: 98.75931222098214
patch: return val 1 . double CaMeL Value ( ) ; case 0 :
rank: 276
score: 99.04561673677884
patch: return Long . value CaMeL Of ( - - val 1 ;
rank: 276
score: 98.9403076171875
patch: return - 1 1 ; } return - $NUMBER$ ;
rank: 276
score: 98.92568969726562
patch: return - val 1 ; - - 1 ; * ;
rank: 276
score: 98.90624060997597
patch: return val 1 . append ( $STRING$ + val 1 ) ;
rank: 276
score: 98.82423909505208
patch: return - val 1 * - 1 * val 1 ;
rank: 276
score: 98.77723106971153
patch: return - 1 ; * / { return - val 1 ;
rank: 276
score: 98.75897216796875
patch: return safe CaMeL Multiply ( val $NUMBER$ , $STRING$ ) ;
rank: 277
score: 99.04541954627403
patch: return Integer . value CaMeL Of ( val 1 1 ) ;
rank: 277
score: 98.99596150716145
patch: return Math . abs ( val 1 + val 1 ;
rank: 277
score: 98.92561479048295
patch: return - val 1 ; - 1 + 1 ;
rank: 277
score: 98.90617065429687
patch: return - val 1 ? 1 : $NUMBER$ ;
rank: 277
score: 98.8415860262784
patch: return - 1 ; case 0 : return $STRING$ ;
rank: 277
score: 98.82316080729167
patch: return - val 1 ; case 0 : return 1 ;
rank: 277
score: 98.77672400841347
patch: return - 1 ; / / / / / val 1 ;
rank: 278
score: 99.04420166015625
patch: return - ( val 1 & - 1 ;
rank: 278
score: 98.9952901204427
patch: return Integer . parse CaMeL Int ( val 1 1 ;
rank: 278
score: 98.94017333984375
patch: return - $NUMBER$ ; return - 1 1 ;
rank: 278
score: 98.92493614783653
patch: return - val 1 ; 0 ; return - val 1 ;
rank: 278
score: 98.90504557291666
patch: throw new Arithmetic CaMeL Exception ( $STRING$ + val 1 . start ) ;
rank: 278
score: 98.84124200994319
patch: return 0 ; case - 1 : return 1 ;
rank: 278
score: 98.8229092684659
patch: return val 1 + val 1 * val $NUMBER$ ;
rank: 278
score: 98.77601975661058
patch: return - 1 ; return val 1 ; return - 1 ;
rank: 279
score: 99.04392496744792
patch: return Long . parse CaMeL Double ( - 1 ) ;
rank: 279
score: 98.94013006036931
patch: return - 1 1 ; return - val 1 ;
rank: 279
score: 98.92453835227273
patch: return - val 1 ; while - val 1 ;
rank: 279
score: 98.84123091264205
patch: return - 1 ; case 0 : return false ;
rank: 279
score: 98.77574811662946
patch: return - val 1 ; return - val 1 ; - 1 ;
rank: 279
score: 98.75588553292411
patch: return safe CaMeL Multiply ( val 1 , Math . 0 ) ;
rank: 280
score: 99.04386393229167
patch: return Math . max ( - 1 , - 1 ;
rank: 280
score: 98.99476114908855
patch: return Math . min ( - val 1 , 1 ;
rank: 280
score: 98.9400390625
patch: return - val $NUMBER$ ; return val 1 ;
rank: 280
score: 98.92444864908855
patch: return - 1 ; - 1 ; case - 1 :
rank: 280
score: 98.84115600585938
patch: return 0 * 0 * 0 ;
rank: 280
score: 98.81708984375
patch: return Math == 0 ? 0 : 0 ;
rank: 280
score: 98.77444223257211
patch: return - 1 ; break ; - 1 + val 1 ;
rank: 281
score: 99.04354095458984
patch: return Integer . MIN _ VALUE ;
rank: 281
score: 98.99412841796875
patch: / * return - val 1 ; * /
rank: 281
score: 98.92359415690105
patch: return - 1 ; - 1 ; ; - 1 ;
rank: 281
score: 98.840087890625
patch: return - ( val $NUMBER$ * val 1 ) ;
rank: 281
score: 98.77330603966347
patch: return - val 1 ; return val 1 ; - 1 ;
rank: 282
score: 98.92234971788194
patch: return - 1 ; ; * ; ;
rank: 282
score: 98.90288899739583
patch: return val 1 . safe CaMeL Multiply ( 0 , - 1 ) ;
rank: 282
score: 98.83941650390625
patch: return Integer . ( val 1 ) ;
rank: 282
score: 98.81625705295139
patch: return new long ( val $NUMBER$ ) ;
rank: 282
score: 98.77311706542969
patch: return - 1 - val 1 ;
rank: 282
score: 98.7552020733173
patch: double val $NUMBER$ = safe CaMeL Multiply ( val $NUMBER$ ) ;
rank: 283
score: 99.04285346137152
patch: return val 1 - - val $NUMBER$ ;
rank: 283
score: 98.99288940429688
patch: return 1 ; case 1 : return - val 1 ;
rank: 283
score: 98.92223103841145
patch: return - val 1 ; 0 * ; - 1 ;
rank: 283
score: 98.90218912760416
patch: return val 1 . safe CaMeL Multiply ( - val 1 1 ) ;
rank: 283
score: 98.83868408203125
patch: return ( val 1 * val $NUMBER$ ;
rank: 283
score: 98.8223368326823
patch: long val 1 = val 1 ; return val 1 ;
rank: 283
score: 98.81555786132813
patch: return Integer == 0 ? 0 : 0 ;
rank: 283
score: 98.77046421595982
patch: return val 1 ; val 1 { return - - val 1 ;
rank: 283
score: 98.75392503004808
patch: return val 1 ; safe CaMeL Multiply ( val 1 ) ;
rank: 284
score: 98.99216715494792
patch: return - Long . parse CaMeL Long ( val 1 ;
rank: 284
score: 98.93941921657986
patch: return - 1 ; else return 0 ;
rank: 284
score: 98.92218017578125
patch: return val 1 ; ; - 1 ;
rank: 284
score: 98.83848876953125
patch: return 0 ; case 1 : return true ;
rank: 284
score: 98.82221013849431
patch: return value 1 * val 1 * val $NUMBER$ ;
rank: 284
score: 98.76876126802884
patch: return - 1 ; - 1 * / return val 1 ;
rank: 285
score: 98.99213256835938
patch: return - val $NUMBER$ ; ; case 1 :
rank: 285
score: 98.92132013494319
patch: return - 1 ; value * - val 1 ;
rank: 285
score: 98.90107865767045
patch: return - 1 ? 0 : - val 1 ;
rank: 285
score: 98.83835177951389
patch: return new Float ( val 1 ) ;
rank: 285
score: 98.82189331054687
patch: return - - 1 * - val 1 ;
rank: 285
score: 98.81473999023437
patch: return Math != 0 ? 0 : 0 ;
rank: 285
score: 98.7686538696289
patch: return - val 1 ; this ;
rank: 285
score: 98.75338745117188
patch: return val 1 == 0 ? 0 : val 1 ;
rank: 286
score: 99.0426776592548
patch: return Math . max ( - 1 , - val 1 ;
rank: 286
score: 98.91926713423295
patch: return - val 1 ; - - 1 ; ;
rank: 286
score: 98.9010009765625
patch: throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ + val $NUMBER$ ,
rank: 286
score: 98.83751331676136
patch: return val 1 ; case 0 : return $NUMBER$ ;
rank: 286
score: 98.82147216796875
patch: return ( val 1 + val 1 ;
rank: 286
score: 98.81379838423295
patch: case 1 : return val 1 * val $NUMBER$ ;
rank: 286
score: 98.76862041766827
patch: return - val 1 ; return val 1 / val 1 ;
rank: 286
score: 98.75330200195313
patch: return ( ( float ) val $NUMBER$ ) ;
rank: 287
score: 99.0414569561298
patch: return Boolean . value CaMeL Of ( val 1 ) . ;
rank: 287
score: 98.93897094726563
patch: return - val 1 + - - 1 ;
rank: 287
score: 98.91925518329327
patch: return - 1 ; return - 1 ; ; - 1 ;
rank: 287
score: 98.83658854166667
patch: return 0 * - $NUMBER$ * 0 ;
rank: 287
score: 98.82120768229167
patch: if ( val $NUMBER$ != 0 ) { return 0 ;
rank: 287
score: 98.81364610460069
patch: return - 0 ? 1 : 0 ;
rank: 287
score: 98.76764385516827
patch: return - 1 ; / / * / return - 1 ;
rank: 287
score: 98.75307888454861
patch: return val $NUMBER$ * - val $NUMBER$ ;
rank: 288
score: 99.04084916548295
patch: return Integer . parse CaMeL Int ( val $NUMBER$ ;
rank: 288
score: 98.93848334418402
patch: return 0 + - - val 1 ;
rank: 288
score: 98.91924493963069
patch: return - val 1 ; case - 1 : {
rank: 288
score: 98.9004638671875
patch: return val 1 * val 1 * $NUMBER$ ;
rank: 288
score: 98.8363037109375
patch: return true ; case - 1 : return 0 ;
rank: 288
score: 98.820751953125
patch: return ( ( Object ) val 1 ) ;
rank: 288
score: 98.813037109375
patch: return $NUMBER$ ; case $NUMBER$ : return 0 ;
rank: 288
score: 98.76755934495192
patch: return - val 1 ; - 1 / / / / /
rank: 288
score: 98.75291090745192
patch: return ( Long ) safe CaMeL Multiply ( val 1 ) ;
rank: 289
score: 98.9898212139423
patch: return Double . value CaMeL Of ( val 1 1 1 ;
rank: 289
score: 98.93844265407986
patch: return - Integer . MIN _ VALUE ;
rank: 289
score: 98.91854519314236
patch: return - $STRING$ ; return - 1 ;
rank: 289
score: 98.83589477539063
patch: return ( val 1 >> - 1 ) ;
rank: 289
score: 98.82020152698864
patch: return - 1 * val $NUMBER$ * val $NUMBER$ ;
rank: 289
score: 98.75278542258523
patch: long val 1 = val $NUMBER$ * val $NUMBER$ ;
rank: 290
score: 99.04019165039062
patch: throw new Illegal CaMeL Argument CaMeL Exception ( 1 1 ;
rank: 290
score: 98.9889803799716
patch: return val 1 & - 1 ; case 1 :
rank: 290
score: 98.93837280273438
patch: if return - 1 ; return - 1 ;
rank: 290
score: 98.91755676269531
patch: return $STRING$ ; return - 1 ;
rank: 290
score: 98.89992850167411
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ + val 1 ,
rank: 290
score: 98.81986490885417
patch: return - val $NUMBER$ * val 1 * val 1 ;
rank: 290
score: 98.76358235677084
patch: return - val 1 ; - val 1 : return - val 1 ;
rank: 290
score: 98.75274188701923
patch: long val $NUMBER$ = safe CaMeL Multiply ( val $NUMBER$ ) ;
rank: 291
score: 98.91660378196023
patch: return - $NUMBER$ ; else return - val 1 ;
rank: 291
score: 98.89969889322917
patch: return val 1 . safe CaMeL Multiply ( $NUMBER$ ) ;
rank: 291
score: 98.81943581321023
patch: return ( new Integer ( val 1 ) ) ;
rank: 291
score: 98.81198952414773
patch: case 1 : case 1 : return val 1 ;
rank: 292
score: 98.91598510742188
patch: return val 1 ; val 1 = - val 1 ;
rank: 292
score: 98.83460693359375
patch: return val 1 * - $NUMBER$ * 0 ;
rank: 292
score: 98.81941528320313
patch: return - val 1 * ( val 1 ;
rank: 292
score: 98.81197509765624
patch: return long == - 1 : return 0 ;
rank: 292
score: 98.75138033353366
patch: return safe CaMeL Multiply ( ( float ) val 1 ) ;
rank: 293
score: 99.03903198242188
patch: return val 1 - - - val $NUMBER$ ;
rank: 293
score: 98.98830740792411
patch: return Math . abs ( - val 1 ) ; case 1 :
rank: 293
score: 98.91593424479167
patch: return - $NUMBER$ ; try { return - val 1 ;
rank: 293
score: 98.83401828342014
patch: case - $NUMBER$ : return - 1 ;
rank: 293
score: 98.81937662760417
patch: if ( val 1 == - 1 ) return 0 ;
rank: 293
score: 98.811767578125
patch: - 1 : return - val 1 ;
rank: 293
score: 98.76166643415179
patch: return - val 1 ; val 1 return - - val 1 ;
rank: 293
score: 98.751220703125
patch: return safe CaMeL Multiply ( val 1 * val 1 ) ;
rank: 294
score: 99.03810424804688
patch: return - ( val 1 - val 1 ;
rank: 294
score: 98.93768865411931
patch: return - $NUMBER$ ; } else return - 1 ;
rank: 294
score: 98.91590294471153
patch: return - - val 1 ; else return - val 1 ;
rank: 294
score: 98.8192647298177
patch: return - val $NUMBER$ ; case 0 : return 0 ;
rank: 294
score: 98.81125895182292
patch: return new long 0 - val 1 ;
rank: 294
score: 98.76072474888393
patch: return - 1 ; / /
rank: 294
score: 98.75089518229167
patch: return val 1 . max ( ) ;
rank: 295
score: 98.83378770616319
patch: return Integer ? - 1 : 0 ;
rank: 295
score: 98.75896747295673
patch: return - 1 ; return - 1 ; - val 1 ;
rank: 296
score: 99.03591918945312
patch: return val 1 ; default : return 0 ;
rank: 296
score: 98.98771449497768
patch: return Long . value CaMeL Of ( val 1 1 1 ) ;
rank: 296
score: 98.93682861328125
patch: return - $NUMBER$ + - - - $NUMBER$ ;
rank: 296
score: 98.9150860126202
patch: return - val 1 ; 1 : return - val 1 ;
rank: 296
score: 98.89866638183594
patch: return 0 ; else return 0 ;
rank: 296
score: 98.81838989257812
patch: if ( val $NUMBER$ != val 1 ) return 0 ;
rank: 296
score: 98.75867462158203
patch: return - val 1 ; / *
rank: 296
score: 98.75025177001953
patch: return val 1 && val $NUMBER$ ;
rank: 297
score: 99.03538004557292
patch: return Long . parse CaMeL Double ( val $NUMBER$ ) ;
rank: 297
score: 98.9876708984375
patch: return Math . abs ( val 1 ; case 1 :
rank: 297
score: 98.91508345170455
patch: return 0 ; val 1 + - val 1 ;
rank: 297
score: 98.81805419921875
patch: return Integer . length ( val 1 ) ;
rank: 297
score: 98.81083540482955
patch: return val 1 ? 1 : - val $NUMBER$ ;
rank: 297
score: 98.75754957932692
patch: return - 1 ; val 1 { return - 1 ; }
rank: 297
score: 98.7501690204327
patch: return safe CaMeL Multiply ( val 1 + val $NUMBER$ ) ;
rank: 298
score: 98.98726981026786
patch: sb . append ( val 1 ) ; break ; case 1 :
rank: 298
score: 98.93643798828126
patch: return 0 ? - $NUMBER$ : - 1 ;
rank: 298
score: 98.91459517045455
patch: return - val 1 ; 0 ? val 1 :
rank: 298
score: 98.89720662434895
patch: return - val 1 . safe CaMeL Multiply ( ) ;
rank: 298
score: 98.83133951822917
patch: case - $NUMBER$ : return val 1 ;
rank: 298
score: 98.81004987444196
patch: return Math + val 1 ;
rank: 298
score: 98.74974907769098
patch: return - val 1 && val $NUMBER$ ;
rank: 299
score: 99.03533935546875
patch: return Long . - ( val 1 * val 1 ;
rank: 299
score: 98.9355712890625
patch: return val $NUMBER$ ; } return - 1 ;
rank: 299
score: 98.91445090553977
patch: return - val 1 ; 0 return val 1 ;
rank: 299
score: 98.7563007061298
patch: return - 1 ; val $NUMBER$ { return - val 1 ;
rank: 299
score: 98.74947415865384
patch: return safe CaMeL Multiply ( ( double ) val $NUMBER$ ) ;
rank: 300
score: 99.03511868990384
patch: return Integer . Na CaMeL N ? - 1 : 0 ;
rank: 300
score: 98.98366970486111
patch: return - 1 ; ; case 1 :
rank: 300
score: 98.93552856445312
patch: return - val $NUMBER$ ; return - $NUMBER$ ;
rank: 300
score: 98.91444905598958
patch: if return - val 1 ; return - val 1 ;
rank: 300
score: 98.80877007378473
patch: case 1 : return - - 1 ;
rank: 300
score: 98.75615985576923
patch: return - 1 ; return - val 1 + val 1 ;
rank: 300
score: 98.74855550130208
patch: return val 1 ? - val 1 : val $NUMBER$ ;
rank: 301
score: 98.93515625
patch: return - - $NUMBER$ ; return - 1 ;
rank: 301
score: 98.91417439778645
patch: return 0 ; val 1 ; return - val 1 ;
rank: 301
score: 98.75486403245192
patch: return - val 1 ; val 1 / 0 / 1 ;
rank: 301
score: 98.74825710720486
patch: return ( float ) - val 1 ;
rank: 302
score: 98.98268479567308
patch: return Math . ; case 1 : return - val 1 ;
rank: 302
score: 98.91412908380681
patch: return - $NUMBER$ ; return - - val 1 ;
rank: 302
score: 98.89506225585937
patch: return val 1 ? 1 : - 1 ;
rank: 302
score: 98.82765891335227
patch: return 0 ; case 0 : return 0 ; }
rank: 302
score: 98.80827192826705
patch: return false ; case 1 : return val 1 ;
rank: 302
score: 98.75462928185097
patch: return - 1 ; / * / return - val 1 ;
rank: 302
score: 98.74813842773438
patch: return safe CaMeL Multiply ( val 1 , null ) ;
rank: 303
score: 98.98258150540866
patch: return - 1 ; ; case 1 : return - 1 ;
rank: 303
score: 98.93499145507812
patch: return - $NUMBER$ ; if return - 1 ;
rank: 303
score: 98.89451497395834
patch: throw new Arithmetic CaMeL Exception ( $STRING$ + val 1 , 0 ) ;
rank: 303
score: 98.82761452414773
patch: return val 1 ; case 0 : return $STRING$ ;
rank: 303
score: 98.81609497070312
patch: return - ( 1 + val 1 ) ;
rank: 303
score: 98.75455416165866
patch: return - val 1 ; - 1 / - - 1 ;
rank: 303
score: 98.74795968191964
patch: return val 1 . long CaMeL Value ( ) / val 1 ;
rank: 304
score: 98.98248845880681
patch: return Math . Na CaMeL N ; case 1 :
rank: 304
score: 98.93488905164931
patch: return 0 1 * - val 1 ;
rank: 304
score: 98.9136962890625
patch: return - val 1 ; / ? return - val 1 ;
rank: 304
score: 98.8936258951823
patch: return val 1 . case $NUMBER$ : return val 1 ;
rank: 304
score: 98.82752685546875
patch: return - ( 0 + val $NUMBER$ ) ;
rank: 304
score: 98.81547037760417
patch: return 0 ; case - 1 : return - 1 ;
rank: 304
score: 98.80581665039062
patch: return 0 ? 1 : - val 1 ;
rank: 304
score: 98.75415910993304
patch: return - - 1 ; val 1 { return - val 1 ;
rank: 304
score: 98.7477518717448
patch: return safe CaMeL Multiply ( val $NUMBER$ , true ) ;
rank: 305
score: 98.93466186523438
patch: return - val 1 ; } return 0 ;
rank: 305
score: 98.91363525390625
patch: return - val 1 ; 0 : return - 1 ;
rank: 305
score: 98.8935546875
patch: return $NUMBER$ ? val 1 : val 1 ;
rank: 305
score: 98.82655164930556
patch: return 0 * 0 + val 1 ;
rank: 305
score: 98.80524291992188
patch: throw safe CaMeL Multiply ( val 1 ) ;
rank: 305
score: 98.75405649038461
patch: return - val 1 ; break ; val 1 / 1 ;
rank: 305
score: 98.7473614032452
patch: return safe CaMeL Multiply ( val 1 ) ; case 1 :
rank: 306
score: 99.03409517728366
patch: return Integer . value CaMeL Of ( - val $NUMBER$ 1 ;
rank: 306
score: 98.93462524414062
patch: return - 1 ; } else return null ;
rank: 306
score: 98.91355202414773
patch: return - val 1 ; 0 - val 1 ;
rank: 306
score: 98.89331993689903
patch: throw new Arithmetic CaMeL Exception ( $STRING$ + - $NUMBER$ ) ;
rank: 306
score: 98.80497602982955
patch: return - case 1 : return - val 1 ;
rank: 306
score: 98.75344613882211
patch: return - val 1 ; for - 1 : - 1 ;
rank: 306
score: 98.74671349158653
patch: long val 1 = safe CaMeL Multiply ( val 1 ) ;
rank: 307
score: 98.913330078125
patch: return - val 1 ; * - val 1 ;
rank: 307
score: 98.89258626302083
patch: return val 1 . safe CaMeL Multiply ( 1 , - 1 ) ;
rank: 307
score: 98.82466264204545
patch: return case - 1 : return - val 1 ;
rank: 307
score: 98.804443359375
patch: case val 1 : return val 1 ;
rank: 307
score: 98.74637545072116
patch: return Long . max ( val 1 , val $NUMBER$ ) ;
rank: 308
score: 98.9811542217548
patch: return Math . max ( val $NUMBER$ , val 1 ) ;
rank: 308
score: 98.93369362571023
patch: return - val 1 + - - val $NUMBER$ ;
rank: 308
score: 98.91281467013889
patch: return - 1 ; 1 * * ;
rank: 308
score: 98.82429643110795
patch: return 0 * ( 0 + val 1 ) ;
rank: 308
score: 98.81438598632812
patch: else return - val 1 * val 1 ;
rank: 308
score: 98.80439897017045
patch: return value 1 ; case 1 : return 0 ;
rank: 308
score: 98.75196838378906
patch: return - $NUMBER$ ; return 1 ;
rank: 309
score: 99.03281813401442
patch: return - Double . Na CaMeL N ? 1 : 0 ;
rank: 309
score: 98.98015887920673
patch: return Math . max ( - val 1 , val 1 ;
rank: 309
score: 98.9329833984375
patch: return 0 ; } else { return - 1 ;
rank: 309
score: 98.9127530184659
patch: return - val 1 ; 0 ; - 1 *
rank: 309
score: 98.81400756835937
patch: break ; case 1 : return - 1 ;
rank: 309
score: 98.80419243706598
patch: return safe CaMeL Multiply ( 0 ) ;
rank: 309
score: 98.75150240384616
patch: return - 1 ; return - val 1 - val 1 ;
rank: 310
score: 98.97969563802083
patch: if ( val 1 == Double . MIN _ VALUE ;
rank: 310
score: 98.91201443142361
patch: return val 1 ; - 1 ; ;
rank: 310
score: 98.89163818359376
patch: return - 0 ? 0 : - 0 ;
rank: 310
score: 98.80410427517361
patch: return ( val 1 * $NUMBER$ ) ;
rank: 310
score: 98.7500751201923
patch: return 0 ; val 1 { return - - val 1 ;
rank: 311
score: 98.97944779829545
patch: return - val 1 ; default : throw new ;
rank: 311
score: 98.93174050071023
patch: return Double . value CaMeL Of ( val 1 ;
rank: 311
score: 98.91117350260417
patch: if 0 ; return - val 1 ;
rank: 311
score: 98.89079066685268
patch: return val 1 . safe CaMeL Multiply ( val 1 ) ; ;
rank: 311
score: 98.82074584960938
patch: return new long 1 ( val 1 ) ;
rank: 311
score: 98.80375840928819
patch: return ( - 1 ) * 0 ;
rank: 311
score: 98.74904087611607
patch: return - 1 ; - 1 * / return - val 1 ;
rank: 311
score: 98.74344889322917
patch: return ( - - val 1 ) ;
rank: 312
score: 99.03118426983173
patch: return Double . parse CaMeL Double ( - val $NUMBER$ ) ;
rank: 312
score: 98.97920445033482
patch: return Math . min ( val 1 , val 1 1 ) ;
rank: 312
score: 98.91061197916666
patch: return - val 1 ; case - 1 : return - val 1 ;
rank: 312
score: 98.89049072265625
patch: return $NUMBER$ ? - 1 : val 1 ;
rank: 312
score: 98.81993272569444
patch: throw new Double ( val 1 ) ;
rank: 312
score: 98.8135986328125
patch: return - ( ( double ) val 1 ) ;
rank: 312
score: 98.7484130859375
patch: return - 1 ; break ; val 1 { return val 1 ;
rank: 312
score: 98.74285016741071
patch: return safe CaMeL Multiply ( val 1 , Long . $NUMBER$ ) ;
rank: 313
score: 98.97871907552083
patch: return Double . value CaMeL Of ( val 1 1 ;
rank: 313
score: 98.93147786458333
patch: return val $NUMBER$ ; return - $NUMBER$ ;
rank: 313
score: 98.8902587890625
patch: return 0 ? - val 1 : val 1 ;
rank: 313
score: 98.81324259440105
patch: result = val 1 * val $NUMBER$ * val $NUMBER$ ;
rank: 313
score: 98.74836077008929
patch: return - val 1 ; return - val 1 + val 1 ;
rank: 313
score: 98.74144744873047
patch: return ( int ) - 1 ;
rank: 314
score: 99.02956136067708
patch: return - val 1 ? $NUMBER$ : - val 1 ;
rank: 314
score: 98.93135209517045
patch: return - 0 ? - 1 : - 1 ;
rank: 314
score: 98.91035970052083
patch: return - 0 ; - val 1 ;
rank: 314
score: 98.88992513020834
patch: return val 1 . safe CaMeL Multiply ( val 1 , false ) ;
rank: 314
score: 98.80285034179687
patch: return - this ? 0 : val 1 ;
rank: 314
score: 98.74822528545673
patch: return - val 1 ; val $NUMBER$ { return val 1 ;
rank: 315
score: 99.029052734375
patch: return Long . parse CaMeL Int ( val $NUMBER$ ;
rank: 315
score: 98.97819380326705
patch: throw new ; case 1 : return - 1 ;
rank: 315
score: 98.93107466264205
patch: return - $NUMBER$ ; - 1 : return 1 ;
rank: 315
score: 98.90992320667614
patch: return - val 1 ; value return val 1 ;
rank: 315
score: 98.88970336914062
patch: return 0 ; case 0 : return val 1
rank: 315
score: 98.81851959228516
patch: return Boolean . - val 1 ;
rank: 315
score: 98.81187855113636
patch: return - ( val 1 / val 1 ) ;
rank: 315
score: 98.80260620117187
patch: return Integer == 0 ? 1 : 0 ;
rank: 315
score: 98.74658203125
patch: return - 1 ; break ; val 1 { return - val 1 ;
rank: 316
score: 99.02898700420673
patch: return - Double . Na CaMeL N ? $NUMBER$ : 0 ;
rank: 316
score: 98.97770690917969
patch: return val 1 & val 1 ;
rank: 316
score: 98.93082682291667
patch: return - $NUMBER$ : - val 1 ;
rank: 316
score: 98.889404296875
patch: return - val 1 ? 1 : val 1 ;
rank: 316
score: 98.81829833984375
patch: return $NUMBER$ ;
rank: 316
score: 98.80236206054687
patch: return 0 ; case 1 : return $STRING$ ;
rank: 316
score: 98.74612192007211
patch: return - 1 ; break ; return - 1 ; break ;
rank: 316
score: 98.73876014122597
patch: double val 1 = safe CaMeL Multiply ( val 1 ) ;
rank: 317
score: 99.02881798377403
patch: return Boolean . value CaMeL Of ( - val 1 ) ;
rank: 317
score: 98.97755126953125
patch: switch ( val 1 ) { case 1 :
rank: 317
score: 98.93074340820313
patch: return 0 ; * * return val 1 ;
rank: 317
score: 98.9093017578125
patch: return - $NUMBER$ ; ; - 0 ;
rank: 317
score: 98.88925606863839
patch: throw new Arithmetic CaMeL Exception ( $STRING$ + + val 1 ) ;
rank: 317
score: 98.74503871372768
patch: return - 1 ; / ;
rank: 317
score: 98.73847198486328
patch: return ( long ) - 1 ;
rank: 318
score: 99.02565511067708
patch: return - Long . - ( - val 1 ) ;
rank: 318
score: 98.97745768229167
patch: return Math . max ( 0 , - val 1 ;
rank: 318
score: 98.90926784939236
patch: return val 1 ; - - 1 ;
rank: 318
score: 98.81712646484375
patch: return case - 1 : return - 1 ;
rank: 318
score: 98.81041370738636
patch: return - 1 * val 1 * - $NUMBER$ ;
rank: 318
score: 98.7432861328125
patch: return - 1 ; return - 1 ; break ; - 1 ;
rank: 318
score: 98.7381122295673
patch: return Math . min ( val 1 , - $NUMBER$ ) ;
rank: 319
score: 98.97745455228366
patch: if ( val 1 == - 1 ) return val $NUMBER$ ;
rank: 319
score: 98.92962036132812
patch: return $NUMBER$ + - - - val 1 ;
rank: 319
score: 98.90909576416016
patch: return - 1 ; - $NUMBER$ ;
rank: 319
score: 98.88836200420673
patch: throw new Arithmetic CaMeL Exception ( val $NUMBER$ , $STRING$ ) ;
rank: 319
score: 98.81027221679688
patch: return 0 ; case 1 : return false ;
rank: 319
score: 98.80092075892857
patch: val 1 = val 1 ;
rank: 319
score: 98.74309833233173
patch: return - val 1 ; - 1 : return - 1 ;
rank: 319
score: 98.73788016183036
patch: return safe CaMeL Multiply ( val 1 , Long . 0 ) ;
rank: 320
score: 99.025634765625
patch: return Long . value CaMeL Of ( ( val 1 ;
rank: 320
score: 98.9771219889323
patch: return Double . parse CaMeL Long ( - val 1 ;
rank: 320
score: 98.92959933810764
patch: return - $NUMBER$ / - val 1 ;
rank: 320
score: 98.9089688387784
patch: return - 1 ; - 1 ; return 0 ;
rank: 320
score: 98.81590576171875
patch: return Math ? - 1 : - 1 ;
rank: 320
score: 98.74266706194196
patch: return - val 1 ; val 1 { = - val 1 ;
rank: 320
score: 98.73768028846153
patch: return val 1 ; case - $NUMBER$ : return val 1 ;
rank: 321
score: 98.97631157769098
patch: return - val 1 ; case $NUMBER$ ;
rank: 321
score: 98.90835571289062
patch: return - val 1 ; start return - val 1 ;
rank: 321
score: 98.8875732421875
patch: return 1 ? val 1 : val 1 ;
rank: 321
score: 98.80066596137152
patch: return ( val 1 + 1 ) ;
rank: 321
score: 98.74185616629464
patch: return val 1 ; if val 1 : return - val 1 ;
rank: 322
score: 99.02239990234375
patch: throw new Illegal CaMeL Argument CaMeL Exception ( val 1 ;
rank: 322
score: 98.97506009615384
patch: return val 1 ; ; case 1 : return - 1 ;
rank: 322
score: 98.90799967447917
patch: return - - 1 ; value return - val 1 ;
rank: 322
score: 98.885888671875
patch: return safe CaMeL Multiply ( val 1 , val 1 , 0 ) ;
rank: 322
score: 98.81516723632812
patch: return Math . start ( val 1 ) ;
rank: 322
score: 98.8004150390625
patch: return long != 0 ? 0 : 0 ;
rank: 322
score: 98.74117337740384
patch: return val 1 ; return - val 1 + val 1 ;
rank: 323
score: 99.02237548828126
patch: return - - Long . MAX _ VALUE ;
rank: 323
score: 98.97418682391827
patch: return - 1 ; case $NUMBER$ : return - val 1 ;
rank: 323
score: 98.90740966796875
patch: return - val 1 ; 0 ? - val 1 :
rank: 323
score: 98.8140869140625
patch: return - 0 * 0 * val 1 ;
rank: 323
score: 98.79923095703126
patch: return ( val 1 , val $NUMBER$ ) ;
rank: 323
score: 98.74032389322916
patch: return - 1 ; val 1 { return - val 1 ; break ;
rank: 323
score: 98.7369854266827
patch: return ( Double ) safe CaMeL Multiply ( val 1 ) ;
rank: 324
score: 98.97398024338942
patch: return Math . min ( val $NUMBER$ , - val 1 ;
rank: 324
score: 98.92869984019886
patch: return - $NUMBER$ ; * / return - 1 ;
rank: 324
score: 98.9071044921875
patch: return - 1 ; - 1 ; case - 1 ;
rank: 324
score: 98.88490647536058
patch: return val 1 . add ( $STRING$ + val 1 ) ;
rank: 324
score: 98.8135009765625
patch: return Math . - 1 * val 1 ;
rank: 324
score: 98.80838012695312
patch: return - val 1 * - $NUMBER$ * val 1 ;
rank: 324
score: 98.79822387695313
patch: return - $STRING$ ? - 1 : 0 ;
rank: 324
score: 98.7400371844952
patch: return - 1 ; if - 1 : return - 1 ;
rank: 324
score: 98.73667555588942
patch: return - val 1 ? - val 1 : val 1 ;
rank: 325
score: 99.02123006184895
patch: return val 1 ? - 1 : - val 1 ;
rank: 325
score: 98.97394268329327
patch: return - val $NUMBER$ ; case $NUMBER$ : return val 1 ;
rank: 325
score: 98.92846001519098
patch: return - val 1 ? - 1 ;
rank: 325
score: 98.90693803267045
patch: return - val 1 ; - 1 * ; ;
rank: 325
score: 98.80810546875
patch: return ( val 1 % val 1 ) ;
rank: 325
score: 98.798095703125
patch: case 1 : switch ( val $NUMBER$ ) {
rank: 325
score: 98.73976353236607
patch: return - 1 ; return - val 1 ; return - 1 ;
rank: 325
score: 98.73641967773438
patch: return - val $NUMBER$ * - val $NUMBER$ ;
rank: 326
score: 99.02103881835937
patch: return - val 1 || - val $NUMBER$ ;
rank: 326
score: 98.97381591796875
patch: return Math . min ( - 1 , - val 1 ) ;
rank: 326
score: 98.90684925426136
patch: return 0 ; - 1 ; return val 1 ;
rank: 326
score: 98.88436889648438
patch: return 0 ? 0 : 1 ;
rank: 326
score: 98.81319851345486
patch: return case - 1 : return 0 ;
rank: 326
score: 98.80802001953126
patch: break ; case 1 : return val 1 ;
rank: 326
score: 98.73938860212054
patch: return - val $NUMBER$ ; val 1 { return - val 1 ;
rank: 327
score: 98.9281893643466
patch: return 0 ; - 1 : return - 1 ;
rank: 327
score: 98.90669080946181
patch: return - 1 ; - 1 1 ;
rank: 327
score: 98.88407389322917
patch: throw new Arithmetic CaMeL Exception ( $STRING$ + val 1 )
rank: 327
score: 98.81293402777777
patch: return case 0 : return val 1 ;
rank: 327
score: 98.73924909319196
patch: return - 1 ; val 1 { return - 1 ; break ;
rank: 327
score: 98.73622824928977
patch: return safe CaMeL Multiply ( val $NUMBER$ ) ; }
rank: 328
score: 99.02017211914062
patch: return Double . Na CaMeL N ? 1 : 0 ;
rank: 328
score: 98.92796630859375
patch: return - $NUMBER$ ? 1 : val 1 ;
rank: 328
score: 98.90667724609375
patch: return - 1 ; ; - 1 ?
rank: 328
score: 98.88396809895833
patch: return val 1 . safe CaMeL Multiply ( val 1 * 0 ) ;
rank: 328
score: 98.81236572265625
patch: return 0 ; case $STRING$ : return 0 ;
rank: 328
score: 98.79734497070312
patch: return - 1 ? 0 : - 1 ;
rank: 328
score: 98.73919208233173
patch: return - 1 ; equals - 1 : return - 1 ;
rank: 328
score: 98.73590959821429
patch: return safe CaMeL Multiply ( val 1 , Integer . 0 ) ;
rank: 329
score: 99.01998901367188
patch: return Integer . value CaMeL Of ( - 1 1 ;
rank: 329
score: 98.97313581194196
patch: return Math . abs ( - val 1 * val 1 ) ;
rank: 329
score: 98.90656072443181
patch: return - val 1 ; - 1 * ; /
rank: 329
score: 98.73704176682692
patch: return val 1 ; - 1 : return - val 1 ;
rank: 330
score: 99.01990685096153
patch: return Math . min ( - 1 , - val 1 ;
rank: 330
score: 98.92673746744792
patch: return Short . value CaMeL Of ( val 1 ) ;
rank: 330
score: 98.90647194602273
patch: return - $NUMBER$ ; ; return - val 1 ;
rank: 330
score: 98.79618696732955
patch: return value 1 ; case 0 : return 0 ;
rank: 330
score: 98.73691030649039
patch: return - 1 ; / / * / = - 1 ;
rank: 330
score: 98.7353271484375
patch: return super . safe CaMeL Multiply ( val 1 ) ; case 0 :
rank: 331
score: 99.01973470052083
patch: return val 1 && - val 1 ;
rank: 331
score: 98.92620849609375
patch: return Integer . equals ( - 1 , - 1 ;
rank: 331
score: 98.90641784667969
patch: return - val 1 ; * ;
rank: 331
score: 98.88323974609375
patch: return 1 ? - 1 : val 1 ;
rank: 331
score: 98.81123860677083
patch: return Math ? 0 : - 1 ;
rank: 331
score: 98.8058369954427
patch: return - val $NUMBER$ ; case 1 : return 0 ;
rank: 331
score: 98.79600219726562
patch: return ( val $NUMBER$ - val $NUMBER$ ) ;
rank: 331
score: 98.73683518629808
patch: return - 1 ; return - 1 ; max / 1 ;
rank: 331
score: 98.73518510298295
patch: double val $NUMBER$ = val 1 * val $NUMBER$ ;
rank: 332
score: 99.01962280273438
patch: return Long . parse CaMeL Double ( - val $NUMBER$ ;
rank: 332
score: 98.97211248224431
patch: return $NUMBER$ ; case $NUMBER$ : return - 1 ;
rank: 332
score: 98.92608642578125
patch: return - 1 * - - val 1 ;
rank: 332
score: 98.90606689453125
patch: return - val 1 ; / ? return - 1 ;
rank: 332
score: 98.88261195591518
patch: return 0 & val 1 ;
rank: 332
score: 98.81056043836806
patch: return case 0 : return - 1 ;
rank: 332
score: 98.8056131998698
patch: return - val 1 * val 1 * - $NUMBER$ ;
rank: 332
score: 98.79598999023438
patch: return Double == 0 ? 1 : 0 ;
rank: 332
score: 98.736083984375
patch: return - 1 ; val 1 { return - - val 1 ;
rank: 332
score: 98.73483276367188
patch: return val 1 ? val 1 : - val 1 ;
rank: 333
score: 98.92567138671875
patch: return - 1 ; return - 1 ; }
rank: 333
score: 98.90573556082589
patch: return - val 1 ; 0 * / return - val 1 ;
rank: 333
score: 98.80996704101562
patch: return new Integer ( val 1 1 ) ;
rank: 333
score: 98.795849609375
patch: return ( - val 1 ) * 0 ;
rank: 333
score: 98.73589618389423
patch: return - val 1 ; / / / / val 1 ;
rank: 333
score: 98.73458523220486
patch: return ( Long ) - val $NUMBER$ ;
rank: 334
score: 98.92566935221355
patch: return - $NUMBER$ ; } else { return - $NUMBER$ ;
rank: 334
score: 98.90571732954545
patch: return - val 1 ; - 1 ; 1 *
rank: 334
score: 98.88182721819196
patch: return 0 safe CaMeL Multiply ( val 1 , val $NUMBER$ ) ;
rank: 334
score: 98.80980224609375
patch: return 1 * - 1 * val 1 ;
rank: 334
score: 98.7957430752841
patch: return 0 ; case 0 : return - $NUMBER$ ;
rank: 334
score: 98.73536095252403
patch: return - 1 ; for - 1 : return - 1 ;
rank: 334
score: 98.73453776041667
patch: return - val 1 ? val $NUMBER$ ;
rank: 335
score: 98.97157981178977
patch: return Math . POSITIVE _ INFINITY ; case 1 :
rank: 335
score: 98.92561170789931
patch: return - 1 ; return val $NUMBER$ ;
rank: 335
score: 98.9051742553711
patch: return - 1 ; ; * ;
rank: 335
score: 98.88161057692308
patch: throw new Arithmetic CaMeL Exception ( $STRING$ + val 1 , ;
rank: 335
score: 98.7957275390625
patch: return - - 1 ? 0 : 0 ;
rank: 335
score: 98.7344501201923
patch: return - 1 ; - val 1 : return val 1 ;
rank: 336
score: 99.01795450846355
patch: return val 1 ; default : return - val $NUMBER$ ;
rank: 336
score: 98.97127075195313
patch: return 0 ; default : return - 1 ;
rank: 336
score: 98.92523871527777
patch: return - val 1 ; return $NUMBER$ ;
rank: 336
score: 98.90512084960938
patch: return - 1 ; val 1 ; return - 1 ;
rank: 336
score: 98.88147786458333
patch: return val 1 . safe CaMeL Multiply ( val $NUMBER$ , 0 ) ;
rank: 336
score: 98.80928344726563
patch: return Integer ? - 1 : - 1 ;
rank: 336
score: 98.804443359375
patch: return ( - 1 - val 1 ) ;
rank: 336
score: 98.79566192626953
patch: return - Math + val 1 ;
rank: 336
score: 98.73387799944196
patch: return val 1 . double CaMeL Value ( ) * val 1 ;
rank: 336
score: 98.73301344651442
patch: return val 1 ; val 1 { return - val $NUMBER$ ;
rank: 337
score: 98.92521158854167
patch: throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ; }
rank: 337
score: 98.90423583984375
patch: return - val 1 ; * ? return val 1 ;
rank: 337
score: 98.73379952566964
patch: return val 1 . double CaMeL Value ( ) ; case 1 :
rank: 337
score: 98.73277869591347
patch: return - 1 ; return - val 1 ; val 1 {
rank: 338
score: 98.90391956676136
patch: return - val 1 ; - 1 - 1 ;
rank: 338
score: 98.80834350585937
patch: return - 1 * $STRING$ + val $NUMBER$ ;
rank: 338
score: 98.8042236328125
patch: return max ( val 1 , 0 ) ;
rank: 338
score: 98.79557037353516
patch: case $NUMBER$ : return - 1 ;
rank: 338
score: 98.73374720982143
patch: return safe CaMeL Multiply ( val 1 , Integer . $NUMBER$ ) ;
rank: 338
score: 98.73257010323661
patch: return - val 1 ; - val 1 : return val 1 ;
rank: 339
score: 99.01737837357955
patch: return val 1 - - - - val 1 ;
rank: 339
score: 98.97088623046875
patch: return - $NUMBER$ ; case 1 : return val 1 ;
rank: 339
score: 98.92506103515625
patch: return - $NUMBER$ 1 ; else return 0 ;
rank: 339
score: 98.90376420454545
patch: return 0 ; - 1 ; - - 1 ;
rank: 339
score: 98.87977905273438
patch: return - 1 ? 0 : - 0 ;
rank: 339
score: 98.8076904296875
patch: return ( - 1 * - 1 ) ;
rank: 339
score: 98.79517711292614
patch: return new String ( $STRING$ + val 1 ) ;
rank: 339
score: 98.7337158203125
patch: if ( val 1 != val $NUMBER$ ) {
rank: 339
score: 98.7322998046875
patch: return - val 1 ; default ;
rank: 340
score: 99.0164462002841
patch: return ( val 1 & - val $NUMBER$ ) ;
rank: 340
score: 98.97053745814732
patch: return - val 1 ; ; case 1 : return val 1 ;
rank: 340
score: 98.90375518798828
patch: return val 1 ; - 1 ;
rank: 340
score: 98.80733642578124
patch: return Math . Integer ( val 1 ) ;
rank: 340
score: 98.73243543836806
patch: if ( val 1 != val $NUMBER$ )
rank: 340
score: 98.73190743582589
patch: return - 1 ; - 1 ? - 1 : - 1 ;
rank: 341
score: 99.01619779146634
patch: return - Long . MAX _ VALUE ? 0 : 0 ;
rank: 341
score: 98.96978759765625
patch: if ( - 1 >= val 1 ;
rank: 341
score: 98.92498168945312
patch: return - val 1 1 / val 1 ;
rank: 341
score: 98.9037198153409
patch: return - val 1 ; * ; - 1 ;
rank: 341
score: 98.87928466796875
patch: return 0 ? $NUMBER$ : - val 1 ;
rank: 341
score: 98.80347290039063
patch: switch ( val $NUMBER$ ) { case - 1
rank: 341
score: 98.79508056640626
patch: return - val 1 : return val 1 ;
rank: 341
score: 98.73241424560547
patch: return new long [ 0 ] ;
rank: 341
score: 98.7313232421875
patch: return - val 1 ; - 1 / / / * /
rank: 342
score: 99.01576585036058
patch: return Long . value CaMeL Of ( - 1 1 1 ;
rank: 342
score: 98.96934814453125
patch: return Math . floor ( - val 1 ;
rank: 342
score: 98.90348677201705
patch: return - - 1 ; - 1 ; ; ;
rank: 342
score: 98.87924630301339
patch: return val 1 * $NUMBER$ ;
rank: 342
score: 98.80662841796875
patch: return 0 ; case 0 : return null ;
rank: 342
score: 98.80339965820312
patch: return ; case 1 : return - 1 ;
rank: 342
score: 98.79477761008523
patch: case 1 : return val 1 * val 1 ;
rank: 342
score: 98.73226224459134
patch: return Math . max ( - 1 , val $NUMBER$ ) ;
rank: 342
score: 98.73119245256696
patch: return - 1 ; val 1
rank: 343
score: 99.01569073016827
patch: return Math . max ( - val 1 , - 1 ;
rank: 343
score: 98.9687255859375
patch: return - Math . abs ( val 1 ;
rank: 343
score: 98.90157063802083
patch: return - 1 ; 0 * * ;
rank: 343
score: 98.79379272460938
patch: case 1 : return - - val $NUMBER$ ;
rank: 343
score: 98.73190307617188
patch: return val 1 == val 1 ;
rank: 343
score: 98.73039899553571
patch: return - val 1 ; / * / return - val 1 ;
rank: 344
score: 99.01506958007812
patch: if - 1 : return - val 1 ;
rank: 344
score: 98.92412567138672
patch: return - val 1 + 1 ;
rank: 344
score: 98.8784688313802
patch: return val 1 . case 1 : return val 1 ;
rank: 344
score: 98.79298706054688
patch: return Long == 0 ? 0 : 0 ;
rank: 344
score: 98.72991536458333
patch: return val 1 ; return - val 1 ; return - val 1 ;
rank: 345
score: 99.0149658203125
patch: return ( - val 1 ) / $NUMBER$ ;
rank: 345
score: 98.96760864257813
patch: assert ( val 1 == - 1 ) ;
rank: 345
score: 98.92379150390624
patch: return - $NUMBER$ 1 ; else return 1 ;
rank: 345
score: 98.90054321289062
patch: if - 1 + val 1 ; return - 1 ;
rank: 345
score: 98.8056640625
patch: return ( 0 * val 1 ) ;
rank: 345
score: 98.80262247721355
patch: return - val 1 ; case $NUMBER$ : return 0 ;
rank: 345
score: 98.728759765625
patch: return - 1 ; return - val 1 / val 1 ;
rank: 346
score: 99.01299438476562
patch: return ( int 1 ) - val 1 ;
rank: 346
score: 98.9231201171875
patch: return - 1 ; return - $NUMBER$ 1 ;
rank: 346
score: 98.90039740668402
patch: return - 0 ; return - $NUMBER$ ;
rank: 346
score: 98.80548706054688
patch: return val 1 * val 1 * true ;
rank: 346
score: 98.7926025390625
patch: return ( 0 ) ? 0 : 0 ;
rank: 347
score: 99.01239013671875
patch: return - val 1 % - val $NUMBER$ ;
rank: 347
score: 98.96642127403847
patch: return val 1 ; case val 1 : return val 1 ;
rank: 347
score: 98.9231201171875
patch: return - 1 1 ; return val 1 ;
rank: 347
score: 98.87715657552083
patch: throw new Arithmetic CaMeL Exception ( $STRING$ + val 1 , this ) ;
rank: 347
score: 98.80541314019098
patch: return Integer ? 0 : val 1 ;
rank: 347
score: 98.80217895507812
patch: return 0 * - val 1 * 0 ;
rank: 347
score: 98.72958374023438
patch: return - val 1 ? - 1 : val $NUMBER$ ;
rank: 347
score: 98.72771747295673
patch: return - 1 ; return val 1 ; return val 1 ;
rank: 348
score: 98.96623091264205
patch: return 1 ; case $NUMBER$ : return - 1 ;
rank: 348
score: 98.92311789772727
patch: return - $NUMBER$ 1 ; } return - 1 ;
rank: 348
score: 98.89910125732422
patch: return 0 ; ; - 1 ;
rank: 348
score: 98.80496215820312
patch: return - val 1 * val 1 ; }
rank: 348
score: 98.80213012695313
patch: return 1 ; case 0 : return 1 ;
rank: 348
score: 98.79119262695312
patch: return Integer != 0 ? 0 : 0 ;
rank: 348
score: 98.72943670099431
patch: return Long . value CaMeL Of ( val 1 )
rank: 348
score: 98.72722516741071
patch: return - val 1 ; return val 1 + - val 1 ;
rank: 349
score: 99.01172553168402
patch: return val 1 % - val $NUMBER$ ;
rank: 349
score: 98.96505301339286
patch: return Math . min ( val 1 , - val $NUMBER$ ) ;
rank: 349
score: 98.92257080078124
patch: return 0 ; * / return - 1 ;
rank: 349
score: 98.89854939778645
patch: return - val 1 ; double - - val 1 ;
rank: 349
score: 98.72858135516827
patch: return Integer . max ( val 1 , val $NUMBER$ ) ;
rank: 349
score: 98.72681603064903
patch: return - val 1 ; max return - - val 1 ;
rank: 350
score: 99.01150512695312
patch: return Math . min ( - 1 , - 1 ;
rank: 350
score: 98.9650127704327
patch: return - 1 ; case 1 : return - val $NUMBER$ ;
rank: 350
score: 98.92238547585227
patch: return - $NUMBER$ * - - - val 1 ;
rank: 350
score: 98.89845106336806
patch: return - 1 ; * ; * ;
rank: 350
score: 98.87469012920673
patch: return val 1 . safe CaMeL Multiply ( $STRING$ ) ; }
rank: 350
score: 98.80150349934895
patch: if ( val $NUMBER$ != - $NUMBER$ ) return 0 ;
rank: 350
score: 98.79103306361607
patch: return new - val 1 ;
rank: 350
score: 98.72406475360577
patch: return - 1 ; val 1 { return - 1 ; else
rank: 351
score: 98.96466064453125
patch: return - val 1 ; case 1 : case 1 :
rank: 351
score: 98.89835298978366
patch: return - 1 ; ; val 1 = - val 1 ;
rank: 351
score: 98.8739013671875
patch: throw new Arithmetic CaMeL Exception String ( $STRING$ + val 1 ) ;
rank: 351
score: 98.80361328125
patch: return $NUMBER$ ; case 0 : return 1 ;
rank: 351
score: 98.79080539279514
patch: return val 1 + - val $NUMBER$ ;
rank: 351
score: 98.7282002766927
patch: return Long . value CaMeL Of ( val 1 ) {
rank: 352
score: 99.01005045572917
patch: return - Long . - val 1 ;
rank: 352
score: 98.92207475142045
patch: return 0 ; else { return - 1 ; }
rank: 352
score: 98.89834594726562
patch: return - val 1 ; case - 1 return 0 ;
rank: 352
score: 98.87301635742188
patch: return safe CaMeL Multiply ( val 1 , val 1 ;
rank: 352
score: 98.80343017578124
patch: throw new Arithmetic CaMeL Exception ( 0 ) ;
rank: 352
score: 98.80136108398438
patch: return val 1 ; case - 1 : return 0 ;
rank: 352
score: 98.72752162388393
patch: return - val 1 * safe CaMeL Multiply ( val 1 ) ;
rank: 352
score: 98.7238300030048
patch: return - 1 ; if val 1 : return val 1 ;
rank: 353
score: 99.0099209872159
patch: return - val 1 | - - val 1 ;
rank: 353
score: 98.89822048611111
patch: return - 0 ; ; - 0 ;
rank: 353
score: 98.8729960123698
patch: return safe CaMeL Multiply ( val 1 * val $NUMBER$ ;
rank: 353
score: 98.80129172585227
patch: return - val 1 * - - val 1 ;
rank: 353
score: 98.79013061523438
patch: return Integer == 1 ? 0 : 0 ;
rank: 353
score: 98.72746930803571
patch: return safe CaMeL Multiply ( val $NUMBER$ , - val $NUMBER$ ) ;
rank: 353
score: 98.72364044189453
patch: return - val 1 ; val 1 { return - val 1 ; break ;
rank: 354
score: 98.96417846679688
patch: return 1 ; case 1 : return 1 ;
rank: 354
score: 98.9209696451823
patch: return - val 1 ; return - - val $NUMBER$ ;
rank: 354
score: 98.87235884232955
patch: return 0 ? val 1 : - val $NUMBER$ ;
rank: 354
score: 98.80127563476563
patch: return ; case 0 : return - 1 ;
rank: 354
score: 98.80048370361328
patch: return abs ( val 1 ) ;
rank: 354
score: 98.72719029017857
patch: return safe CaMeL Multiply ( val 1 , 0 , 0 ) ;
rank: 354
score: 98.72308819110577
patch: return val 1 ; return - val 1 - val 1 ;
rank: 355
score: 98.96363176618304
patch: return Math . POSITIVE _ INFINITY ; case 1 : return 1 ;
rank: 355
score: 98.9205830891927
patch: return val 1 ; - 1 : return val 1 ;
rank: 355
score: 98.8974276455966
patch: return - 1 ; 1 + - val 1 ;
rank: 355
score: 98.78787841796876
patch: return true ; case $NUMBER$ : return 0 ;
rank: 355
score: 98.72259051983173
patch: return val 1 ; if val 1 : return val 1 ;
rank: 356
score: 98.92047119140625
patch: throw new Runtime CaMeL Exception ( $STRING$ ;
rank: 356
score: 98.8970947265625
patch: return - val 1 ; / ? return val 1 ;
rank: 356
score: 98.87141418457031
patch: return - val 1 * $NUMBER$ ;
rank: 356
score: 98.79999389648438
patch: return ( ( Integer ) - 1 ) ;
rank: 356
score: 98.79827880859375
patch: return ( - val 1 * val 1 ;
rank: 356
score: 98.78658447265624
patch: return - val 1 ? 0 : true ;
rank: 356
score: 98.72506009615384
patch: return safe CaMeL Multiply ( - 1 , val 1 ) ;
rank: 356
score: 98.72200230189732
patch: return - val 1 ; return - val 1 - val 1 ;
rank: 357
score: 99.00748019748264
patch: return - 1 | - val 1 ;
rank: 357
score: 98.96334402901786
patch: return - val 1 ; case - 1 : return val 1 ;
rank: 357
score: 98.8966064453125
patch: return - 1 ; - 1 ; ; * ;
rank: 357
score: 98.87139892578125
patch: return - 1 ? val 1 : 1 ;
rank: 357
score: 98.79997422960069
patch: return - 1 : - val 1 ;
rank: 357
score: 98.78650580512152
patch: return val 1 ? 0 : true ;
rank: 357
score: 98.7249755859375
patch: try { return safe CaMeL Multiply ( val 1 ) ;
rank: 357
score: 98.72180938720703
patch: return - val 1 ; return - val 1 ; return - val 1 ;
rank: 358
score: 98.96324462890625
patch: return - 1 ; case 1 : break ;
rank: 358
score: 98.91940307617188
patch: return 0 ; } else { return - val 1 ;
rank: 358
score: 98.89592950994319
patch: return - val 1 ; ; ; - 1 :
rank: 358
score: 98.87110314002403
patch: return val 1 . safe CaMeL Multiply ( 1 ) ; }
rank: 358
score: 98.79716661241319
patch: return new Short ( val 1 ) ;
rank: 358
score: 98.78641764322917
patch: return - 0 : return val 1 ;
rank: 358
score: 98.72477891710069
patch: return - ( - val $NUMBER$ ) ;
rank: 358
score: 98.72149658203125
patch: return - val 1 ; val 1 { return - - 1 ;
rank: 359
score: 98.91881214488636
patch: return - val $NUMBER$ ; return - val $NUMBER$ ;
rank: 359
score: 98.89570756392045
patch: return - val 1 ; - - val 1 :
rank: 359
score: 98.87064208984376
patch: return - 1 ? val 1 : $NUMBER$ ;
rank: 359
score: 98.79681396484375
patch: return ( 0 - val 1 ) ;
rank: 359
score: 98.78636169433594
patch: return 0 : return val 1 ;
rank: 359
score: 98.72466169084821
patch: return - val 1 . index CaMeL Of ( val $NUMBER$ ) ;
rank: 359
score: 98.72119140625
patch: return val 1 ; break ; val 1 { return - val 1 ;
rank: 360
score: 98.91794840494792
patch: return - val 1 ? - 1 : - $NUMBER$ ;
rank: 360
score: 98.89508611505681
patch: return - 1 ; 1 return - val 1 ;
rank: 360
score: 98.87013753255208
patch: return 0 ; case - $NUMBER$ : return val 1 ;
rank: 360
score: 98.79976399739583
patch: if ( val 1 != 0 ) { return 0 ;
rank: 360
score: 98.7955078125
patch: try { return - 1 * val 1 ;
rank: 360
score: 98.786328125
patch: return Long == 0 ? 1 : 0 ;
rank: 360
score: 98.7242431640625
patch: return safe CaMeL Multiply ( val 1 + val 1 ) ;
rank: 360
score: 98.72085336538461
patch: return val 1 ; return - val 1 / val 1 ;
rank: 361
score: 99.00651041666667
patch: return val 1 >> - val 1 ;
rank: 361
score: 98.962646484375
patch: return Math . max ( - val 1 , 1 ) ;
rank: 361
score: 98.9176913174716
patch: return - 1 ; } return - val $NUMBER$ ;
rank: 361
score: 98.8945645419034
patch: return - val 1 ; - 1 1 / /
rank: 361
score: 98.79969371448864
patch: return - ( val 1 & - $NUMBER$ ) ;
rank: 361
score: 98.79534912109375
patch: result = val 1 * val 1 ;
rank: 361
score: 98.78609619140624
patch: return Math == 0 ? 1 : 0 ;
rank: 361
score: 98.72068434495192
patch: return val 1 ; return - val 1 ; val 1 {
rank: 362
score: 98.9626131924716
patch: return val 1 ; val 1 = val 1 ;
rank: 362
score: 98.91724742542614
patch: return Integer . value CaMeL Of ( val $NUMBER$ ;
rank: 362
score: 98.89408365885417
patch: return - 1 ; return 0 ; - val 1 ;
rank: 362
score: 98.7991610440341
patch: if ( val 1 > 0 ) return 0 ;
rank: 362
score: 98.7953125
patch: return 0 ; - 1 : return 0 ;
rank: 362
score: 98.78559705946181
patch: return new Byte ( val 1 ) ;
rank: 362
score: 98.72312709263393
patch: return val 1 . long CaMeL Value ( ) || val 1 ;
rank: 362
score: 98.71968900240384
patch: return - val 1 ; break ; - 1 ; * /
rank: 363
score: 99.00557084517045
patch: return Long . parse CaMeL Int - val 1 ;
rank: 363
score: 98.86986490885417
patch: throw new Arithmetic CaMeL Exception ( $STRING$ + val 1 + 1 ) ;
rank: 363
score: 98.7991231282552
patch: result = val 1 * val 1 * val $NUMBER$ ;
rank: 363
score: 98.722900390625
patch: if ( val $NUMBER$ != val $NUMBER$ ) {
rank: 363
score: 98.71861853966347
patch: return - 1 ; * / return - 1 ; break ;
rank: 364
score: 98.96077104048295
patch: return val 1 - val 1 ; case 1 :
rank: 364
score: 98.91644841974431
patch: return - 1 ; } else return val 1 ;
rank: 364
score: 98.89338684082031
patch: return - val 1 ; 0 *
rank: 364
score: 98.79447937011719
patch: return - val 1 * true ;
rank: 364
score: 98.7228271484375
patch: return - val 1 ? - val $NUMBER$ ;
rank: 364
score: 98.7174823467548
patch: return - - 1 ; val 1 { return - 1 ;
rank: 365
score: 99.00508256392045
patch: return Double . parse CaMeL Double ( val 1 ;
rank: 365
score: 98.96049499511719
patch: return val 1 ; case 1 ;
rank: 365
score: 98.9161376953125
patch: return - $NUMBER$ ; case 1 : return - $NUMBER$ ;
rank: 365
score: 98.86930629185268
patch: return 0 - val 1 ;
rank: 365
score: 98.79435221354167
patch: return val 1 * val 1 ; }
rank: 365
score: 98.78475341796874
patch: return - $STRING$ ? val 1 : 0 ;
rank: 365
score: 98.72252739800348
patch: return val 1 . trim ( ) ;
rank: 365
score: 98.71658761160714
patch: return - val 1 ; break ; - 1 + val 1 ;
rank: 366
score: 98.96021379743304
patch: return Math . min ( - val 1 , - val 1 ;
rank: 366
score: 98.91562906901042
patch: return - $NUMBER$ - - - 1 ;
rank: 366
score: 98.89252178485577
patch: if - 1 + val 1 ; return - val 1 ;
rank: 366
score: 98.79324951171876
patch: return 1 * - $NUMBER$ * val 1 ;
rank: 366
score: 98.72245279947917
patch: return super . safe CaMeL Multiply ( val $NUMBER$ , val $NUMBER$ ) ;
rank: 366
score: 98.71603628305289
patch: return - 1 ; / ; * / return - 1 ;
rank: 367
score: 99.00435384114583
patch: return val 1 / - val $NUMBER$ ;
rank: 367
score: 98.95944448617789
patch: return Math . abs ( val 1 * - val 1 ;
rank: 367
score: 98.91554953835227
patch: return - $NUMBER$ ; - 1 : return 0 ;
rank: 367
score: 98.8924051920573
patch: return - 1 ; - 1 ; return - $NUMBER$ ;
rank: 367
score: 98.86885579427083
patch: return safe CaMeL Multiply ( val 1 , val $NUMBER$ ;
rank: 367
score: 98.79317016601563
patch: try { return val 1 * val 1 ;
rank: 367
score: 98.784375
patch: return ( val 1 << val $NUMBER$ ) ;
rank: 367
score: 98.71331787109375
patch: return - val 1 ; value 1 { return - val 1 ;
rank: 368
score: 98.95925903320312
patch: return Math . max ( - val 1 , 1 ;
rank: 368
score: 98.91513893821023
patch: return - 1 1 } return - val 1 ;
rank: 368
score: 98.86875
patch: return 0 ? - 0 : val 1 ;
rank: 368
score: 98.7839111328125
patch: return Double != 0 ? 0 : 0 ;
rank: 368
score: 98.72046837439903
patch: return safe CaMeL Multiply ( val $NUMBER$ * val $NUMBER$ ) ;
rank: 368
score: 98.71278381347656
patch: return - val 1 ; break ; val 1 { return - val 1 ;
rank: 369
score: 99.002197265625
patch: return - 1 ; default : return - 1 ; }
rank: 369
score: 98.95895821707589
patch: return - 1 ; case 1 : return Math . - 1 ;
rank: 369
score: 98.91497802734375
patch: return - 0 ; case 1 : return - 1 ;
rank: 369
score: 98.89179338727679
patch: return - 1 ; ; - 1 : return - val 1 ;
rank: 369
score: 98.78792027064732
patch: return val 1 * true ;
rank: 369
score: 98.78379991319444
patch: return - $NUMBER$ ? 1 : 0 ;
rank: 369
score: 98.71192169189453
patch: return - val 1 ; val 1 { return - - - val 1 ;
rank: 370
score: 98.95885358537946
patch: return Math . POSITIVE _ INFINITY ; case 1 : return 0 ;
rank: 370
score: 98.89111328125
patch: return - 1 ; val 1 = - 1 ;
rank: 370
score: 98.86811967329545
patch: return val 1 . safe CaMeL Multiply ( 1 ;
rank: 370
score: 98.79827880859375
patch: return val 1 * val $NUMBER$ * 1 ;
rank: 370
score: 98.78788248697917
patch: return case 1 : return val 1 ;
rank: 370
score: 98.78313446044922
patch: return - $NUMBER$ : return 0 ;
rank: 370
score: 98.71926540798611
patch: return val 1 : return val 1 ;
rank: 371
score: 99.00095825195312
patch: return - val 1 << - val $NUMBER$ ;
rank: 371
score: 98.91447143554687
patch: return - 1 + - - - 1 ;
rank: 371
score: 98.89092339409723
patch: return - 1 ; return - $STRING$ ;
rank: 371
score: 98.86810302734375
patch: return Math . case ( val 1 , val $NUMBER$ )
rank: 371
score: 98.79796142578125
patch: break ; case 0 : return - 1 ;
rank: 371
score: 98.71815842848558
patch: return safe CaMeL Multiply ( val $NUMBER$ ) ; case 0 :
rank: 371
score: 98.71041434151786
patch: return - val 1 ; return val 1 - - val 1 ;
rank: 372
score: 99.000732421875
patch: return Boolean . value CaMeL Of ( - val $NUMBER$ ;
rank: 372
score: 98.91384887695312
patch: return - $NUMBER$ + - - - - - 1 ;
rank: 372
score: 98.86792864118304
patch: throw new Arithmetic CaMeL Exception ( $STRING$ + val 1 ) ; ;
rank: 372
score: 98.7979248046875
patch: break ; case 0 : return val 1 ;
rank: 372
score: 98.7177734375
patch: return - ( val 1 / val $NUMBER$ ) ;
rank: 372
score: 98.70853678385417
patch: return - 1 ; return - val 1 ; return - val 1 ;
rank: 373
score: 99.0005594889323
patch: return - val 1 ; default : return 0 ; }
rank: 373
score: 98.95826067243304
patch: return - Long . parse CaMeL Long ( - val 1 1 ;
rank: 373
score: 98.89040305397727
patch: return - - 0 ; return - val 1 ;
rank: 373
score: 98.86757405598958
patch: return safe CaMeL Multiply ( val 1 * val 1 ;
rank: 373
score: 98.78160095214844
patch: case 1 : return - 0 ;
rank: 373
score: 98.71758563701923
patch: long val 1 = safe CaMeL Multiply ( val $NUMBER$ ) ;
rank: 373
score: 98.7064453125
patch: return - val 1 ; - 1 * / return - val 1 ;
rank: 374
score: 98.957763671875
patch: return Math . min ( val $NUMBER$ , val 1 1 ;
rank: 374
score: 98.91334117542614
patch: return - val 1 - - - val $NUMBER$ ;
rank: 374
score: 98.89009602864583
patch: return - 1 ; return 1 ; - val 1 ;
rank: 374
score: 98.866943359375
patch: return val 1 . safe CaMeL Multiply ( val 1 * val $NUMBER$ ;
rank: 374
score: 98.78290666852679
patch: return - $NUMBER$ * 0 ;
rank: 374
score: 98.78139038085938
patch: return ( val $NUMBER$ + val $NUMBER$ ) ;
rank: 374
score: 98.71731131417411
patch: return - val 1 ; case - $NUMBER$ : return val 1 ;
rank: 374
score: 98.70632498604911
patch: return - val 1 ; return - val 1 / val 1 ;
rank: 375
score: 98.99979654947917
patch: return Double . parse CaMeL Int ( - val 1 ;
rank: 375
score: 98.9576885516827
patch: return Math . max ( 0 , - val 1 ) ;
rank: 375
score: 98.91326904296875
patch: return - 1 - - - val $NUMBER$ ;
rank: 375
score: 98.88983154296875
patch: return - val 1 ; 0 - - val 1 ;
rank: 375
score: 98.86693725585937
patch: return 0 ? - 1 : val $NUMBER$ ;
rank: 375
score: 98.79749755859375
patch: return ( 0 long ) - val 1 ;
rank: 375
score: 98.71707153320312
patch: return - val 1 . max ;
rank: 375
score: 98.70420619419643
patch: return - 1 ; return val 1 ; return - val 1 ;
rank: 376
score: 98.99821333451705
patch: return Boolean . value CaMeL Of ( val 1 ;
rank: 376
score: 98.9130126953125
patch: return 1 ? - 1 : - 1 ;
rank: 376
score: 98.79738362630208
patch: switch ( 0 ) { case 1 : return 0 ;
rank: 376
score: 98.78217424665179
patch: else return - val 1 ;
rank: 376
score: 98.71701882102273
patch: return ( - val 1 ) * val 1 ;
rank: 376
score: 98.70391845703125
patch: return - val 1 ; break ; else return - val 1 ;
rank: 377
score: 98.99644886363636
patch: return - val 1 ; case - 1 : ;
rank: 377
score: 98.78097534179688
patch: return val 1 ; }
rank: 377
score: 98.77836100260417
patch: return long $NUMBER$ ? 0 : 0 ;
rank: 377
score: 98.7166748046875
patch: return val 1 ? - val $NUMBER$ ;
rank: 377
score: 98.70371791294643
patch: return val 1 ; return val 1 ; return - val 1 ;
rank: 378
score: 98.95726600060097
patch: return Math . abs ( val 1 1 * val 1 ;
rank: 378
score: 98.91249778053977
patch: return - $NUMBER$ ? - $NUMBER$ : - 1 ;
rank: 378
score: 98.86663263494319
patch: return - val 1 ? 0 : - 0 ;
rank: 378
score: 98.79538796164773
patch: return - ( val 1 * - 1 ) ;
rank: 378
score: 98.77742222377232
patch: case $NUMBER$ : return 0 ;
rank: 378
score: 98.71642303466797
patch: return ( double ) val $NUMBER$ ;
rank: 378
score: 98.7034912109375
patch: return - val 1 ; ; * / return - val 1 ;
rank: 379
score: 98.99510498046875
patch: return val 1 1 * - val 1 ;
rank: 379
score: 98.95716094970703
patch: return - 1 ; case $NUMBER$ :
rank: 379
score: 98.91242065429688
patch: return - Integer . equals - val 1 ;
rank: 379
score: 98.8884610262784
patch: return - val 1 ; - - val 1 ;
rank: 379
score: 98.78030056423611
patch: return ( val 1 >> 1 ) ;
rank: 379
score: 98.7158203125
patch: return val 1 . long CaMeL Value ( ) ? val $NUMBER$ ;
rank: 379
score: 98.70058768136161
patch: return - 1 ; / / * / return - val 1 ;
rank: 380
score: 98.9947842684659
patch: return val 1 ; } return - val 1 ;
rank: 380
score: 98.95704956054688
patch: return val 1 ; default : throw new ;
rank: 380
score: 98.9122314453125
patch: return - 1 1 ; else return val $NUMBER$ ;
rank: 380
score: 98.8878925030048
patch: return - 1 ; val 1 ; return - val 1 ;
rank: 380
score: 98.8662578876202
patch: throw new Arithmetic CaMeL Exception ( 1 , val 1 ) ;
rank: 380
score: 98.79478870738636
patch: return val 1 * val $NUMBER$ * - $NUMBER$ ;
rank: 380
score: 98.77719116210938
patch: return 0 ? 1 : 0 ;
rank: 380
score: 98.71568080357143
patch: return val 1 . long CaMeL Value ( ) * val $NUMBER$ ;
rank: 380
score: 98.70028250558036
patch: return - val 1 ; val 1 { - - val 1 ;
rank: 381
score: 98.95692795973558
patch: return - val $NUMBER$ ; case $NUMBER$ : return - 1 ;
rank: 381
score: 98.88775165264423
patch: return - val 1 ; - 1 ; return val 1 ;
rank: 381
score: 98.86624348958334
patch: throw new Arithmetic CaMeL Exception ( $STRING$ + val 1 , $NUMBER$ ) ;
rank: 381
score: 98.79409790039062
patch: return val 1 * - val 1 * val $NUMBER$ ;
rank: 381
score: 98.7794189453125
patch: result = val 1 * val $NUMBER$ ;
rank: 381
score: 98.7156005859375
patch: return val 1 ? 1 : val $NUMBER$ ;
rank: 381
score: 98.69857352120536
patch: return - val 1 ; return - - val 1 ; break ;
rank: 382
score: 98.99351501464844
patch: return Long . - val 1 ;
rank: 382
score: 98.95681326729911
patch: return Math . min ( val 1 , val $NUMBER$ 1 ) ;
rank: 382
score: 98.91202218191964
patch: return - $NUMBER$ 1 1 ;
rank: 382
score: 98.88735622829861
patch: return - 0 ; ; - 1 :
rank: 382
score: 98.77556016710069
patch: return new Long ( val $NUMBER$ ) ;
rank: 382
score: 98.69768880208333
patch: return - val 1 ; return val 1 ; return - val 1 ;
rank: 383
score: 98.99223327636719
patch: return Integer . MAX _ VALUE ;
rank: 383
score: 98.95658052884616
patch: return val 1 ; case - 1 : return - 1 ;
rank: 383
score: 98.88705444335938
patch: return - 1 ; return 0 ; ; - 1 ;
rank: 383
score: 98.77689615885417
patch: return ( val 1 / val 1 ;
rank: 383
score: 98.7740478515625
patch: return ( val 1 , val 1 ) ;
rank: 383
score: 98.69737897600446
patch: return - val 1 ; - $NUMBER$ : return - val 1 ;
rank: 384
score: 98.95640211838942
patch: return - Long . parse CaMeL Int ( val 1 1 ;
rank: 384
score: 98.91119995117188
patch: return 0 ; else return - 1 1 ;
rank: 384
score: 98.88670518663194
patch: return - 1 ; for - 1 ;
rank: 384
score: 98.86566569010417
patch: return - val 1 . safe CaMeL Multiply ( 1 , 0 ) ;
rank: 384
score: 98.79289106889205
patch: return val $NUMBER$ * val $NUMBER$ * val 1 ;
rank: 384
score: 98.77377755301339
patch: return Integer + val 1 ;
rank: 384
score: 98.71448692908653
patch: long safe CaMeL Multiply ( val 1 , val $NUMBER$ ) ;
rank: 384
score: 98.69733537946429
patch: return - 1 ; return - val 1 ; return val 1 ;
rank: 385
score: 98.99126519097223
patch: return val 1 << - val $NUMBER$ ;
rank: 385
score: 98.95602651742789
patch: return Math . round ( val 1 * val 1 ) ;
rank: 385
score: 98.91083984375
patch: return val 1 ; else return val 1 ;
rank: 385
score: 98.77255859375
patch: return 0 ; case ] : return 0 ;
rank: 385
score: 98.71355329241071
patch: return Math . max ( - val 1 , val $NUMBER$ ) ;
rank: 385
score: 98.6957295735677
patch: return val 1 ; try
rank: 386
score: 98.91053263346355
patch: return Integer . value CaMeL Of ( - - 1 ;
rank: 386
score: 98.8853251139323
patch: return 0 ; return - 1 ; - - 1 ;
rank: 386
score: 98.8651123046875
patch: return 0 ; case 1 : return 0 . $NUMBER$ ;
rank: 386
score: 98.7923812866211
patch: return - val 1 * false ;
rank: 386
score: 98.77268473307292
patch: return case 1 : return - 1 ;
rank: 386
score: 98.77178955078125
patch: return Math + - val 1 ;
rank: 386
score: 98.71348571777344
patch: if ( val 1 != 0 )
rank: 386
score: 98.69535609654018
patch: return val 1 ; break ; val 1 { return val 1 ;
rank: 387
score: 98.98883056640625
patch: return val 1 * - val 1 ; ;
rank: 387
score: 98.95534104567308
patch: return - 1 ; case - 1 : return val 1 ;
rank: 387
score: 98.88531024639423
patch: return - - 1 ; try { return - val 1 ;
rank: 387
score: 98.77122802734375
patch: return - val 1 ? 0 : $STRING$ ;
rank: 387
score: 98.77113850911458
patch: try { switch ( val 1 ) {
rank: 387
score: 98.71272495814732
patch: return val 1 . double CaMeL Value ( ) ? val 1 ;
rank: 387
score: 98.69478062220982
patch: return - val 1 ; return - val 1 ; / 1 ;
rank: 388
score: 98.98630981445312
patch: return val 1 1 & - val 1 ;
rank: 388
score: 98.90961371527777
patch: return - $NUMBER$ * - val $NUMBER$ ;
rank: 388
score: 98.88530939275569
patch: return - - val 1 ; - 1 ; ;
rank: 388
score: 98.79214477539062
patch: return - 1 * 1 * val $NUMBER$ ;
rank: 388
score: 98.77108764648438
patch: return Integer . - val 1 ;
rank: 388
score: 98.71258544921875
patch: double val 1 = val $NUMBER$ ;
rank: 388
score: 98.69385637555804
patch: return val 1 ; - val 1 : return - val 1 ;
rank: 389
score: 98.95516263521634
patch: return Math . abs ( val 1 / val 1 ) ;
rank: 389
score: 98.8845723470052
patch: if - 1 + - 1 ; return - 1 ;
rank: 389
score: 98.77003987630208
patch: return val 1 ? 0 : $STRING$ ;
rank: 389
score: 98.76841227213542
patch: result = val 1 ;
rank: 389
score: 98.71199798583984
patch: double val $NUMBER$ = val $NUMBER$ ;
rank: 389
score: 98.69322858537946
patch: return - 1 ; - val 1 : return - val 1 ;
rank: 390
score: 98.98546006944444
patch: return val 1 ^ - val $NUMBER$ ;
rank: 390
score: 98.95487154447116
patch: return - Math . min ( val 1 , val 1 ;
rank: 390
score: 98.90897993607955
patch: return - val 1 ? 0 : - 1 ;
rank: 390
score: 98.8834561434659
patch: return - val 1 ; 0 - val 1 :
rank: 390
score: 98.86461791992187
patch: return val 1 ? $STRING$ : val 1 ;
rank: 390
score: 98.76896158854167
patch: return - Double . - val 1 ;
rank: 390
score: 98.76829020182292
patch: throw ( Arithmetic CaMeL Exception ) null ;
rank: 390
score: 98.71183638139205
patch: double val 1 = val 1 * val $NUMBER$ ;
rank: 390
score: 98.69295247395833
patch: return - 1 ; max
rank: 391
score: 98.98532104492188
patch: return Long . value CaMeL Of ( - val 1 )
rank: 391
score: 98.95485432942708
patch: return val $NUMBER$ ; case $NUMBER$ : return val 1 ;
rank: 391
score: 98.908837890625
patch: return - val 1 - - - 1 ;
rank: 391
score: 98.88264973958333
patch: return - 0 ; try { return - val 1 ;
rank: 391
score: 98.76798502604167
patch: safe CaMeL Multiply ( val $NUMBER$ ) ;
rank: 391
score: 98.76698303222656
patch: return $STRING$ ;
rank: 391
score: 98.71010335286458
patch: return ( return - val 1 ) ;
rank: 391
score: 98.69141496930804
patch: return val 1 ; return - val 1 ; return val 1 ;
rank: 392
score: 98.98530717329545
patch: return - ( val 1 & - val $NUMBER$ ;
rank: 392
score: 98.95464215959821
patch: return - Long . parse CaMeL Int ( - val 1 1 ;
rank: 392
score: 98.9087422688802
patch: return - $NUMBER$ - - - - - val 1 ;
rank: 392
score: 98.88173421223958
patch: return - - 1 ; else return - val 1 ;
rank: 392
score: 98.86438927283653
patch: return 0 ; case - 1 : return - val 1 ;
rank: 392
score: 98.79144287109375
patch: return - 1 . 1 ;
rank: 392
score: 98.76763237847223
patch: return - case 1 : return 0 ;
rank: 392
score: 98.76573350694444
patch: return Double . ( val 1 ) ;
rank: 392
score: 98.71007622612848
patch: return - val 1 == val $NUMBER$ ;
rank: 392
score: 98.69106619698661
patch: return 0 ; val 1 {
rank: 393
score: 98.98518880208333
patch: return - ( val 1 & - val $NUMBER$ ) ;
rank: 393
score: 98.90841674804688
patch: return - $NUMBER$ ; - 1 : return - $NUMBER$ ;
rank: 393
score: 98.88165838068181
patch: return - val 1 ; ; - 1 : ;
rank: 393
score: 98.79042053222656
patch: return 1 * - val 1 ;
rank: 393
score: 98.70999581473214
patch: return safe CaMeL Multiply ( val 1 , Double . Long ) ;
rank: 394
score: 98.98514811197917
patch: return Long . - ( val 1 - val 1 ;
rank: 394
score: 98.95377197265626
patch: return - val 1 ; ; case $NUMBER$ :
rank: 394
score: 98.9082539876302
patch: return - $NUMBER$ ; - 1 : return val 1 ;
rank: 394
score: 98.88128107244319
patch: return val 1 ; - 1 + val 1 ;
rank: 394
score: 98.79025268554688
patch: return - val 1 * - 1 * val $NUMBER$ ;
rank: 394
score: 98.70865572415866
patch: return Math . min ( val $NUMBER$ , val $NUMBER$ ) ;
rank: 395
score: 98.98466661241319
patch: return - Double . Na CaMeL N ;
rank: 395
score: 98.95349993024554
patch: return - val $NUMBER$ ; case 1 : return - val $NUMBER$ ;
rank: 395
score: 98.90819202769886
patch: return - val 1 : return - val 1 ;
rank: 395
score: 98.76344299316406
patch: return - 0 * - 1 ;
rank: 395
score: 98.7085189819336
patch: int val 1 = val 1 ;
rank: 395
score: 98.68670654296875
patch: return - 1 ; / / / / / / val 1 ;
rank: 396
score: 98.98452758789062
patch: return val $NUMBER$ ; default : return - val 1 ;
rank: 396
score: 98.95348249162946
patch: return Math . max ( - val 1 , val 1 ) ;
rank: 396
score: 98.90794542100694
patch: return - val 1 + - 1 ;
rank: 396
score: 98.88049994574652
patch: return - 1 ; ; - $NUMBER$ :
rank: 396
score: 98.78992716471355
patch: if ( val 1 > 0 ) return val 1 ;
rank: 396
score: 98.76329210069444
patch: return Integer ? 0 : - 1 ;
rank: 396
score: 98.70851487379808
patch: return - val 1 == 0 ? 0 : val 1 ;
rank: 396
score: 98.68596540178571
patch: return - val 1 ; - 1 * / return val 1 ;
rank: 397
score: 98.98402913411458
patch: return Long . value CaMeL Of ( val 1 ; ;
rank: 397
score: 98.90792410714286
patch: return - val $NUMBER$ 1 ;
rank: 397
score: 98.86224920099431
patch: return 0 ; case 1 : return 0 ; }
rank: 397
score: 98.78977272727273
patch: switch ( val $NUMBER$ ) { case - 1 ;
rank: 397
score: 98.68458775111607
patch: return - val 1 ; - 1 + val 1 / 1 ;
rank: 398
score: 98.95316859654018
patch: return Math . max ( val 1 , val 1 1 ) ;
rank: 398
score: 98.90760387073864
patch: return - 1 1 * - - val 1 ;
rank: 398
score: 98.88020833333333
patch: return - 1 ; return 0 ; return - 1 ;
rank: 398
score: 98.86148274739584
patch: return val 1 . safe CaMeL Multiply ( val 1 , val $NUMBER$ ;
rank: 398
score: 98.78888549804688
patch: return ; case 1 : return val 1 ;
rank: 398
score: 98.76433454241071
patch: return $STRING$ + val 1 ;
rank: 398
score: 98.7078857421875
patch: return ( val 1 safe CaMeL Multiply ( val $NUMBER$ ) ) ;
rank: 398
score: 98.68445638020833
patch: return - val 1 ; for - 1 : return - val 1 ;
rank: 399
score: 98.98257446289062
patch: return Long . - ( - val 1 ;
rank: 399
score: 98.95274000901442
patch: return 0 . 0 ; case 1 : return - 1 ;
rank: 399
score: 98.87992037259616
patch: return 0 ; return - 1 ; return - val 1 ;
rank: 399
score: 98.76413981119792
patch: return val 1 ? 0 : false ;
rank: 399
score: 98.76183319091797
patch: return case 0 : return 0 ;
rank: 399
score: 98.70766977163461
patch: return ( Number ) safe CaMeL Multiply ( val 1 ) ;
rank: 399
score: 98.68430001395089
patch: return - val 1 ; val 1 { return val 1 ; }
rank: 400
score: 98.90703125
patch: return - 1 1 ; return - $NUMBER$ ;
rank: 400
score: 98.87992037259616
patch: return - val 1 ; value : return - val 1 ;
rank: 400
score: 98.861376953125
patch: return - 0 ? val 1 : 1 ;
rank: 400
score: 98.78769938151042
patch: return - - 1 ; case 0 : return 0 ;
rank: 400
score: 98.76408555772569
patch: return - - $STRING$ + val 1 ;
rank: 400
score: 98.76132202148438
patch: case - $NUMBER$ : return 0 ;
rank: 400
score: 98.68414306640625
patch: return - 1 ; / / * / = - val 1 ;
rank: 401
score: 98.9817782315341
patch: return - Math . ceil ( val 1 ) ;
rank: 401
score: 98.9525615985577
patch: return - Long . parse CaMeL Long ( val 1 1 ;
rank: 401
score: 98.87989637586806
patch: return 0 ; - - val 1 ;
rank: 401
score: 98.861376953125
patch: throw new Arithmetic CaMeL Exception ( $STRING$ + val 1 ) ; } }
rank: 401
score: 98.78760375976563
patch: return - ( val 1 * 0 ) ;
rank: 401
score: 98.76117621527777
patch: return 1 * 0 * val 1 ;
rank: 401
score: 98.70688302176339
patch: return Math . max ( val 1 , - val $NUMBER$ ) ;
rank: 401
score: 98.68366350446429
patch: return - 1 ; return - 1 ; val 1 / 1 ;
rank: 402
score: 98.97965087890626
patch: throw new Illegal CaMeL Argument CaMeL Exception ( ;
rank: 402
score: 98.95241135817308
patch: return Math . round ( val 1 ) ; case 1 :
rank: 402
score: 98.87987171519886
patch: return - val 1 ; 0 + - 1 ;
rank: 402
score: 98.76350911458333
patch: return - Math . - val 1 ;
rank: 402
score: 98.76043701171875
patch: throw ( $STRING$ + val 1 ) ;
rank: 402
score: 98.70687161959134
patch: return Double . max ( val 1 , val $NUMBER$ ) ;
rank: 402
score: 98.68363734654018
patch: return - 1 ; val 1 { return - val 1 ; }
rank: 403
score: 98.97941450639205
patch: return Long . parse CaMeL Long - val 1 ;
rank: 403
score: 98.95226178850446
patch: return Math . min ( val 1 , - val $NUMBER$ 1 ;
rank: 403
score: 98.90578206380208
patch: return - $NUMBER$ + - - - - val $NUMBER$ ;
rank: 403
score: 98.87966579861111
patch: return - 1 ; while val 1 ;
rank: 403
score: 98.86124093191964
patch: return val 1 * 1 ;
rank: 403
score: 98.78736572265625
patch: result = - val 1 * val $NUMBER$ ;
rank: 403
score: 98.76205783420139
patch: return - this ? 0 : 0 ;
rank: 403
score: 98.75907389322917
patch: return Long ? - 1 : 0 ;
rank: 403
score: 98.70576782226563
patch: return - val 1 ? - val 1 ;
rank: 403
score: 98.68297467912946
patch: return - val 1 ; - 1 * / return - 1 ;
rank: 404
score: 98.95208185369319
patch: return - val 1 ; default : return 1 ;
rank: 404
score: 98.90544128417969
patch: return - $NUMBER$ + - 1 ;
rank: 404
score: 98.7873291015625
patch: return 1 * val $NUMBER$ * val 1 ;
rank: 404
score: 98.76059977213542
patch: return val 1 ? 0 : null ;
rank: 404
score: 98.75861273871527
patch: return ( 0 / val 1 ) ;
rank: 404
score: 98.70572916666667
patch: return ( - val 1 ) . - val $NUMBER$ ;
rank: 404
score: 98.68221609933036
patch: return - val 1 ; - val 1 / 0 / 1 ;
rank: 405
score: 98.9776611328125
patch: return Long . abs ( - val 1 ) ;
rank: 405
score: 98.87932477678571
patch: return - val 1 ; ; - 1 return - val 1 ;
rank: 405
score: 98.78694458007813
patch: return ; case 0 : return val 1 ;
rank: 405
score: 98.76034206814236
patch: return ( val 1 , 0 ) ;
rank: 405
score: 98.75381130642361
patch: return - 1 * val 1 ; }
rank: 405
score: 98.68168422154018
patch: return - 1 ; return - 1 ; else return - 1 ;
rank: 406
score: 98.97674560546875
patch: return Math . min ( 0 , - val 1 ;
rank: 406
score: 98.90482584635417
patch: return - 1 + - - - - val 1 ;
rank: 406
score: 98.87898472377232
patch: return - val 1 ; - val 1 return - val 1 ;
rank: 406
score: 98.75959995814732
patch: return ( - $NUMBER$ ) ;
rank: 406
score: 98.75344848632812
patch: return - $NUMBER$ * val $NUMBER$ ;
rank: 406
score: 98.70553823617789
patch: return super . safe CaMeL Multiply ( val 1 ) ; }
rank: 406
score: 98.68136160714286
patch: return - 1 ; if val 1 : return - val 1 ;
rank: 407
score: 98.97659912109376
patch: return - val $NUMBER$ - - val 1 ;
rank: 407
score: 98.95078822544643
patch: return Long . parse CaMeL Int ( - val 1 ) ; ;
rank: 407
score: 98.90479278564453
patch: return - 0 + - 1 ;
rank: 407
score: 98.8789813701923
patch: return - 1 ; ; - 0 : return - 1 ;
rank: 407
score: 98.85924072265625
patch: return - 0 ? val 1 : $NUMBER$ ;
rank: 407
score: 98.75643157958984
patch: return value 1 * val 1 ;
rank: 407
score: 98.70525653545673
patch: return - 1 ; case 0 : return - val 1 ;
rank: 407
score: 98.68100411551339
patch: return - val 1 ; return - val 1 ; val 1 {
rank: 408
score: 98.95068359375
patch: return - val 1 ; default : return val $NUMBER$ ;
rank: 408
score: 98.90468343098958
patch: return - val 1 ; - 1 : return 0 ;
rank: 408
score: 98.8789774576823
patch: return - val 1 ; val 1 { return true ;
rank: 408
score: 98.85858764648438
patch: return $NUMBER$ ? 0 : - val 1 ;
rank: 408
score: 98.75511169433594
patch: return $STRING$ ? 0 : 0 ;
rank: 408
score: 98.75291224888393
patch: return 1 * - 1 ;
rank: 408
score: 98.70490373883929
patch: return safe CaMeL Multiply ( val $NUMBER$ , - val 1 ) ;
rank: 408
score: 98.68007986886161
patch: return - val 1 ; return - val 1 ; return 1 ;
rank: 409
score: 98.97586669921876
patch: return - val 1 >> - val 1 ;
rank: 409
score: 98.95037841796875
patch: return Math . min ( val $NUMBER$ , - val 1 ) ;
rank: 409
score: 98.90467834472656
patch: return $NUMBER$ * - val 1 ;
rank: 409
score: 98.87824164496527
patch: return 0 ; - - 1 1 ;
rank: 409
score: 98.85768821022727
patch: return - val 1 ? $NUMBER$ : val 1 ;
rank: 409
score: 98.75495062934027
patch: return val 1 . length ( ) ;
rank: 409
score: 98.74883270263672
patch: return false ;
rank: 409
score: 98.70442708333333
patch: return val $NUMBER$ ; case 0 : return val $NUMBER$ ;
rank: 409
score: 98.67869466145834
patch: return - val 1 ; return - val 1 ; return val 1 ;
rank: 410
score: 98.97581990559895
patch: return - 1 ? - 1 : - val 1 ;
rank: 410
score: 98.9503173828125
patch: return val $NUMBER$ ; case $NUMBER$ : return - 1 ;
rank: 410
score: 98.90429077148437
patch: return - 1 ; else return val $NUMBER$ ;
rank: 410
score: 98.78578694661458
patch: return - $NUMBER$ ; case 0 : return val 1 ;
rank: 410
score: 98.67824009486607
patch: return - 1 ; - 1 + val 1 + val 1 ;
rank: 411
score: 98.97528839111328
patch: return Double . MAX _ VALUE ;
rank: 411
score: 98.94990678267045
patch: if ( val 1 ; else return val 1 ;
rank: 411
score: 98.85724283854167
patch: return val 1 . safe CaMeL Multiply ( val 1 , val 1 ;
rank: 411
score: 98.78565470377605
patch: return - 0 ; case 1 : return val 1 ;
rank: 411
score: 98.75399441189236
patch: return - Math + - val 1 ;
rank: 411
score: 98.74691009521484
patch: return val $NUMBER$ * - 1 ;
rank: 411
score: 98.7039794921875
patch: return val 1 ? val 1 : - val $NUMBER$ ;
rank: 411
score: 98.67782389322916
patch: return - val 1 ; - 1 : return - - val 1 ;
rank: 412
score: 98.97508655894886
patch: throw new Illegal CaMeL Argument CaMeL Exception ( 1 ;
rank: 412
score: 98.94944932725694
patch: return Math . ceil ( val 1 ;
rank: 412
score: 98.90348815917969
patch: return 1 + - val 1 ;
rank: 412
score: 98.87729220920139
patch: return - 1 ; ; - 1 *
rank: 412
score: 98.85714111328124
patch: return val 1 ? val $NUMBER$ : 1 ;
rank: 412
score: 98.78541870117188
patch: switch ( val 1 ) { case - 1
rank: 412
score: 98.74624294704861
patch: return 0 * $STRING$ + val $NUMBER$ ;
rank: 412
score: 98.70391845703125
patch: return ( val 1 ) * val 1 ;
rank: 412
score: 98.676025390625
patch: return - val 1 ; break ; val 1 { return val 1 ;
rank: 413
score: 98.94874924879808
patch: return Math . round ( - val 1 * val 1 ;
rank: 413
score: 98.9029541015625
patch: return val 1 1 - - val 1 ;
rank: 413
score: 98.87700737847223
patch: if - 1 ? return - 1 ;
rank: 413
score: 98.752685546875
patch: return - 0 ? $NUMBER$ : 0 ;
rank: 413
score: 98.67334798177083
patch: return val 1 ; val 1 { return - val 1 ; break ;
rank: 414
score: 98.97501831054687
patch: return ( val 1 * - val 1 ;
rank: 414
score: 98.94868977864583
patch: return - - 1 ; case 1 :
rank: 414
score: 98.9027432528409
patch: return - 1 ; - 1 : return $NUMBER$ ;
rank: 414
score: 98.85590006510417
patch: return val $NUMBER$ . safe CaMeL Multiply ( val 1 , 0 ) ;
rank: 414
score: 98.75225151909723
patch: return ( val 1 - 0 ) ;
rank: 414
score: 98.74408637152777
patch: return ( 0 + val $NUMBER$ ) ;
rank: 414
score: 98.7035381610577
patch: return val 1 ; safe CaMeL Multiply ( val $NUMBER$ ) ;
rank: 414
score: 98.67236328125
patch: return - val 1 ; return - val 1 ; / - 1 ;
rank: 415
score: 98.90183327414773
patch: return - 1 ; if ; return - 1 ;
rank: 415
score: 98.87669372558594
patch: return - val 1 ; try {
rank: 415
score: 98.85582885742187
patch: return 0 ? - $NUMBER$ : val 1 ;
rank: 415
score: 98.78461248224431
patch: return - val 1 * val 1 * $NUMBER$ ;
rank: 415
score: 98.74195692274306
patch: return ( val 1 - val 1 ;
rank: 415
score: 98.67226736886161
patch: return - val 1 ; abs 1 { return - val 1 ;
rank: 416
score: 98.9017822265625
patch: return 0 ; else { return val 1 ;
rank: 416
score: 98.8766377766927
patch: return - val 1 ; try { return val 1 ;
rank: 416
score: 98.85577392578125
patch: return 0 ? $NUMBER$ : 0 ;
rank: 416
score: 98.7510757446289
patch: return new long - val 1 ;
rank: 416
score: 98.74148559570312
patch: return - val 1 * $STRING$ ;
rank: 416
score: 98.70344761439732
patch: return ( val 1 safe CaMeL Multiply ( val 1 ) ) ;
rank: 416
score: 98.67159598214286
patch: return - 1 ; return - 1 + - - val 1 ;
rank: 417
score: 98.90145263671874
patch: return - $NUMBER$ ; * return - 1 ;
rank: 417
score: 98.8756103515625
patch: return - val 1 ; value - - val 1 ;
rank: 417
score: 98.7841463955966
patch: long val 1 = 0 ; return val 1 ;
rank: 417
score: 98.7401123046875
patch: return $NUMBER$ * $STRING$ + val 1 ;
rank: 417
score: 98.70326063368056
patch: float val $NUMBER$ = - val 1 ;
rank: 417
score: 98.67005208333333
patch: return - val 1 ; val 1 { else return - val 1 ;
rank: 418
score: 98.90103149414062
patch: return - $NUMBER$ ? val 1 : 1 ;
rank: 418
score: 98.87489827473958
patch: return - val 1 ; 0 ; return - 1 ;
rank: 418
score: 98.78301239013672
patch: return 0 * - val $NUMBER$ ;
rank: 418
score: 98.70320638020833
patch: return ( val 1 ) ? 0 : val 1 ;
rank: 418
score: 98.66994222005208
patch: return max val 1 ;
rank: 419
score: 98.97247314453125
patch: switch - 1 : return - val 1 ;
rank: 419
score: 98.94640003551136
patch: return val 1 ; default : return val $NUMBER$ ;
rank: 419
score: 98.90081232244319
patch: return - val 1 ; return - - $NUMBER$ ;
rank: 419
score: 98.87485758463542
patch: return - $NUMBER$ ; - 1 ; return - 1 ;
rank: 419
score: 98.85444471571181
patch: return $NUMBER$ ? 0 : val 1 ;
rank: 419
score: 98.74772813585069
patch: return - 0 : return - 1 ;
rank: 419
score: 98.66921561104911
patch: return - 1 ; if - val 1 : return - 1 ;
rank: 420
score: 98.94612339564732
patch: return - val 1 ; case - 1 : return - 1 ;
rank: 420
score: 98.90067749023437
patch: return - 0 ; } return - $NUMBER$ ;
rank: 420
score: 98.87478637695312
patch: return - 1 ; val 1 ; - - 1 ;
rank: 420
score: 98.7825927734375
patch: return - - 1 ; case 1 : return 0 ;
rank: 420
score: 98.74757893880208
patch: return value val 1 ;
rank: 420
score: 98.73682318793402
patch: return val 1 * ( val 1 ;
rank: 420
score: 98.70229867788461
patch: double val 1 = safe CaMeL Multiply ( val $NUMBER$ ) ;
rank: 420
score: 98.6686767578125
patch: return - val 1 ; val 1 { return - val 1 ; }
rank: 421
score: 98.94533865792411
patch: return Math . min ( val 1 , - val 1 1 ;
rank: 421
score: 98.90048217773438
patch: return Double . value CaMeL Of ( - - 1 ;
rank: 421
score: 98.87477805397727
patch: return - val 1 ; 1 + val 1 ;
rank: 421
score: 98.78249289772727
patch: return 0 ; case 0 : else return 0 ;
rank: 421
score: 98.74666341145833
patch: return <= 0 ? 0 : 0 ;
rank: 421
score: 98.70208740234375
patch: return val 1 . long CaMeL Value ( ) / val $NUMBER$ ;
rank: 421
score: 98.66829136439732
patch: return - val 1 ; return - 1 + - val 1 ;
rank: 422
score: 98.97011496803977
patch: return Double . abs ( - val 1 ) ;
rank: 422
score: 98.94518171037946
patch: return Math . abs ( val 1 * - val 1 ) ;
rank: 422
score: 98.89994673295455
patch: return - 1 ; } else { return 0 ;
rank: 422
score: 98.87471147017045
patch: return - val 1 ; - 1 ; ; ?
rank: 422
score: 98.85414632161458
patch: return 0 ? 0 : val 1 * val 1 ;
rank: 422
score: 98.782470703125
patch: return - ( val 1 << val 1 ) ;
rank: 422
score: 98.744873046875
patch: case 0 : return - val $NUMBER$ ;
rank: 422
score: 98.73570251464844
patch: return 0 : - val 1 ;
rank: 422
score: 98.70179748535156
patch: return ( Long ) val $NUMBER$ ;
rank: 422
score: 98.66776820591518
patch: return 0 ; val 1 { return - val 1 ; break ;
rank: 423
score: 98.94448852539062
patch: return $NUMBER$ ; case 1 : return $NUMBER$ ;
rank: 423
score: 98.89974975585938
patch: return - Integer . value CaMeL Of ( - 1 ;
rank: 423
score: 98.87462361653645
patch: return - val 1 ; length return - val 1 ;
rank: 423
score: 98.85359700520833
patch: return 0 ? - 1 : $NUMBER$ ;
rank: 423
score: 98.78238525390626
patch: return - ; case 0 : return 0 ;
rank: 423
score: 98.74374728732639
patch: return - 0 * - val 1 ;
rank: 423
score: 98.66767229352679
patch: return - < val 1 ;
rank: 424
score: 98.9444580078125
patch: return - Math . max ( val 1 , val 1 ;
rank: 424
score: 98.89952256944444
patch: return - 1 1 * val 1 ;
rank: 424
score: 98.87447781032986
patch: return - val 1 ; * / {
rank: 424
score: 98.85359700520833
patch: throw new Arithmetic CaMeL Exception ( $STRING$ + val 1 , 1 ) ;
rank: 424
score: 98.6661376953125
patch: return - 1 ; return - val 1 ; / - 1 ;
rank: 425
score: 98.96934291294643
patch: return - ( val 1 ;
rank: 425
score: 98.89921431107955
patch: return - val 1 ? 1 : - 1 ;
rank: 425
score: 98.87411499023438
patch: return 0 ; ; val 1 = - val 1 ;
rank: 425
score: 98.85358220880681
patch: return val 1 ? - 1 : - 0 ;
rank: 425
score: 98.78098366477273
patch: return - ( val 1 , - 1 ) ;
rank: 425
score: 98.74165174696181
patch: case $NUMBER$ : return - val $NUMBER$ ;
rank: 425
score: 98.73124186197917
patch: return ( val 1 >> $NUMBER$ ) ;
rank: 425
score: 98.70121256510417
patch: return val 1 || - val 1 ;
rank: 425
score: 98.66486467633929
patch: return - 1 ; for - 1 : return - val 1 ;
rank: 426
score: 98.96830749511719
patch: return val 1 | val 1 ;
rank: 426
score: 98.9429180438702
patch: return - - 1 ; case 1 : return - 1 ;
rank: 426
score: 98.8989969889323
patch: return - 1 1 } else { return - 1 ;
rank: 426
score: 98.8739725748698
patch: return - val 1 ; val 1 { return false ;
rank: 426
score: 98.8534423828125
patch: return 0 ; default : return val 1 ;
rank: 426
score: 98.78095160590277
patch: break ; case 0 : return 0 ;
rank: 426
score: 98.74102783203125
patch: return $NUMBER$ ? 0 : 0 ;
rank: 426
score: 98.7310282389323
patch: return 0 * true ;
rank: 426
score: 98.69984654017857
patch: return val 1 . int CaMeL Value ( ) ; case 0 :
rank: 426
score: 98.66385904947917
patch: return - val 1 ; if val 1 : return - val 1 ;
rank: 427
score: 98.96820068359375
patch: return val $NUMBER$ & - val 1 ;
rank: 427
score: 98.94207763671875
patch: return Math . min - val 1 ; case 1 :
rank: 427
score: 98.87378801618304
patch: return - val 1 ; * ? { return - val 1 ;
rank: 427
score: 98.78083939985795
patch: return 1 ; case - 1 : return 0 ;
rank: 427
score: 98.69962565104167
patch: return - val 1 ? 0 : - val $NUMBER$ ;
rank: 427
score: 98.66302490234375
patch: return - val 1 ; - 1 : return - val $NUMBER$ ;
rank: 428
score: 98.96724446614583
patch: return Long . value CaMeL Of ( val $NUMBER$ 1 ;
rank: 428
score: 98.89833762428977
patch: return - 1 ; * else return - 1 ;
rank: 428
score: 98.73766411675348
patch: return - Double ? 0 : 0 ;
rank: 428
score: 98.73040093315973
patch: try { switch ( val $NUMBER$ ) {
rank: 428
score: 98.6995516690341
patch: long val 1 = val 1 * val 1 ;
rank: 428
score: 98.66249302455357
patch: return - val 1 ; / / / / / val 1 ;
rank: 429
score: 98.94160970052083
patch: if ( val 1 == - 1 ;
rank: 429
score: 98.78032836914062
patch: return ( val $NUMBER$ & - 1 ) ;
rank: 429
score: 98.73701985677083
patch: return 0 ? - 0 : 0 ;
rank: 429
score: 98.66242327008929
patch: return val 1 ; return - val 1 ; return - 1 ;
rank: 430
score: 98.9664639559659
patch: return - Math . ceil ( - val 1 ;
rank: 430
score: 98.89790482954545
patch: return - $NUMBER$ + - - - - $NUMBER$ ;
rank: 430
score: 98.87322443181819
patch: return - val 1 ; substring - val 1 ;
rank: 430
score: 98.852294921875
patch: throw new Arithmetic CaMeL Exception ( $STRING$ + val 1 . TRUE ) ;
rank: 430
score: 98.73685031467014
patch: return Integer ? val 1 : 0 ;
rank: 430
score: 98.72652859157986
patch: return ( val 1 / val $NUMBER$ ;
rank: 430
score: 98.69893704927884
patch: return - val 1 ? - val $NUMBER$ : val 1 ;
rank: 430
score: 98.66241455078125
patch: return - val 1 ; - 1 / / / val 1 ;
rank: 431
score: 98.89780495383523
patch: return - val 1 ; if return - 1 ;
rank: 431
score: 98.87252807617188
patch: return - val 1 ; else { return - 1 ;
rank: 431
score: 98.8522061434659
patch: return val 1 ? val $NUMBER$ : - 1 ;
rank: 431
score: 98.77970377604167
patch: if ( val 1 != - $NUMBER$ ) return 0 ;
rank: 431
score: 98.73575168185764
patch: return new String ( val 1 ) ;
rank: 431
score: 98.69892578125
patch: return safe CaMeL Multiply ( val 1 , Math . - 1 ) ;
rank: 431
score: 98.66232735770089
patch: return - 1 ; - 1 / / / / val 1 ;
rank: 432
score: 98.96571858723958
patch: return Long . parse CaMeL Long ( val 1 ; ;
rank: 432
score: 98.94117320667614
patch: return 1 ; case $NUMBER$ : return val 1 ;
rank: 432
score: 98.89772727272727
patch: return 0 ; } else { return - $NUMBER$ ;
rank: 432
score: 98.87235884232955
patch: return - val 1 ; ; - - 1 ;
rank: 432
score: 98.85194498697916
patch: throw new Arithmetic CaMeL Exception ( name + $STRING$ + val 1 ) ;
rank: 432
score: 98.73398166232639
patch: return ( - 1 ) - 1 ;
rank: 432
score: 98.69833608774039
patch: return - val 1 ? - val 1 : val $NUMBER$ ;
rank: 432
score: 98.66196114676339
patch: return - 1 ; val 1 { - val 1 / 1 ;
rank: 433
score: 98.94078233506944
patch: return Math . round ( val 1 ;
rank: 433
score: 98.87200927734375
patch: return - val 1 ; * return - val 1 ;
rank: 433
score: 98.7305908203125
patch: return - $NUMBER$ ? 0 : 1 ;
rank: 433
score: 98.6982754794034
patch: long val $NUMBER$ = val 1 * val 1 ;
rank: 433
score: 98.66142926897321
patch: return val 1 + 1 ;
rank: 434
score: 98.93924654447116
patch: return - 1 ; ; case 1 : return val 1 ;
rank: 434
score: 98.8975830078125
patch: return - $NUMBER$ ? 1 : - val 1 ;
rank: 434
score: 98.87177870008681
patch: return - 1 ; case - 1 :
rank: 434
score: 98.85111781529018
patch: return safe CaMeL Multiply ( val 1 1 , val 1 ) ;
rank: 434
score: 98.72938368055556
patch: return - $NUMBER$ : return - 1 ;
rank: 434
score: 98.72311401367188
patch: return ( val 1 ;
rank: 434
score: 98.69809395926339
patch: return safe CaMeL Multiply ( val $NUMBER$ , 0 , 0 ) ;
rank: 434
score: 98.66135079520089
patch: return - 1 ; return val 1 ; break ; - 1 ;
rank: 435
score: 98.93913130326705
patch: return $NUMBER$ ; case $NUMBER$ : return val 1 ;
rank: 435
score: 98.8969955444336
patch: return - $NUMBER$ & - 1 ;
rank: 435
score: 98.87173122829861
patch: return val 1 ; ; - 1 :
rank: 435
score: 98.85067749023438
patch: return val 1 ? 0 : - $NUMBER$ ;
rank: 435
score: 98.7789815266927
patch: return - 0 ; case 0 : return val 1 ;
rank: 435
score: 98.72229682074652
patch: return Double . Double + val 1 ;
rank: 435
score: 98.69798990885417
patch: return super . safe CaMeL Multiply ( val 1 ) ; case 1 :
rank: 435
score: 98.66058349609375
patch: return - val 1 ; break ; val 1 / - 1 ;
rank: 436
score: 98.87168375651042
patch: return - 1 ; return 1 ; return - 1 ;
rank: 436
score: 98.85043334960938
patch: return 0 ? 0 : $NUMBER$ ;
rank: 436
score: 98.77853393554688
patch: return - val 1 * - $NUMBER$ * val $NUMBER$ ;
rank: 436
score: 98.6979229266827
patch: int val $NUMBER$ = safe CaMeL Multiply ( val 1 ) ;
rank: 436
score: 98.66048990885416
patch: return - val 1 ; return - val 1 + - val 1 ;
rank: 437
score: 98.963671875
patch: return Math . max ( - val 1 ;
rank: 437
score: 98.93778773716518
patch: return Math . max ( val 1 , - val $NUMBER$ 1 ;
rank: 437
score: 98.89626242897727
patch: return - 1 ; case 1 : return $NUMBER$ ;
rank: 437
score: 98.8713887532552
patch: return - val 1 ; - val 1 return 0 ;
rank: 437
score: 98.85009087456598
patch: return 0 ? - 1 : 1 ;
rank: 437
score: 98.77794300426136
patch: if ( val $NUMBER$ == 0 ) return 0 ;
rank: 437
score: 98.6976318359375
patch: int val $NUMBER$ = - val 1 ;
rank: 437
score: 98.66042654854911
patch: return val 1 ; * /
rank: 438
score: 98.96338500976563
patch: return - val $NUMBER$ / - val 1 ;
rank: 438
score: 98.93736049107143
patch: return Long . parse CaMeL Long ( - val 1 ) ; ;
rank: 438
score: 98.89595947265624
patch: return - 1 ; } else return 0 ;
rank: 438
score: 98.87041766826923
patch: return 0 ; return - val 1 ; - val 1 ;
rank: 438
score: 98.85008544921875
patch: return val 1 ? - $NUMBER$ : 1 ;
rank: 438
score: 98.7771883877841
patch: return val 1 != 0 ? 0 : 0 ;
rank: 438
score: 98.71859402126736
patch: return Boolean ? - 1 : 0 ;
rank: 438
score: 98.66029459635416
patch: return - val 1 ; max / 1 ; return - val 1 ;
rank: 439
score: 98.96123046875
patch: return - ( float ) - val 1 ;
rank: 439
score: 98.9373309795673
patch: return Math . abs ( val 1 + val 1 ) ;
rank: 439
score: 98.89591471354167
patch: return - 1 ; } else { return 0 ; }
rank: 439
score: 98.87026145241477
patch: return - 0 ; return - - val 1 ;
rank: 439
score: 98.84942072088069
patch: return val 1 == 0 ? 1 : 0 ;
rank: 439
score: 98.77693684895833
patch: return + val 1 * val 1 ;
rank: 439
score: 98.72660319010417
patch: return - 0 ? 0 : 1 ;
rank: 439
score: 98.6961181640625
patch: return val 1 ; } return val 1 ;
rank: 439
score: 98.65984235491071
patch: return val 1 ; return - val 1 ; / - 1 ;
rank: 440
score: 98.95997111002605
patch: return - 1 ? - val 1 : - 1 ;
rank: 440
score: 98.93701171875
patch: throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ) ; ;
rank: 440
score: 98.8956298828125
patch: return - 1 ; else return 1 ;
rank: 440
score: 98.8494160970052
patch: return 0 ; case 0 : return 0 . $NUMBER$ ;
rank: 440
score: 98.77693314985795
patch: return val 1 == 1 ? 0 : 0 ;
rank: 440
score: 98.72502305772569
patch: return ( val 1 + $NUMBER$ ) ;
rank: 440
score: 98.65963541666666
patch: return - val 1 ; equals - 1 : return - val 1 ;
rank: 441
score: 98.93611363002232
patch: return Math . round ( - val 1 ) ; case 1 :
rank: 441
score: 98.86850314670139
patch: return - val 1 ; - 1 *
rank: 441
score: 98.77674560546875
patch: return - 1 ; case 0 : break ;
rank: 441
score: 98.72406005859375
patch: return 0 : return 0 ;
rank: 441
score: 98.69386393229166
patch: return - val 1 . long CaMeL Value ( ) ; case 0 :
rank: 441
score: 98.65936686197917
patch: return - - val 1 ; val 1 { return - val 1 ;
rank: 442
score: 98.959521484375
patch: return - val $NUMBER$ ; case 1 : ;
rank: 442
score: 98.89550170898437
patch: return - $NUMBER$ ; } return val 1 ;
rank: 442
score: 98.86797626201923
patch: return - val 1 ; value { return - val 1 ;
rank: 442
score: 98.84903390066964
patch: throw new Runtime CaMeL Exception ( $STRING$ + val 1 + $STRING$ ,
rank: 442
score: 98.72371419270833
patch: return - 1 ? 1 : 0 ;
rank: 442
score: 98.71570696149554
patch: return val 1 * $STRING$ ;
rank: 442
score: 98.69378107244319
patch: double val $NUMBER$ = val $NUMBER$ * val $NUMBER$ ;
rank: 442
score: 98.65802873883929
patch: return - 1 ; val 1 { return val 1 ; break ;
rank: 443
score: 98.959033203125
patch: return - ( double ) - val 1 ;
rank: 443
score: 98.8953125
patch: return - 1 ; return return - 1 ;
rank: 443
score: 98.8488525390625
patch: return - val 1 . safe CaMeL Multiply ( val 1 1 ) ;
rank: 443
score: 98.7762451171875
patch: return - 1 . - val 1 ;
rank: 443
score: 98.7234115600586
patch: return long . - val 1 ;
rank: 443
score: 98.71476236979167
patch: return - 1 * ( val 1 ;
rank: 443
score: 98.6934344951923
patch: return Math . max ( val $NUMBER$ , - 1 ) ;
rank: 443
score: 98.65780203683036
patch: return - val 1 ; - 1 / / / / / ;
rank: 444
score: 98.93418666294643
patch: return Math . max ( val 1 , val $NUMBER$ 1 ) ;
rank: 444
score: 98.89501953125
patch: return 0 + - 1 ;
rank: 444
score: 98.86704664963942
patch: if - 1 + - 1 ; return - val 1 ;
rank: 444
score: 98.77615356445312
patch: return - ; case 1 : return 0 ;
rank: 444
score: 98.72329711914062
patch: return - 1 : return 0 ;
rank: 444
score: 98.71473911830357
patch: return - 1 * true ;
rank: 444
score: 98.6930401141827
patch: return safe CaMeL Multiply ( val $NUMBER$ * val 1 ) ;
rank: 444
score: 98.65731375558036
patch: return - val 1 ; - 1 + val 1 + 1 ;
rank: 445
score: 98.95548502604167
patch: return Double . parse CaMeL Double ( - val $NUMBER$ ;
rank: 445
score: 98.93384467230902
patch: return Math . min - val 1 ;
rank: 445
score: 98.89495849609375
patch: return - 1 ; val 1 : return val 1 ;
rank: 445
score: 98.8668924967448
patch: return - val 1 ; else return - - 1 ;
rank: 445
score: 98.7751131924716
patch: return val 1 + val 1 * val 1 ;
rank: 445
score: 98.714111328125
patch: return case 1 : return 0 ;
rank: 445
score: 98.65706380208333
patch: return - 1 ; return - 1 ; break ; return - 1 ;
rank: 446
score: 98.95518798828125
patch: return - val $NUMBER$ ; case - 1 ;
rank: 446
score: 98.89469691685268
patch: return - $NUMBER$ ; * /
rank: 446
score: 98.86614990234375
patch: try { return - val 1 ; ;
rank: 446
score: 98.84754774305556
patch: return 0 ; default : return 0 ;
rank: 446
score: 98.72258843315973
patch: return ( val 1 * 1 ) ;
rank: 446
score: 98.692724609375
patch: return safe CaMeL Multiply ( val 1 , 0 , val $NUMBER$ ) ;
rank: 446
score: 98.65498570033482
patch: return - val 1 ; return val 1 ; return val 1 ;
rank: 447
score: 98.95513916015625
patch: return - val 1 ; default : throw new ; }
rank: 447
score: 98.93131801060268
patch: return Double . value CaMeL Of ( val 1 1 1 ) ;
rank: 447
score: 98.89468994140626
patch: return - $NUMBER$ ? - 1 : $NUMBER$ ;
rank: 447
score: 98.86521402994792
patch: return - val 1 ; $STRING$ return - val 1 ;
rank: 447
score: 98.7729825106534
patch: return ( ( Integer ) - val 1 ) ;
rank: 447
score: 98.72235785590277
patch: return new Integer ( - 1 ) ;
rank: 447
score: 98.71272786458333
patch: return 0 * val 1 * 1 ;
rank: 447
score: 98.65440150669643
patch: return - val 1 ; return - 1 ; return - 1 ;
rank: 448
score: 98.95452880859375
patch: return - - Long . MIN _ VALUE ;
rank: 448
score: 98.93091692243304
patch: return - val 1 ; case val 1 : return val 1 ;
rank: 448
score: 98.86508413461539
patch: return - val 1 ; * : return - val 1 ;
rank: 448
score: 98.8474872295673
patch: throw new Arithmetic CaMeL Exception ( val $NUMBER$ + $STRING$ ) ;
rank: 448
score: 98.77266438802083
patch: if ( val 1 != val 1 ) return 0 ;
rank: 448
score: 98.72071668836806
patch: return - $STRING$ ? 1 : 0 ;
rank: 448
score: 98.71190728081598
patch: return <= 1 ? 0 : 0 ;
rank: 448
score: 98.69259207589286
patch: return - Math . max ( val 1 , val $NUMBER$ ) ;
rank: 448
score: 98.65427071707589
patch: return - 1 ; / / / / return - val 1 ;
rank: 449
score: 98.9527920809659
patch: return - val $NUMBER$ ; default : return 0 ;
rank: 449
score: 98.8944979580966
patch: return - 1 ; if else return - 1 ;
rank: 449
score: 98.84727376302084
patch: throw new Arithmetic CaMeL Exception ( $STRING$ + val 1 , true ) ;
rank: 449
score: 98.77255249023438
patch: return - val $NUMBER$ * val $NUMBER$ * val $NUMBER$ ;
rank: 449
score: 98.72000885009766
patch: return - 0 - val 1 ;
rank: 449
score: 98.6914950284091
patch: return - val 1 ? 1 : val $NUMBER$ ;
rank: 449
score: 98.65154157366071
patch: return - val 1 ; for - 1 : return - 1 ;
rank: 450
score: 98.95269775390625
patch: return - ( val 1 / val 1 ;
rank: 450
score: 98.9302978515625
patch: if ( - 1 < val 1 ;
rank: 450
score: 98.71051025390625
patch: return 0 * 0 - val 1 ;
rank: 450
score: 98.6909649188702
patch: return val $NUMBER$ ; case 0 : return - val 1 ;
rank: 450
score: 98.65077427455357
patch: return - val 1 ; else
rank: 451
score: 98.95109049479167
patch: return - val 1 ? 1 : - val 1 ;
rank: 451
score: 98.89301091974431
patch: return - $NUMBER$ 1 ; } return - $NUMBER$ ;
rank: 451
score: 98.86377970377605
patch: return - val 1 ; - 1 ; ; * ;
rank: 451
score: 98.84575861150569
patch: return val 1 * val 1 * val $NUMBER$ :
rank: 451
score: 98.71888563368056
patch: case 0 : return - - 1 ;
rank: 451
score: 98.70952012803819
patch: return Long ? 0 : val 1 ;
rank: 451
score: 98.69090779622395
patch: return val 1 ? - val $NUMBER$ : val 1 ;
rank: 451
score: 98.65030343191964
patch: return - val 1 ; ; val 1 return - val 1 ;
rank: 452
score: 98.94957386363636
patch: return Integer . parse CaMeL Long ( val 1 ;
rank: 452
score: 98.93023126775569
patch: return - val $NUMBER$ ; break ; case 1 :
rank: 452
score: 98.89299926757812
patch: return val $NUMBER$ ; return - val $NUMBER$ ;
rank: 452
score: 98.86375935872395
patch: return val 1 ; - 1 ; return - 1 ;
rank: 452
score: 98.77161754261364
patch: switch ( val 1 ) { case - 1 ;
rank: 452
score: 98.70680067274306
patch: return Math ? - $NUMBER$ : 0 ;
rank: 452
score: 98.64925711495536
patch: return - val 1 ; return - val 1 ; / * /
rank: 453
score: 98.86353410993304
patch: return - val 1 ; - 0 : return - val 1 ;
rank: 453
score: 98.84506225585938
patch: return val $NUMBER$ ? val 1 : 0 ;
rank: 453
score: 98.77137247721355
patch: return - $NUMBER$ ; case 0 : return - 1 ;
rank: 453
score: 98.70676095145089
patch: return val 1 * false ;
rank: 453
score: 98.69034830729167
patch: return super . safe CaMeL Multiply ( val $NUMBER$ , val 1 ) ;
rank: 453
score: 98.648876953125
patch: return - val 1 ; for val 1 : return - val 1 ;
rank: 454
score: 98.94918823242188
patch: return Long . POSITIVE _ INFINITY ;
rank: 454
score: 98.92890276227679
patch: return Math . max ( val 1 , - val 1 1 ;
rank: 454
score: 98.86333759014423
patch: try { return - val 1 ; return - val 1 ;
rank: 454
score: 98.844580078125
patch: return val 1 . safe CaMeL Multiply ( val 1 * val 1 ;
rank: 454
score: 98.7711181640625
patch: return - val 1 * val $NUMBER$ * - 1 ;
rank: 454
score: 98.71816677517361
patch: return val 1 ? true : 0 ;
rank: 454
score: 98.70637342664931
patch: return Math . Double ( val 1 ;
rank: 454
score: 98.69012920673077
patch: return val 1 * ( val 1 * val $NUMBER$ ) ;
rank: 454
score: 98.64763532366071
patch: return ( val 1 - val 1 1 1 1 1 1 ;
rank: 455
score: 98.92801607572116
patch: return - 1 ; case val 1 : return - 1 ;
rank: 455
score: 98.89278564453124
patch: return - 1 ; this . - 1 ;
rank: 455
score: 98.86290631975446
patch: return - val 1 ; ; val 1 = - val 1 ;
rank: 455
score: 98.84453125
patch: throw new Runtime CaMeL Exception ( $STRING$ + val $NUMBER$ + $STRING$ ) ;
rank: 455
score: 98.71804809570312
patch: return Double ? 0 : 0 ;
rank: 455
score: 98.64631870814732
patch: return - 1 ; / ; val 1 { return - 1 ;
rank: 456
score: 98.94862196180556
patch: return - val $NUMBER$ - val $NUMBER$ ;
rank: 456
score: 98.92792619977679
patch: return val 1 ; break ; case 1 : return val 1 ;
rank: 456
score: 98.89276801215277
patch: return 0 ; return - 1 1 ;
rank: 456
score: 98.86239624023438
patch: return - val 1 ; 0 ; return val 1 ;
rank: 456
score: 98.84423828125
patch: return 0 ? $NUMBER$ : val 1 ;
rank: 456
score: 98.77045232599431
patch: return - val 1 * 0 + val $NUMBER$ ;
rank: 456
score: 98.71598985460069
patch: return val 1 * val $NUMBER$ ) ;
rank: 456
score: 98.70501708984375
patch: return 0 1 ;
rank: 456
score: 98.68971761067708
patch: return - val 1 ? - val 1 : 0 ;
rank: 456
score: 98.64597981770834
patch: return - val 1 ; return - val 1 ; return - 1 ;
rank: 457
score: 98.92755998883929
patch: return Math . min ( - val 1 , 0 . $NUMBER$ ;
rank: 457
score: 98.86222330729167
patch: return - 1 ; ; - 1 + val 1 ;
rank: 457
score: 98.8429931640625
patch: return 0 ? val 1 : - $NUMBER$ ;
rank: 457
score: 98.70382351345486
patch: else return val 1 * val 1 ;
rank: 457
score: 98.64568684895833
patch: return - val 1 ; - 1 + val 1 + val 1 ;
rank: 458
score: 98.9478759765625
patch: return val $NUMBER$ | - val 1 ;
rank: 458
score: 98.89224243164062
patch: return - val 1 + 0 ;
rank: 458
score: 98.86212158203125
patch: return - $NUMBER$ ; val 1 = - val 1 ;
rank: 458
score: 98.71561431884766
patch: return - Integer + val 1 ;
rank: 458
score: 98.70314534505208
patch: return val 1 * - 1 ; }
rank: 458
score: 98.68941556490384
patch: return val 1 ; case 0 : return val 1 ; }
rank: 458
score: 98.64537702287946
patch: return - 1 ; return - 1 ; - 1 ; break ;
rank: 459
score: 98.92730158025569
patch: return - val 1 ; break ; case $NUMBER$ :
rank: 459
score: 98.86166381835938
patch: return - 0 ; - 1 ; return - 1 ;
rank: 459
score: 98.842236328125
patch: return safe CaMeL Multiply ( val 1 , val $NUMBER$ , 0 ) ;
rank: 459
score: 98.70313856336806
patch: return new - 1 * val 1 ;
rank: 459
score: 98.68874686104911
patch: return val 1 . long CaMeL Value ( ) : val 1 ;
rank: 459
score: 98.64523751395089
patch: return val 1 ; - 1 * / return - val 1 ;
rank: 460
score: 98.94739879261364
patch: return 1 ; default : return - val 1 ;
rank: 460
score: 98.92689732142857
patch: return Math . min ( - val 1 , 0 . 1 ;
rank: 460
score: 98.89186789772727
patch: return - val 1 : - - val 1 ;
rank: 460
score: 98.8614032451923
patch: return - 1 ; 1 * / return - val 1 ;
rank: 460
score: 98.84210205078125
patch: return val $NUMBER$ ? - 1 : 0 ;
rank: 460
score: 98.76922607421875
patch: long val 1 = val 1 ; return - 1 ;
rank: 460
score: 98.7136459350586
patch: return 1 ? 0 : 0 ;
rank: 460
score: 98.70201280381944
patch: return - $NUMBER$ * 0 * 0 ;
rank: 460
score: 98.64479166666666
patch: return val 1 ; if - val 1 : return - val 1 ;
rank: 461
score: 98.94681396484376
patch: return val 1 | - - val $NUMBER$ ;
rank: 461
score: 98.68843587239583
patch: return ( safe CaMeL Multiply ( val 1 , val 1 ) ) ;
rank: 461
score: 98.6447265625
patch: return - val 1 ; - 1 ? - 1 : - 1 ;
rank: 462
score: 98.94660034179688
patch: return - val $NUMBER$ / - val $NUMBER$ ;
rank: 462
score: 98.9266357421875
patch: return Math . floor ( val 1 ;
rank: 462
score: 98.89117431640625
patch: return - val 1 ; else return 1 ;
rank: 462
score: 98.86088053385417
patch: return - 1 ; val 1 ; ; - 1 ;
rank: 462
score: 98.76810031467014
patch: return 0 ; case 0 : break ;
rank: 462
score: 98.713134765625
patch: return - val 1 : return 0 ;
rank: 462
score: 98.7008056640625
patch: return 0 * val 1 ; }
rank: 462
score: 98.68836558948864
patch: return - val 1 ; } return val 1 ;
rank: 462
score: 98.64458821614583
patch: return - val 1 ; - 1 / / / / val 1 ;
rank: 463
score: 98.94618918678977
patch: return - ( val 1 * - val 1 ;
rank: 463
score: 98.92647611177884
patch: return - $NUMBER$ ; case 1 : return - val 1 ;
rank: 463
score: 98.85990397135417
patch: return - val 1 ; 0 ; ; - 1 ;
rank: 463
score: 98.76783243815105
patch: return - ( - val 1 * val 1 ) ;
rank: 463
score: 98.71251085069444
patch: return val 1 ? $STRING$ : 0 ;
rank: 463
score: 98.64448765345982
patch: return - 1 ; if - 1 : return - val 1 ;
rank: 464
score: 98.94493611653645
patch: return Integer . parse CaMeL Int ( val 1 ; ;
rank: 464
score: 98.89085896809895
patch: return - val 1 1 ; return - val 1 ;
rank: 464
score: 98.841552734375
patch: return - val 1 ? val 1 : 1 ;
rank: 464
score: 98.76780007102273
patch: return - 1 * - 1 * - 1 ;
rank: 464
score: 98.70998806423611
patch: return Integer + $STRING$ + val 1 ;
rank: 464
score: 98.69912283761161
patch: return 0 ; case 0 :
rank: 464
score: 98.6880594889323
patch: return val 1 . double CaMeL Value ( ) ; }
rank: 464
score: 98.64448765345982
patch: return - 1 ; / ; * / return - val 1 ;
rank: 465
score: 98.94476873224431
patch: return - ( - val 1 ) / $NUMBER$ ;
rank: 465
score: 98.92609112079327
patch: return Math . min ( - val 1 , 0 ) ;
rank: 465
score: 98.85945951021634
patch: return - 1 ; - 1 ; ; return - 1 ;
rank: 465
score: 98.84146728515626
patch: return 1 ? 0 : - val 1 ;
rank: 465
score: 98.767578125
patch: if ( val $NUMBER$ != 1 ) return val 1 ;
rank: 465
score: 98.7097396850586
patch: return - 0 : return 0 ;
rank: 465
score: 98.69887966579861
patch: return - - val 1 * 0 ;
rank: 466
score: 98.94346110026042
patch: return Long . parse CaMeL Long ( - val 1 )
rank: 466
score: 98.92603149414063
patch: return - 1 ; default : throw new ;
rank: 466
score: 98.890380859375
patch: return - $NUMBER$ ; }
rank: 466
score: 98.85897827148438
patch: return - 1 ; - 0 ; return - 1 ;
rank: 466
score: 98.84125162760417
patch: return val 1 . safe CaMeL Multiply ( val 1 ) ; * ?
rank: 466
score: 98.70794677734375
patch: val 1 = - val 1 ;
rank: 466
score: 98.68765024038461
patch: return Math . compare ( val 1 , val $NUMBER$ ) ;
rank: 466
score: 98.64269002278645
patch: return - 1 ; else
rank: 467
score: 98.84098307291667
patch: return val 1 . safe CaMeL Multiply ( 0 1 , 0 ) ;
rank: 467
score: 98.76737467447917
patch: return - ( val 1 + - val 1 ) ;
rank: 467
score: 98.70689561631944
patch: return - Math ? 1 : 0 ;
rank: 467
score: 98.68735080295139
patch: int val 1 = - val 1 ;
rank: 467
score: 98.64249420166016
patch: return - val 1 ; val 1 { return val 1 + val 1 ;
rank: 468
score: 98.94181518554687
patch: return val 1 * - ( val 1 ;
rank: 468
score: 98.92533052884616
patch: return Math . ceil ( val 1 * val 1 ) ;
rank: 468
score: 98.88933771306819
patch: return - 1 - - - - val $NUMBER$ ;
rank: 468
score: 98.84079996744792
patch: return 0 ? 1 : val 1 ;
rank: 468
score: 98.76715087890625
patch: break ; case 1 : return 0 ;
rank: 468
score: 98.70614963107639
patch: return Double . - - val 1 ;
rank: 468
score: 98.69769287109375
patch: return 0 * $NUMBER$ * val $NUMBER$ ;
rank: 468
score: 98.68723842075893
patch: return - Long . max ( val 1 , val $NUMBER$ ) ;
rank: 468
score: 98.6424560546875
patch: return - val 1 ; break ; val 1 = - val 1 ;
rank: 469
score: 98.92517961774554
patch: return Math . max ( - val 1 , - val 1 ;
rank: 469
score: 98.85682169596355
patch: return - val 1 ; ; - 1 return 0 ;
rank: 469
score: 98.84055397727273
patch: return - val 1 ? val 1 : $NUMBER$ ;
rank: 469
score: 98.70608520507812
patch: return Integer + - val 1 ;
rank: 469
score: 98.69744001116071
patch: try { return - 1 ;
rank: 469
score: 98.68701985677083
patch: return val 1 * val 1 ; case 0 : return val 1 ;
rank: 469
score: 98.64182826450893
patch: return - 1 ; / *
rank: 470
score: 98.92494553786058
patch: return - val 1 ; case 1 : return - $NUMBER$ ;
rank: 470
score: 98.85627964564732
patch: return 0 ; return - val 1 ; return - val 1 ;
rank: 470
score: 98.84031325120192
patch: return ( val 1 * val 1 * val $NUMBER$ ) ;
rank: 470
score: 98.7662020596591
patch: return - 1 * - 1 * val $NUMBER$ ;
rank: 470
score: 98.70582798549107
patch: return Double + val 1 ;
rank: 470
score: 98.69731140136719
patch: else switch ( val 1 ) {
rank: 470
score: 98.6869384765625
patch: return ( val 1 ) . long CaMeL Value ( ) . value ;
rank: 470
score: 98.64175415039062
patch: return - 1 ; return - 1 ; val 1 { return - 1 ;
rank: 471
score: 98.94140625
patch: return Long . value CaMeL Of ( ( val $NUMBER$ ;
rank: 471
score: 98.85570350060097
patch: return - val 1 ; * / { return val 1 ;
rank: 471
score: 98.83968505859374
patch: return val 1 . append ( $STRING$ ) ;
rank: 471
score: 98.76528591579861
patch: return - 1 * - val $NUMBER$ ;
rank: 471
score: 98.70549858940973
patch: return - - - - val $NUMBER$ ;
rank: 471
score: 98.69625515407986
patch: return $NUMBER$ * $NUMBER$ * val 1 ;
rank: 471
score: 98.68600027901786
patch: return safe CaMeL Multiply ( val 1 , Math . $NUMBER$ ) ;
rank: 471
score: 98.64168294270833
patch: return - val 1 ; - val 1 { return - val 1 ;
rank: 472
score: 98.92462713068181
patch: return - val 1 ; case ; case 1 :
rank: 472
score: 98.8553975423177
patch: return - val 1 ; min return - val 1 ;
rank: 472
score: 98.8396240234375
patch: return val 1 . safe CaMeL Multiply ( 1 1 , 0 ) ;
rank: 472
score: 98.76482599431819
patch: return ( ( double ) - val 1 ) ;
rank: 472
score: 98.70548502604167
patch: case $STRING$ : return - val 1 ;
rank: 472
score: 98.69607543945312
patch: return new Double ( val 1 ;
rank: 472
score: 98.64081682477679
patch: return - val 1 ; for - 1 : return val 1 ;
rank: 473
score: 98.93988037109375
patch: return ( long 1 ) - val 1 ;
rank: 473
score: 98.92420543323864
patch: return val 1 ; case 1 : case 1 :
rank: 473
score: 98.83951822916667
patch: throw new Arithmetic CaMeL Exception ( this + $STRING$ + val 1 ) ;
rank: 473
score: 98.76333618164062
patch: if ( val $NUMBER$ == - 1 ) return 0 ;
rank: 473
score: 98.70530192057292
patch: return val 1 * val 1 ) ;
rank: 473
score: 98.69300672743056
patch: return - val 1 * case 0 ;
rank: 473
score: 98.68562316894531
patch: long val $NUMBER$ = - 1 ;
rank: 473
score: 98.64077322823661
patch: return - 1 ; - 1 * / / return - 1 ;
rank: 474
score: 98.93969116210937
patch: return val 1 1 | - val 1 ;
rank: 474
score: 98.92385031960227
patch: throw new ; case 1 : return val 1 ;
rank: 474
score: 98.88756214488636
patch: return - val 1 1 ; return - 1 ;
rank: 474
score: 98.85240681966145
patch: return - val 1 ; 1 | - val 1 ;
rank: 474
score: 98.83935546875
patch: throw new Arithmetic CaMeL Exception ( $STRING$ + val 1 , name ) ;
rank: 474
score: 98.7629903157552
patch: if ( val 1 == 0 ) { return 0 ;
rank: 474
score: 98.70508684430804
patch: return - - - 0 ;
rank: 474
score: 98.68559047154018
patch: return safe CaMeL Multiply ( val 1 , Long . Long ) ;
rank: 474
score: 98.640625
patch: return - val 1 ; val $NUMBER$ { return - - val 1 ;
rank: 475
score: 98.93853759765625
patch: return - val 1 ; default : throw ;
rank: 475
score: 98.92286095252403
patch: return Math . abs ( val 1 - val 1 1 ;
rank: 475
score: 98.88690795898438
patch: return val 1 ; } return - $NUMBER$ ;
rank: 475
score: 98.85230509440105
patch: return - val 1 ; Integer return - val 1 ;
rank: 475
score: 98.69272189670139
patch: result = val 1 * - 1 ;
rank: 475
score: 98.68470594618056
patch: if ( val 1 != 0 ) {
rank: 475
score: 98.64041573660714
patch: return val 1 ; / / * / return - val 1 ;
rank: 476
score: 98.93825276692708
patch: return Long . value CaMeL Of ( value 1 ) ;
rank: 476
score: 98.88669655539773
patch: return - $NUMBER$ 1 ; return - val 1 ;
rank: 476
score: 98.8522198016827
patch: return val 1 ; val 1 : return - val 1 ;
rank: 476
score: 98.8390869140625
patch: return - val 1 . safe CaMeL Multiply ( 0 , 0 ) ;
rank: 476
score: 98.70442708333333
patch: return & $NUMBER$ ? 0 : 0 ;
rank: 476
score: 98.69132232666016
patch: return 0 1 * - 1 ;
rank: 476
score: 98.64013671875
patch: return - 1 ; break ; val 1 : return - 1 ;
rank: 477
score: 98.92252022879464
patch: return - val 1 ; case $NUMBER$ : return - val $NUMBER$ ;
rank: 477
score: 98.88650948660714
patch: return - - 1 1 ;
rank: 477
score: 98.85169474283855
patch: return - 1 ; - $NUMBER$ ; return - 1 ;
rank: 477
score: 98.8388671875
patch: return val 1 . safe CaMeL Multiply ( ) ; } return 0 ;
rank: 477
score: 98.70410834418402
patch: return val 1 ? false : 0 ;
rank: 477
score: 98.6843731219952
patch: return safe CaMeL Multiply ( val $NUMBER$ ) ; case 1 :
rank: 477
score: 98.639990234375
patch: return - val 1 ; val 1 { return val 1 ; break ;
rank: 478
score: 98.92227877103366
patch: return val $NUMBER$ ; case 1 : return - val $NUMBER$ ;
rank: 478
score: 98.88632202148438
patch: return - $NUMBER$ ? - val 1 : - 1 ;
rank: 478
score: 98.8500507061298
patch: return - 1 ; return 1 ; return - val 1 ;
rank: 478
score: 98.83857945033482
patch: return val 1 + 0 ;
rank: 478
score: 98.69085693359375
patch: return val 1 * val $NUMBER$ ; }
rank: 478
score: 98.68381911057692
patch: return safe CaMeL Multiply ( ( float ) val $NUMBER$ ) ;
rank: 478
score: 98.63973563058036
patch: return val 1 ; for - 1 : return - val 1 ;
rank: 479
score: 98.922119140625
patch: if ( val 1 < 0 ) return val $NUMBER$ ;
rank: 479
score: 98.85003662109375
patch: return - val 1 ; 0 ; - - 1 ;
rank: 479
score: 98.83854166666667
patch: throw new Arithmetic CaMeL Exception ( $STRING$ , $STRING$ + val 1 ) ;
rank: 479
score: 98.75905539772727
patch: return - val 1 * - 1 * 0 ;
rank: 479
score: 98.70225694444444
patch: try { return - - val 1 ;
rank: 479
score: 98.683740234375
patch: return - val 1 . long CaMeL Value ( ) + val 1 ;
rank: 479
score: 98.63972691127232
patch: return - val 1 ; equals - 1 : return val 1 ;
rank: 480
score: 98.93762817382813
patch: return - - ( - val 1 ) ;
rank: 480
score: 98.92172677176339
patch: return Math . max ( - 1 , - val 1 ) ;
rank: 480
score: 98.88583374023438
patch: return - 1 1 ; else return - val 1 ;
rank: 480
score: 98.84975179036458
patch: if - val 1 1 ; return - val 1 ;
rank: 480
score: 98.83850911458333
patch: return val 1 . safe CaMeL Multiply ( 1 , 0 1 ) ;
rank: 480
score: 98.75881618923611
patch: return 0 * - - val 1 ;
rank: 480
score: 98.68348039899554
patch: return - val 1 * safe CaMeL Multiply ( val $NUMBER$ ) ;
rank: 480
score: 98.63893229166666
patch: return - val 1 ; - - 1 : return - val 1 ;
rank: 481
score: 98.93747780539773
patch: return ( - val 1 ) / val 1 ;
rank: 481
score: 98.92147391183036
patch: return Long . value CaMeL Of ( - val 1 ) . ;
rank: 481
score: 98.8854092684659
patch: return - 0 1 ; else return - $NUMBER$ ;
rank: 481
score: 98.84944974459134
patch: return - $NUMBER$ ; ; - 1 : return - 1 ;
rank: 481
score: 98.75855509440105
patch: if ( val 1 != 1 ) return val 1 ;
rank: 481
score: 98.70181613498264
patch: return ( val 1 - 1 ) ;
rank: 481
score: 98.69019911024306
patch: return ! val 1 * val 1 ;
rank: 481
score: 98.6834716796875
patch: return safe CaMeL Multiply ( val 1 , int . 0 ) ;
rank: 481
score: 98.63768717447917
patch: return - val 1 ; return - val 1 - - val 1 ;
rank: 482
score: 98.9373067220052
patch: return - ( val 1 << - val 1 ) ;
rank: 482
score: 98.92138671875
patch: return ( Long 1 ) - val 1 ;
rank: 482
score: 98.84913987379808
patch: return - 1 ; ; - $NUMBER$ : return - 1 ;
rank: 482
score: 98.8382059733073
patch: return 0 ? 0 : val 1 * val $NUMBER$ ;
rank: 482
score: 98.70156521267361
patch: return - $NUMBER$ ? $NUMBER$ : 0 ;
rank: 482
score: 98.689453125
patch: return 0 * 1 * val $NUMBER$ ;
rank: 482
score: 98.68289184570312
patch: return - val 1 && - val $NUMBER$ ;
rank: 482
score: 98.63754708426339
patch: return - 1 ; break ; return - 1 ; val 1 ;
rank: 483
score: 98.92118617466518
patch: return Long . parse CaMeL Int ( val 1 ; case 1 :
rank: 483
score: 98.88507080078125
patch: return - 0 ; } else { return - 1 ;
rank: 483
score: 98.84881591796875
patch: return - val 1 ; * ?
rank: 483
score: 98.83664772727273
patch: return val 1 ? val 1 : - $NUMBER$ ;
rank: 483
score: 98.75788709852431
patch: return ( val 1 & $NUMBER$ ) ;
rank: 483
score: 98.63731166294643
patch: return - val 1 ; val 1 { if - val 1 :
rank: 484
score: 98.9207012469952
patch: return Math . abs ( - val 1 * val $NUMBER$ ;
rank: 484
score: 98.88424682617188
patch: return - $NUMBER$ 1 ; return val 1 ;
rank: 484
score: 98.84869384765625
patch: return - 1 ; return - 1 ; val 1 ;
rank: 484
score: 98.75749067826705
patch: return - 0 * val 1 * val 1 ;
rank: 484
score: 98.68898228236607
patch: return Math . - 1 ;
rank: 484
score: 98.68252902560764
patch: if ( val $NUMBER$ != val $NUMBER$ )
rank: 484
score: 98.63726806640625
patch: return - val 1 ; return val 1 ; / - 1 ;
rank: 485
score: 98.92069185697116
patch: return val 1 ; case $NUMBER$ : return - val $NUMBER$ ;
rank: 485
score: 98.84859212239583
patch: return - 1 ; return 1 ; ; - 1 ;
rank: 485
score: 98.83562677556819
patch: return val 1 ? val 1 : - 0 ;
rank: 485
score: 98.69972059461806
patch: case val $NUMBER$ : return val 1 ;
rank: 485
score: 98.68841552734375
patch: return $NUMBER$ * - $NUMBER$ ;
rank: 485
score: 98.68213762555804
patch: return val 1 . double CaMeL Value ( ) * val $NUMBER$ ;
rank: 485
score: 98.63700648716518
patch: return - 1 ; 1 ;
rank: 486
score: 98.93602405894886
patch: return - ( val 1 << - val 1 ;
rank: 486
score: 98.9205830891927
patch: return 0 ; case 1 : return - val $NUMBER$ ;
rank: 486
score: 98.88388400607639
patch: return 1 + - - val 1 ;
rank: 486
score: 98.84848257211539
patch: return - $NUMBER$ ; - 1 ; return - val 1 ;
rank: 486
score: 98.83547973632812
patch: return val 1 ? - 1 : true ;
rank: 486
score: 98.69902038574219
patch: return - ( - 1 ) ;
rank: 486
score: 98.68726942274306
patch: return >= 1 ? 0 : 0 ;
rank: 486
score: 98.68154074928977
patch: return val $NUMBER$ ? - 1 : val 1 ;
rank: 486
score: 98.63675130208334
patch: return - 1 ; return - val 1 ; break ; - 1 ;
rank: 487
score: 98.92020670572917
patch: if ( - 1 <= val 1 ;
rank: 487
score: 98.8838778409091
patch: return - $NUMBER$ - - - - - 1 ;
rank: 487
score: 98.8475341796875
patch: return - 1 ; 1 ; return - val 1 ;
rank: 487
score: 98.68683624267578
patch: return Float . - val 1 ;
rank: 487
score: 98.63658854166667
patch: return - 1 ; val 1 { return val 1 + val 1 ;
rank: 488
score: 98.93558349609376
patch: return - val 1 ? - 1 : ;
rank: 488
score: 98.88377888997395
patch: return - $NUMBER$ ; else { return - 1 ; }
rank: 488
score: 98.84725952148438
patch: return - val 1 ; val 1 + val 1 ;
rank: 488
score: 98.83537462022569
patch: return $NUMBER$ ? val 1 : 0 ;
rank: 488
score: 98.69879828559027
patch: return - - $NUMBER$ : return 0 ;
rank: 488
score: 98.68621826171875
patch: return long val 1 * val 1 ;
rank: 488
score: 98.68042931189903
patch: return safe CaMeL Multiply ( val 1 , 0 1 ) ;
rank: 489
score: 98.9349365234375
patch: return - ( val 1 * - val 1 ) ;
rank: 489
score: 98.88358561197917
patch: if - 1 == - 1 ; return - 1 ;
rank: 489
score: 98.84694417317708
patch: return - val 1 ; - 1 return val 1 ;
rank: 489
score: 98.83507361778847
patch: return 0 ; case 1 : return 0 * val 1 ;
rank: 489
score: 98.75516764322917
patch: if ( val 1 > - 1 ) return 0 ;
rank: 489
score: 98.69806780133929
patch: return ( - 0 ) ;
rank: 489
score: 98.68543158637152
patch: return 0 * $NUMBER$ * - 1 ;
rank: 489
score: 98.6798828125
patch: return ( Math . max ( val 1 , val $NUMBER$ ) ) ;
rank: 489
score: 98.6338134765625
patch: return - 1 ; return - 1 ; else return - val 1 ;
rank: 490
score: 98.91959838867187
patch: return Math . abs ( - val $NUMBER$ ;
rank: 490
score: 98.8824462890625
patch: return - $NUMBER$ ; - 1 : return $NUMBER$ ;
rank: 490
score: 98.84625713641827
patch: return - val 1 ; - 1 ; - 1 * ;
rank: 490
score: 98.83494059244792
patch: throw new Runtime CaMeL Exception ( $STRING$ + val $NUMBER$ ,
rank: 490
score: 98.69776068793402
patch: return 0 ? - $NUMBER$ : 0 ;
rank: 490
score: 98.67970628004808
patch: return Math . max ( val $NUMBER$ , - $NUMBER$ ) ;
rank: 490
score: 98.63328450520834
patch: return - val 1 ; ; val 1 { return - val 1 ;
rank: 491
score: 98.91939871651786
patch: return - val 1 ; ; case 1 : return - 1 ;
rank: 491
score: 98.8459003155048
patch: return - val 1 ; 0 * return - val 1 ;
rank: 491
score: 98.83443196614583
patch: return 1 ? 0 : val 1 ;
rank: 491
score: 98.7549540201823
patch: return + val 1 * val 1 * val $NUMBER$ ;
rank: 491
score: 98.68453640407986
patch: return ( $NUMBER$ * val 1 ) ;
rank: 491
score: 98.67960357666016
patch: int val $NUMBER$ = val 1 ;
rank: 491
score: 98.63279622395834
patch: return - val 1 ; val 1 { { return - val 1 ;
rank: 492
score: 98.8822909268466
patch: return - $NUMBER$ ; case 1 : return 1 ;
rank: 492
score: 98.84561861478366
patch: return - 1 ; - 1 ; return - - 1 ;
rank: 492
score: 98.75474964488636
patch: return - val 1 * val $NUMBER$ * 0 ;
rank: 492
score: 98.69688585069444
patch: return - ] ? 0 : 0 ;
rank: 492
score: 98.68336995442708
patch: return $NUMBER$ * val 1 * 0 ;
rank: 492
score: 98.63170623779297
patch: return - 1 ; val 1 { return - 1 ; return - 1 ;
rank: 493
score: 98.93398030598958
patch: return - Double . value CaMeL Of ( val $NUMBER$ ;
rank: 493
score: 98.9184100811298
patch: return Math . floor ( val 1 * val 1 ) ;
rank: 493
score: 98.8818026455966
patch: return - $NUMBER$ ? val 1 : - $NUMBER$ ;
rank: 493
score: 98.84517728365384
patch: return - val 1 ; 0 1 * - val 1 ;
rank: 493
score: 98.75449440696023
patch: return - val 1 * 1 * - 1 ;
rank: 493
score: 98.6953125
patch: return ( - 1 ) - 0 ;
rank: 493
score: 98.68321228027344
patch: throw new Arithmetic CaMeL Exception ( $STRING$
rank: 493
score: 98.67946951729911
patch: long val $NUMBER$ = 0 ;
rank: 493
score: 98.631103515625
patch: return - val 1 ; val 1 return - - - val 1 ;
rank: 494
score: 98.9334383877841
patch: return ( val 1 * - val 1 ) ;
rank: 494
score: 98.69484456380208
patch: return 0 ) ? 0 : 0 ;
rank: 494
score: 98.68292914496527
patch: return $NUMBER$ * 0 * - 1 ;
rank: 494
score: 98.67945963541666
patch: return val 1 * val $NUMBER$ ; case 0 : return val 1 ;
rank: 494
score: 98.6302734375
patch: return - val 1 ; 1 / * / return - val 1 ;
rank: 495
score: 98.91747107872597
patch: return Math . abs ( val 1 * val 1 1 ;
rank: 495
score: 98.84398396809895
patch: return - val 1 ; 0 ; - val 1 {
rank: 495
score: 98.75438435872395
patch: if ( val $NUMBER$ != val $NUMBER$ ) return 0 ;
rank: 495
score: 98.69457135881696
patch: return ( long ) 0 ;
rank: 495
score: 98.68209499782986
patch: return val 1 * 0 . 0 ;
rank: 495
score: 98.67942457932692
patch: return ( Long ) safe CaMeL Multiply ( val $NUMBER$ ) ;
rank: 495
score: 98.62857259114584
patch: return - 1 ; val 1 { return - 1 + val 1 ;
rank: 496
score: 98.91727905273437
patch: if ( val 1 ; return val 1 ;
rank: 496
score: 98.84354654947917
patch: return - val 1 ; - 1 ; return 0 ;
rank: 496
score: 98.8331768329327
patch: throw new Arithmetic CaMeL Exception ( val 1 , val $NUMBER$ +
rank: 496
score: 98.68193901909723
patch: return 0 * 1 * - 1 ;
rank: 496
score: 98.67923583984376
patch: return - val 1 ; case - $NUMBER$ :
rank: 496
score: 98.62772623697917
patch: return ( - val 1 ; val 1 : return - val 1 ;
rank: 497
score: 98.93012029474431
patch: return - ( - val 1 - val 1 ;
rank: 497
score: 98.91723022460937
patch: return val 1 ; default : return 1 ;
rank: 497
score: 98.8331631747159
patch: return - 1 ? val 1 : - 1 ;
rank: 497
score: 98.69413926866319
patch: return - value 1 * val 1 ;
rank: 497
score: 98.68105740017361
patch: if ( true ) { return 0 ;
rank: 497
score: 98.62769990808823
patch: return - 1 ; return - 1 ; val 1 { return - val 1 ;
rank: 498
score: 98.9300308227539
patch: return val 1 % val 1 ;
rank: 498
score: 98.91655939275569
patch: return 1 ; case 1 : return val $NUMBER$ ;
rank: 498
score: 98.88060167100694
patch: return - 1 + - val $NUMBER$ ;
rank: 498
score: 98.84335327148438
patch: return - 1 ; - 1 ; - - 1 :
rank: 498
score: 98.75394015842014
patch: return ; case 0 : return 0 ;
rank: 498
score: 98.69345092773438
patch: case 1 : return val $NUMBER$ ;
rank: 498
score: 98.67851039341518
patch: return val $NUMBER$ . long CaMeL Value ( ) ; case 0 :
rank: 498
score: 98.62745666503906
patch: return - val 1 ; return - val 1 ; break ; - 1 ;
rank: 499
score: 98.92910766601562
patch: return val 1 + - - val $NUMBER$ ;
rank: 499
score: 98.91586303710938
patch: return - val 1 ; case 1 ; case 1 :
rank: 499
score: 98.87962757457386
patch: return 0 ; else { return - val 1 ;
rank: 499
score: 98.8431396484375
patch: return - 0 ; return 0 ;
rank: 499
score: 98.69316948784723
patch: return new long 1 - val 1 ;
rank: 499
score: 98.62631022135416
patch: return val 1 ; val 1 { return - - - val 1 ;
rank: 500
score: 98.87930297851562
patch: return - Integer . value CaMeL Of ( val $NUMBER$ ;
rank: 500
score: 98.84281412760417
patch: return - val 1 ; - 1 ; ; / ;
rank: 500
score: 98.75201416015625
patch: return val 1 * - val 1 * val 1 ;
rank: 500
score: 98.69237603081598
patch: return - case 0 : return 0 ;
rank: 500
score: 98.67847442626953
patch: return - val $NUMBER$ . length ;
rank: 501
score: 98.92824300130208
patch: return Long . parse CaMeL Int ( val 1 ; ;
rank: 501
score: 98.91490589488636
patch: return $NUMBER$ ; case 1 : return - $NUMBER$ ;
rank: 501
score: 98.87926136363636
patch: return - val 1 ; else return val $NUMBER$ ;
rank: 501
score: 98.84273856026786
patch: return - val 1 ; 1 * / return - val 1 ;
rank: 501
score: 98.83171929253473
patch: return 0 ; else return - 0 ;
rank: 501
score: 98.69085693359375
patch: return new long val 1 ;
rank: 501
score: 98.67814127604167
patch: return super . safe CaMeL Multiply ( val $NUMBER$ ) ; case 0 :
rank: 501
score: 98.6248779296875
patch: return - val 1 ; - 1 / * / return - val 1 ;
rank: 502
score: 98.92803955078125
patch: return - 1 << - val 1 ;
rank: 502
score: 98.91473388671875
patch: if ( - 1 == val 1 ;
rank: 502
score: 98.87911987304688
patch: return - $NUMBER$ + val $NUMBER$ ;
rank: 502
score: 98.84232584635417
patch: return - val 1 ; 1 + - val 1 ;
rank: 502
score: 98.68915557861328
patch: return Math ? 1 : 0 ;
rank: 502
score: 98.62428501674107
patch: return - 1 ; / ?
rank: 503
score: 98.9275410970052
patch: return - Long . value CaMeL Of ( val 1 )
rank: 503
score: 98.9146728515625
patch: return 0 ; default : return - val 1 ;
rank: 503
score: 98.84187825520833
patch: return - val 1 ; ; - 1 ; * /
rank: 503
score: 98.8309814453125
patch: return val 1 ? val $NUMBER$ : $NUMBER$ ;
rank: 503
score: 98.75099690755208
patch: return val 1 . close ( ) ;
rank: 503
score: 98.68865203857422
patch: return ( long ) - 0 ;
rank: 503
score: 98.67771218039773
patch: return - val $NUMBER$ ? val 1 : 0 ;
rank: 503
score: 98.66864013671875
patch: return ( 0 + val 1 ;
rank: 503
score: 98.6234130859375
patch: return - 1 ; - 1 / / / / / val 1 ;
rank: 504
score: 98.92665608723958
patch: return Long . value CaMeL Of ( - ( long ;
rank: 504
score: 98.87906901041667
patch: return val $NUMBER$ ; - 1 : return - 1 ;
rank: 504
score: 98.8417499248798
patch: return - val 1 ; - 1 + - - 1 ;
rank: 504
score: 98.830712890625
patch: return val 1 ? true : val 1 ;
rank: 504
score: 98.67745971679688
patch: return - val 1 ? - val $NUMBER$ : 0 ;
rank: 504
score: 98.6683349609375
patch: return 0 * ( val 1 ;
rank: 504
score: 98.62227376302083
patch: return - val 1 ; val 1 { return 0 + val 1 ;
rank: 505
score: 98.9263407389323
patch: return Long . parse CaMeL Long ( - ( long ;
rank: 505
score: 98.91322544642857
patch: throw new Illegal CaMeL Argument CaMeL Exception ( $STRING$ ; case $NUMBER$ :
rank: 505
score: 98.87857055664062
patch: return - 1 1 ; else { return - 1 ;
rank: 505
score: 98.8412373860677
patch: return - val 1 ; value * ; - 1 ;
rank: 505
score: 98.7499667080966
patch: return - - val 1 * - val 1 ;
rank: 505
score: 98.67703683035714
patch: return val 1 . int CaMeL Value ( ) ; case 1 :
rank: 505
score: 98.66825866699219
patch: result = 0 * val 1 ;
rank: 505
score: 98.62200927734375
patch: return - 1 ; System .
rank: 506
score: 98.9261983235677
patch: return - val $NUMBER$ ? - 1 : - 1 ;
rank: 506
score: 98.87840576171875
patch: return - $NUMBER$ 1 ; return - $NUMBER$ ;
rank: 506
score: 98.84099872295673
patch: return - 1 ; return 0 ; return - val 1 ;
rank: 506
score: 98.68724907769098
patch: return - 1 : return - 1 ;
rank: 506
score: 98.67646928267045
patch: return - val $NUMBER$ ? 0 : val $NUMBER$ ;
rank: 506
score: 98.66654968261719
patch: return 0 1 * val $NUMBER$ ;
rank: 506
score: 98.62200520833333
patch: return - 1 ; return - 1 ; return - 1 ; break ;
rank: 507
score: 98.92556762695312
patch: return Long . Na CaMeL N ? - 1 : ;
rank: 507
score: 98.91314019097223
patch: assert val 1 == 0 : $STRING$ ;
rank: 507
score: 98.87813313802083
patch: return - 1 return - val 1 ;
rank: 507
score: 98.8390362079327
patch: return - 0 ; val 1 { return - val 1 ;
rank: 507
score: 98.68635559082031
patch: return - Double + val 1 ;
rank: 507
score: 98.62194010416667
patch: return - val 1 ; compare - 1 : return - val 1 ;
rank: 508
score: 98.91309611002605
patch: return - val $NUMBER$ ; default : return val 1 ;
rank: 508
score: 98.8388671875
patch: } return - 1 ;
rank: 508
score: 98.82692649147727
patch: return - val 1 ? - $NUMBER$ : 0 ;
rank: 508
score: 98.68505181206598
patch: return ( - $NUMBER$ ) * 0 ;
rank: 508
score: 98.67510114397321
patch: return safe CaMeL Multiply ( val $NUMBER$ , Math . 0 ) ;
rank: 508
score: 98.66036987304688
patch: return null ;
rank: 508
score: 98.6207275390625
patch: return - val 1 ; - 1 / / / / / / ;
rank: 509
score: 98.92482503255208
patch: return Long . Na CaMeL N ? - val 1 ;
rank: 509
score: 98.87778930664062
patch: return - 1 ; } else return 1 ;
rank: 509
score: 98.83885779747597
patch: if - val 1 ; try { return - val 1 ;
rank: 509
score: 98.82673783735795
patch: return val 1 == 0 ? $NUMBER$ : 0 ;
rank: 509
score: 98.74830211292614
patch: return false ; case 1 : return - 1 ;
rank: 509
score: 98.68404134114583
patch: case val 1 : return - 1 ;
rank: 509
score: 98.67488606770833
patch: float val 1 = - val 1 ;
rank: 509
score: 98.61940104166666
patch: return - val 1 ; val 1 return - val 1 ; break ;
rank: 510
score: 98.92474975585938
patch: return - 1 ; default : return 0 ;
rank: 510
score: 98.91274007161458
patch: return val 1 ; case val 1 :
rank: 510
score: 98.87774658203125
patch: return 0 - - val 1 ;
rank: 510
score: 98.83883666992188
patch: return 1 ; return - 1 ;
rank: 510
score: 98.68399386935764
patch: return - 0 ? 0 : $NUMBER$ ;
rank: 510
score: 98.67479790581598
patch: return ( Double ) - val $NUMBER$ ;
rank: 510
score: 98.61902669270833
patch: return - 1 ; - 1 : return - 1 ; - 1 ;
rank: 511
score: 98.92474365234375
patch: return val 1 && - - val 1 ;
rank: 511
score: 98.91224016462054
patch: return - Math . min ( val 1 , val 1 ) ;
rank: 511
score: 98.87724165482955
patch: return - 1 ; else return - val $NUMBER$ ;
rank: 511
score: 98.68392605251736
patch: return - $STRING$ ? 0 : 1 ;
rank: 511
score: 98.65903145926339
patch: return this . val 1 ;
rank: 511
score: 98.61858367919922
patch: return - val 1 ; - 1 : return - val 1 ; break ;
rank: 512
score: 98.92450823102679
patch: return - val $NUMBER$ ; ;
rank: 512
score: 98.91219075520833
patch: if ( val 1 <= 0 ) return val 1 ;
rank: 512
score: 98.8771464029948
patch: return - 1 ; - $NUMBER$ : return - 1 ;
rank: 512
score: 98.83820049579327
patch: return - val 1 ; 1 1 * - val 1 ;
rank: 512
score: 98.68379041883681
patch: return new long ( - 1 ) ;
rank: 512
score: 98.67327880859375
patch: return safe CaMeL Multiply ( val 1 , Math . Long ) ;
rank: 512
score: 98.65802001953125
patch: else switch ( val $NUMBER$ ) {
rank: 512
score: 98.61849975585938
patch: return - val 1 ; - 1 / / / / / val 1 ;
rank: 513
score: 98.92410888671876
patch: return val 1 << - - val 1 ;
rank: 513
score: 98.87690565321181
patch: return - 1 1 / val 1 ;
rank: 513
score: 98.83773099459134
patch: return - 1 ; ; - 1 return - val 1 ;
rank: 513
score: 98.82451714409723
patch: return 0 ; case 1 : return 0
rank: 513
score: 98.68370056152344
patch: return - $STRING$ + val $NUMBER$ ;
rank: 513
score: 98.67262620192308
patch: return - val $NUMBER$ ; case 0 : return val $NUMBER$ ;
rank: 513
score: 98.65721893310547
patch: throw new $STRING$ + val 1 ;
rank: 514
score: 98.92380777994792
patch: return - val $NUMBER$ | val 1 ;
rank: 514
score: 98.911376953125
patch: return val 1 ; case val $NUMBER$ : return val 1 ;
rank: 514
score: 98.87563254616477
patch: return - $NUMBER$ ? 0 : - val 1 ;
rank: 514
score: 98.83751502403847
patch: return - val 1 ; - 1 ; - - 1 ;
rank: 514
score: 98.824462890625
patch: return Math . case ( val 1 , val $NUMBER$ ) ;
rank: 514
score: 98.68351527622768
patch: return - + val 1 ;
rank: 514
score: 98.67261681189903
patch: return - val 1 ? val 1 : - val 1 ;
rank: 514
score: 98.65460205078125
patch: else return 0 * val 1 ;
rank: 514
score: 98.61686197916667
patch: return - val 1 ; - 1 + val 1 / val 1 ;
rank: 515
score: 98.92278497869319
patch: return val $NUMBER$ ; default : return - 1 ;
rank: 515
score: 98.8372333233173
patch: return - 1 ; return - 0 ; ; - 1 ;
rank: 515
score: 98.74462890625
patch: if ( val $NUMBER$ > 0 ) return 0 ;
rank: 515
score: 98.68181016710069
patch: return - 1 ? 0 : 1 ;
rank: 515
score: 98.65456136067708
patch: return $NUMBER$ * 0 ;
rank: 515
score: 98.616796875
patch: return - val 1 ; return - 1 ; return - val 1 ;
rank: 516
score: 98.92270914713542
patch: return Double . Na CaMeL N ? - val 1 ;
rank: 516
score: 98.87384033203125
patch: return - val 1 ; case 1 : return $NUMBER$ ;
rank: 516
score: 98.835693359375
patch: return - val 1 ; - 1 return - 1 ;
rank: 516
score: 98.68049839564732
patch: return Math - val 1 ;
rank: 516
score: 98.67220633370536
patch: return - val 1 ; case 0 : return val 1 ; }
rank: 516
score: 98.65440368652344
patch: return val $NUMBER$ * - $NUMBER$ ;
rank: 516
score: 98.61659458705357
patch: return val 1 ; / ;
rank: 517
score: 98.922607421875
patch: return val 1 % - - val 1 ;
rank: 517
score: 98.87274169921875
patch: return - 0 - - val 1 ;
rank: 517
score: 98.82399495442708
patch: return val 1 . safe CaMeL Multiply ( 1 1 ;
rank: 517
score: 98.74339710582386
patch: return val 1 * - $NUMBER$ * - $NUMBER$ ;
rank: 517
score: 98.67218017578125
patch: return - val $NUMBER$ ; case 0 : return - val 1 ;
rank: 517
score: 98.6534194946289
patch: switch ( val 1 ) { }
rank: 517
score: 98.6148193359375
patch: return - val 1 ; / / * / return - val 1 ;
rank: 518
score: 98.9224365234375
patch: return - val 1 - val 1 1 ;
rank: 518
score: 98.91058349609375
patch: return val $NUMBER$ - val 1 ;
rank: 518
score: 98.87244762073864
patch: return - 1 ; / * return val 1 ;
rank: 518
score: 98.8345235188802
patch: return - 1 ; - 1 ; case val 1 ;
rank: 518
score: 98.82230631510417
patch: return - val 1 ? val 1 : - 1 ;
rank: 518
score: 98.74262029474431
patch: return value 1 * val $NUMBER$ * val $NUMBER$ ;
rank: 518
score: 98.67980278862848
patch: return ( ( long ) 0 ) ;
rank: 518
score: 98.6720703125
patch: if ( Double . < val 1 ) {
rank: 518
score: 98.6507339477539
patch: return - 0 * - $NUMBER$ ;
rank: 518
score: 98.614697265625
patch: return - val 1 ; ; - 1 : return - val 1 ;
rank: 519
score: 98.87183634440105
patch: return - 1 ; else { return - $NUMBER$ ; }
rank: 519
score: 98.83444448617789
patch: return - $NUMBER$ ; val 1 : return - val 1 ;
rank: 519
score: 98.74260919744319
patch: if ( val 1 == 1 ) return 0 ;
rank: 519
score: 98.67918565538194
patch: return - ) ? 0 : 0 ;
rank: 519
score: 98.67153930664062
patch: return ( val 1 || val $NUMBER$ ) ;
rank: 519
score: 98.65066964285714
patch: try { return val 1 ;
rank: 519
score: 98.610986328125
patch: return - val 1 ; compare 1 : return - - val 1 ;
rank: 520
score: 98.92169189453125
patch: return val 1 * ( - val 1 ;
rank: 520
score: 98.91007777622768
patch: return - val $NUMBER$ ; case $NUMBER$ : return - val 1 ;
rank: 520
score: 98.87160422585227
patch: return - $NUMBER$ ? - 1 : val $NUMBER$ ;
rank: 520
score: 98.8342754657452
patch: return 0 ; return - val 1 ; - - 1 ;
rank: 520
score: 98.67108709161931
patch: return val $NUMBER$ ? val 1 : val $NUMBER$ ;
rank: 520
score: 98.6109619140625
patch: return - 1 ; - 1 + val 1 ; return - 1 ;
rank: 521
score: 98.90944602272727
patch: try { return - val 1 ; } catch ;
rank: 521
score: 98.83402797154018
patch: return - 1 ; return - val 1 ; ; - 1 ;
rank: 521
score: 98.67851257324219
patch: return Double + - val 1 ;
rank: 521
score: 98.67089233398437
patch: return ( val 1 ) * val $NUMBER$ ;
rank: 521
score: 98.64753069196429
patch: return return - val 1 ;
rank: 521
score: 98.61046549479167
patch: return - 1 ; / / / / / / / val 1 ;
rank: 522
score: 98.9210205078125
patch: return val 1 % - val 1 1 ;
rank: 522
score: 98.9092305501302
patch: if ( val 1 == 0 ; return val 1 ;
rank: 522
score: 98.87134399414063
patch: return - 1 ; if return - $NUMBER$ ;
rank: 522
score: 98.83394368489583
patch: return - val 1 ; - 1 ; val 1 {
rank: 522
score: 98.67676459418402
patch: return - 0 ? $STRING$ : $STRING$ ;
rank: 522
score: 98.63995361328125
patch: return - 1 : val 1 ;
rank: 522
score: 98.60955403645833
patch: return val 1 ; return - val 1 ; break ; - 1 ;
rank: 523
score: 98.92039794921875
patch: return val 1 * - val $NUMBER$ 1 ;
rank: 523
score: 98.86978759765626
patch: return - val 1 ; * * * /
rank: 523
score: 98.83387974330357
patch: return - 1 ; ; - $NUMBER$ : return - val 1 ;
rank: 523
score: 98.8211669921875
patch: return - val 1 * val 1 * val $NUMBER$
rank: 523
score: 98.67564392089844
patch: return value 1 * val $NUMBER$ ;
rank: 523
score: 98.67009819878473
patch: return val 1 ; case - 1 :
rank: 523
score: 98.63899230957031
patch: return new Integer ( val 1 ;
rank: 523
score: 98.60862630208334
patch: return - 1 ; val 1 { try { return - val 1 ;
rank: 524
score: 98.92007446289062
patch: return val 1 * val 1 * - val 1 ;
rank: 524
score: 98.90888323102679
patch: return Integer . parse CaMeL Int ( - val 1 ) ; ;
rank: 524
score: 98.86931818181819
patch: return - 1 ; } if return - 1 ;
rank: 524
score: 98.83372145432692
patch: return - 1 ; - $NUMBER$ ; return - val 1 ;
rank: 524
score: 98.67521837022569
patch: return ( - 1 ) + 0 ;
rank: 524
score: 98.67007446289062
patch: return true ; case 0 : return - val 1 ;
rank: 524
score: 98.63524518694196
patch: return - 1 * 1 ;
rank: 524
score: 98.60856119791667
patch: return - 1 ; val 1 { return - 1 ; - 1 ;
rank: 525
score: 98.83329264322917
patch: return return - val 1 ; return - val 1 ;
rank: 525
score: 98.74030095880681
patch: return - 0 * val 1 * val $NUMBER$ ;
rank: 525
score: 98.67003038194444
patch: return ( Integer ) - val $NUMBER$ ;
rank: 525
score: 98.6338882446289
patch: return max 1 * val 1 ;
rank: 525
score: 98.60703125
patch: return - val 1 ; / / / / / / val 1 ;
rank: 526
score: 98.9193827311198
patch: return - val $NUMBER$ ? 0 : - val 1 ;
rank: 526
score: 98.8690694173177
patch: return - 1 ; val 1 : return - $NUMBER$ ;
rank: 526
score: 98.83327073317308
patch: return - val 1 ; - 1 ; return - 0 ;
rank: 526
score: 98.81817626953125
patch: return val 1 * val 1 * 0
rank: 526
score: 98.67498779296875
patch: case 0 : return - 0 ;
rank: 526
score: 98.60678100585938
patch: return - 1 ; return - 1 ; val 1 { return val 1 ;
rank: 527
score: 98.91928439670139
patch: return - val 1 % val 1 ;
rank: 527
score: 98.90636189778645
patch: if ( val 1 < 0 ) return - 1 ;
rank: 527
score: 98.86871948242188
patch: return - $NUMBER$ ; return - 1 ; else
rank: 527
score: 98.83314005533855
patch: return - - 1 ; try { return - 1 ;
rank: 527
score: 98.67496490478516
patch: return new - - val 1 ;
rank: 527
score: 98.63135782877605
patch: return 0 * $STRING$ ;
rank: 527
score: 98.606201171875
patch: return - val 1 ; while val 1 : return - val 1 ;
rank: 528
score: 98.91770629882812
patch: return val 1 >> - - val 1 ;
rank: 528
score: 98.90621948242188
patch: return Math . abs ( - val 1 ) ; ;
rank: 528
score: 98.86867268880208
patch: return - val 1 ; * * /
rank: 528
score: 98.83306012834821
patch: return - val 1 ; - 1 { return - val 1 ;
rank: 528
score: 98.8177020733173
patch: return ( val 1 * val $NUMBER$ * val $NUMBER$ ) ;
rank: 528
score: 98.67286682128906
patch: return ( - - 1 ) ;
rank: 528
score: 98.66963413783482
patch: return ( val 1 ) ; case 0 : return val 1 ;
rank: 528
score: 98.62947082519531
patch: return 0 $NUMBER$ * val 1 ;
rank: 528
score: 98.60602213541667
patch: return - val 1 ; - 1 / * / return - 1 ;
rank: 529
score: 98.91764322916667
patch: return ( val 1 & - 1 ;
rank: 529
score: 98.90581805889423
patch: if ( val 1 != - 1 ) return val 1 ;
rank: 529
score: 98.86740112304688
patch: return $NUMBER$ + - val 1 ;
rank: 529
score: 98.83254770132211
patch: return - 1 ; ; value { return - val 1 ;
rank: 529
score: 98.73842551491477
patch: return 0 ; case 1 : else return 0 ;
rank: 529
score: 98.67214965820312
patch: return - - - - 1 ;
rank: 529
score: 98.62859344482422
patch: return Long ? 0 : 0 ;
rank: 529
score: 98.60533142089844
patch: return - 1 ; val 1 { return - 1 + - val 1 ;
rank: 530
score: 98.9173583984375
patch: return - val $NUMBER$ & - val 1 ;
rank: 530
score: 98.9051044170673
patch: return Math . max ( - val 1 , 0 ) ;
rank: 530
score: 98.86694946289063
patch: return - val 1 ; else return $NUMBER$ ;
rank: 530
score: 98.83231608072917
patch: return - val 1 ; - - 1 return 0 ;
rank: 530
score: 98.73728249289773
patch: return - val 1 * val $NUMBER$ * 1 ;
rank: 530
score: 98.66927396334134
patch: int val $NUMBER$ = safe CaMeL Multiply ( val $NUMBER$ ) ;
rank: 530
score: 98.62693786621094
patch: switch ( val $NUMBER$ ) { }
rank: 531
score: 98.91713460286458
patch: return - Double . POSITIVE _ INFINITY ;
rank: 531
score: 98.90493539663461
patch: return - - 1 ; case 1 : return val 1 ;
rank: 531
score: 98.81702677408855
patch: return Math . case ( val 1 , val 1 )
rank: 531
score: 98.73671468098958
patch: if ( val 1 > 0 ) return - 1 ;
rank: 531
score: 98.66927337646484
patch: return ( float ) val $NUMBER$ ;
rank: 531
score: 98.62672932942708
patch: return + val 1 ;
rank: 531
score: 98.60220540364584
patch: return - val 1 ; val 1 { - val 1 / 1 ;
rank: 532
score: 98.91656494140625
patch: return ( - val 1 ;
rank: 532
score: 98.90446333451705
patch: if ( val 1 ; return - val $NUMBER$ ;
rank: 532
score: 98.86681019176136
patch: return - $NUMBER$ ; * else return - 1 ;
rank: 532
score: 98.83092322716347
patch: return - val 1 ; val 1 * - val 1 ;
rank: 532
score: 98.736572265625
patch: return val 1 * - - $NUMBER$ ;
rank: 532
score: 98.66860622829861
patch: return ( val $NUMBER$ * 0 ) ;
rank: 532
score: 98.6256103515625
patch: else return val 1 ;
rank: 532
score: 98.60205891927083
patch: return - 1 ; - 1 ? - 1 : - val 1 ;
rank: 533
score: 98.90432504507211
patch: return Math . min ( - val 1 , val $NUMBER$ ;
rank: 533
score: 98.86658824573864
patch: return - 1 ; * * return - 1 ;
rank: 533
score: 98.8308817545573
patch: return - val 1 ; 0 / ; val 1 ;
rank: 533
score: 98.81608442826705
patch: return 0 ? 0 : val 1 * 0 ;
rank: 533
score: 98.7357889811198
patch: return ( val 1 * val 1 * val $NUMBER$ ;
rank: 533
score: 98.66785685221355
patch: return - val $NUMBER$ ? val 1 : val 1 ;
rank: 533
score: 98.66628592354911
patch: return Long + val 1 ;
rank: 533
score: 98.6241455078125
patch: return - - 1 * 0 ;
rank: 533
score: 98.60205078125
patch: return - val 1 ; val 1 { return - - val $NUMBER$ ;
rank: 534
score: 98.91555786132812
patch: return Long . parse CaMeL Long ( ( String ) ;
rank: 534
score: 98.90421236478366
patch: return Math . ceil ( val 1 ) ; case 1 :
rank: 534
score: 98.83087158203125
patch: return - val 1 ; try return - val 1 ;
rank: 534
score: 98.81584028764205
patch: return - 1 ? val 1 : val $NUMBER$ ;
rank: 534
score: 98.73536173502605
patch: return - 0 ; case 0 : return - 1 ;
rank: 534
score: 98.66457693917411
patch: return - - value 1 ;
rank: 534
score: 98.62251281738281
patch: return new Long ( val 1 ;
rank: 534
score: 98.60140787760416
patch: return - val 1 ; case val 1 : return - val 1 ;
rank: 535
score: 98.91452026367188
patch: return Math . min ( - val 1 ;
rank: 535
score: 98.86573282877605
patch: return - 0 ; - 1 : return - 1 ;
rank: 535
score: 98.83070591517857
patch: return - val 1 ; / ? { return - val 1 ;
rank: 535
score: 98.73519897460938
patch: long val 1 = 0 ; return - val 1 ;
rank: 535
score: 98.66770241477273
patch: return val $NUMBER$ ? val 1 : val 1 ;
rank: 535
score: 98.6612319946289
patch: return - this . val 1 ;
rank: 535
score: 98.59744262695312
patch: return - val 1 ; - val 1 : return - - val 1 ;
rank: 536
score: 98.8156268780048
patch: throw new Arithmetic CaMeL Exception ( val 1 , val 1 +
rank: 536
score: 98.73499552408855
patch: return - - 1 * val 1 * val 1 ;
rank: 536
score: 98.66765887920673
patch: return - val 1 ; case 0 : = val 1 ;
rank: 536
score: 98.66107940673828
patch: - 1 : return val 1 ;
rank: 536
score: 98.597021484375
patch: return - 1 ; val 1 { return - - 1 ; break ;
rank: 537
score: 98.8655118075284
patch: return - 1 ; } return - - 1 ;
rank: 537
score: 98.81521371694711
patch: throw new Arithmetic CaMeL Exception ( val 1 + val 1 ;
rank: 537
score: 98.73477172851562
patch: return val 1 * - val $NUMBER$ * val $NUMBER$ ;
rank: 537
score: 98.596923828125
patch: return - val 1 ; ; / * / return - val 1 ;
rank: 538
score: 98.91326904296875
patch: return - val 1 ; case Integer . 1 : ;
rank: 538
score: 98.86545632102273
patch: return - $NUMBER$ ; * * return - 1 ;
rank: 538
score: 98.81501908735795
patch: return val 1 ? - $NUMBER$ : val 1 ;
rank: 538
score: 98.6669452373798
patch: return - val 1 ? - val $NUMBER$ : val $NUMBER$ ;
rank: 538
score: 98.59674072265625
patch: return - 1 ; * ;
rank: 539
score: 98.91275024414062
patch: return Long . Na CaMeL N ;
rank: 539
score: 98.86494584517045
patch: return val 1 ? - 1 : - $NUMBER$ ;
rank: 539
score: 98.6664706143466
patch: return ( long ) val 1 ; case 0 :
rank: 539
score: 98.61767578125
patch: return 0 * 0 * true ;
rank: 539
score: 98.59660788143383
patch: return - val 1 ; val 1 { return - - val 1 ; break ;
rank: 540
score: 98.90158913352273
patch: return $NUMBER$ ; case 1 : return val $NUMBER$ ;
rank: 540
score: 98.86489035866477
patch: return 0 ; * * return - val 1 ;
rank: 540
score: 98.82883707682292
patch: return - val 1 ; case 1 : return false ;
rank: 540
score: 98.66606794084821
patch: return val 1 . long CaMeL Value ( ) || val $NUMBER$ ;
rank: 540
score: 98.61744689941406
patch: return - 1 * - 0 ;
rank: 540
score: 98.59637044270833
patch: return - val 1 ; / * / / return - val 1 ;
rank: 541
score: 98.90145438058036
patch: return Math . min ( - val 1 , - val $NUMBER$ ;
rank: 541
score: 98.86464621803977
patch: return - val $NUMBER$ ; } return - 1 ;
rank: 541
score: 98.82841273716518
patch: return - 1 ; return - val 1 ; - - 1 ;
rank: 541
score: 98.812255859375
patch: return - 0 ? val 1 : val $NUMBER$ ;
rank: 541
score: 98.73377482096355
patch: return 0 * ( - 1 * val 1 ) ;
rank: 541
score: 98.65686907087054
patch: val 1 = - 1 ;
rank: 541
score: 98.61404854910714
patch: return - 1 * false ;
rank: 541
score: 98.59627278645833
patch: return - 1 ; / / / / / return - val 1 ;
rank: 542
score: 98.90114920479911
patch: return - Math . max ( val 1 , val 1 ) ;
rank: 542
score: 98.8641866048177
patch: return - val 1 ; - 1 : return $NUMBER$ ;
rank: 542
score: 98.8274395282452
patch: return val 1 ; - 1 ; return - val 1 ;
rank: 542
score: 98.65620930989583
patch: return Double . 0 ;
rank: 542
score: 98.59315592447916
patch: return - val 1 ; break ; val 1 return - val 1 ;
rank: 543
score: 98.90090506417411
patch: return Math . round ( - val 1 * val 1 ) ;
rank: 543
score: 98.86362033420139
patch: return val 1 ; return val $NUMBER$ ;
rank: 543
score: 98.82729085286458
patch: return - val 1 ; 0 ; case val 1 ;
rank: 543
score: 98.73300170898438
patch: return 0 ; case 0 : return - val $NUMBER$ ;
rank: 543
score: 98.61226654052734
patch: return 0 1 * - $NUMBER$ ;
rank: 544
score: 98.91090087890625
patch: return val 1 - - val 1 1 ;
rank: 544
score: 98.82647705078125
patch: return - val 1 ; - 1 - val 1 ;
rank: 544
score: 98.66485040838069
patch: double val 1 = val $NUMBER$ * val $NUMBER$ ;
rank: 544
score: 98.65516880580357
patch: return - & - 1 ;
rank: 544
score: 98.59146321614584
patch: return - val 1 ; - 1 / * / return val 1 ;
rank: 545
score: 98.90976784446023
patch: return - val 1 | - - val $NUMBER$ ;
rank: 545
score: 98.82611553485577
patch: return - 1 ; ; - 1 : return val 1 ;
rank: 545
score: 98.66468505859375
patch: return val $NUMBER$ ? 0 : val $NUMBER$ ;
rank: 545
score: 98.61100260416667
patch: return 0 * false ;
rank: 545
score: 98.59117838541667
patch: return - 1 ; if - val 1 : return - val 1 ;
rank: 546
score: 98.90843709309895
patch: return - - 1 ? - 1 : - 1 ;
rank: 546
score: 98.82603236607143
patch: return - 1 ; case - 1 : return - val 1 ;
rank: 546
score: 98.8107401529948
patch: return val 1 * 0 ? 0 : val 1 ;
rank: 546
score: 98.6644795735677
patch: return - val $NUMBER$ ? val 1 : val $NUMBER$ ;
rank: 546
score: 98.61002604166667
patch: return += val 1 ;
rank: 546
score: 98.59073079427084
patch: return - val 1 ; equals val 1 : return - val 1 ;
rank: 547
score: 98.899658203125
patch: return val 1 ; case 1 : break val 1 ;
rank: 547
score: 98.86304728190105
patch: return - 1 - - - - - val 1 ;
rank: 547
score: 98.6641845703125
patch: return ( long ) val 1 * val $NUMBER$ ;
rank: 547
score: 98.60978480747768
patch: return - 0 * 0 ;
rank: 547
score: 98.59068196614584
patch: return - 1 ; return - 1 ; * / return - 1 ;
rank: 548
score: 98.86273748224431
patch: return - 1 1 - - - val 1 ;
rank: 548
score: 98.82425362723214
patch: return - val 1 ; - - 1 return - val 1 ;
rank: 548
score: 98.80832926432292
patch: return val 1 * case 1 : return val 1 ;
rank: 548
score: 98.66403432992789
patch: return ( - val 1 ) ? 0 : val 1 ;
rank: 548
score: 98.60911560058594
patch: return length 1 * val 1 ;
rank: 548
score: 98.58981119791666
patch: return - val 1 ; val 1 : return - - val 1 ;
rank: 549
score: 98.89912245008681
patch: if ( - 1 != val 1 ;
rank: 549
score: 98.86153835720486
patch: return - val 1 - - 1 ;
rank: 549
score: 98.807861328125
patch: return safe CaMeL Multiply ( val 1 , val $NUMBER$ )
rank: 549
score: 98.66357421875
patch: return Integer . value CaMeL Of ( val 1 )
rank: 549
score: 98.58975423177084
patch: return - 1 ; val 1 { return - val 1 ; / ;
rank: 550
score: 98.90743408203124
patch: return val 1 | - val 1 1 ;
rank: 550
score: 98.89832899305556
patch: sb . append ( val 1 ) ;
rank: 550
score: 98.86146129261364
patch: return - $NUMBER$ ; else { return - 1 ;
rank: 550
score: 98.82296752929688
patch: return - 1 ; case 1 : return - 0 ;
rank: 550
score: 98.80763938210227
patch: return 0 * 0 ? 0 : val 1 ;
rank: 550
score: 98.72675916883681
patch: return ; case 1 : return 0 ;
rank: 550
score: 98.66276041666667
patch: return val 1 == 0 ? 0 : val $NUMBER$ ;
rank: 550
score: 98.64549255371094
patch: return - + - val 1 ;
rank: 550
score: 98.5879638671875
patch: return - val 1 ; - 1 + val 1 / - 1 ;
rank: 551
score: 98.90735880533855
patch: return - val $NUMBER$ ; } return - val 1 ;
rank: 551
score: 98.89830433238636
patch: return - 1 ; case 1 : case 1 :
rank: 551
score: 98.86127263849431
patch: return - val 1 ; if return - $NUMBER$ ;
rank: 551
score: 98.82279968261719
patch: return - 1 ; 1 1 ;
rank: 551
score: 98.80748155381944
patch: return $NUMBER$ ? - 1 : 0 ;
rank: 551
score: 98.6450424194336
patch: return Integer ? 1 : 0 ;
rank: 551
score: 98.58772786458333
patch: return - val 1 ; val 1 { return Integer + val 1 ;
rank: 552
score: 98.90660264756944
patch: return - val $NUMBER$ / val 1 ;
rank: 552
score: 98.86110617897727
patch: return - $NUMBER$ val 1 ; return - 1 ;
rank: 552
score: 98.8223876953125
patch: return - val 1 ; case - 1 return - val 1 ;
rank: 552
score: 98.80699573863636
patch: return val 1 ? - 0 : val 1 ;
rank: 552
score: 98.72513834635417
patch: return val 1 . run ( ) ;
rank: 552
score: 98.66185913085937
patch: int max = val 1 * val $NUMBER$ ;
rank: 552
score: 98.64486694335938
patch: case $NUMBER$ : return - 0 ;
rank: 552
score: 98.6042709350586
patch: if ( true ) return 0 ;
rank: 552
score: 98.5870361328125
patch: return - 1 ; return - 1 ; - 1 ; return - 1 ;
rank: 553
score: 98.9052734375
patch: return Long . parse CaMeL Long ( - 1 ; ;
rank: 553
score: 98.8609286221591
patch: return 0 ; val 1 : return - 1 ;
rank: 553
score: 98.822265625
patch: return - - 1 ; - 1 ; - 1 ;
rank: 553
score: 98.8064852627841
patch: return val 1 ? $NUMBER$ : - val 1 ;
rank: 553
score: 98.72294108072917
patch: return - val $NUMBER$ * - 0 ;
rank: 553
score: 98.6614990234375
patch: return false ; case 0 : return val 1 ;
rank: 553
score: 98.64351654052734
patch: safe CaMeL Multiply ( $STRING$ ) ;
rank: 553
score: 98.58574676513672
patch: return - val 1 ; break ; val 1 : return - val 1 ;
rank: 554
score: 98.89761352539062
patch: break val 1 ; case 1 : return val 1 ;
rank: 554
score: 98.86008522727273
patch: return - 1 ; / * return - $NUMBER$ ;
rank: 554
score: 98.822265625
patch: return - val 1 ; case 1 : return true ;
rank: 554
score: 98.66145833333333
patch: return val 1 ? - val $NUMBER$ : val $NUMBER$ ;
rank: 554
score: 98.63924407958984
patch: case val 1 : return 0 ;
rank: 554
score: 98.6030044555664
patch: return $NUMBER$ * 0 * 0 ;
rank: 554
score: 98.585107421875
patch: return - 1 ; - 1 / / / / return - 1 ;
rank: 555
score: 98.90421295166016
patch: return Double . Na CaMeL N ;
rank: 555
score: 98.89700082632211
patch: return - val 1 ; case 1 : break val 1 ;
rank: 555
score: 98.85932159423828
patch: return - $NUMBER$ ? - 1 ;
rank: 555
score: 98.82200113932292
patch: return - val 1 ; * | - val 1 ;
rank: 555
score: 98.66141451322116
patch: return safe CaMeL Multiply ( val 1 ) * val 1 ;
rank: 555
score: 98.63912200927734
patch: return new long 0 val 1 ;
rank: 555
score: 98.60075378417969
patch: return 0 * - - 1 ;
rank: 555
score: 98.58485514322916
patch: return - 1 ; return - 1 ; break ; return val 1 ;
rank: 556
score: 98.90377807617188
patch: return - ( - val 1 - val 1 ) ;
rank: 556
score: 98.8968838778409
patch: return val 1 + val 1 ; case 1 :
rank: 556
score: 98.85926402698864
patch: return - val 1 ; else return - $NUMBER$ ;
rank: 556
score: 98.8219502766927
patch: return - val 1 ; 1 ? - val 1 :
rank: 556
score: 98.6613300030048
patch: return ( Double ) safe CaMeL Multiply ( val $NUMBER$ ) ;
rank: 556
score: 98.60072326660156
patch: return 0 ; case - 1 :
rank: 557
score: 98.90287017822266
patch: return - val 1 / $NUMBER$ ;
rank: 557
score: 98.89682345920139
patch: return Math . max - val 1 ;
rank: 557
score: 98.82146747295673
patch: return - val 1 ; value 1 = - val 1 ;
rank: 557
score: 98.66131591796875
patch: return long ) - val 1 ;
rank: 557
score: 98.635498046875
patch: return 0 ? 1 : 1 ;
rank: 557
score: 98.6005350748698
patch: return 0 * 1 ;
rank: 557
score: 98.58344268798828
patch: return - val 1 ; val 1 { return - - val 1 ; }
rank: 558
score: 98.90253295898438
patch: return - ( long ) - val $NUMBER$ ;
rank: 558
score: 98.89682241586539
patch: return Math . floor ( val 1 ) ; case 1 :
rank: 558
score: 98.85879516601562
patch: return - 1 ? val 1 : - val 1 ;
rank: 558
score: 98.8206787109375
patch: return - 1 ; - 1 ; case val 1 :
rank: 558
score: 98.80158827039931
patch: return 1 ? val 1 : 0 ;
rank: 558
score: 98.66127522786458
patch: try { return safe CaMeL Multiply ( val $NUMBER$ ) ;
rank: 558
score: 98.63534981863839
patch: val $NUMBER$ = val 1 ;
rank: 558
score: 98.60040893554688
patch: return 0 ; }
rank: 558
score: 98.58256312779018
patch: return - val 1 ; index
rank: 559
score: 98.8966064453125
patch: return ~ val 1 ; case 1 : return - 1 ;
rank: 559
score: 98.82052847055289
patch: return - 0 ; - 1 ; return - val 1 ;
rank: 559
score: 98.80015980113636
patch: return val 1 ? 1 : - val 1 ;
rank: 559
score: 98.66079477163461
patch: double safe CaMeL Multiply ( val 1 , val $NUMBER$ ) ;
rank: 559
score: 98.63429260253906
patch: return - Long + val 1 ;
rank: 559
score: 98.58256022135417
patch: return - val 1 ; val 1 { return - val 1 1 ;
rank: 560
score: 98.90233696831598
patch: return - val 1 / - 1 ;
rank: 560
score: 98.81944783528645
patch: return - val 1 ; - 0 + val 1 ;
rank: 560
score: 98.6607177734375
patch: return - val 1 * val $NUMBER$ ; }
rank: 560
score: 98.63353729248047
patch: return this ? 0 : 0 ;
rank: 560
score: 98.59884643554688
patch: return val 1 * case 0 ;
rank: 560
score: 98.58238932291667
patch: return - val 1 ; - val $NUMBER$ : return - val 1 ;
rank: 561
score: 98.89595249720982
patch: return Math . abs ( val 1 1 * val 1 ) ;
rank: 561
score: 98.85808771306819
patch: return - 0 1 ; else return val 1 ;
rank: 561
score: 98.81935337611607
patch: return - val 1 ; 0 : { return - val 1 ;
rank: 561
score: 98.66047886439732
patch: return safe CaMeL Multiply ( val 1 , val $NUMBER$ ) ; }
rank: 561
score: 98.58223179408482
patch: return compare - val 1 ;
rank: 562
score: 98.90178888494319
patch: return val 1 ; default : return 0 ; }
rank: 562
score: 98.8958231608073
patch: return val 1 == 0 ? 0 : - 1 ;
rank: 562
score: 98.85807661576705
patch: return - 1 ? - 1 : - $NUMBER$ ;
rank: 562
score: 98.81915752704327
patch: return - val 1 ; - 0 + - val 1 ;
rank: 562
score: 98.66042258522727
patch: return val 1 ? - val $NUMBER$ : 0 ;
rank: 562
score: 98.59674835205078
patch: return Math . ! val 1 ;
rank: 562
score: 98.58202311197917
patch: return - val 1 ; return - val 1 ; - val 1 ;
rank: 563
score: 98.90163167317708
patch: return Long . parse CaMeL Long ( - ( Integer ;
rank: 563
score: 98.85797119140625
patch: / * return - val 1 ;
rank: 563
score: 98.8191426595052
patch: return - val 1 ; FALSE return - val 1 ;
rank: 563
score: 98.65937151227679
patch: return val $NUMBER$ . long CaMeL Value ( ) ; case 1 :
rank: 563
score: 98.63121795654297
patch: return new Integer ( 0 ) ;
rank: 563
score: 98.59674072265625
patch: case 0 : return - $NUMBER$ ;
rank: 563
score: 98.58194173177084
patch: return - 1 ; val 1 { return - 1 ; / 1 ;
rank: 564
score: 98.90068359375
patch: return - val $NUMBER$ - - val $NUMBER$ ;
rank: 564
score: 98.89569963727679
patch: return Math . min ( - val 1 , - 1 ) ;
rank: 564
score: 98.85761052911931
patch: return - val 1 ; - 1 : break ;
rank: 564
score: 98.81902204241071
patch: return Boolean . value CaMeL Of ( - val 1 1 1 ;
rank: 564
score: 98.71487087673611
patch: return + val 1 * val $NUMBER$ ;
rank: 564
score: 98.65865325927734
patch: return - val 1 ; case 0
rank: 564
score: 98.62993621826172
patch: return Integer ? 0 : 1 ;
rank: 564
score: 98.59659576416016
patch: return 0 * - 1 ; }
rank: 564
score: 98.58124186197917
patch: return - val 1 ; return val 1 ; break ; - 1 ;
rank: 565
score: 98.89752807617188
patch: return Double . abs ( val 1 ) ;
rank: 565
score: 98.89568536931819
patch: return Math . - val 1 ; case 1 :
rank: 565
score: 98.85726928710938
patch: return - $NUMBER$ / val 1 ;
rank: 565
score: 98.81869506835938
patch: return - 1 ; val 1 ; case - 1 :
rank: 565
score: 98.71354844835069
patch: return 0 long 1 * val 1 ;
rank: 565
score: 98.6586162860577
patch: return ( ( long ) val 1 ) / val 1 ;
rank: 565
score: 98.59647369384766
patch: return 0 * $NUMBER$ * 0 ;
rank: 565
score: 98.58116048177084
patch: return ( val 1 - val 1 1 1 1 1 1 1 ;
rank: 566
score: 98.89728338068181
patch: if - val 1 : return - val 1 ;
rank: 566
score: 98.8954745205966
patch: return val 1 ; val 1 = - 1 ;
rank: 566
score: 98.81846516927084
patch: return - val 1 ; return - val 1 ; - - 1 ;
rank: 566
score: 98.65845836292614
patch: return ( ( long ) - val $NUMBER$ ) ;
rank: 566
score: 98.59537179129464
patch: return - 1 * $NUMBER$ ;
rank: 566
score: 98.58033040364583
patch: return - 1 ; - 1 ; * / return - val 1 ;
rank: 567
score: 98.8970059481534
patch: return val 1 * ( - val 1 ) ;
rank: 567
score: 98.89532001201923
patch: return val 1 == 0 ? 0 : - val 1 ;
rank: 567
score: 98.8570889559659
patch: return - 1 val 1 ; return - 1 ;
rank: 567
score: 98.81798377403847
patch: return - val 1 ; * / if - val 1 ;
rank: 567
score: 98.79623752170139
patch: return - 1 ? $NUMBER$ : 0 ;
rank: 567
score: 98.65819202769886
patch: return val 1 * ( long ) val 1 ;
rank: 567
score: 98.62654622395833
patch: return 0 val 1 ;
rank: 567
score: 98.57927389705883
patch: return - val 1 ; val 1 { return - - - - val 1 ;
rank: 568
score: 98.89470563616071
patch: return Long . parse CaMeL Long ( val 1 ; case 1 :
rank: 568
score: 98.85658772786458
patch: return $NUMBER$ ; return - val 1 ;
rank: 568
score: 98.81765512319711
patch: return - val 1 ; - 1 ; ; - 1 ;
rank: 568
score: 98.79524739583333
patch: return - 1 ? 0 : $NUMBER$ ;
rank: 568
score: 98.657958984375
patch: return val 1 ; case 0 : = val 1 ;
rank: 568
score: 98.59443664550781
patch: return Math ? $NUMBER$ : 0 ;
rank: 568
score: 98.57910970052083
patch: return - 1 ; / / / / / / return - 1 ;
rank: 569
score: 98.89569702148438
patch: return ( val 1 << - val 1 ;
rank: 569
score: 98.85602484809027
patch: return - 1 ; } else if ;
rank: 569
score: 98.8176040649414
patch: return - val 1 ; 0 :
rank: 569
score: 98.71085611979167
patch: return ( Boolean ) - val 1 ;
rank: 569
score: 98.65767996651786
patch: return - val $NUMBER$ ; }
rank: 569
score: 98.62350027901786
patch: return - [ 0 ] ;
rank: 569
score: 98.5943603515625
patch: return - 1 * $STRING$ ;
rank: 569
score: 98.57887369791666
patch: return - 1 ; - 1 ; / * / return - 1 ;
rank: 570
score: 98.89486694335938
patch: return - ( - val 1 ) * val 1 ;
rank: 570
score: 98.89423076923077
patch: return - 1 ; case val 1 : return val 1 ;
rank: 570
score: 98.85597737630208
patch: return - 1 ; } else return - val 1 ;
rank: 570
score: 98.81687418619792
patch: return 0 ; return - val 1 ; val 1 ;
rank: 570
score: 98.7946444424716
patch: return - 0 ? val 1 : - 1 ;
rank: 570
score: 98.65725473257211
patch: return Long . max ( val 1 , val 1 ) ;
rank: 570
score: 98.62173461914062
patch: return - Math - val 1 ;
rank: 570
score: 98.58781433105469
patch: return - $NUMBER$ : val 1 ;
rank: 570
score: 98.57762858072917
patch: return - val 1 ; return - val 1 ; / val 1 ;
rank: 571
score: 98.89402940538194
patch: return Math . ceil - val 1 ;
rank: 571
score: 98.85568576388889
patch: return - 1 ; long - 1 ;
rank: 571
score: 98.81639862060547
patch: return - 1 ; 1 * /
rank: 571
score: 98.79387872869319
patch: return val 1 == $NUMBER$ ? 0 : 0 ;
rank: 571
score: 98.58476257324219
patch: return 0 * 0 * 1 ;
rank: 571
score: 98.57757568359375
patch: return - val 1 ; val 1 { return 0 + - val 1 ;
rank: 572
score: 98.89426879882812
patch: return val 1 & - val 1 1 ;
rank: 572
score: 98.65639822823661
patch: return Math . min ( - val 1 , val $NUMBER$ ) ;
rank: 572
score: 98.62003871372768
patch: return - Double . 0 ;
rank: 572
score: 98.5835952758789
patch: return 0 * new - 1 ;
rank: 572
score: 98.57742309570312
patch: return - val 1 ; - 1 * / / return - val 1 ;
rank: 573
score: 98.8939208984375
patch: return Math . min ( val 1 , val 1 1 1 ;
rank: 573
score: 98.89322238498264
patch: return - val 1 ; default : ;
rank: 573
score: 98.81597430889423
patch: return - val 1 ; 1 ; return - val 1 ;
rank: 573
score: 98.79332733154297
patch: return 0 ? $NUMBER$ : 1 ;
rank: 573
score: 98.61860656738281
patch: case 1 : return - $NUMBER$ ;
rank: 573
score: 98.58272552490234
patch: return - ( val 1 ) ;
rank: 574
score: 98.8935077373798
patch: return val 1 ; case val 1 : return - 1 ;
rank: 574
score: 98.85440826416016
patch: return - val 1 1 1 ;
rank: 574
score: 98.81552559988839
patch: return val 1 ; ; - 1 : return - val 1 ;
rank: 574
score: 98.79253595525569
patch: return - val 1 ? - 1 : $NUMBER$ ;
rank: 574
score: 98.701416015625
patch: return - ( long ) - 1 ;
rank: 574
score: 98.6561787923177
patch: return ( ( val 1 ) / val 1 ) ;
rank: 574
score: 98.6153793334961
patch: return new int - val 1 ;
rank: 574
score: 98.58267647879464
patch: return 1 * - $NUMBER$ ;
rank: 574
score: 98.57626953125
patch: return - val 1 ; - 1 / / / / / / /
rank: 575
score: 98.8935038248698
patch: throw new ; case 1 : return - val 1 ;
rank: 575
score: 98.85419379340277
patch: return - 0 + - val $NUMBER$ ;
rank: 575
score: 98.81510103665866
patch: return - val 1 ; 0 : if - val 1 ;
rank: 575
score: 98.79165310329861
patch: return 0 ; case 0 : return 0
rank: 575
score: 98.70119222005208
patch: return 0 ; case 1 : break ;
rank: 575
score: 98.65614827473958
patch: return val 1 ? val $NUMBER$ : - val 1 ;
rank: 575
score: 98.57544759114583
patch: return - $NUMBER$ ; val 1 { return - val 1 ; break ;
rank: 576
score: 98.85416666666667
patch: return - val 1 ; else return - val $NUMBER$ ;
rank: 576
score: 98.81483968098958
patch: return - val 1 ; - - 1 ; / ;
rank: 576
score: 98.6557950106534
patch: return val 1 * val $NUMBER$ ; case 0 :
rank: 576
score: 98.5821533203125
patch: return long val 1 ;
rank: 576
score: 98.5753662109375
patch: return - 1 ; for - 1 : return - 1 ; break ;
rank: 577
score: 98.89219360351562
patch: return val 1 * - val 1 ; }
rank: 577
score: 98.85414817116477
patch: return - 1 ; } else { return 1 ;
rank: 577
score: 98.8145751953125
patch: return - val 1 ; return - val 1 ; ; - 1 ;
rank: 577
score: 98.65575062144886
patch: return ( long ) val 1 * val 1 ;
rank: 577
score: 98.5789794921875
patch: return 0 * + val 1 ;
rank: 577
score: 98.57427571614583
patch: return - val 1 ; - 1 / / / / / 1 ;
rank: 578
score: 98.89192708333333
patch: return val 1 ; default : return - - 1 ;
rank: 578
score: 98.85394841974431
patch: return - $NUMBER$ 1 ; else return val $NUMBER$ ;
rank: 578
score: 98.814453125
patch: return - 1 ; return - val 1 ; * ;
rank: 578
score: 98.69779968261719
patch: return - val $NUMBER$ * 0 ;
rank: 578
score: 98.65517752511161
patch: return - safe CaMeL Multiply ( val 1 , val $NUMBER$ ) ;
rank: 578
score: 98.61063385009766
patch: return new long ] { val 1
rank: 578
score: 98.57831682477679
patch: return Long - val 1 ;
rank: 578
score: 98.57325032552083
patch: return - val 1 ; return - val 1 ; break ; break ;
rank: 579
score: 98.89229642427884
patch: return val 1 ; ; case 1 : return val $NUMBER$ ;
rank: 579
score: 98.8915127840909
patch: return - ( val 1 | - val 1 ;
rank: 579
score: 98.81437174479167
patch: return - val 1 ; - 1 ; - 1 {
rank: 579
score: 98.69721137152777
patch: return - - 1 * val $NUMBER$ ;
rank: 579
score: 98.60935756138393
patch: return - - - $NUMBER$ ;
rank: 579
score: 98.57304382324219
patch: return - val 1 ; val 1 { return - val 1 ; / ;
rank: 580
score: 98.89132690429688
patch: if ( val $NUMBER$ == 0 ) return val 1 ;
rank: 580
score: 98.85170676491477
patch: return - 1 ; * / return - $NUMBER$ ;
rank: 580
score: 98.8142598470052
patch: return - val 1 + - - - val 1 ;
rank: 580
score: 98.69596354166667
patch: return - val 1 * value 1 ;
rank: 580
score: 98.6069844563802
patch: return & - 1 ;
rank: 581
score: 98.89124213324652
patch: if ( val 1 < val 1 ;
rank: 581
score: 98.89072672526042
patch: return - val $NUMBER$ ? $NUMBER$ : - val 1 ;
rank: 581
score: 98.85087585449219
patch: return - 1 1 val 1 ;
rank: 581
score: 98.814208984375
patch: return - 1 ; 0 * / return - val 1 ;
rank: 581
score: 98.69513617621527
patch: return - val $NUMBER$ * - $NUMBER$ ;
rank: 581
score: 98.60334777832031
patch: return 0 ? $STRING$ : $STRING$ ;
rank: 581
score: 98.57757568359375
patch: return val 1 ; return 0 ;
rank: 581
score: 98.57194010416667
patch: return - val 1 ; val 1 { return - val 1 ; ;
rank: 582
score: 98.89113362630208
patch: return - val 1 ; case $NUMBER$ : return 1 ;
rank: 582
score: 98.8501688639323
patch: return - 1 1 } else { return val 1 ;
rank: 582
score: 98.65491832386364
patch: return val 1 * val 1 ; case 0 :
rank: 582
score: 98.5771484375
patch: return - 0 * val $NUMBER$ ;
rank: 582
score: 98.57110188802083
patch: return - 1 ; break ; val 1 { return - - 1 ;
rank: 583
score: 98.89039916992188
patch: return - val $NUMBER$ ^ - val 1 ;
rank: 583
score: 98.85007546164773
patch: return - $NUMBER$ * - - - val $NUMBER$ ;
rank: 583
score: 98.81338266225961
patch: return - val 1 ; val 1 : return val 1 ;
rank: 583
score: 98.78342507102273
patch: return - 0 ? val 1 : - 0 ;
rank: 583
score: 98.65466918945313
patch: return ( val 1 ) ; case 0 :
rank: 583
score: 98.60006713867188
patch: return - max 1 ;
rank: 583
score: 98.57652282714844
patch: return 0 . - val 1 ;
rank: 583
score: 98.57099609375
patch: return - 1 ; - 1 * / return - 1 ; break ;
rank: 584
score: 98.89033203125
patch: return - val $NUMBER$ + - val 1 ;
rank: 584
score: 98.89019220525569
patch: sb . append ( val 1 ) ; break ;
rank: 584
score: 98.84992133246527
patch: return $NUMBER$ + - - val 1 ;
rank: 584
score: 98.69229465060764
patch: return val 1 * + val 1 ;
rank: 584
score: 98.59781646728516
patch: return Boolean ? 0 : 0 ;
rank: 584
score: 98.57601165771484
patch: return new $STRING$ + val 1 ;
rank: 584
score: 98.570849609375
patch: return - val 1 ; / / / / / / / / ;
rank: 585
score: 98.88995830829327
patch: return Math . min ( val $NUMBER$ , - val $NUMBER$ ;
rank: 585
score: 98.8497647372159
patch: return 0 ; - 1 : return - $NUMBER$ ;
rank: 585
score: 98.81241548978366
patch: return val 1 ; ; - 1 : return - 1 ;
rank: 585
score: 98.59715270996094
patch: return - 0 + val $NUMBER$ ;
rank: 585
score: 98.57591247558594
patch: return 0 * 1 * 0 ;
rank: 585
score: 98.56997884114584
patch: return - val 1 ; return - - val 1 ; - 1 ;
rank: 586
score: 98.8902587890625
patch: return val 1 - ( - val 1 ) ;
rank: 586
score: 98.88983623798077
patch: return Math . max ( val $NUMBER$ , val 1 1 ;
rank: 586
score: 98.84951443142361
patch: return - $NUMBER$ - - val $NUMBER$ ;
rank: 586
score: 98.81150599888393
patch: return - 1 ; ; - 0 : return - val 1 ;
rank: 586
score: 98.65359933035714
patch: return - val 1 ; case 0 : return - val $NUMBER$ ;
rank: 586
score: 98.56971842447916
patch: return - 1 ; return - 1 ; val 1 / - 1 ;
rank: 587
score: 98.88961029052734
patch: result = - 1 ; break ;
rank: 587
score: 98.88812810724431
patch: return - ( - val 1 * val 1 ;
rank: 587
score: 98.84932084517045
patch: return - 1 ; 1 : return - 1 ;
rank: 587
score: 98.81143624441964
patch: return - val 1 ; - val 1 = - val 1 ;
rank: 587
score: 98.65306507457386
patch: return ( - val 1 ) * val $NUMBER$ ;
rank: 587
score: 98.59590148925781
patch: return - new - val 1 ;
rank: 587
score: 98.57417515345982
patch: return 0 * - 0 ;
rank: 587
score: 98.56917317708333
patch: return - 1 ; val 1 { if - val 1 / 1 ;
rank: 588
score: 98.88950602213542
patch: break val 1 ; case 1 : return - 1 ;
rank: 588
score: 98.81084735576923
patch: return - val 1 ; start { return - val 1 ;
rank: 588
score: 98.68771023220486
patch: return 0 val 1 * val 1 ;
rank: 588
score: 98.65301513671875
patch: return val 1 . double CaMeL Value ( ) ? val $NUMBER$ ;
rank: 588
score: 98.56874186197916
patch: return - 1 ; * / return - 1 ; return - 1 ;
rank: 589
score: 98.88943246694711
patch: return Long . parse CaMeL Int ( val 1 ) ; ;
rank: 589
score: 98.88773600260417
patch: return val 1 && - val $NUMBER$ ;
rank: 589
score: 98.84912109375
patch: return - 1 ; - 1 | - 1 ;
rank: 589
score: 98.81055704752605
patch: return - val 1 ; 0 * case val 1 ;
rank: 589
score: 98.68655734592014
patch: return - val 1 * max 1 ;
rank: 589
score: 98.65257432725694
patch: int val $NUMBER$ = - val $NUMBER$ ;
rank: 589
score: 98.5720926920573
patch: return Boolean . 0 ;
rank: 589
score: 98.56837463378906
patch: return - 1 ; val 1 { return val 1 ; return - 1 ;
rank: 590
score: 98.88838026258681
patch: return - 1 ; case val 1 :
rank: 590
score: 98.6522216796875
patch: return ( - val 1 / val $NUMBER$ ) ;
rank: 590
score: 98.59503173828125
patch: return Long + - val 1 ;
rank: 590
score: 98.57164764404297
patch: return ( Boolean ) val 1 ;
rank: 590
score: 98.56826782226562
patch: return - 1 ; val 1 { return - 1 ; return val 1 ;
rank: 591
score: 98.84840393066406
patch: return - * - val 1 ;
rank: 591
score: 98.80964006696429
patch: return - val 1 ; - 1 1 return - val 1 ;
rank: 591
score: 98.59480285644531
patch: return long $NUMBER$ - val 1 ;
rank: 591
score: 98.56778390066964
patch: return - * val 1 ;
rank: 592
score: 98.88821847098214
patch: return Math . min ( val $NUMBER$ , val 1 1 ) ;
rank: 592
score: 98.84830729166667
patch: return 1 ; else return - 1 ;
rank: 592
score: 98.6513671875
patch: double safe CaMeL Multiply ( val 1 ) ; return val 1 ;
rank: 592
score: 98.59471130371094
patch: return - - + val 1 ;
rank: 592
score: 98.5704345703125
patch: return value 1 * - 1 ;
rank: 592
score: 98.5670166015625
patch: return - val 1 ; return val 1 ; else return - val 1 ;
rank: 593
score: 98.88583034939236
patch: if - 1 : return - 1 ;
rank: 593
score: 98.84803355823864
patch: return - $NUMBER$ ; val 1 = - 1 ;
rank: 593
score: 98.77064344618056
patch: return 1 ? - 1 : 0 ;
rank: 593
score: 98.68370903862848
patch: return - 1 * + val 1 ;
rank: 593
score: 98.65099080403645
patch: long val $NUMBER$ = - val 1 * val $NUMBER$ ;
rank: 593
score: 98.56972249348958
patch: return 0 * $NUMBER$ ;
rank: 593
score: 98.56678263346355
patch: return < val 1 ;
rank: 594
score: 98.88804117838542
patch: return val 1 ; case 1 : return Math . ;
rank: 594
score: 98.8479715983073
patch: return - 1 ; } else { return val $NUMBER$ ;
rank: 594
score: 98.56742095947266
patch: return Math . false = 0 ;
rank: 594
score: 98.56479899088542
patch: return - 1 ; System
rank: 595
score: 98.88717990451389
patch: ret = - val 1 ; break ;
rank: 595
score: 98.80794270833333
patch: return - val 1 ; 0 ; - 1 * /
rank: 595
score: 98.65055338541667
patch: return - val 1 == - 1 ;
rank: 595
score: 98.56441824776786
patch: return * - val 1 ;
rank: 596
score: 98.88699340820312
patch: return val 1 == - 1 ? 0 : 0 ;
rank: 596
score: 98.84752308238636
patch: return Integer . value CaMeL Of ( - $NUMBER$ ;
rank: 596
score: 98.65036245492789
patch: return val 1 ; case 1 : return val 1 ; }
rank: 596
score: 98.59310913085938
patch: return val 1 | val $NUMBER$ ;
rank: 596
score: 98.56387149586396
patch: return - 1 ; return val 1 ; val 1 { return - val 1 ;
rank: 597
score: 98.88674490792411
patch: return Math . abs ( val 1 - val 1 1 ) ;
rank: 597
score: 98.88480224609376
patch: return val 1 & - val 1 ; ;
rank: 597
score: 98.84734552556819
patch: return - 1 ; - 1 : - 1 ;
rank: 597
score: 98.8075663248698
patch: return - 1 ; - 1 ; ; - 1 :
rank: 597
score: 98.76689995659723
patch: return 0 ? val $NUMBER$ : 0 ;
rank: 597
score: 98.65032196044922
patch: return val 1 == - $NUMBER$ ;
rank: 597
score: 98.59303501674107
patch: return - value val 1 ;
rank: 597
score: 98.56453704833984
patch: return - 1 long val 1 ;
rank: 597
score: 98.56351143973214
patch: return - $NUMBER$ ; System ;
rank: 598
score: 98.88437228732639
patch: return val 1 - val 1 1 ;
rank: 598
score: 98.84731038411458
patch: return - $NUMBER$ ; val 1 : return val 1 ;
rank: 598
score: 98.8072040264423
patch: if return - val 1 ; else return - val 1 ;
rank: 598
score: 98.65024820963542
patch: return true ; case 1 : return - val 1 ;
rank: 598
score: 98.56142290900735
patch: return - val 1 ; val 1 { return - val 1 + val 1 ;
rank: 599
score: 98.88636125837054
patch: return Math . min ( val 1 , - 1 1 ) ;
rank: 599
score: 98.88368530273438
patch: return ( - val 1 - val 1 ;
rank: 599
score: 98.84717906605114
patch: return - $NUMBER$ ; case 1 : return $NUMBER$ ;
rank: 599
score: 98.8062744140625
patch: return - val 1 ; 0 * ; return - val 1 ;
rank: 599
score: 98.67603895399306
patch: long val 1 = 0 ; break ;
rank: 599
score: 98.6502216045673
patch: return val 1 ; case 0 : return - val $NUMBER$ ;
rank: 599
score: 98.59100341796875
patch: val $NUMBER$ = - val 1 ;
rank: 599
score: 98.56308419363839
patch: return 0 ; case 1 :
rank: 599
score: 98.56134796142578
patch: return - val 1 ; - 1 ; * / return - val 1 ;
rank: 600
score: 98.8861083984375
patch: return val 1 ; case 1 : return val 1 ; ;
rank: 600
score: 98.88275701349431
patch: return - ( val 1 ^ - val 1 ;
rank: 600
score: 98.80602088341347
patch: return - val 1 ; $STRING$ : return - val 1 ;
rank: 600
score: 98.56108093261719
patch: return - 1 ; / / / / / / return - val 1 ;
rank: 601
score: 98.8857754794034
patch: return val 1 ; 1 : return val 1 ;
rank: 601
score: 98.8468017578125
patch: return - val 1 & - $NUMBER$ ;
rank: 601
score: 98.59023611886161
patch: return 0 + val $NUMBER$ ;
rank: 601
score: 98.56011199951172
patch: return - val 1 ; max / 1 ; else return - val 1 ;
rank: 602
score: 98.88494873046875
patch: return - val 1 ; case 1 : throw new ;
rank: 602
score: 98.80466871995192
patch: return - - 1 ; - 1 ; return - 1 ;
rank: 602
score: 98.56246185302734
patch: case - 1 : return 1 ;
rank: 602
score: 98.55952722886029
patch: return - val 1 ; return - val 1 ; else return - val 1 ;
rank: 603
score: 98.88439069475446
patch: return 0 . 0 ; case 1 : return - val 1 ;
rank: 603
score: 98.88177490234375
patch: return - val 1 return - val 1 ;
rank: 603
score: 98.84607950846355
patch: return - $NUMBER$ ; } else { return val 1 ;
rank: 603
score: 98.80457305908203
patch: return - 1 ; 0 * /
rank: 603
score: 98.64920479910714
patch: return - - val 1 ; case 0 : return val 1 ;
rank: 603
score: 98.58802286783855
patch: return - - $STRING$ ;
rank: 603
score: 98.55912017822266
patch: return - val 1 ; - 1 : return val 1 + val 1 ;
rank: 604
score: 98.88376871744792
patch: return 0 ; ; case 1 : return - 1 ;
rank: 604
score: 98.88148328993056
patch: return - Long . POSITIVE _ INFINITY ;
rank: 604
score: 98.80448091947116
patch: return - val 1 ; case 1 return - val 1 ;
rank: 604
score: 98.67355685763889
patch: return - 1 * - - 1 ;
rank: 604
score: 98.64868842230902
patch: float val $NUMBER$ = - val $NUMBER$ ;
rank: 604
score: 98.58710479736328
patch: return val 1 : return 0 ;
rank: 604
score: 98.56001281738281
patch: return - 1 ; case 0 ;
rank: 604
score: 98.55773162841797
patch: return - 1 ; return - val 1 ; return - 1 ; break ;
rank: 605
score: 98.88367377387152
patch: return - val 1 ; ; case ;
rank: 605
score: 98.88044569227431
patch: return - val 1 ; } else {
rank: 605
score: 98.8453702059659
patch: return - $NUMBER$ ; * / return - $NUMBER$ ;
rank: 605
score: 98.8043721516927
patch: return - 1 ; ; - 1 + - 1 ;
rank: 605
score: 98.67310248480902
patch: result = - 1 * val 1 ;
rank: 605
score: 98.6486587524414
patch: return - val 1 . 0 ;
rank: 605
score: 98.58611297607422
patch: return Math - - val 1 ;
rank: 605
score: 98.55988311767578
patch: return - val 1 * null ;
rank: 605
score: 98.55754852294922
patch: return - 1 ; - 1 / / / / / return - 1 ;
rank: 606
score: 98.64832652698864
patch: long val 1 = val $NUMBER$ * val 1 ;
rank: 606
score: 98.58540852864583
patch: return Double . 1 ;
rank: 606
score: 98.55911690848214
patch: return - $NUMBER$ * true ;
rank: 606
score: 98.5572509765625
patch: return - 1 ; val 1 { return - val 1 + val 1 ;
rank: 607
score: 98.88251604352679
patch: return Math . ceil ( - val 1 * val 1 ) ;
rank: 607
score: 98.87924194335938
patch: return val 1 ? - val 1 : - 1 ;
rank: 607
score: 98.84218528053977
patch: return val 1 ; else return - val $NUMBER$ ;
rank: 607
score: 98.80417104867789
patch: return - val 1 ; value return - - val 1 ;
rank: 607
score: 98.67006429036458
patch: return 0 val 1 * val $NUMBER$ ;
rank: 607
score: 98.58419036865234
patch: case 0 : return val $NUMBER$ ;
rank: 607
score: 98.55899047851562
patch: return $NUMBER$ 1 * val 1 ;
rank: 607
score: 98.55709838867188
patch: return - 1 ; return - val 1 ; break ; return - 1 ;
rank: 608
score: 98.88181715745192
patch: return Math . ceil ( - val 1 * val $NUMBER$ ;
rank: 608
score: 98.8791259765625
patch: return - ( val $NUMBER$ - val 1 ;
rank: 608
score: 98.84208540482955
patch: return - 0 ; else return - val 1 ;
rank: 608
score: 98.80367337740384
patch: return - val 1 ; val 1 + - val 1 ;
rank: 608
score: 98.58413696289062
patch: return Integer ? 1 : 1 ;
rank: 608
score: 98.5588150024414
patch: return 0 ; case - 1 ;
rank: 608
score: 98.55538504464286
patch: return - val 1 ; ?
rank: 609
score: 98.88161057692308
patch: return Math . min ( - 1 , val 1 1 ;
rank: 609
score: 98.87891981336806
patch: return - ( int ) val 1 ;
rank: 609
score: 98.84154510498047
patch: return $NUMBER$ ; return - 1 ;
rank: 609
score: 98.8036358173077
patch: return 0 ; return - val 1 ; ; - 1 ;
rank: 609
score: 98.64762369791667
patch: return Math . max ( val $NUMBER$ , 0 ) ;
rank: 609
score: 98.55781773158482
patch: return 0 long val 1 ;
rank: 609
score: 98.55488586425781
patch: return - 1 ; val 1 { return val 1 + - val 1 ;
rank: 610
score: 98.88157145182292
patch: result = - val 1 ; break ; case 1 :
rank: 610
score: 98.87855834960938
patch: return ( val 1 ^ - val 1 ;
rank: 610
score: 98.84113103693181
patch: return - 1 1 ; return - val $NUMBER$ ;
rank: 610
score: 98.80356069711539
patch: return - val 1 ; else return - - val 1 ;
rank: 610
score: 98.66830783420139
patch: return val 1 * val 1 * ;
rank: 610
score: 98.64739990234375
patch: return val 1 == 0 ? 1 : val 1 ;
rank: 610
score: 98.58204650878906
patch: return $STRING$ + - val 1 ;
rank: 610
score: 98.55766296386719
patch: return chars 1 * val 1 ;
rank: 610
score: 98.55419921875
patch: return - val 1 ; compare 1 : return - val 1 ; break ;
rank: 611
score: 98.87849564985795
patch: return - ( val 1 & val 1 ) ;
rank: 611
score: 98.83948863636364
patch: return val 1 ; return - - val $NUMBER$ ;
rank: 611
score: 98.80335998535156
patch: else { return - val 1 ;
rank: 611
score: 98.75430297851562
patch: return 0 ? val 1
rank: 611
score: 98.64718191964286
patch: return - val 1 ; safe CaMeL Multiply ( val 1 ) ;
rank: 611
score: 98.55499267578125
patch: return 0 * 0 . 1 ;
rank: 611
score: 98.55396943933823
patch: return - val 1 ; val 1 { return val 1 + - val 1 ;
rank: 612
score: 98.88128192608173
patch: return Math . min ( val 1 , - 1 1 ;
rank: 612
score: 98.87803955078125
patch: return - - Double . MAX _ VALUE ;
rank: 612
score: 98.83888938210227
patch: return 0 ; / * return - val 1 ;
rank: 612
score: 98.80295817057292
patch: return - - val 1 ; - 1 ; ; ;
rank: 612
score: 98.7529067993164
patch: return - 0 & val 1 ;
rank: 612
score: 98.66677517361111
patch: else return val 1 * val $NUMBER$ ;
rank: 612
score: 98.58152770996094
patch: return - ( - $NUMBER$ ) ;
rank: 612
score: 98.5546875
patch: return Boolean + val 1 ;
rank: 612
score: 98.55354309082031
patch: return - val 1 ; val 1 { if - val 1 / 1 ;
rank: 613
score: 98.88113064236111
patch: return Math . floor - val 1 ;
rank: 613
score: 98.87749689275569
patch: return - ( Long 1 ) - val 1 ;
rank: 613
score: 98.64641779119319
patch: long val $NUMBER$ = val $NUMBER$ * val 1 ;
rank: 613
score: 98.5809814453125
patch: return - true ;
rank: 613
score: 98.55465698242188
patch: return 0 * 0 * $NUMBER$ ;
rank: 613
score: 98.55340576171875
patch: return - 1 ; default ;
rank: 614
score: 98.8800048828125
patch: return val 1 ; case - 1 : return - val 1 ;
rank: 614
score: 98.8770419034091
patch: return ( - val 1 ) - val 1 ;
rank: 614
score: 98.83837890625
patch: return - 1 ; ( else return - 1 ;
rank: 614
score: 98.80275065104166
patch: return - 1 ; ; - val 1 : return - val 1 ;
rank: 614
score: 98.6463623046875
patch: return Double . value CaMeL Of ( val 1 )
rank: 614
score: 98.58076695033482
patch: return - val 1 ) ;
rank: 614
score: 98.55439976283482
patch: return 0 * value 1 ;
rank: 614
score: 98.55223083496094
patch: return - val 1 ; / / / / / / / val 1 ;
rank: 615
score: 98.87945556640625
patch: return Math . max ( val 1 , val 1 1 1 ;
rank: 615
score: 98.83836780894886
patch: return 0 ; - 1 : return val 1 ;
rank: 615
score: 98.8023910522461
patch: return - 0 ; return 1 ;
rank: 615
score: 98.6461932842548
patch: return safe CaMeL Multiply ( val 1 ) * val $NUMBER$ ;
rank: 615
score: 98.57992989676339
patch: return - Double . 1 ;
rank: 615
score: 98.5535888671875
patch: return - 1 ; val $NUMBER$ ;
rank: 615
score: 98.55195886948529
patch: return - val 1 ; return - val 1 ; return - - val 1 ;
rank: 616
score: 98.87884051983173
patch: return Math . max ( val 1 , - 1 1 ;
rank: 616
score: 98.83812366832386
patch: return - val 1 1 ; return val 1 ;
rank: 616
score: 98.64618389423077
patch: return super . safe CaMeL Multiply ( val $NUMBER$ ) ; }
rank: 616
score: 98.55290222167969
patch: return - 1 ; case 1 ;
rank: 616
score: 98.5511474609375
patch: return - 1 ; / / / / / / / return - 1 ;
rank: 617
score: 98.87796456473214
patch: return Math . abs ( val 1 * val 1 1 ) ;
rank: 617
score: 98.83769087357955
patch: return - $NUMBER$ ; / * return val 1 ;
rank: 617
score: 98.80161696213942
patch: return - val 1 ; * ? { return val 1 ;
rank: 617
score: 98.64610290527344
patch: return ( Double ) val $NUMBER$ ;
rank: 617
score: 98.5503158569336
patch: return - val 1 ; while - val 1 : return - val 1 ;
rank: 618
score: 98.87793840680804
patch: return val 1 ; ; case 1 : return - val 1 ;
rank: 618
score: 98.87611083984375
patch: return - ( val $NUMBER$ * val 1 ;
rank: 618
score: 98.83698064630681
patch: return val $NUMBER$ ? - 1 : - 1 ;
rank: 618
score: 98.6457748413086
patch: return val $NUMBER$ || val 1 ;
rank: 618
score: 98.57486724853516
patch: return long $NUMBER$ + val 1 ;
rank: 618
score: 98.55222865513393
patch: return $NUMBER$ * val $NUMBER$ ;
rank: 618
score: 98.5499496459961
patch: return - val 1 ; val 1 { return val 1 ; / 1 ;
rank: 619
score: 98.8749667080966
patch: return - ( val $NUMBER$ - val 1 ) ;
rank: 619
score: 98.80076246995192
patch: return - val 1 ; - 1 | - val 1 ;
rank: 619
score: 98.64485386439732
patch: long val 1 = 0 ;
rank: 619
score: 98.5496826171875
patch: return - 1 ; val 1 { return - val 1 ; / 1 ;
rank: 620
score: 98.87778883713942
patch: return - val $NUMBER$ ; case 0 : return - 1 ;
rank: 620
score: 98.74249267578125
patch: return val 1 - 0 ;
rank: 620
score: 98.64408735795455
patch: long val $NUMBER$ = ( long ) val 1 ;
rank: 620
score: 98.57408905029297
patch: return ( long ) value 1 ;
rank: 620
score: 98.54925537109375
patch: return - 1 ; - 1 / / / / return - val 1 ;
rank: 621
score: 98.87766676682692
patch: if ( val 1 == 0 ) return - val 1 ;
rank: 621
score: 98.8744229403409
patch: return - val 1 1 * - val 1 ;
rank: 621
score: 98.83596462673611
patch: return val $NUMBER$ ; return val 1 ;
rank: 621
score: 98.79916616586539
patch: return - 1 ; return - 1 ; ; - 0 ;
rank: 621
score: 98.74028862847223
patch: return 0 ? 0 : val $NUMBER$ ;
rank: 621
score: 98.54928152901786
patch: return 1 * val $NUMBER$ ;
rank: 621
score: 98.54892403738839
patch: return - 1 ; Math ;
rank: 622
score: 98.87428588867188
patch: val 1 = - val 1 ; break ;
rank: 622
score: 98.83596462673611
patch: return - val $NUMBER$ & - 1 ;
rank: 622
score: 98.79853820800781
patch: return false ; - - 1 ;
rank: 622
score: 98.73989432198661
patch: return val 1 & $NUMBER$ ;
rank: 622
score: 98.64376395089286
patch: return safe CaMeL Multiply ( - val 1 , val $NUMBER$ ) ;
rank: 622
score: 98.57166290283203
patch: return Integer ? 0 : $NUMBER$ ;
rank: 622
score: 98.548095703125
patch: return ( 0 - val 1 ;
rank: 623
score: 98.87708282470703
patch: return val 1 & val $NUMBER$ ;
rank: 623
score: 98.87401123046875
patch: return 1 ; default : return - 1 ;
rank: 623
score: 98.79850260416667
patch: else return - 1 ;
rank: 623
score: 98.64624895368304
patch: return - val 1 * ;
rank: 623
score: 98.6436258951823
patch: return - val 1 ; case 0 : return false ;
rank: 623
score: 98.57142130533855
patch: return - value $NUMBER$ ;
rank: 623
score: 98.54780578613281
patch: return - 1 ; return - 1 ; break ; return - val 1 ;
rank: 623
score: 98.54751586914062
patch: return new - 1 ;
rank: 624
score: 98.8768819173177
patch: return - 1 ; case 1 : return Math . ;
rank: 624
score: 98.8358154296875
patch: return - $NUMBER$ 1 * val 1 ;
rank: 624
score: 98.79777308872768
patch: return - $NUMBER$ ; ; - 1 : return - val 1 ;
rank: 624
score: 98.73911539713542
patch: return 0 . 1 + val 1 ;
rank: 624
score: 98.56877136230469
patch: return Double . - val $NUMBER$ ;
rank: 624
score: 98.54735565185547
patch: return - 1 ; val 1 { return - 1 ; / - 1 ;
rank: 624
score: 98.54566192626953
patch: case - 1 : return true ;
rank: 625
score: 98.8768310546875
patch: return val 1 ; val 1 = - val $NUMBER$ ;
rank: 625
score: 98.873974609375
patch: return ( val 1 * - val $NUMBER$ ;
rank: 625
score: 98.83558238636364
patch: return - 0 ; } return - val 1 ;
rank: 625
score: 98.79764811197917
patch: return - val 1 ; - - 0 : return - val 1 ;
rank: 625
score: 98.64323594835069
patch: int val 1 = - val $NUMBER$ ;
rank: 625
score: 98.54722684972427
patch: return - val 1 ; break ; val 1 { return - - val 1 ;
rank: 625
score: 98.54512786865234
patch: return - $NUMBER$ ; case 0 :
rank: 626
score: 98.87367553710938
patch: return - val $NUMBER$ ? $NUMBER$ : 0 ;
rank: 626
score: 98.83518288352273
patch: return - val 1 : return - val $NUMBER$ ;
rank: 626
score: 98.79749474158653
patch: return - val 1 ; * ; return - val 1 ;
rank: 626
score: 98.73653157552083
patch: return 0 * val 1 * $NUMBER$ ;
rank: 626
score: 98.64302825927734
patch: return val 1 == val $NUMBER$ ;
rank: 626
score: 98.54672241210938
patch: return val 1 ; return - val 1 ; return - - val 1 ;
rank: 626
score: 98.54313441685268
patch: return $STRING$ * val 1 ;
rank: 627
score: 98.875732421875
patch: return Math . min ( - val 1 , val 1 1 ;
rank: 627
score: 98.87261962890625
patch: return ( - val 1 ) / - val 1 ;
rank: 627
score: 98.79710036057692
patch: return - 1 ; case 1 : return - - 1 ;
rank: 627
score: 98.73478868272569
patch: return - 1 ? $NUMBER$ : 1 ;
rank: 627
score: 98.64288884943181
patch: return safe CaMeL Multiply ( ( val 1 ) ;
rank: 627
score: 98.63905334472656
patch: return 0 long - val 1 ;
rank: 627
score: 98.56703186035156
patch: return - 0 : val 1 ;
rank: 627
score: 98.54671478271484
patch: return - val 1 ; - 1 * * / return - val 1 ;
rank: 627
score: 98.54168701171875
patch: result = - 1 ;
rank: 628
score: 98.872314453125
patch: return val 1 - - - - val $NUMBER$ ;
rank: 628
score: 98.83498313210227
patch: return - 1 ; } else { return $NUMBER$ ;
rank: 628
score: 98.7964618389423
patch: return - val 1 ; * / { return - 1 ;
rank: 628
score: 98.6428555575284
patch: return val 1 == - 1 : val 1 ;
rank: 628
score: 98.56641387939453
patch: return new long ( 0 ) ;
rank: 628
score: 98.54647064208984
patch: return - val 1 ; if - val 1 : return - val 1 ;
rank: 628
score: 98.53890991210938
patch: return - 1 * value 1 ;
rank: 629
score: 98.87510463169643
patch: return val 1 ; case 1 : return Math . - 1 ;
rank: 629
score: 98.79615196814903
patch: return - 0 ; ; - 1 : return - 1 ;
rank: 629
score: 98.73139784071181
patch: return 0 ? 0 1 : 0 ;
rank: 629
score: 98.64275653545673
patch: return ( Number ) safe CaMeL Multiply ( val $NUMBER$ ) ;
rank: 629
score: 98.54621887207031
patch: return - val 1 ; 1 / / * / return - val 1 ;
rank: 630
score: 98.8750469501202
patch: return ~ val 1 ; case 1 : return val 1 ;
rank: 630
score: 98.87135620117188
patch: return - val 1 ; case ; default :
rank: 630
score: 98.83424886067708
patch: return 1 ; } return - 1 ;
rank: 630
score: 98.64239501953125
patch: return - val $NUMBER$ || val 1 ;
rank: 630
score: 98.56492614746094
patch: return 0 ? 0 : true ;
rank: 630
score: 98.54582214355469
patch: return - 1 ; - 1 * / return - 1 ; - 1 ;
rank: 630
score: 98.53710065569196
patch: return val 1 * null ;
rank: 631
score: 98.87452043805804
patch: return val 1 ; break ; case 1 : return - 1 ;
rank: 631
score: 98.8711669921875
patch: return Double . round ( val 1 ) ;
rank: 631
score: 98.83417302911931
patch: return - $NUMBER$ 1 * - - val 1 ;
rank: 631
score: 98.79491315569196
patch: return - 1 ; return - val 1 ; - val 1 ;
rank: 631
score: 98.5625
patch: return Integer ? $NUMBER$ : 0 ;
rank: 631
score: 98.54568301930146
patch: return - val 1 ; return - - val 1 ; return - val 1 ;
rank: 631
score: 98.53705596923828
patch: case - 1 : return $NUMBER$ ;
rank: 632
score: 98.87388392857143
patch: return Math . max ( val 1 , - 1 1 ) ;
rank: 632
score: 98.87091064453125
patch: return Long . abs ( val 1 ) ;
rank: 632
score: 98.79427396334134
patch: return - - val 1 ; return - - val 1 ;
rank: 632
score: 98.64215087890625
patch: return - val 1 [ 0 ] ;
rank: 632
score: 98.54560089111328
patch: return - val 1 ; - 1 / / / return - val 1 ;
rank: 632
score: 98.53447614397321
patch: return 0 : val 1 ;
rank: 633
score: 98.83314098011364
patch: return - val 1 : - - val $NUMBER$ ;
rank: 633
score: 98.79412372295673
patch: return - $NUMBER$ ; return - val 1 ; - 1 ;
rank: 633
score: 98.64188058035714
patch: return val 1 . long CaMeL Value ( ) : val $NUMBER$ ;
rank: 633
score: 98.56060791015625
patch: return - new long val 1 ;
rank: 633
score: 98.54468491498162
patch: return - val 1 ; - 1 / / * / return - val 1 ;
rank: 634
score: 98.87359619140625
patch: return - $NUMBER$ ; case 1 :
rank: 634
score: 98.87059326171875
patch: return - val 1 ; case Integer . ;
rank: 634
score: 98.83245294744319
patch: return - val $NUMBER$ ? - 1 : 0 ;
rank: 634
score: 98.79341947115384
patch: return 0 ; - val 1 ; return - val 1 ;
rank: 634
score: 98.5599365234375
patch: return $STRING$ ? 1 : 0 ;
rank: 634
score: 98.54408264160156
patch: return - val 1 ; return - val $NUMBER$ ; return - val 1 ;
rank: 634
score: 98.52888793945313
patch: return max 1 ;
rank: 635
score: 98.8726806640625
patch: return $NUMBER$ ; case $NUMBER$ : return - val 1 ;
rank: 635
score: 98.87054443359375
patch: return - ( - val 1 ) / val 1 ;
rank: 635
score: 98.83185369318181
patch: return - $NUMBER$ ; } else return - $NUMBER$ ;
rank: 635
score: 98.79261192908653
patch: return - 1 ; - 0 ; return - val 1 ;
rank: 635
score: 98.72333441840277
patch: return 0 ? $STRING$ : val 1 ;
rank: 635
score: 98.6415546123798
patch: return - val 1 ? val 1 : - val $NUMBER$ ;
rank: 635
score: 98.55889282226562
patch: return - null ;
rank: 636
score: 98.87257893880208
patch: return - 1 ; case $NUMBER$ : return val $NUMBER$ ;
rank: 636
score: 98.87053888494319
patch: return ( val 1 << - val 1 ) ;
rank: 636
score: 98.79209547776442
patch: return - 1 ; - 1 ; else return - 1 ;
rank: 636
score: 98.64144193209134
patch: return Integer . max ( val 1 , val 1 ) ;
rank: 636
score: 98.55884552001953
patch: return Math ? 0 : 1 ;
rank: 636
score: 98.54206848144531
patch: return - val 1 ; - 1 ? - 1 : - val 1 ;
rank: 636
score: 98.52112833658855
patch: return 1 * 0 ;
rank: 637
score: 98.87215750558036
patch: return - val 1 ; case val $NUMBER$ : return val 1 ;
rank: 637
score: 98.83107503255208
patch: return - 1 + - - 1 ;
rank: 637
score: 98.79163536658653
patch: return - val 1 ; 0 * / return val 1 ;
rank: 637
score: 98.72126600477431
patch: return Math ? val 1 : 0 ;
rank: 637
score: 98.55863189697266
patch: return 0 ? true : 0 ;
rank: 637
score: 98.54158782958984
patch: return - val 1 ; / / / * / return - val 1 ;
rank: 637
score: 98.52010672433036
patch: return $STRING$ * - 1 ;
rank: 638
score: 98.8719482421875
patch: return - 1 ; case 1 : break val 1 ;
rank: 638
score: 98.83039994673295
patch: return - val 1 1 - - val 1 ;
rank: 638
score: 98.79135366586539
patch: return - val 1 ; - 1 ; case - 1 :
rank: 638
score: 98.55815778459821
patch: return Float + val 1 ;
rank: 638
score: 98.54148864746094
patch: return - val 1 ; abs - val 1 : return - val 1 ;
rank: 638
score: 98.51941789899554
patch: return val $NUMBER$ * 0 ;
rank: 639
score: 98.830078125
patch: return - $NUMBER$ ? - val 1 : 1 ;
rank: 639
score: 98.79117024739584
patch: return - val 1 ; case - 0 : return - val 1 ;
rank: 639
score: 98.64004516601562
patch: return val 1 [ 0 ] ;
rank: 639
score: 98.5557632446289
patch: return ( - 1 ) ) ;
rank: 639
score: 98.54133875229779
patch: return - 1 ; val 1 { return - val 1 ; return - 1 ;
rank: 639
score: 98.51554652622768
patch: return - ( true ) ;
rank: 640
score: 98.62107849121094
patch: return - ( long ) 0 ;
rank: 640
score: 98.55204772949219
patch: val 1 = - val $NUMBER$ ;
rank: 641
score: 98.86961669921875
patch: return val 1 - ( - val 1 ;
rank: 641
score: 98.82895914713542
patch: return 0 + - - val $NUMBER$ ;
rank: 641
score: 98.55176653180804
patch: return val 1 . length ;
rank: 641
score: 98.54088637408088
patch: return - val 1 ; - val 1 : return - val 1 ; break ;
rank: 641
score: 98.50820922851562
patch: return Double . true ;
rank: 642
score: 98.87050217848558
patch: return - 1 ; case val $NUMBER$ : return - 1 ;
rank: 642
score: 98.86914825439453
patch: return Double . POSITIVE _ INFINITY ;
rank: 642
score: 98.82895914713542
patch: return - val $NUMBER$ + val 1 ;
rank: 642
score: 98.63892822265625
patch: int min = val 1 * val $NUMBER$ ;
rank: 642
score: 98.54777526855469
patch: return safe CaMeL Multiply val 1 ;
rank: 642
score: 98.54058837890625
patch: return - val 1 ; / / / / / return - val 1 ;
rank: 642
score: 98.50775146484375
patch: return <= val 1 ;
rank: 643
score: 98.869140625
patch: if ( - 1 == val 1 ) return val 1 ;
rank: 643
score: 98.86906294389205
patch: return - ( long ) - - val 1 ;
rank: 643
score: 98.828857421875
patch: return - 1 1 - val 1 ;
rank: 643
score: 98.78953200120192
patch: return - 1 ; val 1 = - - val 1 ;
rank: 643
score: 98.70362854003906
patch: return - val 1 & $NUMBER$ ;
rank: 643
score: 98.63877360026042
patch: return false ; case 0 : return - val 1 ;
rank: 643
score: 98.54728480747768
patch: return - 0 . 1 ;
rank: 643
score: 98.54029083251953
patch: return - 1 ; return - val 1 ; - 1 + val 1 ;
rank: 643
score: 98.50696818033855
patch: return * val 1 ;
rank: 644
score: 98.86815467247597
patch: return val 1 ; break ; default : return val 1 ;
rank: 644
score: 98.867919921875
patch: return val 1 & 0 x 1 f ;
rank: 644
score: 98.82884632457386
patch: if - 1 == 0 ; return - 1 ;
rank: 644
score: 98.78817313058036
patch: return - val 1 ; return - 1 ; ; - 1 ;
rank: 644
score: 98.54544503348214
patch: return new int val 1 ;
rank: 644
score: 98.53972032335069
patch: return val 1 ; return - val 1 ; val 1 { return - val 1 ;
rank: 644
score: 98.50649588448661
patch: case 0 : return 1 ;
rank: 645
score: 98.86793870192308
patch: if ( val 1 != - 1 ) return - 1 ;
rank: 645
score: 98.7879638671875
patch: return - val 1 ; - 1 ; - - 1 :
rank: 645
score: 98.63850911458333
patch: return - val $NUMBER$ ? - 1 : val 1 ;
rank: 645
score: 98.54466247558594
patch: return Integer ? $STRING$ : $STRING$ ;
rank: 645
score: 98.5388412475586
patch: return - val 1 ; - 1 / / * / return - 1 ;
rank: 645
score: 98.50645228794643
patch: return 0 1 * 0 ;
rank: 646
score: 98.86791053185097
patch: if ( - 1 >= val 1 ) return val 1 ;
rank: 646
score: 98.86655002170139
patch: return - val 1 ^ val 1 ;
rank: 646
score: 98.82882351345486
patch: return - val $NUMBER$ ; - 1 ;
rank: 646
score: 98.69656372070312
patch: return 0 ? $NUMBER$ : $NUMBER$ ;
rank: 646
score: 98.54356166294643
patch: return value 1 * 0 ;
rank: 646
score: 98.53874206542969
patch: return - 1 ; - 1 : return - 1 ; return - 1 ;
rank: 646
score: 98.50531005859375
patch: return - 1 * null ;
rank: 647
score: 98.86783272879464
patch: throw new Illegal CaMeL State CaMeL Exception ( $STRING$ ; case $NUMBER$ :
rank: 647
score: 98.82864040798611
patch: return - 1 ; } return 0 ;
rank: 647
score: 98.63828346946023
patch: return ( long ) ( - val 1 ) ;
rank: 647
score: 98.54277038574219
patch: return val 1 * 0 ) ;
rank: 647
score: 98.53839470358456
patch: return - val 1 ; - 1 / / / / return - val 1 ;
rank: 648
score: 98.78712681361607
patch: return - val 1 ; case 1 { return - val 1 ;
rank: 648
score: 98.63817487444196
patch: return safe CaMeL Multiply ( val 1 , Math . 1 ) ;
rank: 648
score: 98.54252115885417
patch: return val 1 ) ;
rank: 648
score: 98.5379867553711
patch: return - 1 ; val 1 { return val 1 ; return val 1 ;
rank: 649
score: 98.86675153459821
patch: return - - val 1 ; case 1 : return val 1 ;
rank: 649
score: 98.86561168323864
patch: return - ( long 1 ) - val 1 ;
rank: 649
score: 98.8282803622159
patch: return 0 ; val 1 : return val 1 ;
rank: 649
score: 98.5423075358073
patch: return Integer . 0 ;
rank: 649
score: 98.53789520263672
patch: return - 1 ; - 1 + val 1 ; return - val 1 ;
rank: 650
score: 98.86673312717014
patch: return ~ val 1 ; case 1 :
rank: 650
score: 98.86546741832386
patch: return - ( val 1 << - val $NUMBER$ ;
rank: 650
score: 98.82775200737848
patch: return - $NUMBER$ ; return val $NUMBER$ ;
rank: 650
score: 98.7863018329327
patch: return - val 1 ; - 1 ; ; - 1 :
rank: 650
score: 98.68673706054688
patch: return 0 ? 1 : $NUMBER$ ;
rank: 650
score: 98.63658142089844
patch: return ( ( val 1 ) ;
rank: 650
score: 98.54222869873047
patch: case val $NUMBER$ : return 0 ;
rank: 650
score: 98.53753662109375
patch: return val 1 ; val 1 { return - - val 1 ; break ;
rank: 650
score: 98.50265066964286
patch: return new Boolean val 1 ;
rank: 651
score: 98.86668982872597
patch: return val $NUMBER$ ; case $NUMBER$ : return - val 1 ;
rank: 651
score: 98.8643798828125
patch: return - ( - val $NUMBER$ ;
rank: 651
score: 98.82774769176136
patch: return - 1 ; if ; return - $NUMBER$ ;
rank: 651
score: 98.63604181463069
patch: int val $NUMBER$ = val 1 * val $NUMBER$ ;
rank: 651
score: 98.54122161865234
patch: return val 1 * value 1 ;
rank: 651
score: 98.53733317057292
patch: return - 1 ; ;
rank: 652
score: 98.86407470703125
patch: return Long . - ( val 1 ;
rank: 652
score: 98.82761452414773
patch: return - val 1 ; } return val $NUMBER$ ;
rank: 652
score: 98.78546905517578
patch: return - 1 ; while 1 ;
rank: 652
score: 98.6755599975586
patch: return - val 1 - 0 ;
rank: 652
score: 98.63595815805289
patch: return val $NUMBER$ ; case - 1 : return val 1 ;
rank: 652
score: 98.60718536376953
patch: return - val $NUMBER$ * 1 ;
rank: 652
score: 98.53814697265625
patch: return $NUMBER$ ? 1 : 0 ;
rank: 652
score: 98.50000871930804
patch: return & 0 - 1 ;
rank: 653
score: 98.86610921223958
patch: if ( val 1 != - 1 )
rank: 653
score: 98.86377631293402
patch: return val 1 & 0 val $NUMBER$ ;
rank: 653
score: 98.82750108506944
patch: return - $NUMBER$ ; long - 1 ;
rank: 653
score: 98.78324068509616
patch: return - 1 ; return - 1 ; return - 0 ;
rank: 653
score: 98.63528878348214
patch: return Math . max ( - val 1 , - 1 ) ;
rank: 653
score: 98.60547746930804
patch: return += - val 1 ;
rank: 653
score: 98.53703308105469
patch: return - 1 ; - 1 ; / * / return - val 1 ;
rank: 653
score: 98.49812825520833
patch: return 0 * null ;
rank: 654
score: 98.86579241071429
patch: return - val 1 ; break ; default : return val 1 ;
rank: 654
score: 98.86362711588542
patch: return - val 1 | - 1 ;
rank: 654
score: 98.78299654447116
patch: return Boolean . value CaMeL Of ( - val 1 1 ;
rank: 654
score: 98.53699493408203
patch: return Math ? $STRING$ : $STRING$ ;
rank: 654
score: 98.5365219116211
patch: return - val 1 ; val $NUMBER$ { return - val 1 ; break ;
rank: 654
score: 98.49374825613839
patch: case 0 : return $NUMBER$ ;
rank: 655
score: 98.86565692608173
patch: if ( - 1 < val 1 ) return val 1 ;
rank: 655
score: 98.8634262084961
patch: return - val $NUMBER$ ; default :
rank: 655
score: 98.82565646701389
patch: return 0 ; * return - 1 ;
rank: 655
score: 98.66737365722656
patch: return val 1 & - $NUMBER$ ;
rank: 655
score: 98.63468794389205
patch: return ( - val $NUMBER$ ) * val 1 ;
rank: 655
score: 98.53579711914062
patch: return - 1 ; return val 1 ; val 1 { return - 1 ;
rank: 655
score: 98.53559875488281
patch: return min 1 * val 1 ;
rank: 655
score: 98.49294026692708
patch: return ( - 1 ;
rank: 656
score: 98.8255948153409
patch: return - $NUMBER$ ; * / return val 1 ;
rank: 656
score: 98.78164438100961
patch: return 0 ; return - val 1 ; return - 1 ;
rank: 656
score: 98.5355224609375
patch: return - val 1 ; - 1 / / / / return - 1 ;
rank: 656
score: 98.53518676757812
patch: return long . 0 ;
rank: 656
score: 98.4927978515625
patch: return Boolean . - 1 ;
rank: 657
score: 98.86449256310097
patch: if ( - 1 == val 1 ) return - 1 ;
rank: 657
score: 98.86212713068181
patch: return Long ; default : return - val 1 ;
rank: 657
score: 98.82526189630681
patch: return - - val 1 ; return - $NUMBER$ ;
rank: 657
score: 98.78151157924107
patch: return - val 1 ; 0 : return - - val 1 ;
rank: 657
score: 98.63452826605902
patch: return val 1 || - val $NUMBER$ ;
rank: 657
score: 98.53431701660156
patch: return - val 1 ; ; / / * / return - val 1 ;
rank: 658
score: 98.86414337158203
patch: { return - val 1 ; }
rank: 658
score: 98.86183860085227
patch: return ( - val 1 ) & - 1 ;
rank: 658
score: 98.82511138916016
patch: return - - val 1 1 ;
rank: 658
score: 98.66419219970703
patch: return - val 1 * val 1
rank: 658
score: 98.63438831676136
patch: return ( val $NUMBER$ != val 1 ) ] ;
rank: 658
score: 98.534423828125
patch: return 0 ? false : 0 ;
rank: 658
score: 98.53431701660156
patch: return - val 1 ; val 1 { return - val $NUMBER$ ; break ;
rank: 658
score: 98.48878987630208
patch: return ! - 1 ;
rank: 659
score: 98.86406598772321
patch: return Math . max ( - val 1 , - val $NUMBER$ ;
rank: 659
score: 98.86180284288194
patch: return val $NUMBER$ - - val 1 ;
rank: 659
score: 98.82427423650569
patch: return - 1 ; else { return val 1 ;
rank: 659
score: 98.78074428013393
patch: return - 1 ; ; - - 1 : return - 1 ;
rank: 659
score: 98.66326032366071
patch: return $NUMBER$ + val 1 ;
rank: 659
score: 98.53372955322266
patch: return - 1 ; return val 1 ; val 1 { return val 1 ;
rank: 659
score: 98.4873046875
patch: return 0 ; val 1 ;
rank: 660
score: 98.86404758029514
patch: return - val $NUMBER$ ; case 1 ;
rank: 660
score: 98.8237637606534
patch: return - $NUMBER$ ; / * return - $NUMBER$ ;
rank: 660
score: 98.77985088641827
patch: return - 1 ; ; * ; return - val 1 ;
rank: 660
score: 98.63371058872768
patch: return Math . max ( - val 1 , - $NUMBER$ ) ;
rank: 660
score: 98.53396170479911
patch: val $NUMBER$ = - 1 ;
rank: 660
score: 98.53346252441406
patch: return - 1 ; val 1 { if val 1 : return - 1 ;
rank: 660
score: 98.48658098493304
patch: return 0 : - 1 ;
rank: 661
score: 98.86299954927884
patch: if ( val 1 == 0 ) { return 0 ; }
rank: 661
score: 98.86085340711806
patch: return val 1 * val 1 ; ;
rank: 661
score: 98.82373725043402
patch: return val 1 ; } return null ;
rank: 661
score: 98.66195242745536
patch: return 0 ; return 0 ;
rank: 661
score: 98.63351675180289
patch: return ( long ) ( val 1 * val $NUMBER$ ) ;
rank: 661
score: 98.59306989397321
patch: return - += val 1 ;
rank: 661
score: 98.53345598493304
patch: val 1 = val $NUMBER$ ;
rank: 661
score: 98.53326416015625
patch: return - 1 ; return - 1 ; val 1 : return - 1 ;
rank: 661
score: 98.48642985026042
patch: return ! val 1 ;
rank: 662
score: 98.86268446180556
patch: if ( - 1 == val 1 )
rank: 662
score: 98.77877103365384
patch: return - 0 ; case 1 : return - val 1 ;
rank: 662
score: 98.65943145751953
patch: return val 1 + - 0 ;
rank: 662
score: 98.6334716796875
patch: return safe CaMeL Multiply ( val 1 , 0
rank: 662
score: 98.48574393136161
patch: case 0 : return true ;
rank: 663
score: 98.86207932692308
patch: return - val 1 ; default : return val 1 ; }
rank: 663
score: 98.8576993075284
patch: return - ( val $NUMBER$ & - 1 ) ;
rank: 663
score: 98.82246537642045
patch: return val 1 1 ; return - val 1 ;
rank: 663
score: 98.77811104910714
patch: return - val 1 ; - - 0 : return - 1 ;
rank: 663
score: 98.53277587890625
patch: return Float ? 0 : 0 ;
rank: 663
score: 98.53268432617188
patch: return - val 1 ; val 1 { try { return - val 1 ;
rank: 663
score: 98.48399135044643
patch: return - $NUMBER$ * 1 ;
rank: 664
score: 98.86144080528847
patch: return val 1 ; case val $NUMBER$ : return - 1 ;
rank: 664
score: 98.85735529119319
patch: return - ( - val 1 ) * $NUMBER$ ;
rank: 664
score: 98.77791654146634
patch: return - $NUMBER$ ; ; - 0 : return - 1 ;
rank: 664
score: 98.63343302408855
patch: return ( val 1 ) ? 0 : val $NUMBER$ ;
rank: 664
score: 98.5901870727539
patch: return - - 1 . 1 ;
rank: 664
score: 98.53259995404412
patch: return val 1 ; return val 1 ; val 1 { return - val 1 ;
rank: 664
score: 98.48310198102679
patch: return null * val 1 ;
rank: 665
score: 98.8568448153409
patch: return - ( Long ) - - val 1 ;
rank: 665
score: 98.77763148716518
patch: return - 1 ; - 1 ; ; return - val 1 ;
rank: 665
score: 98.63318810096153
patch: return val 1 == 0 ? - 1 : val 1 ;
rank: 665
score: 98.53254917689732
patch: return Double - val 1 ;
rank: 665
score: 98.53213840060764
patch: return - 1 ; return - val 1 ; val 1 { return - val 1 ;
rank: 665
score: 98.48216029575893
patch: return Integer - val 1 ;
rank: 666
score: 98.86084856305804
patch: return - val 1 ; case 1 : return val 1 ; ;
rank: 666
score: 98.85683371803977
patch: return - ( val 1 / - val 1 ;
rank: 666
score: 98.8201571377841
patch: return - 1 ; val 1 : return 1 ;
rank: 666
score: 98.53130340576172
patch: return - val 1 ; return - val 1 ; break ; val 1 {
rank: 667
score: 98.86069899338942
patch: return val 1 ; ; case $NUMBER$ : return val 1 ;
rank: 667
score: 98.85652299360795
patch: return - ( val 1 | val 1 ) ;
rank: 667
score: 98.82012176513672
patch: return 0 + - - 1 ;
rank: 667
score: 98.7770244891827
patch: return - $NUMBER$ ; return - 1 ; ; - 1 ;
rank: 667
score: 98.6326153094952
patch: return ( ( long ) val 1 ) * val 1 ;
rank: 667
score: 98.53118133544922
patch: return - 1 ; return val 1 + val 1 ; return - 1 ;
rank: 667
score: 98.47962297712054
patch: return new long - 1 ;
rank: 668
score: 98.85609944661458
patch: return - Double . NEGATIVE _ INFINITY ;
rank: 668
score: 98.8195467862216
patch: return Double . value CaMeL Of ( - 1 ;
rank: 668
score: 98.77664947509766
patch: return 0 ; while - 1 ;
rank: 668
score: 98.63260904947917
patch: return val 1 ; case 1 : = val 1 ;
rank: 668
score: 98.53103637695312
patch: return val 1 ; break ; val 1 { return - - val 1 ;
rank: 668
score: 98.47935267857143
patch: return true * - 1 ;
rank: 669
score: 98.8599853515625
patch: return Math . min ( val 1 , val $NUMBER$ 1 1 ;
rank: 669
score: 98.819091796875
patch: throw new Runtime CaMeL Exception - 1 ;
rank: 669
score: 98.6470947265625
patch: return - 1 . $NUMBER$ ;
rank: 669
score: 98.63213556463069
patch: return - ( val $NUMBER$ / val $NUMBER$ ) ;
rank: 669
score: 98.53089141845703
patch: return - val 1 ; - 1 / / / / return val 1 ;
rank: 670
score: 98.85977877103366
patch: return Math . abs ( - val 1 ; case 1 :
rank: 670
score: 98.8554354580966
patch: return - val 1 ? - val 1 : ;
rank: 670
score: 98.81867009943181
patch: return - 1 ; val 1 : return $NUMBER$ ;
rank: 670
score: 98.77623748779297
patch: return false ; - val 1 ;
rank: 670
score: 98.53076171875
patch: return - 1 ; System /
rank: 670
score: 98.52202497209821
patch: switch ( value $NUMBER$ ) {
rank: 670
score: 98.4779052734375
patch: result = 0 ;
rank: 671
score: 98.85962853064903
patch: return Math . abs ( val 1 ) ; case $NUMBER$ :
rank: 671
score: 98.8179598721591
patch: return - 1 ; else { return - $NUMBER$ ;
rank: 671
score: 98.77561598557692
patch: return - val 1 ; return - val 1 ; 1 ;
rank: 671
score: 98.64633614676339
patch: return - val 1 * 0
rank: 671
score: 98.63190166766827
patch: return - val 1 . long CaMeL Value ( ) ; }
rank: 671
score: 98.52982823988971
patch: return - val 1 ; - 1 / - 1 ; return - val 1 ;
rank: 671
score: 98.52120971679688
patch: return - false ;
rank: 671
score: 98.47710309709821
patch: return true * val 1 ;
rank: 672
score: 98.85902756911058
patch: if ( - val 1 < 0 ) return val 1 ;
rank: 672
score: 98.85480291193181
patch: if ( val $NUMBER$ ; return - val 1 ;
rank: 672
score: 98.81790500217014
patch: return 0 ; else return val $NUMBER$ ;
rank: 672
score: 98.77518136160714
patch: return - val 1 ; ; - 1 : return - 1 ;
rank: 672
score: 98.64564514160156
patch: return - 1 & val 1 ;
rank: 672
score: 98.6316630045573
patch: return ( ( val $NUMBER$ ) / val 1 ) ;
rank: 672
score: 98.52922821044922
patch: return - val 1 ; - 1 / / / / / / / ;
rank: 672
score: 98.52096993582589
patch: return 0 - val $NUMBER$ ;
rank: 673
score: 98.85891488882211
patch: return Math . max ( - val 1 , val $NUMBER$ ;
rank: 673
score: 98.8544921875
patch: return - Long . Na CaMeL N ;
rank: 673
score: 98.81788219105114
patch: return - 1 1 } if return - 1 ;
rank: 673
score: 98.77480643136161
patch: return - val 1 ; * : { return - val 1 ;
rank: 673
score: 98.63156127929688
patch: return false ; case 1 : return - val 1 ;
rank: 673
score: 98.52900913783482
patch: return val 1 ; / /
rank: 674
score: 98.81761169433594
patch: return - val 1 val $NUMBER$ ;
rank: 674
score: 98.77464076450893
patch: return - 1 ; ; - val 1 : return - 1 ;
rank: 674
score: 98.6435317993164
patch: return val 1 * val 1 :
rank: 674
score: 98.63145094651442
patch: return val 1 * ( val $NUMBER$ * val $NUMBER$ ) ;
rank: 674
score: 98.57295445033482
patch: ret = - val 1 ;
rank: 674
score: 98.52881731305804
patch: return max - val 1 ;
rank: 674
score: 98.51918247767857
patch: return - $NUMBER$ . 1 ;
rank: 675
score: 98.85877403846153
patch: return - val $NUMBER$ ; case $NUMBER$ : return val $NUMBER$ ;
rank: 675
score: 98.85307481553819
patch: return val 1 * val 1 1 ;
rank: 675
score: 98.77366286057692
patch: return - val 1 ; 0 return - - val 1 ;
rank: 675
score: 98.63142533735795
patch: return ( safe CaMeL Multiply ( val $NUMBER$ ) ;
rank: 675
score: 98.52742767333984
patch: return - 1 ; return - 1 ; return - 1 ; val 1 ;
rank: 676
score: 98.8576190655048
patch: return Math . max ( - 1 , val 1 1 ;
rank: 676
score: 98.85228814019098
patch: return val 1 & 0 val 1 ;
rank: 676
score: 98.8160400390625
patch: return - $NUMBER$ ; else return 0 ;
rank: 676
score: 98.77349384014423
patch: return - 1 ; return - $NUMBER$ ; ; - 1 ;
rank: 676
score: 98.63713836669922
patch: return 0 || - val 1 ;
rank: 676
score: 98.52716423483456
patch: return - 1 ; / / / / / / / return - val 1 ;
rank: 676
score: 98.47292654854911
patch: return Math ? val 1 ;
rank: 677
score: 98.85739571707589
patch: return - Math . abs ( val 1 ) ; case 1 :
rank: 677
score: 98.84993119673295
patch: return - val 1 ? $NUMBER$ : - 1 ;
rank: 677
score: 98.815673828125
patch: return 0 ; } else { return val 1 ;
rank: 677
score: 98.77332481971153
patch: return - 1 ; case - $NUMBER$ : return - 1 ;
rank: 677
score: 98.63101959228516
patch: return ( Long ) - 1 ;
rank: 677
score: 98.5269775390625
patch: return - val 1 ; / / * / / return - val 1 ;
rank: 678
score: 98.85735212053571
patch: return - val 1 ; case val 1 : return - 1 ;
rank: 678
score: 98.81484646267361
patch: return $NUMBER$ * - - val 1 ;
rank: 678
score: 98.77256556919643
patch: return - val 1 ; 0 : else return - val 1 ;
rank: 678
score: 98.63298034667969
patch: return val 1 / val $NUMBER$ ;
rank: 678
score: 98.56929016113281
patch: return 1 * - val $NUMBER$ ;
rank: 678
score: 98.52692413330078
patch: return - 1 ; val 1 { return val 1 ; / - 1 ;
rank: 678
score: 98.51531982421875
patch: return 0 ; case 1 ?
rank: 679
score: 98.8498868075284
patch: return val 1 ; default : throw new ; }
rank: 679
score: 98.7724609375
patch: return true ; - - 1 ;
rank: 679
score: 98.63069152832031
patch: return ( Integer ) val $NUMBER$ ;
rank: 679
score: 98.52674102783203
patch: return - 1 ; / / / / / / / return val 1 ;
rank: 679
score: 98.51435198102679
patch: return Integer + val $NUMBER$ ;
rank: 679
score: 98.46943882533482
patch: return Integer ? val 1 ;
rank: 680
score: 98.85646275111607
patch: return - val 1 ; break ; default : return - 1 ;
rank: 680
score: 98.84955388849431
patch: return - val 1 1 | - val 1 ;
rank: 680
score: 98.77237642728366
patch: return - val 1 ; - 0 : return val 1 ;
rank: 680
score: 98.63067626953125
patch: int val 1 = val $NUMBER$ ;
rank: 680
score: 98.56698608398438
patch: return - 1 : - 1 ;
rank: 680
score: 98.52641950334821
patch: return val 1 ; val 1
rank: 680
score: 98.4694315592448
patch: return return - 1 ;
rank: 681
score: 98.8561260516827
patch: return val 1 ; case val 1 : return val $NUMBER$ ;
rank: 681
score: 98.7716064453125
patch: return - val 1 ; try { return - - val 1 ;
rank: 681
score: 98.63067626953125
patch: return val 1 . int CaMeL Value ( ) ? val 1 ;
rank: 681
score: 98.63024139404297
patch: return 0 ; } return 0 ;
rank: 681
score: 98.52633846507354
patch: return - val 1 ; - 1 / / / / / / val 1 ;
rank: 681
score: 98.50853474934895
patch: return - min 1 ;
rank: 681
score: 98.4686991373698
patch: return return val 1 ;
rank: 682
score: 98.8480224609375
patch: return val 1 - val 1 ; ;
rank: 682
score: 98.81053577769886
patch: return - $NUMBER$ ? - val 1 : 0 ;
rank: 682
score: 98.771484375
patch: return - $NUMBER$ ; val 1 ;
rank: 682
score: 98.6305401141827
patch: return Math . min ( val $NUMBER$ , - 1 ) ;
rank: 682
score: 98.52627999441964
patch: return - 1 ; Double ;
rank: 682
score: 98.46739705403645
patch: return * - 1 ;
rank: 683
score: 98.81026882595486
patch: return - $NUMBER$ * return - 1 ;
rank: 683
score: 98.77143859863281
patch: return - 1 ; return $STRING$ ;
rank: 683
score: 98.63051194411058
patch: return Math . compare ( val 1 , val 1 ) ;
rank: 683
score: 98.62680489676339
patch: return 1 + val 1 ;
rank: 683
score: 98.56568145751953
patch: try { return - val $NUMBER$ ;
rank: 683
score: 98.52581787109375
patch: return - 1 ; - 1 / / / / / return val 1 ;
rank: 683
score: 98.49860491071429
patch: return - & - $NUMBER$ ;
rank: 683
score: 98.46507045200893
patch: return - $NUMBER$ * false ;
rank: 684
score: 98.85524338942308
patch: if ( - 1 != val 1 ) return val 1 ;
rank: 684
score: 98.8473788174716
patch: return val 1 * val 1 + val 1 ;
rank: 684
score: 98.81005859375
patch: return - 0 + - - 1 ;
rank: 684
score: 98.77143096923828
patch: return 0 ; - 1 ; ;
rank: 684
score: 98.63048444475446
patch: return ( safe CaMeL Multiply ( val 1 , 0 ) ) ;
rank: 684
score: 98.52570452008929
patch: return - val 1 ; start
rank: 684
score: 98.49571736653645
patch: return new val 1 ;
rank: 684
score: 98.45887974330357
patch: switch ( - 1 ) {
rank: 685
score: 98.84716796875
patch: return ( - val 1 ) + val 1 ;
rank: 685
score: 98.63038219105114
patch: int val 1 = val 1 * val $NUMBER$ ;
rank: 685
score: 98.62383161272321
patch: return val 1 & 1 ;
rank: 685
score: 98.52527573529412
patch: return - 1 ; val 1 { return - val 1 ; return val 1 ;
rank: 685
score: 98.49477132161458
patch: val 1 = 0 ;
rank: 685
score: 98.45365397135417
patch: return ( true ) ;
rank: 686
score: 98.85483022836539
patch: return ( val 1 ; case 1 : return - 1 ;
rank: 686
score: 98.80839538574219
patch: return - $NUMBER$ ; } else {
rank: 686
score: 98.77051544189453
patch: return - $STRING$ ; - 1 ;
rank: 686
score: 98.52420043945312
patch: return - 1 ; / / / / / ; return - val 1 ;
rank: 686
score: 98.49463762555804
patch: return 0 ; case 0 ?
rank: 686
score: 98.4534912109375
patch: return Float - val 1 ;
rank: 687
score: 98.8458251953125
patch: return val $NUMBER$ & - val $NUMBER$ ;
rank: 687
score: 98.56119210379464
patch: long return - val 1 ;
rank: 687
score: 98.52396392822266
patch: return ( val 1 - val 1 1 1 1 1 1 1 1 ;
rank: 687
score: 98.45155552455357
patch: return - $NUMBER$ * $NUMBER$ ;
rank: 688
score: 98.84506564670139
patch: return val 1 return - val 1 ;
rank: 688
score: 98.80815294053819
patch: return - $NUMBER$ ? 1 : 1 ;
rank: 688
score: 98.76991489955357
patch: return - - val 1 ; try { return - val 1 ;
rank: 688
score: 98.6158676147461
patch: return val 1 > val 1 ;
rank: 688
score: 98.49319458007812
patch: return - & 1 ;
rank: 688
score: 98.45140584309895
patch: return Math - 1 ;
rank: 689
score: 98.85404146634616
patch: return val $NUMBER$ ; ; case 1 : return val 1 ;
rank: 689
score: 98.84159712357955
patch: return - ( val 1 - - val 1 ;
rank: 689
score: 98.76880754743304
patch: return - 0 ; ; - 1 : return - val 1 ;
rank: 689
score: 98.62939453125
patch: double val $NUMBER$ = val 1 * val 1 ;
rank: 689
score: 98.6138407389323
patch: return 0 . 1 ;
rank: 689
score: 98.52295639935662
patch: return - val 1 ; val 1 { return - val 1 ; / 1 ;
rank: 689
score: 98.49079241071429
patch: return Math * val 1 ;
rank: 689
score: 98.44586181640625
patch: return - $NUMBER$ * $STRING$ ;
rank: 690
score: 98.85390061598558
patch: return Math . min ( - 1 , - val $NUMBER$ ;
rank: 690
score: 98.80689832899306
patch: return 0 ; * * * * /
rank: 690
score: 98.62888590494792
patch: return ( - val 1 ) ? 0 : 0 ;
rank: 690
score: 98.61383056640625
patch: return 0 & - 1 ;
rank: 690
score: 98.55830383300781
patch: long case 1 : return 0 ;
rank: 690
score: 98.52283477783203
patch: return - val 1 ; return - val 1 ; / - val 1 ;
rank: 690
score: 98.44376046316964
patch: return this + val 1 ;
rank: 691
score: 98.8526611328125
patch: return Math . ceil ( - val 1 ) ; case 1 :
rank: 691
score: 98.84095348011364
patch: return - val 1 | - val 1 1 ;
rank: 691
score: 98.80687366832386
patch: return - val 1 1 / - val 1 ;
rank: 691
score: 98.52274322509766
patch: return - 1 ; / / / / / / / / val 1 ;
rank: 691
score: 98.48940604073661
patch: switch ( value 1 ) {
rank: 691
score: 98.44261823381696
patch: return $STRING$ + val $NUMBER$ ;
rank: 692
score: 98.85206821986607
patch: return Math . min ( - 1 , val 1 1 ) ;
rank: 692
score: 98.80678488991477
patch: return - 1 ; } return - 1 1 ;
rank: 692
score: 98.76728166852679
patch: return - val 1 ; - val 1 : return - 1 ;
rank: 692
score: 98.62782981178977
patch: return ( val 1 long ) - val 1 ;
rank: 692
score: 98.60974884033203
patch: return $NUMBER$ ? 0 : 1 ;
rank: 692
score: 98.55422537667411
patch: - 1 : return 0 ;
rank: 692
score: 98.52271270751953
patch: return - val 1 ; break ; val 1 { return - val $NUMBER$ ;
rank: 692
score: 98.44111851283482
patch: case 0 : return $STRING$ ;
rank: 693
score: 98.76621907552084
patch: return - 1 ; ; - val 1 { return - val 1 ;
rank: 693
score: 98.60787963867188
patch: return val 1 > val $NUMBER$ ;
rank: 693
score: 98.55314636230469
patch: return val $NUMBER$ * - 0 ;
rank: 693
score: 98.52236938476562
patch: return - val 1 ; val 1 / 1 ; return - val 1 ;
rank: 693
score: 98.4407450358073
patch: return Boolean . true ;
rank: 694
score: 98.80503151633523
patch: return - $NUMBER$ ; } else { return 0 ;
rank: 694
score: 98.7655029296875
patch: return - val 1 ; 0 * * return - val 1 ;
rank: 694
score: 98.52220916748047
patch: return - 1 ; return - 1 ; val 1 return - val 1 ;
rank: 694
score: 98.48512486049107
patch: return - Integer . 0 ;
rank: 695
score: 98.85175030048077
patch: return Math . abs ( val 1 * - val $NUMBER$ ;
rank: 695
score: 98.83673773871527
patch: return val 1 ; case - 1 ;
rank: 695
score: 98.80426025390625
patch: return - $NUMBER$ ? val 1 ;
rank: 695
score: 98.62691243489583
patch: return - val 1 * val $NUMBER$ ; case 0 :
rank: 695
score: 98.52183532714844
patch: return - 1 ; return - val 1 ; * / return - 1 ;
rank: 695
score: 98.48456682477679
patch: return & 0 val 1 ;
rank: 695
score: 98.43874104817708
patch: return Double . $STRING$ ;
rank: 696
score: 98.85166931152344
patch: return Math . POSITIVE _ INFINITY ;
rank: 696
score: 98.80376642400569
patch: return val 1 ; - 1 : return 1 ;
rank: 696
score: 98.76451110839844
patch: return - 0 ; val 1 ;
rank: 696
score: 98.62598765980114
patch: return ( - val 1 / val 1 ) ;
rank: 696
score: 98.54817199707031
patch: return ( Integer ) - 1 ;
rank: 696
score: 98.52124786376953
patch: return - 1 ; - 1 / / / / / / val 1 ;
rank: 696
score: 98.48380533854167
patch: return Integer . 1 ;
rank: 697
score: 98.85163225446429
patch: return val 1 ; case ;
rank: 697
score: 98.83384195963542
patch: return Long . - - val 1 ;
rank: 697
score: 98.80313449435764
patch: return - $NUMBER$ ; else return 1 ;
rank: 697
score: 98.76380333533653
patch: return 0 ; return - val 1 ; - 1 ; ;
rank: 697
score: 98.62579345703125
patch: return - val 1 == 0 ;
rank: 697
score: 98.51936340332031
patch: return - val 1 ; val 1 return - val 1 ; - 1 ;
rank: 697
score: 98.48359026227679
patch: return - & val 1 ;
rank: 697
score: 98.436767578125
patch: b 1 = val 1 ;
rank: 698
score: 98.80232747395833
patch: return - $NUMBER$ return - val 1 ;
rank: 698
score: 98.76375906808036
patch: if - 1 + - val 1 ; return - val 1 ;
rank: 698
score: 98.625732421875
patch: return safe CaMeL Multiply ( val 1 ,
rank: 698
score: 98.54750279017857
patch: return - ( - 1 ;
rank: 698
score: 98.51860046386719
patch: return - 1 ; val 1 { return - val 1 ; return 1 ;
rank: 698
score: 98.48284912109375
patch: return value - val 1 ;
rank: 698
score: 98.43653215680804
patch: return null * - 1 ;
rank: 699
score: 98.85088239397321
patch: return - 1 ; ; case 1 : return - val 1 ;
rank: 699
score: 98.82952880859375
patch: return - 1 | - val $NUMBER$ ;
rank: 699
score: 98.80184500558036
patch: return - 1 1 ; }
rank: 699
score: 98.76363699776786
patch: return - 1 ; val 1 { else return - val 1 ;
rank: 699
score: 98.6004638671875
patch: return - val 1 == - 1
rank: 699
score: 98.51797485351562
patch: return - val 1 ; - 1 / / * / return val 1 ;
rank: 699
score: 98.435693359375
patch: else return 0 ;
rank: 700
score: 98.84989711216518
patch: return val 1 ; case val 1 : return - val 1 ;
rank: 700
score: 98.8017911044034
patch: return - 1 1 } else { return 0 ;
rank: 700
score: 98.76299579326923
patch: return - val 1 ; - 1 ? - val 1 :
rank: 700
score: 98.51792907714844
patch: return - $NUMBER$ ; return - 1 ; val 1 { return - 1 ;
rank: 700
score: 98.47579520089286
patch: return ! - val 1 ;
rank: 701
score: 98.82316758897569
patch: return val 1 >> - val $NUMBER$ ;
rank: 701
score: 98.80064808238636
patch: return - val 1 ; } return ( double ;
rank: 701
score: 98.76235525948661
patch: return - 1 ; return - val 1 ; return - 0 ;
rank: 701
score: 98.51790364583333
patch: return - val 1 ; val 1 { return - val 1 ; return val 1 ;
rank: 701
score: 98.47469656808036
patch: return Math + val $NUMBER$ ;
rank: 701
score: 98.43538120814732
patch: return Integer . - 1 ;
rank: 702
score: 98.84971110026042
patch: assert val 1 != 0 : $STRING$ ;
rank: 702
score: 98.82097625732422
patch: return - val $NUMBER$ ; case ;
rank: 702
score: 98.80053032769098
patch: return - 1 ; else return $NUMBER$ ;
rank: 702
score: 98.76216947115384
patch: return - val 1 ; - 1 ; - val 1 :
rank: 702
score: 98.62503051757812
patch: return - - val 1 ; case 0 :
rank: 702
score: 98.54296112060547
patch: long val 1 = - 1 ;
rank: 702
score: 98.51777648925781
patch: return - 1 ; - 1 + - 1 ; return - val 1 ;
rank: 702
score: 98.43497140066964
patch: return 0 == val 1 ;
rank: 703
score: 98.84969388521634
patch: return Math . min ( - val 1 , - 1 ;
rank: 703
score: 98.76187133789062
patch: return 0 ; - - $NUMBER$ ;
rank: 703
score: 98.5173110961914
patch: return - val 1 ; return - val 1 ; break ; - $NUMBER$ ;
rank: 703
score: 98.43193708147321
patch: return 0 * max 1 ;
rank: 704
score: 98.84952799479167
patch: if ( - 1 >= val 1 )
rank: 704
score: 98.81636555989583
patch: return - val $NUMBER$ | val $NUMBER$ ;
rank: 704
score: 98.79898410373264
patch: return - val 1 ; / * ;
rank: 704
score: 98.62482299804688
patch: return ( val 1 && val $NUMBER$ ) ;
rank: 704
score: 98.51681518554688
patch: return - val 1 ; - 1 / 1 ; return - val 1 ;
rank: 704
score: 98.43089948381696
patch: return 0 ; val $NUMBER$ ;
rank: 705
score: 98.84928676060268
patch: return Math . min ( val $NUMBER$ , - val $NUMBER$ ) ;
rank: 705
score: 98.76127406529018
patch: return - val 1 ; val 1 ; return - val 1 ;
rank: 705
score: 98.62425994873047
patch: return ( Number ) val $NUMBER$ ;
rank: 705
score: 98.59725189208984
patch: return - val 1 + $NUMBER$ ;
rank: 705
score: 98.51585388183594
patch: return - val 1 ; for - 1 : return - 1 ; break ;
rank: 705
score: 98.46493530273438
patch: return & val 1 ;
rank: 705
score: 98.42890276227679
patch: case 0 : return false ;
rank: 706
score: 98.84909292367789
patch: return - 1 ; case 1 : return - 1 ; ;
rank: 706
score: 98.81174045138889
patch: return val $NUMBER$ | - val $NUMBER$ ;
rank: 706
score: 98.76087297712054
patch: return - val 1 ; return - 0 ; ; - 1 ;
rank: 706
score: 98.62421123798077
patch: return Double . max ( val 1 , val 1 ) ;
rank: 706
score: 98.59678431919643
patch: return 0 / val 1 ;
rank: 706
score: 98.51529269748264
patch: return - val 1 ; val 1 { return val 1 ; return - val 1 ;
rank: 706
score: 98.42771402994792
patch: return Integer . true ;
rank: 707
score: 98.84852818080357
patch: return Math . max ( val 1 , val $NUMBER$ 1 1 ;
rank: 707
score: 98.81094021267361
patch: return - Long . - val $NUMBER$ ;
rank: 707
score: 98.79522026909723
patch: return - 1 1 ; - 1 ;
rank: 707
score: 98.7608642578125
patch: return - 0 ; return - val 1 ; - 1 ;
rank: 707
score: 98.59518432617188
patch: return - 0 ? val 1 ;
rank: 707
score: 98.51525115966797
patch: return - val 1 ; - 1 / / * return - val 1 ;
rank: 707
score: 98.42725626627605
patch: return -= val 1 ;
rank: 708
score: 98.76029205322266
patch: return - 1 ; ; 1 ;
rank: 708
score: 98.5949935913086
patch: return val $NUMBER$ + val 1 ;
rank: 708
score: 98.5143683938419
patch: return - val 1 ; - 1 : return - val 1 ; - 1 ;
rank: 708
score: 98.42581176757812
patch: return -- val 1 ;
rank: 709
score: 98.79420471191406
patch: return 0 ; return val $NUMBER$ ;
rank: 709
score: 98.76025390625
patch: return - val 1 ; * ? if - val 1 ;
rank: 709
score: 98.62384033203125
patch: return safe CaMeL Multiply ( ( long ) - val 1 ) ;
rank: 709
score: 98.59416961669922
patch: return val 1 - - 0 ;
rank: 709
score: 98.51396942138672
patch: return - val 1 ; val 1 : return - val 1 ; break ;
rank: 710
score: 98.84652005709134
patch: if ( val 1 < val 1 ) return val 1 ;
rank: 710
score: 98.62372295673077
patch: return - val 1 == 0 ? 1 : val 1 ;
rank: 710
score: 98.52864074707031
patch: return - $NUMBER$ * - 0 ;
rank: 710
score: 98.51324821920956
patch: return - val 1 ; / / / / / / return - val 1 ;
rank: 710
score: 98.45215715680804
patch: return - + val $NUMBER$ ;
rank: 710
score: 98.42068917410714
patch: return Math + - 1 ;
rank: 711
score: 98.84585336538461
patch: return val 1 == 0 ? - 1 : - 1 ;
rank: 711
score: 98.80763753255208
patch: return - 1 << - val $NUMBER$ ;
rank: 711
score: 98.79305691189236
patch: return - $NUMBER$ ? - val 1 ;
rank: 711
score: 98.7593524639423
patch: if - 1 == - 1 ; return - val 1 ;
rank: 711
score: 98.51324462890625
patch: return - val 1 ; 1 / ; * / return - val 1 ;
rank: 711
score: 98.45132882254464
patch: return - Integer . 1 ;
rank: 711
score: 98.41611153738839
patch: return - - 1 ; }
rank: 712
score: 98.8457500751202
patch: return val 1 ; break ; default : return - 1 ;
rank: 712
score: 98.80710177951389
patch: return - val 1 << val 1 ;
rank: 712
score: 98.79071807861328
patch: return - 1 ; * * /
rank: 712
score: 98.75928548177083
patch: return - val 1 ; ; - 0 : return - val 1 ;
rank: 712
score: 98.62364850725446
patch: return safe CaMeL Multiply ( val 1 , - 1 1 ) ;
rank: 712
score: 98.51318359375
patch: return - 1 ; - 1 / / / / / return - val 1 ;
rank: 712
score: 98.44896589006696
patch: return - Boolean . 0 ;
rank: 712
score: 98.41244942801339
patch: throw new Arithmetic CaMeL Exception (
rank: 713
score: 98.84542410714286
patch: if ( val 1 == - 1 ) return - val 1 ;
rank: 713
score: 98.75906808035714
patch: return - val 1 ; - 1 ; return - - 1 ;
rank: 713
score: 98.62351296164773
patch: return val 1 == - 1 : val $NUMBER$ ;
rank: 713
score: 98.524169921875
patch: return - -- val 1 ;
rank: 713
score: 98.51251220703125
patch: return - 1 ; return - 1 ; return - val 1 ; break ;
rank: 713
score: 98.44723074776786
patch: return 0 | val 1 ;
rank: 713
score: 98.41196114676339
patch: return 0 ; case 0 ;
rank: 714
score: 98.8453838641827
patch: if ( - 1 <= val 1 ) return val 1 ;
rank: 714
score: 98.78955841064453
patch: return - $NUMBER$ ; return $NUMBER$ ;
rank: 714
score: 98.7586669921875
patch: return - - 1 ; - 1 ; return - val 1 ;
rank: 714
score: 98.62327991832386
patch: return null ; case 0 : return val 1 ;
rank: 714
score: 98.51181927849265
patch: return - val 1 ; val 1 { return val 1 ; return val 1 ;
rank: 714
score: 98.40929303850446
patch: return 0 * 0 1 ;
rank: 715
score: 98.84498814174107
patch: return Math . min ( - val 1 , val $NUMBER$ 1 ;
rank: 715
score: 98.80507405598958
patch: return - val $NUMBER$ / val $NUMBER$ ;
rank: 715
score: 98.75792585100446
patch: return - val 1 ; * * ; return - val 1 ;
rank: 715
score: 98.62319711538461
patch: return safe CaMeL Multiply ( val $NUMBER$ , 0 1 ) ;
rank: 715
score: 98.51164245605469
patch: return - val 1 ; - 1 / - 1 ; return - 1 ;
rank: 715
score: 98.44423130580357
patch: return double - val 1 ;
rank: 716
score: 98.80466037326389
patch: return - ( Integer ) val 1 ;
rank: 716
score: 98.78795030381944
patch: return - 1 ; return 0 1 ;
rank: 716
score: 98.75769856770833
patch: return 0 ; val 1 ; val 1 { return - val 1 ;
rank: 716
score: 98.62310791015625
patch: return ( Number ) - val $NUMBER$ ;
rank: 716
score: 98.51310511997768
patch: return - += - 1 ;
rank: 716
score: 98.51116584329044
patch: return - 1 ; return - val 1 ; val 1 { return - 1 ;
rank: 716
score: 98.44313267299107
patch: return new - val $NUMBER$ ;
rank: 717
score: 98.8424072265625
patch: return Math . floor ( - val 1 ) ; case 1 :
rank: 717
score: 98.75762939453125
patch: return - 1 ; 1 *
rank: 717
score: 98.62305797230114
patch: long val 1 = ( long ) val 1 ;
rank: 717
score: 98.58005196707589
patch: return val 1 * val 1
rank: 717
score: 98.51050567626953
patch: return - 1 ; val 1 { return - - val 1 ; break ;
rank: 717
score: 98.44305419921875
patch: return - ! val 1 ;
rank: 718
score: 98.84228515625
patch: if ( - val 1 == - 1 ) return val 1 ;
rank: 718
score: 98.80337863498264
patch: return - ( Long ) val 1 ;
rank: 718
score: 98.75725555419922
patch: return - 1 ; ; 0 ;
rank: 718
score: 98.62300109863281
patch: int val $NUMBER$ = - 1 ;
rank: 718
score: 98.57816569010417
patch: return val 1 * 0
rank: 718
score: 98.51038953993056
patch: return - val 1 ; - 1 / / / / / return - val 1 ;
rank: 718
score: 98.43610491071429
patch: val 1 = - $NUMBER$ ;
rank: 718
score: 98.40277099609375
patch: return $NUMBER$ * true ;
rank: 719
score: 98.78461456298828
patch: return - 1 ; break 1 ;
rank: 719
score: 98.7569110576923
patch: return - val 1 ; try { if - val 1 ;
rank: 719
score: 98.6229717548077
patch: long safe CaMeL Multiply ( val 1 , val 1 ) ;
rank: 719
score: 98.51010131835938
patch: return - val 1 ; return - - val 1 ; return val 1 ;
rank: 719
score: 98.43145751953125
patch: return - 0 - 0 ;
rank: 719
score: 98.39966837565105
patch: return Double . false ;
rank: 720
score: 98.75675201416016
patch: return 0 ; - - 0 ;
rank: 720
score: 98.62288041548295
patch: return Long . value CaMeL Of ( val $NUMBER$ )
rank: 720
score: 98.57683454241071
patch: return val 1 + $NUMBER$ ;
rank: 720
score: 98.50992584228516
patch: return - 1 ; / / / / * / return - val 1 ;
rank: 720
score: 98.43129475911458
patch: return long . 1 ;
rank: 720
score: 98.39900425502232
patch: return 0 int val 1 ;
rank: 721
score: 98.83946397569444
patch: if ( val 1 >= val 1 ;
rank: 721
score: 98.79872639973958
patch: return - - ( - val 1 ;
rank: 721
score: 98.75639125279018
patch: return - val 1 ; - 1 + - - val 1 ;
rank: 721
score: 98.62285822088069
patch: return ( - val $NUMBER$ ) / val 1 ;
rank: 721
score: 98.50985897288604
patch: return - val 1 ; val 1 { return - val 1 ; break ; }
rank: 721
score: 98.42992292131696
patch: return Math [ 0 ] ;
rank: 722
score: 98.83848741319444
patch: return Math . round - val 1 ;
rank: 722
score: 98.79841444227431
patch: return val $NUMBER$ % - val 1 ;
rank: 722
score: 98.78047180175781
patch: return - $NUMBER$ / - 1 ;
rank: 722
score: 98.75619070870536
patch: return - 1 ; - 1 ; else return - val 1 ;
rank: 722
score: 98.62284342447917
patch: return - val 1 * ( long ) val 1 ;
rank: 722
score: 98.57577950613839
patch: return val 1 == - 1
rank: 722
score: 98.50984700520833
patch: return - val 1 ; return - val 1 ; break ; return - val 1 ;
rank: 722
score: 98.39580426897321
patch: return 0 ; case 1 ;
rank: 723
score: 98.79776340060764
patch: return - val 1 ; case ; ;
rank: 723
score: 98.78034210205078
patch: return - val 1 ; if ;
rank: 723
score: 98.75579364483173
patch: return - val 1 ; case - 1 return - 1 ;
rank: 723
score: 98.57309395926339
patch: return 0 ? val 1 ;
rank: 723
score: 98.509765625
patch: return - 1 ; return - 1 ; - 1 ; return - val 1 ;
rank: 723
score: 98.42803955078125
patch: return val 1 * ] ;
rank: 723
score: 98.3953145345052
patch: return Boolean . $STRING$ ;
rank: 724
score: 98.78001403808594
patch: return - $NUMBER$ ; * * /
rank: 724
score: 98.62233664772727
patch: double val 1 = val 1 * val 1 ;
rank: 724
score: 98.50868135340073
patch: return val 1 ; return - val 1 ; val 1 { return val 1 ;
rank: 724
score: 98.42708914620536
patch: return - Double . $NUMBER$ ;
rank: 724
score: 98.39528111049107
patch: throw new Runnable ( ) {
rank: 725
score: 98.79412841796875
patch: return val 1 & - 1 1 ;
rank: 725
score: 98.755615234375
patch: return - val 1 ; - - 1 ; return - 1 ;
rank: 725
score: 98.62220594618056
patch: return val 1 ; case - $NUMBER$ :
rank: 725
score: 98.5078986672794
patch: return - 1 ; val 1 { return - 1 ; return - val 1 ;
rank: 726
score: 98.79313151041667
patch: return val 1 & - - 1 ;
rank: 726
score: 98.77877044677734
patch: return - 1 1 } else {
rank: 726
score: 98.5077263327206
patch: return - 1 ; val 1 { return - val 1 ; / - 1 ;
rank: 726
score: 98.42574637276786
patch: return ( int ) 0 ;
rank: 727
score: 98.83287217881944
patch: if ( - 1 > val 1 ;
rank: 727
score: 98.78991021050348
patch: return val 1 - ( val 1 ;
rank: 727
score: 98.77806091308594
patch: return - 1 ; } if ;
rank: 727
score: 98.75414167131696
patch: return - - val 1 ; 0 : return - val 1 ;
rank: 727
score: 98.62157185872395
patch: return safe CaMeL Multiply ( val 1 , start ) ;
rank: 727
score: 98.56236049107143
patch: return 0 & val $NUMBER$ ;
rank: 727
score: 98.50728113511029
patch: return - val 1 ; val 1 { return val 1 ; / - 1 ;
rank: 727
score: 98.39048258463542
patch: return val 1 * ;
rank: 728
score: 98.77716064453125
patch: return - val 1 ? 0 ;
rank: 728
score: 98.75409807477679
patch: return - - val 1 ; else { return - val 1 ;
rank: 728
score: 98.62123616536458
patch: return val 1 ? val $NUMBER$ : - val $NUMBER$ ;
rank: 728
score: 98.50705973307292
patch: return - val 1 ; val 1 { if val 1 : return - val 1 ;
rank: 728
score: 98.38999720982143
patch: return Math . - $NUMBER$ ;
rank: 729
score: 98.82866753472223
patch: return val 1 ; case val $NUMBER$ :
rank: 729
score: 98.78771294487848
patch: return - ( - val 1 1 ;
rank: 729
score: 98.75386555989583
patch: return - 1 ; ; - - 1 : return - val 1 ;
rank: 729
score: 98.6209945678711
patch: return val 1 != - 1 ;
rank: 729
score: 98.55849783761161
patch: return - val 1 == 0
rank: 729
score: 98.50691223144531
patch: return - val 1 ; - 1 / / / / * val 1 ;
rank: 730
score: 98.82711791992188
patch: return Math . - val $NUMBER$ ;
rank: 730
score: 98.75350247896634
patch: if - 1 + - val 1 ; return - 1 ;
rank: 730
score: 98.6209716796875
patch: return - val 1 == 0 ? 0 : val $NUMBER$ ;
rank: 730
score: 98.5067367553711
patch: return - val 1 ; return - val 1 ; - 1 ; break ;
rank: 730
score: 98.38909040178571
patch: return - ( false ) ;
rank: 731
score: 98.82618543836806
patch: if ( - 1 != val 1 )
rank: 731
score: 98.78659396701389
patch: - val 1 = - val 1 ;
rank: 731
score: 98.77485487196181
patch: return - $NUMBER$ 1 ; - 1 ;
rank: 731
score: 98.75346374511719
patch: return 0 ; ; - 1 :
rank: 731
score: 98.62019486860795
patch: return ( - val 1 * val $NUMBER$ ) ;
rank: 731
score: 98.55619594029018
patch: return 0 << val 1 ;
rank: 731
score: 98.50667572021484
patch: return - val 1 ; - 1 / / ; return - val 1 ;
rank: 732
score: 98.78589545355902
patch: return - $NUMBER$ | - val 1 ;
rank: 732
score: 98.77467176649306
patch: return - val 1 ; * * ;
rank: 732
score: 98.7525146484375
patch: return Boolean . value CaMeL Of ( - val 1 1 1 1 ;
rank: 732
score: 98.62009840745192
patch: return Math . min ( val $NUMBER$ , - $NUMBER$ ) ;
rank: 732
score: 98.50653435202206
patch: return - val 1 ; val 1 { return - val 1 - val 1 ;
rank: 732
score: 98.48216901506696
patch: return - ( val $NUMBER$ ;
rank: 732
score: 98.4154052734375
patch: safe CaMeL Multiply ( ) ;
rank: 733
score: 98.78568522135417
patch: return Math . max ( val 1 ;
rank: 733
score: 98.75250651041667
patch: return - 1 ; - 1 ; val 1 { return - 1 ;
rank: 733
score: 98.50558471679688
patch: return - 1 ; val 1 { return - val 1 ; break ; }
rank: 733
score: 98.41305106026786
patch: long max = val 1 ;
rank: 733
score: 98.38554164341518
patch: return 0 * 0 ; }
rank: 734
score: 98.82208930121527
patch: return val 1 ; case 1 : ;
rank: 734
score: 98.78299967447917
patch: return val 1 1 * val 1 ;
rank: 734
score: 98.75246756417411
patch: return - 1 ; return - val 1 ; - 1 ; ;
rank: 734
score: 98.61979166666667
patch: if ( safe CaMeL Multiply ( val 1 ) ) {
rank: 734
score: 98.5526123046875
patch: return 0 != val 1 ;
rank: 734
score: 98.50555419921875
patch: return - val 1 ; return val 1 ; val 1 { return - val 1 ;
rank: 734
score: 98.38511439732143
patch: return $STRING$ + - 1 ;
rank: 735
score: 98.78091430664062
patch: return Long . parse CaMeL Long ;
rank: 735
score: 98.75241524832589
patch: return - - 1 ; case - 1 : return - 1 ;
rank: 735
score: 98.5519307454427
patch: return 0 + 0 ;
rank: 735
score: 98.50509823069854
patch: return - val 1 ; - 1 / / / / / return - 1 ;
rank: 735
score: 98.41175188337054
patch: return $NUMBER$ - val 1 ;
rank: 735
score: 98.38485281808036
patch: return Math & - 1 ;
rank: 736
score: 98.82042439778645
patch: return val 1 ; ;
rank: 736
score: 98.780029296875
patch: return val 1 1 & - 1 ;
rank: 736
score: 98.75094839242789
patch: return - 1 ; case - 0 : return - 1 ;
rank: 736
score: 98.61898803710938
patch: double val $NUMBER$ = - val 1 * val $NUMBER$ ;
rank: 736
score: 98.5047836303711
patch: return - 1 ; / / / / / * return - val 1 ;
rank: 736
score: 98.41169084821429
patch: return - -= val 1 ;
rank: 736
score: 98.38465372721355
patch: try { return 0 ;
rank: 737
score: 98.82012261284723
patch: if ( val 1 > val 1 ;
rank: 737
score: 98.7726821899414
patch: return - $NUMBER$ - - 1 ;
rank: 737
score: 98.61893717447917
patch: float val 1 = - val $NUMBER$ ;
rank: 737
score: 98.50290256076389
patch: return - 1 ; val 1 { return - val 1 ; return - val 1 ;
rank: 737
score: 98.41106305803571
patch: return - ++ val 1 ;
rank: 737
score: 98.38259887695312
patch: return / - 1 ;
rank: 738
score: 98.77151150173611
patch: return - 1 ; * * * /
rank: 738
score: 98.75082833426339
patch: if - 1 + val 1 ; else return - val 1 ;
rank: 738
score: 98.6184590657552
patch: return - val 1 ? - 0 : val 1 ;
rank: 738
score: 98.501953125
patch: return - 1 ; return - val 1 ; val 1 { return val 1 ;
rank: 738
score: 98.41066196986607
patch: return Integer * val 1 ;
rank: 739
score: 98.77022879464286
patch: return 0 ; return 1 ;
rank: 739
score: 98.75061907087054
patch: return - val 1 ; val 1 = - - val 1 ;
rank: 739
score: 98.50173770680146
patch: return - val 1 ; val 1 { return - val 1 ; return 1 ;
rank: 739
score: 98.41002546037946
patch: return Double + val $NUMBER$ ;
rank: 739
score: 98.37942940848214
patch: else { return val 1 ;
rank: 740
score: 98.81913926866319
patch: return Math . abs - val $NUMBER$ ;
rank: 740
score: 98.76994323730469
patch: return - - 1 val 1 ;
rank: 740
score: 98.75039876302084
patch: return 0 ; - 1 ; val 1 { return - val 1 ;
rank: 740
score: 98.6177469889323
patch: return - val 1 * val 1 ; case 0 :
rank: 740
score: 98.5399398803711
patch: return val 1
rank: 740
score: 98.50156537224265
patch: return - val 1 ; - 1 / / / / / return val 1 ;
rank: 740
score: 98.37826538085938
patch: throw new Arithmetic CaMeL
rank: 741
score: 98.81693267822266
patch: throw new Error ( $STRING$ ) ;
rank: 741
score: 98.7694091796875
patch: return - $NUMBER$ & val 1 ;
rank: 741
score: 98.61774236505681
patch: return val $NUMBER$ ? - 1 : val $NUMBER$ ;
rank: 741
score: 98.5013427734375
patch: return - val 1 ; for - 1 : return - val 1 ; break ;
rank: 741
score: 98.40910993303571
patch: case 1 : return 1 ;
rank: 741
score: 98.37724958147321
patch: return Boolean - val 1 ;
rank: 742
score: 98.77670288085938
patch: return - val $NUMBER$ / $NUMBER$ ;
rank: 742
score: 98.76920863560268
patch: return - 0 1 1 ;
rank: 742
score: 98.74930245535714
patch: return - val 1 ; - 1 ; ; return - 1 ;
rank: 742
score: 98.61765543619792
patch: long val 1 = - val 1 * val $NUMBER$ ;
rank: 742
score: 98.49689797794117
patch: return - val 1 ; return - val 1 ; break ; return val 1 ;
rank: 742
score: 98.40869140625
patch: return & - $NUMBER$ ;
rank: 742
score: 98.37250627790179
patch: throw new long val 1 ;
rank: 743
score: 98.81608072916667
patch: return val $NUMBER$ ; ; case 1 :
rank: 743
score: 98.77590603298611
patch: return - Short . MAX _ VALUE ;
rank: 743
score: 98.76859828404018
patch: return 0 + - $NUMBER$ ;
rank: 743
score: 98.74825345552884
patch: return - val 1 ; - 1 ; case - 1 ;
rank: 743
score: 98.61724384014423
patch: return safe CaMeL Multiply ( - val 1 , 0 ) ;
rank: 743
score: 98.49248190487133
patch: return - $NUMBER$ ; return - 1 ; val 1 { return - val 1 ;
rank: 743
score: 98.45350864955357
patch: return - + - 1 ;
rank: 743
score: 98.37128557477679
patch: return Long ? val 1 ;
rank: 744
score: 98.81576538085938
patch: return val 1 ^ val 1 ;
rank: 744
score: 98.74818522135416
patch: return - 1 ; - 1 ; - 1 { return - 1 ;
rank: 744
score: 98.6153055826823
patch: return - val 1 ; case 0 : return $STRING$ ;
rank: 744
score: 98.49149576822917
patch: return - val 1 ; val 1 { return - val 1 ; / - 1 ;
rank: 744
score: 98.405322265625
patch: return long $NUMBER$ ;
rank: 745
score: 98.77242279052734
patch: return - val $NUMBER$ * $NUMBER$ ;
rank: 745
score: 98.74777456430289
patch: return - 1 ; ; case 0 : return - 1 ;
rank: 745
score: 98.49052159926471
patch: return - val 1 ; val 1 { return - - val 1 ; / ;
rank: 745
score: 98.44988141741071
patch: return safe CaMeL Multiply 1 ;
rank: 745
score: 98.40392049153645
patch: return - & $NUMBER$ ;
rank: 745
score: 98.36767578125
patch: return true ; case 0 :
rank: 746
score: 98.76679338727679
patch: return val 1 val 1 ;
rank: 746
score: 98.74752371651786
patch: return - val 1 ; val 1 { return val 1 ; ;
rank: 746
score: 98.61485072544643
patch: return ( val $NUMBER$ ) ; case 0 : return val 1 ;
rank: 746
score: 98.48945168887867
patch: return - 1 ; / / / / / / * return - val 1 ;
rank: 746
score: 98.40355573381696
patch: return - Integer + 0 ;
rank: 746
score: 98.36642892020089
patch: return $NUMBER$ * - 0 ;
rank: 747
score: 98.76671600341797
patch: return - val $NUMBER$ val 1 ;
rank: 747
score: 98.74742126464844
patch: return - 1 ; val 1 :
rank: 747
score: 98.48811609604779
patch: return - 1 ; break ; val 1 { return - val 1 ; break ;
rank: 747
score: 98.44705636160714
patch: return - 1 . 0 ;
rank: 747
score: 98.40339006696429
patch: return - - value $NUMBER$ ;
rank: 747
score: 98.36570521763393
patch: return max 1 * 0 ;
rank: 748
score: 98.76605224609375
patch: return - val 1 & 1 ;
rank: 748
score: 98.74729701450893
patch: return - val 1 ; - 1 return - - val 1 ;
rank: 748
score: 98.48749856387867
patch: return - val 1 ; - 1 / / / / / / / / ;
rank: 748
score: 98.43792724609375
patch: return += - 1 ;
rank: 748
score: 98.3656005859375
patch: return 0 * return 0 ;
rank: 749
score: 98.76529693603516
patch: return - val 1 ; else {
rank: 749
score: 98.6141024502841
patch: return safe CaMeL Multiply ( ( val $NUMBER$ ) ;
rank: 749
score: 98.48724724264706
patch: return - 1 ; val 1 { return val 1 ; return - val 1 ;
rank: 749
score: 98.3988037109375
patch: return 0 : return 1 ;
rank: 749
score: 98.3645528157552
patch: return Boolean . 1 ;
rank: 750
score: 98.80864800347223
patch: throw new Error ( val 1 ) ;
rank: 750
score: 98.74653843470982
patch: return - - val 1 ; val 1 { return val 1 ;
rank: 750
score: 98.61410086495536
patch: return val 1 . float CaMeL Value ( ) ; case 0 :
rank: 750
score: 98.48690975413604
patch: return - val 1 ; - 1 / / * / = - val 1 ;
rank: 750
score: 98.39642333984375
patch: return Double . $NUMBER$ ;
rank: 750
score: 98.36422293526786
patch: return - <= val 1 ;
rank: 751
score: 98.76567925347223
patch: return - 1 ; case - 1 ;
rank: 751
score: 98.48647173713235
patch: return - val 1 ; val 1 { return - val 1 / val 1 ;
rank: 751
score: 98.35988362630208
patch: throw new - 1 ;
rank: 752
score: 98.76494683159723
patch: return - ( val 1 << $NUMBER$ ;
rank: 752
score: 98.76283264160156
patch: return - 1 ; } else ;
rank: 752
score: 98.48520795036765
patch: return - val 1 ; / / / / * / return - val 1 ;
rank: 753
score: 98.76340060763889
patch: return - ( double ) val 1 ;
rank: 753
score: 98.76142883300781
patch: return 1 ; return val 1 ;
rank: 753
score: 98.5184326171875
patch: return - val 1
rank: 753
score: 98.48516845703125
patch: return - val 1 ; return - val 1 ; * / return - val 1 ;
rank: 753
score: 98.42184012276786
patch: return - [ 1 ] ;
rank: 753
score: 98.35768636067708
patch: return Boolean . $NUMBER$ ;
rank: 754
score: 98.80654568142361
patch: if ( val 1 < val $NUMBER$ ;
rank: 754
score: 98.75987243652344
patch: return Math . MAX _ VALUE ;
rank: 754
score: 98.6131591796875
patch: return val $NUMBER$ ? 0 : - val 1 ;
rank: 754
score: 98.48438218060662
patch: return - val 1 ; - 1 ; / * / return - val 1 ;
rank: 754
score: 98.42165701729911
patch: result = - val $NUMBER$ ;
rank: 754
score: 98.39290073939732
patch: return - Boolean . 1 ;
rank: 754
score: 98.35577392578125
patch: return Math . $STRING$ ;
rank: 755
score: 98.80375162760417
patch: if ( val 1 != - 1 ;
rank: 755
score: 98.7581787109375
patch: return 0 | - val 1 ;
rank: 755
score: 98.75403594970703
patch: return - 1 | - 1 ;
rank: 755
score: 98.74539888822116
patch: if - 1 + val 1 ; return - - 1 ;
rank: 755
score: 98.50941685267857
patch: return val 1 ? 0 ;
rank: 755
score: 98.48358513327206
patch: return - val 1 ; - 1 / * / / return - val 1 ;
rank: 755
score: 98.42122977120536
patch: else return - val $NUMBER$ ;
rank: 755
score: 98.35159301757812
patch: return Boolean . false ;
rank: 756
score: 98.75192696707589
patch: return val 1 ; default :
rank: 756
score: 98.7449951171875
patch: return - val 1 ; return - val 1 ; - 1 ; ;
rank: 756
score: 98.61239963107639
patch: return - val 1 & val $NUMBER$ ;
rank: 756
score: 98.5089111328125
patch: return val 1 - 1 ;
rank: 756
score: 98.48285271139706
patch: return - 1 ; return - val 1 ; break ; return - val 1 ;
rank: 756
score: 98.39111328125
patch: return long $NUMBER$ val 1 ;
rank: 757
score: 98.7564468383789
patch: return - 0 + - $NUMBER$ ;
rank: 757
score: 98.75039672851562
patch: return val 1 << val 1 ;
rank: 757
score: 98.74424525669643
patch: return - val 1 ; try { return - val 1 ; }
rank: 757
score: 98.4826301125919
patch: return - 1 ; val 1 { return - 1 + - - val 1 ;
rank: 757
score: 98.39111328125
patch: return - - & 1 ;
rank: 757
score: 98.35099283854167
patch: return >= val 1 ;
rank: 758
score: 98.80254364013672
patch: break val 1 ; case 1 :
rank: 758
score: 98.7562026977539
patch: return - 1 ; return null ;
rank: 758
score: 98.7430419921875
patch: return - val 1 ; else return - val 1 ; ;
rank: 758
score: 98.48257266773896
patch: return - 1 ; return - val 1 ; val 1 return - val 1 ;
rank: 758
score: 98.4174092610677
patch: { return - 1 ;
rank: 758
score: 98.35020955403645
patch: return ( false ) ;
rank: 759
score: 98.80192057291667
patch: return Math . min - val $NUMBER$ ;
rank: 759
score: 98.74529266357422
patch: return val $NUMBER$ & - 1 ;
rank: 759
score: 98.7429668719952
patch: return - val 1 ; - 1 + val 1 ; ;
rank: 759
score: 98.61131940569196
patch: return - val 1 ; case 1 : return val 1 ; }
rank: 759
score: 98.50428989955357
patch: return 0 > val 1 ;
rank: 759
score: 98.48147403492646
patch: return - val 1 ; - 1 + val 1 : return - val 1 ;
rank: 759
score: 98.41402180989583
patch: return 0 ; break ;
rank: 759
score: 98.39077322823661
patch: return ? 0 : 0 ;
rank: 759
score: 98.3490702311198
patch: switch ( $STRING$ ) {
rank: 760
score: 98.80136447482639
patch: / * return val 1 ; * /
rank: 760
score: 98.75494384765625
patch: return - $NUMBER$ 1 val 1 ;
rank: 760
score: 98.74268450055804
patch: return - val 1 ; 1 : { return - val 1 ;
rank: 760
score: 98.6105205829327
patch: return - val 1 ? val $NUMBER$ : - val 1 ;
rank: 760
score: 98.50088936941964
patch: return 0 || val 1 ;
rank: 760
score: 98.48033989800348
patch: return - val 1 ; val 1 return - val 1 ; return - val 1 ;
rank: 760
score: 98.41377476283482
patch: result = - - 1 ;
rank: 760
score: 98.34568277994792
patch: return *= val 1 ;
rank: 761
score: 98.79960632324219
patch: return Math . Na CaMeL N ;
rank: 761
score: 98.74242292131696
patch: return - - 1 ; val 1 : return - val 1 ;
rank: 761
score: 98.61017608642578
patch: float val $NUMBER$ = val 1 ;
rank: 761
score: 98.48002115885417
patch: return - val 1 ; / / / / / / / return - val 1 ;
rank: 761
score: 98.38816324869792
patch: return - * 0 ;
rank: 762
score: 98.75196838378906
patch: return - 1 & - 1 ;
rank: 762
score: 98.74272155761719
patch: return - val 1 << $NUMBER$ ;
rank: 762
score: 98.74200439453125
patch: return - 1 ; return false ;
rank: 762
score: 98.61016845703125
patch: if ( val $NUMBER$ != 0 )
rank: 762
score: 98.49532645089286
patch: return - 0 . $NUMBER$ ;
rank: 762
score: 98.47868077895221
patch: return - 1 ; return - 1 ; val 1 : return - val 1 ;
rank: 762
score: 98.38332693917411
patch: return - Math + 0 ;
rank: 763
score: 98.7987060546875
patch: if ( - 1 >= val $NUMBER$ ;
rank: 763
score: 98.75170135498047
patch: return Integer . value CaMeL Of ;
rank: 763
score: 98.74196079799107
patch: return - val 1 ; 0 1 ; return - val 1 ;
rank: 763
score: 98.74090576171875
patch: return Long . - val $NUMBER$ ;
rank: 763
score: 98.38262939453125
patch: return - max $NUMBER$ ;
rank: 763
score: 98.33200073242188
patch: return Math . 0 ;
rank: 764
score: 98.79728868272569
patch: throw new Illegal CaMeL Argument CaMeL Exception ;
rank: 764
score: 98.75104522705078
patch: return 0 ; * * * /
rank: 764
score: 98.74195207868304
patch: return - val 1 ; try { return - val 1 ; ;
rank: 764
score: 98.73485565185547
patch: return - val 1 >> $NUMBER$ ;
rank: 764
score: 98.49131556919643
patch: return - 0 + 0 ;
rank: 764
score: 98.47732364430146
patch: return - 1 ; val 1 { return - 1 ; else return - 1 ;
rank: 764
score: 98.40907505580357
patch: return - * - 1 ;
rank: 764
score: 98.38151041666667
patch: return Integer + 0 ;
rank: 765
score: 98.79721069335938
patch: if ( val 1 == 0 )
rank: 765
score: 98.75038146972656
patch: return - val 1 1 ; ;
rank: 765
score: 98.74095916748047
patch: return - 1 ; return true ;
rank: 765
score: 98.4906717936198
patch: return 0 . $NUMBER$ ;
rank: 765
score: 98.4767204733456
patch: return - 1 ; if val 1 : return - 1 ; return - 1 ;
rank: 765
score: 98.38087972005208
patch: val $NUMBER$ = 0 ;
rank: 766
score: 98.74937438964844
patch: return - $NUMBER$ : - 1 ;
rank: 766
score: 98.73292541503906
patch: return val 1 % val $NUMBER$ ;
rank: 766
score: 98.60907537286931
patch: return - val $NUMBER$ ? val $NUMBER$ : 0 ;
rank: 766
score: 98.47418571920956
patch: return - val 1 ; / / / / / / / / val 1 ;
rank: 766
score: 98.32210286458333
patch: return $NUMBER$ * $NUMBER$ ;
rank: 767
score: 98.74855041503906
patch: return - 0 & - 1 ;
rank: 767
score: 98.73927525111607
patch: return - val 1 ; 0 ; ; return - val 1 ;
rank: 767
score: 98.60899135044643
patch: return ( val 1 ) ; case 1 : return val 1 ;
rank: 767
score: 98.48699079241071
patch: return val 1 / $NUMBER$ ;
rank: 767
score: 98.47415500217014
patch: return val 1 ; val 1 { return - val 1 ; return - val 1 ;
rank: 767
score: 98.40673828125
patch: return val $NUMBER$ * 1 ;
rank: 767
score: 98.32037353515625
patch: return $NUMBER$ * $STRING$ ;
rank: 768
score: 98.7469482421875
patch: return - 0 ; break ;
rank: 768
score: 98.73892647879464
patch: return - 1 ; - 1 ; return - - val 1 ;
rank: 768
score: 98.60895330255681
patch: return Double . value CaMeL Of ( val $NUMBER$ )
rank: 768
score: 98.48570033482143
patch: return 0 : - 0 ;
rank: 768
score: 98.47399184283088
patch: return - val 1 ; max return - val 1 ; return - val 1 ;
rank: 768
score: 98.40672810872395
patch: return - ( 0 ;
rank: 768
score: 98.37435913085938
patch: return Integer * 0 ;
rank: 768
score: 98.31917317708333
patch: return Long . true ;
rank: 769
score: 98.74253845214844
patch: return - 1 + val $NUMBER$ ;
rank: 769
score: 98.60884602864583
patch: return ( - - val $NUMBER$ ) ;
rank: 769
score: 98.47283576516544
patch: return - val 1 ; equals - 1 : return - val 1 ; break ;
rank: 769
score: 98.37366594587054
patch: val 1 = - 0 ;
rank: 769
score: 98.31817016601562
patch: return return 0 ;
rank: 770
score: 98.7412109375
patch: return - $NUMBER$ [ 1 ] ;
rank: 770
score: 98.73876953125
patch: return - val 1 ; - - 0 return - val 1 ;
rank: 770
score: 98.72334798177083
patch: return Long val 1 ;
rank: 770
score: 98.60874586838942
patch: return - val 1 ; case 1 : = val 1 ;
rank: 770
score: 98.47279268152573
patch: return - 1 ; return - 1 ; val 1 { return - - 1 ;
rank: 771
score: 98.7381591796875
patch: return - - 1 ; * / { return - val 1 ;
rank: 771
score: 98.60861440805289
patch: return ( ( long ) val 1 ) / val $NUMBER$ ;
rank: 771
score: 98.48212541852679
patch: return 1 - val 1 ;
rank: 771
score: 98.47266343060662
patch: return - val 1 ; return - val 1 ; break ; return - 1 ;
rank: 771
score: 98.3718017578125
patch: return value $NUMBER$ ;
rank: 771
score: 98.3158467610677
patch: return ~ val 1 ;
rank: 772
score: 98.78129577636719
patch: return val $NUMBER$ ; case $NUMBER$ :
rank: 772
score: 98.73899623325893
patch: return - 1 val $NUMBER$ ;
rank: 772
score: 98.73804524739583
patch: return - val 1 ; - - 1 ; return - val 1 ;
rank: 772
score: 98.60763113839286
patch: return safe CaMeL Multiply ( val 1 , 1 , 0 ) ;
rank: 772
score: 98.47115749782986
patch: return - val 1 ; val 1 { return - val 1 + - val 1 ;
rank: 772
score: 98.40062604631696
patch: return - = val 1 ;
rank: 772
score: 98.37053571428571
patch: return Integer & - 1 ;
rank: 772
score: 98.30893961588542
patch: return - 0 ; }
rank: 773
score: 98.7375717163086
patch: return 0 ; return - $STRING$ ;
rank: 773
score: 98.73670959472656
patch: return - $NUMBER$ ; - 1 :
rank: 773
score: 98.7177963256836
patch: return val $NUMBER$ - val $NUMBER$ ;
rank: 773
score: 98.60736846923828
patch: float val 1 = val 1 ;
rank: 773
score: 98.47035127527573
patch: return - val 1 ; val 1 / - 1 ; return - val 1 ;
rank: 773
score: 98.40059116908482
patch: - $NUMBER$ : return 0 ;
rank: 773
score: 98.30785115559895
patch: return 0 : 0 ;
rank: 774
score: 98.73750813802083
patch: return - val 1 ; case - $NUMBER$ : return - val 1 ;
rank: 774
score: 98.48032633463542
patch: return 0 ? 0 ;
rank: 774
score: 98.47026510799633
patch: return val 1 ; val 1 { return - val 1 ; return val 1 ;
rank: 774
score: 98.30228678385417
patch: switch ( 0 ) {
rank: 775
score: 98.73702298677884
patch: if - 1 < - 1 ; return - val 1 ;
rank: 775
score: 98.71395874023438
patch: return - val 1 / 1 ;
rank: 775
score: 98.60659354073661
patch: return ( safe CaMeL Multiply ( val $NUMBER$ , 0 ) ) ;
rank: 775
score: 98.47987874348958
patch: return 0 - 0 ;
rank: 775
score: 98.46853458180146
patch: return - 1 ; - 1 * / return - 1 ; return - 1 ;
rank: 775
score: 98.36879185267857
patch: return val 1 * val $NUMBER$
rank: 775
score: 98.30164591471355
patch: return $NUMBER$ * 1 ;
rank: 776
score: 98.7347640991211
patch: return null ; return - 1 ;
rank: 776
score: 98.71390533447266
patch: return Double . NEGATIVE _ INFINITY ;
rank: 776
score: 98.60633341471355
patch: return safe CaMeL Multiply ( ( val 1 ) ) ;
rank: 776
score: 98.46845838758681
patch: return - val 1 ; - 1 / / / / / / / val 1 ;
rank: 776
score: 98.36780657087054
patch: switch ( return 1 ) {
rank: 776
score: 98.3011983235677
patch: return val $NUMBER$ ; }
rank: 777
score: 98.73630934495192
patch: if - $NUMBER$ + val 1 ; return - val 1 ;
rank: 777
score: 98.73412322998047
patch: return - $NUMBER$ | - 1 ;
rank: 777
score: 98.60624186197917
patch: if ( val $NUMBER$ != 0 ) {
rank: 777
score: 98.47819301060268
patch: return val 1 << $NUMBER$ ;
rank: 777
score: 98.46790986902573
patch: return - 1 ; / / / / / / ; return - val 1 ;
rank: 777
score: 98.39674886067708
patch: return + - 1 ;
rank: 777
score: 98.3005879720052
patch: return 1 * true ;
rank: 778
score: 98.7362811748798
patch: if - 1 < val 1 ; return - val 1 ;
rank: 778
score: 98.73172760009766
patch: return - $NUMBER$ - val $NUMBER$ ;
rank: 778
score: 98.71060943603516
patch: return val 1 % - 1 ;
rank: 778
score: 98.6055399576823
patch: return - val $NUMBER$ ? val $NUMBER$ : val $NUMBER$ ;
rank: 778
score: 98.478173828125
patch: return 0 ) ;
rank: 778
score: 98.4663444967831
patch: return - val 1 ; return val 1 ; val 1 { return val 1 ;
rank: 779
score: 98.76393127441406
patch: return Math . MIN _ VALUE ;
rank: 779
score: 98.73609337439903
patch: return val 1 ; return - 1 ; ; - 1 ;
rank: 779
score: 98.60533905029297
patch: return ( ( val $NUMBER$ ) ;
rank: 779
score: 98.46536075367646
patch: return - val 1 ; - 1 + - 1 ; return - val 1 ;
rank: 779
score: 98.29278564453125
patch: return safe CaMeL Multiply ;
rank: 780
score: 98.73581368582589
patch: return - val 1 ; 0 / ; return - val 1 ;
rank: 780
score: 98.72733306884766
patch: return - $NUMBER$ ; * * ;
rank: 780
score: 98.475341796875
patch: return val 1 - $NUMBER$ ;
rank: 780
score: 98.46532485064338
patch: return - val 1 ; return - val 1 ; break ; - - 1 ;
rank: 780
score: 98.36062186104911
patch: return val 1 / 0 ;
rank: 781
score: 98.72675323486328
patch: return - 1 ; * * ;
rank: 781
score: 98.69953918457031
patch: return - - val 1 ; ;
rank: 781
score: 98.60471888950893
patch: return safe CaMeL Multiply ( val 1 , $STRING$ , 0 ) ;
rank: 781
score: 98.46528894761029
patch: return - 1 ; return - 1 ; return - 1 ; return - 1 ;
rank: 781
score: 98.35871233258929
patch: return new long 1 ] ;
rank: 781
score: 98.28354899088542
patch: return Integer . $STRING$ ;
rank: 782
score: 98.76174926757812
patch: if ( val 1 == 0 ;
rank: 782
score: 98.7265625
patch: return - 1 ; } else
rank: 782
score: 98.60292405348558
patch: return ( ( long ) val 1 * val $NUMBER$ ) ;
rank: 782
score: 98.46504480698529
patch: return - val 1 ; / / / / / * return - val 1 ;
rank: 782
score: 98.39020647321429
patch: return $NUMBER$ : return 0 ;
rank: 783
score: 98.73470633370536
patch: return - val 1 ; * ; / return - val 1 ;
rank: 783
score: 98.69383239746094
patch: return - - ( val 1 ;
rank: 783
score: 98.60259540264423
patch: return val 1 ; case - 1 : return val $NUMBER$ ;
rank: 783
score: 98.46473604090073
patch: return - val 1 ; 1 / / / / / return - val 1 ;
rank: 783
score: 98.39004952566964
patch: return 1 * - 0 ;
rank: 783
score: 98.3365478515625
patch: return - - true ;
rank: 783
score: 98.2822774251302
patch: return $NUMBER$ * false ;
rank: 784
score: 98.72561645507812
patch: return - val 1 - 1 ;
rank: 784
score: 98.68772888183594
patch: return - 1 - val $NUMBER$ ;
rank: 784
score: 98.60250854492188
patch: int val $NUMBER$ = val $NUMBER$ ;
rank: 784
score: 98.46399643841912
patch: return - val 1 ; for val 1 : return - val 1 ; break ;
rank: 784
score: 98.33489990234375
patch: return min 1 ;
rank: 784
score: 98.2772216796875
patch: return T val 1 ;
rank: 785
score: 98.73299734933036
patch: return - val 1 ; - - 0 : return val 1 ;
rank: 785
score: 98.72300720214844
patch: return 0 return - val 1 ;
rank: 785
score: 98.68698120117188
patch: return Long . NEGATIVE _ INFINITY ;
rank: 785
score: 98.60049203725961
patch: return ( ( long ) val 1 ) - val 1 ;
rank: 785
score: 98.46559361049107
patch: return - val 1 != 0
rank: 785
score: 98.46270392922794
patch: return - val 1 ; - 1 / / / ; return - val 1 ;
rank: 785
score: 98.3869120279948
patch: return ++ val 1 ;
rank: 785
score: 98.27689615885417
patch: return Float . true ;
rank: 786
score: 98.75408172607422
patch: return Math . NEGATIVE _ INFINITY ;
rank: 786
score: 98.68458557128906
patch: return val 1 ^ - 1 ;
rank: 786
score: 98.59983607700893
patch: return val $NUMBER$ . long CaMeL Value ( ) ? val 1 ;
rank: 786
score: 98.46419270833333
patch: return - 0 ) ;
rank: 786
score: 98.46110265395221
patch: return - val 1 ; val 1 int / 1 ; return - val 1 ;
rank: 786
score: 98.33319091796875
patch: return value val $NUMBER$ ;
rank: 787
score: 98.74853515625
patch: return val 1 ; case $NUMBER$ ;
rank: 787
score: 98.73295084635417
patch: return - val 1 ; - val 1 return - - val 1 ;
rank: 787
score: 98.68453216552734
patch: return - val $NUMBER$ ; default ;
rank: 787
score: 98.59941101074219
patch: return - val 1 . value ;
rank: 787
score: 98.46070053998162
patch: return val 1 ; return - val 1 ; return - val 1 ; break ;
rank: 787
score: 98.27090454101562
patch: return length 1 ;
rank: 788
score: 98.74349539620536
patch: return - 1 ; case ;
rank: 788
score: 98.73282296316964
patch: return - val 1 ; ; - 1 : return val 1 ;
rank: 788
score: 98.68414306640625
patch: return val 1 > - 1 ;
rank: 788
score: 98.59898158482143
patch: return - val 1 ; safe CaMeL Multiply ( val $NUMBER$ ) ;
rank: 788
score: 98.46054974724265
patch: return - 1 ; val 1 { return - val 1 ; break ; break ;
rank: 788
score: 98.3267333984375
patch: return long 1 ;
rank: 788
score: 98.2704366048177
patch: return long CaMeL Value ;
rank: 789
score: 98.7426528930664
patch: assert val 1 == - 1 ;
rank: 789
score: 98.73180389404297
patch: return true ; return - 0 ;
rank: 789
score: 98.71922084263393
patch: return val $NUMBER$ ; break ;
rank: 789
score: 98.67979213169643
patch: return val 1 >> $NUMBER$ ;
rank: 789
score: 98.59867858886719
patch: return val $NUMBER$ || val $NUMBER$ ;
rank: 789
score: 98.46038459329044
patch: return - 1 ; / / / / / * / return - val 1 ;
rank: 789
score: 98.27029418945312
patch: return short val 1 ;
rank: 790
score: 98.73152160644531
patch: return - 1 ; * ; /
rank: 790
score: 98.71917724609375
patch: return - 1 ; / * ;
rank: 790
score: 98.67977905273438
patch: return - val 1 ; } ;
rank: 790
score: 98.4599250344669
patch: return - val 1 ; / / / / / / / return val 1 ;
rank: 790
score: 98.45443289620536
patch: return val 1 << 1 ;
rank: 790
score: 98.38130696614583
patch: { return val 1 ;
rank: 790
score: 98.32289632161458
patch: return - . 1 ;
rank: 790
score: 98.26795450846355
patch: try { return true ;
rank: 791
score: 98.71897888183594
patch: return - val 1 ; - ;
rank: 791
score: 98.67808532714844
patch: return - 1 << - 1 ;
rank: 791
score: 98.59791395399306
patch: return - val $NUMBER$ || val $NUMBER$ ;
rank: 791
score: 98.45975988051471
patch: return val 1 ; break ; val 1 { return - val 1 ; break ;
rank: 791
score: 98.38080705915179
patch: return - ( 0 ) ;
rank: 791
score: 98.26783243815105
patch: return ( 0 ) ;
rank: 792
score: 98.73096575055804
patch: if - val 1 + val 1 ; return - val 1 ;
rank: 792
score: 98.71874128069196
patch: return - - $NUMBER$ 1 ;
rank: 792
score: 98.67708587646484
patch: return val 1 << - 1 ;
rank: 792
score: 98.59760393415179
patch: return - Long . max ( val 1 , val 1 ) ;
rank: 792
score: 98.459228515625
patch: return - val 1 ; - 1 / / / / = - val 1 ;
rank: 792
score: 98.45307268415179
patch: return 0 + - 0 ;
rank: 792
score: 98.32145182291667
patch: return 0 val $NUMBER$ ;
rank: 792
score: 98.2633768717448
patch: return [ 0 ] ;
rank: 793
score: 98.73072052001953
patch: if - 1 + val 1 ;
rank: 793
score: 98.73011997767857
patch: return $NUMBER$ ; case 1 :
rank: 793
score: 98.67265319824219
patch: return val 1 / - 1 ;
rank: 793
score: 98.59738595145089
patch: return val 1 . float CaMeL Value ( ) ; case 1 :
rank: 793
score: 98.45876736111111
patch: return - 1 ; return - 1 ; break ; val 1 { return - 1 ;
rank: 793
score: 98.37939453125
patch: return val 1 != 1 ;
rank: 793
score: 98.3213399251302
patch: return Long . 0 ;
rank: 794
score: 98.72964913504464
patch: return - 1 ; ; val 1 : return - val 1 ;
rank: 794
score: 98.7293472290039
patch: return - 0 ; case 1 :
rank: 794
score: 98.71768188476562
patch: return 0 ; else return 1 ;
rank: 794
score: 98.67240905761719
patch: return Long . parse CaMeL Int ;
rank: 794
score: 98.59722028459821
patch: return - val 1 * ( val 1 * val $NUMBER$ ) ;
rank: 794
score: 98.45871151194854
patch: return - val 1 ; / / / * / / return - val 1 ;
rank: 794
score: 98.44681222098214
patch: return - 1 + 0 ;
rank: 794
score: 98.32009887695312
patch: return ( - 1 )
rank: 794
score: 98.26275634765625
patch: return << val 1 ;
rank: 795
score: 98.72883823939732
patch: return - - 1 ; case 1 : return - val 1 ;
rank: 795
score: 98.72807094029018
patch: return 1 ; case 1 :
rank: 795
score: 98.71734619140625
patch: return - $NUMBER$ ; ;
rank: 795
score: 98.67221505301339
patch: return ( - val $NUMBER$ ;
rank: 795
score: 98.59711162860577
patch: return safe CaMeL Multiply ( val 1 , double $NUMBER$ ) ;
rank: 795
score: 98.45852322048611
patch: return - val 1 ; return - val 1 ; val 1 { return val 1 ;
rank: 795
score: 98.44651285807292
patch: return val 1 == 0
rank: 795
score: 98.31697591145833
patch: return - - false ;
rank: 795
score: 98.26222737630208
patch: if ( val 1 ;
rank: 796
score: 98.72860281808036
patch: return - 1 ; return - val 1 ; - 1 1 ;
rank: 796
score: 98.71722412109375
patch: return - val 1 1 ; }
rank: 796
score: 98.45840274586396
patch: return - val 1 ; val 1 { return - - - val 1 ; }
rank: 796
score: 98.44499860491071
patch: return val 1 / 1 ;
rank: 796
score: 98.3769022623698
patch: return - >> 1 ;
rank: 796
score: 98.26052856445312
patch: result = val $NUMBER$ ;
rank: 797
score: 98.72817557198661
patch: return val 1 ; ; - 0 : return - val 1 ;
rank: 797
score: 98.72295379638672
patch: return val $NUMBER$ & val 1 ;
rank: 797
score: 98.66500418526786
patch: return - 1 ; default :
rank: 797
score: 98.59674072265625
patch: return - val 1 != val 1 ;
rank: 797
score: 98.45802217371323
patch: return - val 1 ; - 1 / / / * return - val 1 ;
rank: 797
score: 98.25897216796875
patch: result = - 0 ;
rank: 798
score: 98.72705078125
patch: return - val 1 ; case - 0 : return - 1 ;
rank: 798
score: 98.71467590332031
patch: return - 1 + - 1 ;
rank: 798
score: 98.59659249441964
patch: return - super . safe CaMeL Multiply ( val 1 ) ; }
rank: 798
score: 98.4579366048177
patch: return compare val 1 ;
rank: 798
score: 98.37579345703125
patch: tmp = - val 1 ;
rank: 798
score: 98.31061401367188
patch: return - ] ;
rank: 798
score: 98.2584228515625
patch: return & 0 1 ;
rank: 799
score: 98.72696126302084
patch: return - 1 ; for - val 1 : return - val 1 ;
rank: 799
score: 98.71882629394531
patch: result = val 1 ; break ;
rank: 799
score: 98.65418243408203
patch: return - - val 1 ; }
rank: 799
score: 98.45790010340073
patch: return ( val 1 - val 1 1 1 1 1 1 1 1 1 ;
rank: 799
score: 98.25258382161458
patch: return double val 1 ;
rank: 800
score: 98.72588239397321
patch: return 0 ; return - val 1 ; - - val 1 ;
rank: 800
score: 98.71075439453125
patch: return 0 ; return $NUMBER$ ;
rank: 800
score: 98.65398406982422
patch: return - ( val 1 << ;
rank: 800
score: 98.59617262620192
patch: return ( ( - val 1 ) / val 1 ) ;
rank: 800
score: 98.45783547794117
patch: return - val 1 ; return - val 1 ; return - 1 ; break ;
rank: 800
score: 98.44202532087054
patch: return 0 & - $NUMBER$ ;
rank: 800
score: 98.2519775390625
patch: return / 1 ;
rank: 801
score: 98.72323172433036
patch: return val 1 ; return - val 1 ; - - 1 ;
rank: 801
score: 98.71054077148438
patch: return $NUMBER$ ; return val 1 ;
rank: 801
score: 98.65374755859375
patch: return Float . MIN _ VALUE ;
rank: 801
score: 98.45778521369485
patch: return - val 1 ; - 1 * / return - val 1 ; break ;
rank: 801
score: 98.44083949497768
patch: return val $NUMBER$ * $NUMBER$ ;
rank: 801
score: 98.25143432617188
patch: return ( val $NUMBER$ ;
rank: 802
score: 98.72289225260417
patch: return - val 1 ; - 1 ; ; return - val 1 ;
rank: 802
score: 98.71358489990234
patch: this . return - val 1 ;
rank: 802
score: 98.70868791852679
patch: return - $NUMBER$ 1 ; }
rank: 802
score: 98.65093231201172
patch: return Integer . POSITIVE _ INFINITY ;
rank: 802
score: 98.59559044471153
patch: return val $NUMBER$ ; case - $NUMBER$ : return val 1 ;
rank: 802
score: 98.4576416015625
patch: return - 1 ; / / / / / / / / return - 1 ;
rank: 802
score: 98.44058663504464
patch: return val 1 + val 1
rank: 802
score: 98.36971609933036
patch: return + - val 1 ;
rank: 802
score: 98.3021952311198
patch: return new long 0 ;
rank: 802
score: 98.2498067220052
patch: return Integer . false ;
rank: 803
score: 98.72271728515625
patch: return - val 1 ; - 1 : return - - 1 ;
rank: 803
score: 98.70949009486607
patch: { return - 1 ; }
rank: 803
score: 98.70840454101562
patch: return - 1 return val 1 ;
rank: 803
score: 98.45710305606617
patch: return - val 1 ; val 1 { if val 1 : return val 1 ;
rank: 803
score: 98.29896036783855
patch: return - value 0 ;
rank: 803
score: 98.24928792317708
patch: return Boolean . null ;
rank: 804
score: 98.72237723214286
patch: return - val 1 ; val 1 { if - val 1 ;
rank: 804
score: 98.70787811279297
patch: if - 1 <= val 1 ;
rank: 804
score: 98.64781188964844
patch: return - val 1 >> 1 ;
rank: 804
score: 98.59537179129464
patch: return val 1 . to CaMeL String ( ) ; case 0 :
rank: 804
score: 98.45688205295139
patch: return - 1 ; - 1 ? - 1 : - 1 ; return - 1 ;
rank: 804
score: 98.29825846354167
patch: return Integer . $NUMBER$ ;
rank: 804
score: 98.24912109375
patch: return >> 1 ;
rank: 805
score: 98.72068568638393
patch: return - val 1 ; - $NUMBER$ ; return - val 1 ;
rank: 805
score: 98.70720672607422
patch: throw new return - val 1 ;
rank: 805
score: 98.7067642211914
patch: return val 1 ; return $NUMBER$ ;
rank: 805
score: 98.647705078125
patch: return - ( val 1 1 ;
rank: 805
score: 98.45646398207721
patch: return - val 1 ; - 1 + val 1 ; return - val 1 ;
rank: 805
score: 98.2452392578125
patch: return 0 int 1 ;
rank: 806
score: 98.72028459821429
patch: return - val 1 ; / / * return - val 1 ;
rank: 806
score: 98.70629119873047
patch: return 0 + - - $NUMBER$ ;
rank: 806
score: 98.64532470703125
patch: return - Long . 1 ;
rank: 806
score: 98.59534563337054
patch: return safe CaMeL Multiply ( - val 1 , - 1 ) ;
rank: 806
score: 98.45611213235294
patch: return val 1 ; / / / / / / / return - val 1 ;
rank: 806
score: 98.29510498046875
patch: return - - null ;
rank: 806
score: 98.2447509765625
patch: return % val 1 ;
rank: 807
score: 98.71915980747768
patch: return - 1 ; val 1 { return - val 1 ; ;
rank: 807
score: 98.70281982421875
patch: return - $NUMBER$ + - $NUMBER$ ;
rank: 807
score: 98.64509582519531
patch: return - Long . - 1 ;
rank: 807
score: 98.59424700055804
patch: return safe CaMeL Multiply ( val 1 , 0 , 1 ) ;
rank: 807
score: 98.4556525735294
patch: return - val 1 ; / / / / / ; return - val 1 ;
rank: 807
score: 98.24085489908855
patch: return - 1 ) ;
rank: 808
score: 98.719140625
patch: return - val 1 ; ; - $NUMBER$ : return - val 1 ;
rank: 808
score: 98.59281703404018
patch: return ( val 1 != 0 ) ? 0 : val 1 ;
rank: 808
score: 98.4544318704044
patch: return - val 1 ; max / 0 / 1 ; return - val 1 ;
rank: 808
score: 98.43019321986607
patch: return - val 1 == $NUMBER$
rank: 808
score: 98.36785888671875
patch: long return val 1 ;
rank: 808
score: 98.29319254557292
patch: return - float 1 ;
rank: 808
score: 98.2408447265625
patch: return 0 * min ;
rank: 809
score: 98.71786934988839
patch: return - - val 1 ; val 1 return - val 1 ;
rank: 809
score: 98.59264197716347
patch: { return val 1 ; case 0 : return val 1 ;
rank: 809
score: 98.4540153952206
patch: return - 1 ; / / * / = - 1 ; return - 1 ;
rank: 809
score: 98.42967878069196
patch: return - 1 : 0 ;
rank: 809
score: 98.29305013020833
patch: return & val $NUMBER$ ;
rank: 809
score: 98.23846435546875
patch: else { return 0 ;
rank: 810
score: 98.71750313895089
patch: return - val 1 ; - 1 + return - val 1 ;
rank: 810
score: 98.63899993896484
patch: return ( - val 1 1 ;
rank: 810
score: 98.59239850725446
patch: return ( safe CaMeL Multiply ( val 1 , $NUMBER$ ) ) ;
rank: 810
score: 98.45355224609375
patch: return - val 1 ; - 1 / / / * / return - val 1 ;
rank: 810
score: 98.29297892252605
patch: return 0 ; case ?
rank: 810
score: 98.23816935221355
patch: return $STRING$ * 0 ;
rank: 811
score: 98.71712820870536
patch: return - val 1 ; try { return return - val 1 ;
rank: 811
score: 98.59204973493304
patch: return ( val 1 ) . long CaMeL Value ( ) ; }
rank: 811
score: 98.45334759880515
patch: return - val 1 ; val 1 return - val 1 ; return val 1 ;
rank: 811
score: 98.23704020182292
patch: return 0 long 1 ;
rank: 812
score: 98.7170166015625
patch: return - val 1 ; - 1 ; return - - val 1 ;
rank: 812
score: 98.69900512695312
patch: return - $NUMBER$ ; case 1 ;
rank: 812
score: 98.63542938232422
patch: return - - Long . 1 ;
rank: 812
score: 98.59203229631696
patch: return ( safe CaMeL Multiply ( val 1 , $STRING$ ) ) ;
rank: 812
score: 98.45307752821181
patch: return - val 1 ; val 1 { return - - - val 1 ; break ;
rank: 812
score: 98.29154459635417
patch: return long . $NUMBER$ ;
rank: 812
score: 98.23386637369792
patch: return Math ? 0 ;
rank: 813
score: 98.71670968191964
patch: return - 1 ; case - $NUMBER$ : return - val 1 ;
rank: 813
score: 98.69869232177734
patch: return - $NUMBER$ ; break 1 ;
rank: 813
score: 98.68617248535156
patch: sb . append ( val 1 ;
rank: 813
score: 98.63211822509766
patch: return - 1 | val 1 ;
rank: 813
score: 98.45298138786765
patch: return - val 1 ; 1 / / / * / return - val 1 ;
rank: 813
score: 98.29154052734376
patch: return double 1 ;
rank: 813
score: 98.23267618815105
patch: else return - 0 ;
rank: 814
score: 98.71649576822917
patch: return - val 1 ; return - val 1 ; return - 0 ;
rank: 814
score: 98.69867706298828
patch: return - 1 ; } * /
rank: 814
score: 98.59097994290866
patch: return ( int ) ( val 1 * val $NUMBER$ ) ;
rank: 814
score: 98.45195456112133
patch: return - 1 ; if - 1 : return - 1 ; return - 1 ;
rank: 814
score: 98.35822405133929
patch: return - 0 * 1 ;
rank: 814
score: 98.29044596354167
patch: return Math + 0 ;
rank: 814
score: 98.23169962565105
patch: return min val 1 ;
rank: 815
score: 98.716357421875
patch: return - val 1 ; * / { return - - val 1 ;
rank: 815
score: 98.69770812988281
patch: return - $NUMBER$ ; / * ;
rank: 815
score: 98.59059495192308
patch: return ( ( long ) val 1 ) + val 1 ;
rank: 815
score: 98.45177504595588
patch: return - val 1 ; val 1 { return - val 1 ; / * /
rank: 815
score: 98.22798665364583
patch: return true * 0 ;
rank: 816
score: 98.69548797607422
patch: return - $NUMBER$ ; / * /
rank: 816
score: 98.6813735961914
patch: if - 1 == val 1 ;
rank: 816
score: 98.58988131009616
patch: return safe CaMeL Multiply ( val $NUMBER$ ) * val 1 ;
rank: 816
score: 98.45163861443015
patch: return - 1 ; - val 1 : return - 1 ; return - 1 ;
rank: 816
score: 98.28780110677083
patch: return return - 0 ;
rank: 816
score: 98.22413126627605
patch: return val 1 * }
rank: 817
score: 98.71553257533482
patch: return - val 1 ; - val 1 { return val 1 ;
rank: 817
score: 98.62931060791016
patch: return - - val $NUMBER$ 1 ;
rank: 817
score: 98.58971296037946
patch: return - Math . max ( val 1 , - $NUMBER$ ) ;
rank: 817
score: 98.45149061414931
patch: return - val 1 ; return - val 1 ; return - val 1 ; break ;
rank: 818
score: 98.71550641741071
patch: return - val 1 ; ; - 0 return - val 1 ;
rank: 818
score: 98.69486236572266
patch: return 1 + - val $NUMBER$ ;
rank: 818
score: 98.68023681640625
patch: if ( val 1 < 0 ;
rank: 818
score: 98.45143636067708
patch: return - val 1 ; return val 1 + val 1 ; return - val 1 ;
rank: 818
score: 98.395751953125
patch: return val 1 ? 0
rank: 818
score: 98.2751973470052
patch: return Integer . length ;
rank: 818
score: 98.2201639811198
patch: result += val 1 ;
rank: 819
score: 98.71522739955357
patch: return - val 1 ; - val 1 { return - 1 ;
rank: 819
score: 98.6926040649414
patch: return - 1 1 } if ;
rank: 819
score: 98.67930603027344
patch: return val $NUMBER$ / val 1 ;
rank: 819
score: 98.62650299072266
patch: return - val 1 | 1 ;
rank: 819
score: 98.45125086167279
patch: return - val 1 ; return - val 1 ; return val 1 ; break ;
rank: 819
score: 98.395751953125
patch: return 0 || 0 ;
rank: 819
score: 98.3541259765625
patch: try { return - 0 ;
rank: 819
score: 98.27477010091145
patch: return Float . 0 ;
rank: 819
score: 98.2125732421875
patch: return $NUMBER$ 1 ;
rank: 820
score: 98.71519252232143
patch: return - val 1 ; long val 1 = - val 1 ;
rank: 820
score: 98.58620779854911
patch: return safe CaMeL Multiply ( - val 1 , val 1 ) ;
rank: 820
score: 98.45053439670139
patch: return - val 1 ; - 1 / / / / * return - val 1 ;
rank: 820
score: 98.39407348632812
patch: return 0 ; * /
rank: 821
score: 98.71489606584821
patch: return val 1 ; return - val 1 ; ; - 1 ;
rank: 821
score: 98.62505340576172
patch: return super . - val 1 ;
rank: 821
score: 98.58620779854911
patch: return val 1 . int CaMeL Value ( ) ? val $NUMBER$ ;
rank: 821
score: 98.45049370659723
patch: return - val 1 ; break ; val 1 { return - val 1 ; break ;
rank: 821
score: 98.3892333984375
patch: return ( 0 ;
rank: 821
score: 98.34697614397321
patch: return - val $NUMBER$ * ;
rank: 821
score: 98.20555419921875
patch: return new $STRING$ ;
rank: 822
score: 98.71487862723214
patch: return - val 1 ; return - val 1 ; val 1 ;
rank: 822
score: 98.67681121826172
patch: return Math . ; case 1 :
rank: 822
score: 98.58550153459821
patch: return Math . max ( val $NUMBER$ , - val 1 ) ;
rank: 822
score: 98.45044623480902
patch: return - val 1 ; val 1 { return - val 1 ; return - 1 ;
rank: 822
score: 98.2719217936198
patch: return Math * 0 ;
rank: 823
score: 98.71473795572916
patch: return - val 1 ; return - val 1 ; - 1 1 ;
rank: 823
score: 98.69116973876953
patch: return 0 - - val $NUMBER$ ;
rank: 823
score: 98.67272186279297
patch: throw - 1 ; case 1 :
rank: 823
score: 98.62144470214844
patch: return - val 1 | - ;
rank: 823
score: 98.58440290178571
patch: return safe CaMeL Multiply ( val 1 , $NUMBER$ , 0 ) ;
rank: 823
score: 98.44983628216912
patch: return - val 1 ; - 1 : return - - val 1 ; break ;
rank: 823
score: 98.20161946614583
patch: return |= val 1 ;
rank: 824
score: 98.69115339006696
patch: return - val 1 ] ;
rank: 824
score: 98.67144012451172
patch: if - 1 != val 1 ;
rank: 824
score: 98.58421107700893
patch: return - Math . max ( val 1 , - 1 ) ;
rank: 824
score: 98.44931209788604
patch: return - 1 ; return - val 1 ; return - val 1 ; break ;
rank: 824
score: 98.26399739583333
patch: return Math - 0 ;
rank: 824
score: 98.20082600911458
patch: switch ( true ) {
rank: 825
score: 98.71391078404018
patch: return - 1 ; ; - 1 ; return - val 1 ;
rank: 825
score: 98.58381870814732
patch: long safe CaMeL Multiply ( val 1 ) ; return val 1 ;
rank: 825
score: 98.44903923483456
patch: return - val 1 ; - 1 / * * / return - val 1 ;
rank: 825
score: 98.36703491210938
patch: return val 1 == $NUMBER$
rank: 825
score: 98.1990254720052
patch: return 1 * $STRING$ ;
rank: 826
score: 98.71337018694196
patch: if - 1 + - 1 ; else return - val 1 ;
rank: 826
score: 98.68916320800781
patch: return - 1 1 ; break ;
rank: 826
score: 98.66838073730469
patch: return val 1 ^ val $NUMBER$ ;
rank: 826
score: 98.60735212053571
patch: return val 1 >> 1 ;
rank: 826
score: 98.58189174107143
patch: return Math . min ( - val 1 , - $NUMBER$ ) ;
rank: 826
score: 98.4486083984375
patch: return - 1 ; - 1 / / / / / / return - 1 ;
rank: 826
score: 98.33191935221355
patch: return - += 0 ;
rank: 826
score: 98.2632548014323
patch: return Double * 0 ;
rank: 826
score: 98.19901529947917
patch: return $NUMBER$ * null ;
rank: 827
score: 98.71245465959821
patch: return - $NUMBER$ ; return - val 1 ; ; - 1 ;
rank: 827
score: 98.68865094866071
patch: return - $NUMBER$ + 1 ;
rank: 827
score: 98.607177734375
patch: return Long . - 1 ;
rank: 827
score: 98.58181326729911
patch: { return - val 1 ; case 0 : return val 1 ;
rank: 827
score: 98.4485724954044
patch: return - val 1 ; / / / / / / / return - 1 ;
rank: 827
score: 98.26303100585938
patch: return float val 1 ;
rank: 828
score: 98.71242850167411
patch: return - val 1 ; case val 1 return - val 1 ;
rank: 828
score: 98.68830871582031
patch: return - val 1 ; return ;
rank: 828
score: 98.605224609375
patch: return Long . 1 ;
rank: 828
score: 98.57904052734375
patch: return ( safe CaMeL Multiply ( val 1 , 1 ) ) ;
rank: 828
score: 98.44849989149306
patch: return - val 1 ; - 1 : return - val 1 ; return - 1 ;
rank: 828
score: 98.34659830729167
patch: return 0 ; case )
rank: 829
score: 98.71194022042411
patch: return val 1 ; ; - $NUMBER$ : return - val 1 ;
rank: 829
score: 98.68814849853516
patch: return Double . value CaMeL Of ;
rank: 829
score: 98.66605377197266
patch: return val 1 ; ; case ;
rank: 829
score: 98.60492815290179
patch: return ~ - val 1 ;
rank: 829
score: 98.44846598307292
patch: return - 1 ; do
rank: 829
score: 98.34654744466145
patch: return val 1 != 0
rank: 829
score: 98.256591796875
patch: return & 1 ;
rank: 829
score: 98.19237263997395
patch: return Long . false ;
rank: 830
score: 98.71182686941964
patch: return - 1 ; case val 1 : return - val 1 ;
rank: 830
score: 98.6660385131836
patch: break - 1 ; case 1 :
rank: 830
score: 98.603515625
patch: return - ( long ;
rank: 830
score: 98.57489885602679
patch: return safe CaMeL Multiply ( val 1 , val 1 ) ; }
rank: 830
score: 98.44791906020221
patch: return - 1 ; val 1 { if - val 1 : return - 1 ;
rank: 831
score: 98.7115478515625
patch: return - val 1 ; ; - 1 return - - val 1 ;
rank: 831
score: 98.59812418619792
patch: return Long val $NUMBER$ ;
rank: 831
score: 98.57473318917411
patch: return safe CaMeL Multiply ( val 1 , true , 0 ) ;
rank: 831
score: 98.44689223345588
patch: return val 1 ; val 1 { return - val 1 ; / - 1 ;
rank: 831
score: 98.32449340820312
patch: ret = - 1 ;
rank: 831
score: 98.25426025390625
patch: return value 0 ;
rank: 831
score: 98.19017537434895
patch: return Float . $STRING$ ;
rank: 832
score: 98.71148274739583
patch: return - - val 1 ; - 1 ; return - val 1 ;
rank: 832
score: 98.6867167154948
patch: return val $NUMBER$ 1 ;
rank: 832
score: 98.59064592633929
patch: return - - 1 ; ;
rank: 832
score: 98.57250104631696
patch: return safe CaMeL Multiply ( val 1 , false , 0 ) ;
rank: 832
score: 98.4466552734375
patch: return - 1 ; - 1 ; / / / / return - val 1 ;
rank: 832
score: 98.31516520182292
patch: tmp = - 1 ;
rank: 832
score: 98.25410970052083
patch: return - double 1 ;
rank: 832
score: 98.18855794270833
patch: tmp = val 1 ;
rank: 833
score: 98.7112060546875
patch: return - 1 ; for - val 1 { return - val 1 ;
rank: 833
score: 98.68621826171875
patch: return - val $NUMBER$ + 1 ;
rank: 833
score: 98.6645278930664
patch: if ( val 1 != 0 ;
rank: 833
score: 98.57033865792411
patch: return - val 1 == 0 ? - 1 : val 1 ;
rank: 833
score: 98.44638241038604
patch: return - val 1 ; ; / / / * / return - val 1 ;
rank: 833
score: 98.25279744466145
patch: return Integer - 0 ;
rank: 834
score: 98.71098981584821
patch: if - val 1 == 0 1 ; return - val 1 ;
rank: 834
score: 98.66437530517578
patch: return val $NUMBER$ ; case 1 ;
rank: 834
score: 98.57012939453125
patch: return - val $NUMBER$ ; case - 1 : return val 1 ;
rank: 834
score: 98.44571940104167
patch: return - val 1 ; return - 1 ; val 1 { return - val 1 ;
rank: 834
score: 98.25032552083333
patch: return - + 0 ;
rank: 834
score: 98.18685302734374
patch: throw - 1 ;
rank: 835
score: 98.71037946428571
patch: return - val 1 ; ; - 0 : return - 1 ;
rank: 835
score: 98.6838150024414
patch: return - val $NUMBER$ ; * /
rank: 835
score: 98.56892613002232
patch: return val 1 . to CaMeL String ( ) ; case 1 :
rank: 835
score: 98.4453986672794
patch: return - 1 ; - 1 / / / / * return - val 1 ;
rank: 835
score: 98.33482666015625
patch: return & $NUMBER$ ;
rank: 835
score: 98.24903361002605
patch: return - min $NUMBER$ ;
rank: 835
score: 98.18665771484375
patch: return new 0 ;
rank: 836
score: 98.70834786551339
patch: return - val 1 ; 1 * ; return - val 1 ;
rank: 836
score: 98.56802804129464
patch: return - val $NUMBER$ ; case - $NUMBER$ : return val 1 ;
rank: 836
score: 98.44424099392361
patch: return - 1 ; val 1 { return - val 1 ; break ; - 1 ;
rank: 836
score: 98.29019165039062
patch: long return - 1 ;
rank: 836
score: 98.24849853515624
patch: return - max ;
rank: 837
score: 98.70819091796875
patch: return - 1 ; ; - val 1 { return - 1 ;
rank: 837
score: 98.66092354910714
patch: / * return val 1 ;
rank: 837
score: 98.44414924172794
patch: return - val 1 ; case 1 / - 1 : return - val 1 ;
rank: 837
score: 98.18436889648437
patch: return 0 $NUMBER$ ;
rank: 838
score: 98.70782063802083
patch: return - 1 ; - 1 ; val 1 { return val 1 ;
rank: 838
score: 98.56691196986607
patch: return ( ( long ) val 1 ) ? 0 : 0 ;
rank: 838
score: 98.44339328342014
patch: return - val 1 ; break ; return - val 1 ; return - val 1 ;
rank: 838
score: 98.2448221842448
patch: return Long * 0 ;
rank: 838
score: 98.18190307617188
patch: return start 1 ;
rank: 839
score: 98.7060791015625
patch: return - 1 ; case - 1 : { return - val 1 ;
rank: 839
score: 98.67893981933594
patch: return 0 ? - val 1 ;
rank: 839
score: 98.56607491629464
patch: return val 1 . long CaMeL Value ( ) ; case $NUMBER$ :
rank: 839
score: 98.55481828962054
patch: return val 1 ; default ;
rank: 839
score: 98.44295925564236
patch: return - val 1 ; val 1 { return - val 1 ; break ; break ;
rank: 839
score: 98.31488037109375
patch: return 0 & $NUMBER$ ;
rank: 839
score: 98.18175252278645
patch: return Integer . TRUE ;
rank: 840
score: 98.7059326171875
patch: return - 1 ; ; case - 1 : return - 1 ;
rank: 840
score: 98.56433977399554
patch: return ( val $NUMBER$ != 0 ) ? 0 : val 1 ;
rank: 840
score: 98.44287109375
patch: return ( - val 1 ; val 1 : return - val 1 ; break ;
rank: 840
score: 98.2379150390625
patch: return Double + 0 ;
rank: 841
score: 98.67766571044922
patch: return - $NUMBER$ [ 0 ] ;
rank: 841
score: 98.65587615966797
patch: if ( val 1 < 0 )
rank: 841
score: 98.56423514229911
patch: return ( val $NUMBER$ != val 1 ) ? 0 : 0 ;
rank: 841
score: 98.44284396701389
patch: return - val 1 ; val 1 = - val 1 ; return - val 1 ;
rank: 841
score: 98.18079630533855
patch: return Float . false ;
rank: 842
score: 98.70465494791667
patch: return - - 1 ; case - 1 : return - val 1 ;
rank: 842
score: 98.56215122767857
patch: return ( val 1 == 0 ) ? 0 : val 1 ;
rank: 842
score: 98.44174373851104
patch: return - 1 ; / / / / / / / ; return - 1 ;
rank: 842
score: 98.30642700195312
patch: return - ( val 1
rank: 842
score: 98.26869710286458
patch: ret = val 1 ;
rank: 842
score: 98.23504638671875
patch: return - / 0 ;
rank: 842
score: 98.17996215820312
patch: throw new - $NUMBER$ ;
rank: 843
score: 98.70464680989583
patch: return - val 1 ; - - $NUMBER$ : return - val 1 ;
rank: 843
score: 98.44127699908088
patch: return - 1 ; - 1 ; / / * / return - val 1 ;
rank: 843
score: 98.26858520507812
patch: return - = 0 ;
rank: 843
score: 98.17923990885417
patch: return 0 : true ;
rank: 844
score: 98.70455496651786
patch: return - val 1 ; - 1 ; ; - 1 * /
rank: 844
score: 98.67658233642578
patch: return 1 ; return - $NUMBER$ ;
rank: 844
score: 98.55837576729911
patch: return val 1 . value ;
rank: 844
score: 98.44036865234375
patch: return - val 1 ; val 1 { return val 1 + - - val 1 ;
rank: 844
score: 98.30445353190105
patch: return - 1 . 0
rank: 844
score: 98.23077392578125
patch: return double . 0 ;
rank: 844
score: 98.17918090820312
patch: return += 0 ;
rank: 845
score: 98.67579650878906
patch: return - 1 ; break ; }
rank: 845
score: 98.4400993795956
patch: return val 1 ; val 1 { if val 1 : return - val 1 ;
rank: 845
score: 98.3041280110677
patch: return val 1 == 1
rank: 845
score: 98.2596435546875
patch: return 0 >> 1 ;
rank: 845
score: 98.1788838704427
patch: try { return null ;
rank: 846
score: 98.7017822265625
patch: return - - val 1 ; - 1 return - val 1 ;
rank: 846
score: 98.43972598805146
patch: return - val 1 ; break ; val 1 { return - val 1 ; }
rank: 846
score: 98.1768086751302
patch: return 1 * false ;
rank: 847
score: 98.70174734933036
patch: return - - val 1 ; val 1 { return - 1 ;
rank: 847
score: 98.64708709716797
patch: return 0 ; ; case 1 :
rank: 847
score: 98.43962545955883
patch: return - val 1 ; - 1 : return val 1 ; return - 1 ;
rank: 848
score: 98.70082310267857
patch: return - val 1 ; case - 1 : return - 0 ;
rank: 848
score: 98.67268371582031
patch: return - val 1 ? 1 ;
rank: 848
score: 98.4388786764706
patch: return - val 1 ; val 1 return - val 1 ; return - 1 ;
rank: 848
score: 98.29368896484375
patch: return val 1 :
rank: 848
score: 98.21258544921875
patch: return new int 0 ;
rank: 849
score: 98.69963727678571
patch: return - val 1 ; value * ; return - val 1 ;
rank: 849
score: 98.67250279017857
patch: if return - val 1 ;
rank: 849
score: 98.64435577392578
patch: return val 1 ; - 1 :
rank: 849
score: 98.51529366629464
patch: return - val 1 / ;
rank: 849
score: 98.43804253472223
patch: return - 1 ; / / / / / / / / return - val 1 ;
rank: 849
score: 98.29098510742188
patch: return val 1 ? ;
rank: 849
score: 98.17502848307292
patch: return double CaMeL Value ;
rank: 850
score: 98.6724853515625
patch: return - 0 ; } else {
rank: 850
score: 98.63394601004464
patch: throw new return - 1 ;
rank: 850
score: 98.51094273158482
patch: return - val 1 & ;
rank: 850
score: 98.43789333767361
patch: return - val 1 ; return - val 1 ; val 1 return - val 1 ;
rank: 850
score: 98.17225138346355
patch: return Integer . Double ;
rank: 851
score: 98.67176818847656
patch: return - val 1 ; null ;
rank: 851
score: 98.43714057074652
patch: return - val 1 ; / / / / / / * return - val 1 ;
rank: 851
score: 98.20801798502605
patch: return - double $NUMBER$ ;
rank: 851
score: 98.16741943359375
patch: return 0 . 0 ;
rank: 852
score: 98.69828578404018
patch: return - 1 ; ; - 1 : return - 1 ; ;
rank: 852
score: 98.67096819196429
patch: return 0 ; * * /
rank: 852
score: 98.62228829520089
patch: throw new ; case 1 :
rank: 852
score: 98.4957275390625
patch: return abs - val 1 ;
rank: 852
score: 98.43529595269098
patch: return - val 1 ; return - val 1 ; / ; return - val 1 ;
rank: 852
score: 98.20291137695312
patch: return - - ] ;
rank: 853
score: 98.69806780133929
patch: return - 1 ; return - val 1 ; - - 0 ;
rank: 853
score: 98.53758021763393
patch: return Math == val 1 ;
rank: 853
score: 98.49571010044643
patch: return - ( long 1 ;
rank: 853
score: 98.43382432725694
patch: return - val 1 ; - 1 : return - val 1 ; return val 1 ;
rank: 853
score: 98.27583821614583
patch: return 0 ; * ?
rank: 853
score: 98.23887125651042
patch: return 1 . 1 ;
rank: 853
score: 98.16253662109375
patch: return Double . TRUE ;
rank: 854
score: 98.69803292410714
patch: return - val 1 ; / / / return - val 1 ;
rank: 854
score: 98.67031860351562
patch: return - 1 1 ; else {
rank: 854
score: 98.61454554966518
patch: return 0 ; case $NUMBER$ :
rank: 854
score: 98.53712681361607
patch: return long ) val 1 ;
rank: 854
score: 98.43318006727431
patch: return - val 1 ; break ; val 1 { return - - - val 1 ;
rank: 854
score: 98.27035522460938
patch: return 0 * val 1
rank: 854
score: 98.16064453125
patch: if ( val $NUMBER$ ;
rank: 855
score: 98.69803059895834
patch: return - 1 ; ; - 1 : { return - val 1 ;
rank: 855
score: 98.43248833550348
patch: return - val 1 ; / / / / / * / return - val 1 ;
rank: 856
score: 98.69779459635417
patch: return - val 1 ; - - 1 ; break ; - 1 ;
rank: 856
score: 98.66605377197266
patch: return - 1 1 / 1 ;
rank: 856
score: 98.43079969618056
patch: return - 1 ; / / / / / / / ; return - val 1 ;
rank: 856
score: 98.26107788085938
patch: return 0 ; case ;
rank: 856
score: 98.23335774739583
patch: return + val $NUMBER$ ;
rank: 856
score: 98.1964823404948
patch: return - / 1 ;
rank: 856
score: 98.1557108561198
patch: return Integer - 1 ;
rank: 857
score: 98.6975830078125
patch: return - 1 ; return - - val 1 ; ; - 1 ;
rank: 857
score: 98.66603306361607
patch: return - 1 1 break ;
rank: 857
score: 98.51084681919643
patch: int val $NUMBER$ = 0 ;
rank: 857
score: 98.42979600694444
patch: return - val 1 ; val 1 { return - - - - - val 1 ;
rank: 857
score: 98.1963399251302
patch: return - start 1 ;
rank: 857
score: 98.15397135416667
patch: return - 1 * ;
rank: 858
score: 98.42903645833333
patch: return - 1 ; final
rank: 858
score: 98.25426228841145
patch: return 0 & 1 ;
rank: 858
score: 98.15348307291667
patch: return long val $NUMBER$ ;
rank: 859
score: 98.69512939453125
patch: return - val 1 ; case 1 : return - - 1 ;
rank: 859
score: 98.65653483072917
patch: return - 1 1 }
rank: 859
score: 98.48591831752232
patch: return - val 1 | ;
rank: 859
score: 98.42677137586806
patch: return - 1 ; val 1 { return - 1 ; else return - val 1 ;
rank: 859
score: 98.25123087565105
patch: return $NUMBER$ ? val 1
rank: 859
score: 98.1530049641927
patch: return <= val $NUMBER$ ;
rank: 860
score: 98.69487653459821
patch: return - val 1 ; - 1 1 ; return - 1 ;
rank: 860
score: 98.6534423828125
patch: return val 1 1 1 ;
rank: 860
score: 98.42674424913194
patch: return - val 1 ; - 1 : return val 1 ; return - val 1 ;
rank: 861
score: 98.69402204241071
patch: return - - val 1 ; - 1 ; return - 1 ;
rank: 861
score: 98.55698067801339
patch: final return - val 1 ;
rank: 861
score: 98.24878946940105
patch: b = val 1 ;
rank: 861
score: 98.19484456380208
patch: return - $NUMBER$ ) ;
rank: 861
score: 98.14979044596355
patch: return * - $NUMBER$ ;
rank: 862
score: 98.69391276041667
patch: return - val 1 ; - 1 1 : return - val 1 ;
rank: 862
score: 98.4259033203125
patch: return - 1 ; start
rank: 862
score: 98.19434611002605
patch: return Integer * 1 ;
rank: 863
score: 98.69341634114583
patch: return - val 1 ; ; val 1 : return - val 1 ;
rank: 863
score: 98.55382428850446
patch: / * return - 1 ;
rank: 863
score: 98.47703334263393
patch: return sum - val 1 ;
rank: 863
score: 98.42496066623264
patch: return - val 1 ; 1 / / / / / / return - val 1 ;
rank: 863
score: 98.20912679036458
patch: return -= - 1 ;
rank: 863
score: 98.19291178385417
patch: return - . 0 ;
rank: 863
score: 98.14772542317708
patch: return null * 0 ;
rank: 864
score: 98.69247000558036
patch: return - 1 ; - 1 ; - 1 + val 1 ;
rank: 864
score: 98.55289132254464
patch: if ( - val 1 ;
rank: 864
score: 98.47758265904018
patch: return ( value $NUMBER$ ) ;
rank: 864
score: 98.47505696614583
patch: return Integer val 1 ;
rank: 864
score: 98.42458767361111
patch: return - val 1 ; - 1 / / / / / / return val 1 ;
rank: 864
score: 98.19937744140626
patch: { return 0 ;
rank: 864
score: 98.18993123372395
patch: return long * 0 ;
rank: 865
score: 98.69208170572917
patch: return - 1 ; ; - $NUMBER$ : { return - val 1 ;
rank: 865
score: 98.64152308872768
patch: return - - 0 1 ;
rank: 865
score: 98.55174909319196
patch: { return val 1 ; }
rank: 865
score: 98.42401801215277
patch: return - val 1 ; - 1 + - val 1 ; return - val 1 ;
rank: 865
score: 98.14625040690105
patch: return Long . $STRING$ ;
rank: 866
score: 98.69181315104167
patch: if - val 1 ;
rank: 866
score: 98.63405354817708
patch: return - $NUMBER$ ] ;
rank: 866
score: 98.54398018973214
patch: { return - val $NUMBER$ ;
rank: 866
score: 98.23583984375
patch: return 0 + 1 ;
rank: 866
score: 98.19781494140625
patch: m = - 1 ;
rank: 866
score: 98.18734741210938
patch: d = val 1 ;
rank: 867
score: 98.69143240792411
patch: return - 1 ; return - 1 ; ; return - 1 ;
rank: 867
score: 98.63054547991071
patch: return - 0 ; * /
rank: 867
score: 98.45130411783855
patch: return val 1 & ;
rank: 867
score: 98.42296685112848
patch: return - val 1 ; for - 1 : - 1 ; return - val 1 ;
rank: 867
score: 98.23370361328125
patch: return val 1 * $NUMBER$
rank: 867
score: 98.18197631835938
patch: return Float . 1 ;
rank: 868
score: 98.69131033761161
patch: return - 1 ; ; - - 0 : return - 1 ;
rank: 868
score: 98.45023018973214
patch: return - val 1 - ;
rank: 868
score: 98.42269558376736
patch: return - val 1 ; val 1 { return - val 1 || - val 1 ;
rank: 868
score: 98.17649332682292
patch: return Double . Integer ;
rank: 868
score: 98.1414082845052
patch: return ! - $NUMBER$ ;
rank: 869
score: 98.44610595703125
patch: return - ( Long ;
rank: 869
score: 98.42211235894098
patch: return - 1 ; return - 1 ; return - 1 ; return - val 1 ;
rank: 869
score: 98.1773173014323
patch: return = val 1 ;
rank: 869
score: 98.13992919921876
patch: return true ; }
rank: 870
score: 98.42164442274306
patch: return - val 1 ; - 1 / / * / / return - val 1 ;
rank: 870
score: 98.17720540364583
patch: else return val $NUMBER$ ;
rank: 870
score: 98.17052205403645
patch: return 0 / 0 ;
rank: 870
score: 98.1395772298177
patch: return 1 * $NUMBER$ ;
rank: 871
score: 98.68971470424107
patch: return - 1 ; ; ; - 1 : return - 1 ;
rank: 871
score: 98.45350864955357
patch: return Math != val 1 ;
rank: 871
score: 98.44584437779018
patch: return - ( Long 1 ;
rank: 871
score: 98.42099338107639
patch: return - 1 ; val 1 { return - 1 ; } return - val 1 ;
rank: 871
score: 98.16592407226562
patch: return long . $STRING$ ;
rank: 872
score: 98.6881103515625
patch: if - val 1 - val 1 ; return - val 1 ;
rank: 872
score: 98.44165910993304
patch: return ~ - val $NUMBER$ ;
rank: 872
score: 98.42049153645833
patch: return - val 1 ; val 1 { return - val 1 ; - val 1 ;
rank: 872
score: 98.16143798828125
patch: return Math . true ;
rank: 872
score: 98.13800048828125
patch: else return - $NUMBER$ ;
rank: 873
score: 98.44996861049107
patch: return val 1 == 0 ;
rank: 873
score: 98.44042096819196
patch: return - Long . FALSE ;
rank: 873
score: 98.41920979817708
patch: return - val 1 ; / / / / / / ; return - val 1 ;
rank: 873
score: 98.22493896484374
patch: return 0 ; *
rank: 873
score: 98.16497802734375
patch: m = val 1 ;
rank: 873
score: 98.13753255208333
patch: b 1 = 0 ;
rank: 874
score: 98.68719482421875
patch: return - val 1 ; 0 * ? return - val 1 ;
rank: 874
score: 98.60381208147321
patch: return - 0 val $NUMBER$ ;
rank: 874
score: 98.52212960379464
patch: return val $NUMBER$ ; case ;
rank: 874
score: 98.41852484809027
patch: return - val 1 ; - 1 / / / / / / return - 1 ;
rank: 874
score: 98.16444905598958
patch: / * return 0 ;
rank: 875
score: 98.68715994698661
patch: return val 1 ; return - val 1 ; - val 1 ;
rank: 875
score: 98.44224330357143
patch: return false ; case 0 :
rank: 875
score: 98.41722276475694
patch: return - val 1 ; - 1 / / / / / / / / / ;
rank: 875
score: 98.2222412109375
patch: return / $NUMBER$ ;
rank: 875
score: 98.16011962890624
patch: return - FALSE ;
rank: 876
score: 98.68470982142857
patch: return - val 1 ; return val 1 ; ; - 1 ;
rank: 876
score: 98.59871128627232
patch: return - 1 return 0 ;
rank: 876
score: 98.51893833705357
patch: sb . return val 1 ;
rank: 876
score: 98.41643608940973
patch: return - 1 ; return - 1 ; return - val 1 ; return - 1 ;
rank: 876
score: 98.15755208333333
patch: return - val 1 *
rank: 876
score: 98.08148803710938
patch: return $NUMBER$ ; }
rank: 877
score: 98.68470110212054
patch: if - 1 ? return - 1 ; return - val 1 ;
rank: 877
score: 98.59834507533482
patch: return - $NUMBER$ - 1 ;
rank: 877
score: 98.51279994419643
patch: value = - val 1 ;
rank: 877
score: 98.44124930245536
patch: double return - val 1 ;
rank: 877
score: 98.41611056857639
patch: return - 1 ; - 1 / / / / / / return - val 1 ;
rank: 877
score: 98.22005208333333
patch: return 0 + $NUMBER$ ;
rank: 877
score: 98.15840657552083
patch: return - $STRING$ ) ;
rank: 877
score: 98.15630493164062
patch: ret = 0 ;
rank: 877
score: 98.07647705078125
patch: return ! 0 ;
rank: 878
score: 98.68446568080357
patch: return - val 1 ; - 1 ; - 1 + 1 ;
rank: 878
score: 98.59372384207589
patch: return - [ $NUMBER$ ] ;
rank: 878
score: 98.51012166341145
patch: throw - val 1 ;
rank: 878
score: 98.43476213727679
patch: return - val 1 >> ;
rank: 878
score: 98.41535780164931
patch: return - val 1 ; - 1 / / / / ; return - val 1 ;
rank: 878
score: 98.15771484375
patch: return long . true ;
rank: 879
score: 98.68403843470982
patch: return - val 1 ; * ? return - - val 1 ;
rank: 879
score: 98.58529227120536
patch: return - Integer . length ;
rank: 879
score: 98.44102260044643
patch: long ( val $NUMBER$ ) ;
rank: 879
score: 98.41436089409723
patch: return - val 1 ; return - val 1 ; / * return - val 1 ;
rank: 879
score: 98.21358235677083
patch: if ( val 1 !=
rank: 879
score: 98.15684000651042
patch: return new - 0 ;
rank: 879
score: 98.15401204427083
patch: pos = val 1 ;
rank: 879
score: 98.06016845703125
patch: return short 1 ;
rank: 880
score: 98.68324497767857
patch: return - val 1 ; case - 0 : return val 1 ;
rank: 880
score: 98.43678501674107
patch: return ( - $STRING$ ) ;
rank: 880
score: 98.41408284505208
patch: return - val 1 ; val 1 { return - val 1 ; / val 1 ;
rank: 880
score: 98.2108642578125
patch: return ( val 1
rank: 880
score: 98.152099609375
patch: return - -= 0 ;
rank: 880
score: 98.05774688720703
patch: return TRUE ;
rank: 881
score: 98.68218122209821
patch: return - 1 ; return - 1 ; ; - - 1 ;
rank: 881
score: 98.43670654296875
patch: return true ; case 1 :
rank: 881
score: 98.41402859157986
patch: return - 1 ; return - val 1 ; return - 1 ; return - 1 ;
rank: 881
score: 98.20925903320312
patch: return - val 1 )
rank: 881
score: 98.0556640625
patch: return 0 ; ;
rank: 882
score: 98.68073381696429
patch: return - $NUMBER$ ; return - val 1 ; - - 1 ;
rank: 882
score: 98.50840541294643
patch: if ( - val $NUMBER$ ;
rank: 882
score: 98.43349783761161
patch: int val 1 = 0 ;
rank: 882
score: 98.42027064732143
patch: return - Long . TRUE ;
rank: 882
score: 98.41381157769098
patch: return - 1 ; return - 1 ; val 1 { return - - val 1 ;
rank: 882
score: 98.15352376302083
patch: return value - 0 ;
rank: 882
score: 98.05406494140625
patch: return 1 ; }
rank: 883
score: 98.68007986886161
patch: return - val 1 ; if - 1 ; return - 1 ;
rank: 883
score: 98.42006429036458
patch: return - ( int ;
rank: 883
score: 98.41358100043402
patch: return - val 1 ; - 1 / - val 1 ; return - val 1 ;
rank: 883
score: 98.15306599934895
patch: return - * $NUMBER$ ;
rank: 883
score: 98.14400227864583
patch: c = - 1 ;
rank: 883
score: 98.047119140625
patch: return * 0 ;
rank: 884
score: 98.67980085100446
patch: return - - 1 ; return - val 1 ; - 1 ;
rank: 884
score: 98.50558035714286
patch: throw new Error ( $STRING$ ;
rank: 884
score: 98.20522054036458
patch: return $NUMBER$ + 0 ;
rank: 884
score: 98.15252685546875
patch: return Long + 0 ;
rank: 884
score: 98.044580078125
patch: return >> $NUMBER$ ;
rank: 885
score: 98.67973981584821
patch: return - val 1 ; case - 1 return - - 1 ;
rank: 885
score: 98.42618233816964
patch: return Long [ 0 ] ;
rank: 885
score: 98.41105143229167
patch: return - val 1 ; - 1 ; / / * / return - val 1 ;
rank: 885
score: 98.03463134765624
patch: return $STRING$ ; }
rank: 886
score: 98.67911202566964
patch: return - 1 ; ; case 0 : return - val 1 ;
rank: 886
score: 98.49526541573661
patch: r = - val 1 ;
rank: 886
score: 98.41103108723958
patch: return - 1 ; - 1 * / return - 1 ; return - val 1 ;
rank: 886
score: 98.39544677734375
patch: return val 1 >> ;
rank: 886
score: 98.20098876953125
patch: return val 1 & 0
rank: 886
score: 98.14999389648438
patch: return Integer . Integer ;
rank: 886
score: 98.13836669921875
patch: return - + 1 ;
rank: 887
score: 98.67632184709821
patch: return - val 1 + val 1 ; return - val 1 ;
rank: 887
score: 98.48902384440105
patch: return val $NUMBER$ ; ;
rank: 887
score: 98.42365373883929
patch: return Double [ 0 ] ;
rank: 887
score: 98.40974256727431
patch: return - 1 ; return - 1 ; break ; val 1 { return val 1 ;
rank: 887
score: 98.14854939778645
patch: return Integer + 1 ;
rank: 887
score: 98.13824462890625
patch: c = val 1 ;
rank: 887
score: 98.0291259765625
patch: throw val 1 ;
rank: 888
score: 98.57570975167411
patch: { return - 1 1 ;
rank: 888
score: 98.48700823102679
patch: return $NUMBER$ ; case $NUMBER$ :
rank: 888
score: 98.41937255859375
patch: long ( val 1 ) ;
rank: 888
score: 98.40877278645833
patch: return - $NUMBER$ ; try
rank: 888
score: 98.14778645833333
patch: return - long $NUMBER$ ;
rank: 888
score: 98.0279541015625
patch: return 0 0 ;
rank: 889
score: 98.57462855747768
patch: return 0 ? - 1 ;
rank: 889
score: 98.41925920758929
patch: return - val 1 * }
rank: 889
score: 98.40810818142361
patch: return - val 1 ; - 1 / * / return - val 1 ; break ;
rank: 889
score: 98.13563028971355
patch: return += val $NUMBER$ ;
rank: 889
score: 98.02498779296874
patch: return * 1 ;
rank: 890
score: 98.67458670479911
patch: return - val 1 ; case - 1 ; return - 1 ;
rank: 890
score: 98.57350376674107
patch: return - 1 1 ; else
rank: 890
score: 98.41731480189732
patch: return false ; case 1 :
rank: 890
score: 98.40780978732639
patch: return - 1 ; val 1 { return - 1 ; return - 1 ; break ;
rank: 890
score: 98.37640380859375
patch: return Integer val $NUMBER$ ;
rank: 890
score: 98.14598592122395
patch: return - * 1 ;
rank: 890
score: 98.00859375
patch: return false ; }
rank: 891
score: 98.6741943359375
patch: return - 1 ; return - 1 ; ; - 1 1 ;
rank: 891
score: 98.41481236049107
patch: return val 1 ; case 0
rank: 891
score: 98.40677897135417
patch: return - 1 ; if - val 1 : return - 1 ; return - 1 ;
rank: 891
score: 98.37239583333333
patch: return Double val 1 ;
rank: 891
score: 98.19561157226562
patch: return 0 ? 0
rank: 891
score: 98.1446533203125
patch: return Integer / 1 ;
rank: 891
score: 97.98787841796874
patch: result = true ;
rank: 892
score: 98.673583984375
patch: return - val 1 ? - val 1 : - val 1 ;
rank: 892
score: 98.56808035714286
patch: * return - val 1 ;
rank: 892
score: 98.40662977430556
patch: return - 1 ; break ; val 1 { return - 1 ; return - 1 ;
rank: 892
score: 98.14340209960938
patch: return 0 ; case 1
rank: 892
score: 98.1265360514323
patch: return - >> $NUMBER$ ;
rank: 892
score: 97.96768798828126
patch: return T 1 ;
rank: 893
score: 98.67329624720982
patch: return - val 1 ; 0 * / if - val 1 ;
rank: 893
score: 98.56800188337054
patch: return - $NUMBER$ val $NUMBER$ ;
rank: 893
score: 98.47127859933036
patch: assert val 1 != 0 ;
rank: 893
score: 98.40574137369792
patch: return - 1 ; val 1 { return - val 1 ; break ; val 1 ;
rank: 893
score: 98.1917724609375
patch: return 0 ? $NUMBER$ ;
rank: 893
score: 98.14185587565105
patch: return Math ) 0 ;
rank: 893
score: 97.96380004882812
patch: return null ; }
rank: 894
score: 98.67293875558036
patch: return - val 1 ; try { return - 1 ; break ;
rank: 894
score: 98.56513323102679
patch: if ; return - 1 ;
rank: 894
score: 98.40241156684027
patch: return - val 1 ; ; / / / / / / return - val 1 ;
rank: 894
score: 98.3489990234375
patch: return Long . FALSE ;
rank: 894
score: 97.9542724609375
patch: return exp 1 ;
rank: 895
score: 98.67271205357143
patch: return - val 1 ; return - 1 ; ; - 0 ;
rank: 895
score: 98.46966552734375
patch: result return - val 1 ;
rank: 895
score: 98.40098063151042
patch: return - val 1 ; val 1 { return - - val 1 ; / 1 ;
rank: 895
score: 98.34560139973958
patch: return 1 val 1 ;
rank: 895
score: 98.17374267578126
patch: return 0 ; /
rank: 895
score: 98.13572184244792
patch: return Integer / 0 ;
rank: 895
score: 97.9482177734375
patch: return 0 * ;
rank: 896
score: 98.40093315972223
patch: return - 1 ; return val 1 ; break ; val 1 { return - 1 ;
rank: 896
score: 98.34454345703125
patch: return - Long . ;
rank: 896
score: 98.13203938802083
patch: return Double - 0 ;
rank: 896
score: 97.94149169921874
patch: return 1 1 ;
rank: 897
score: 98.55850655691964
patch: return - 1 ; if ;
rank: 897
score: 98.46818324497768
patch: return 1 ; case $NUMBER$ :
rank: 897
score: 98.40053304036458
patch: return val 1 ; else
rank: 897
score: 98.1260009765625
patch: return float 1 ;
rank: 897
score: 97.94119873046876
patch: return chars 1 ;
rank: 898
score: 98.5545654296875
patch: return start - val 1 ;
rank: 898
score: 98.40012613932292
patch: return - val 1 ; val 1 { return - - val 1 ; return 1 ;
rank: 898
score: 98.37945556640625
patch: return ^ val 1 ;
rank: 898
score: 98.32285563151042
patch: return - ( Integer ;
rank: 898
score: 98.1208251953125
patch: return - this ;
rank: 898
score: 98.10943603515625
patch: { return - 0 ;
rank: 898
score: 97.93552856445312
patch: return $STRING$ 1 ;
rank: 899
score: 98.54872349330357
patch: return - * val $NUMBER$ ;
rank: 899
score: 98.39992947048611
patch: return - val 1 ; / / / / / / / / / val 1 ;
rank: 899
score: 98.3793233235677
patch: return ( $NUMBER$ ) ;
rank: 899
score: 98.11546630859375
patch: return double $NUMBER$ ;
rank: 899
score: 98.09370727539063
patch: -- val 1 ;
rank: 899
score: 97.9337890625
patch: return default 1 ;
rank: 900
score: 98.63062540690105
patch: return 0 ; try {
rank: 900
score: 98.54827008928571
patch: return - 1 1 } else
rank: 900
score: 98.39963107638889
patch: return - 1 ; - 1 + val 1 + val 1 ; return - 1 ;
rank: 900
score: 98.31663004557292
patch: return ~ - 1 ;
rank: 900
score: 98.110693359375
patch: return - start ;
rank: 901
score: 98.54658726283482
patch: return - $NUMBER$ ; } else
rank: 901
score: 98.3990478515625
patch: return - val 1 ; return - val 1 ; - 1 ; return - 1 ;
rank: 901
score: 98.3567606608073
patch: return ( 1 ) ;
rank: 901
score: 98.31102498372395
patch: return - ( float ;
rank: 901
score: 98.12054443359375
patch: return 0 . 0
rank: 901
score: 98.08262939453125
patch: break - 1 ;
rank: 901
score: 97.928271484375
patch: return Math ) ;
rank: 902
score: 98.62513950892857
patch: return false ; - 1 ;
rank: 902
score: 98.45588902064732
patch: throw new return val 1 ;
rank: 902
score: 98.39896647135417
patch: return - val 1 ; - val 1 : return - - val 1 ; break ;
rank: 902
score: 98.11339111328125
patch: return val 1 )
rank: 902
score: 98.103955078125
patch: return Double 1 ;
rank: 902
score: 98.07706298828126
patch: = val 1 ;
rank: 902
score: 97.92637329101562
patch: return << 1 ;
rank: 903
score: 98.61420549665179
patch: } return - - 1 ;
rank: 903
score: 98.45261928013393
patch: this . return val 1 ;
rank: 903
score: 98.39868842230902
patch: return val 1 ; val 1 { if - val 1 : return - val 1 ;
rank: 903
score: 98.08496704101563
patch: return * $NUMBER$ ;
rank: 903
score: 98.07644653320312
patch: break val 1 ;
rank: 903
score: 97.92579345703125
patch: result = $STRING$ ;
rank: 904
score: 98.54395403180804
patch: return - 1 ; else {
rank: 904
score: 98.39738633897569
patch: return - val 1 ; val 1 { return val 1 ; break ; - 1 ;
rank: 904
score: 98.0738525390625
patch: return + 0 ;
rank: 904
score: 97.92366943359374
patch: throw - $NUMBER$ ;
rank: 905
score: 98.60641043526786
patch: return - 1 ; try {
rank: 905
score: 98.39695909288194
patch: return - val 1 ; val 1 { return - val 1 ; break ; 1 ;
rank: 905
score: 98.09771118164062
patch: return - min ;
rank: 905
score: 98.06690673828125
patch: ++ val 1 ;
rank: 905
score: 97.91862182617187
patch: return SIZE 1 ;
rank: 906
score: 98.54293387276786
patch: } return - 1 1 ;
rank: 906
score: 98.39643690321181
patch: return - val 1 ; val 1 { / / * / return - val 1 ;
rank: 906
score: 98.26847330729167
patch: return val 1 T ;
rank: 906
score: 98.08873291015625
patch: return - Math .
rank: 906
score: 98.06359252929687
patch: return 0 . $NUMBER$
rank: 906
score: 98.049169921875
patch: += val 1 ;
rank: 907
score: 98.44049944196429
patch: node . return val 1 ;
rank: 907
score: 98.39588758680556
patch: return - val 1 ; - 1 / / / / / = - val 1 ;
rank: 907
score: 98.2601318359375
patch: return - ( double ;
rank: 907
score: 98.08519897460937
patch: return Integer 1 ;
rank: 907
score: 98.05757446289063
patch: return 0 . 1
rank: 907
score: 98.043359375
patch: return / 0 ;
rank: 907
score: 97.91467895507813
patch: else return true ;
rank: 908
score: 98.59252057756696
patch: else return - 1 ; ;
rank: 908
score: 98.39456515842014
patch: return - 1 ; val 1 { if - val 1 : return - val 1 ;
rank: 908
score: 98.25948079427083
patch: return ( int 1 ;
rank: 908
score: 98.0806396484375
patch: return - length ;
rank: 908
score: 98.04649047851562
patch: return - TRUE ;
rank: 908
score: 98.04033813476562
patch: long return 0 ;
rank: 908
score: 97.9081298828125
patch: return -= 0 ;
rank: 909
score: 98.59086390904018
patch: else return - - 1 ;
rank: 909
score: 98.54009137834821
patch: return - 1 1 ; ;
rank: 909
score: 98.39446343315973
patch: return - val 1 ; return - val 1 ; / * / return - 1 ;
rank: 909
score: 98.2556864420573
patch: return val 1 - ;
rank: 909
score: 98.05558471679687
patch: return - ) ;
rank: 909
score: 97.89774780273437
patch: return max $NUMBER$ ;
rank: 910
score: 98.58600725446429
patch: return - val 1 ; 0
rank: 910
score: 98.39380560980902
patch: return - 1 ; / / / / / / / / / return - 1 ;
rank: 910
score: 98.0106201171875
patch: = - 1 ;
rank: 910
score: 97.89491577148438
patch: else return 1 ;
rank: 911
score: 98.5382080078125
patch: return val $NUMBER$ ; * /
rank: 911
score: 98.39244249131944
patch: return - val 1 ; val 1 { return - val 1 ; / 1 ; }
rank: 911
score: 98.2402852376302
patch: return val 1 == ;
rank: 911
score: 98.04362182617187
patch: return - Double ;
rank: 912
score: 98.580322265625
patch: return 0 ; 1 ;
rank: 912
score: 98.52980259486607
patch: return - 0 1 ; }
rank: 912
score: 98.39234076605902
patch: return - val 1 ; - 1 / - - 1 ; return - val 1 ;
rank: 912
score: 98.2360127766927
patch: return - T 1 ;
rank: 912
score: 98.04116821289062
patch: return - Math ;
rank: 912
score: 97.99917602539062
patch: tmp = 0 ;
rank: 913
score: 98.52958170572917
patch: return - length 1 ;
rank: 913
score: 98.39181179470486
patch: return - 1 ; - 1 / / / / / ; return - val 1 ;
rank: 913
score: 98.22763061523438
patch: return Long . TRUE ;
rank: 913
score: 98.0385498046875
patch: return Long 1 ;
rank: 914
score: 98.57231794084821
patch: else { return - 1 ;
rank: 914
score: 98.39179144965277
patch: return ( val 1 - val 1 1 1 1 1 1 1 1 1 1 ;
rank: 914
score: 98.2261454264323
patch: return - long 1 ;
rank: 914
score: 97.98792724609375
patch: return $NUMBER$ ) ;
rank: 914
score: 97.88403930664063
patch: throw new ) ;
rank: 915
score: 98.55855887276786
patch: return true ; - 1 ;
rank: 915
score: 98.52811976841518
patch: return 0 return - 1 ;
rank: 915
score: 98.39116075303819
patch: return - 1 ; return - 1 ; val 1 { return - val 1 ; }
rank: 915
score: 98.34578450520833
patch: return ~ val $NUMBER$ ;
rank: 915
score: 98.2222391764323
patch: return - Double . ;
rank: 915
score: 97.87310791015625
patch: return true 1 ;
rank: 916
score: 98.55605643136161
patch: try { return - $NUMBER$ ;
rank: 916
score: 98.39114718967014
patch: return - 1 ; - 1 / / / / / / / return - 1 ;
rank: 916
score: 98.2213134765625
patch: return ( long 1 ;
rank: 916
score: 97.976953125
patch: return = 0 ;
rank: 917
score: 98.55071149553571
patch: return - 1 ; 0 *
rank: 917
score: 98.39114718967014
patch: return - val 1 ; 1 / / / / / * return - val 1 ;
rank: 917
score: 98.32962036132812
patch: throw new val 1 ;
rank: 917
score: 97.984912109375
patch: return Math 1 ;
rank: 917
score: 97.97725677490234
patch: return - 1
rank: 917
score: 97.96842041015626
patch: return ( 1 ;
rank: 918
score: 98.54700724283855
patch: return 0 ; try ;
rank: 918
score: 98.51887730189732
patch: return - Integer . TRUE ;
rank: 918
score: 98.39110649956598
patch: return - val 1 ; / / / / / / / / return val 1 ;
rank: 918
score: 98.32535807291667
patch: switch ( val 1 ;
rank: 918
score: 97.98113403320312
patch: return . 0 ;
rank: 918
score: 97.86387634277344
patch: return FALSE ;
rank: 919
score: 98.54221017020089
patch: return - val 1 ; *
rank: 919
score: 98.51842389787946
patch: return 1 ; - 1 ;
rank: 919
score: 98.39101155598958
patch: return - val 1 ; - 1 : return - val 1 ; / - 1 ;
rank: 919
score: 97.98018798828124
patch: return Float 1 ;
rank: 919
score: 97.96146240234376
patch: += - 1 ;
rank: 919
score: 97.8601318359375
patch: else return $NUMBER$ ;
rank: 920
score: 98.49815877278645
patch: } return - $NUMBER$ ;
rank: 920
score: 98.38983832465277
patch: return - 1 ; val 1 { return - val 1 ; } return - 1 ;
rank: 920
score: 97.97855224609376
patch: return . 1 ;
rank: 920
score: 97.95900268554688
patch: return ( $NUMBER$ ;
rank: 920
score: 97.85933837890624
patch: return int 1 ;
rank: 921
score: 98.38526746961806
patch: return - 1 ; / / / / / / * / return - val 1 ;
rank: 921
score: 98.31591796875
patch: throw - val $NUMBER$ ;
rank: 921
score: 98.1933085123698
patch: return Math val 1 ;
rank: 921
score: 97.85914916992188
patch: result = false ;
rank: 922
score: 98.51289585658482
patch: return - $NUMBER$ 1 ; ;
rank: 922
score: 98.4846700032552
patch: if return - 1 ;
rank: 922
score: 98.38503011067708
patch: return - 1 ; public
rank: 922
score: 98.1895751953125
patch: return val 1 > ;
rank: 922
score: 97.97510986328125
patch: return - Integer ;
rank: 923
score: 98.51107352120536
patch: { return - $NUMBER$ ; }
rank: 923
score: 98.38445366753473
patch: return - val 1 ; val 1 { return val 1 ; break ; val 1 ;
rank: 923
score: 98.3030293782552
patch: if ( - 1 ;
rank: 923
score: 98.18724568684895
patch: return - ( ( ;
rank: 923
score: 97.9385986328125
patch: m = 0 ;
rank: 923
score: 97.854443359375
patch: return *= 0 ;
rank: 924
score: 98.38437228732639
patch: return - 1 ; return - 1 ; val 1 { return - 1 ; break ;
rank: 924
score: 97.84353637695312
patch: return sum 1 ;
rank: 925
score: 98.38430447048611
patch: return - 1 ; val 1 { return - - val 1 ; return - 1 ;
rank: 925
score: 98.29172770182292
patch: break ; case 1 :
rank: 925
score: 98.18536376953125
patch: return val 1 ] ;
rank: 925
score: 97.95250244140625
patch: return Double $NUMBER$ ;
rank: 926
score: 98.50499471028645
patch: return start val 1 ;
rank: 926
score: 98.4320068359375
patch: if - 1 1 ;
rank: 926
score: 98.38307698567708
patch: return - 1 ; - 1 ? - 1 : - 1 ; return val 1 ;
rank: 926
score: 97.83453369140625
patch: return Math ;
rank: 927
score: 98.42997233072917
patch: } return - 0 ;
rank: 927
score: 98.38092719184027
patch: return - val 1 ; val 1 { if - val 1 : return val 1 ;
rank: 927
score: 97.92625732421875
patch: -= val 1 ;
rank: 927
score: 97.9216796875
patch: return 0 & 0
rank: 927
score: 97.8291748046875
patch: result = 1 ;
rank: 928
score: 98.38051350911458
patch: return - 1 ; - 1 * / return - val 1 ; return - 1 ;
rank: 928
score: 98.17626953125
patch: return val $NUMBER$ * ;
rank: 928
score: 97.9196044921875
patch: return val 1 1
rank: 928
score: 97.82537841796875
patch: else return false ;
rank: 929
score: 98.37933349609375
patch: return - 1 ; / / / / / / / * return - val 1 ;
rank: 929
score: 98.26987711588542
patch: switch ( val 1 )
rank: 929
score: 98.17463989257813
patch: return Long . ;
rank: 929
score: 98.17317708333333
patch: return ( val $NUMBER$ !=
rank: 929
score: 97.92097473144531
patch: return Math .
rank: 929
score: 97.82452392578125
patch: return - ;
rank: 930
score: 98.37914360894098
patch: return - 1 ; / / / / / / / / ; return - 1 ;
rank: 930
score: 98.17246500651042
patch: return ( $STRING$ ) ;
rank: 930
score: 98.16876220703125
patch: return val 1 / ;
rank: 930
score: 97.91658935546874
patch: return long 0 ;
rank: 930
score: 97.82188110351562
patch: return max 0 ;
rank: 931
score: 98.414306640625
patch: return 0 ; 0 ;
rank: 931
score: 98.37849256727431
patch: return - 1 ; val 1 { return - val 1 ; / - val 1 ;
rank: 931
score: 98.25526936848958
patch: double return val 1 ;
rank: 931
score: 98.16858927408855
patch: { return val $NUMBER$ ;
rank: 931
score: 97.82144775390626
patch: return 0 ; static
rank: 932
score: 98.42852783203125
patch: { return - $NUMBER$ ;
rank: 932
score: 98.37784830729167
patch: return - val 1 ; ; / / / / / * return - val 1 ;
rank: 932
score: 98.16330973307292
patch: return Double val $NUMBER$ ;
rank: 933
score: 98.4270731608073
patch: return - $NUMBER$ ; else
rank: 933
score: 98.37733968098958
patch: return - val 1 ; / / / / / / / / return - 1 ;
rank: 933
score: 98.24808756510417
patch: status = val 1 ;
rank: 933
score: 98.15579223632812
patch: return Boolean . FALSE ;
rank: 933
score: 98.15174357096355
patch: if ( val $NUMBER$ !=
rank: 933
score: 97.906494140625
patch: return double 0 ;
rank: 933
score: 97.82124633789063
patch: else return $STRING$ ;
rank: 934
score: 98.37712944878473
patch: return - val 1 ; val 1 { return - - val 1 ; break ; }
rank: 934
score: 98.24254353841145
patch: value = val 1 ;
rank: 934
score: 98.1503397623698
patch: return ( float 1 ;
rank: 934
score: 97.9050048828125
patch: return Integer $NUMBER$ ;
rank: 934
score: 97.8169921875
patch: return % 1 ;
rank: 935
score: 98.36669921875
patch: return - 1 ; *
rank: 935
score: 97.8799560546875
patch: return 0 & ;
rank: 935
score: 97.81280517578125
patch: return $NUMBER$ * ;
rank: 936
score: 98.36414591471355
patch: return - 1 ; Math
rank: 936
score: 98.14811197916667
patch: return sum val 1 ;
rank: 936
score: 97.86122436523438
patch: return + 1 ;
rank: 936
score: 97.81102752685547
patch: return min ;
rank: 937
score: 98.14502970377605
patch: return val 1 -- ;
rank: 937
score: 98.13104248046875
patch: return ( val 1 !=
rank: 937
score: 97.891845703125
patch: return int $NUMBER$ ;
rank: 937
score: 97.85653686523438
patch: return val 1 *
rank: 937
score: 97.810400390625
patch: throw new $STRING$ ;
rank: 938
score: 98.3445536295573
patch: return val 1 ; System
rank: 938
score: 98.1437276204427
patch: return 1 val $NUMBER$ ;
rank: 938
score: 98.1205342610677
patch: return - Double ] ;
rank: 938
score: 97.8888916015625
patch: return Long $NUMBER$ ;
rank: 938
score: 97.875244140625
patch: return - 0
rank: 938
score: 97.80997314453126
patch: return return true ;
rank: 939
score: 98.2095947265625
patch: assert ( val 1 ;
rank: 939
score: 97.82896728515625
patch: break val $NUMBER$ ;
rank: 939
score: 97.802734375
patch: throw new 0 ;
rank: 940
score: 98.4016621907552
patch: return - 0 ; ;
rank: 940
score: 98.32545979817708
patch: return 0 ; ; ?
rank: 940
score: 98.20890299479167
patch: sb . return $NUMBER$ ;
rank: 940
score: 98.12725830078125
patch: return Boolean . TRUE ;
rank: 940
score: 97.88438720703125
patch: return - Long ;
rank: 940
score: 97.80223999023437
patch: result = $NUMBER$ ;
rank: 941
score: 98.39296468098958
patch: throw - 1 ; }
rank: 941
score: 98.33509318033855
patch: return val 1 ; max
rank: 941
score: 98.2085469563802
patch: result = - $NUMBER$ ;
rank: 941
score: 98.0835205078125
patch: return ( ) ;
rank: 941
score: 97.86973266601562
patch: return min $NUMBER$ ;
rank: 942
score: 97.8673828125
patch: return <= 0 ;
rank: 942
score: 97.864306640625
patch: return 1 ) ;
rank: 943
score: 98.3810526529948
patch: return abs val 1 ;
rank: 943
score: 98.313720703125
patch: if - - 1 ;
rank: 943
score: 97.75047302246094
patch: throw null ;
rank: 944
score: 98.37657674153645
patch: return length val 1 ;
rank: 944
score: 98.3087666829427
patch: } return val 1 ;
rank: 944
score: 98.2952372233073
patch: return - 1 ; ?
rank: 944
score: 98.02987060546874
patch: return ( int ;
rank: 944
score: 97.85357666015625
patch: return Integer ;
rank: 944
score: 97.80133056640625
patch: = 0 ;
rank: 945
score: 98.3577372233073
patch: break - val 1 ;
rank: 945
score: 97.8526611328125
patch: return new long ;
rank: 945
score: 97.851806640625
patch: if ( val 1
rank: 945
score: 97.68675231933594
patch: return max ;
rank: 946
score: 98.35557047526042
patch: return - 0 ; else
rank: 946
score: 98.30194091796875
patch: if return val 1 ;
rank: 946
score: 98.28426106770833
patch: return 0 ; val 1
rank: 946
score: 97.92652587890625
patch: return Integer . ;
rank: 946
score: 97.79942016601562
patch: -- val $NUMBER$ ;
rank: 946
score: 97.67273712158203
patch: return Long ;
rank: 947
score: 98.35426839192708
patch: return Na CaMeL N ;
rank: 947
score: 98.18804931640625
patch: return ( Long 1 ;
rank: 947
score: 97.96376342773438
patch: long val $NUMBER$ {
rank: 947
score: 97.84056396484375
patch: return switch 1 ;
rank: 947
score: 97.79443359375
patch: flush ( ) ;
rank: 948
score: 97.83912353515625
patch: return & $STRING$ ;
rank: 948
score: 97.66144561767578
patch: return Double ;
rank: 949
score: 98.35064697265625
patch: return - $NUMBER$ 1 }
rank: 949
score: 97.89224853515626
patch: return 0 true ;
rank: 949
score: 97.86456909179688
patch: return ( long ;
rank: 949
score: 97.83342895507812
patch: return 0 * 0
rank: 949
score: 97.78577880859375
patch: -= - 1 ;
rank: 949
score: 97.61671447753906
patch: return length ;
rank: 950
score: 98.26368204752605
patch: return 0 ; ; ;
rank: 950
score: 98.1771240234375
patch: return / val 1 ;
rank: 950
score: 97.88773803710937
patch: long val 1 {
rank: 950
score: 97.832568359375
patch: throw new Runtime CaMeL
rank: 950
score: 97.8267822265625
patch: return >= 0 ;
rank: 950
score: 97.6076431274414
patch: return this ;
rank: 951
score: 98.25728352864583
patch: try { return false ;
rank: 951
score: 97.88097534179687
patch: double val $NUMBER$ {
rank: 951
score: 97.83243408203126
patch: return += 1 ;
rank: 951
score: 97.82576293945313
patch: return - double ;
rank: 951
score: 97.54458618164062
patch: return 0 }
rank: 952
score: 98.24153645833333
patch: return - val 1 :
rank: 952
score: 97.75655517578124
patch: { return 1 ;
rank: 952
score: 97.7449951171875
patch: return ) ;
rank: 953
score: 98.24050903320312
patch: return val 1 ; final
rank: 953
score: 98.1951171875
patch: return 0 ; value
rank: 953
score: 98.16671142578124
patch: return 1 ; ;
rank: 953
score: 97.84740600585937
patch: return Double . ;
rank: 953
score: 97.82114868164062
patch: return short $NUMBER$ ;
rank: 953
score: 97.68392181396484
patch: return val $NUMBER$
rank: 953
score: 97.50047302246094
patch: return value ;
rank: 954
score: 98.16698608398437
patch: return 0 ; i
rank: 954
score: 97.49662017822266
patch: return start ;
rank: 955
score: 98.32715861002605
patch: return $NUMBER$ val 1 ;
rank: 955
score: 98.16361490885417
patch: final return - 1 ;
rank: 955
score: 98.125634765625
patch: return 0 ; 1
rank: 955
score: 97.74274291992188
patch: c = 0 ;
rank: 955
score: 97.4277572631836
patch: return Boolean ;
rank: 956
score: 98.32484944661458
patch: return signum val 1 ;
rank: 956
score: 98.16258748372395
patch: return MIN _ VALUE ;
rank: 956
score: 97.82542724609375
patch: return - val $NUMBER$
rank: 956
score: 97.81783447265624
patch: return return 1 ;
rank: 956
score: 97.7945068359375
patch: return - ( ;
rank: 956
score: 97.73502197265626
patch: result += 0 ;
rank: 956
score: 97.40933227539062
patch: case 0 :
rank: 957
score: 98.15774536132812
patch: return $NUMBER$ ; ;
rank: 957
score: 97.62088012695312
patch: return - $NUMBER$
rank: 957
score: 97.60163116455078
patch: break 1 ;
rank: 958
score: 98.15603637695312
patch: throw new return 0 ;
rank: 958
score: 98.10472412109375
patch: return 0 ; else
rank: 958
score: 97.58918762207031
patch: break 0 ;
rank: 958
score: 97.27639770507812
patch: return Float ;
rank: 959
score: 98.31822713216145
patch: if return - $NUMBER$ ;
rank: 959
score: 98.06268310546875
patch: throw new ;
rank: 959
score: 98.06091918945313
patch: if - 1 ;
rank: 959
score: 97.74321899414062
patch: return ( float ;
rank: 959
score: 97.57096862792969
patch: += 0 ;
rank: 959
score: 97.24137115478516
patch: throw $STRING$ ;
rank: 960
score: 98.31515502929688
patch: = - val 1 ;
rank: 960
score: 97.78616943359376
patch: double val 1 {
rank: 960
score: 97.58995056152344
patch: return 0 1
rank: 960
score: 97.23699951171875
patch: case - 1
rank: 961
score: 97.77326049804688
patch: return 0 false ;
rank: 961
score: 97.50571695963542
patch: break ;
rank: 961
score: 97.20737711588542
patch: return ;
rank: 962
score: 97.17045084635417
patch: return Math
rank: 963
score: 98.30086263020833
patch: return value 1 1 ;
rank: 963
score: 97.9613525390625
patch: return Math . ;
rank: 963
score: 97.75194091796875
patch: return val 1 {
rank: 963
score: 97.73463439941406
patch: return long ;
rank: 963
score: 97.72447509765625
patch: return - - ;
rank: 963
score: 97.52381896972656
patch: return 0 )
rank: 964
score: 97.810546875
patch: return 0 ; try
rank: 964
score: 97.73870849609375
patch: *= val 1 ;
rank: 964
score: 97.47510528564453
patch: return 0 {
rank: 964
score: 97.46487426757812
patch: return ] ;
rank: 964
score: 96.88606770833333
patch: return Integer
rank: 965
score: 97.9083251953125
patch: continue val 1 ;
rank: 965
score: 97.77733154296875
patch: return false 1 ;
rank: 965
score: 97.39505767822266
patch: -= 0 ;
rank: 965
score: 96.84287516276042
patch: result ;
rank: 966
score: 97.6983871459961
patch: - 1 ;
rank: 966
score: 97.42976888020833
patch: return 0
rank: 966
score: 97.33106994628906
patch: long val 1
rank: 966
score: 96.83872477213542
patch: try {
rank: 967
score: 97.7184814453125
patch: return - 1 :
rank: 967
score: 96.78664143880208
patch: logger .
rank: 968
score: 97.718017578125
patch: += val $NUMBER$ ;
rank: 968
score: 97.63356018066406
patch: return double ;
rank: 968
score: 97.24032592773438
patch: return ( (
rank: 969
score: 97.92518920898438
patch: return 0 ; 0
rank: 969
score: 97.71624755859375
patch: long val $NUMBER$ :
rank: 969
score: 97.68048095703125
patch: return ( Long ;
rank: 969
score: 97.41777801513672
patch: return * ;
rank: 969
score: 96.63970947265625
patch: return -
rank: 970
score: 97.7112060546875
patch: double - 1 :
rank: 970
score: 97.46192932128906
patch: - $NUMBER$ ;
rank: 970
score: 96.5639139811198
patch: do {
rank: 971
score: 97.89735107421875
patch: } return true ;
rank: 971
score: 97.70868530273438
patch: return val 1 ==
rank: 971
score: 97.67741088867187
patch: case - 1 :
rank: 971
score: 96.54149373372395
patch: / *
rank: 972
score: 97.87559814453125
patch: } return 0 ;
rank: 972
score: 97.700341796875
patch: double val $NUMBER$ :
rank: 972
score: 97.26664733886719
patch: int val 1
rank: 972
score: 97.14573669433594
patch: case 1 ;
rank: 972
score: 96.50599161783855
patch: else {
rank: 973
score: 97.86871948242188
patch: } return false ;
rank: 973
score: 97.78744506835938
patch: -- - 1 ;
rank: 973
score: 97.69840698242187
patch: long - 1 :
rank: 973
score: 97.30877685546875
patch: return - Math
rank: 973
score: 97.12699890136719
patch: return 0 *
rank: 973
score: 97.10491943359375
patch: if 1 ;
rank: 973
score: 96.48035685221355
patch: return Boolean
rank: 974
score: 97.66322631835938
patch: return ( double ;
rank: 974
score: 97.12127685546875
patch: long - 1
rank: 974
score: 97.09747314453125
patch: - 0 ;
rank: 974
score: 96.4563700358073
patch: LOG .
rank: 975
score: 97.8536376953125
patch: return false ; ;
rank: 975
score: 97.26012420654297
patch: return & 0
rank: 975
score: 96.40024820963542
patch: return }
rank: 976
score: 97.6830322265625
patch: double val 1 :
rank: 976
score: 97.6396728515625
patch: return - SIZE ;
rank: 976
score: 97.06703186035156
patch: / 1 ;
rank: 976
score: 96.3987528483073
patch: log .
rank: 977
score: 97.84769897460937
patch: return - 1 1
rank: 977
score: 97.63442993164062
patch: return Long ; ;
rank: 977
score: 97.38417053222656
patch: return float ;
rank: 977
score: 96.3306884765625
patch: return total
rank: 978
score: 97.6639175415039
patch: case 1 :
rank: 978
score: 96.66135660807292
patch: long total
rank: 978
score: 96.3194580078125
patch: continue ;
rank: 978
score: 95.92319742838542
patch: System ;
rank: 979
score: 97.99647216796875
patch: break - $NUMBER$ ;
rank: 979
score: 97.82916259765625
patch: return 0 ; max
rank: 979
score: 97.47052001953125
patch: return ceil ;
rank: 979
score: 96.21712239583333
patch: return Long
rank: 980
score: 96.52020263671875
patch: long val
rank: 980
score: 96.16555786132812
patch: / /
rank: 980
score: 95.81309000651042
patch: Assert ;
rank: 981
score: 97.37789916992188
patch: System . ;
rank: 981
score: 97.36621856689453
patch: if ( ;
rank: 981
score: 96.67714436848958
patch: return 1
rank: 981
score: 96.4657694498698
patch: return $NUMBER$
rank: 981
score: 96.1541035970052
patch: Assert .
rank: 981
score: 95.7523701985677
patch: Logger ;
rank: 982
score: 97.9785400390625
patch: return 0 1 }
rank: 982
score: 97.3641586303711
patch: return ( }
rank: 982
score: 97.28014373779297
patch: if 0 ;
rank: 982
score: 96.146240234375
patch: return (
rank: 982
score: 94.70149230957031
patch: try
rank: 983
score: 96.55322265625
patch: for (
rank: 983
score: 94.01248168945312
patch: System
rank: 984
score: 97.19770812988281
patch: throw false ;
rank: 984
score: 95.70654296875
patch: {
rank: 985
score: 97.94267578125
patch: return ( Integer ;
rank: 985
score: 97.27178955078125
patch: ret $NUMBER$ ;
rank: 985
score: 97.19149017333984
patch: break ; *
rank: 985
score: 96.16164143880208
patch: throw new
rank: 985
score: 95.42766571044922
patch: }
rank: 985
score: 93.51497650146484
patch: final
rank: 986
score: 97.00139617919922
patch: - 1 :
rank: 986
score: 94.90187072753906
patch: return
rank: 986
score: 93.48658752441406
patch: Asserts
rank: 987
score: 97.20610809326172
patch: ret 1 ;
rank: 987
score: 96.99497985839844
patch: break false ;
rank: 987
score: 96.8705342610677
patch: } ;
rank: 987
score: 96.1336161295573
patch: - 1
rank: 987
score: 94.73802947998047
patch: else
rank: 987
score: 93.28067016601562
patch: result
rank: 988
score: 97.91461181640625
patch: return return $NUMBER$ ;
rank: 988
score: 97.20402526855469
patch: return ( ;
rank: 988
score: 97.10452270507812
patch: return year ;
rank: 988
score: 96.97974650065105
patch: * /
rank: 988
score: 96.32200113932292
patch: / ;
rank: 988
score: 96.09002685546875
patch: if (
rank: 988
score: 94.38949584960938
patch: ;
rank: 988
score: 93.27243041992188
patch: LOG
rank: 989
score: 96.05997721354167
patch: case 1
rank: 989
score: 94.3411636352539
patch: this
rank: 989
score: 93.257080078125
patch: /
rank: 990
score: 96.0352783203125
patch: b ;
rank: 990
score: 94.09944152832031
patch: long
rank: 990
score: 93.20069885253906
patch: Logger
rank: 991
score: 97.12625122070312
patch: return ( -
rank: 991
score: 95.99774169921875
patch: * ;
rank: 991
score: 94.03665161132812
patch: logger
rank: 991
score: 93.11836242675781
patch: throw
rank: 992
score: 97.07537841796875
patch: return 0 :
rank: 992
score: 96.26236979166667
patch: if ;
rank: 992
score: 96.18072509765625
patch: case ?
rank: 992
score: 93.006103515625
patch: public
rank: 993
score: 96.93452453613281
patch: return sum ;
rank: 993
score: 96.12272135416667
patch: throw ;
rank: 993
score: 94.86947631835938
patch: static
rank: 993
score: 93.90528869628906
patch: case
rank: 993
score: 93.00366973876953
patch: Thread
rank: 994
score: 95.99969482421875
patch: final ;
rank: 994
score: 94.53436279296875
patch: *
rank: 994
score: 94.26126861572266
patch: total
rank: 995
score: 97.04464721679688
patch: return ( Math
rank: 995
score: 93.92623901367188
patch: $STRING$
rank: 995
score: 93.7665023803711
patch: int
rank: 996
score: 94.05354309082031
patch: _
rank: 996
score: 92.9012222290039
patch: do
rank: 997
score: 92.7320556640625
patch: Double
rank: 998
score: 93.58648681640625
patch: break
rank: 998
score: 92.73127746582031
patch: buffer
rank: 999
score: 93.73558044433594
patch: :
rank: 999
score: 92.68025207519531
patch: out
rank: 1000
score: 93.73334503173828
patch: last
rank: 1000
score: 93.16767120361328
patch: ,
rank: 1000
score: 92.62189483642578
patch: buf
